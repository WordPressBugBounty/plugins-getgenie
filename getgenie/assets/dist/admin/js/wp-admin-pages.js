(() => {
  var __create = Object.create;
  var __defProp = Object.defineProperty;
  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
  var __getOwnPropNames = Object.getOwnPropertyNames;
  var __getProtoOf = Object.getPrototypeOf;
  var __hasOwnProp = Object.prototype.hasOwnProperty;
  var __require = /* @__PURE__ */ ((x3) => typeof require !== "undefined" ? require : typeof Proxy !== "undefined" ? new Proxy(x3, {
    get: (a2, b3) => (typeof require !== "undefined" ? require : a2)[b3]
  }) : x3)(function(x3) {
    if (typeof require !== "undefined")
      return require.apply(this, arguments);
    throw new Error('Dynamic require of "' + x3 + '" is not supported');
  });
  var __commonJS = (cb, mod) => function __require2() {
    return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
  };
  var __copyProps = (to4, from2, except, desc) => {
    if (from2 && typeof from2 === "object" || typeof from2 === "function") {
      for (let key of __getOwnPropNames(from2))
        if (!__hasOwnProp.call(to4, key) && key !== except)
          __defProp(to4, key, { get: () => from2[key], enumerable: !(desc = __getOwnPropDesc(from2, key)) || desc.enumerable });
    }
    return to4;
  };
  var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
    isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
    mod
  ));

  // external-global-plugin:react
  var require_react = __commonJS({
    "external-global-plugin:react"(exports, module) {
      module.exports = window.React;
    }
  });

  // node_modules/file-saver/dist/FileSaver.min.js
  var require_FileSaver_min = __commonJS({
    "node_modules/file-saver/dist/FileSaver.min.js"(exports, module) {
      (function(a2, b3) {
        if ("function" == typeof define && define.amd)
          define([], b3);
        else if ("undefined" != typeof exports)
          b3();
        else {
          b3(), a2.FileSaver = { exports: {} }.exports;
        }
      })(exports, function() {
        "use strict";
        function b3(a3, b4) {
          return "undefined" == typeof b4 ? b4 = { autoBom: false } : "object" != typeof b4 && (console.warn("Deprecated: Expected third argument to be a object"), b4 = { autoBom: !b4 }), b4.autoBom && /^\s*(?:text\/\S*|application\/xml|\S*\/\S*\+xml)\s*;.*charset\s*=\s*utf-8/i.test(a3.type) ? new Blob(["\uFEFF", a3], { type: a3.type }) : a3;
        }
        function c8(a3, b4, c9) {
          var d3 = new XMLHttpRequest();
          d3.open("GET", a3), d3.responseType = "blob", d3.onload = function() {
            g2(d3.response, b4, c9);
          }, d3.onerror = function() {
            console.error("could not download file");
          }, d3.send();
        }
        function d2(a3) {
          var b4 = new XMLHttpRequest();
          b4.open("HEAD", a3, false);
          try {
            b4.send();
          } catch (a4) {
          }
          return 200 <= b4.status && 299 >= b4.status;
        }
        function e7(a3) {
          try {
            a3.dispatchEvent(new MouseEvent("click"));
          } catch (c9) {
            var b4 = document.createEvent("MouseEvents");
            b4.initMouseEvent("click", true, true, window, 0, 0, 0, 80, 20, false, false, false, false, 0, null), a3.dispatchEvent(b4);
          }
        }
        var f2 = "object" == typeof window && window.window === window ? window : "object" == typeof self && self.self === self ? self : "object" == typeof global && global.global === global ? global : void 0, a2 = f2.navigator && /Macintosh/.test(navigator.userAgent) && /AppleWebKit/.test(navigator.userAgent) && !/Safari/.test(navigator.userAgent), g2 = f2.saveAs || ("object" != typeof window || window !== f2 ? function() {
        } : "download" in HTMLAnchorElement.prototype && !a2 ? function(b4, g3, h) {
          var i6 = f2.URL || f2.webkitURL, j3 = document.createElement("a");
          g3 = g3 || b4.name || "download", j3.download = g3, j3.rel = "noopener", "string" == typeof b4 ? (j3.href = b4, j3.origin === location.origin ? e7(j3) : d2(j3.href) ? c8(b4, g3, h) : e7(j3, j3.target = "_blank")) : (j3.href = i6.createObjectURL(b4), setTimeout(function() {
            i6.revokeObjectURL(j3.href);
          }, 4e4), setTimeout(function() {
            e7(j3);
          }, 0));
        } : "msSaveOrOpenBlob" in navigator ? function(f3, g3, h) {
          if (g3 = g3 || f3.name || "download", "string" != typeof f3)
            navigator.msSaveOrOpenBlob(b3(f3, h), g3);
          else if (d2(f3))
            c8(f3, g3, h);
          else {
            var i6 = document.createElement("a");
            i6.href = f3, i6.target = "_blank", setTimeout(function() {
              e7(i6);
            });
          }
        } : function(b4, d3, e8, g3) {
          if (g3 = g3 || open("", "_blank"), g3 && (g3.document.title = g3.document.body.innerText = "downloading..."), "string" == typeof b4)
            return c8(b4, d3, e8);
          var h = "application/octet-stream" === b4.type, i6 = /constructor/i.test(f2.HTMLElement) || f2.safari, j3 = /CriOS\/[\d]+/.test(navigator.userAgent);
          if ((j3 || h && i6 || a2) && "undefined" != typeof FileReader) {
            var k2 = new FileReader();
            k2.onloadend = function() {
              var a3 = k2.result;
              a3 = j3 ? a3 : a3.replace(/^data:[^;]*;/, "data:attachment/file;"), g3 ? g3.location.href = a3 : location = a3, g3 = null;
            }, k2.readAsDataURL(b4);
          } else {
            var l5 = f2.URL || f2.webkitURL, m4 = l5.createObjectURL(b4);
            g3 ? g3.location = m4 : location.href = m4, g3 = null, setTimeout(function() {
              l5.revokeObjectURL(m4);
            }, 4e4);
          }
        });
        f2.saveAs = g2.saveAs = g2, "undefined" != typeof module && (module.exports = g2);
      });
    }
  });

  // node_modules/@e965/xlsx/dist/cpexcel.js
  var require_cpexcel = __commonJS({
    "node_modules/@e965/xlsx/dist/cpexcel.js"(exports, module) {
      var cptable2 = { version: "1.15.0" };
      cptable2[437] = function() {
        var d2 = "\0\x07\b	\n\v\f\r\x1B !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~\x7F\xC7\xFC\xE9\xE2\xE4\xE0\xE5\xE7\xEA\xEB\xE8\xEF\xEE\xEC\xC4\xC5\xC9\xE6\xC6\xF4\xF6\xF2\xFB\xF9\xFF\xD6\xDC\xA2\xA3\xA5\u20A7\u0192\xE1\xED\xF3\xFA\xF1\xD1\xAA\xBA\xBF\u2310\xAC\xBD\xBC\xA1\xAB\xBB\u2591\u2592\u2593\u2502\u2524\u2561\u2562\u2556\u2555\u2563\u2551\u2557\u255D\u255C\u255B\u2510\u2514\u2534\u252C\u251C\u2500\u253C\u255E\u255F\u255A\u2554\u2569\u2566\u2560\u2550\u256C\u2567\u2568\u2564\u2565\u2559\u2558\u2552\u2553\u256B\u256A\u2518\u250C\u2588\u2584\u258C\u2590\u2580\u03B1\xDF\u0393\u03C0\u03A3\u03C3\xB5\u03C4\u03A6\u0398\u03A9\u03B4\u221E\u03C6\u03B5\u2229\u2261\xB1\u2265\u2264\u2320\u2321\xF7\u2248\xB0\u2219\xB7\u221A\u207F\xB2\u25A0\xA0", D5 = [], e7 = {};
        for (var i6 = 0; i6 != d2.length; ++i6) {
          if (d2.charCodeAt(i6) !== 65533)
            e7[d2.charAt(i6)] = i6;
          D5[i6] = d2.charAt(i6);
        }
        return { "enc": e7, "dec": D5 };
      }();
      cptable2[620] = function() {
        var d2 = "\0\x07\b	\n\v\f\r\x1B !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~\x7F\xC7\xFC\xE9\xE2\xE4\xE0\u0105\xE7\xEA\xEB\xE8\xEF\xEE\u0107\xC4\u0104\u0118\u0119\u0142\xF4\xF6\u0106\xFB\xF9\u015A\xD6\xDC\xA2\u0141\xA5\u015B\u0192\u0179\u017B\xF3\xD3\u0144\u0143\u017A\u017C\xBF\u2310\xAC\xBD\xBC\xA1\xAB\xBB\u2591\u2592\u2593\u2502\u2524\u2561\u2562\u2556\u2555\u2563\u2551\u2557\u255D\u255C\u255B\u2510\u2514\u2534\u252C\u251C\u2500\u253C\u255E\u255F\u255A\u2554\u2569\u2566\u2560\u2550\u256C\u2567\u2568\u2564\u2565\u2559\u2558\u2552\u2553\u256B\u256A\u2518\u250C\u2588\u2584\u258C\u2590\u2580\u03B1\xDF\u0393\u03C0\u03A3\u03C3\xB5\u03C4\u03A6\u0398\u03A9\u03B4\u221E\u03C6\u03B5\u2229\u2261\xB1\u2265\u2264\u2320\u2321\xF7\u2248\xB0\u2219\xB7\u221A\u207F\xB2\u25A0\xA0", D5 = [], e7 = {};
        for (var i6 = 0; i6 != d2.length; ++i6) {
          if (d2.charCodeAt(i6) !== 65533)
            e7[d2.charAt(i6)] = i6;
          D5[i6] = d2.charAt(i6);
        }
        return { "enc": e7, "dec": D5 };
      }();
      cptable2[737] = function() {
        var d2 = "\0\x07\b	\n\v\f\r\x1B !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~\x7F\u0391\u0392\u0393\u0394\u0395\u0396\u0397\u0398\u0399\u039A\u039B\u039C\u039D\u039E\u039F\u03A0\u03A1\u03A3\u03A4\u03A5\u03A6\u03A7\u03A8\u03A9\u03B1\u03B2\u03B3\u03B4\u03B5\u03B6\u03B7\u03B8\u03B9\u03BA\u03BB\u03BC\u03BD\u03BE\u03BF\u03C0\u03C1\u03C3\u03C2\u03C4\u03C5\u03C6\u03C7\u03C8\u2591\u2592\u2593\u2502\u2524\u2561\u2562\u2556\u2555\u2563\u2551\u2557\u255D\u255C\u255B\u2510\u2514\u2534\u252C\u251C\u2500\u253C\u255E\u255F\u255A\u2554\u2569\u2566\u2560\u2550\u256C\u2567\u2568\u2564\u2565\u2559\u2558\u2552\u2553\u256B\u256A\u2518\u250C\u2588\u2584\u258C\u2590\u2580\u03C9\u03AC\u03AD\u03AE\u03CA\u03AF\u03CC\u03CD\u03CB\u03CE\u0386\u0388\u0389\u038A\u038C\u038E\u038F\xB1\u2265\u2264\u03AA\u03AB\xF7\u2248\xB0\u2219\xB7\u221A\u207F\xB2\u25A0\xA0", D5 = [], e7 = {};
        for (var i6 = 0; i6 != d2.length; ++i6) {
          if (d2.charCodeAt(i6) !== 65533)
            e7[d2.charAt(i6)] = i6;
          D5[i6] = d2.charAt(i6);
        }
        return { "enc": e7, "dec": D5 };
      }();
      cptable2[850] = function() {
        var d2 = "\0\x07\b	\n\v\f\r\x1B !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~\x7F\xC7\xFC\xE9\xE2\xE4\xE0\xE5\xE7\xEA\xEB\xE8\xEF\xEE\xEC\xC4\xC5\xC9\xE6\xC6\xF4\xF6\xF2\xFB\xF9\xFF\xD6\xDC\xF8\xA3\xD8\xD7\u0192\xE1\xED\xF3\xFA\xF1\xD1\xAA\xBA\xBF\xAE\xAC\xBD\xBC\xA1\xAB\xBB\u2591\u2592\u2593\u2502\u2524\xC1\xC2\xC0\xA9\u2563\u2551\u2557\u255D\xA2\xA5\u2510\u2514\u2534\u252C\u251C\u2500\u253C\xE3\xC3\u255A\u2554\u2569\u2566\u2560\u2550\u256C\xA4\xF0\xD0\xCA\xCB\xC8\u0131\xCD\xCE\xCF\u2518\u250C\u2588\u2584\xA6\xCC\u2580\xD3\xDF\xD4\xD2\xF5\xD5\xB5\xFE\xDE\xDA\xDB\xD9\xFD\xDD\xAF\xB4\xAD\xB1\u2017\xBE\xB6\xA7\xF7\xB8\xB0\xA8\xB7\xB9\xB3\xB2\u25A0\xA0", D5 = [], e7 = {};
        for (var i6 = 0; i6 != d2.length; ++i6) {
          if (d2.charCodeAt(i6) !== 65533)
            e7[d2.charAt(i6)] = i6;
          D5[i6] = d2.charAt(i6);
        }
        return { "enc": e7, "dec": D5 };
      }();
      cptable2[852] = function() {
        var d2 = "\0\x07\b	\n\v\f\r\x1B !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~\x7F\xC7\xFC\xE9\xE2\xE4\u016F\u0107\xE7\u0142\xEB\u0150\u0151\xEE\u0179\xC4\u0106\xC9\u0139\u013A\xF4\xF6\u013D\u013E\u015A\u015B\xD6\xDC\u0164\u0165\u0141\xD7\u010D\xE1\xED\xF3\xFA\u0104\u0105\u017D\u017E\u0118\u0119\xAC\u017A\u010C\u015F\xAB\xBB\u2591\u2592\u2593\u2502\u2524\xC1\xC2\u011A\u015E\u2563\u2551\u2557\u255D\u017B\u017C\u2510\u2514\u2534\u252C\u251C\u2500\u253C\u0102\u0103\u255A\u2554\u2569\u2566\u2560\u2550\u256C\xA4\u0111\u0110\u010E\xCB\u010F\u0147\xCD\xCE\u011B\u2518\u250C\u2588\u2584\u0162\u016E\u2580\xD3\xDF\xD4\u0143\u0144\u0148\u0160\u0161\u0154\xDA\u0155\u0170\xFD\xDD\u0163\xB4\xAD\u02DD\u02DB\u02C7\u02D8\xA7\xF7\xB8\xB0\xA8\u02D9\u0171\u0158\u0159\u25A0\xA0", D5 = [], e7 = {};
        for (var i6 = 0; i6 != d2.length; ++i6) {
          if (d2.charCodeAt(i6) !== 65533)
            e7[d2.charAt(i6)] = i6;
          D5[i6] = d2.charAt(i6);
        }
        return { "enc": e7, "dec": D5 };
      }();
      cptable2[857] = function() {
        var d2 = "\0\x07\b	\n\v\f\r\x1B !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~\x7F\xC7\xFC\xE9\xE2\xE4\xE0\xE5\xE7\xEA\xEB\xE8\xEF\xEE\u0131\xC4\xC5\xC9\xE6\xC6\xF4\xF6\xF2\xFB\xF9\u0130\xD6\xDC\xF8\xA3\xD8\u015E\u015F\xE1\xED\xF3\xFA\xF1\xD1\u011E\u011F\xBF\xAE\xAC\xBD\xBC\xA1\xAB\xBB\u2591\u2592\u2593\u2502\u2524\xC1\xC2\xC0\xA9\u2563\u2551\u2557\u255D\xA2\xA5\u2510\u2514\u2534\u252C\u251C\u2500\u253C\xE3\xC3\u255A\u2554\u2569\u2566\u2560\u2550\u256C\xA4\xBA\xAA\xCA\xCB\xC8\uFFFD\xCD\xCE\xCF\u2518\u250C\u2588\u2584\xA6\xCC\u2580\xD3\xDF\xD4\xD2\xF5\xD5\xB5\uFFFD\xD7\xDA\xDB\xD9\xEC\xFF\xAF\xB4\xAD\xB1\uFFFD\xBE\xB6\xA7\xF7\xB8\xB0\xA8\xB7\xB9\xB3\xB2\u25A0\xA0", D5 = [], e7 = {};
        for (var i6 = 0; i6 != d2.length; ++i6) {
          if (d2.charCodeAt(i6) !== 65533)
            e7[d2.charAt(i6)] = i6;
          D5[i6] = d2.charAt(i6);
        }
        return { "enc": e7, "dec": D5 };
      }();
      cptable2[861] = function() {
        var d2 = "\0\x07\b	\n\v\f\r\x1B !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~\x7F\xC7\xFC\xE9\xE2\xE4\xE0\xE5\xE7\xEA\xEB\xE8\xD0\xF0\xDE\xC4\xC5\xC9\xE6\xC6\xF4\xF6\xFE\xFB\xDD\xFD\xD6\xDC\xF8\xA3\xD8\u20A7\u0192\xE1\xED\xF3\xFA\xC1\xCD\xD3\xDA\xBF\u2310\xAC\xBD\xBC\xA1\xAB\xBB\u2591\u2592\u2593\u2502\u2524\u2561\u2562\u2556\u2555\u2563\u2551\u2557\u255D\u255C\u255B\u2510\u2514\u2534\u252C\u251C\u2500\u253C\u255E\u255F\u255A\u2554\u2569\u2566\u2560\u2550\u256C\u2567\u2568\u2564\u2565\u2559\u2558\u2552\u2553\u256B\u256A\u2518\u250C\u2588\u2584\u258C\u2590\u2580\u03B1\xDF\u0393\u03C0\u03A3\u03C3\xB5\u03C4\u03A6\u0398\u03A9\u03B4\u221E\u03C6\u03B5\u2229\u2261\xB1\u2265\u2264\u2320\u2321\xF7\u2248\xB0\u2219\xB7\u221A\u207F\xB2\u25A0\xA0", D5 = [], e7 = {};
        for (var i6 = 0; i6 != d2.length; ++i6) {
          if (d2.charCodeAt(i6) !== 65533)
            e7[d2.charAt(i6)] = i6;
          D5[i6] = d2.charAt(i6);
        }
        return { "enc": e7, "dec": D5 };
      }();
      cptable2[865] = function() {
        var d2 = "\0\x07\b	\n\v\f\r\x1B !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~\x7F\xC7\xFC\xE9\xE2\xE4\xE0\xE5\xE7\xEA\xEB\xE8\xEF\xEE\xEC\xC4\xC5\xC9\xE6\xC6\xF4\xF6\xF2\xFB\xF9\xFF\xD6\xDC\xF8\xA3\xD8\u20A7\u0192\xE1\xED\xF3\xFA\xF1\xD1\xAA\xBA\xBF\u2310\xAC\xBD\xBC\xA1\xAB\xA4\u2591\u2592\u2593\u2502\u2524\u2561\u2562\u2556\u2555\u2563\u2551\u2557\u255D\u255C\u255B\u2510\u2514\u2534\u252C\u251C\u2500\u253C\u255E\u255F\u255A\u2554\u2569\u2566\u2560\u2550\u256C\u2567\u2568\u2564\u2565\u2559\u2558\u2552\u2553\u256B\u256A\u2518\u250C\u2588\u2584\u258C\u2590\u2580\u03B1\xDF\u0393\u03C0\u03A3\u03C3\xB5\u03C4\u03A6\u0398\u03A9\u03B4\u221E\u03C6\u03B5\u2229\u2261\xB1\u2265\u2264\u2320\u2321\xF7\u2248\xB0\u2219\xB7\u221A\u207F\xB2\u25A0\xA0", D5 = [], e7 = {};
        for (var i6 = 0; i6 != d2.length; ++i6) {
          if (d2.charCodeAt(i6) !== 65533)
            e7[d2.charAt(i6)] = i6;
          D5[i6] = d2.charAt(i6);
        }
        return { "enc": e7, "dec": D5 };
      }();
      cptable2[866] = function() {
        var d2 = "\0\x07\b	\n\v\f\r\x1B !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~\x7F\u0410\u0411\u0412\u0413\u0414\u0415\u0416\u0417\u0418\u0419\u041A\u041B\u041C\u041D\u041E\u041F\u0420\u0421\u0422\u0423\u0424\u0425\u0426\u0427\u0428\u0429\u042A\u042B\u042C\u042D\u042E\u042F\u0430\u0431\u0432\u0433\u0434\u0435\u0436\u0437\u0438\u0439\u043A\u043B\u043C\u043D\u043E\u043F\u2591\u2592\u2593\u2502\u2524\u2561\u2562\u2556\u2555\u2563\u2551\u2557\u255D\u255C\u255B\u2510\u2514\u2534\u252C\u251C\u2500\u253C\u255E\u255F\u255A\u2554\u2569\u2566\u2560\u2550\u256C\u2567\u2568\u2564\u2565\u2559\u2558\u2552\u2553\u256B\u256A\u2518\u250C\u2588\u2584\u258C\u2590\u2580\u0440\u0441\u0442\u0443\u0444\u0445\u0446\u0447\u0448\u0449\u044A\u044B\u044C\u044D\u044E\u044F\u0401\u0451\u0404\u0454\u0407\u0457\u040E\u045E\xB0\u2219\xB7\u221A\u2116\xA4\u25A0\xA0", D5 = [], e7 = {};
        for (var i6 = 0; i6 != d2.length; ++i6) {
          if (d2.charCodeAt(i6) !== 65533)
            e7[d2.charAt(i6)] = i6;
          D5[i6] = d2.charAt(i6);
        }
        return { "enc": e7, "dec": D5 };
      }();
      cptable2[874] = function() {
        var d2 = "\0\x07\b	\n\v\f\r\x1B !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~\x7F\u20AC\uFFFD\uFFFD\uFFFD\uFFFD\u2026\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u2018\u2019\u201C\u201D\u2022\u2013\u2014\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\xA0\u0E01\u0E02\u0E03\u0E04\u0E05\u0E06\u0E07\u0E08\u0E09\u0E0A\u0E0B\u0E0C\u0E0D\u0E0E\u0E0F\u0E10\u0E11\u0E12\u0E13\u0E14\u0E15\u0E16\u0E17\u0E18\u0E19\u0E1A\u0E1B\u0E1C\u0E1D\u0E1E\u0E1F\u0E20\u0E21\u0E22\u0E23\u0E24\u0E25\u0E26\u0E27\u0E28\u0E29\u0E2A\u0E2B\u0E2C\u0E2D\u0E2E\u0E2F\u0E30\u0E31\u0E32\u0E33\u0E34\u0E35\u0E36\u0E37\u0E38\u0E39\u0E3A\uFFFD\uFFFD\uFFFD\uFFFD\u0E3F\u0E40\u0E41\u0E42\u0E43\u0E44\u0E45\u0E46\u0E47\u0E48\u0E49\u0E4A\u0E4B\u0E4C\u0E4D\u0E4E\u0E4F\u0E50\u0E51\u0E52\u0E53\u0E54\u0E55\u0E56\u0E57\u0E58\u0E59\u0E5A\u0E5B\uFFFD\uFFFD\uFFFD\uFFFD", D5 = [], e7 = {};
        for (var i6 = 0; i6 != d2.length; ++i6) {
          if (d2.charCodeAt(i6) !== 65533)
            e7[d2.charAt(i6)] = i6;
          D5[i6] = d2.charAt(i6);
        }
        return { "enc": e7, "dec": D5 };
      }();
      cptable2[895] = function() {
        var d2 = "\0\x07\b	\n\v\f\r\x1B !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~\x7F\u010C\xFC\xE9\u010F\xE4\u010E\u0164\u010D\u011B\u011A\u0139\xCD\u013E\u01EA\xC4\xC1\xC9\u017E\u017D\xF4\xF6\xD3\u016F\xDA\xFD\xD6\xDC\u0160\u013D\xDD\u0158\u0165\xE1\xED\xF3\xFA\u0148\u0147\u016E\xD4\u0161\u0159\u0155\u0154\xBC\xA7\xAB\xBB\u2591\u2592\u2593\u2502\u2524\u2561\u2562\u2556\u2555\u2563\u2551\u2557\u255D\u255C\u255B\u2510\u2514\u2534\u252C\u251C\u2500\u253C\u255E\u255F\u255A\u2554\u2569\u2566\u2560\u2550\u256C\u2567\u2568\u2564\u2565\u2559\u2558\u2552\u2553\u256B\u256A\u2518\u250C\u2588\u2584\u258C\u2590\u2580\u03B1\xDF\u0393\u03C0\u03A3\u03C3\xB5\u03C4\u03A6\u0398\u03A9\u03B4\u221E\u03C6\u03B5\u2229\u2261\xB1\u2265\u2264\u2320\u2321\xF7\u2248\xB0\u2219\xB7\u221A\u207F\xB2\u25A0\xA0", D5 = [], e7 = {};
        for (var i6 = 0; i6 != d2.length; ++i6) {
          if (d2.charCodeAt(i6) !== 65533)
            e7[d2.charAt(i6)] = i6;
          D5[i6] = d2.charAt(i6);
        }
        return { "enc": e7, "dec": D5 };
      }();
      cptable2[932] = function() {
        var d2 = [], e7 = {}, D5 = [], j3;
        D5[0] = "\0\x07\b	\n\v\f\r\x1B !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~\x7F\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFF61\uFF62\uFF63\uFF64\uFF65\uFF66\uFF67\uFF68\uFF69\uFF6A\uFF6B\uFF6C\uFF6D\uFF6E\uFF6F\uFF70\uFF71\uFF72\uFF73\uFF74\uFF75\uFF76\uFF77\uFF78\uFF79\uFF7A\uFF7B\uFF7C\uFF7D\uFF7E\uFF7F\uFF80\uFF81\uFF82\uFF83\uFF84\uFF85\uFF86\uFF87\uFF88\uFF89\uFF8A\uFF8B\uFF8C\uFF8D\uFF8E\uFF8F\uFF90\uFF91\uFF92\uFF93\uFF94\uFF95\uFF96\uFF97\uFF98\uFF99\uFF9A\uFF9B\uFF9C\uFF9D\uFF9E\uFF9F\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD".split("");
        for (j3 = 0; j3 != D5[0].length; ++j3)
          if (D5[0][j3].charCodeAt(0) !== 65533) {
            e7[D5[0][j3]] = 0 + j3;
            d2[0 + j3] = D5[0][j3];
          }
        D5[129] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u3000\u3001\u3002\uFF0C\uFF0E\u30FB\uFF1A\uFF1B\uFF1F\uFF01\u309B\u309C\xB4\uFF40\xA8\uFF3E\uFFE3\uFF3F\u30FD\u30FE\u309D\u309E\u3003\u4EDD\u3005\u3006\u3007\u30FC\u2015\u2010\uFF0F\uFF3C\uFF5E\u2225\uFF5C\u2026\u2025\u2018\u2019\u201C\u201D\uFF08\uFF09\u3014\u3015\uFF3B\uFF3D\uFF5B\uFF5D\u3008\u3009\u300A\u300B\u300C\u300D\u300E\u300F\u3010\u3011\uFF0B\uFF0D\xB1\xD7\uFFFD\xF7\uFF1D\u2260\uFF1C\uFF1E\u2266\u2267\u221E\u2234\u2642\u2640\xB0\u2032\u2033\u2103\uFFE5\uFF04\uFFE0\uFFE1\uFF05\uFF03\uFF06\uFF0A\uFF20\xA7\u2606\u2605\u25CB\u25CF\u25CE\u25C7\u25C6\u25A1\u25A0\u25B3\u25B2\u25BD\u25BC\u203B\u3012\u2192\u2190\u2191\u2193\u3013\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u2208\u220B\u2286\u2287\u2282\u2283\u222A\u2229\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u2227\u2228\uFFE2\u21D2\u21D4\u2200\u2203\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u2220\u22A5\u2312\u2202\u2207\u2261\u2252\u226A\u226B\u221A\u223D\u221D\u2235\u222B\u222C\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u212B\u2030\u266F\u266D\u266A\u2020\u2021\xB6\uFFFD\uFFFD\uFFFD\uFFFD\u25EF\uFFFD\uFFFD\uFFFD".split("");
        for (j3 = 0; j3 != D5[129].length; ++j3)
          if (D5[129][j3].charCodeAt(0) !== 65533) {
            e7[D5[129][j3]] = 33024 + j3;
            d2[33024 + j3] = D5[129][j3];
          }
        D5[130] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFF10\uFF11\uFF12\uFF13\uFF14\uFF15\uFF16\uFF17\uFF18\uFF19\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFF21\uFF22\uFF23\uFF24\uFF25\uFF26\uFF27\uFF28\uFF29\uFF2A\uFF2B\uFF2C\uFF2D\uFF2E\uFF2F\uFF30\uFF31\uFF32\uFF33\uFF34\uFF35\uFF36\uFF37\uFF38\uFF39\uFF3A\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFF41\uFF42\uFF43\uFF44\uFF45\uFF46\uFF47\uFF48\uFF49\uFF4A\uFF4B\uFF4C\uFF4D\uFF4E\uFF4F\uFF50\uFF51\uFF52\uFF53\uFF54\uFF55\uFF56\uFF57\uFF58\uFF59\uFF5A\uFFFD\uFFFD\uFFFD\uFFFD\u3041\u3042\u3043\u3044\u3045\u3046\u3047\u3048\u3049\u304A\u304B\u304C\u304D\u304E\u304F\u3050\u3051\u3052\u3053\u3054\u3055\u3056\u3057\u3058\u3059\u305A\u305B\u305C\u305D\u305E\u305F\u3060\u3061\u3062\u3063\u3064\u3065\u3066\u3067\u3068\u3069\u306A\u306B\u306C\u306D\u306E\u306F\u3070\u3071\u3072\u3073\u3074\u3075\u3076\u3077\u3078\u3079\u307A\u307B\u307C\u307D\u307E\u307F\u3080\u3081\u3082\u3083\u3084\u3085\u3086\u3087\u3088\u3089\u308A\u308B\u308C\u308D\u308E\u308F\u3090\u3091\u3092\u3093\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD".split("");
        for (j3 = 0; j3 != D5[130].length; ++j3)
          if (D5[130][j3].charCodeAt(0) !== 65533) {
            e7[D5[130][j3]] = 33280 + j3;
            d2[33280 + j3] = D5[130][j3];
          }
        D5[131] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u30A1\u30A2\u30A3\u30A4\u30A5\u30A6\u30A7\u30A8\u30A9\u30AA\u30AB\u30AC\u30AD\u30AE\u30AF\u30B0\u30B1\u30B2\u30B3\u30B4\u30B5\u30B6\u30B7\u30B8\u30B9\u30BA\u30BB\u30BC\u30BD\u30BE\u30BF\u30C0\u30C1\u30C2\u30C3\u30C4\u30C5\u30C6\u30C7\u30C8\u30C9\u30CA\u30CB\u30CC\u30CD\u30CE\u30CF\u30D0\u30D1\u30D2\u30D3\u30D4\u30D5\u30D6\u30D7\u30D8\u30D9\u30DA\u30DB\u30DC\u30DD\u30DE\u30DF\uFFFD\u30E0\u30E1\u30E2\u30E3\u30E4\u30E5\u30E6\u30E7\u30E8\u30E9\u30EA\u30EB\u30EC\u30ED\u30EE\u30EF\u30F0\u30F1\u30F2\u30F3\u30F4\u30F5\u30F6\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u0391\u0392\u0393\u0394\u0395\u0396\u0397\u0398\u0399\u039A\u039B\u039C\u039D\u039E\u039F\u03A0\u03A1\u03A3\u03A4\u03A5\u03A6\u03A7\u03A8\u03A9\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u03B1\u03B2\u03B3\u03B4\u03B5\u03B6\u03B7\u03B8\u03B9\u03BA\u03BB\u03BC\u03BD\u03BE\u03BF\u03C0\u03C1\u03C3\u03C4\u03C5\u03C6\u03C7\u03C8\u03C9\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD".split("");
        for (j3 = 0; j3 != D5[131].length; ++j3)
          if (D5[131][j3].charCodeAt(0) !== 65533) {
            e7[D5[131][j3]] = 33536 + j3;
            d2[33536 + j3] = D5[131][j3];
          }
        D5[132] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u0410\u0411\u0412\u0413\u0414\u0415\u0401\u0416\u0417\u0418\u0419\u041A\u041B\u041C\u041D\u041E\u041F\u0420\u0421\u0422\u0423\u0424\u0425\u0426\u0427\u0428\u0429\u042A\u042B\u042C\u042D\u042E\u042F\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u0430\u0431\u0432\u0433\u0434\u0435\u0451\u0436\u0437\u0438\u0439\u043A\u043B\u043C\u043D\uFFFD\u043E\u043F\u0440\u0441\u0442\u0443\u0444\u0445\u0446\u0447\u0448\u0449\u044A\u044B\u044C\u044D\u044E\u044F\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u2500\u2502\u250C\u2510\u2518\u2514\u251C\u252C\u2524\u2534\u253C\u2501\u2503\u250F\u2513\u251B\u2517\u2523\u2533\u252B\u253B\u254B\u2520\u252F\u2528\u2537\u253F\u251D\u2530\u2525\u2538\u2542\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD".split("");
        for (j3 = 0; j3 != D5[132].length; ++j3)
          if (D5[132][j3].charCodeAt(0) !== 65533) {
            e7[D5[132][j3]] = 33792 + j3;
            d2[33792 + j3] = D5[132][j3];
          }
        D5[135] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u2460\u2461\u2462\u2463\u2464\u2465\u2466\u2467\u2468\u2469\u246A\u246B\u246C\u246D\u246E\u246F\u2470\u2471\u2472\u2473\u2160\u2161\u2162\u2163\u2164\u2165\u2166\u2167\u2168\u2169\uFFFD\u3349\u3314\u3322\u334D\u3318\u3327\u3303\u3336\u3351\u3357\u330D\u3326\u3323\u332B\u334A\u333B\u339C\u339D\u339E\u338E\u338F\u33C4\u33A1\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u337B\uFFFD\u301D\u301F\u2116\u33CD\u2121\u32A4\u32A5\u32A6\u32A7\u32A8\u3231\u3232\u3239\u337E\u337D\u337C\u2252\u2261\u222B\u222E\u2211\u221A\u22A5\u2220\u221F\u22BF\u2235\u2229\u222A\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD".split("");
        for (j3 = 0; j3 != D5[135].length; ++j3)
          if (D5[135][j3].charCodeAt(0) !== 65533) {
            e7[D5[135][j3]] = 34560 + j3;
            d2[34560 + j3] = D5[135][j3];
          }
        D5[136] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u4E9C\u5516\u5A03\u963F\u54C0\u611B\u6328\u59F6\u9022\u8475\u831C\u7A50\u60AA\u63E1\u6E25\u65ED\u8466\u82A6\u9BF5\u6893\u5727\u65A1\u6271\u5B9B\u59D0\u867B\u98F4\u7D62\u7DBE\u9B8E\u6216\u7C9F\u88B7\u5B89\u5EB5\u6309\u6697\u6848\u95C7\u978D\u674F\u4EE5\u4F0A\u4F4D\u4F9D\u5049\u56F2\u5937\u59D4\u5A01\u5C09\u60DF\u610F\u6170\u6613\u6905\u70BA\u754F\u7570\u79FB\u7DAD\u7DEF\u80C3\u840E\u8863\u8B02\u9055\u907A\u533B\u4E95\u4EA5\u57DF\u80B2\u90C1\u78EF\u4E00\u58F1\u6EA2\u9038\u7A32\u8328\u828B\u9C2F\u5141\u5370\u54BD\u54E1\u56E0\u59FB\u5F15\u98F2\u6DEB\u80E4\u852D\uFFFD\uFFFD\uFFFD".split("");
        for (j3 = 0; j3 != D5[136].length; ++j3)
          if (D5[136][j3].charCodeAt(0) !== 65533) {
            e7[D5[136][j3]] = 34816 + j3;
            d2[34816 + j3] = D5[136][j3];
          }
        D5[137] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u9662\u9670\u96A0\u97FB\u540B\u53F3\u5B87\u70CF\u7FBD\u8FC2\u96E8\u536F\u9D5C\u7ABA\u4E11\u7893\u81FC\u6E26\u5618\u5504\u6B1D\u851A\u9C3B\u59E5\u53A9\u6D66\u74DC\u958F\u5642\u4E91\u904B\u96F2\u834F\u990C\u53E1\u55B6\u5B30\u5F71\u6620\u66F3\u6804\u6C38\u6CF3\u6D29\u745B\u76C8\u7A4E\u9834\u82F1\u885B\u8A60\u92ED\u6DB2\u75AB\u76CA\u99C5\u60A6\u8B01\u8D8A\u95B2\u698E\u53AD\u5186\uFFFD\u5712\u5830\u5944\u5BB4\u5EF6\u6028\u63A9\u63F4\u6CBF\u6F14\u708E\u7114\u7159\u71D5\u733F\u7E01\u8276\u82D1\u8597\u9060\u925B\u9D1B\u5869\u65BC\u6C5A\u7525\u51F9\u592E\u5965\u5F80\u5FDC\u62BC\u65FA\u6A2A\u6B27\u6BB4\u738B\u7FC1\u8956\u9D2C\u9D0E\u9EC4\u5CA1\u6C96\u837B\u5104\u5C4B\u61B6\u81C6\u6876\u7261\u4E59\u4FFA\u5378\u6069\u6E29\u7A4F\u97F3\u4E0B\u5316\u4EEE\u4F55\u4F3D\u4FA1\u4F73\u52A0\u53EF\u5609\u590F\u5AC1\u5BB6\u5BE1\u79D1\u6687\u679C\u67B6\u6B4C\u6CB3\u706B\u73C2\u798D\u79BE\u7A3C\u7B87\u82B1\u82DB\u8304\u8377\u83EF\u83D3\u8766\u8AB2\u5629\u8CA8\u8FE6\u904E\u971E\u868A\u4FC4\u5CE8\u6211\u7259\u753B\u81E5\u82BD\u86FE\u8CC0\u96C5\u9913\u99D5\u4ECB\u4F1A\u89E3\u56DE\u584A\u58CA\u5EFB\u5FEB\u602A\u6094\u6062\u61D0\u6212\u62D0\u6539\uFFFD\uFFFD\uFFFD".split("");
        for (j3 = 0; j3 != D5[137].length; ++j3)
          if (D5[137][j3].charCodeAt(0) !== 65533) {
            e7[D5[137][j3]] = 35072 + j3;
            d2[35072 + j3] = D5[137][j3];
          }
        D5[138] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u9B41\u6666\u68B0\u6D77\u7070\u754C\u7686\u7D75\u82A5\u87F9\u958B\u968E\u8C9D\u51F1\u52BE\u5916\u54B3\u5BB3\u5D16\u6168\u6982\u6DAF\u788D\u84CB\u8857\u8A72\u93A7\u9AB8\u6D6C\u99A8\u86D9\u57A3\u67FF\u86CE\u920E\u5283\u5687\u5404\u5ED3\u62E1\u64B9\u683C\u6838\u6BBB\u7372\u78BA\u7A6B\u899A\u89D2\u8D6B\u8F03\u90ED\u95A3\u9694\u9769\u5B66\u5CB3\u697D\u984D\u984E\u639B\u7B20\u6A2B\uFFFD\u6A7F\u68B6\u9C0D\u6F5F\u5272\u559D\u6070\u62EC\u6D3B\u6E07\u6ED1\u845B\u8910\u8F44\u4E14\u9C39\u53F6\u691B\u6A3A\u9784\u682A\u515C\u7AC3\u84B2\u91DC\u938C\u565B\u9D28\u6822\u8305\u8431\u7CA5\u5208\u82C5\u74E6\u4E7E\u4F83\u51A0\u5BD2\u520A\u52D8\u52E7\u5DFB\u559A\u582A\u59E6\u5B8C\u5B98\u5BDB\u5E72\u5E79\u60A3\u611F\u6163\u61BE\u63DB\u6562\u67D1\u6853\u68FA\u6B3E\u6B53\u6C57\u6F22\u6F97\u6F45\u74B0\u7518\u76E3\u770B\u7AFF\u7BA1\u7C21\u7DE9\u7F36\u7FF0\u809D\u8266\u839E\u89B3\u8ACC\u8CAB\u9084\u9451\u9593\u9591\u95A2\u9665\u97D3\u9928\u8218\u4E38\u542B\u5CB8\u5DCC\u73A9\u764C\u773C\u5CA9\u7FEB\u8D0B\u96C1\u9811\u9854\u9858\u4F01\u4F0E\u5371\u559C\u5668\u57FA\u5947\u5B09\u5BC4\u5C90\u5E0C\u5E7E\u5FCC\u63EE\u673A\u65D7\u65E2\u671F\u68CB\u68C4\uFFFD\uFFFD\uFFFD".split("");
        for (j3 = 0; j3 != D5[138].length; ++j3)
          if (D5[138][j3].charCodeAt(0) !== 65533) {
            e7[D5[138][j3]] = 35328 + j3;
            d2[35328 + j3] = D5[138][j3];
          }
        D5[139] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u6A5F\u5E30\u6BC5\u6C17\u6C7D\u757F\u7948\u5B63\u7A00\u7D00\u5FBD\u898F\u8A18\u8CB4\u8D77\u8ECC\u8F1D\u98E2\u9A0E\u9B3C\u4E80\u507D\u5100\u5993\u5B9C\u622F\u6280\u64EC\u6B3A\u72A0\u7591\u7947\u7FA9\u87FB\u8ABC\u8B70\u63AC\u83CA\u97A0\u5409\u5403\u55AB\u6854\u6A58\u8A70\u7827\u6775\u9ECD\u5374\u5BA2\u811A\u8650\u9006\u4E18\u4E45\u4EC7\u4F11\u53CA\u5438\u5BAE\u5F13\u6025\u6551\uFFFD\u673D\u6C42\u6C72\u6CE3\u7078\u7403\u7A76\u7AAE\u7B08\u7D1A\u7CFE\u7D66\u65E7\u725B\u53BB\u5C45\u5DE8\u62D2\u62E0\u6319\u6E20\u865A\u8A31\u8DDD\u92F8\u6F01\u79A6\u9B5A\u4EA8\u4EAB\u4EAC\u4F9B\u4FA0\u50D1\u5147\u7AF6\u5171\u51F6\u5354\u5321\u537F\u53EB\u55AC\u5883\u5CE1\u5F37\u5F4A\u602F\u6050\u606D\u631F\u6559\u6A4B\u6CC1\u72C2\u72ED\u77EF\u80F8\u8105\u8208\u854E\u90F7\u93E1\u97FF\u9957\u9A5A\u4EF0\u51DD\u5C2D\u6681\u696D\u5C40\u66F2\u6975\u7389\u6850\u7C81\u50C5\u52E4\u5747\u5DFE\u9326\u65A4\u6B23\u6B3D\u7434\u7981\u79BD\u7B4B\u7DCA\u82B9\u83CC\u887F\u895F\u8B39\u8FD1\u91D1\u541F\u9280\u4E5D\u5036\u53E5\u533A\u72D7\u7396\u77E9\u82E6\u8EAF\u99C6\u99C8\u99D2\u5177\u611A\u865E\u55B0\u7A7A\u5076\u5BD3\u9047\u9685\u4E32\u6ADB\u91E7\u5C51\u5C48\uFFFD\uFFFD\uFFFD".split("");
        for (j3 = 0; j3 != D5[139].length; ++j3)
          if (D5[139][j3].charCodeAt(0) !== 65533) {
            e7[D5[139][j3]] = 35584 + j3;
            d2[35584 + j3] = D5[139][j3];
          }
        D5[140] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u6398\u7A9F\u6C93\u9774\u8F61\u7AAA\u718A\u9688\u7C82\u6817\u7E70\u6851\u936C\u52F2\u541B\u85AB\u8A13\u7FA4\u8ECD\u90E1\u5366\u8888\u7941\u4FC2\u50BE\u5211\u5144\u5553\u572D\u73EA\u578B\u5951\u5F62\u5F84\u6075\u6176\u6167\u61A9\u63B2\u643A\u656C\u666F\u6842\u6E13\u7566\u7A3D\u7CFB\u7D4C\u7D99\u7E4B\u7F6B\u830E\u834A\u86CD\u8A08\u8A63\u8B66\u8EFD\u981A\u9D8F\u82B8\u8FCE\u9BE8\uFFFD\u5287\u621F\u6483\u6FC0\u9699\u6841\u5091\u6B20\u6C7A\u6F54\u7A74\u7D50\u8840\u8A23\u6708\u4EF6\u5039\u5026\u5065\u517C\u5238\u5263\u55A7\u570F\u5805\u5ACC\u5EFA\u61B2\u61F8\u62F3\u6372\u691C\u6A29\u727D\u72AC\u732E\u7814\u786F\u7D79\u770C\u80A9\u898B\u8B19\u8CE2\u8ED2\u9063\u9375\u967A\u9855\u9A13\u9E78\u5143\u539F\u53B3\u5E7B\u5F26\u6E1B\u6E90\u7384\u73FE\u7D43\u8237\u8A00\u8AFA\u9650\u4E4E\u500B\u53E4\u547C\u56FA\u59D1\u5B64\u5DF1\u5EAB\u5F27\u6238\u6545\u67AF\u6E56\u72D0\u7CCA\u88B4\u80A1\u80E1\u83F0\u864E\u8A87\u8DE8\u9237\u96C7\u9867\u9F13\u4E94\u4E92\u4F0D\u5348\u5449\u543E\u5A2F\u5F8C\u5FA1\u609F\u68A7\u6A8E\u745A\u7881\u8A9E\u8AA4\u8B77\u9190\u4E5E\u9BC9\u4EA4\u4F7C\u4FAF\u5019\u5016\u5149\u516C\u529F\u52B9\u52FE\u539A\u53E3\u5411\uFFFD\uFFFD\uFFFD".split("");
        for (j3 = 0; j3 != D5[140].length; ++j3)
          if (D5[140][j3].charCodeAt(0) !== 65533) {
            e7[D5[140][j3]] = 35840 + j3;
            d2[35840 + j3] = D5[140][j3];
          }
        D5[141] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u540E\u5589\u5751\u57A2\u597D\u5B54\u5B5D\u5B8F\u5DE5\u5DE7\u5DF7\u5E78\u5E83\u5E9A\u5EB7\u5F18\u6052\u614C\u6297\u62D8\u63A7\u653B\u6602\u6643\u66F4\u676D\u6821\u6897\u69CB\u6C5F\u6D2A\u6D69\u6E2F\u6E9D\u7532\u7687\u786C\u7A3F\u7CE0\u7D05\u7D18\u7D5E\u7DB1\u8015\u8003\u80AF\u80B1\u8154\u818F\u822A\u8352\u884C\u8861\u8B1B\u8CA2\u8CFC\u90CA\u9175\u9271\u783F\u92FC\u95A4\u964D\uFFFD\u9805\u9999\u9AD8\u9D3B\u525B\u52AB\u53F7\u5408\u58D5\u62F7\u6FE0\u8C6A\u8F5F\u9EB9\u514B\u523B\u544A\u56FD\u7A40\u9177\u9D60\u9ED2\u7344\u6F09\u8170\u7511\u5FFD\u60DA\u9AA8\u72DB\u8FBC\u6B64\u9803\u4ECA\u56F0\u5764\u58BE\u5A5A\u6068\u61C7\u660F\u6606\u6839\u68B1\u6DF7\u75D5\u7D3A\u826E\u9B42\u4E9B\u4F50\u53C9\u5506\u5D6F\u5DE6\u5DEE\u67FB\u6C99\u7473\u7802\u8A50\u9396\u88DF\u5750\u5EA7\u632B\u50B5\u50AC\u518D\u6700\u54C9\u585E\u59BB\u5BB0\u5F69\u624D\u63A1\u683D\u6B73\u6E08\u707D\u91C7\u7280\u7815\u7826\u796D\u658E\u7D30\u83DC\u88C1\u8F09\u969B\u5264\u5728\u6750\u7F6A\u8CA1\u51B4\u5742\u962A\u583A\u698A\u80B4\u54B2\u5D0E\u57FC\u7895\u9DFA\u4F5C\u524A\u548B\u643E\u6628\u6714\u67F5\u7A84\u7B56\u7D22\u932F\u685C\u9BAD\u7B39\u5319\u518A\u5237\uFFFD\uFFFD\uFFFD".split("");
        for (j3 = 0; j3 != D5[141].length; ++j3)
          if (D5[141][j3].charCodeAt(0) !== 65533) {
            e7[D5[141][j3]] = 36096 + j3;
            d2[36096 + j3] = D5[141][j3];
          }
        D5[142] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u5BDF\u62F6\u64AE\u64E6\u672D\u6BBA\u85A9\u96D1\u7690\u9BD6\u634C\u9306\u9BAB\u76BF\u6652\u4E09\u5098\u53C2\u5C71\u60E8\u6492\u6563\u685F\u71E6\u73CA\u7523\u7B97\u7E82\u8695\u8B83\u8CDB\u9178\u9910\u65AC\u66AB\u6B8B\u4ED5\u4ED4\u4F3A\u4F7F\u523A\u53F8\u53F2\u55E3\u56DB\u58EB\u59CB\u59C9\u59FF\u5B50\u5C4D\u5E02\u5E2B\u5FD7\u601D\u6307\u652F\u5B5C\u65AF\u65BD\u65E8\u679D\u6B62\uFFFD\u6B7B\u6C0F\u7345\u7949\u79C1\u7CF8\u7D19\u7D2B\u80A2\u8102\u81F3\u8996\u8A5E\u8A69\u8A66\u8A8C\u8AEE\u8CC7\u8CDC\u96CC\u98FC\u6B6F\u4E8B\u4F3C\u4F8D\u5150\u5B57\u5BFA\u6148\u6301\u6642\u6B21\u6ECB\u6CBB\u723E\u74BD\u75D4\u78C1\u793A\u800C\u8033\u81EA\u8494\u8F9E\u6C50\u9E7F\u5F0F\u8B58\u9D2B\u7AFA\u8EF8\u5B8D\u96EB\u4E03\u53F1\u57F7\u5931\u5AC9\u5BA4\u6089\u6E7F\u6F06\u75BE\u8CEA\u5B9F\u8500\u7BE0\u5072\u67F4\u829D\u5C61\u854A\u7E1E\u820E\u5199\u5C04\u6368\u8D66\u659C\u716E\u793E\u7D17\u8005\u8B1D\u8ECA\u906E\u86C7\u90AA\u501F\u52FA\u5C3A\u6753\u707C\u7235\u914C\u91C8\u932B\u82E5\u5BC2\u5F31\u60F9\u4E3B\u53D6\u5B88\u624B\u6731\u6B8A\u72E9\u73E0\u7A2E\u816B\u8DA3\u9152\u9996\u5112\u53D7\u546A\u5BFF\u6388\u6A39\u7DAC\u9700\u56DA\u53CE\u5468\uFFFD\uFFFD\uFFFD".split("");
        for (j3 = 0; j3 != D5[142].length; ++j3)
          if (D5[142][j3].charCodeAt(0) !== 65533) {
            e7[D5[142][j3]] = 36352 + j3;
            d2[36352 + j3] = D5[142][j3];
          }
        D5[143] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u5B97\u5C31\u5DDE\u4FEE\u6101\u62FE\u6D32\u79C0\u79CB\u7D42\u7E4D\u7FD2\u81ED\u821F\u8490\u8846\u8972\u8B90\u8E74\u8F2F\u9031\u914B\u916C\u96C6\u919C\u4EC0\u4F4F\u5145\u5341\u5F93\u620E\u67D4\u6C41\u6E0B\u7363\u7E26\u91CD\u9283\u53D4\u5919\u5BBF\u6DD1\u795D\u7E2E\u7C9B\u587E\u719F\u51FA\u8853\u8FF0\u4FCA\u5CFB\u6625\u77AC\u7AE3\u821C\u99FF\u51C6\u5FAA\u65EC\u696F\u6B89\u6DF3\uFFFD\u6E96\u6F64\u76FE\u7D14\u5DE1\u9075\u9187\u9806\u51E6\u521D\u6240\u6691\u66D9\u6E1A\u5EB6\u7DD2\u7F72\u66F8\u85AF\u85F7\u8AF8\u52A9\u53D9\u5973\u5E8F\u5F90\u6055\u92E4\u9664\u50B7\u511F\u52DD\u5320\u5347\u53EC\u54E8\u5546\u5531\u5617\u5968\u59BE\u5A3C\u5BB5\u5C06\u5C0F\u5C11\u5C1A\u5E84\u5E8A\u5EE0\u5F70\u627F\u6284\u62DB\u638C\u6377\u6607\u660C\u662D\u6676\u677E\u68A2\u6A1F\u6A35\u6CBC\u6D88\u6E09\u6E58\u713C\u7126\u7167\u75C7\u7701\u785D\u7901\u7965\u79F0\u7AE0\u7B11\u7CA7\u7D39\u8096\u83D6\u848B\u8549\u885D\u88F3\u8A1F\u8A3C\u8A54\u8A73\u8C61\u8CDE\u91A4\u9266\u937E\u9418\u969C\u9798\u4E0A\u4E08\u4E1E\u4E57\u5197\u5270\u57CE\u5834\u58CC\u5B22\u5E38\u60C5\u64FE\u6761\u6756\u6D44\u72B6\u7573\u7A63\u84B8\u8B72\u91B8\u9320\u5631\u57F4\u98FE\uFFFD\uFFFD\uFFFD".split("");
        for (j3 = 0; j3 != D5[143].length; ++j3)
          if (D5[143][j3].charCodeAt(0) !== 65533) {
            e7[D5[143][j3]] = 36608 + j3;
            d2[36608 + j3] = D5[143][j3];
          }
        D5[144] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u62ED\u690D\u6B96\u71ED\u7E54\u8077\u8272\u89E6\u98DF\u8755\u8FB1\u5C3B\u4F38\u4FE1\u4FB5\u5507\u5A20\u5BDD\u5BE9\u5FC3\u614E\u632F\u65B0\u664B\u68EE\u699B\u6D78\u6DF1\u7533\u75B9\u771F\u795E\u79E6\u7D33\u81E3\u82AF\u85AA\u89AA\u8A3A\u8EAB\u8F9B\u9032\u91DD\u9707\u4EBA\u4EC1\u5203\u5875\u58EC\u5C0B\u751A\u5C3D\u814E\u8A0A\u8FC5\u9663\u976D\u7B25\u8ACF\u9808\u9162\u56F3\u53A8\uFFFD\u9017\u5439\u5782\u5E25\u63A8\u6C34\u708A\u7761\u7C8B\u7FE0\u8870\u9042\u9154\u9310\u9318\u968F\u745E\u9AC4\u5D07\u5D69\u6570\u67A2\u8DA8\u96DB\u636E\u6749\u6919\u83C5\u9817\u96C0\u88FE\u6F84\u647A\u5BF8\u4E16\u702C\u755D\u662F\u51C4\u5236\u52E2\u59D3\u5F81\u6027\u6210\u653F\u6574\u661F\u6674\u68F2\u6816\u6B63\u6E05\u7272\u751F\u76DB\u7CBE\u8056\u58F0\u88FD\u897F\u8AA0\u8A93\u8ACB\u901D\u9192\u9752\u9759\u6589\u7A0E\u8106\u96BB\u5E2D\u60DC\u621A\u65A5\u6614\u6790\u77F3\u7A4D\u7C4D\u7E3E\u810A\u8CAC\u8D64\u8DE1\u8E5F\u78A9\u5207\u62D9\u63A5\u6442\u6298\u8A2D\u7A83\u7BC0\u8AAC\u96EA\u7D76\u820C\u8749\u4ED9\u5148\u5343\u5360\u5BA3\u5C02\u5C16\u5DDD\u6226\u6247\u64B0\u6813\u6834\u6CC9\u6D45\u6D17\u67D3\u6F5C\u714E\u717D\u65CB\u7A7F\u7BAD\u7DDA\uFFFD\uFFFD\uFFFD".split("");
        for (j3 = 0; j3 != D5[144].length; ++j3)
          if (D5[144][j3].charCodeAt(0) !== 65533) {
            e7[D5[144][j3]] = 36864 + j3;
            d2[36864 + j3] = D5[144][j3];
          }
        D5[145] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u7E4A\u7FA8\u817A\u821B\u8239\u85A6\u8A6E\u8CCE\u8DF5\u9078\u9077\u92AD\u9291\u9583\u9BAE\u524D\u5584\u6F38\u7136\u5168\u7985\u7E55\u81B3\u7CCE\u564C\u5851\u5CA8\u63AA\u66FE\u66FD\u695A\u72D9\u758F\u758E\u790E\u7956\u79DF\u7C97\u7D20\u7D44\u8607\u8A34\u963B\u9061\u9F20\u50E7\u5275\u53CC\u53E2\u5009\u55AA\u58EE\u594F\u723D\u5B8B\u5C64\u531D\u60E3\u60F3\u635C\u6383\u633F\u63BB\uFFFD\u64CD\u65E9\u66F9\u5DE3\u69CD\u69FD\u6F15\u71E5\u4E89\u75E9\u76F8\u7A93\u7CDF\u7DCF\u7D9C\u8061\u8349\u8358\u846C\u84BC\u85FB\u88C5\u8D70\u9001\u906D\u9397\u971C\u9A12\u50CF\u5897\u618E\u81D3\u8535\u8D08\u9020\u4FC3\u5074\u5247\u5373\u606F\u6349\u675F\u6E2C\u8DB3\u901F\u4FD7\u5C5E\u8CCA\u65CF\u7D9A\u5352\u8896\u5176\u63C3\u5B58\u5B6B\u5C0A\u640D\u6751\u905C\u4ED6\u591A\u592A\u6C70\u8A51\u553E\u5815\u59A5\u60F0\u6253\u67C1\u8235\u6955\u9640\u99C4\u9A28\u4F53\u5806\u5BFE\u8010\u5CB1\u5E2F\u5F85\u6020\u614B\u6234\u66FF\u6CF0\u6EDE\u80CE\u817F\u82D4\u888B\u8CB8\u9000\u902E\u968A\u9EDB\u9BDB\u4EE3\u53F0\u5927\u7B2C\u918D\u984C\u9DF9\u6EDD\u7027\u5353\u5544\u5B85\u6258\u629E\u62D3\u6CA2\u6FEF\u7422\u8A17\u9438\u6FC1\u8AFE\u8338\u51E7\u86F8\u53EA\uFFFD\uFFFD\uFFFD".split("");
        for (j3 = 0; j3 != D5[145].length; ++j3)
          if (D5[145][j3].charCodeAt(0) !== 65533) {
            e7[D5[145][j3]] = 37120 + j3;
            d2[37120 + j3] = D5[145][j3];
          }
        D5[146] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u53E9\u4F46\u9054\u8FB0\u596A\u8131\u5DFD\u7AEA\u8FBF\u68DA\u8C37\u72F8\u9C48\u6A3D\u8AB0\u4E39\u5358\u5606\u5766\u62C5\u63A2\u65E6\u6B4E\u6DE1\u6E5B\u70AD\u77ED\u7AEF\u7BAA\u7DBB\u803D\u80C6\u86CB\u8A95\u935B\u56E3\u58C7\u5F3E\u65AD\u6696\u6A80\u6BB5\u7537\u8AC7\u5024\u77E5\u5730\u5F1B\u6065\u667A\u6C60\u75F4\u7A1A\u7F6E\u81F4\u8718\u9045\u99B3\u7BC9\u755C\u7AF9\u7B51\u84C4\uFFFD\u9010\u79E9\u7A92\u8336\u5AE1\u7740\u4E2D\u4EF2\u5B99\u5FE0\u62BD\u663C\u67F1\u6CE8\u866B\u8877\u8A3B\u914E\u92F3\u99D0\u6A17\u7026\u732A\u82E7\u8457\u8CAF\u4E01\u5146\u51CB\u558B\u5BF5\u5E16\u5E33\u5E81\u5F14\u5F35\u5F6B\u5FB4\u61F2\u6311\u66A2\u671D\u6F6E\u7252\u753A\u773A\u8074\u8139\u8178\u8776\u8ABF\u8ADC\u8D85\u8DF3\u929A\u9577\u9802\u9CE5\u52C5\u6357\u76F4\u6715\u6C88\u73CD\u8CC3\u93AE\u9673\u6D25\u589C\u690E\u69CC\u8FFD\u939A\u75DB\u901A\u585A\u6802\u63B4\u69FB\u4F43\u6F2C\u67D8\u8FBB\u8526\u7DB4\u9354\u693F\u6F70\u576A\u58F7\u5B2C\u7D2C\u722A\u540A\u91E3\u9DB4\u4EAD\u4F4E\u505C\u5075\u5243\u8C9E\u5448\u5824\u5B9A\u5E1D\u5E95\u5EAD\u5EF7\u5F1F\u608C\u62B5\u633A\u63D0\u68AF\u6C40\u7887\u798E\u7A0B\u7DE0\u8247\u8A02\u8AE6\u8E44\u9013\uFFFD\uFFFD\uFFFD".split("");
        for (j3 = 0; j3 != D5[146].length; ++j3)
          if (D5[146][j3].charCodeAt(0) !== 65533) {
            e7[D5[146][j3]] = 37376 + j3;
            d2[37376 + j3] = D5[146][j3];
          }
        D5[147] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u90B8\u912D\u91D8\u9F0E\u6CE5\u6458\u64E2\u6575\u6EF4\u7684\u7B1B\u9069\u93D1\u6EBA\u54F2\u5FB9\u64A4\u8F4D\u8FED\u9244\u5178\u586B\u5929\u5C55\u5E97\u6DFB\u7E8F\u751C\u8CBC\u8EE2\u985B\u70B9\u4F1D\u6BBF\u6FB1\u7530\u96FB\u514E\u5410\u5835\u5857\u59AC\u5C60\u5F92\u6597\u675C\u6E21\u767B\u83DF\u8CED\u9014\u90FD\u934D\u7825\u783A\u52AA\u5EA6\u571F\u5974\u6012\u5012\u515A\u51AC\uFFFD\u51CD\u5200\u5510\u5854\u5858\u5957\u5B95\u5CF6\u5D8B\u60BC\u6295\u642D\u6771\u6843\u68BC\u68DF\u76D7\u6DD8\u6E6F\u6D9B\u706F\u71C8\u5F53\u75D8\u7977\u7B49\u7B54\u7B52\u7CD6\u7D71\u5230\u8463\u8569\u85E4\u8A0E\u8B04\u8C46\u8E0F\u9003\u900F\u9419\u9676\u982D\u9A30\u95D8\u50CD\u52D5\u540C\u5802\u5C0E\u61A7\u649E\u6D1E\u77B3\u7AE5\u80F4\u8404\u9053\u9285\u5CE0\u9D07\u533F\u5F97\u5FB3\u6D9C\u7279\u7763\u79BF\u7BE4\u6BD2\u72EC\u8AAD\u6803\u6A61\u51F8\u7A81\u6934\u5C4A\u9CF6\u82EB\u5BC5\u9149\u701E\u5678\u5C6F\u60C7\u6566\u6C8C\u8C5A\u9041\u9813\u5451\u66C7\u920D\u5948\u90A3\u5185\u4E4D\u51EA\u8599\u8B0E\u7058\u637A\u934B\u6962\u99B4\u7E04\u7577\u5357\u6960\u8EDF\u96E3\u6C5D\u4E8C\u5C3C\u5F10\u8FE9\u5302\u8CD1\u8089\u8679\u5EFF\u65E5\u4E73\u5165\uFFFD\uFFFD\uFFFD".split("");
        for (j3 = 0; j3 != D5[147].length; ++j3)
          if (D5[147][j3].charCodeAt(0) !== 65533) {
            e7[D5[147][j3]] = 37632 + j3;
            d2[37632 + j3] = D5[147][j3];
          }
        D5[148] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u5982\u5C3F\u97EE\u4EFB\u598A\u5FCD\u8A8D\u6FE1\u79B0\u7962\u5BE7\u8471\u732B\u71B1\u5E74\u5FF5\u637B\u649A\u71C3\u7C98\u4E43\u5EFC\u4E4B\u57DC\u56A2\u60A9\u6FC3\u7D0D\u80FD\u8133\u81BF\u8FB2\u8997\u86A4\u5DF4\u628A\u64AD\u8987\u6777\u6CE2\u6D3E\u7436\u7834\u5A46\u7F75\u82AD\u99AC\u4FF3\u5EC3\u62DD\u6392\u6557\u676F\u76C3\u724C\u80CC\u80BA\u8F29\u914D\u500D\u57F9\u5A92\u6885\uFFFD\u6973\u7164\u72FD\u8CB7\u58F2\u8CE0\u966A\u9019\u877F\u79E4\u77E7\u8429\u4F2F\u5265\u535A\u62CD\u67CF\u6CCA\u767D\u7B94\u7C95\u8236\u8584\u8FEB\u66DD\u6F20\u7206\u7E1B\u83AB\u99C1\u9EA6\u51FD\u7BB1\u7872\u7BB8\u8087\u7B48\u6AE8\u5E61\u808C\u7551\u7560\u516B\u9262\u6E8C\u767A\u9197\u9AEA\u4F10\u7F70\u629C\u7B4F\u95A5\u9CE9\u567A\u5859\u86E4\u96BC\u4F34\u5224\u534A\u53CD\u53DB\u5E06\u642C\u6591\u677F\u6C3E\u6C4E\u7248\u72AF\u73ED\u7554\u7E41\u822C\u85E9\u8CA9\u7BC4\u91C6\u7169\u9812\u98EF\u633D\u6669\u756A\u76E4\u78D0\u8543\u86EE\u532A\u5351\u5426\u5983\u5E87\u5F7C\u60B2\u6249\u6279\u62AB\u6590\u6BD4\u6CCC\u75B2\u76AE\u7891\u79D8\u7DCB\u7F77\u80A5\u88AB\u8AB9\u8CBB\u907F\u975E\u98DB\u6A0B\u7C38\u5099\u5C3E\u5FAE\u6787\u6BD8\u7435\u7709\u7F8E\uFFFD\uFFFD\uFFFD".split("");
        for (j3 = 0; j3 != D5[148].length; ++j3)
          if (D5[148][j3].charCodeAt(0) !== 65533) {
            e7[D5[148][j3]] = 37888 + j3;
            d2[37888 + j3] = D5[148][j3];
          }
        D5[149] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u9F3B\u67CA\u7A17\u5339\u758B\u9AED\u5F66\u819D\u83F1\u8098\u5F3C\u5FC5\u7562\u7B46\u903C\u6867\u59EB\u5A9B\u7D10\u767E\u8B2C\u4FF5\u5F6A\u6A19\u6C37\u6F02\u74E2\u7968\u8868\u8A55\u8C79\u5EDF\u63CF\u75C5\u79D2\u82D7\u9328\u92F2\u849C\u86ED\u9C2D\u54C1\u5F6C\u658C\u6D5C\u7015\u8CA7\u8CD3\u983B\u654F\u74F6\u4E0D\u4ED8\u57E0\u592B\u5A66\u5BCC\u51A8\u5E03\u5E9C\u6016\u6276\u6577\uFFFD\u65A7\u666E\u6D6E\u7236\u7B26\u8150\u819A\u8299\u8B5C\u8CA0\u8CE6\u8D74\u961C\u9644\u4FAE\u64AB\u6B66\u821E\u8461\u856A\u90E8\u5C01\u6953\u98A8\u847A\u8557\u4F0F\u526F\u5FA9\u5E45\u670D\u798F\u8179\u8907\u8986\u6DF5\u5F17\u6255\u6CB8\u4ECF\u7269\u9B92\u5206\u543B\u5674\u58B3\u61A4\u626E\u711A\u596E\u7C89\u7CDE\u7D1B\u96F0\u6587\u805E\u4E19\u4F75\u5175\u5840\u5E63\u5E73\u5F0A\u67C4\u4E26\u853D\u9589\u965B\u7C73\u9801\u50FB\u58C1\u7656\u78A7\u5225\u77A5\u8511\u7B86\u504F\u5909\u7247\u7BC7\u7DE8\u8FBA\u8FD4\u904D\u4FBF\u52C9\u5A29\u5F01\u97AD\u4FDD\u8217\u92EA\u5703\u6355\u6B69\u752B\u88DC\u8F14\u7A42\u52DF\u5893\u6155\u620A\u66AE\u6BCD\u7C3F\u83E9\u5023\u4FF8\u5305\u5446\u5831\u5949\u5B9D\u5CF0\u5CEF\u5D29\u5E96\u62B1\u6367\u653E\u65B9\u670B\uFFFD\uFFFD\uFFFD".split("");
        for (j3 = 0; j3 != D5[149].length; ++j3)
          if (D5[149][j3].charCodeAt(0) !== 65533) {
            e7[D5[149][j3]] = 38144 + j3;
            d2[38144 + j3] = D5[149][j3];
          }
        D5[150] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u6CD5\u6CE1\u70F9\u7832\u7E2B\u80DE\u82B3\u840C\u84EC\u8702\u8912\u8A2A\u8C4A\u90A6\u92D2\u98FD\u9CF3\u9D6C\u4E4F\u4EA1\u508D\u5256\u574A\u59A8\u5E3D\u5FD8\u5FD9\u623F\u66B4\u671B\u67D0\u68D2\u5192\u7D21\u80AA\u81A8\u8B00\u8C8C\u8CBF\u927E\u9632\u5420\u982C\u5317\u50D5\u535C\u58A8\u64B2\u6734\u7267\u7766\u7A46\u91E6\u52C3\u6CA1\u6B86\u5800\u5E4C\u5954\u672C\u7FFB\u51E1\u76C6\uFFFD\u6469\u78E8\u9B54\u9EBB\u57CB\u59B9\u6627\u679A\u6BCE\u54E9\u69D9\u5E55\u819C\u6795\u9BAA\u67FE\u9C52\u685D\u4EA6\u4FE3\u53C8\u62B9\u672B\u6CAB\u8FC4\u4FAD\u7E6D\u9EBF\u4E07\u6162\u6E80\u6F2B\u8513\u5473\u672A\u9B45\u5DF3\u7B95\u5CAC\u5BC6\u871C\u6E4A\u84D1\u7A14\u8108\u5999\u7C8D\u6C11\u7720\u52D9\u5922\u7121\u725F\u77DB\u9727\u9D61\u690B\u5A7F\u5A18\u51A5\u540D\u547D\u660E\u76DF\u8FF7\u9298\u9CF4\u59EA\u725D\u6EC5\u514D\u68C9\u7DBF\u7DEC\u9762\u9EBA\u6478\u6A21\u8302\u5984\u5B5F\u6BDB\u731B\u76F2\u7DB2\u8017\u8499\u5132\u6728\u9ED9\u76EE\u6762\u52FF\u9905\u5C24\u623B\u7C7E\u8CB0\u554F\u60B6\u7D0B\u9580\u5301\u4E5F\u51B6\u591C\u723A\u8036\u91CE\u5F25\u77E2\u5384\u5F79\u7D04\u85AC\u8A33\u8E8D\u9756\u67F3\u85AE\u9453\u6109\u6108\u6CB9\u7652\uFFFD\uFFFD\uFFFD".split("");
        for (j3 = 0; j3 != D5[150].length; ++j3)
          if (D5[150][j3].charCodeAt(0) !== 65533) {
            e7[D5[150][j3]] = 38400 + j3;
            d2[38400 + j3] = D5[150][j3];
          }
        D5[151] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u8AED\u8F38\u552F\u4F51\u512A\u52C7\u53CB\u5BA5\u5E7D\u60A0\u6182\u63D6\u6709\u67DA\u6E67\u6D8C\u7336\u7337\u7531\u7950\u88D5\u8A98\u904A\u9091\u90F5\u96C4\u878D\u5915\u4E88\u4F59\u4E0E\u8A89\u8F3F\u9810\u50AD\u5E7C\u5996\u5BB9\u5EB8\u63DA\u63FA\u64C1\u66DC\u694A\u69D8\u6D0B\u6EB6\u7194\u7528\u7AAF\u7F8A\u8000\u8449\u84C9\u8981\u8B21\u8E0A\u9065\u967D\u990A\u617E\u6291\u6B32\uFFFD\u6C83\u6D74\u7FCC\u7FFC\u6DC0\u7F85\u87BA\u88F8\u6765\u83B1\u983C\u96F7\u6D1B\u7D61\u843D\u916A\u4E71\u5375\u5D50\u6B04\u6FEB\u85CD\u862D\u89A7\u5229\u540F\u5C65\u674E\u68A8\u7406\u7483\u75E2\u88CF\u88E1\u91CC\u96E2\u9678\u5F8B\u7387\u7ACB\u844E\u63A0\u7565\u5289\u6D41\u6E9C\u7409\u7559\u786B\u7C92\u9686\u7ADC\u9F8D\u4FB6\u616E\u65C5\u865C\u4E86\u4EAE\u50DA\u4E21\u51CC\u5BEE\u6599\u6881\u6DBC\u731F\u7642\u77AD\u7A1C\u7CE7\u826F\u8AD2\u907C\u91CF\u9675\u9818\u529B\u7DD1\u502B\u5398\u6797\u6DCB\u71D0\u7433\u81E8\u8F2A\u96A3\u9C57\u9E9F\u7460\u5841\u6D99\u7D2F\u985E\u4EE4\u4F36\u4F8B\u51B7\u52B1\u5DBA\u601C\u73B2\u793C\u82D3\u9234\u96B7\u96F6\u970A\u9E97\u9F62\u66A6\u6B74\u5217\u52A3\u70C8\u88C2\u5EC9\u604B\u6190\u6F23\u7149\u7C3E\u7DF4\u806F\uFFFD\uFFFD\uFFFD".split("");
        for (j3 = 0; j3 != D5[151].length; ++j3)
          if (D5[151][j3].charCodeAt(0) !== 65533) {
            e7[D5[151][j3]] = 38656 + j3;
            d2[38656 + j3] = D5[151][j3];
          }
        D5[152] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u84EE\u9023\u932C\u5442\u9B6F\u6AD3\u7089\u8CC2\u8DEF\u9732\u52B4\u5A41\u5ECA\u5F04\u6717\u697C\u6994\u6D6A\u6F0F\u7262\u72FC\u7BED\u8001\u807E\u874B\u90CE\u516D\u9E93\u7984\u808B\u9332\u8AD6\u502D\u548C\u8A71\u6B6A\u8CC4\u8107\u60D1\u67A0\u9DF2\u4E99\u4E98\u9C10\u8A6B\u85C1\u8568\u6900\u6E7E\u7897\u8155\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u5F0C\u4E10\u4E15\u4E2A\u4E31\u4E36\u4E3C\u4E3F\u4E42\u4E56\u4E58\u4E82\u4E85\u8C6B\u4E8A\u8212\u5F0D\u4E8E\u4E9E\u4E9F\u4EA0\u4EA2\u4EB0\u4EB3\u4EB6\u4ECE\u4ECD\u4EC4\u4EC6\u4EC2\u4ED7\u4EDE\u4EED\u4EDF\u4EF7\u4F09\u4F5A\u4F30\u4F5B\u4F5D\u4F57\u4F47\u4F76\u4F88\u4F8F\u4F98\u4F7B\u4F69\u4F70\u4F91\u4F6F\u4F86\u4F96\u5118\u4FD4\u4FDF\u4FCE\u4FD8\u4FDB\u4FD1\u4FDA\u4FD0\u4FE4\u4FE5\u501A\u5028\u5014\u502A\u5025\u5005\u4F1C\u4FF6\u5021\u5029\u502C\u4FFE\u4FEF\u5011\u5006\u5043\u5047\u6703\u5055\u5050\u5048\u505A\u5056\u506C\u5078\u5080\u509A\u5085\u50B4\u50B2\uFFFD\uFFFD\uFFFD".split("");
        for (j3 = 0; j3 != D5[152].length; ++j3)
          if (D5[152][j3].charCodeAt(0) !== 65533) {
            e7[D5[152][j3]] = 38912 + j3;
            d2[38912 + j3] = D5[152][j3];
          }
        D5[153] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u50C9\u50CA\u50B3\u50C2\u50D6\u50DE\u50E5\u50ED\u50E3\u50EE\u50F9\u50F5\u5109\u5101\u5102\u5116\u5115\u5114\u511A\u5121\u513A\u5137\u513C\u513B\u513F\u5140\u5152\u514C\u5154\u5162\u7AF8\u5169\u516A\u516E\u5180\u5182\u56D8\u518C\u5189\u518F\u5191\u5193\u5195\u5196\u51A4\u51A6\u51A2\u51A9\u51AA\u51AB\u51B3\u51B1\u51B2\u51B0\u51B5\u51BD\u51C5\u51C9\u51DB\u51E0\u8655\u51E9\u51ED\uFFFD\u51F0\u51F5\u51FE\u5204\u520B\u5214\u520E\u5227\u522A\u522E\u5233\u5239\u524F\u5244\u524B\u524C\u525E\u5254\u526A\u5274\u5269\u5273\u527F\u527D\u528D\u5294\u5292\u5271\u5288\u5291\u8FA8\u8FA7\u52AC\u52AD\u52BC\u52B5\u52C1\u52CD\u52D7\u52DE\u52E3\u52E6\u98ED\u52E0\u52F3\u52F5\u52F8\u52F9\u5306\u5308\u7538\u530D\u5310\u530F\u5315\u531A\u5323\u532F\u5331\u5333\u5338\u5340\u5346\u5345\u4E17\u5349\u534D\u51D6\u535E\u5369\u536E\u5918\u537B\u5377\u5382\u5396\u53A0\u53A6\u53A5\u53AE\u53B0\u53B6\u53C3\u7C12\u96D9\u53DF\u66FC\u71EE\u53EE\u53E8\u53ED\u53FA\u5401\u543D\u5440\u542C\u542D\u543C\u542E\u5436\u5429\u541D\u544E\u548F\u5475\u548E\u545F\u5471\u5477\u5470\u5492\u547B\u5480\u5476\u5484\u5490\u5486\u54C7\u54A2\u54B8\u54A5\u54AC\u54C4\u54C8\u54A8\uFFFD\uFFFD\uFFFD".split("");
        for (j3 = 0; j3 != D5[153].length; ++j3)
          if (D5[153][j3].charCodeAt(0) !== 65533) {
            e7[D5[153][j3]] = 39168 + j3;
            d2[39168 + j3] = D5[153][j3];
          }
        D5[154] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u54AB\u54C2\u54A4\u54BE\u54BC\u54D8\u54E5\u54E6\u550F\u5514\u54FD\u54EE\u54ED\u54FA\u54E2\u5539\u5540\u5563\u554C\u552E\u555C\u5545\u5556\u5557\u5538\u5533\u555D\u5599\u5580\u54AF\u558A\u559F\u557B\u557E\u5598\u559E\u55AE\u557C\u5583\u55A9\u5587\u55A8\u55DA\u55C5\u55DF\u55C4\u55DC\u55E4\u55D4\u5614\u55F7\u5616\u55FE\u55FD\u561B\u55F9\u564E\u5650\u71DF\u5634\u5636\u5632\u5638\uFFFD\u566B\u5664\u562F\u566C\u566A\u5686\u5680\u568A\u56A0\u5694\u568F\u56A5\u56AE\u56B6\u56B4\u56C2\u56BC\u56C1\u56C3\u56C0\u56C8\u56CE\u56D1\u56D3\u56D7\u56EE\u56F9\u5700\u56FF\u5704\u5709\u5708\u570B\u570D\u5713\u5718\u5716\u55C7\u571C\u5726\u5737\u5738\u574E\u573B\u5740\u574F\u5769\u57C0\u5788\u5761\u577F\u5789\u5793\u57A0\u57B3\u57A4\u57AA\u57B0\u57C3\u57C6\u57D4\u57D2\u57D3\u580A\u57D6\u57E3\u580B\u5819\u581D\u5872\u5821\u5862\u584B\u5870\u6BC0\u5852\u583D\u5879\u5885\u58B9\u589F\u58AB\u58BA\u58DE\u58BB\u58B8\u58AE\u58C5\u58D3\u58D1\u58D7\u58D9\u58D8\u58E5\u58DC\u58E4\u58DF\u58EF\u58FA\u58F9\u58FB\u58FC\u58FD\u5902\u590A\u5910\u591B\u68A6\u5925\u592C\u592D\u5932\u5938\u593E\u7AD2\u5955\u5950\u594E\u595A\u5958\u5962\u5960\u5967\u596C\u5969\uFFFD\uFFFD\uFFFD".split("");
        for (j3 = 0; j3 != D5[154].length; ++j3)
          if (D5[154][j3].charCodeAt(0) !== 65533) {
            e7[D5[154][j3]] = 39424 + j3;
            d2[39424 + j3] = D5[154][j3];
          }
        D5[155] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u5978\u5981\u599D\u4F5E\u4FAB\u59A3\u59B2\u59C6\u59E8\u59DC\u598D\u59D9\u59DA\u5A25\u5A1F\u5A11\u5A1C\u5A09\u5A1A\u5A40\u5A6C\u5A49\u5A35\u5A36\u5A62\u5A6A\u5A9A\u5ABC\u5ABE\u5ACB\u5AC2\u5ABD\u5AE3\u5AD7\u5AE6\u5AE9\u5AD6\u5AFA\u5AFB\u5B0C\u5B0B\u5B16\u5B32\u5AD0\u5B2A\u5B36\u5B3E\u5B43\u5B45\u5B40\u5B51\u5B55\u5B5A\u5B5B\u5B65\u5B69\u5B70\u5B73\u5B75\u5B78\u6588\u5B7A\u5B80\uFFFD\u5B83\u5BA6\u5BB8\u5BC3\u5BC7\u5BC9\u5BD4\u5BD0\u5BE4\u5BE6\u5BE2\u5BDE\u5BE5\u5BEB\u5BF0\u5BF6\u5BF3\u5C05\u5C07\u5C08\u5C0D\u5C13\u5C20\u5C22\u5C28\u5C38\u5C39\u5C41\u5C46\u5C4E\u5C53\u5C50\u5C4F\u5B71\u5C6C\u5C6E\u4E62\u5C76\u5C79\u5C8C\u5C91\u5C94\u599B\u5CAB\u5CBB\u5CB6\u5CBC\u5CB7\u5CC5\u5CBE\u5CC7\u5CD9\u5CE9\u5CFD\u5CFA\u5CED\u5D8C\u5CEA\u5D0B\u5D15\u5D17\u5D5C\u5D1F\u5D1B\u5D11\u5D14\u5D22\u5D1A\u5D19\u5D18\u5D4C\u5D52\u5D4E\u5D4B\u5D6C\u5D73\u5D76\u5D87\u5D84\u5D82\u5DA2\u5D9D\u5DAC\u5DAE\u5DBD\u5D90\u5DB7\u5DBC\u5DC9\u5DCD\u5DD3\u5DD2\u5DD6\u5DDB\u5DEB\u5DF2\u5DF5\u5E0B\u5E1A\u5E19\u5E11\u5E1B\u5E36\u5E37\u5E44\u5E43\u5E40\u5E4E\u5E57\u5E54\u5E5F\u5E62\u5E64\u5E47\u5E75\u5E76\u5E7A\u9EBC\u5E7F\u5EA0\u5EC1\u5EC2\u5EC8\u5ED0\u5ECF\uFFFD\uFFFD\uFFFD".split("");
        for (j3 = 0; j3 != D5[155].length; ++j3)
          if (D5[155][j3].charCodeAt(0) !== 65533) {
            e7[D5[155][j3]] = 39680 + j3;
            d2[39680 + j3] = D5[155][j3];
          }
        D5[156] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u5ED6\u5EE3\u5EDD\u5EDA\u5EDB\u5EE2\u5EE1\u5EE8\u5EE9\u5EEC\u5EF1\u5EF3\u5EF0\u5EF4\u5EF8\u5EFE\u5F03\u5F09\u5F5D\u5F5C\u5F0B\u5F11\u5F16\u5F29\u5F2D\u5F38\u5F41\u5F48\u5F4C\u5F4E\u5F2F\u5F51\u5F56\u5F57\u5F59\u5F61\u5F6D\u5F73\u5F77\u5F83\u5F82\u5F7F\u5F8A\u5F88\u5F91\u5F87\u5F9E\u5F99\u5F98\u5FA0\u5FA8\u5FAD\u5FBC\u5FD6\u5FFB\u5FE4\u5FF8\u5FF1\u5FDD\u60B3\u5FFF\u6021\u6060\uFFFD\u6019\u6010\u6029\u600E\u6031\u601B\u6015\u602B\u6026\u600F\u603A\u605A\u6041\u606A\u6077\u605F\u604A\u6046\u604D\u6063\u6043\u6064\u6042\u606C\u606B\u6059\u6081\u608D\u60E7\u6083\u609A\u6084\u609B\u6096\u6097\u6092\u60A7\u608B\u60E1\u60B8\u60E0\u60D3\u60B4\u5FF0\u60BD\u60C6\u60B5\u60D8\u614D\u6115\u6106\u60F6\u60F7\u6100\u60F4\u60FA\u6103\u6121\u60FB\u60F1\u610D\u610E\u6147\u613E\u6128\u6127\u614A\u613F\u613C\u612C\u6134\u613D\u6142\u6144\u6173\u6177\u6158\u6159\u615A\u616B\u6174\u616F\u6165\u6171\u615F\u615D\u6153\u6175\u6199\u6196\u6187\u61AC\u6194\u619A\u618A\u6191\u61AB\u61AE\u61CC\u61CA\u61C9\u61F7\u61C8\u61C3\u61C6\u61BA\u61CB\u7F79\u61CD\u61E6\u61E3\u61F6\u61FA\u61F4\u61FF\u61FD\u61FC\u61FE\u6200\u6208\u6209\u620D\u620C\u6214\u621B\uFFFD\uFFFD\uFFFD".split("");
        for (j3 = 0; j3 != D5[156].length; ++j3)
          if (D5[156][j3].charCodeAt(0) !== 65533) {
            e7[D5[156][j3]] = 39936 + j3;
            d2[39936 + j3] = D5[156][j3];
          }
        D5[157] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u621E\u6221\u622A\u622E\u6230\u6232\u6233\u6241\u624E\u625E\u6263\u625B\u6260\u6268\u627C\u6282\u6289\u627E\u6292\u6293\u6296\u62D4\u6283\u6294\u62D7\u62D1\u62BB\u62CF\u62FF\u62C6\u64D4\u62C8\u62DC\u62CC\u62CA\u62C2\u62C7\u629B\u62C9\u630C\u62EE\u62F1\u6327\u6302\u6308\u62EF\u62F5\u6350\u633E\u634D\u641C\u634F\u6396\u638E\u6380\u63AB\u6376\u63A3\u638F\u6389\u639F\u63B5\u636B\uFFFD\u6369\u63BE\u63E9\u63C0\u63C6\u63E3\u63C9\u63D2\u63F6\u63C4\u6416\u6434\u6406\u6413\u6426\u6436\u651D\u6417\u6428\u640F\u6467\u646F\u6476\u644E\u652A\u6495\u6493\u64A5\u64A9\u6488\u64BC\u64DA\u64D2\u64C5\u64C7\u64BB\u64D8\u64C2\u64F1\u64E7\u8209\u64E0\u64E1\u62AC\u64E3\u64EF\u652C\u64F6\u64F4\u64F2\u64FA\u6500\u64FD\u6518\u651C\u6505\u6524\u6523\u652B\u6534\u6535\u6537\u6536\u6538\u754B\u6548\u6556\u6555\u654D\u6558\u655E\u655D\u6572\u6578\u6582\u6583\u8B8A\u659B\u659F\u65AB\u65B7\u65C3\u65C6\u65C1\u65C4\u65CC\u65D2\u65DB\u65D9\u65E0\u65E1\u65F1\u6772\u660A\u6603\u65FB\u6773\u6635\u6636\u6634\u661C\u664F\u6644\u6649\u6641\u665E\u665D\u6664\u6667\u6668\u665F\u6662\u6670\u6683\u6688\u668E\u6689\u6684\u6698\u669D\u66C1\u66B9\u66C9\u66BE\u66BC\uFFFD\uFFFD\uFFFD".split("");
        for (j3 = 0; j3 != D5[157].length; ++j3)
          if (D5[157][j3].charCodeAt(0) !== 65533) {
            e7[D5[157][j3]] = 40192 + j3;
            d2[40192 + j3] = D5[157][j3];
          }
        D5[158] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u66C4\u66B8\u66D6\u66DA\u66E0\u663F\u66E6\u66E9\u66F0\u66F5\u66F7\u670F\u6716\u671E\u6726\u6727\u9738\u672E\u673F\u6736\u6741\u6738\u6737\u6746\u675E\u6760\u6759\u6763\u6764\u6789\u6770\u67A9\u677C\u676A\u678C\u678B\u67A6\u67A1\u6785\u67B7\u67EF\u67B4\u67EC\u67B3\u67E9\u67B8\u67E4\u67DE\u67DD\u67E2\u67EE\u67B9\u67CE\u67C6\u67E7\u6A9C\u681E\u6846\u6829\u6840\u684D\u6832\u684E\uFFFD\u68B3\u682B\u6859\u6863\u6877\u687F\u689F\u688F\u68AD\u6894\u689D\u689B\u6883\u6AAE\u68B9\u6874\u68B5\u68A0\u68BA\u690F\u688D\u687E\u6901\u68CA\u6908\u68D8\u6922\u6926\u68E1\u690C\u68CD\u68D4\u68E7\u68D5\u6936\u6912\u6904\u68D7\u68E3\u6925\u68F9\u68E0\u68EF\u6928\u692A\u691A\u6923\u6921\u68C6\u6979\u6977\u695C\u6978\u696B\u6954\u697E\u696E\u6939\u6974\u693D\u6959\u6930\u6961\u695E\u695D\u6981\u696A\u69B2\u69AE\u69D0\u69BF\u69C1\u69D3\u69BE\u69CE\u5BE8\u69CA\u69DD\u69BB\u69C3\u69A7\u6A2E\u6991\u69A0\u699C\u6995\u69B4\u69DE\u69E8\u6A02\u6A1B\u69FF\u6B0A\u69F9\u69F2\u69E7\u6A05\u69B1\u6A1E\u69ED\u6A14\u69EB\u6A0A\u6A12\u6AC1\u6A23\u6A13\u6A44\u6A0C\u6A72\u6A36\u6A78\u6A47\u6A62\u6A59\u6A66\u6A48\u6A38\u6A22\u6A90\u6A8D\u6AA0\u6A84\u6AA2\u6AA3\uFFFD\uFFFD\uFFFD".split("");
        for (j3 = 0; j3 != D5[158].length; ++j3)
          if (D5[158][j3].charCodeAt(0) !== 65533) {
            e7[D5[158][j3]] = 40448 + j3;
            d2[40448 + j3] = D5[158][j3];
          }
        D5[159] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u6A97\u8617\u6ABB\u6AC3\u6AC2\u6AB8\u6AB3\u6AAC\u6ADE\u6AD1\u6ADF\u6AAA\u6ADA\u6AEA\u6AFB\u6B05\u8616\u6AFA\u6B12\u6B16\u9B31\u6B1F\u6B38\u6B37\u76DC\u6B39\u98EE\u6B47\u6B43\u6B49\u6B50\u6B59\u6B54\u6B5B\u6B5F\u6B61\u6B78\u6B79\u6B7F\u6B80\u6B84\u6B83\u6B8D\u6B98\u6B95\u6B9E\u6BA4\u6BAA\u6BAB\u6BAF\u6BB2\u6BB1\u6BB3\u6BB7\u6BBC\u6BC6\u6BCB\u6BD3\u6BDF\u6BEC\u6BEB\u6BF3\u6BEF\uFFFD\u9EBE\u6C08\u6C13\u6C14\u6C1B\u6C24\u6C23\u6C5E\u6C55\u6C62\u6C6A\u6C82\u6C8D\u6C9A\u6C81\u6C9B\u6C7E\u6C68\u6C73\u6C92\u6C90\u6CC4\u6CF1\u6CD3\u6CBD\u6CD7\u6CC5\u6CDD\u6CAE\u6CB1\u6CBE\u6CBA\u6CDB\u6CEF\u6CD9\u6CEA\u6D1F\u884D\u6D36\u6D2B\u6D3D\u6D38\u6D19\u6D35\u6D33\u6D12\u6D0C\u6D63\u6D93\u6D64\u6D5A\u6D79\u6D59\u6D8E\u6D95\u6FE4\u6D85\u6DF9\u6E15\u6E0A\u6DB5\u6DC7\u6DE6\u6DB8\u6DC6\u6DEC\u6DDE\u6DCC\u6DE8\u6DD2\u6DC5\u6DFA\u6DD9\u6DE4\u6DD5\u6DEA\u6DEE\u6E2D\u6E6E\u6E2E\u6E19\u6E72\u6E5F\u6E3E\u6E23\u6E6B\u6E2B\u6E76\u6E4D\u6E1F\u6E43\u6E3A\u6E4E\u6E24\u6EFF\u6E1D\u6E38\u6E82\u6EAA\u6E98\u6EC9\u6EB7\u6ED3\u6EBD\u6EAF\u6EC4\u6EB2\u6ED4\u6ED5\u6E8F\u6EA5\u6EC2\u6E9F\u6F41\u6F11\u704C\u6EEC\u6EF8\u6EFE\u6F3F\u6EF2\u6F31\u6EEF\u6F32\u6ECC\uFFFD\uFFFD\uFFFD".split("");
        for (j3 = 0; j3 != D5[159].length; ++j3)
          if (D5[159][j3].charCodeAt(0) !== 65533) {
            e7[D5[159][j3]] = 40704 + j3;
            d2[40704 + j3] = D5[159][j3];
          }
        D5[224] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u6F3E\u6F13\u6EF7\u6F86\u6F7A\u6F78\u6F81\u6F80\u6F6F\u6F5B\u6FF3\u6F6D\u6F82\u6F7C\u6F58\u6F8E\u6F91\u6FC2\u6F66\u6FB3\u6FA3\u6FA1\u6FA4\u6FB9\u6FC6\u6FAA\u6FDF\u6FD5\u6FEC\u6FD4\u6FD8\u6FF1\u6FEE\u6FDB\u7009\u700B\u6FFA\u7011\u7001\u700F\u6FFE\u701B\u701A\u6F74\u701D\u7018\u701F\u7030\u703E\u7032\u7051\u7063\u7099\u7092\u70AF\u70F1\u70AC\u70B8\u70B3\u70AE\u70DF\u70CB\u70DD\uFFFD\u70D9\u7109\u70FD\u711C\u7119\u7165\u7155\u7188\u7166\u7162\u714C\u7156\u716C\u718F\u71FB\u7184\u7195\u71A8\u71AC\u71D7\u71B9\u71BE\u71D2\u71C9\u71D4\u71CE\u71E0\u71EC\u71E7\u71F5\u71FC\u71F9\u71FF\u720D\u7210\u721B\u7228\u722D\u722C\u7230\u7232\u723B\u723C\u723F\u7240\u7246\u724B\u7258\u7274\u727E\u7282\u7281\u7287\u7292\u7296\u72A2\u72A7\u72B9\u72B2\u72C3\u72C6\u72C4\u72CE\u72D2\u72E2\u72E0\u72E1\u72F9\u72F7\u500F\u7317\u730A\u731C\u7316\u731D\u7334\u732F\u7329\u7325\u733E\u734E\u734F\u9ED8\u7357\u736A\u7368\u7370\u7378\u7375\u737B\u737A\u73C8\u73B3\u73CE\u73BB\u73C0\u73E5\u73EE\u73DE\u74A2\u7405\u746F\u7425\u73F8\u7432\u743A\u7455\u743F\u745F\u7459\u7441\u745C\u7469\u7470\u7463\u746A\u7476\u747E\u748B\u749E\u74A7\u74CA\u74CF\u74D4\u73F1\uFFFD\uFFFD\uFFFD".split("");
        for (j3 = 0; j3 != D5[224].length; ++j3)
          if (D5[224][j3].charCodeAt(0) !== 65533) {
            e7[D5[224][j3]] = 57344 + j3;
            d2[57344 + j3] = D5[224][j3];
          }
        D5[225] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u74E0\u74E3\u74E7\u74E9\u74EE\u74F2\u74F0\u74F1\u74F8\u74F7\u7504\u7503\u7505\u750C\u750E\u750D\u7515\u7513\u751E\u7526\u752C\u753C\u7544\u754D\u754A\u7549\u755B\u7546\u755A\u7569\u7564\u7567\u756B\u756D\u7578\u7576\u7586\u7587\u7574\u758A\u7589\u7582\u7594\u759A\u759D\u75A5\u75A3\u75C2\u75B3\u75C3\u75B5\u75BD\u75B8\u75BC\u75B1\u75CD\u75CA\u75D2\u75D9\u75E3\u75DE\u75FE\u75FF\uFFFD\u75FC\u7601\u75F0\u75FA\u75F2\u75F3\u760B\u760D\u7609\u761F\u7627\u7620\u7621\u7622\u7624\u7634\u7630\u763B\u7647\u7648\u7646\u765C\u7658\u7661\u7662\u7668\u7669\u766A\u7667\u766C\u7670\u7672\u7676\u7678\u767C\u7680\u7683\u7688\u768B\u768E\u7696\u7693\u7699\u769A\u76B0\u76B4\u76B8\u76B9\u76BA\u76C2\u76CD\u76D6\u76D2\u76DE\u76E1\u76E5\u76E7\u76EA\u862F\u76FB\u7708\u7707\u7704\u7729\u7724\u771E\u7725\u7726\u771B\u7737\u7738\u7747\u775A\u7768\u776B\u775B\u7765\u777F\u777E\u7779\u778E\u778B\u7791\u77A0\u779E\u77B0\u77B6\u77B9\u77BF\u77BC\u77BD\u77BB\u77C7\u77CD\u77D7\u77DA\u77DC\u77E3\u77EE\u77FC\u780C\u7812\u7926\u7820\u792A\u7845\u788E\u7874\u7886\u787C\u789A\u788C\u78A3\u78B5\u78AA\u78AF\u78D1\u78C6\u78CB\u78D4\u78BE\u78BC\u78C5\u78CA\u78EC\uFFFD\uFFFD\uFFFD".split("");
        for (j3 = 0; j3 != D5[225].length; ++j3)
          if (D5[225][j3].charCodeAt(0) !== 65533) {
            e7[D5[225][j3]] = 57600 + j3;
            d2[57600 + j3] = D5[225][j3];
          }
        D5[226] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u78E7\u78DA\u78FD\u78F4\u7907\u7912\u7911\u7919\u792C\u792B\u7940\u7960\u7957\u795F\u795A\u7955\u7953\u797A\u797F\u798A\u799D\u79A7\u9F4B\u79AA\u79AE\u79B3\u79B9\u79BA\u79C9\u79D5\u79E7\u79EC\u79E1\u79E3\u7A08\u7A0D\u7A18\u7A19\u7A20\u7A1F\u7980\u7A31\u7A3B\u7A3E\u7A37\u7A43\u7A57\u7A49\u7A61\u7A62\u7A69\u9F9D\u7A70\u7A79\u7A7D\u7A88\u7A97\u7A95\u7A98\u7A96\u7AA9\u7AC8\u7AB0\uFFFD\u7AB6\u7AC5\u7AC4\u7ABF\u9083\u7AC7\u7ACA\u7ACD\u7ACF\u7AD5\u7AD3\u7AD9\u7ADA\u7ADD\u7AE1\u7AE2\u7AE6\u7AED\u7AF0\u7B02\u7B0F\u7B0A\u7B06\u7B33\u7B18\u7B19\u7B1E\u7B35\u7B28\u7B36\u7B50\u7B7A\u7B04\u7B4D\u7B0B\u7B4C\u7B45\u7B75\u7B65\u7B74\u7B67\u7B70\u7B71\u7B6C\u7B6E\u7B9D\u7B98\u7B9F\u7B8D\u7B9C\u7B9A\u7B8B\u7B92\u7B8F\u7B5D\u7B99\u7BCB\u7BC1\u7BCC\u7BCF\u7BB4\u7BC6\u7BDD\u7BE9\u7C11\u7C14\u7BE6\u7BE5\u7C60\u7C00\u7C07\u7C13\u7BF3\u7BF7\u7C17\u7C0D\u7BF6\u7C23\u7C27\u7C2A\u7C1F\u7C37\u7C2B\u7C3D\u7C4C\u7C43\u7C54\u7C4F\u7C40\u7C50\u7C58\u7C5F\u7C64\u7C56\u7C65\u7C6C\u7C75\u7C83\u7C90\u7CA4\u7CAD\u7CA2\u7CAB\u7CA1\u7CA8\u7CB3\u7CB2\u7CB1\u7CAE\u7CB9\u7CBD\u7CC0\u7CC5\u7CC2\u7CD8\u7CD2\u7CDC\u7CE2\u9B3B\u7CEF\u7CF2\u7CF4\u7CF6\u7CFA\u7D06\uFFFD\uFFFD\uFFFD".split("");
        for (j3 = 0; j3 != D5[226].length; ++j3)
          if (D5[226][j3].charCodeAt(0) !== 65533) {
            e7[D5[226][j3]] = 57856 + j3;
            d2[57856 + j3] = D5[226][j3];
          }
        D5[227] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u7D02\u7D1C\u7D15\u7D0A\u7D45\u7D4B\u7D2E\u7D32\u7D3F\u7D35\u7D46\u7D73\u7D56\u7D4E\u7D72\u7D68\u7D6E\u7D4F\u7D63\u7D93\u7D89\u7D5B\u7D8F\u7D7D\u7D9B\u7DBA\u7DAE\u7DA3\u7DB5\u7DC7\u7DBD\u7DAB\u7E3D\u7DA2\u7DAF\u7DDC\u7DB8\u7D9F\u7DB0\u7DD8\u7DDD\u7DE4\u7DDE\u7DFB\u7DF2\u7DE1\u7E05\u7E0A\u7E23\u7E21\u7E12\u7E31\u7E1F\u7E09\u7E0B\u7E22\u7E46\u7E66\u7E3B\u7E35\u7E39\u7E43\u7E37\uFFFD\u7E32\u7E3A\u7E67\u7E5D\u7E56\u7E5E\u7E59\u7E5A\u7E79\u7E6A\u7E69\u7E7C\u7E7B\u7E83\u7DD5\u7E7D\u8FAE\u7E7F\u7E88\u7E89\u7E8C\u7E92\u7E90\u7E93\u7E94\u7E96\u7E8E\u7E9B\u7E9C\u7F38\u7F3A\u7F45\u7F4C\u7F4D\u7F4E\u7F50\u7F51\u7F55\u7F54\u7F58\u7F5F\u7F60\u7F68\u7F69\u7F67\u7F78\u7F82\u7F86\u7F83\u7F88\u7F87\u7F8C\u7F94\u7F9E\u7F9D\u7F9A\u7FA3\u7FAF\u7FB2\u7FB9\u7FAE\u7FB6\u7FB8\u8B71\u7FC5\u7FC6\u7FCA\u7FD5\u7FD4\u7FE1\u7FE6\u7FE9\u7FF3\u7FF9\u98DC\u8006\u8004\u800B\u8012\u8018\u8019\u801C\u8021\u8028\u803F\u803B\u804A\u8046\u8052\u8058\u805A\u805F\u8062\u8068\u8073\u8072\u8070\u8076\u8079\u807D\u807F\u8084\u8086\u8085\u809B\u8093\u809A\u80AD\u5190\u80AC\u80DB\u80E5\u80D9\u80DD\u80C4\u80DA\u80D6\u8109\u80EF\u80F1\u811B\u8129\u8123\u812F\u814B\uFFFD\uFFFD\uFFFD".split("");
        for (j3 = 0; j3 != D5[227].length; ++j3)
          if (D5[227][j3].charCodeAt(0) !== 65533) {
            e7[D5[227][j3]] = 58112 + j3;
            d2[58112 + j3] = D5[227][j3];
          }
        D5[228] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u968B\u8146\u813E\u8153\u8151\u80FC\u8171\u816E\u8165\u8166\u8174\u8183\u8188\u818A\u8180\u8182\u81A0\u8195\u81A4\u81A3\u815F\u8193\u81A9\u81B0\u81B5\u81BE\u81B8\u81BD\u81C0\u81C2\u81BA\u81C9\u81CD\u81D1\u81D9\u81D8\u81C8\u81DA\u81DF\u81E0\u81E7\u81FA\u81FB\u81FE\u8201\u8202\u8205\u8207\u820A\u820D\u8210\u8216\u8229\u822B\u8238\u8233\u8240\u8259\u8258\u825D\u825A\u825F\u8264\uFFFD\u8262\u8268\u826A\u826B\u822E\u8271\u8277\u8278\u827E\u828D\u8292\u82AB\u829F\u82BB\u82AC\u82E1\u82E3\u82DF\u82D2\u82F4\u82F3\u82FA\u8393\u8303\u82FB\u82F9\u82DE\u8306\u82DC\u8309\u82D9\u8335\u8334\u8316\u8332\u8331\u8340\u8339\u8350\u8345\u832F\u832B\u8317\u8318\u8385\u839A\u83AA\u839F\u83A2\u8396\u8323\u838E\u8387\u838A\u837C\u83B5\u8373\u8375\u83A0\u8389\u83A8\u83F4\u8413\u83EB\u83CE\u83FD\u8403\u83D8\u840B\u83C1\u83F7\u8407\u83E0\u83F2\u840D\u8422\u8420\u83BD\u8438\u8506\u83FB\u846D\u842A\u843C\u855A\u8484\u8477\u846B\u84AD\u846E\u8482\u8469\u8446\u842C\u846F\u8479\u8435\u84CA\u8462\u84B9\u84BF\u849F\u84D9\u84CD\u84BB\u84DA\u84D0\u84C1\u84C6\u84D6\u84A1\u8521\u84FF\u84F4\u8517\u8518\u852C\u851F\u8515\u8514\u84FC\u8540\u8563\u8558\u8548\uFFFD\uFFFD\uFFFD".split("");
        for (j3 = 0; j3 != D5[228].length; ++j3)
          if (D5[228][j3].charCodeAt(0) !== 65533) {
            e7[D5[228][j3]] = 58368 + j3;
            d2[58368 + j3] = D5[228][j3];
          }
        D5[229] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u8541\u8602\u854B\u8555\u8580\u85A4\u8588\u8591\u858A\u85A8\u856D\u8594\u859B\u85EA\u8587\u859C\u8577\u857E\u8590\u85C9\u85BA\u85CF\u85B9\u85D0\u85D5\u85DD\u85E5\u85DC\u85F9\u860A\u8613\u860B\u85FE\u85FA\u8606\u8622\u861A\u8630\u863F\u864D\u4E55\u8654\u865F\u8667\u8671\u8693\u86A3\u86A9\u86AA\u868B\u868C\u86B6\u86AF\u86C4\u86C6\u86B0\u86C9\u8823\u86AB\u86D4\u86DE\u86E9\u86EC\uFFFD\u86DF\u86DB\u86EF\u8712\u8706\u8708\u8700\u8703\u86FB\u8711\u8709\u870D\u86F9\u870A\u8734\u873F\u8737\u873B\u8725\u8729\u871A\u8760\u875F\u8778\u874C\u874E\u8774\u8757\u8768\u876E\u8759\u8753\u8763\u876A\u8805\u87A2\u879F\u8782\u87AF\u87CB\u87BD\u87C0\u87D0\u96D6\u87AB\u87C4\u87B3\u87C7\u87C6\u87BB\u87EF\u87F2\u87E0\u880F\u880D\u87FE\u87F6\u87F7\u880E\u87D2\u8811\u8816\u8815\u8822\u8821\u8831\u8836\u8839\u8827\u883B\u8844\u8842\u8852\u8859\u885E\u8862\u886B\u8881\u887E\u889E\u8875\u887D\u88B5\u8872\u8882\u8897\u8892\u88AE\u8899\u88A2\u888D\u88A4\u88B0\u88BF\u88B1\u88C3\u88C4\u88D4\u88D8\u88D9\u88DD\u88F9\u8902\u88FC\u88F4\u88E8\u88F2\u8904\u890C\u890A\u8913\u8943\u891E\u8925\u892A\u892B\u8941\u8944\u893B\u8936\u8938\u894C\u891D\u8960\u895E\uFFFD\uFFFD\uFFFD".split("");
        for (j3 = 0; j3 != D5[229].length; ++j3)
          if (D5[229][j3].charCodeAt(0) !== 65533) {
            e7[D5[229][j3]] = 58624 + j3;
            d2[58624 + j3] = D5[229][j3];
          }
        D5[230] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u8966\u8964\u896D\u896A\u896F\u8974\u8977\u897E\u8983\u8988\u898A\u8993\u8998\u89A1\u89A9\u89A6\u89AC\u89AF\u89B2\u89BA\u89BD\u89BF\u89C0\u89DA\u89DC\u89DD\u89E7\u89F4\u89F8\u8A03\u8A16\u8A10\u8A0C\u8A1B\u8A1D\u8A25\u8A36\u8A41\u8A5B\u8A52\u8A46\u8A48\u8A7C\u8A6D\u8A6C\u8A62\u8A85\u8A82\u8A84\u8AA8\u8AA1\u8A91\u8AA5\u8AA6\u8A9A\u8AA3\u8AC4\u8ACD\u8AC2\u8ADA\u8AEB\u8AF3\u8AE7\uFFFD\u8AE4\u8AF1\u8B14\u8AE0\u8AE2\u8AF7\u8ADE\u8ADB\u8B0C\u8B07\u8B1A\u8AE1\u8B16\u8B10\u8B17\u8B20\u8B33\u97AB\u8B26\u8B2B\u8B3E\u8B28\u8B41\u8B4C\u8B4F\u8B4E\u8B49\u8B56\u8B5B\u8B5A\u8B6B\u8B5F\u8B6C\u8B6F\u8B74\u8B7D\u8B80\u8B8C\u8B8E\u8B92\u8B93\u8B96\u8B99\u8B9A\u8C3A\u8C41\u8C3F\u8C48\u8C4C\u8C4E\u8C50\u8C55\u8C62\u8C6C\u8C78\u8C7A\u8C82\u8C89\u8C85\u8C8A\u8C8D\u8C8E\u8C94\u8C7C\u8C98\u621D\u8CAD\u8CAA\u8CBD\u8CB2\u8CB3\u8CAE\u8CB6\u8CC8\u8CC1\u8CE4\u8CE3\u8CDA\u8CFD\u8CFA\u8CFB\u8D04\u8D05\u8D0A\u8D07\u8D0F\u8D0D\u8D10\u9F4E\u8D13\u8CCD\u8D14\u8D16\u8D67\u8D6D\u8D71\u8D73\u8D81\u8D99\u8DC2\u8DBE\u8DBA\u8DCF\u8DDA\u8DD6\u8DCC\u8DDB\u8DCB\u8DEA\u8DEB\u8DDF\u8DE3\u8DFC\u8E08\u8E09\u8DFF\u8E1D\u8E1E\u8E10\u8E1F\u8E42\u8E35\u8E30\u8E34\u8E4A\uFFFD\uFFFD\uFFFD".split("");
        for (j3 = 0; j3 != D5[230].length; ++j3)
          if (D5[230][j3].charCodeAt(0) !== 65533) {
            e7[D5[230][j3]] = 58880 + j3;
            d2[58880 + j3] = D5[230][j3];
          }
        D5[231] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u8E47\u8E49\u8E4C\u8E50\u8E48\u8E59\u8E64\u8E60\u8E2A\u8E63\u8E55\u8E76\u8E72\u8E7C\u8E81\u8E87\u8E85\u8E84\u8E8B\u8E8A\u8E93\u8E91\u8E94\u8E99\u8EAA\u8EA1\u8EAC\u8EB0\u8EC6\u8EB1\u8EBE\u8EC5\u8EC8\u8ECB\u8EDB\u8EE3\u8EFC\u8EFB\u8EEB\u8EFE\u8F0A\u8F05\u8F15\u8F12\u8F19\u8F13\u8F1C\u8F1F\u8F1B\u8F0C\u8F26\u8F33\u8F3B\u8F39\u8F45\u8F42\u8F3E\u8F4C\u8F49\u8F46\u8F4E\u8F57\u8F5C\uFFFD\u8F62\u8F63\u8F64\u8F9C\u8F9F\u8FA3\u8FAD\u8FAF\u8FB7\u8FDA\u8FE5\u8FE2\u8FEA\u8FEF\u9087\u8FF4\u9005\u8FF9\u8FFA\u9011\u9015\u9021\u900D\u901E\u9016\u900B\u9027\u9036\u9035\u9039\u8FF8\u904F\u9050\u9051\u9052\u900E\u9049\u903E\u9056\u9058\u905E\u9068\u906F\u9076\u96A8\u9072\u9082\u907D\u9081\u9080\u908A\u9089\u908F\u90A8\u90AF\u90B1\u90B5\u90E2\u90E4\u6248\u90DB\u9102\u9112\u9119\u9132\u9130\u914A\u9156\u9158\u9163\u9165\u9169\u9173\u9172\u918B\u9189\u9182\u91A2\u91AB\u91AF\u91AA\u91B5\u91B4\u91BA\u91C0\u91C1\u91C9\u91CB\u91D0\u91D6\u91DF\u91E1\u91DB\u91FC\u91F5\u91F6\u921E\u91FF\u9214\u922C\u9215\u9211\u925E\u9257\u9245\u9249\u9264\u9248\u9295\u923F\u924B\u9250\u929C\u9296\u9293\u929B\u925A\u92CF\u92B9\u92B7\u92E9\u930F\u92FA\u9344\u932E\uFFFD\uFFFD\uFFFD".split("");
        for (j3 = 0; j3 != D5[231].length; ++j3)
          if (D5[231][j3].charCodeAt(0) !== 65533) {
            e7[D5[231][j3]] = 59136 + j3;
            d2[59136 + j3] = D5[231][j3];
          }
        D5[232] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u9319\u9322\u931A\u9323\u933A\u9335\u933B\u935C\u9360\u937C\u936E\u9356\u93B0\u93AC\u93AD\u9394\u93B9\u93D6\u93D7\u93E8\u93E5\u93D8\u93C3\u93DD\u93D0\u93C8\u93E4\u941A\u9414\u9413\u9403\u9407\u9410\u9436\u942B\u9435\u9421\u943A\u9441\u9452\u9444\u945B\u9460\u9462\u945E\u946A\u9229\u9470\u9475\u9477\u947D\u945A\u947C\u947E\u9481\u947F\u9582\u9587\u958A\u9594\u9596\u9598\u9599\uFFFD\u95A0\u95A8\u95A7\u95AD\u95BC\u95BB\u95B9\u95BE\u95CA\u6FF6\u95C3\u95CD\u95CC\u95D5\u95D4\u95D6\u95DC\u95E1\u95E5\u95E2\u9621\u9628\u962E\u962F\u9642\u964C\u964F\u964B\u9677\u965C\u965E\u965D\u965F\u9666\u9672\u966C\u968D\u9698\u9695\u9697\u96AA\u96A7\u96B1\u96B2\u96B0\u96B4\u96B6\u96B8\u96B9\u96CE\u96CB\u96C9\u96CD\u894D\u96DC\u970D\u96D5\u96F9\u9704\u9706\u9708\u9713\u970E\u9711\u970F\u9716\u9719\u9724\u972A\u9730\u9739\u973D\u973E\u9744\u9746\u9748\u9742\u9749\u975C\u9760\u9764\u9766\u9768\u52D2\u976B\u9771\u9779\u9785\u977C\u9781\u977A\u9786\u978B\u978F\u9790\u979C\u97A8\u97A6\u97A3\u97B3\u97B4\u97C3\u97C6\u97C8\u97CB\u97DC\u97ED\u9F4F\u97F2\u7ADF\u97F6\u97F5\u980F\u980C\u9838\u9824\u9821\u9837\u983D\u9846\u984F\u984B\u986B\u986F\u9870\uFFFD\uFFFD\uFFFD".split("");
        for (j3 = 0; j3 != D5[232].length; ++j3)
          if (D5[232][j3].charCodeAt(0) !== 65533) {
            e7[D5[232][j3]] = 59392 + j3;
            d2[59392 + j3] = D5[232][j3];
          }
        D5[233] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u9871\u9874\u9873\u98AA\u98AF\u98B1\u98B6\u98C4\u98C3\u98C6\u98E9\u98EB\u9903\u9909\u9912\u9914\u9918\u9921\u991D\u991E\u9924\u9920\u992C\u992E\u993D\u993E\u9942\u9949\u9945\u9950\u994B\u9951\u9952\u994C\u9955\u9997\u9998\u99A5\u99AD\u99AE\u99BC\u99DF\u99DB\u99DD\u99D8\u99D1\u99ED\u99EE\u99F1\u99F2\u99FB\u99F8\u9A01\u9A0F\u9A05\u99E2\u9A19\u9A2B\u9A37\u9A45\u9A42\u9A40\u9A43\uFFFD\u9A3E\u9A55\u9A4D\u9A5B\u9A57\u9A5F\u9A62\u9A65\u9A64\u9A69\u9A6B\u9A6A\u9AAD\u9AB0\u9ABC\u9AC0\u9ACF\u9AD1\u9AD3\u9AD4\u9ADE\u9ADF\u9AE2\u9AE3\u9AE6\u9AEF\u9AEB\u9AEE\u9AF4\u9AF1\u9AF7\u9AFB\u9B06\u9B18\u9B1A\u9B1F\u9B22\u9B23\u9B25\u9B27\u9B28\u9B29\u9B2A\u9B2E\u9B2F\u9B32\u9B44\u9B43\u9B4F\u9B4D\u9B4E\u9B51\u9B58\u9B74\u9B93\u9B83\u9B91\u9B96\u9B97\u9B9F\u9BA0\u9BA8\u9BB4\u9BC0\u9BCA\u9BB9\u9BC6\u9BCF\u9BD1\u9BD2\u9BE3\u9BE2\u9BE4\u9BD4\u9BE1\u9C3A\u9BF2\u9BF1\u9BF0\u9C15\u9C14\u9C09\u9C13\u9C0C\u9C06\u9C08\u9C12\u9C0A\u9C04\u9C2E\u9C1B\u9C25\u9C24\u9C21\u9C30\u9C47\u9C32\u9C46\u9C3E\u9C5A\u9C60\u9C67\u9C76\u9C78\u9CE7\u9CEC\u9CF0\u9D09\u9D08\u9CEB\u9D03\u9D06\u9D2A\u9D26\u9DAF\u9D23\u9D1F\u9D44\u9D15\u9D12\u9D41\u9D3F\u9D3E\u9D46\u9D48\uFFFD\uFFFD\uFFFD".split("");
        for (j3 = 0; j3 != D5[233].length; ++j3)
          if (D5[233][j3].charCodeAt(0) !== 65533) {
            e7[D5[233][j3]] = 59648 + j3;
            d2[59648 + j3] = D5[233][j3];
          }
        D5[234] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u9D5D\u9D5E\u9D64\u9D51\u9D50\u9D59\u9D72\u9D89\u9D87\u9DAB\u9D6F\u9D7A\u9D9A\u9DA4\u9DA9\u9DB2\u9DC4\u9DC1\u9DBB\u9DB8\u9DBA\u9DC6\u9DCF\u9DC2\u9DD9\u9DD3\u9DF8\u9DE6\u9DED\u9DEF\u9DFD\u9E1A\u9E1B\u9E1E\u9E75\u9E79\u9E7D\u9E81\u9E88\u9E8B\u9E8C\u9E92\u9E95\u9E91\u9E9D\u9EA5\u9EA9\u9EB8\u9EAA\u9EAD\u9761\u9ECC\u9ECE\u9ECF\u9ED0\u9ED4\u9EDC\u9EDE\u9EDD\u9EE0\u9EE5\u9EE8\u9EEF\uFFFD\u9EF4\u9EF6\u9EF7\u9EF9\u9EFB\u9EFC\u9EFD\u9F07\u9F08\u76B7\u9F15\u9F21\u9F2C\u9F3E\u9F4A\u9F52\u9F54\u9F63\u9F5F\u9F60\u9F61\u9F66\u9F67\u9F6C\u9F6A\u9F77\u9F72\u9F76\u9F95\u9F9C\u9FA0\u582F\u69C7\u9059\u7464\u51DC\u7199\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD".split("");
        for (j3 = 0; j3 != D5[234].length; ++j3)
          if (D5[234][j3].charCodeAt(0) !== 65533) {
            e7[D5[234][j3]] = 59904 + j3;
            d2[59904 + j3] = D5[234][j3];
          }
        D5[237] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u7E8A\u891C\u9348\u9288\u84DC\u4FC9\u70BB\u6631\u68C8\u92F9\u66FB\u5F45\u4E28\u4EE1\u4EFC\u4F00\u4F03\u4F39\u4F56\u4F92\u4F8A\u4F9A\u4F94\u4FCD\u5040\u5022\u4FFF\u501E\u5046\u5070\u5042\u5094\u50F4\u50D8\u514A\u5164\u519D\u51BE\u51EC\u5215\u529C\u52A6\u52C0\u52DB\u5300\u5307\u5324\u5372\u5393\u53B2\u53DD\uFA0E\u549C\u548A\u54A9\u54FF\u5586\u5759\u5765\u57AC\u57C8\u57C7\uFA0F\uFFFD\uFA10\u589E\u58B2\u590B\u5953\u595B\u595D\u5963\u59A4\u59BA\u5B56\u5BC0\u752F\u5BD8\u5BEC\u5C1E\u5CA6\u5CBA\u5CF5\u5D27\u5D53\uFA11\u5D42\u5D6D\u5DB8\u5DB9\u5DD0\u5F21\u5F34\u5F67\u5FB7\u5FDE\u605D\u6085\u608A\u60DE\u60D5\u6120\u60F2\u6111\u6137\u6130\u6198\u6213\u62A6\u63F5\u6460\u649D\u64CE\u654E\u6600\u6615\u663B\u6609\u662E\u661E\u6624\u6665\u6657\u6659\uFA12\u6673\u6699\u66A0\u66B2\u66BF\u66FA\u670E\uF929\u6766\u67BB\u6852\u67C0\u6801\u6844\u68CF\uFA13\u6968\uFA14\u6998\u69E2\u6A30\u6A6B\u6A46\u6A73\u6A7E\u6AE2\u6AE4\u6BD6\u6C3F\u6C5C\u6C86\u6C6F\u6CDA\u6D04\u6D87\u6D6F\u6D96\u6DAC\u6DCF\u6DF8\u6DF2\u6DFC\u6E39\u6E5C\u6E27\u6E3C\u6EBF\u6F88\u6FB5\u6FF5\u7005\u7007\u7028\u7085\u70AB\u710F\u7104\u715C\u7146\u7147\uFA15\u71C1\u71FE\u72B1\uFFFD\uFFFD\uFFFD".split("");
        for (j3 = 0; j3 != D5[237].length; ++j3)
          if (D5[237][j3].charCodeAt(0) !== 65533) {
            e7[D5[237][j3]] = 60672 + j3;
            d2[60672 + j3] = D5[237][j3];
          }
        D5[238] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u72BE\u7324\uFA16\u7377\u73BD\u73C9\u73D6\u73E3\u73D2\u7407\u73F5\u7426\u742A\u7429\u742E\u7462\u7489\u749F\u7501\u756F\u7682\u769C\u769E\u769B\u76A6\uFA17\u7746\u52AF\u7821\u784E\u7864\u787A\u7930\uFA18\uFA19\uFA1A\u7994\uFA1B\u799B\u7AD1\u7AE7\uFA1C\u7AEB\u7B9E\uFA1D\u7D48\u7D5C\u7DB7\u7DA0\u7DD6\u7E52\u7F47\u7FA1\uFA1E\u8301\u8362\u837F\u83C7\u83F6\u8448\u84B4\u8553\u8559\uFFFD\u856B\uFA1F\u85B0\uFA20\uFA21\u8807\u88F5\u8A12\u8A37\u8A79\u8AA7\u8ABE\u8ADF\uFA22\u8AF6\u8B53\u8B7F\u8CF0\u8CF4\u8D12\u8D76\uFA23\u8ECF\uFA24\uFA25\u9067\u90DE\uFA26\u9115\u9127\u91DA\u91D7\u91DE\u91ED\u91EE\u91E4\u91E5\u9206\u9210\u920A\u923A\u9240\u923C\u924E\u9259\u9251\u9239\u9267\u92A7\u9277\u9278\u92E7\u92D7\u92D9\u92D0\uFA27\u92D5\u92E0\u92D3\u9325\u9321\u92FB\uFA28\u931E\u92FF\u931D\u9302\u9370\u9357\u93A4\u93C6\u93DE\u93F8\u9431\u9445\u9448\u9592\uF9DC\uFA29\u969D\u96AF\u9733\u973B\u9743\u974D\u974F\u9751\u9755\u9857\u9865\uFA2A\uFA2B\u9927\uFA2C\u999E\u9A4E\u9AD9\u9ADC\u9B75\u9B72\u9B8F\u9BB1\u9BBB\u9C00\u9D70\u9D6B\uFA2D\u9E19\u9ED1\uFFFD\uFFFD\u2170\u2171\u2172\u2173\u2174\u2175\u2176\u2177\u2178\u2179\uFFE2\uFFE4\uFF07\uFF02\uFFFD\uFFFD\uFFFD".split("");
        for (j3 = 0; j3 != D5[238].length; ++j3)
          if (D5[238][j3].charCodeAt(0) !== 65533) {
            e7[D5[238][j3]] = 60928 + j3;
            d2[60928 + j3] = D5[238][j3];
          }
        D5[250] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u2170\u2171\u2172\u2173\u2174\u2175\u2176\u2177\u2178\u2179\u2160\u2161\u2162\u2163\u2164\u2165\u2166\u2167\u2168\u2169\uFFE2\uFFE4\uFF07\uFF02\u3231\u2116\u2121\u2235\u7E8A\u891C\u9348\u9288\u84DC\u4FC9\u70BB\u6631\u68C8\u92F9\u66FB\u5F45\u4E28\u4EE1\u4EFC\u4F00\u4F03\u4F39\u4F56\u4F92\u4F8A\u4F9A\u4F94\u4FCD\u5040\u5022\u4FFF\u501E\u5046\u5070\u5042\u5094\u50F4\u50D8\u514A\uFFFD\u5164\u519D\u51BE\u51EC\u5215\u529C\u52A6\u52C0\u52DB\u5300\u5307\u5324\u5372\u5393\u53B2\u53DD\uFA0E\u549C\u548A\u54A9\u54FF\u5586\u5759\u5765\u57AC\u57C8\u57C7\uFA0F\uFA10\u589E\u58B2\u590B\u5953\u595B\u595D\u5963\u59A4\u59BA\u5B56\u5BC0\u752F\u5BD8\u5BEC\u5C1E\u5CA6\u5CBA\u5CF5\u5D27\u5D53\uFA11\u5D42\u5D6D\u5DB8\u5DB9\u5DD0\u5F21\u5F34\u5F67\u5FB7\u5FDE\u605D\u6085\u608A\u60DE\u60D5\u6120\u60F2\u6111\u6137\u6130\u6198\u6213\u62A6\u63F5\u6460\u649D\u64CE\u654E\u6600\u6615\u663B\u6609\u662E\u661E\u6624\u6665\u6657\u6659\uFA12\u6673\u6699\u66A0\u66B2\u66BF\u66FA\u670E\uF929\u6766\u67BB\u6852\u67C0\u6801\u6844\u68CF\uFA13\u6968\uFA14\u6998\u69E2\u6A30\u6A6B\u6A46\u6A73\u6A7E\u6AE2\u6AE4\u6BD6\u6C3F\u6C5C\u6C86\u6C6F\u6CDA\u6D04\u6D87\u6D6F\uFFFD\uFFFD\uFFFD".split("");
        for (j3 = 0; j3 != D5[250].length; ++j3)
          if (D5[250][j3].charCodeAt(0) !== 65533) {
            e7[D5[250][j3]] = 64e3 + j3;
            d2[64e3 + j3] = D5[250][j3];
          }
        D5[251] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u6D96\u6DAC\u6DCF\u6DF8\u6DF2\u6DFC\u6E39\u6E5C\u6E27\u6E3C\u6EBF\u6F88\u6FB5\u6FF5\u7005\u7007\u7028\u7085\u70AB\u710F\u7104\u715C\u7146\u7147\uFA15\u71C1\u71FE\u72B1\u72BE\u7324\uFA16\u7377\u73BD\u73C9\u73D6\u73E3\u73D2\u7407\u73F5\u7426\u742A\u7429\u742E\u7462\u7489\u749F\u7501\u756F\u7682\u769C\u769E\u769B\u76A6\uFA17\u7746\u52AF\u7821\u784E\u7864\u787A\u7930\uFA18\uFA19\uFFFD\uFA1A\u7994\uFA1B\u799B\u7AD1\u7AE7\uFA1C\u7AEB\u7B9E\uFA1D\u7D48\u7D5C\u7DB7\u7DA0\u7DD6\u7E52\u7F47\u7FA1\uFA1E\u8301\u8362\u837F\u83C7\u83F6\u8448\u84B4\u8553\u8559\u856B\uFA1F\u85B0\uFA20\uFA21\u8807\u88F5\u8A12\u8A37\u8A79\u8AA7\u8ABE\u8ADF\uFA22\u8AF6\u8B53\u8B7F\u8CF0\u8CF4\u8D12\u8D76\uFA23\u8ECF\uFA24\uFA25\u9067\u90DE\uFA26\u9115\u9127\u91DA\u91D7\u91DE\u91ED\u91EE\u91E4\u91E5\u9206\u9210\u920A\u923A\u9240\u923C\u924E\u9259\u9251\u9239\u9267\u92A7\u9277\u9278\u92E7\u92D7\u92D9\u92D0\uFA27\u92D5\u92E0\u92D3\u9325\u9321\u92FB\uFA28\u931E\u92FF\u931D\u9302\u9370\u9357\u93A4\u93C6\u93DE\u93F8\u9431\u9445\u9448\u9592\uF9DC\uFA29\u969D\u96AF\u9733\u973B\u9743\u974D\u974F\u9751\u9755\u9857\u9865\uFA2A\uFA2B\u9927\uFA2C\u999E\u9A4E\u9AD9\uFFFD\uFFFD\uFFFD".split("");
        for (j3 = 0; j3 != D5[251].length; ++j3)
          if (D5[251][j3].charCodeAt(0) !== 65533) {
            e7[D5[251][j3]] = 64256 + j3;
            d2[64256 + j3] = D5[251][j3];
          }
        D5[252] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u9ADC\u9B75\u9B72\u9B8F\u9BB1\u9BBB\u9C00\u9D70\u9D6B\uFA2D\u9E19\u9ED1\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD".split("");
        for (j3 = 0; j3 != D5[252].length; ++j3)
          if (D5[252][j3].charCodeAt(0) !== 65533) {
            e7[D5[252][j3]] = 64512 + j3;
            d2[64512 + j3] = D5[252][j3];
          }
        return { "enc": e7, "dec": d2 };
      }();
      cptable2[936] = function() {
        var d2 = [], e7 = {}, D5 = [], j3;
        D5[0] = "\0\x07\b	\n\v\f\r\x1B !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~\x7F\u20AC\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD".split("");
        for (j3 = 0; j3 != D5[0].length; ++j3)
          if (D5[0][j3].charCodeAt(0) !== 65533) {
            e7[D5[0][j3]] = 0 + j3;
            d2[0 + j3] = D5[0][j3];
          }
        D5[129] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u4E02\u4E04\u4E05\u4E06\u4E0F\u4E12\u4E17\u4E1F\u4E20\u4E21\u4E23\u4E26\u4E29\u4E2E\u4E2F\u4E31\u4E33\u4E35\u4E37\u4E3C\u4E40\u4E41\u4E42\u4E44\u4E46\u4E4A\u4E51\u4E55\u4E57\u4E5A\u4E5B\u4E62\u4E63\u4E64\u4E65\u4E67\u4E68\u4E6A\u4E6B\u4E6C\u4E6D\u4E6E\u4E6F\u4E72\u4E74\u4E75\u4E76\u4E77\u4E78\u4E79\u4E7A\u4E7B\u4E7C\u4E7D\u4E7F\u4E80\u4E81\u4E82\u4E83\u4E84\u4E85\u4E87\u4E8A\uFFFD\u4E90\u4E96\u4E97\u4E99\u4E9C\u4E9D\u4E9E\u4EA3\u4EAA\u4EAF\u4EB0\u4EB1\u4EB4\u4EB6\u4EB7\u4EB8\u4EB9\u4EBC\u4EBD\u4EBE\u4EC8\u4ECC\u4ECF\u4ED0\u4ED2\u4EDA\u4EDB\u4EDC\u4EE0\u4EE2\u4EE6\u4EE7\u4EE9\u4EED\u4EEE\u4EEF\u4EF1\u4EF4\u4EF8\u4EF9\u4EFA\u4EFC\u4EFE\u4F00\u4F02\u4F03\u4F04\u4F05\u4F06\u4F07\u4F08\u4F0B\u4F0C\u4F12\u4F13\u4F14\u4F15\u4F16\u4F1C\u4F1D\u4F21\u4F23\u4F28\u4F29\u4F2C\u4F2D\u4F2E\u4F31\u4F33\u4F35\u4F37\u4F39\u4F3B\u4F3E\u4F3F\u4F40\u4F41\u4F42\u4F44\u4F45\u4F47\u4F48\u4F49\u4F4A\u4F4B\u4F4C\u4F52\u4F54\u4F56\u4F61\u4F62\u4F66\u4F68\u4F6A\u4F6B\u4F6D\u4F6E\u4F71\u4F72\u4F75\u4F77\u4F78\u4F79\u4F7A\u4F7D\u4F80\u4F81\u4F82\u4F85\u4F86\u4F87\u4F8A\u4F8C\u4F8E\u4F90\u4F92\u4F93\u4F95\u4F96\u4F98\u4F99\u4F9A\u4F9C\u4F9E\u4F9F\u4FA1\u4FA2\uFFFD".split("");
        for (j3 = 0; j3 != D5[129].length; ++j3)
          if (D5[129][j3].charCodeAt(0) !== 65533) {
            e7[D5[129][j3]] = 33024 + j3;
            d2[33024 + j3] = D5[129][j3];
          }
        D5[130] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u4FA4\u4FAB\u4FAD\u4FB0\u4FB1\u4FB2\u4FB3\u4FB4\u4FB6\u4FB7\u4FB8\u4FB9\u4FBA\u4FBB\u4FBC\u4FBD\u4FBE\u4FC0\u4FC1\u4FC2\u4FC6\u4FC7\u4FC8\u4FC9\u4FCB\u4FCC\u4FCD\u4FD2\u4FD3\u4FD4\u4FD5\u4FD6\u4FD9\u4FDB\u4FE0\u4FE2\u4FE4\u4FE5\u4FE7\u4FEB\u4FEC\u4FF0\u4FF2\u4FF4\u4FF5\u4FF6\u4FF7\u4FF9\u4FFB\u4FFC\u4FFD\u4FFF\u5000\u5001\u5002\u5003\u5004\u5005\u5006\u5007\u5008\u5009\u500A\uFFFD\u500B\u500E\u5010\u5011\u5013\u5015\u5016\u5017\u501B\u501D\u501E\u5020\u5022\u5023\u5024\u5027\u502B\u502F\u5030\u5031\u5032\u5033\u5034\u5035\u5036\u5037\u5038\u5039\u503B\u503D\u503F\u5040\u5041\u5042\u5044\u5045\u5046\u5049\u504A\u504B\u504D\u5050\u5051\u5052\u5053\u5054\u5056\u5057\u5058\u5059\u505B\u505D\u505E\u505F\u5060\u5061\u5062\u5063\u5064\u5066\u5067\u5068\u5069\u506A\u506B\u506D\u506E\u506F\u5070\u5071\u5072\u5073\u5074\u5075\u5078\u5079\u507A\u507C\u507D\u5081\u5082\u5083\u5084\u5086\u5087\u5089\u508A\u508B\u508C\u508E\u508F\u5090\u5091\u5092\u5093\u5094\u5095\u5096\u5097\u5098\u5099\u509A\u509B\u509C\u509D\u509E\u509F\u50A0\u50A1\u50A2\u50A4\u50A6\u50AA\u50AB\u50AD\u50AE\u50AF\u50B0\u50B1\u50B3\u50B4\u50B5\u50B6\u50B7\u50B8\u50B9\u50BC\uFFFD".split("");
        for (j3 = 0; j3 != D5[130].length; ++j3)
          if (D5[130][j3].charCodeAt(0) !== 65533) {
            e7[D5[130][j3]] = 33280 + j3;
            d2[33280 + j3] = D5[130][j3];
          }
        D5[131] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u50BD\u50BE\u50BF\u50C0\u50C1\u50C2\u50C3\u50C4\u50C5\u50C6\u50C7\u50C8\u50C9\u50CA\u50CB\u50CC\u50CD\u50CE\u50D0\u50D1\u50D2\u50D3\u50D4\u50D5\u50D7\u50D8\u50D9\u50DB\u50DC\u50DD\u50DE\u50DF\u50E0\u50E1\u50E2\u50E3\u50E4\u50E5\u50E8\u50E9\u50EA\u50EB\u50EF\u50F0\u50F1\u50F2\u50F4\u50F6\u50F7\u50F8\u50F9\u50FA\u50FC\u50FD\u50FE\u50FF\u5100\u5101\u5102\u5103\u5104\u5105\u5108\uFFFD\u5109\u510A\u510C\u510D\u510E\u510F\u5110\u5111\u5113\u5114\u5115\u5116\u5117\u5118\u5119\u511A\u511B\u511C\u511D\u511E\u511F\u5120\u5122\u5123\u5124\u5125\u5126\u5127\u5128\u5129\u512A\u512B\u512C\u512D\u512E\u512F\u5130\u5131\u5132\u5133\u5134\u5135\u5136\u5137\u5138\u5139\u513A\u513B\u513C\u513D\u513E\u5142\u5147\u514A\u514C\u514E\u514F\u5150\u5152\u5153\u5157\u5158\u5159\u515B\u515D\u515E\u515F\u5160\u5161\u5163\u5164\u5166\u5167\u5169\u516A\u516F\u5172\u517A\u517E\u517F\u5183\u5184\u5186\u5187\u518A\u518B\u518E\u518F\u5190\u5191\u5193\u5194\u5198\u519A\u519D\u519E\u519F\u51A1\u51A3\u51A6\u51A7\u51A8\u51A9\u51AA\u51AD\u51AE\u51B4\u51B8\u51B9\u51BA\u51BE\u51BF\u51C1\u51C2\u51C3\u51C5\u51C8\u51CA\u51CD\u51CE\u51D0\u51D2\u51D3\u51D4\u51D5\u51D6\u51D7\uFFFD".split("");
        for (j3 = 0; j3 != D5[131].length; ++j3)
          if (D5[131][j3].charCodeAt(0) !== 65533) {
            e7[D5[131][j3]] = 33536 + j3;
            d2[33536 + j3] = D5[131][j3];
          }
        D5[132] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u51D8\u51D9\u51DA\u51DC\u51DE\u51DF\u51E2\u51E3\u51E5\u51E6\u51E7\u51E8\u51E9\u51EA\u51EC\u51EE\u51F1\u51F2\u51F4\u51F7\u51FE\u5204\u5205\u5209\u520B\u520C\u520F\u5210\u5213\u5214\u5215\u521C\u521E\u521F\u5221\u5222\u5223\u5225\u5226\u5227\u522A\u522C\u522F\u5231\u5232\u5234\u5235\u523C\u523E\u5244\u5245\u5246\u5247\u5248\u5249\u524B\u524E\u524F\u5252\u5253\u5255\u5257\u5258\uFFFD\u5259\u525A\u525B\u525D\u525F\u5260\u5262\u5263\u5264\u5266\u5268\u526B\u526C\u526D\u526E\u5270\u5271\u5273\u5274\u5275\u5276\u5277\u5278\u5279\u527A\u527B\u527C\u527E\u5280\u5283\u5284\u5285\u5286\u5287\u5289\u528A\u528B\u528C\u528D\u528E\u528F\u5291\u5292\u5294\u5295\u5296\u5297\u5298\u5299\u529A\u529C\u52A4\u52A5\u52A6\u52A7\u52AE\u52AF\u52B0\u52B4\u52B5\u52B6\u52B7\u52B8\u52B9\u52BA\u52BB\u52BC\u52BD\u52C0\u52C1\u52C2\u52C4\u52C5\u52C6\u52C8\u52CA\u52CC\u52CD\u52CE\u52CF\u52D1\u52D3\u52D4\u52D5\u52D7\u52D9\u52DA\u52DB\u52DC\u52DD\u52DE\u52E0\u52E1\u52E2\u52E3\u52E5\u52E6\u52E7\u52E8\u52E9\u52EA\u52EB\u52EC\u52ED\u52EE\u52EF\u52F1\u52F2\u52F3\u52F4\u52F5\u52F6\u52F7\u52F8\u52FB\u52FC\u52FD\u5301\u5302\u5303\u5304\u5307\u5309\u530A\u530B\u530C\u530E\uFFFD".split("");
        for (j3 = 0; j3 != D5[132].length; ++j3)
          if (D5[132][j3].charCodeAt(0) !== 65533) {
            e7[D5[132][j3]] = 33792 + j3;
            d2[33792 + j3] = D5[132][j3];
          }
        D5[133] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u5311\u5312\u5313\u5314\u5318\u531B\u531C\u531E\u531F\u5322\u5324\u5325\u5327\u5328\u5329\u532B\u532C\u532D\u532F\u5330\u5331\u5332\u5333\u5334\u5335\u5336\u5337\u5338\u533C\u533D\u5340\u5342\u5344\u5346\u534B\u534C\u534D\u5350\u5354\u5358\u5359\u535B\u535D\u5365\u5368\u536A\u536C\u536D\u5372\u5376\u5379\u537B\u537C\u537D\u537E\u5380\u5381\u5383\u5387\u5388\u538A\u538E\u538F\uFFFD\u5390\u5391\u5392\u5393\u5394\u5396\u5397\u5399\u539B\u539C\u539E\u53A0\u53A1\u53A4\u53A7\u53AA\u53AB\u53AC\u53AD\u53AF\u53B0\u53B1\u53B2\u53B3\u53B4\u53B5\u53B7\u53B8\u53B9\u53BA\u53BC\u53BD\u53BE\u53C0\u53C3\u53C4\u53C5\u53C6\u53C7\u53CE\u53CF\u53D0\u53D2\u53D3\u53D5\u53DA\u53DC\u53DD\u53DE\u53E1\u53E2\u53E7\u53F4\u53FA\u53FE\u53FF\u5400\u5402\u5405\u5407\u540B\u5414\u5418\u5419\u541A\u541C\u5422\u5424\u5425\u542A\u5430\u5433\u5436\u5437\u543A\u543D\u543F\u5441\u5442\u5444\u5445\u5447\u5449\u544C\u544D\u544E\u544F\u5451\u545A\u545D\u545E\u545F\u5460\u5461\u5463\u5465\u5467\u5469\u546A\u546B\u546C\u546D\u546E\u546F\u5470\u5474\u5479\u547A\u547E\u547F\u5481\u5483\u5485\u5487\u5488\u5489\u548A\u548D\u5491\u5493\u5497\u5498\u549C\u549E\u549F\u54A0\u54A1\uFFFD".split("");
        for (j3 = 0; j3 != D5[133].length; ++j3)
          if (D5[133][j3].charCodeAt(0) !== 65533) {
            e7[D5[133][j3]] = 34048 + j3;
            d2[34048 + j3] = D5[133][j3];
          }
        D5[134] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u54A2\u54A5\u54AE\u54B0\u54B2\u54B5\u54B6\u54B7\u54B9\u54BA\u54BC\u54BE\u54C3\u54C5\u54CA\u54CB\u54D6\u54D8\u54DB\u54E0\u54E1\u54E2\u54E3\u54E4\u54EB\u54EC\u54EF\u54F0\u54F1\u54F4\u54F5\u54F6\u54F7\u54F8\u54F9\u54FB\u54FE\u5500\u5502\u5503\u5504\u5505\u5508\u550A\u550B\u550C\u550D\u550E\u5512\u5513\u5515\u5516\u5517\u5518\u5519\u551A\u551C\u551D\u551E\u551F\u5521\u5525\u5526\uFFFD\u5528\u5529\u552B\u552D\u5532\u5534\u5535\u5536\u5538\u5539\u553A\u553B\u553D\u5540\u5542\u5545\u5547\u5548\u554B\u554C\u554D\u554E\u554F\u5551\u5552\u5553\u5554\u5557\u5558\u5559\u555A\u555B\u555D\u555E\u555F\u5560\u5562\u5563\u5568\u5569\u556B\u556F\u5570\u5571\u5572\u5573\u5574\u5579\u557A\u557D\u557F\u5585\u5586\u558C\u558D\u558E\u5590\u5592\u5593\u5595\u5596\u5597\u559A\u559B\u559E\u55A0\u55A1\u55A2\u55A3\u55A4\u55A5\u55A6\u55A8\u55A9\u55AA\u55AB\u55AC\u55AD\u55AE\u55AF\u55B0\u55B2\u55B4\u55B6\u55B8\u55BA\u55BC\u55BF\u55C0\u55C1\u55C2\u55C3\u55C6\u55C7\u55C8\u55CA\u55CB\u55CE\u55CF\u55D0\u55D5\u55D7\u55D8\u55D9\u55DA\u55DB\u55DE\u55E0\u55E2\u55E7\u55E9\u55ED\u55EE\u55F0\u55F1\u55F4\u55F6\u55F8\u55F9\u55FA\u55FB\u55FC\u55FF\u5602\u5603\u5604\u5605\uFFFD".split("");
        for (j3 = 0; j3 != D5[134].length; ++j3)
          if (D5[134][j3].charCodeAt(0) !== 65533) {
            e7[D5[134][j3]] = 34304 + j3;
            d2[34304 + j3] = D5[134][j3];
          }
        D5[135] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u5606\u5607\u560A\u560B\u560D\u5610\u5611\u5612\u5613\u5614\u5615\u5616\u5617\u5619\u561A\u561C\u561D\u5620\u5621\u5622\u5625\u5626\u5628\u5629\u562A\u562B\u562E\u562F\u5630\u5633\u5635\u5637\u5638\u563A\u563C\u563D\u563E\u5640\u5641\u5642\u5643\u5644\u5645\u5646\u5647\u5648\u5649\u564A\u564B\u564F\u5650\u5651\u5652\u5653\u5655\u5656\u565A\u565B\u565D\u565E\u565F\u5660\u5661\uFFFD\u5663\u5665\u5666\u5667\u566D\u566E\u566F\u5670\u5672\u5673\u5674\u5675\u5677\u5678\u5679\u567A\u567D\u567E\u567F\u5680\u5681\u5682\u5683\u5684\u5687\u5688\u5689\u568A\u568B\u568C\u568D\u5690\u5691\u5692\u5694\u5695\u5696\u5697\u5698\u5699\u569A\u569B\u569C\u569D\u569E\u569F\u56A0\u56A1\u56A2\u56A4\u56A5\u56A6\u56A7\u56A8\u56A9\u56AA\u56AB\u56AC\u56AD\u56AE\u56B0\u56B1\u56B2\u56B3\u56B4\u56B5\u56B6\u56B8\u56B9\u56BA\u56BB\u56BD\u56BE\u56BF\u56C0\u56C1\u56C2\u56C3\u56C4\u56C5\u56C6\u56C7\u56C8\u56C9\u56CB\u56CC\u56CD\u56CE\u56CF\u56D0\u56D1\u56D2\u56D3\u56D5\u56D6\u56D8\u56D9\u56DC\u56E3\u56E5\u56E6\u56E7\u56E8\u56E9\u56EA\u56EC\u56EE\u56EF\u56F2\u56F3\u56F6\u56F7\u56F8\u56FB\u56FC\u5700\u5701\u5702\u5705\u5707\u570B\u570C\u570D\u570E\u570F\u5710\u5711\uFFFD".split("");
        for (j3 = 0; j3 != D5[135].length; ++j3)
          if (D5[135][j3].charCodeAt(0) !== 65533) {
            e7[D5[135][j3]] = 34560 + j3;
            d2[34560 + j3] = D5[135][j3];
          }
        D5[136] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u5712\u5713\u5714\u5715\u5716\u5717\u5718\u5719\u571A\u571B\u571D\u571E\u5720\u5721\u5722\u5724\u5725\u5726\u5727\u572B\u5731\u5732\u5734\u5735\u5736\u5737\u5738\u573C\u573D\u573F\u5741\u5743\u5744\u5745\u5746\u5748\u5749\u574B\u5752\u5753\u5754\u5755\u5756\u5758\u5759\u5762\u5763\u5765\u5767\u576C\u576E\u5770\u5771\u5772\u5774\u5775\u5778\u5779\u577A\u577D\u577E\u577F\u5780\uFFFD\u5781\u5787\u5788\u5789\u578A\u578D\u578E\u578F\u5790\u5791\u5794\u5795\u5796\u5797\u5798\u5799\u579A\u579C\u579D\u579E\u579F\u57A5\u57A8\u57AA\u57AC\u57AF\u57B0\u57B1\u57B3\u57B5\u57B6\u57B7\u57B9\u57BA\u57BB\u57BC\u57BD\u57BE\u57BF\u57C0\u57C1\u57C4\u57C5\u57C6\u57C7\u57C8\u57C9\u57CA\u57CC\u57CD\u57D0\u57D1\u57D3\u57D6\u57D7\u57DB\u57DC\u57DE\u57E1\u57E2\u57E3\u57E5\u57E6\u57E7\u57E8\u57E9\u57EA\u57EB\u57EC\u57EE\u57F0\u57F1\u57F2\u57F3\u57F5\u57F6\u57F7\u57FB\u57FC\u57FE\u57FF\u5801\u5803\u5804\u5805\u5808\u5809\u580A\u580C\u580E\u580F\u5810\u5812\u5813\u5814\u5816\u5817\u5818\u581A\u581B\u581C\u581D\u581F\u5822\u5823\u5825\u5826\u5827\u5828\u5829\u582B\u582C\u582D\u582E\u582F\u5831\u5832\u5833\u5834\u5836\u5837\u5838\u5839\u583A\u583B\u583C\u583D\uFFFD".split("");
        for (j3 = 0; j3 != D5[136].length; ++j3)
          if (D5[136][j3].charCodeAt(0) !== 65533) {
            e7[D5[136][j3]] = 34816 + j3;
            d2[34816 + j3] = D5[136][j3];
          }
        D5[137] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u583E\u583F\u5840\u5841\u5842\u5843\u5845\u5846\u5847\u5848\u5849\u584A\u584B\u584E\u584F\u5850\u5852\u5853\u5855\u5856\u5857\u5859\u585A\u585B\u585C\u585D\u585F\u5860\u5861\u5862\u5863\u5864\u5866\u5867\u5868\u5869\u586A\u586D\u586E\u586F\u5870\u5871\u5872\u5873\u5874\u5875\u5876\u5877\u5878\u5879\u587A\u587B\u587C\u587D\u587F\u5882\u5884\u5886\u5887\u5888\u588A\u588B\u588C\uFFFD\u588D\u588E\u588F\u5890\u5891\u5894\u5895\u5896\u5897\u5898\u589B\u589C\u589D\u58A0\u58A1\u58A2\u58A3\u58A4\u58A5\u58A6\u58A7\u58AA\u58AB\u58AC\u58AD\u58AE\u58AF\u58B0\u58B1\u58B2\u58B3\u58B4\u58B5\u58B6\u58B7\u58B8\u58B9\u58BA\u58BB\u58BD\u58BE\u58BF\u58C0\u58C2\u58C3\u58C4\u58C6\u58C7\u58C8\u58C9\u58CA\u58CB\u58CC\u58CD\u58CE\u58CF\u58D0\u58D2\u58D3\u58D4\u58D6\u58D7\u58D8\u58D9\u58DA\u58DB\u58DC\u58DD\u58DE\u58DF\u58E0\u58E1\u58E2\u58E3\u58E5\u58E6\u58E7\u58E8\u58E9\u58EA\u58ED\u58EF\u58F1\u58F2\u58F4\u58F5\u58F7\u58F8\u58FA\u58FB\u58FC\u58FD\u58FE\u58FF\u5900\u5901\u5903\u5905\u5906\u5908\u5909\u590A\u590B\u590C\u590E\u5910\u5911\u5912\u5913\u5917\u5918\u591B\u591D\u591E\u5920\u5921\u5922\u5923\u5926\u5928\u592C\u5930\u5932\u5933\u5935\u5936\u593B\uFFFD".split("");
        for (j3 = 0; j3 != D5[137].length; ++j3)
          if (D5[137][j3].charCodeAt(0) !== 65533) {
            e7[D5[137][j3]] = 35072 + j3;
            d2[35072 + j3] = D5[137][j3];
          }
        D5[138] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u593D\u593E\u593F\u5940\u5943\u5945\u5946\u594A\u594C\u594D\u5950\u5952\u5953\u5959\u595B\u595C\u595D\u595E\u595F\u5961\u5963\u5964\u5966\u5967\u5968\u5969\u596A\u596B\u596C\u596D\u596E\u596F\u5970\u5971\u5972\u5975\u5977\u597A\u597B\u597C\u597E\u597F\u5980\u5985\u5989\u598B\u598C\u598E\u598F\u5990\u5991\u5994\u5995\u5998\u599A\u599B\u599C\u599D\u599F\u59A0\u59A1\u59A2\u59A6\uFFFD\u59A7\u59AC\u59AD\u59B0\u59B1\u59B3\u59B4\u59B5\u59B6\u59B7\u59B8\u59BA\u59BC\u59BD\u59BF\u59C0\u59C1\u59C2\u59C3\u59C4\u59C5\u59C7\u59C8\u59C9\u59CC\u59CD\u59CE\u59CF\u59D5\u59D6\u59D9\u59DB\u59DE\u59DF\u59E0\u59E1\u59E2\u59E4\u59E6\u59E7\u59E9\u59EA\u59EB\u59ED\u59EE\u59EF\u59F0\u59F1\u59F2\u59F3\u59F4\u59F5\u59F6\u59F7\u59F8\u59FA\u59FC\u59FD\u59FE\u5A00\u5A02\u5A0A\u5A0B\u5A0D\u5A0E\u5A0F\u5A10\u5A12\u5A14\u5A15\u5A16\u5A17\u5A19\u5A1A\u5A1B\u5A1D\u5A1E\u5A21\u5A22\u5A24\u5A26\u5A27\u5A28\u5A2A\u5A2B\u5A2C\u5A2D\u5A2E\u5A2F\u5A30\u5A33\u5A35\u5A37\u5A38\u5A39\u5A3A\u5A3B\u5A3D\u5A3E\u5A3F\u5A41\u5A42\u5A43\u5A44\u5A45\u5A47\u5A48\u5A4B\u5A4C\u5A4D\u5A4E\u5A4F\u5A50\u5A51\u5A52\u5A53\u5A54\u5A56\u5A57\u5A58\u5A59\u5A5B\u5A5C\u5A5D\u5A5E\u5A5F\u5A60\uFFFD".split("");
        for (j3 = 0; j3 != D5[138].length; ++j3)
          if (D5[138][j3].charCodeAt(0) !== 65533) {
            e7[D5[138][j3]] = 35328 + j3;
            d2[35328 + j3] = D5[138][j3];
          }
        D5[139] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u5A61\u5A63\u5A64\u5A65\u5A66\u5A68\u5A69\u5A6B\u5A6C\u5A6D\u5A6E\u5A6F\u5A70\u5A71\u5A72\u5A73\u5A78\u5A79\u5A7B\u5A7C\u5A7D\u5A7E\u5A80\u5A81\u5A82\u5A83\u5A84\u5A85\u5A86\u5A87\u5A88\u5A89\u5A8A\u5A8B\u5A8C\u5A8D\u5A8E\u5A8F\u5A90\u5A91\u5A93\u5A94\u5A95\u5A96\u5A97\u5A98\u5A99\u5A9C\u5A9D\u5A9E\u5A9F\u5AA0\u5AA1\u5AA2\u5AA3\u5AA4\u5AA5\u5AA6\u5AA7\u5AA8\u5AA9\u5AAB\u5AAC\uFFFD\u5AAD\u5AAE\u5AAF\u5AB0\u5AB1\u5AB4\u5AB6\u5AB7\u5AB9\u5ABA\u5ABB\u5ABC\u5ABD\u5ABF\u5AC0\u5AC3\u5AC4\u5AC5\u5AC6\u5AC7\u5AC8\u5ACA\u5ACB\u5ACD\u5ACE\u5ACF\u5AD0\u5AD1\u5AD3\u5AD5\u5AD7\u5AD9\u5ADA\u5ADB\u5ADD\u5ADE\u5ADF\u5AE2\u5AE4\u5AE5\u5AE7\u5AE8\u5AEA\u5AEC\u5AED\u5AEE\u5AEF\u5AF0\u5AF2\u5AF3\u5AF4\u5AF5\u5AF6\u5AF7\u5AF8\u5AF9\u5AFA\u5AFB\u5AFC\u5AFD\u5AFE\u5AFF\u5B00\u5B01\u5B02\u5B03\u5B04\u5B05\u5B06\u5B07\u5B08\u5B0A\u5B0B\u5B0C\u5B0D\u5B0E\u5B0F\u5B10\u5B11\u5B12\u5B13\u5B14\u5B15\u5B18\u5B19\u5B1A\u5B1B\u5B1C\u5B1D\u5B1E\u5B1F\u5B20\u5B21\u5B22\u5B23\u5B24\u5B25\u5B26\u5B27\u5B28\u5B29\u5B2A\u5B2B\u5B2C\u5B2D\u5B2E\u5B2F\u5B30\u5B31\u5B33\u5B35\u5B36\u5B38\u5B39\u5B3A\u5B3B\u5B3C\u5B3D\u5B3E\u5B3F\u5B41\u5B42\u5B43\u5B44\u5B45\u5B46\u5B47\uFFFD".split("");
        for (j3 = 0; j3 != D5[139].length; ++j3)
          if (D5[139][j3].charCodeAt(0) !== 65533) {
            e7[D5[139][j3]] = 35584 + j3;
            d2[35584 + j3] = D5[139][j3];
          }
        D5[140] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u5B48\u5B49\u5B4A\u5B4B\u5B4C\u5B4D\u5B4E\u5B4F\u5B52\u5B56\u5B5E\u5B60\u5B61\u5B67\u5B68\u5B6B\u5B6D\u5B6E\u5B6F\u5B72\u5B74\u5B76\u5B77\u5B78\u5B79\u5B7B\u5B7C\u5B7E\u5B7F\u5B82\u5B86\u5B8A\u5B8D\u5B8E\u5B90\u5B91\u5B92\u5B94\u5B96\u5B9F\u5BA7\u5BA8\u5BA9\u5BAC\u5BAD\u5BAE\u5BAF\u5BB1\u5BB2\u5BB7\u5BBA\u5BBB\u5BBC\u5BC0\u5BC1\u5BC3\u5BC8\u5BC9\u5BCA\u5BCB\u5BCD\u5BCE\u5BCF\uFFFD\u5BD1\u5BD4\u5BD5\u5BD6\u5BD7\u5BD8\u5BD9\u5BDA\u5BDB\u5BDC\u5BE0\u5BE2\u5BE3\u5BE6\u5BE7\u5BE9\u5BEA\u5BEB\u5BEC\u5BED\u5BEF\u5BF1\u5BF2\u5BF3\u5BF4\u5BF5\u5BF6\u5BF7\u5BFD\u5BFE\u5C00\u5C02\u5C03\u5C05\u5C07\u5C08\u5C0B\u5C0C\u5C0D\u5C0E\u5C10\u5C12\u5C13\u5C17\u5C19\u5C1B\u5C1E\u5C1F\u5C20\u5C21\u5C23\u5C26\u5C28\u5C29\u5C2A\u5C2B\u5C2D\u5C2E\u5C2F\u5C30\u5C32\u5C33\u5C35\u5C36\u5C37\u5C43\u5C44\u5C46\u5C47\u5C4C\u5C4D\u5C52\u5C53\u5C54\u5C56\u5C57\u5C58\u5C5A\u5C5B\u5C5C\u5C5D\u5C5F\u5C62\u5C64\u5C67\u5C68\u5C69\u5C6A\u5C6B\u5C6C\u5C6D\u5C70\u5C72\u5C73\u5C74\u5C75\u5C76\u5C77\u5C78\u5C7B\u5C7C\u5C7D\u5C7E\u5C80\u5C83\u5C84\u5C85\u5C86\u5C87\u5C89\u5C8A\u5C8B\u5C8E\u5C8F\u5C92\u5C93\u5C95\u5C9D\u5C9E\u5C9F\u5CA0\u5CA1\u5CA4\u5CA5\u5CA6\u5CA7\u5CA8\uFFFD".split("");
        for (j3 = 0; j3 != D5[140].length; ++j3)
          if (D5[140][j3].charCodeAt(0) !== 65533) {
            e7[D5[140][j3]] = 35840 + j3;
            d2[35840 + j3] = D5[140][j3];
          }
        D5[141] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u5CAA\u5CAE\u5CAF\u5CB0\u5CB2\u5CB4\u5CB6\u5CB9\u5CBA\u5CBB\u5CBC\u5CBE\u5CC0\u5CC2\u5CC3\u5CC5\u5CC6\u5CC7\u5CC8\u5CC9\u5CCA\u5CCC\u5CCD\u5CCE\u5CCF\u5CD0\u5CD1\u5CD3\u5CD4\u5CD5\u5CD6\u5CD7\u5CD8\u5CDA\u5CDB\u5CDC\u5CDD\u5CDE\u5CDF\u5CE0\u5CE2\u5CE3\u5CE7\u5CE9\u5CEB\u5CEC\u5CEE\u5CEF\u5CF1\u5CF2\u5CF3\u5CF4\u5CF5\u5CF6\u5CF7\u5CF8\u5CF9\u5CFA\u5CFC\u5CFD\u5CFE\u5CFF\u5D00\uFFFD\u5D01\u5D04\u5D05\u5D08\u5D09\u5D0A\u5D0B\u5D0C\u5D0D\u5D0F\u5D10\u5D11\u5D12\u5D13\u5D15\u5D17\u5D18\u5D19\u5D1A\u5D1C\u5D1D\u5D1F\u5D20\u5D21\u5D22\u5D23\u5D25\u5D28\u5D2A\u5D2B\u5D2C\u5D2F\u5D30\u5D31\u5D32\u5D33\u5D35\u5D36\u5D37\u5D38\u5D39\u5D3A\u5D3B\u5D3C\u5D3F\u5D40\u5D41\u5D42\u5D43\u5D44\u5D45\u5D46\u5D48\u5D49\u5D4D\u5D4E\u5D4F\u5D50\u5D51\u5D52\u5D53\u5D54\u5D55\u5D56\u5D57\u5D59\u5D5A\u5D5C\u5D5E\u5D5F\u5D60\u5D61\u5D62\u5D63\u5D64\u5D65\u5D66\u5D67\u5D68\u5D6A\u5D6D\u5D6E\u5D70\u5D71\u5D72\u5D73\u5D75\u5D76\u5D77\u5D78\u5D79\u5D7A\u5D7B\u5D7C\u5D7D\u5D7E\u5D7F\u5D80\u5D81\u5D83\u5D84\u5D85\u5D86\u5D87\u5D88\u5D89\u5D8A\u5D8B\u5D8C\u5D8D\u5D8E\u5D8F\u5D90\u5D91\u5D92\u5D93\u5D94\u5D95\u5D96\u5D97\u5D98\u5D9A\u5D9B\u5D9C\u5D9E\u5D9F\u5DA0\uFFFD".split("");
        for (j3 = 0; j3 != D5[141].length; ++j3)
          if (D5[141][j3].charCodeAt(0) !== 65533) {
            e7[D5[141][j3]] = 36096 + j3;
            d2[36096 + j3] = D5[141][j3];
          }
        D5[142] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u5DA1\u5DA2\u5DA3\u5DA4\u5DA5\u5DA6\u5DA7\u5DA8\u5DA9\u5DAA\u5DAB\u5DAC\u5DAD\u5DAE\u5DAF\u5DB0\u5DB1\u5DB2\u5DB3\u5DB4\u5DB5\u5DB6\u5DB8\u5DB9\u5DBA\u5DBB\u5DBC\u5DBD\u5DBE\u5DBF\u5DC0\u5DC1\u5DC2\u5DC3\u5DC4\u5DC6\u5DC7\u5DC8\u5DC9\u5DCA\u5DCB\u5DCC\u5DCE\u5DCF\u5DD0\u5DD1\u5DD2\u5DD3\u5DD4\u5DD5\u5DD6\u5DD7\u5DD8\u5DD9\u5DDA\u5DDC\u5DDF\u5DE0\u5DE3\u5DE4\u5DEA\u5DEC\u5DED\uFFFD\u5DF0\u5DF5\u5DF6\u5DF8\u5DF9\u5DFA\u5DFB\u5DFC\u5DFF\u5E00\u5E04\u5E07\u5E09\u5E0A\u5E0B\u5E0D\u5E0E\u5E12\u5E13\u5E17\u5E1E\u5E1F\u5E20\u5E21\u5E22\u5E23\u5E24\u5E25\u5E28\u5E29\u5E2A\u5E2B\u5E2C\u5E2F\u5E30\u5E32\u5E33\u5E34\u5E35\u5E36\u5E39\u5E3A\u5E3E\u5E3F\u5E40\u5E41\u5E43\u5E46\u5E47\u5E48\u5E49\u5E4A\u5E4B\u5E4D\u5E4E\u5E4F\u5E50\u5E51\u5E52\u5E53\u5E56\u5E57\u5E58\u5E59\u5E5A\u5E5C\u5E5D\u5E5F\u5E60\u5E63\u5E64\u5E65\u5E66\u5E67\u5E68\u5E69\u5E6A\u5E6B\u5E6C\u5E6D\u5E6E\u5E6F\u5E70\u5E71\u5E75\u5E77\u5E79\u5E7E\u5E81\u5E82\u5E83\u5E85\u5E88\u5E89\u5E8C\u5E8D\u5E8E\u5E92\u5E98\u5E9B\u5E9D\u5EA1\u5EA2\u5EA3\u5EA4\u5EA8\u5EA9\u5EAA\u5EAB\u5EAC\u5EAE\u5EAF\u5EB0\u5EB1\u5EB2\u5EB4\u5EBA\u5EBB\u5EBC\u5EBD\u5EBF\u5EC0\u5EC1\u5EC2\u5EC3\u5EC4\u5EC5\uFFFD".split("");
        for (j3 = 0; j3 != D5[142].length; ++j3)
          if (D5[142][j3].charCodeAt(0) !== 65533) {
            e7[D5[142][j3]] = 36352 + j3;
            d2[36352 + j3] = D5[142][j3];
          }
        D5[143] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u5EC6\u5EC7\u5EC8\u5ECB\u5ECC\u5ECD\u5ECE\u5ECF\u5ED0\u5ED4\u5ED5\u5ED7\u5ED8\u5ED9\u5EDA\u5EDC\u5EDD\u5EDE\u5EDF\u5EE0\u5EE1\u5EE2\u5EE3\u5EE4\u5EE5\u5EE6\u5EE7\u5EE9\u5EEB\u5EEC\u5EED\u5EEE\u5EEF\u5EF0\u5EF1\u5EF2\u5EF3\u5EF5\u5EF8\u5EF9\u5EFB\u5EFC\u5EFD\u5F05\u5F06\u5F07\u5F09\u5F0C\u5F0D\u5F0E\u5F10\u5F12\u5F14\u5F16\u5F19\u5F1A\u5F1C\u5F1D\u5F1E\u5F21\u5F22\u5F23\u5F24\uFFFD\u5F28\u5F2B\u5F2C\u5F2E\u5F30\u5F32\u5F33\u5F34\u5F35\u5F36\u5F37\u5F38\u5F3B\u5F3D\u5F3E\u5F3F\u5F41\u5F42\u5F43\u5F44\u5F45\u5F46\u5F47\u5F48\u5F49\u5F4A\u5F4B\u5F4C\u5F4D\u5F4E\u5F4F\u5F51\u5F54\u5F59\u5F5A\u5F5B\u5F5C\u5F5E\u5F5F\u5F60\u5F63\u5F65\u5F67\u5F68\u5F6B\u5F6E\u5F6F\u5F72\u5F74\u5F75\u5F76\u5F78\u5F7A\u5F7D\u5F7E\u5F7F\u5F83\u5F86\u5F8D\u5F8E\u5F8F\u5F91\u5F93\u5F94\u5F96\u5F9A\u5F9B\u5F9D\u5F9E\u5F9F\u5FA0\u5FA2\u5FA3\u5FA4\u5FA5\u5FA6\u5FA7\u5FA9\u5FAB\u5FAC\u5FAF\u5FB0\u5FB1\u5FB2\u5FB3\u5FB4\u5FB6\u5FB8\u5FB9\u5FBA\u5FBB\u5FBE\u5FBF\u5FC0\u5FC1\u5FC2\u5FC7\u5FC8\u5FCA\u5FCB\u5FCE\u5FD3\u5FD4\u5FD5\u5FDA\u5FDB\u5FDC\u5FDE\u5FDF\u5FE2\u5FE3\u5FE5\u5FE6\u5FE8\u5FE9\u5FEC\u5FEF\u5FF0\u5FF2\u5FF3\u5FF4\u5FF6\u5FF7\u5FF9\u5FFA\u5FFC\u6007\uFFFD".split("");
        for (j3 = 0; j3 != D5[143].length; ++j3)
          if (D5[143][j3].charCodeAt(0) !== 65533) {
            e7[D5[143][j3]] = 36608 + j3;
            d2[36608 + j3] = D5[143][j3];
          }
        D5[144] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u6008\u6009\u600B\u600C\u6010\u6011\u6013\u6017\u6018\u601A\u601E\u601F\u6022\u6023\u6024\u602C\u602D\u602E\u6030\u6031\u6032\u6033\u6034\u6036\u6037\u6038\u6039\u603A\u603D\u603E\u6040\u6044\u6045\u6046\u6047\u6048\u6049\u604A\u604C\u604E\u604F\u6051\u6053\u6054\u6056\u6057\u6058\u605B\u605C\u605E\u605F\u6060\u6061\u6065\u6066\u606E\u6071\u6072\u6074\u6075\u6077\u607E\u6080\uFFFD\u6081\u6082\u6085\u6086\u6087\u6088\u608A\u608B\u608E\u608F\u6090\u6091\u6093\u6095\u6097\u6098\u6099\u609C\u609E\u60A1\u60A2\u60A4\u60A5\u60A7\u60A9\u60AA\u60AE\u60B0\u60B3\u60B5\u60B6\u60B7\u60B9\u60BA\u60BD\u60BE\u60BF\u60C0\u60C1\u60C2\u60C3\u60C4\u60C7\u60C8\u60C9\u60CC\u60CD\u60CE\u60CF\u60D0\u60D2\u60D3\u60D4\u60D6\u60D7\u60D9\u60DB\u60DE\u60E1\u60E2\u60E3\u60E4\u60E5\u60EA\u60F1\u60F2\u60F5\u60F7\u60F8\u60FB\u60FC\u60FD\u60FE\u60FF\u6102\u6103\u6104\u6105\u6107\u610A\u610B\u610C\u6110\u6111\u6112\u6113\u6114\u6116\u6117\u6118\u6119\u611B\u611C\u611D\u611E\u6121\u6122\u6125\u6128\u6129\u612A\u612C\u612D\u612E\u612F\u6130\u6131\u6132\u6133\u6134\u6135\u6136\u6137\u6138\u6139\u613A\u613B\u613C\u613D\u613E\u6140\u6141\u6142\u6143\u6144\u6145\u6146\uFFFD".split("");
        for (j3 = 0; j3 != D5[144].length; ++j3)
          if (D5[144][j3].charCodeAt(0) !== 65533) {
            e7[D5[144][j3]] = 36864 + j3;
            d2[36864 + j3] = D5[144][j3];
          }
        D5[145] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u6147\u6149\u614B\u614D\u614F\u6150\u6152\u6153\u6154\u6156\u6157\u6158\u6159\u615A\u615B\u615C\u615E\u615F\u6160\u6161\u6163\u6164\u6165\u6166\u6169\u616A\u616B\u616C\u616D\u616E\u616F\u6171\u6172\u6173\u6174\u6176\u6178\u6179\u617A\u617B\u617C\u617D\u617E\u617F\u6180\u6181\u6182\u6183\u6184\u6185\u6186\u6187\u6188\u6189\u618A\u618C\u618D\u618F\u6190\u6191\u6192\u6193\u6195\uFFFD\u6196\u6197\u6198\u6199\u619A\u619B\u619C\u619E\u619F\u61A0\u61A1\u61A2\u61A3\u61A4\u61A5\u61A6\u61AA\u61AB\u61AD\u61AE\u61AF\u61B0\u61B1\u61B2\u61B3\u61B4\u61B5\u61B6\u61B8\u61B9\u61BA\u61BB\u61BC\u61BD\u61BF\u61C0\u61C1\u61C3\u61C4\u61C5\u61C6\u61C7\u61C9\u61CC\u61CD\u61CE\u61CF\u61D0\u61D3\u61D5\u61D6\u61D7\u61D8\u61D9\u61DA\u61DB\u61DC\u61DD\u61DE\u61DF\u61E0\u61E1\u61E2\u61E3\u61E4\u61E5\u61E7\u61E8\u61E9\u61EA\u61EB\u61EC\u61ED\u61EE\u61EF\u61F0\u61F1\u61F2\u61F3\u61F4\u61F6\u61F7\u61F8\u61F9\u61FA\u61FB\u61FC\u61FD\u61FE\u6200\u6201\u6202\u6203\u6204\u6205\u6207\u6209\u6213\u6214\u6219\u621C\u621D\u621E\u6220\u6223\u6226\u6227\u6228\u6229\u622B\u622D\u622F\u6230\u6231\u6232\u6235\u6236\u6238\u6239\u623A\u623B\u623C\u6242\u6244\u6245\u6246\u624A\uFFFD".split("");
        for (j3 = 0; j3 != D5[145].length; ++j3)
          if (D5[145][j3].charCodeAt(0) !== 65533) {
            e7[D5[145][j3]] = 37120 + j3;
            d2[37120 + j3] = D5[145][j3];
          }
        D5[146] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u624F\u6250\u6255\u6256\u6257\u6259\u625A\u625C\u625D\u625E\u625F\u6260\u6261\u6262\u6264\u6265\u6268\u6271\u6272\u6274\u6275\u6277\u6278\u627A\u627B\u627D\u6281\u6282\u6283\u6285\u6286\u6287\u6288\u628B\u628C\u628D\u628E\u628F\u6290\u6294\u6299\u629C\u629D\u629E\u62A3\u62A6\u62A7\u62A9\u62AA\u62AD\u62AE\u62AF\u62B0\u62B2\u62B3\u62B4\u62B6\u62B7\u62B8\u62BA\u62BE\u62C0\u62C1\uFFFD\u62C3\u62CB\u62CF\u62D1\u62D5\u62DD\u62DE\u62E0\u62E1\u62E4\u62EA\u62EB\u62F0\u62F2\u62F5\u62F8\u62F9\u62FA\u62FB\u6300\u6303\u6304\u6305\u6306\u630A\u630B\u630C\u630D\u630F\u6310\u6312\u6313\u6314\u6315\u6317\u6318\u6319\u631C\u6326\u6327\u6329\u632C\u632D\u632E\u6330\u6331\u6333\u6334\u6335\u6336\u6337\u6338\u633B\u633C\u633E\u633F\u6340\u6341\u6344\u6347\u6348\u634A\u6351\u6352\u6353\u6354\u6356\u6357\u6358\u6359\u635A\u635B\u635C\u635D\u6360\u6364\u6365\u6366\u6368\u636A\u636B\u636C\u636F\u6370\u6372\u6373\u6374\u6375\u6378\u6379\u637C\u637D\u637E\u637F\u6381\u6383\u6384\u6385\u6386\u638B\u638D\u6391\u6393\u6394\u6395\u6397\u6399\u639A\u639B\u639C\u639D\u639E\u639F\u63A1\u63A4\u63A6\u63AB\u63AF\u63B1\u63B2\u63B5\u63B6\u63B9\u63BB\u63BD\u63BF\u63C0\uFFFD".split("");
        for (j3 = 0; j3 != D5[146].length; ++j3)
          if (D5[146][j3].charCodeAt(0) !== 65533) {
            e7[D5[146][j3]] = 37376 + j3;
            d2[37376 + j3] = D5[146][j3];
          }
        D5[147] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u63C1\u63C2\u63C3\u63C5\u63C7\u63C8\u63CA\u63CB\u63CC\u63D1\u63D3\u63D4\u63D5\u63D7\u63D8\u63D9\u63DA\u63DB\u63DC\u63DD\u63DF\u63E2\u63E4\u63E5\u63E6\u63E7\u63E8\u63EB\u63EC\u63EE\u63EF\u63F0\u63F1\u63F3\u63F5\u63F7\u63F9\u63FA\u63FB\u63FC\u63FE\u6403\u6404\u6406\u6407\u6408\u6409\u640A\u640D\u640E\u6411\u6412\u6415\u6416\u6417\u6418\u6419\u641A\u641D\u641F\u6422\u6423\u6424\uFFFD\u6425\u6427\u6428\u6429\u642B\u642E\u642F\u6430\u6431\u6432\u6433\u6435\u6436\u6437\u6438\u6439\u643B\u643C\u643E\u6440\u6442\u6443\u6449\u644B\u644C\u644D\u644E\u644F\u6450\u6451\u6453\u6455\u6456\u6457\u6459\u645A\u645B\u645C\u645D\u645F\u6460\u6461\u6462\u6463\u6464\u6465\u6466\u6468\u646A\u646B\u646C\u646E\u646F\u6470\u6471\u6472\u6473\u6474\u6475\u6476\u6477\u647B\u647C\u647D\u647E\u647F\u6480\u6481\u6483\u6486\u6488\u6489\u648A\u648B\u648C\u648D\u648E\u648F\u6490\u6493\u6494\u6497\u6498\u649A\u649B\u649C\u649D\u649F\u64A0\u64A1\u64A2\u64A3\u64A5\u64A6\u64A7\u64A8\u64AA\u64AB\u64AF\u64B1\u64B2\u64B3\u64B4\u64B6\u64B9\u64BB\u64BD\u64BE\u64BF\u64C1\u64C3\u64C4\u64C6\u64C7\u64C8\u64C9\u64CA\u64CB\u64CC\u64CF\u64D1\u64D3\u64D4\u64D5\u64D6\u64D9\u64DA\uFFFD".split("");
        for (j3 = 0; j3 != D5[147].length; ++j3)
          if (D5[147][j3].charCodeAt(0) !== 65533) {
            e7[D5[147][j3]] = 37632 + j3;
            d2[37632 + j3] = D5[147][j3];
          }
        D5[148] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u64DB\u64DC\u64DD\u64DF\u64E0\u64E1\u64E3\u64E5\u64E7\u64E8\u64E9\u64EA\u64EB\u64EC\u64ED\u64EE\u64EF\u64F0\u64F1\u64F2\u64F3\u64F4\u64F5\u64F6\u64F7\u64F8\u64F9\u64FA\u64FB\u64FC\u64FD\u64FE\u64FF\u6501\u6502\u6503\u6504\u6505\u6506\u6507\u6508\u650A\u650B\u650C\u650D\u650E\u650F\u6510\u6511\u6513\u6514\u6515\u6516\u6517\u6519\u651A\u651B\u651C\u651D\u651E\u651F\u6520\u6521\uFFFD\u6522\u6523\u6524\u6526\u6527\u6528\u6529\u652A\u652C\u652D\u6530\u6531\u6532\u6533\u6537\u653A\u653C\u653D\u6540\u6541\u6542\u6543\u6544\u6546\u6547\u654A\u654B\u654D\u654E\u6550\u6552\u6553\u6554\u6557\u6558\u655A\u655C\u655F\u6560\u6561\u6564\u6565\u6567\u6568\u6569\u656A\u656D\u656E\u656F\u6571\u6573\u6575\u6576\u6578\u6579\u657A\u657B\u657C\u657D\u657E\u657F\u6580\u6581\u6582\u6583\u6584\u6585\u6586\u6588\u6589\u658A\u658D\u658E\u658F\u6592\u6594\u6595\u6596\u6598\u659A\u659D\u659E\u65A0\u65A2\u65A3\u65A6\u65A8\u65AA\u65AC\u65AE\u65B1\u65B2\u65B3\u65B4\u65B5\u65B6\u65B7\u65B8\u65BA\u65BB\u65BE\u65BF\u65C0\u65C2\u65C7\u65C8\u65C9\u65CA\u65CD\u65D0\u65D1\u65D3\u65D4\u65D5\u65D8\u65D9\u65DA\u65DB\u65DC\u65DD\u65DE\u65DF\u65E1\u65E3\u65E4\u65EA\u65EB\uFFFD".split("");
        for (j3 = 0; j3 != D5[148].length; ++j3)
          if (D5[148][j3].charCodeAt(0) !== 65533) {
            e7[D5[148][j3]] = 37888 + j3;
            d2[37888 + j3] = D5[148][j3];
          }
        D5[149] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u65F2\u65F3\u65F4\u65F5\u65F8\u65F9\u65FB\u65FC\u65FD\u65FE\u65FF\u6601\u6604\u6605\u6607\u6608\u6609\u660B\u660D\u6610\u6611\u6612\u6616\u6617\u6618\u661A\u661B\u661C\u661E\u6621\u6622\u6623\u6624\u6626\u6629\u662A\u662B\u662C\u662E\u6630\u6632\u6633\u6637\u6638\u6639\u663A\u663B\u663D\u663F\u6640\u6642\u6644\u6645\u6646\u6647\u6648\u6649\u664A\u664D\u664E\u6650\u6651\u6658\uFFFD\u6659\u665B\u665C\u665D\u665E\u6660\u6662\u6663\u6665\u6667\u6669\u666A\u666B\u666C\u666D\u6671\u6672\u6673\u6675\u6678\u6679\u667B\u667C\u667D\u667F\u6680\u6681\u6683\u6685\u6686\u6688\u6689\u668A\u668B\u668D\u668E\u668F\u6690\u6692\u6693\u6694\u6695\u6698\u6699\u669A\u669B\u669C\u669E\u669F\u66A0\u66A1\u66A2\u66A3\u66A4\u66A5\u66A6\u66A9\u66AA\u66AB\u66AC\u66AD\u66AF\u66B0\u66B1\u66B2\u66B3\u66B5\u66B6\u66B7\u66B8\u66BA\u66BB\u66BC\u66BD\u66BF\u66C0\u66C1\u66C2\u66C3\u66C4\u66C5\u66C6\u66C7\u66C8\u66C9\u66CA\u66CB\u66CC\u66CD\u66CE\u66CF\u66D0\u66D1\u66D2\u66D3\u66D4\u66D5\u66D6\u66D7\u66D8\u66DA\u66DE\u66DF\u66E0\u66E1\u66E2\u66E3\u66E4\u66E5\u66E7\u66E8\u66EA\u66EB\u66EC\u66ED\u66EE\u66EF\u66F1\u66F5\u66F6\u66F8\u66FA\u66FB\u66FD\u6701\u6702\u6703\uFFFD".split("");
        for (j3 = 0; j3 != D5[149].length; ++j3)
          if (D5[149][j3].charCodeAt(0) !== 65533) {
            e7[D5[149][j3]] = 38144 + j3;
            d2[38144 + j3] = D5[149][j3];
          }
        D5[150] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u6704\u6705\u6706\u6707\u670C\u670E\u670F\u6711\u6712\u6713\u6716\u6718\u6719\u671A\u671C\u671E\u6720\u6721\u6722\u6723\u6724\u6725\u6727\u6729\u672E\u6730\u6732\u6733\u6736\u6737\u6738\u6739\u673B\u673C\u673E\u673F\u6741\u6744\u6745\u6747\u674A\u674B\u674D\u6752\u6754\u6755\u6757\u6758\u6759\u675A\u675B\u675D\u6762\u6763\u6764\u6766\u6767\u676B\u676C\u676E\u6771\u6774\u6776\uFFFD\u6778\u6779\u677A\u677B\u677D\u6780\u6782\u6783\u6785\u6786\u6788\u678A\u678C\u678D\u678E\u678F\u6791\u6792\u6793\u6794\u6796\u6799\u679B\u679F\u67A0\u67A1\u67A4\u67A6\u67A9\u67AC\u67AE\u67B1\u67B2\u67B4\u67B9\u67BA\u67BB\u67BC\u67BD\u67BE\u67BF\u67C0\u67C2\u67C5\u67C6\u67C7\u67C8\u67C9\u67CA\u67CB\u67CC\u67CD\u67CE\u67D5\u67D6\u67D7\u67DB\u67DF\u67E1\u67E3\u67E4\u67E6\u67E7\u67E8\u67EA\u67EB\u67ED\u67EE\u67F2\u67F5\u67F6\u67F7\u67F8\u67F9\u67FA\u67FB\u67FC\u67FE\u6801\u6802\u6803\u6804\u6806\u680D\u6810\u6812\u6814\u6815\u6818\u6819\u681A\u681B\u681C\u681E\u681F\u6820\u6822\u6823\u6824\u6825\u6826\u6827\u6828\u682B\u682C\u682D\u682E\u682F\u6830\u6831\u6834\u6835\u6836\u683A\u683B\u683F\u6847\u684B\u684D\u684F\u6852\u6856\u6857\u6858\u6859\u685A\u685B\uFFFD".split("");
        for (j3 = 0; j3 != D5[150].length; ++j3)
          if (D5[150][j3].charCodeAt(0) !== 65533) {
            e7[D5[150][j3]] = 38400 + j3;
            d2[38400 + j3] = D5[150][j3];
          }
        D5[151] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u685C\u685D\u685E\u685F\u686A\u686C\u686D\u686E\u686F\u6870\u6871\u6872\u6873\u6875\u6878\u6879\u687A\u687B\u687C\u687D\u687E\u687F\u6880\u6882\u6884\u6887\u6888\u6889\u688A\u688B\u688C\u688D\u688E\u6890\u6891\u6892\u6894\u6895\u6896\u6898\u6899\u689A\u689B\u689C\u689D\u689E\u689F\u68A0\u68A1\u68A3\u68A4\u68A5\u68A9\u68AA\u68AB\u68AC\u68AE\u68B1\u68B2\u68B4\u68B6\u68B7\u68B8\uFFFD\u68B9\u68BA\u68BB\u68BC\u68BD\u68BE\u68BF\u68C1\u68C3\u68C4\u68C5\u68C6\u68C7\u68C8\u68CA\u68CC\u68CE\u68CF\u68D0\u68D1\u68D3\u68D4\u68D6\u68D7\u68D9\u68DB\u68DC\u68DD\u68DE\u68DF\u68E1\u68E2\u68E4\u68E5\u68E6\u68E7\u68E8\u68E9\u68EA\u68EB\u68EC\u68ED\u68EF\u68F2\u68F3\u68F4\u68F6\u68F7\u68F8\u68FB\u68FD\u68FE\u68FF\u6900\u6902\u6903\u6904\u6906\u6907\u6908\u6909\u690A\u690C\u690F\u6911\u6913\u6914\u6915\u6916\u6917\u6918\u6919\u691A\u691B\u691C\u691D\u691E\u6921\u6922\u6923\u6925\u6926\u6927\u6928\u6929\u692A\u692B\u692C\u692E\u692F\u6931\u6932\u6933\u6935\u6936\u6937\u6938\u693A\u693B\u693C\u693E\u6940\u6941\u6943\u6944\u6945\u6946\u6947\u6948\u6949\u694A\u694B\u694C\u694D\u694E\u694F\u6950\u6951\u6952\u6953\u6955\u6956\u6958\u6959\u695B\u695C\u695F\uFFFD".split("");
        for (j3 = 0; j3 != D5[151].length; ++j3)
          if (D5[151][j3].charCodeAt(0) !== 65533) {
            e7[D5[151][j3]] = 38656 + j3;
            d2[38656 + j3] = D5[151][j3];
          }
        D5[152] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u6961\u6962\u6964\u6965\u6967\u6968\u6969\u696A\u696C\u696D\u696F\u6970\u6972\u6973\u6974\u6975\u6976\u697A\u697B\u697D\u697E\u697F\u6981\u6983\u6985\u698A\u698B\u698C\u698E\u698F\u6990\u6991\u6992\u6993\u6996\u6997\u6999\u699A\u699D\u699E\u699F\u69A0\u69A1\u69A2\u69A3\u69A4\u69A5\u69A6\u69A9\u69AA\u69AC\u69AE\u69AF\u69B0\u69B2\u69B3\u69B5\u69B6\u69B8\u69B9\u69BA\u69BC\u69BD\uFFFD\u69BE\u69BF\u69C0\u69C2\u69C3\u69C4\u69C5\u69C6\u69C7\u69C8\u69C9\u69CB\u69CD\u69CF\u69D1\u69D2\u69D3\u69D5\u69D6\u69D7\u69D8\u69D9\u69DA\u69DC\u69DD\u69DE\u69E1\u69E2\u69E3\u69E4\u69E5\u69E6\u69E7\u69E8\u69E9\u69EA\u69EB\u69EC\u69EE\u69EF\u69F0\u69F1\u69F3\u69F4\u69F5\u69F6\u69F7\u69F8\u69F9\u69FA\u69FB\u69FC\u69FE\u6A00\u6A01\u6A02\u6A03\u6A04\u6A05\u6A06\u6A07\u6A08\u6A09\u6A0B\u6A0C\u6A0D\u6A0E\u6A0F\u6A10\u6A11\u6A12\u6A13\u6A14\u6A15\u6A16\u6A19\u6A1A\u6A1B\u6A1C\u6A1D\u6A1E\u6A20\u6A22\u6A23\u6A24\u6A25\u6A26\u6A27\u6A29\u6A2B\u6A2C\u6A2D\u6A2E\u6A30\u6A32\u6A33\u6A34\u6A36\u6A37\u6A38\u6A39\u6A3A\u6A3B\u6A3C\u6A3F\u6A40\u6A41\u6A42\u6A43\u6A45\u6A46\u6A48\u6A49\u6A4A\u6A4B\u6A4C\u6A4D\u6A4E\u6A4F\u6A51\u6A52\u6A53\u6A54\u6A55\u6A56\u6A57\u6A5A\uFFFD".split("");
        for (j3 = 0; j3 != D5[152].length; ++j3)
          if (D5[152][j3].charCodeAt(0) !== 65533) {
            e7[D5[152][j3]] = 38912 + j3;
            d2[38912 + j3] = D5[152][j3];
          }
        D5[153] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u6A5C\u6A5D\u6A5E\u6A5F\u6A60\u6A62\u6A63\u6A64\u6A66\u6A67\u6A68\u6A69\u6A6A\u6A6B\u6A6C\u6A6D\u6A6E\u6A6F\u6A70\u6A72\u6A73\u6A74\u6A75\u6A76\u6A77\u6A78\u6A7A\u6A7B\u6A7D\u6A7E\u6A7F\u6A81\u6A82\u6A83\u6A85\u6A86\u6A87\u6A88\u6A89\u6A8A\u6A8B\u6A8C\u6A8D\u6A8F\u6A92\u6A93\u6A94\u6A95\u6A96\u6A98\u6A99\u6A9A\u6A9B\u6A9C\u6A9D\u6A9E\u6A9F\u6AA1\u6AA2\u6AA3\u6AA4\u6AA5\u6AA6\uFFFD\u6AA7\u6AA8\u6AAA\u6AAD\u6AAE\u6AAF\u6AB0\u6AB1\u6AB2\u6AB3\u6AB4\u6AB5\u6AB6\u6AB7\u6AB8\u6AB9\u6ABA\u6ABB\u6ABC\u6ABD\u6ABE\u6ABF\u6AC0\u6AC1\u6AC2\u6AC3\u6AC4\u6AC5\u6AC6\u6AC7\u6AC8\u6AC9\u6ACA\u6ACB\u6ACC\u6ACD\u6ACE\u6ACF\u6AD0\u6AD1\u6AD2\u6AD3\u6AD4\u6AD5\u6AD6\u6AD7\u6AD8\u6AD9\u6ADA\u6ADB\u6ADC\u6ADD\u6ADE\u6ADF\u6AE0\u6AE1\u6AE2\u6AE3\u6AE4\u6AE5\u6AE6\u6AE7\u6AE8\u6AE9\u6AEA\u6AEB\u6AEC\u6AED\u6AEE\u6AEF\u6AF0\u6AF1\u6AF2\u6AF3\u6AF4\u6AF5\u6AF6\u6AF7\u6AF8\u6AF9\u6AFA\u6AFB\u6AFC\u6AFD\u6AFE\u6AFF\u6B00\u6B01\u6B02\u6B03\u6B04\u6B05\u6B06\u6B07\u6B08\u6B09\u6B0A\u6B0B\u6B0C\u6B0D\u6B0E\u6B0F\u6B10\u6B11\u6B12\u6B13\u6B14\u6B15\u6B16\u6B17\u6B18\u6B19\u6B1A\u6B1B\u6B1C\u6B1D\u6B1E\u6B1F\u6B25\u6B26\u6B28\u6B29\u6B2A\u6B2B\u6B2C\u6B2D\u6B2E\uFFFD".split("");
        for (j3 = 0; j3 != D5[153].length; ++j3)
          if (D5[153][j3].charCodeAt(0) !== 65533) {
            e7[D5[153][j3]] = 39168 + j3;
            d2[39168 + j3] = D5[153][j3];
          }
        D5[154] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u6B2F\u6B30\u6B31\u6B33\u6B34\u6B35\u6B36\u6B38\u6B3B\u6B3C\u6B3D\u6B3F\u6B40\u6B41\u6B42\u6B44\u6B45\u6B48\u6B4A\u6B4B\u6B4D\u6B4E\u6B4F\u6B50\u6B51\u6B52\u6B53\u6B54\u6B55\u6B56\u6B57\u6B58\u6B5A\u6B5B\u6B5C\u6B5D\u6B5E\u6B5F\u6B60\u6B61\u6B68\u6B69\u6B6B\u6B6C\u6B6D\u6B6E\u6B6F\u6B70\u6B71\u6B72\u6B73\u6B74\u6B75\u6B76\u6B77\u6B78\u6B7A\u6B7D\u6B7E\u6B7F\u6B80\u6B85\u6B88\uFFFD\u6B8C\u6B8E\u6B8F\u6B90\u6B91\u6B94\u6B95\u6B97\u6B98\u6B99\u6B9C\u6B9D\u6B9E\u6B9F\u6BA0\u6BA2\u6BA3\u6BA4\u6BA5\u6BA6\u6BA7\u6BA8\u6BA9\u6BAB\u6BAC\u6BAD\u6BAE\u6BAF\u6BB0\u6BB1\u6BB2\u6BB6\u6BB8\u6BB9\u6BBA\u6BBB\u6BBC\u6BBD\u6BBE\u6BC0\u6BC3\u6BC4\u6BC6\u6BC7\u6BC8\u6BC9\u6BCA\u6BCC\u6BCE\u6BD0\u6BD1\u6BD8\u6BDA\u6BDC\u6BDD\u6BDE\u6BDF\u6BE0\u6BE2\u6BE3\u6BE4\u6BE5\u6BE6\u6BE7\u6BE8\u6BE9\u6BEC\u6BED\u6BEE\u6BF0\u6BF1\u6BF2\u6BF4\u6BF6\u6BF7\u6BF8\u6BFA\u6BFB\u6BFC\u6BFE\u6BFF\u6C00\u6C01\u6C02\u6C03\u6C04\u6C08\u6C09\u6C0A\u6C0B\u6C0C\u6C0E\u6C12\u6C17\u6C1C\u6C1D\u6C1E\u6C20\u6C23\u6C25\u6C2B\u6C2C\u6C2D\u6C31\u6C33\u6C36\u6C37\u6C39\u6C3A\u6C3B\u6C3C\u6C3E\u6C3F\u6C43\u6C44\u6C45\u6C48\u6C4B\u6C4C\u6C4D\u6C4E\u6C4F\u6C51\u6C52\u6C53\u6C56\u6C58\uFFFD".split("");
        for (j3 = 0; j3 != D5[154].length; ++j3)
          if (D5[154][j3].charCodeAt(0) !== 65533) {
            e7[D5[154][j3]] = 39424 + j3;
            d2[39424 + j3] = D5[154][j3];
          }
        D5[155] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u6C59\u6C5A\u6C62\u6C63\u6C65\u6C66\u6C67\u6C6B\u6C6C\u6C6D\u6C6E\u6C6F\u6C71\u6C73\u6C75\u6C77\u6C78\u6C7A\u6C7B\u6C7C\u6C7F\u6C80\u6C84\u6C87\u6C8A\u6C8B\u6C8D\u6C8E\u6C91\u6C92\u6C95\u6C96\u6C97\u6C98\u6C9A\u6C9C\u6C9D\u6C9E\u6CA0\u6CA2\u6CA8\u6CAC\u6CAF\u6CB0\u6CB4\u6CB5\u6CB6\u6CB7\u6CBA\u6CC0\u6CC1\u6CC2\u6CC3\u6CC6\u6CC7\u6CC8\u6CCB\u6CCD\u6CCE\u6CCF\u6CD1\u6CD2\u6CD8\uFFFD\u6CD9\u6CDA\u6CDC\u6CDD\u6CDF\u6CE4\u6CE6\u6CE7\u6CE9\u6CEC\u6CED\u6CF2\u6CF4\u6CF9\u6CFF\u6D00\u6D02\u6D03\u6D05\u6D06\u6D08\u6D09\u6D0A\u6D0D\u6D0F\u6D10\u6D11\u6D13\u6D14\u6D15\u6D16\u6D18\u6D1C\u6D1D\u6D1F\u6D20\u6D21\u6D22\u6D23\u6D24\u6D26\u6D28\u6D29\u6D2C\u6D2D\u6D2F\u6D30\u6D34\u6D36\u6D37\u6D38\u6D3A\u6D3F\u6D40\u6D42\u6D44\u6D49\u6D4C\u6D50\u6D55\u6D56\u6D57\u6D58\u6D5B\u6D5D\u6D5F\u6D61\u6D62\u6D64\u6D65\u6D67\u6D68\u6D6B\u6D6C\u6D6D\u6D70\u6D71\u6D72\u6D73\u6D75\u6D76\u6D79\u6D7A\u6D7B\u6D7D\u6D7E\u6D7F\u6D80\u6D81\u6D83\u6D84\u6D86\u6D87\u6D8A\u6D8B\u6D8D\u6D8F\u6D90\u6D92\u6D96\u6D97\u6D98\u6D99\u6D9A\u6D9C\u6DA2\u6DA5\u6DAC\u6DAD\u6DB0\u6DB1\u6DB3\u6DB4\u6DB6\u6DB7\u6DB9\u6DBA\u6DBB\u6DBC\u6DBD\u6DBE\u6DC1\u6DC2\u6DC3\u6DC8\u6DC9\u6DCA\uFFFD".split("");
        for (j3 = 0; j3 != D5[155].length; ++j3)
          if (D5[155][j3].charCodeAt(0) !== 65533) {
            e7[D5[155][j3]] = 39680 + j3;
            d2[39680 + j3] = D5[155][j3];
          }
        D5[156] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u6DCD\u6DCE\u6DCF\u6DD0\u6DD2\u6DD3\u6DD4\u6DD5\u6DD7\u6DDA\u6DDB\u6DDC\u6DDF\u6DE2\u6DE3\u6DE5\u6DE7\u6DE8\u6DE9\u6DEA\u6DED\u6DEF\u6DF0\u6DF2\u6DF4\u6DF5\u6DF6\u6DF8\u6DFA\u6DFD\u6DFE\u6DFF\u6E00\u6E01\u6E02\u6E03\u6E04\u6E06\u6E07\u6E08\u6E09\u6E0B\u6E0F\u6E12\u6E13\u6E15\u6E18\u6E19\u6E1B\u6E1C\u6E1E\u6E1F\u6E22\u6E26\u6E27\u6E28\u6E2A\u6E2C\u6E2E\u6E30\u6E31\u6E33\u6E35\uFFFD\u6E36\u6E37\u6E39\u6E3B\u6E3C\u6E3D\u6E3E\u6E3F\u6E40\u6E41\u6E42\u6E45\u6E46\u6E47\u6E48\u6E49\u6E4A\u6E4B\u6E4C\u6E4F\u6E50\u6E51\u6E52\u6E55\u6E57\u6E59\u6E5A\u6E5C\u6E5D\u6E5E\u6E60\u6E61\u6E62\u6E63\u6E64\u6E65\u6E66\u6E67\u6E68\u6E69\u6E6A\u6E6C\u6E6D\u6E6F\u6E70\u6E71\u6E72\u6E73\u6E74\u6E75\u6E76\u6E77\u6E78\u6E79\u6E7A\u6E7B\u6E7C\u6E7D\u6E80\u6E81\u6E82\u6E84\u6E87\u6E88\u6E8A\u6E8B\u6E8C\u6E8D\u6E8E\u6E91\u6E92\u6E93\u6E94\u6E95\u6E96\u6E97\u6E99\u6E9A\u6E9B\u6E9D\u6E9E\u6EA0\u6EA1\u6EA3\u6EA4\u6EA6\u6EA8\u6EA9\u6EAB\u6EAC\u6EAD\u6EAE\u6EB0\u6EB3\u6EB5\u6EB8\u6EB9\u6EBC\u6EBE\u6EBF\u6EC0\u6EC3\u6EC4\u6EC5\u6EC6\u6EC8\u6EC9\u6ECA\u6ECC\u6ECD\u6ECE\u6ED0\u6ED2\u6ED6\u6ED8\u6ED9\u6EDB\u6EDC\u6EDD\u6EE3\u6EE7\u6EEA\u6EEB\u6EEC\u6EED\u6EEE\u6EEF\uFFFD".split("");
        for (j3 = 0; j3 != D5[156].length; ++j3)
          if (D5[156][j3].charCodeAt(0) !== 65533) {
            e7[D5[156][j3]] = 39936 + j3;
            d2[39936 + j3] = D5[156][j3];
          }
        D5[157] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u6EF0\u6EF1\u6EF2\u6EF3\u6EF5\u6EF6\u6EF7\u6EF8\u6EFA\u6EFB\u6EFC\u6EFD\u6EFE\u6EFF\u6F00\u6F01\u6F03\u6F04\u6F05\u6F07\u6F08\u6F0A\u6F0B\u6F0C\u6F0D\u6F0E\u6F10\u6F11\u6F12\u6F16\u6F17\u6F18\u6F19\u6F1A\u6F1B\u6F1C\u6F1D\u6F1E\u6F1F\u6F21\u6F22\u6F23\u6F25\u6F26\u6F27\u6F28\u6F2C\u6F2E\u6F30\u6F32\u6F34\u6F35\u6F37\u6F38\u6F39\u6F3A\u6F3B\u6F3C\u6F3D\u6F3F\u6F40\u6F41\u6F42\uFFFD\u6F43\u6F44\u6F45\u6F48\u6F49\u6F4A\u6F4C\u6F4E\u6F4F\u6F50\u6F51\u6F52\u6F53\u6F54\u6F55\u6F56\u6F57\u6F59\u6F5A\u6F5B\u6F5D\u6F5F\u6F60\u6F61\u6F63\u6F64\u6F65\u6F67\u6F68\u6F69\u6F6A\u6F6B\u6F6C\u6F6F\u6F70\u6F71\u6F73\u6F75\u6F76\u6F77\u6F79\u6F7B\u6F7D\u6F7E\u6F7F\u6F80\u6F81\u6F82\u6F83\u6F85\u6F86\u6F87\u6F8A\u6F8B\u6F8F\u6F90\u6F91\u6F92\u6F93\u6F94\u6F95\u6F96\u6F97\u6F98\u6F99\u6F9A\u6F9B\u6F9D\u6F9E\u6F9F\u6FA0\u6FA2\u6FA3\u6FA4\u6FA5\u6FA6\u6FA8\u6FA9\u6FAA\u6FAB\u6FAC\u6FAD\u6FAE\u6FAF\u6FB0\u6FB1\u6FB2\u6FB4\u6FB5\u6FB7\u6FB8\u6FBA\u6FBB\u6FBC\u6FBD\u6FBE\u6FBF\u6FC1\u6FC3\u6FC4\u6FC5\u6FC6\u6FC7\u6FC8\u6FCA\u6FCB\u6FCC\u6FCD\u6FCE\u6FCF\u6FD0\u6FD3\u6FD4\u6FD5\u6FD6\u6FD7\u6FD8\u6FD9\u6FDA\u6FDB\u6FDC\u6FDD\u6FDF\u6FE2\u6FE3\u6FE4\u6FE5\uFFFD".split("");
        for (j3 = 0; j3 != D5[157].length; ++j3)
          if (D5[157][j3].charCodeAt(0) !== 65533) {
            e7[D5[157][j3]] = 40192 + j3;
            d2[40192 + j3] = D5[157][j3];
          }
        D5[158] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u6FE6\u6FE7\u6FE8\u6FE9\u6FEA\u6FEB\u6FEC\u6FED\u6FF0\u6FF1\u6FF2\u6FF3\u6FF4\u6FF5\u6FF6\u6FF7\u6FF8\u6FF9\u6FFA\u6FFB\u6FFC\u6FFD\u6FFE\u6FFF\u7000\u7001\u7002\u7003\u7004\u7005\u7006\u7007\u7008\u7009\u700A\u700B\u700C\u700D\u700E\u700F\u7010\u7012\u7013\u7014\u7015\u7016\u7017\u7018\u7019\u701C\u701D\u701E\u701F\u7020\u7021\u7022\u7024\u7025\u7026\u7027\u7028\u7029\u702A\uFFFD\u702B\u702C\u702D\u702E\u702F\u7030\u7031\u7032\u7033\u7034\u7036\u7037\u7038\u703A\u703B\u703C\u703D\u703E\u703F\u7040\u7041\u7042\u7043\u7044\u7045\u7046\u7047\u7048\u7049\u704A\u704B\u704D\u704E\u7050\u7051\u7052\u7053\u7054\u7055\u7056\u7057\u7058\u7059\u705A\u705B\u705C\u705D\u705F\u7060\u7061\u7062\u7063\u7064\u7065\u7066\u7067\u7068\u7069\u706A\u706E\u7071\u7072\u7073\u7074\u7077\u7079\u707A\u707B\u707D\u7081\u7082\u7083\u7084\u7086\u7087\u7088\u708B\u708C\u708D\u708F\u7090\u7091\u7093\u7097\u7098\u709A\u709B\u709E\u709F\u70A0\u70A1\u70A2\u70A3\u70A4\u70A5\u70A6\u70A7\u70A8\u70A9\u70AA\u70B0\u70B2\u70B4\u70B5\u70B6\u70BA\u70BE\u70BF\u70C4\u70C5\u70C6\u70C7\u70C9\u70CB\u70CC\u70CD\u70CE\u70CF\u70D0\u70D1\u70D2\u70D3\u70D4\u70D5\u70D6\u70D7\u70DA\uFFFD".split("");
        for (j3 = 0; j3 != D5[158].length; ++j3)
          if (D5[158][j3].charCodeAt(0) !== 65533) {
            e7[D5[158][j3]] = 40448 + j3;
            d2[40448 + j3] = D5[158][j3];
          }
        D5[159] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u70DC\u70DD\u70DE\u70E0\u70E1\u70E2\u70E3\u70E5\u70EA\u70EE\u70F0\u70F1\u70F2\u70F3\u70F4\u70F5\u70F6\u70F8\u70FA\u70FB\u70FC\u70FE\u70FF\u7100\u7101\u7102\u7103\u7104\u7105\u7106\u7107\u7108\u710B\u710C\u710D\u710E\u710F\u7111\u7112\u7114\u7117\u711B\u711C\u711D\u711E\u711F\u7120\u7121\u7122\u7123\u7124\u7125\u7127\u7128\u7129\u712A\u712B\u712C\u712D\u712E\u7132\u7133\u7134\uFFFD\u7135\u7137\u7138\u7139\u713A\u713B\u713C\u713D\u713E\u713F\u7140\u7141\u7142\u7143\u7144\u7146\u7147\u7148\u7149\u714B\u714D\u714F\u7150\u7151\u7152\u7153\u7154\u7155\u7156\u7157\u7158\u7159\u715A\u715B\u715D\u715F\u7160\u7161\u7162\u7163\u7165\u7169\u716A\u716B\u716C\u716D\u716F\u7170\u7171\u7174\u7175\u7176\u7177\u7179\u717B\u717C\u717E\u717F\u7180\u7181\u7182\u7183\u7185\u7186\u7187\u7188\u7189\u718B\u718C\u718D\u718E\u7190\u7191\u7192\u7193\u7195\u7196\u7197\u719A\u719B\u719C\u719D\u719E\u71A1\u71A2\u71A3\u71A4\u71A5\u71A6\u71A7\u71A9\u71AA\u71AB\u71AD\u71AE\u71AF\u71B0\u71B1\u71B2\u71B4\u71B6\u71B7\u71B8\u71BA\u71BB\u71BC\u71BD\u71BE\u71BF\u71C0\u71C1\u71C2\u71C4\u71C5\u71C6\u71C7\u71C8\u71C9\u71CA\u71CB\u71CC\u71CD\u71CF\u71D0\u71D1\u71D2\u71D3\uFFFD".split("");
        for (j3 = 0; j3 != D5[159].length; ++j3)
          if (D5[159][j3].charCodeAt(0) !== 65533) {
            e7[D5[159][j3]] = 40704 + j3;
            d2[40704 + j3] = D5[159][j3];
          }
        D5[160] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u71D6\u71D7\u71D8\u71D9\u71DA\u71DB\u71DC\u71DD\u71DE\u71DF\u71E1\u71E2\u71E3\u71E4\u71E6\u71E8\u71E9\u71EA\u71EB\u71EC\u71ED\u71EF\u71F0\u71F1\u71F2\u71F3\u71F4\u71F5\u71F6\u71F7\u71F8\u71FA\u71FB\u71FC\u71FD\u71FE\u71FF\u7200\u7201\u7202\u7203\u7204\u7205\u7207\u7208\u7209\u720A\u720B\u720C\u720D\u720E\u720F\u7210\u7211\u7212\u7213\u7214\u7215\u7216\u7217\u7218\u7219\u721A\uFFFD\u721B\u721C\u721E\u721F\u7220\u7221\u7222\u7223\u7224\u7225\u7226\u7227\u7229\u722B\u722D\u722E\u722F\u7232\u7233\u7234\u723A\u723C\u723E\u7240\u7241\u7242\u7243\u7244\u7245\u7246\u7249\u724A\u724B\u724E\u724F\u7250\u7251\u7253\u7254\u7255\u7257\u7258\u725A\u725C\u725E\u7260\u7263\u7264\u7265\u7268\u726A\u726B\u726C\u726D\u7270\u7271\u7273\u7274\u7276\u7277\u7278\u727B\u727C\u727D\u7282\u7283\u7285\u7286\u7287\u7288\u7289\u728C\u728E\u7290\u7291\u7293\u7294\u7295\u7296\u7297\u7298\u7299\u729A\u729B\u729C\u729D\u729E\u72A0\u72A1\u72A2\u72A3\u72A4\u72A5\u72A6\u72A7\u72A8\u72A9\u72AA\u72AB\u72AE\u72B1\u72B2\u72B3\u72B5\u72BA\u72BB\u72BC\u72BD\u72BE\u72BF\u72C0\u72C5\u72C6\u72C7\u72C9\u72CA\u72CB\u72CC\u72CF\u72D1\u72D3\u72D4\u72D5\u72D6\u72D8\u72DA\u72DB\uFFFD".split("");
        for (j3 = 0; j3 != D5[160].length; ++j3)
          if (D5[160][j3].charCodeAt(0) !== 65533) {
            e7[D5[160][j3]] = 40960 + j3;
            d2[40960 + j3] = D5[160][j3];
          }
        D5[161] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u3000\u3001\u3002\xB7\u02C9\u02C7\xA8\u3003\u3005\u2014\uFF5E\u2016\u2026\u2018\u2019\u201C\u201D\u3014\u3015\u3008\u3009\u300A\u300B\u300C\u300D\u300E\u300F\u3016\u3017\u3010\u3011\xB1\xD7\xF7\u2236\u2227\u2228\u2211\u220F\u222A\u2229\u2208\u2237\u221A\u22A5\u2225\u2220\u2312\u2299\u222B\u222E\u2261\u224C\u2248\u223D\u221D\u2260\u226E\u226F\u2264\u2265\u221E\u2235\u2234\u2642\u2640\xB0\u2032\u2033\u2103\uFF04\xA4\uFFE0\uFFE1\u2030\xA7\u2116\u2606\u2605\u25CB\u25CF\u25CE\u25C7\u25C6\u25A1\u25A0\u25B3\u25B2\u203B\u2192\u2190\u2191\u2193\u3013\uFFFD".split("");
        for (j3 = 0; j3 != D5[161].length; ++j3)
          if (D5[161][j3].charCodeAt(0) !== 65533) {
            e7[D5[161][j3]] = 41216 + j3;
            d2[41216 + j3] = D5[161][j3];
          }
        D5[162] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u2170\u2171\u2172\u2173\u2174\u2175\u2176\u2177\u2178\u2179\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u2488\u2489\u248A\u248B\u248C\u248D\u248E\u248F\u2490\u2491\u2492\u2493\u2494\u2495\u2496\u2497\u2498\u2499\u249A\u249B\u2474\u2475\u2476\u2477\u2478\u2479\u247A\u247B\u247C\u247D\u247E\u247F\u2480\u2481\u2482\u2483\u2484\u2485\u2486\u2487\u2460\u2461\u2462\u2463\u2464\u2465\u2466\u2467\u2468\u2469\uFFFD\uFFFD\u3220\u3221\u3222\u3223\u3224\u3225\u3226\u3227\u3228\u3229\uFFFD\uFFFD\u2160\u2161\u2162\u2163\u2164\u2165\u2166\u2167\u2168\u2169\u216A\u216B\uFFFD\uFFFD\uFFFD".split("");
        for (j3 = 0; j3 != D5[162].length; ++j3)
          if (D5[162][j3].charCodeAt(0) !== 65533) {
            e7[D5[162][j3]] = 41472 + j3;
            d2[41472 + j3] = D5[162][j3];
          }
        D5[163] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFF01\uFF02\uFF03\uFFE5\uFF05\uFF06\uFF07\uFF08\uFF09\uFF0A\uFF0B\uFF0C\uFF0D\uFF0E\uFF0F\uFF10\uFF11\uFF12\uFF13\uFF14\uFF15\uFF16\uFF17\uFF18\uFF19\uFF1A\uFF1B\uFF1C\uFF1D\uFF1E\uFF1F\uFF20\uFF21\uFF22\uFF23\uFF24\uFF25\uFF26\uFF27\uFF28\uFF29\uFF2A\uFF2B\uFF2C\uFF2D\uFF2E\uFF2F\uFF30\uFF31\uFF32\uFF33\uFF34\uFF35\uFF36\uFF37\uFF38\uFF39\uFF3A\uFF3B\uFF3C\uFF3D\uFF3E\uFF3F\uFF40\uFF41\uFF42\uFF43\uFF44\uFF45\uFF46\uFF47\uFF48\uFF49\uFF4A\uFF4B\uFF4C\uFF4D\uFF4E\uFF4F\uFF50\uFF51\uFF52\uFF53\uFF54\uFF55\uFF56\uFF57\uFF58\uFF59\uFF5A\uFF5B\uFF5C\uFF5D\uFFE3\uFFFD".split("");
        for (j3 = 0; j3 != D5[163].length; ++j3)
          if (D5[163][j3].charCodeAt(0) !== 65533) {
            e7[D5[163][j3]] = 41728 + j3;
            d2[41728 + j3] = D5[163][j3];
          }
        D5[164] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u3041\u3042\u3043\u3044\u3045\u3046\u3047\u3048\u3049\u304A\u304B\u304C\u304D\u304E\u304F\u3050\u3051\u3052\u3053\u3054\u3055\u3056\u3057\u3058\u3059\u305A\u305B\u305C\u305D\u305E\u305F\u3060\u3061\u3062\u3063\u3064\u3065\u3066\u3067\u3068\u3069\u306A\u306B\u306C\u306D\u306E\u306F\u3070\u3071\u3072\u3073\u3074\u3075\u3076\u3077\u3078\u3079\u307A\u307B\u307C\u307D\u307E\u307F\u3080\u3081\u3082\u3083\u3084\u3085\u3086\u3087\u3088\u3089\u308A\u308B\u308C\u308D\u308E\u308F\u3090\u3091\u3092\u3093\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD".split("");
        for (j3 = 0; j3 != D5[164].length; ++j3)
          if (D5[164][j3].charCodeAt(0) !== 65533) {
            e7[D5[164][j3]] = 41984 + j3;
            d2[41984 + j3] = D5[164][j3];
          }
        D5[165] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u30A1\u30A2\u30A3\u30A4\u30A5\u30A6\u30A7\u30A8\u30A9\u30AA\u30AB\u30AC\u30AD\u30AE\u30AF\u30B0\u30B1\u30B2\u30B3\u30B4\u30B5\u30B6\u30B7\u30B8\u30B9\u30BA\u30BB\u30BC\u30BD\u30BE\u30BF\u30C0\u30C1\u30C2\u30C3\u30C4\u30C5\u30C6\u30C7\u30C8\u30C9\u30CA\u30CB\u30CC\u30CD\u30CE\u30CF\u30D0\u30D1\u30D2\u30D3\u30D4\u30D5\u30D6\u30D7\u30D8\u30D9\u30DA\u30DB\u30DC\u30DD\u30DE\u30DF\u30E0\u30E1\u30E2\u30E3\u30E4\u30E5\u30E6\u30E7\u30E8\u30E9\u30EA\u30EB\u30EC\u30ED\u30EE\u30EF\u30F0\u30F1\u30F2\u30F3\u30F4\u30F5\u30F6\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD".split("");
        for (j3 = 0; j3 != D5[165].length; ++j3)
          if (D5[165][j3].charCodeAt(0) !== 65533) {
            e7[D5[165][j3]] = 42240 + j3;
            d2[42240 + j3] = D5[165][j3];
          }
        D5[166] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u0391\u0392\u0393\u0394\u0395\u0396\u0397\u0398\u0399\u039A\u039B\u039C\u039D\u039E\u039F\u03A0\u03A1\u03A3\u03A4\u03A5\u03A6\u03A7\u03A8\u03A9\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u03B1\u03B2\u03B3\u03B4\u03B5\u03B6\u03B7\u03B8\u03B9\u03BA\u03BB\u03BC\u03BD\u03BE\u03BF\u03C0\u03C1\u03C3\u03C4\u03C5\u03C6\u03C7\u03C8\u03C9\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFE35\uFE36\uFE39\uFE3A\uFE3F\uFE40\uFE3D\uFE3E\uFE41\uFE42\uFE43\uFE44\uFFFD\uFFFD\uFE3B\uFE3C\uFE37\uFE38\uFE31\uFFFD\uFE33\uFE34\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD".split("");
        for (j3 = 0; j3 != D5[166].length; ++j3)
          if (D5[166][j3].charCodeAt(0) !== 65533) {
            e7[D5[166][j3]] = 42496 + j3;
            d2[42496 + j3] = D5[166][j3];
          }
        D5[167] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u0410\u0411\u0412\u0413\u0414\u0415\u0401\u0416\u0417\u0418\u0419\u041A\u041B\u041C\u041D\u041E\u041F\u0420\u0421\u0422\u0423\u0424\u0425\u0426\u0427\u0428\u0429\u042A\u042B\u042C\u042D\u042E\u042F\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u0430\u0431\u0432\u0433\u0434\u0435\u0451\u0436\u0437\u0438\u0439\u043A\u043B\u043C\u043D\u043E\u043F\u0440\u0441\u0442\u0443\u0444\u0445\u0446\u0447\u0448\u0449\u044A\u044B\u044C\u044D\u044E\u044F\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD".split("");
        for (j3 = 0; j3 != D5[167].length; ++j3)
          if (D5[167][j3].charCodeAt(0) !== 65533) {
            e7[D5[167][j3]] = 42752 + j3;
            d2[42752 + j3] = D5[167][j3];
          }
        D5[168] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u02CA\u02CB\u02D9\u2013\u2015\u2025\u2035\u2105\u2109\u2196\u2197\u2198\u2199\u2215\u221F\u2223\u2252\u2266\u2267\u22BF\u2550\u2551\u2552\u2553\u2554\u2555\u2556\u2557\u2558\u2559\u255A\u255B\u255C\u255D\u255E\u255F\u2560\u2561\u2562\u2563\u2564\u2565\u2566\u2567\u2568\u2569\u256A\u256B\u256C\u256D\u256E\u256F\u2570\u2571\u2572\u2573\u2581\u2582\u2583\u2584\u2585\u2586\u2587\uFFFD\u2588\u2589\u258A\u258B\u258C\u258D\u258E\u258F\u2593\u2594\u2595\u25BC\u25BD\u25E2\u25E3\u25E4\u25E5\u2609\u2295\u3012\u301D\u301E\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u0101\xE1\u01CE\xE0\u0113\xE9\u011B\xE8\u012B\xED\u01D0\xEC\u014D\xF3\u01D2\xF2\u016B\xFA\u01D4\xF9\u01D6\u01D8\u01DA\u01DC\xFC\xEA\u0251\uFFFD\u0144\u0148\uFFFD\u0261\uFFFD\uFFFD\uFFFD\uFFFD\u3105\u3106\u3107\u3108\u3109\u310A\u310B\u310C\u310D\u310E\u310F\u3110\u3111\u3112\u3113\u3114\u3115\u3116\u3117\u3118\u3119\u311A\u311B\u311C\u311D\u311E\u311F\u3120\u3121\u3122\u3123\u3124\u3125\u3126\u3127\u3128\u3129\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD".split("");
        for (j3 = 0; j3 != D5[168].length; ++j3)
          if (D5[168][j3].charCodeAt(0) !== 65533) {
            e7[D5[168][j3]] = 43008 + j3;
            d2[43008 + j3] = D5[168][j3];
          }
        D5[169] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u3021\u3022\u3023\u3024\u3025\u3026\u3027\u3028\u3029\u32A3\u338E\u338F\u339C\u339D\u339E\u33A1\u33C4\u33CE\u33D1\u33D2\u33D5\uFE30\uFFE2\uFFE4\uFFFD\u2121\u3231\uFFFD\u2010\uFFFD\uFFFD\uFFFD\u30FC\u309B\u309C\u30FD\u30FE\u3006\u309D\u309E\uFE49\uFE4A\uFE4B\uFE4C\uFE4D\uFE4E\uFE4F\uFE50\uFE51\uFE52\uFE54\uFE55\uFE56\uFE57\uFE59\uFE5A\uFE5B\uFE5C\uFE5D\uFE5E\uFE5F\uFE60\uFE61\uFFFD\uFE62\uFE63\uFE64\uFE65\uFE66\uFE68\uFE69\uFE6A\uFE6B\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u3007\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u2500\u2501\u2502\u2503\u2504\u2505\u2506\u2507\u2508\u2509\u250A\u250B\u250C\u250D\u250E\u250F\u2510\u2511\u2512\u2513\u2514\u2515\u2516\u2517\u2518\u2519\u251A\u251B\u251C\u251D\u251E\u251F\u2520\u2521\u2522\u2523\u2524\u2525\u2526\u2527\u2528\u2529\u252A\u252B\u252C\u252D\u252E\u252F\u2530\u2531\u2532\u2533\u2534\u2535\u2536\u2537\u2538\u2539\u253A\u253B\u253C\u253D\u253E\u253F\u2540\u2541\u2542\u2543\u2544\u2545\u2546\u2547\u2548\u2549\u254A\u254B\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD".split("");
        for (j3 = 0; j3 != D5[169].length; ++j3)
          if (D5[169][j3].charCodeAt(0) !== 65533) {
            e7[D5[169][j3]] = 43264 + j3;
            d2[43264 + j3] = D5[169][j3];
          }
        D5[170] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u72DC\u72DD\u72DF\u72E2\u72E3\u72E4\u72E5\u72E6\u72E7\u72EA\u72EB\u72F5\u72F6\u72F9\u72FD\u72FE\u72FF\u7300\u7302\u7304\u7305\u7306\u7307\u7308\u7309\u730B\u730C\u730D\u730F\u7310\u7311\u7312\u7314\u7318\u7319\u731A\u731F\u7320\u7323\u7324\u7326\u7327\u7328\u732D\u732F\u7330\u7332\u7333\u7335\u7336\u733A\u733B\u733C\u733D\u7340\u7341\u7342\u7343\u7344\u7345\u7346\u7347\u7348\uFFFD\u7349\u734A\u734B\u734C\u734E\u734F\u7351\u7353\u7354\u7355\u7356\u7358\u7359\u735A\u735B\u735C\u735D\u735E\u735F\u7361\u7362\u7363\u7364\u7365\u7366\u7367\u7368\u7369\u736A\u736B\u736E\u7370\u7371\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD".split("");
        for (j3 = 0; j3 != D5[170].length; ++j3)
          if (D5[170][j3].charCodeAt(0) !== 65533) {
            e7[D5[170][j3]] = 43520 + j3;
            d2[43520 + j3] = D5[170][j3];
          }
        D5[171] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u7372\u7373\u7374\u7375\u7376\u7377\u7378\u7379\u737A\u737B\u737C\u737D\u737F\u7380\u7381\u7382\u7383\u7385\u7386\u7388\u738A\u738C\u738D\u738F\u7390\u7392\u7393\u7394\u7395\u7397\u7398\u7399\u739A\u739C\u739D\u739E\u73A0\u73A1\u73A3\u73A4\u73A5\u73A6\u73A7\u73A8\u73AA\u73AC\u73AD\u73B1\u73B4\u73B5\u73B6\u73B8\u73B9\u73BC\u73BD\u73BE\u73BF\u73C1\u73C3\u73C4\u73C5\u73C6\u73C7\uFFFD\u73CB\u73CC\u73CE\u73D2\u73D3\u73D4\u73D5\u73D6\u73D7\u73D8\u73DA\u73DB\u73DC\u73DD\u73DF\u73E1\u73E2\u73E3\u73E4\u73E6\u73E8\u73EA\u73EB\u73EC\u73EE\u73EF\u73F0\u73F1\u73F3\u73F4\u73F5\u73F6\u73F7\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD".split("");
        for (j3 = 0; j3 != D5[171].length; ++j3)
          if (D5[171][j3].charCodeAt(0) !== 65533) {
            e7[D5[171][j3]] = 43776 + j3;
            d2[43776 + j3] = D5[171][j3];
          }
        D5[172] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u73F8\u73F9\u73FA\u73FB\u73FC\u73FD\u73FE\u73FF\u7400\u7401\u7402\u7404\u7407\u7408\u740B\u740C\u740D\u740E\u7411\u7412\u7413\u7414\u7415\u7416\u7417\u7418\u7419\u741C\u741D\u741E\u741F\u7420\u7421\u7423\u7424\u7427\u7429\u742B\u742D\u742F\u7431\u7432\u7437\u7438\u7439\u743A\u743B\u743D\u743E\u743F\u7440\u7442\u7443\u7444\u7445\u7446\u7447\u7448\u7449\u744A\u744B\u744C\u744D\uFFFD\u744E\u744F\u7450\u7451\u7452\u7453\u7454\u7456\u7458\u745D\u7460\u7461\u7462\u7463\u7464\u7465\u7466\u7467\u7468\u7469\u746A\u746B\u746C\u746E\u746F\u7471\u7472\u7473\u7474\u7475\u7478\u7479\u747A\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD".split("");
        for (j3 = 0; j3 != D5[172].length; ++j3)
          if (D5[172][j3].charCodeAt(0) !== 65533) {
            e7[D5[172][j3]] = 44032 + j3;
            d2[44032 + j3] = D5[172][j3];
          }
        D5[173] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u747B\u747C\u747D\u747F\u7482\u7484\u7485\u7486\u7488\u7489\u748A\u748C\u748D\u748F\u7491\u7492\u7493\u7494\u7495\u7496\u7497\u7498\u7499\u749A\u749B\u749D\u749F\u74A0\u74A1\u74A2\u74A3\u74A4\u74A5\u74A6\u74AA\u74AB\u74AC\u74AD\u74AE\u74AF\u74B0\u74B1\u74B2\u74B3\u74B4\u74B5\u74B6\u74B7\u74B8\u74B9\u74BB\u74BC\u74BD\u74BE\u74BF\u74C0\u74C1\u74C2\u74C3\u74C4\u74C5\u74C6\u74C7\uFFFD\u74C8\u74C9\u74CA\u74CB\u74CC\u74CD\u74CE\u74CF\u74D0\u74D1\u74D3\u74D4\u74D5\u74D6\u74D7\u74D8\u74D9\u74DA\u74DB\u74DD\u74DF\u74E1\u74E5\u74E7\u74E8\u74E9\u74EA\u74EB\u74EC\u74ED\u74F0\u74F1\u74F2\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD".split("");
        for (j3 = 0; j3 != D5[173].length; ++j3)
          if (D5[173][j3].charCodeAt(0) !== 65533) {
            e7[D5[173][j3]] = 44288 + j3;
            d2[44288 + j3] = D5[173][j3];
          }
        D5[174] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u74F3\u74F5\u74F8\u74F9\u74FA\u74FB\u74FC\u74FD\u74FE\u7500\u7501\u7502\u7503\u7505\u7506\u7507\u7508\u7509\u750A\u750B\u750C\u750E\u7510\u7512\u7514\u7515\u7516\u7517\u751B\u751D\u751E\u7520\u7521\u7522\u7523\u7524\u7526\u7527\u752A\u752E\u7534\u7536\u7539\u753C\u753D\u753F\u7541\u7542\u7543\u7544\u7546\u7547\u7549\u754A\u754D\u7550\u7551\u7552\u7553\u7555\u7556\u7557\u7558\uFFFD\u755D\u755E\u755F\u7560\u7561\u7562\u7563\u7564\u7567\u7568\u7569\u756B\u756C\u756D\u756E\u756F\u7570\u7571\u7573\u7575\u7576\u7577\u757A\u757B\u757C\u757D\u757E\u7580\u7581\u7582\u7584\u7585\u7587\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD".split("");
        for (j3 = 0; j3 != D5[174].length; ++j3)
          if (D5[174][j3].charCodeAt(0) !== 65533) {
            e7[D5[174][j3]] = 44544 + j3;
            d2[44544 + j3] = D5[174][j3];
          }
        D5[175] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u7588\u7589\u758A\u758C\u758D\u758E\u7590\u7593\u7595\u7598\u759B\u759C\u759E\u75A2\u75A6\u75A7\u75A8\u75A9\u75AA\u75AD\u75B6\u75B7\u75BA\u75BB\u75BF\u75C0\u75C1\u75C6\u75CB\u75CC\u75CE\u75CF\u75D0\u75D1\u75D3\u75D7\u75D9\u75DA\u75DC\u75DD\u75DF\u75E0\u75E1\u75E5\u75E9\u75EC\u75ED\u75EE\u75EF\u75F2\u75F3\u75F5\u75F6\u75F7\u75F8\u75FA\u75FB\u75FD\u75FE\u7602\u7604\u7606\u7607\uFFFD\u7608\u7609\u760B\u760D\u760E\u760F\u7611\u7612\u7613\u7614\u7616\u761A\u761C\u761D\u761E\u7621\u7623\u7627\u7628\u762C\u762E\u762F\u7631\u7632\u7636\u7637\u7639\u763A\u763B\u763D\u7641\u7642\u7644\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD".split("");
        for (j3 = 0; j3 != D5[175].length; ++j3)
          if (D5[175][j3].charCodeAt(0) !== 65533) {
            e7[D5[175][j3]] = 44800 + j3;
            d2[44800 + j3] = D5[175][j3];
          }
        D5[176] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u7645\u7646\u7647\u7648\u7649\u764A\u764B\u764E\u764F\u7650\u7651\u7652\u7653\u7655\u7657\u7658\u7659\u765A\u765B\u765D\u765F\u7660\u7661\u7662\u7664\u7665\u7666\u7667\u7668\u7669\u766A\u766C\u766D\u766E\u7670\u7671\u7672\u7673\u7674\u7675\u7676\u7677\u7679\u767A\u767C\u767F\u7680\u7681\u7683\u7685\u7689\u768A\u768C\u768D\u768F\u7690\u7692\u7694\u7695\u7697\u7698\u769A\u769B\uFFFD\u769C\u769D\u769E\u769F\u76A0\u76A1\u76A2\u76A3\u76A5\u76A6\u76A7\u76A8\u76A9\u76AA\u76AB\u76AC\u76AD\u76AF\u76B0\u76B3\u76B5\u76B6\u76B7\u76B8\u76B9\u76BA\u76BB\u76BC\u76BD\u76BE\u76C0\u76C1\u76C3\u554A\u963F\u57C3\u6328\u54CE\u5509\u54C0\u7691\u764C\u853C\u77EE\u827E\u788D\u7231\u9698\u978D\u6C28\u5B89\u4FFA\u6309\u6697\u5CB8\u80FA\u6848\u80AE\u6602\u76CE\u51F9\u6556\u71AC\u7FF1\u8884\u50B2\u5965\u61CA\u6FB3\u82AD\u634C\u6252\u53ED\u5427\u7B06\u516B\u75A4\u5DF4\u62D4\u8DCB\u9776\u628A\u8019\u575D\u9738\u7F62\u7238\u767D\u67CF\u767E\u6446\u4F70\u8D25\u62DC\u7A17\u6591\u73ED\u642C\u6273\u822C\u9881\u677F\u7248\u626E\u62CC\u4F34\u74E3\u534A\u529E\u7ECA\u90A6\u5E2E\u6886\u699C\u8180\u7ED1\u68D2\u78C5\u868C\u9551\u508D\u8C24\u82DE\u80DE\u5305\u8912\u5265\uFFFD".split("");
        for (j3 = 0; j3 != D5[176].length; ++j3)
          if (D5[176][j3].charCodeAt(0) !== 65533) {
            e7[D5[176][j3]] = 45056 + j3;
            d2[45056 + j3] = D5[176][j3];
          }
        D5[177] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u76C4\u76C7\u76C9\u76CB\u76CC\u76D3\u76D5\u76D9\u76DA\u76DC\u76DD\u76DE\u76E0\u76E1\u76E2\u76E3\u76E4\u76E6\u76E7\u76E8\u76E9\u76EA\u76EB\u76EC\u76ED\u76F0\u76F3\u76F5\u76F6\u76F7\u76FA\u76FB\u76FD\u76FF\u7700\u7702\u7703\u7705\u7706\u770A\u770C\u770E\u770F\u7710\u7711\u7712\u7713\u7714\u7715\u7716\u7717\u7718\u771B\u771C\u771D\u771E\u7721\u7723\u7724\u7725\u7727\u772A\u772B\uFFFD\u772C\u772E\u7730\u7731\u7732\u7733\u7734\u7739\u773B\u773D\u773E\u773F\u7742\u7744\u7745\u7746\u7748\u7749\u774A\u774B\u774C\u774D\u774E\u774F\u7752\u7753\u7754\u7755\u7756\u7757\u7758\u7759\u775C\u8584\u96F9\u4FDD\u5821\u9971\u5B9D\u62B1\u62A5\u66B4\u8C79\u9C8D\u7206\u676F\u7891\u60B2\u5351\u5317\u8F88\u80CC\u8D1D\u94A1\u500D\u72C8\u5907\u60EB\u7119\u88AB\u5954\u82EF\u672C\u7B28\u5D29\u7EF7\u752D\u6CF5\u8E66\u8FF8\u903C\u9F3B\u6BD4\u9119\u7B14\u5F7C\u78A7\u84D6\u853D\u6BD5\u6BD9\u6BD6\u5E01\u5E87\u75F9\u95ED\u655D\u5F0A\u5FC5\u8F9F\u58C1\u81C2\u907F\u965B\u97AD\u8FB9\u7F16\u8D2C\u6241\u4FBF\u53D8\u535E\u8FA8\u8FA9\u8FAB\u904D\u6807\u5F6A\u8198\u8868\u9CD6\u618B\u522B\u762A\u5F6C\u658C\u6FD2\u6EE8\u5BBE\u6448\u5175\u51B0\u67C4\u4E19\u79C9\u997C\u70B3\uFFFD".split("");
        for (j3 = 0; j3 != D5[177].length; ++j3)
          if (D5[177][j3].charCodeAt(0) !== 65533) {
            e7[D5[177][j3]] = 45312 + j3;
            d2[45312 + j3] = D5[177][j3];
          }
        D5[178] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u775D\u775E\u775F\u7760\u7764\u7767\u7769\u776A\u776D\u776E\u776F\u7770\u7771\u7772\u7773\u7774\u7775\u7776\u7777\u7778\u777A\u777B\u777C\u7781\u7782\u7783\u7786\u7787\u7788\u7789\u778A\u778B\u778F\u7790\u7793\u7794\u7795\u7796\u7797\u7798\u7799\u779A\u779B\u779C\u779D\u779E\u77A1\u77A3\u77A4\u77A6\u77A8\u77AB\u77AD\u77AE\u77AF\u77B1\u77B2\u77B4\u77B6\u77B7\u77B8\u77B9\u77BA\uFFFD\u77BC\u77BE\u77C0\u77C1\u77C2\u77C3\u77C4\u77C5\u77C6\u77C7\u77C8\u77C9\u77CA\u77CB\u77CC\u77CE\u77CF\u77D0\u77D1\u77D2\u77D3\u77D4\u77D5\u77D6\u77D8\u77D9\u77DA\u77DD\u77DE\u77DF\u77E0\u77E1\u77E4\u75C5\u5E76\u73BB\u83E0\u64AD\u62E8\u94B5\u6CE2\u535A\u52C3\u640F\u94C2\u7B94\u4F2F\u5E1B\u8236\u8116\u818A\u6E24\u6CCA\u9A73\u6355\u535C\u54FA\u8865\u57E0\u4E0D\u5E03\u6B65\u7C3F\u90E8\u6016\u64E6\u731C\u88C1\u6750\u624D\u8D22\u776C\u8E29\u91C7\u5F69\u83DC\u8521\u9910\u53C2\u8695\u6B8B\u60ED\u60E8\u707F\u82CD\u8231\u4ED3\u6CA7\u85CF\u64CD\u7CD9\u69FD\u66F9\u8349\u5395\u7B56\u4FA7\u518C\u6D4B\u5C42\u8E6D\u63D2\u53C9\u832C\u8336\u67E5\u78B4\u643D\u5BDF\u5C94\u5DEE\u8BE7\u62C6\u67F4\u8C7A\u6400\u63BA\u8749\u998B\u8C17\u7F20\u94F2\u4EA7\u9610\u98A4\u660C\u7316\uFFFD".split("");
        for (j3 = 0; j3 != D5[178].length; ++j3)
          if (D5[178][j3].charCodeAt(0) !== 65533) {
            e7[D5[178][j3]] = 45568 + j3;
            d2[45568 + j3] = D5[178][j3];
          }
        D5[179] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u77E6\u77E8\u77EA\u77EF\u77F0\u77F1\u77F2\u77F4\u77F5\u77F7\u77F9\u77FA\u77FB\u77FC\u7803\u7804\u7805\u7806\u7807\u7808\u780A\u780B\u780E\u780F\u7810\u7813\u7815\u7819\u781B\u781E\u7820\u7821\u7822\u7824\u7828\u782A\u782B\u782E\u782F\u7831\u7832\u7833\u7835\u7836\u783D\u783F\u7841\u7842\u7843\u7844\u7846\u7848\u7849\u784A\u784B\u784D\u784F\u7851\u7853\u7854\u7858\u7859\u785A\uFFFD\u785B\u785C\u785E\u785F\u7860\u7861\u7862\u7863\u7864\u7865\u7866\u7867\u7868\u7869\u786F\u7870\u7871\u7872\u7873\u7874\u7875\u7876\u7878\u7879\u787A\u787B\u787D\u787E\u787F\u7880\u7881\u7882\u7883\u573A\u5C1D\u5E38\u957F\u507F\u80A0\u5382\u655E\u7545\u5531\u5021\u8D85\u6284\u949E\u671D\u5632\u6F6E\u5DE2\u5435\u7092\u8F66\u626F\u64A4\u63A3\u5F7B\u6F88\u90F4\u81E3\u8FB0\u5C18\u6668\u5FF1\u6C89\u9648\u8D81\u886C\u6491\u79F0\u57CE\u6A59\u6210\u5448\u4E58\u7A0B\u60E9\u6F84\u8BDA\u627F\u901E\u9A8B\u79E4\u5403\u75F4\u6301\u5319\u6C60\u8FDF\u5F1B\u9A70\u803B\u9F7F\u4F88\u5C3A\u8D64\u7FC5\u65A5\u70BD\u5145\u51B2\u866B\u5D07\u5BA0\u62BD\u916C\u7574\u8E0C\u7A20\u6101\u7B79\u4EC7\u7EF8\u7785\u4E11\u81ED\u521D\u51FA\u6A71\u53A8\u8E87\u9504\u96CF\u6EC1\u9664\u695A\uFFFD".split("");
        for (j3 = 0; j3 != D5[179].length; ++j3)
          if (D5[179][j3].charCodeAt(0) !== 65533) {
            e7[D5[179][j3]] = 45824 + j3;
            d2[45824 + j3] = D5[179][j3];
          }
        D5[180] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u7884\u7885\u7886\u7888\u788A\u788B\u788F\u7890\u7892\u7894\u7895\u7896\u7899\u789D\u789E\u78A0\u78A2\u78A4\u78A6\u78A8\u78A9\u78AA\u78AB\u78AC\u78AD\u78AE\u78AF\u78B5\u78B6\u78B7\u78B8\u78BA\u78BB\u78BC\u78BD\u78BF\u78C0\u78C2\u78C3\u78C4\u78C6\u78C7\u78C8\u78CC\u78CD\u78CE\u78CF\u78D1\u78D2\u78D3\u78D6\u78D7\u78D8\u78DA\u78DB\u78DC\u78DD\u78DE\u78DF\u78E0\u78E1\u78E2\u78E3\uFFFD\u78E4\u78E5\u78E6\u78E7\u78E9\u78EA\u78EB\u78ED\u78EE\u78EF\u78F0\u78F1\u78F3\u78F5\u78F6\u78F8\u78F9\u78FB\u78FC\u78FD\u78FE\u78FF\u7900\u7902\u7903\u7904\u7906\u7907\u7908\u7909\u790A\u790B\u790C\u7840\u50A8\u77D7\u6410\u89E6\u5904\u63E3\u5DDD\u7A7F\u693D\u4F20\u8239\u5598\u4E32\u75AE\u7A97\u5E62\u5E8A\u95EF\u521B\u5439\u708A\u6376\u9524\u5782\u6625\u693F\u9187\u5507\u6DF3\u7EAF\u8822\u6233\u7EF0\u75B5\u8328\u78C1\u96CC\u8F9E\u6148\u74F7\u8BCD\u6B64\u523A\u8D50\u6B21\u806A\u8471\u56F1\u5306\u4ECE\u4E1B\u51D1\u7C97\u918B\u7C07\u4FC3\u8E7F\u7BE1\u7A9C\u6467\u5D14\u50AC\u8106\u7601\u7CB9\u6DEC\u7FE0\u6751\u5B58\u5BF8\u78CB\u64AE\u6413\u63AA\u632B\u9519\u642D\u8FBE\u7B54\u7629\u6253\u5927\u5446\u6B79\u50A3\u6234\u5E26\u6B86\u4EE3\u8D37\u888B\u5F85\u902E\uFFFD".split("");
        for (j3 = 0; j3 != D5[180].length; ++j3)
          if (D5[180][j3].charCodeAt(0) !== 65533) {
            e7[D5[180][j3]] = 46080 + j3;
            d2[46080 + j3] = D5[180][j3];
          }
        D5[181] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u790D\u790E\u790F\u7910\u7911\u7912\u7914\u7915\u7916\u7917\u7918\u7919\u791A\u791B\u791C\u791D\u791F\u7920\u7921\u7922\u7923\u7925\u7926\u7927\u7928\u7929\u792A\u792B\u792C\u792D\u792E\u792F\u7930\u7931\u7932\u7933\u7935\u7936\u7937\u7938\u7939\u793D\u793F\u7942\u7943\u7944\u7945\u7947\u794A\u794B\u794C\u794D\u794E\u794F\u7950\u7951\u7952\u7954\u7955\u7958\u7959\u7961\u7963\uFFFD\u7964\u7966\u7969\u796A\u796B\u796C\u796E\u7970\u7971\u7972\u7973\u7974\u7975\u7976\u7979\u797B\u797C\u797D\u797E\u797F\u7982\u7983\u7986\u7987\u7988\u7989\u798B\u798C\u798D\u798E\u7990\u7991\u7992\u6020\u803D\u62C5\u4E39\u5355\u90F8\u63B8\u80C6\u65E6\u6C2E\u4F46\u60EE\u6DE1\u8BDE\u5F39\u86CB\u5F53\u6321\u515A\u8361\u6863\u5200\u6363\u8E48\u5012\u5C9B\u7977\u5BFC\u5230\u7A3B\u60BC\u9053\u76D7\u5FB7\u5F97\u7684\u8E6C\u706F\u767B\u7B49\u77AA\u51F3\u9093\u5824\u4F4E\u6EF4\u8FEA\u654C\u7B1B\u72C4\u6DA4\u7FDF\u5AE1\u62B5\u5E95\u5730\u8482\u7B2C\u5E1D\u5F1F\u9012\u7F14\u98A0\u6382\u6EC7\u7898\u70B9\u5178\u975B\u57AB\u7535\u4F43\u7538\u5E97\u60E6\u5960\u6DC0\u6BBF\u7889\u53FC\u96D5\u51CB\u5201\u6389\u540A\u9493\u8C03\u8DCC\u7239\u789F\u8776\u8FED\u8C0D\u53E0\uFFFD".split("");
        for (j3 = 0; j3 != D5[181].length; ++j3)
          if (D5[181][j3].charCodeAt(0) !== 65533) {
            e7[D5[181][j3]] = 46336 + j3;
            d2[46336 + j3] = D5[181][j3];
          }
        D5[182] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u7993\u7994\u7995\u7996\u7997\u7998\u7999\u799B\u799C\u799D\u799E\u799F\u79A0\u79A1\u79A2\u79A3\u79A4\u79A5\u79A6\u79A8\u79A9\u79AA\u79AB\u79AC\u79AD\u79AE\u79AF\u79B0\u79B1\u79B2\u79B4\u79B5\u79B6\u79B7\u79B8\u79BC\u79BF\u79C2\u79C4\u79C5\u79C7\u79C8\u79CA\u79CC\u79CE\u79CF\u79D0\u79D3\u79D4\u79D6\u79D7\u79D9\u79DA\u79DB\u79DC\u79DD\u79DE\u79E0\u79E1\u79E2\u79E5\u79E8\u79EA\uFFFD\u79EC\u79EE\u79F1\u79F2\u79F3\u79F4\u79F5\u79F6\u79F7\u79F9\u79FA\u79FC\u79FE\u79FF\u7A01\u7A04\u7A05\u7A07\u7A08\u7A09\u7A0A\u7A0C\u7A0F\u7A10\u7A11\u7A12\u7A13\u7A15\u7A16\u7A18\u7A19\u7A1B\u7A1C\u4E01\u76EF\u53EE\u9489\u9876\u9F0E\u952D\u5B9A\u8BA2\u4E22\u4E1C\u51AC\u8463\u61C2\u52A8\u680B\u4F97\u606B\u51BB\u6D1E\u515C\u6296\u6597\u9661\u8C46\u9017\u75D8\u90FD\u7763\u6BD2\u728A\u72EC\u8BFB\u5835\u7779\u8D4C\u675C\u9540\u809A\u5EA6\u6E21\u5992\u7AEF\u77ED\u953B\u6BB5\u65AD\u7F0E\u5806\u5151\u961F\u5BF9\u58A9\u5428\u8E72\u6566\u987F\u56E4\u949D\u76FE\u9041\u6387\u54C6\u591A\u593A\u579B\u8EB2\u6735\u8DFA\u8235\u5241\u60F0\u5815\u86FE\u5CE8\u9E45\u4FC4\u989D\u8BB9\u5A25\u6076\u5384\u627C\u904F\u9102\u997F\u6069\u800C\u513F\u8033\u5C14\u9975\u6D31\u4E8C\uFFFD".split("");
        for (j3 = 0; j3 != D5[182].length; ++j3)
          if (D5[182][j3].charCodeAt(0) !== 65533) {
            e7[D5[182][j3]] = 46592 + j3;
            d2[46592 + j3] = D5[182][j3];
          }
        D5[183] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u7A1D\u7A1F\u7A21\u7A22\u7A24\u7A25\u7A26\u7A27\u7A28\u7A29\u7A2A\u7A2B\u7A2C\u7A2D\u7A2E\u7A2F\u7A30\u7A31\u7A32\u7A34\u7A35\u7A36\u7A38\u7A3A\u7A3E\u7A40\u7A41\u7A42\u7A43\u7A44\u7A45\u7A47\u7A48\u7A49\u7A4A\u7A4B\u7A4C\u7A4D\u7A4E\u7A4F\u7A50\u7A52\u7A53\u7A54\u7A55\u7A56\u7A58\u7A59\u7A5A\u7A5B\u7A5C\u7A5D\u7A5E\u7A5F\u7A60\u7A61\u7A62\u7A63\u7A64\u7A65\u7A66\u7A67\u7A68\uFFFD\u7A69\u7A6A\u7A6B\u7A6C\u7A6D\u7A6E\u7A6F\u7A71\u7A72\u7A73\u7A75\u7A7B\u7A7C\u7A7D\u7A7E\u7A82\u7A85\u7A87\u7A89\u7A8A\u7A8B\u7A8C\u7A8E\u7A8F\u7A90\u7A93\u7A94\u7A99\u7A9A\u7A9B\u7A9E\u7AA1\u7AA2\u8D30\u53D1\u7F5A\u7B4F\u4F10\u4E4F\u9600\u6CD5\u73D0\u85E9\u5E06\u756A\u7FFB\u6A0A\u77FE\u9492\u7E41\u51E1\u70E6\u53CD\u8FD4\u8303\u8D29\u72AF\u996D\u6CDB\u574A\u82B3\u65B9\u80AA\u623F\u9632\u59A8\u4EFF\u8BBF\u7EBA\u653E\u83F2\u975E\u5561\u98DE\u80A5\u532A\u8BFD\u5420\u80BA\u5E9F\u6CB8\u8D39\u82AC\u915A\u5429\u6C1B\u5206\u7EB7\u575F\u711A\u6C7E\u7C89\u594B\u4EFD\u5FFF\u6124\u7CAA\u4E30\u5C01\u67AB\u8702\u5CF0\u950B\u98CE\u75AF\u70FD\u9022\u51AF\u7F1D\u8BBD\u5949\u51E4\u4F5B\u5426\u592B\u6577\u80A4\u5B75\u6276\u62C2\u8F90\u5E45\u6C1F\u7B26\u4F0F\u4FD8\u670D\uFFFD".split("");
        for (j3 = 0; j3 != D5[183].length; ++j3)
          if (D5[183][j3].charCodeAt(0) !== 65533) {
            e7[D5[183][j3]] = 46848 + j3;
            d2[46848 + j3] = D5[183][j3];
          }
        D5[184] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u7AA3\u7AA4\u7AA7\u7AA9\u7AAA\u7AAB\u7AAE\u7AAF\u7AB0\u7AB1\u7AB2\u7AB4\u7AB5\u7AB6\u7AB7\u7AB8\u7AB9\u7ABA\u7ABB\u7ABC\u7ABD\u7ABE\u7AC0\u7AC1\u7AC2\u7AC3\u7AC4\u7AC5\u7AC6\u7AC7\u7AC8\u7AC9\u7ACA\u7ACC\u7ACD\u7ACE\u7ACF\u7AD0\u7AD1\u7AD2\u7AD3\u7AD4\u7AD5\u7AD7\u7AD8\u7ADA\u7ADB\u7ADC\u7ADD\u7AE1\u7AE2\u7AE4\u7AE7\u7AE8\u7AE9\u7AEA\u7AEB\u7AEC\u7AEE\u7AF0\u7AF1\u7AF2\u7AF3\uFFFD\u7AF4\u7AF5\u7AF6\u7AF7\u7AF8\u7AFB\u7AFC\u7AFE\u7B00\u7B01\u7B02\u7B05\u7B07\u7B09\u7B0C\u7B0D\u7B0E\u7B10\u7B12\u7B13\u7B16\u7B17\u7B18\u7B1A\u7B1C\u7B1D\u7B1F\u7B21\u7B22\u7B23\u7B27\u7B29\u7B2D\u6D6E\u6DAA\u798F\u88B1\u5F17\u752B\u629A\u8F85\u4FEF\u91DC\u65A7\u812F\u8151\u5E9C\u8150\u8D74\u526F\u8986\u8D4B\u590D\u5085\u4ED8\u961C\u7236\u8179\u8D1F\u5BCC\u8BA3\u9644\u5987\u7F1A\u5490\u5676\u560E\u8BE5\u6539\u6982\u9499\u76D6\u6E89\u5E72\u7518\u6746\u67D1\u7AFF\u809D\u8D76\u611F\u79C6\u6562\u8D63\u5188\u521A\u94A2\u7F38\u809B\u7EB2\u5C97\u6E2F\u6760\u7BD9\u768B\u9AD8\u818F\u7F94\u7CD5\u641E\u9550\u7A3F\u544A\u54E5\u6B4C\u6401\u6208\u9E3D\u80F3\u7599\u5272\u9769\u845B\u683C\u86E4\u9601\u9694\u94EC\u4E2A\u5404\u7ED9\u6839\u8DDF\u8015\u66F4\u5E9A\u7FB9\uFFFD".split("");
        for (j3 = 0; j3 != D5[184].length; ++j3)
          if (D5[184][j3].charCodeAt(0) !== 65533) {
            e7[D5[184][j3]] = 47104 + j3;
            d2[47104 + j3] = D5[184][j3];
          }
        D5[185] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u7B2F\u7B30\u7B32\u7B34\u7B35\u7B36\u7B37\u7B39\u7B3B\u7B3D\u7B3F\u7B40\u7B41\u7B42\u7B43\u7B44\u7B46\u7B48\u7B4A\u7B4D\u7B4E\u7B53\u7B55\u7B57\u7B59\u7B5C\u7B5E\u7B5F\u7B61\u7B63\u7B64\u7B65\u7B66\u7B67\u7B68\u7B69\u7B6A\u7B6B\u7B6C\u7B6D\u7B6F\u7B70\u7B73\u7B74\u7B76\u7B78\u7B7A\u7B7C\u7B7D\u7B7F\u7B81\u7B82\u7B83\u7B84\u7B86\u7B87\u7B88\u7B89\u7B8A\u7B8B\u7B8C\u7B8E\u7B8F\uFFFD\u7B91\u7B92\u7B93\u7B96\u7B98\u7B99\u7B9A\u7B9B\u7B9E\u7B9F\u7BA0\u7BA3\u7BA4\u7BA5\u7BAE\u7BAF\u7BB0\u7BB2\u7BB3\u7BB5\u7BB6\u7BB7\u7BB9\u7BBA\u7BBB\u7BBC\u7BBD\u7BBE\u7BBF\u7BC0\u7BC2\u7BC3\u7BC4\u57C2\u803F\u6897\u5DE5\u653B\u529F\u606D\u9F9A\u4F9B\u8EAC\u516C\u5BAB\u5F13\u5DE9\u6C5E\u62F1\u8D21\u5171\u94A9\u52FE\u6C9F\u82DF\u72D7\u57A2\u6784\u8D2D\u591F\u8F9C\u83C7\u5495\u7B8D\u4F30\u6CBD\u5B64\u59D1\u9F13\u53E4\u86CA\u9AA8\u8C37\u80A1\u6545\u987E\u56FA\u96C7\u522E\u74DC\u5250\u5BE1\u6302\u8902\u4E56\u62D0\u602A\u68FA\u5173\u5B98\u51A0\u89C2\u7BA1\u9986\u7F50\u60EF\u704C\u8D2F\u5149\u5E7F\u901B\u7470\u89C4\u572D\u7845\u5F52\u9F9F\u95FA\u8F68\u9B3C\u8BE1\u7678\u6842\u67DC\u8DEA\u8D35\u523D\u8F8A\u6EDA\u68CD\u9505\u90ED\u56FD\u679C\u88F9\u8FC7\u54C8\uFFFD".split("");
        for (j3 = 0; j3 != D5[185].length; ++j3)
          if (D5[185][j3].charCodeAt(0) !== 65533) {
            e7[D5[185][j3]] = 47360 + j3;
            d2[47360 + j3] = D5[185][j3];
          }
        D5[186] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u7BC5\u7BC8\u7BC9\u7BCA\u7BCB\u7BCD\u7BCE\u7BCF\u7BD0\u7BD2\u7BD4\u7BD5\u7BD6\u7BD7\u7BD8\u7BDB\u7BDC\u7BDE\u7BDF\u7BE0\u7BE2\u7BE3\u7BE4\u7BE7\u7BE8\u7BE9\u7BEB\u7BEC\u7BED\u7BEF\u7BF0\u7BF2\u7BF3\u7BF4\u7BF5\u7BF6\u7BF8\u7BF9\u7BFA\u7BFB\u7BFD\u7BFF\u7C00\u7C01\u7C02\u7C03\u7C04\u7C05\u7C06\u7C08\u7C09\u7C0A\u7C0D\u7C0E\u7C10\u7C11\u7C12\u7C13\u7C14\u7C15\u7C17\u7C18\u7C19\uFFFD\u7C1A\u7C1B\u7C1C\u7C1D\u7C1E\u7C20\u7C21\u7C22\u7C23\u7C24\u7C25\u7C28\u7C29\u7C2B\u7C2C\u7C2D\u7C2E\u7C2F\u7C30\u7C31\u7C32\u7C33\u7C34\u7C35\u7C36\u7C37\u7C39\u7C3A\u7C3B\u7C3C\u7C3D\u7C3E\u7C42\u9AB8\u5B69\u6D77\u6C26\u4EA5\u5BB3\u9A87\u9163\u61A8\u90AF\u97E9\u542B\u6DB5\u5BD2\u51FD\u558A\u7F55\u7FF0\u64BC\u634D\u65F1\u61BE\u608D\u710A\u6C57\u6C49\u592F\u676D\u822A\u58D5\u568E\u8C6A\u6BEB\u90DD\u597D\u8017\u53F7\u6D69\u5475\u559D\u8377\u83CF\u6838\u79BE\u548C\u4F55\u5408\u76D2\u8C89\u9602\u6CB3\u6DB8\u8D6B\u8910\u9E64\u8D3A\u563F\u9ED1\u75D5\u5F88\u72E0\u6068\u54FC\u4EA8\u6A2A\u8861\u6052\u8F70\u54C4\u70D8\u8679\u9E3F\u6D2A\u5B8F\u5F18\u7EA2\u5589\u4FAF\u7334\u543C\u539A\u5019\u540E\u547C\u4E4E\u5FFD\u745A\u58F6\u846B\u80E1\u8774\u72D0\u7CCA\u6E56\uFFFD".split("");
        for (j3 = 0; j3 != D5[186].length; ++j3)
          if (D5[186][j3].charCodeAt(0) !== 65533) {
            e7[D5[186][j3]] = 47616 + j3;
            d2[47616 + j3] = D5[186][j3];
          }
        D5[187] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u7C43\u7C44\u7C45\u7C46\u7C47\u7C48\u7C49\u7C4A\u7C4B\u7C4C\u7C4E\u7C4F\u7C50\u7C51\u7C52\u7C53\u7C54\u7C55\u7C56\u7C57\u7C58\u7C59\u7C5A\u7C5B\u7C5C\u7C5D\u7C5E\u7C5F\u7C60\u7C61\u7C62\u7C63\u7C64\u7C65\u7C66\u7C67\u7C68\u7C69\u7C6A\u7C6B\u7C6C\u7C6D\u7C6E\u7C6F\u7C70\u7C71\u7C72\u7C75\u7C76\u7C77\u7C78\u7C79\u7C7A\u7C7E\u7C7F\u7C80\u7C81\u7C82\u7C83\u7C84\u7C85\u7C86\u7C87\uFFFD\u7C88\u7C8A\u7C8B\u7C8C\u7C8D\u7C8E\u7C8F\u7C90\u7C93\u7C94\u7C96\u7C99\u7C9A\u7C9B\u7CA0\u7CA1\u7CA3\u7CA6\u7CA7\u7CA8\u7CA9\u7CAB\u7CAC\u7CAD\u7CAF\u7CB0\u7CB4\u7CB5\u7CB6\u7CB7\u7CB8\u7CBA\u7CBB\u5F27\u864E\u552C\u62A4\u4E92\u6CAA\u6237\u82B1\u54D7\u534E\u733E\u6ED1\u753B\u5212\u5316\u8BDD\u69D0\u5F8A\u6000\u6DEE\u574F\u6B22\u73AF\u6853\u8FD8\u7F13\u6362\u60A3\u5524\u75EA\u8C62\u7115\u6DA3\u5BA6\u5E7B\u8352\u614C\u9EC4\u78FA\u8757\u7C27\u7687\u51F0\u60F6\u714C\u6643\u5E4C\u604D\u8C0E\u7070\u6325\u8F89\u5FBD\u6062\u86D4\u56DE\u6BC1\u6094\u6167\u5349\u60E0\u6666\u8D3F\u79FD\u4F1A\u70E9\u6C47\u8BB3\u8BF2\u7ED8\u8364\u660F\u5A5A\u9B42\u6D51\u6DF7\u8C41\u6D3B\u4F19\u706B\u83B7\u6216\u60D1\u970D\u8D27\u7978\u51FB\u573E\u57FA\u673A\u7578\u7A3D\u79EF\u7B95\uFFFD".split("");
        for (j3 = 0; j3 != D5[187].length; ++j3)
          if (D5[187][j3].charCodeAt(0) !== 65533) {
            e7[D5[187][j3]] = 47872 + j3;
            d2[47872 + j3] = D5[187][j3];
          }
        D5[188] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u7CBF\u7CC0\u7CC2\u7CC3\u7CC4\u7CC6\u7CC9\u7CCB\u7CCE\u7CCF\u7CD0\u7CD1\u7CD2\u7CD3\u7CD4\u7CD8\u7CDA\u7CDB\u7CDD\u7CDE\u7CE1\u7CE2\u7CE3\u7CE4\u7CE5\u7CE6\u7CE7\u7CE9\u7CEA\u7CEB\u7CEC\u7CED\u7CEE\u7CF0\u7CF1\u7CF2\u7CF3\u7CF4\u7CF5\u7CF6\u7CF7\u7CF9\u7CFA\u7CFC\u7CFD\u7CFE\u7CFF\u7D00\u7D01\u7D02\u7D03\u7D04\u7D05\u7D06\u7D07\u7D08\u7D09\u7D0B\u7D0C\u7D0D\u7D0E\u7D0F\u7D10\uFFFD\u7D11\u7D12\u7D13\u7D14\u7D15\u7D16\u7D17\u7D18\u7D19\u7D1A\u7D1B\u7D1C\u7D1D\u7D1E\u7D1F\u7D21\u7D23\u7D24\u7D25\u7D26\u7D28\u7D29\u7D2A\u7D2C\u7D2D\u7D2E\u7D30\u7D31\u7D32\u7D33\u7D34\u7D35\u7D36\u808C\u9965\u8FF9\u6FC0\u8BA5\u9E21\u59EC\u7EE9\u7F09\u5409\u6781\u68D8\u8F91\u7C4D\u96C6\u53CA\u6025\u75BE\u6C72\u5373\u5AC9\u7EA7\u6324\u51E0\u810A\u5DF1\u84DF\u6280\u5180\u5B63\u4F0E\u796D\u5242\u60B8\u6D4E\u5BC4\u5BC2\u8BA1\u8BB0\u65E2\u5FCC\u9645\u5993\u7EE7\u7EAA\u5609\u67B7\u5939\u4F73\u5BB6\u52A0\u835A\u988A\u8D3E\u7532\u94BE\u5047\u7A3C\u4EF7\u67B6\u9A7E\u5AC1\u6B7C\u76D1\u575A\u5C16\u7B3A\u95F4\u714E\u517C\u80A9\u8270\u5978\u7F04\u8327\u68C0\u67EC\u78B1\u7877\u62E3\u6361\u7B80\u4FED\u526A\u51CF\u8350\u69DB\u9274\u8DF5\u8D31\u89C1\u952E\u7BAD\u4EF6\uFFFD".split("");
        for (j3 = 0; j3 != D5[188].length; ++j3)
          if (D5[188][j3].charCodeAt(0) !== 65533) {
            e7[D5[188][j3]] = 48128 + j3;
            d2[48128 + j3] = D5[188][j3];
          }
        D5[189] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u7D37\u7D38\u7D39\u7D3A\u7D3B\u7D3C\u7D3D\u7D3E\u7D3F\u7D40\u7D41\u7D42\u7D43\u7D44\u7D45\u7D46\u7D47\u7D48\u7D49\u7D4A\u7D4B\u7D4C\u7D4D\u7D4E\u7D4F\u7D50\u7D51\u7D52\u7D53\u7D54\u7D55\u7D56\u7D57\u7D58\u7D59\u7D5A\u7D5B\u7D5C\u7D5D\u7D5E\u7D5F\u7D60\u7D61\u7D62\u7D63\u7D64\u7D65\u7D66\u7D67\u7D68\u7D69\u7D6A\u7D6B\u7D6C\u7D6D\u7D6F\u7D70\u7D71\u7D72\u7D73\u7D74\u7D75\u7D76\uFFFD\u7D78\u7D79\u7D7A\u7D7B\u7D7C\u7D7D\u7D7E\u7D7F\u7D80\u7D81\u7D82\u7D83\u7D84\u7D85\u7D86\u7D87\u7D88\u7D89\u7D8A\u7D8B\u7D8C\u7D8D\u7D8E\u7D8F\u7D90\u7D91\u7D92\u7D93\u7D94\u7D95\u7D96\u7D97\u7D98\u5065\u8230\u5251\u996F\u6E10\u6E85\u6DA7\u5EFA\u50F5\u59DC\u5C06\u6D46\u6C5F\u7586\u848B\u6868\u5956\u8BB2\u5320\u9171\u964D\u8549\u6912\u7901\u7126\u80F6\u4EA4\u90CA\u6D47\u9A84\u5A07\u56BC\u6405\u94F0\u77EB\u4FA5\u811A\u72E1\u89D2\u997A\u7F34\u7EDE\u527F\u6559\u9175\u8F7F\u8F83\u53EB\u7A96\u63ED\u63A5\u7686\u79F8\u8857\u9636\u622A\u52AB\u8282\u6854\u6770\u6377\u776B\u7AED\u6D01\u7ED3\u89E3\u59D0\u6212\u85C9\u82A5\u754C\u501F\u4ECB\u75A5\u8BEB\u5C4A\u5DFE\u7B4B\u65A4\u91D1\u4ECA\u6D25\u895F\u7D27\u9526\u4EC5\u8C28\u8FDB\u9773\u664B\u7981\u8FD1\u70EC\u6D78\uFFFD".split("");
        for (j3 = 0; j3 != D5[189].length; ++j3)
          if (D5[189][j3].charCodeAt(0) !== 65533) {
            e7[D5[189][j3]] = 48384 + j3;
            d2[48384 + j3] = D5[189][j3];
          }
        D5[190] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u7D99\u7D9A\u7D9B\u7D9C\u7D9D\u7D9E\u7D9F\u7DA0\u7DA1\u7DA2\u7DA3\u7DA4\u7DA5\u7DA7\u7DA8\u7DA9\u7DAA\u7DAB\u7DAC\u7DAD\u7DAF\u7DB0\u7DB1\u7DB2\u7DB3\u7DB4\u7DB5\u7DB6\u7DB7\u7DB8\u7DB9\u7DBA\u7DBB\u7DBC\u7DBD\u7DBE\u7DBF\u7DC0\u7DC1\u7DC2\u7DC3\u7DC4\u7DC5\u7DC6\u7DC7\u7DC8\u7DC9\u7DCA\u7DCB\u7DCC\u7DCD\u7DCE\u7DCF\u7DD0\u7DD1\u7DD2\u7DD3\u7DD4\u7DD5\u7DD6\u7DD7\u7DD8\u7DD9\uFFFD\u7DDA\u7DDB\u7DDC\u7DDD\u7DDE\u7DDF\u7DE0\u7DE1\u7DE2\u7DE3\u7DE4\u7DE5\u7DE6\u7DE7\u7DE8\u7DE9\u7DEA\u7DEB\u7DEC\u7DED\u7DEE\u7DEF\u7DF0\u7DF1\u7DF2\u7DF3\u7DF4\u7DF5\u7DF6\u7DF7\u7DF8\u7DF9\u7DFA\u5C3D\u52B2\u8346\u5162\u830E\u775B\u6676\u9CB8\u4EAC\u60CA\u7CBE\u7CB3\u7ECF\u4E95\u8B66\u666F\u9888\u9759\u5883\u656C\u955C\u5F84\u75C9\u9756\u7ADF\u7ADE\u51C0\u70AF\u7A98\u63EA\u7A76\u7EA0\u7396\u97ED\u4E45\u7078\u4E5D\u9152\u53A9\u6551\u65E7\u81FC\u8205\u548E\u5C31\u759A\u97A0\u62D8\u72D9\u75BD\u5C45\u9A79\u83CA\u5C40\u5480\u77E9\u4E3E\u6CAE\u805A\u62D2\u636E\u5DE8\u5177\u8DDD\u8E1E\u952F\u4FF1\u53E5\u60E7\u70AC\u5267\u6350\u9E43\u5A1F\u5026\u7737\u5377\u7EE2\u6485\u652B\u6289\u6398\u5014\u7235\u89C9\u51B3\u8BC0\u7EDD\u5747\u83CC\u94A7\u519B\u541B\u5CFB\uFFFD".split("");
        for (j3 = 0; j3 != D5[190].length; ++j3)
          if (D5[190][j3].charCodeAt(0) !== 65533) {
            e7[D5[190][j3]] = 48640 + j3;
            d2[48640 + j3] = D5[190][j3];
          }
        D5[191] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u7DFB\u7DFC\u7DFD\u7DFE\u7DFF\u7E00\u7E01\u7E02\u7E03\u7E04\u7E05\u7E06\u7E07\u7E08\u7E09\u7E0A\u7E0B\u7E0C\u7E0D\u7E0E\u7E0F\u7E10\u7E11\u7E12\u7E13\u7E14\u7E15\u7E16\u7E17\u7E18\u7E19\u7E1A\u7E1B\u7E1C\u7E1D\u7E1E\u7E1F\u7E20\u7E21\u7E22\u7E23\u7E24\u7E25\u7E26\u7E27\u7E28\u7E29\u7E2A\u7E2B\u7E2C\u7E2D\u7E2E\u7E2F\u7E30\u7E31\u7E32\u7E33\u7E34\u7E35\u7E36\u7E37\u7E38\u7E39\uFFFD\u7E3A\u7E3C\u7E3D\u7E3E\u7E3F\u7E40\u7E42\u7E43\u7E44\u7E45\u7E46\u7E48\u7E49\u7E4A\u7E4B\u7E4C\u7E4D\u7E4E\u7E4F\u7E50\u7E51\u7E52\u7E53\u7E54\u7E55\u7E56\u7E57\u7E58\u7E59\u7E5A\u7E5B\u7E5C\u7E5D\u4FCA\u7AE3\u6D5A\u90E1\u9A8F\u5580\u5496\u5361\u54AF\u5F00\u63E9\u6977\u51EF\u6168\u520A\u582A\u52D8\u574E\u780D\u770B\u5EB7\u6177\u7CE0\u625B\u6297\u4EA2\u7095\u8003\u62F7\u70E4\u9760\u5777\u82DB\u67EF\u68F5\u78D5\u9897\u79D1\u58F3\u54B3\u53EF\u6E34\u514B\u523B\u5BA2\u8BFE\u80AF\u5543\u57A6\u6073\u5751\u542D\u7A7A\u6050\u5B54\u63A7\u62A0\u53E3\u6263\u5BC7\u67AF\u54ED\u7A9F\u82E6\u9177\u5E93\u88E4\u5938\u57AE\u630E\u8DE8\u80EF\u5757\u7B77\u4FA9\u5FEB\u5BBD\u6B3E\u5321\u7B50\u72C2\u6846\u77FF\u7736\u65F7\u51B5\u4E8F\u76D4\u5CBF\u7AA5\u8475\u594E\u9B41\u5080\uFFFD".split("");
        for (j3 = 0; j3 != D5[191].length; ++j3)
          if (D5[191][j3].charCodeAt(0) !== 65533) {
            e7[D5[191][j3]] = 48896 + j3;
            d2[48896 + j3] = D5[191][j3];
          }
        D5[192] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u7E5E\u7E5F\u7E60\u7E61\u7E62\u7E63\u7E64\u7E65\u7E66\u7E67\u7E68\u7E69\u7E6A\u7E6B\u7E6C\u7E6D\u7E6E\u7E6F\u7E70\u7E71\u7E72\u7E73\u7E74\u7E75\u7E76\u7E77\u7E78\u7E79\u7E7A\u7E7B\u7E7C\u7E7D\u7E7E\u7E7F\u7E80\u7E81\u7E83\u7E84\u7E85\u7E86\u7E87\u7E88\u7E89\u7E8A\u7E8B\u7E8C\u7E8D\u7E8E\u7E8F\u7E90\u7E91\u7E92\u7E93\u7E94\u7E95\u7E96\u7E97\u7E98\u7E99\u7E9A\u7E9C\u7E9D\u7E9E\uFFFD\u7EAE\u7EB4\u7EBB\u7EBC\u7ED6\u7EE4\u7EEC\u7EF9\u7F0A\u7F10\u7F1E\u7F37\u7F39\u7F3B\u7F3C\u7F3D\u7F3E\u7F3F\u7F40\u7F41\u7F43\u7F46\u7F47\u7F48\u7F49\u7F4A\u7F4B\u7F4C\u7F4D\u7F4E\u7F4F\u7F52\u7F53\u9988\u6127\u6E83\u5764\u6606\u6346\u56F0\u62EC\u6269\u5ED3\u9614\u5783\u62C9\u5587\u8721\u814A\u8FA3\u5566\u83B1\u6765\u8D56\u84DD\u5A6A\u680F\u62E6\u7BEE\u9611\u5170\u6F9C\u8C30\u63FD\u89C8\u61D2\u7F06\u70C2\u6EE5\u7405\u6994\u72FC\u5ECA\u90CE\u6717\u6D6A\u635E\u52B3\u7262\u8001\u4F6C\u59E5\u916A\u70D9\u6D9D\u52D2\u4E50\u96F7\u956D\u857E\u78CA\u7D2F\u5121\u5792\u64C2\u808B\u7C7B\u6CEA\u68F1\u695E\u51B7\u5398\u68A8\u7281\u9ECE\u7BF1\u72F8\u79BB\u6F13\u7406\u674E\u91CC\u9CA4\u793C\u8389\u8354\u540F\u6817\u4E3D\u5389\u52B1\u783E\u5386\u5229\u5088\u4F8B\u4FD0\uFFFD".split("");
        for (j3 = 0; j3 != D5[192].length; ++j3)
          if (D5[192][j3].charCodeAt(0) !== 65533) {
            e7[D5[192][j3]] = 49152 + j3;
            d2[49152 + j3] = D5[192][j3];
          }
        D5[193] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u7F56\u7F59\u7F5B\u7F5C\u7F5D\u7F5E\u7F60\u7F63\u7F64\u7F65\u7F66\u7F67\u7F6B\u7F6C\u7F6D\u7F6F\u7F70\u7F73\u7F75\u7F76\u7F77\u7F78\u7F7A\u7F7B\u7F7C\u7F7D\u7F7F\u7F80\u7F82\u7F83\u7F84\u7F85\u7F86\u7F87\u7F88\u7F89\u7F8B\u7F8D\u7F8F\u7F90\u7F91\u7F92\u7F93\u7F95\u7F96\u7F97\u7F98\u7F99\u7F9B\u7F9C\u7FA0\u7FA2\u7FA3\u7FA5\u7FA6\u7FA8\u7FA9\u7FAA\u7FAB\u7FAC\u7FAD\u7FAE\u7FB1\uFFFD\u7FB3\u7FB4\u7FB5\u7FB6\u7FB7\u7FBA\u7FBB\u7FBE\u7FC0\u7FC2\u7FC3\u7FC4\u7FC6\u7FC7\u7FC8\u7FC9\u7FCB\u7FCD\u7FCF\u7FD0\u7FD1\u7FD2\u7FD3\u7FD6\u7FD7\u7FD9\u7FDA\u7FDB\u7FDC\u7FDD\u7FDE\u7FE2\u7FE3\u75E2\u7ACB\u7C92\u6CA5\u96B6\u529B\u7483\u54E9\u4FE9\u8054\u83B2\u8FDE\u9570\u5EC9\u601C\u6D9F\u5E18\u655B\u8138\u94FE\u604B\u70BC\u7EC3\u7CAE\u51C9\u6881\u7CB1\u826F\u4E24\u8F86\u91CF\u667E\u4EAE\u8C05\u64A9\u804A\u50DA\u7597\u71CE\u5BE5\u8FBD\u6F66\u4E86\u6482\u9563\u5ED6\u6599\u5217\u88C2\u70C8\u52A3\u730E\u7433\u6797\u78F7\u9716\u4E34\u90BB\u9CDE\u6DCB\u51DB\u8D41\u541D\u62CE\u73B2\u83F1\u96F6\u9F84\u94C3\u4F36\u7F9A\u51CC\u7075\u9675\u5CAD\u9886\u53E6\u4EE4\u6E9C\u7409\u69B4\u786B\u998F\u7559\u5218\u7624\u6D41\u67F3\u516D\u9F99\u804B\u5499\u7B3C\u7ABF\uFFFD".split("");
        for (j3 = 0; j3 != D5[193].length; ++j3)
          if (D5[193][j3].charCodeAt(0) !== 65533) {
            e7[D5[193][j3]] = 49408 + j3;
            d2[49408 + j3] = D5[193][j3];
          }
        D5[194] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u7FE4\u7FE7\u7FE8\u7FEA\u7FEB\u7FEC\u7FED\u7FEF\u7FF2\u7FF4\u7FF5\u7FF6\u7FF7\u7FF8\u7FF9\u7FFA\u7FFD\u7FFE\u7FFF\u8002\u8007\u8008\u8009\u800A\u800E\u800F\u8011\u8013\u801A\u801B\u801D\u801E\u801F\u8021\u8023\u8024\u802B\u802C\u802D\u802E\u802F\u8030\u8032\u8034\u8039\u803A\u803C\u803E\u8040\u8041\u8044\u8045\u8047\u8048\u8049\u804E\u804F\u8050\u8051\u8053\u8055\u8056\u8057\uFFFD\u8059\u805B\u805C\u805D\u805E\u805F\u8060\u8061\u8062\u8063\u8064\u8065\u8066\u8067\u8068\u806B\u806C\u806D\u806E\u806F\u8070\u8072\u8073\u8074\u8075\u8076\u8077\u8078\u8079\u807A\u807B\u807C\u807D\u9686\u5784\u62E2\u9647\u697C\u5A04\u6402\u7BD3\u6F0F\u964B\u82A6\u5362\u9885\u5E90\u7089\u63B3\u5364\u864F\u9C81\u9E93\u788C\u9732\u8DEF\u8D42\u9E7F\u6F5E\u7984\u5F55\u9646\u622E\u9A74\u5415\u94DD\u4FA3\u65C5\u5C65\u5C61\u7F15\u8651\u6C2F\u5F8B\u7387\u6EE4\u7EFF\u5CE6\u631B\u5B6A\u6EE6\u5375\u4E71\u63A0\u7565\u62A1\u8F6E\u4F26\u4ED1\u6CA6\u7EB6\u8BBA\u841D\u87BA\u7F57\u903B\u9523\u7BA9\u9AA1\u88F8\u843D\u6D1B\u9A86\u7EDC\u5988\u9EBB\u739B\u7801\u8682\u9A6C\u9A82\u561B\u5417\u57CB\u4E70\u9EA6\u5356\u8FC8\u8109\u7792\u9992\u86EE\u6EE1\u8513\u66FC\u6162\u6F2B\uFFFD".split("");
        for (j3 = 0; j3 != D5[194].length; ++j3)
          if (D5[194][j3].charCodeAt(0) !== 65533) {
            e7[D5[194][j3]] = 49664 + j3;
            d2[49664 + j3] = D5[194][j3];
          }
        D5[195] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u807E\u8081\u8082\u8085\u8088\u808A\u808D\u808E\u808F\u8090\u8091\u8092\u8094\u8095\u8097\u8099\u809E\u80A3\u80A6\u80A7\u80A8\u80AC\u80B0\u80B3\u80B5\u80B6\u80B8\u80B9\u80BB\u80C5\u80C7\u80C8\u80C9\u80CA\u80CB\u80CF\u80D0\u80D1\u80D2\u80D3\u80D4\u80D5\u80D8\u80DF\u80E0\u80E2\u80E3\u80E6\u80EE\u80F5\u80F7\u80F9\u80FB\u80FE\u80FF\u8100\u8101\u8103\u8104\u8105\u8107\u8108\u810B\uFFFD\u810C\u8115\u8117\u8119\u811B\u811C\u811D\u811F\u8120\u8121\u8122\u8123\u8124\u8125\u8126\u8127\u8128\u8129\u812A\u812B\u812D\u812E\u8130\u8133\u8134\u8135\u8137\u8139\u813A\u813B\u813C\u813D\u813F\u8C29\u8292\u832B\u76F2\u6C13\u5FD9\u83BD\u732B\u8305\u951A\u6BDB\u77DB\u94C6\u536F\u8302\u5192\u5E3D\u8C8C\u8D38\u4E48\u73AB\u679A\u6885\u9176\u9709\u7164\u6CA1\u7709\u5A92\u9541\u6BCF\u7F8E\u6627\u5BD0\u59B9\u5A9A\u95E8\u95F7\u4EEC\u840C\u8499\u6AAC\u76DF\u9530\u731B\u68A6\u5B5F\u772F\u919A\u9761\u7CDC\u8FF7\u8C1C\u5F25\u7C73\u79D8\u89C5\u6CCC\u871C\u5BC6\u5E42\u68C9\u7720\u7EF5\u5195\u514D\u52C9\u5A29\u7F05\u9762\u82D7\u63CF\u7784\u85D0\u79D2\u6E3A\u5E99\u5999\u8511\u706D\u6C11\u62BF\u76BF\u654F\u60AF\u95FD\u660E\u879F\u9E23\u94ED\u540D\u547D\u8C2C\u6478\uFFFD".split("");
        for (j3 = 0; j3 != D5[195].length; ++j3)
          if (D5[195][j3].charCodeAt(0) !== 65533) {
            e7[D5[195][j3]] = 49920 + j3;
            d2[49920 + j3] = D5[195][j3];
          }
        D5[196] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u8140\u8141\u8142\u8143\u8144\u8145\u8147\u8149\u814D\u814E\u814F\u8152\u8156\u8157\u8158\u815B\u815C\u815D\u815E\u815F\u8161\u8162\u8163\u8164\u8166\u8168\u816A\u816B\u816C\u816F\u8172\u8173\u8175\u8176\u8177\u8178\u8181\u8183\u8184\u8185\u8186\u8187\u8189\u818B\u818C\u818D\u818E\u8190\u8192\u8193\u8194\u8195\u8196\u8197\u8199\u819A\u819E\u819F\u81A0\u81A1\u81A2\u81A4\u81A5\uFFFD\u81A7\u81A9\u81AB\u81AC\u81AD\u81AE\u81AF\u81B0\u81B1\u81B2\u81B4\u81B5\u81B6\u81B7\u81B8\u81B9\u81BC\u81BD\u81BE\u81BF\u81C4\u81C5\u81C7\u81C8\u81C9\u81CB\u81CD\u81CE\u81CF\u81D0\u81D1\u81D2\u81D3\u6479\u8611\u6A21\u819C\u78E8\u6469\u9B54\u62B9\u672B\u83AB\u58A8\u9ED8\u6CAB\u6F20\u5BDE\u964C\u8C0B\u725F\u67D0\u62C7\u7261\u4EA9\u59C6\u6BCD\u5893\u66AE\u5E55\u52DF\u6155\u6728\u76EE\u7766\u7267\u7A46\u62FF\u54EA\u5450\u94A0\u90A3\u5A1C\u7EB3\u6C16\u4E43\u5976\u8010\u5948\u5357\u7537\u96BE\u56CA\u6320\u8111\u607C\u95F9\u6DD6\u5462\u9981\u5185\u5AE9\u80FD\u59AE\u9713\u502A\u6CE5\u5C3C\u62DF\u4F60\u533F\u817B\u9006\u6EBA\u852B\u62C8\u5E74\u78BE\u64B5\u637B\u5FF5\u5A18\u917F\u9E1F\u5C3F\u634F\u8042\u5B7D\u556E\u954A\u954D\u6D85\u60A8\u67E0\u72DE\u51DD\u5B81\uFFFD".split("");
        for (j3 = 0; j3 != D5[196].length; ++j3)
          if (D5[196][j3].charCodeAt(0) !== 65533) {
            e7[D5[196][j3]] = 50176 + j3;
            d2[50176 + j3] = D5[196][j3];
          }
        D5[197] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u81D4\u81D5\u81D6\u81D7\u81D8\u81D9\u81DA\u81DB\u81DC\u81DD\u81DE\u81DF\u81E0\u81E1\u81E2\u81E4\u81E5\u81E6\u81E8\u81E9\u81EB\u81EE\u81EF\u81F0\u81F1\u81F2\u81F5\u81F6\u81F7\u81F8\u81F9\u81FA\u81FD\u81FF\u8203\u8207\u8208\u8209\u820A\u820B\u820E\u820F\u8211\u8213\u8215\u8216\u8217\u8218\u8219\u821A\u821D\u8220\u8224\u8225\u8226\u8227\u8229\u822E\u8232\u823A\u823C\u823D\u823F\uFFFD\u8240\u8241\u8242\u8243\u8245\u8246\u8248\u824A\u824C\u824D\u824E\u8250\u8251\u8252\u8253\u8254\u8255\u8256\u8257\u8259\u825B\u825C\u825D\u825E\u8260\u8261\u8262\u8263\u8264\u8265\u8266\u8267\u8269\u62E7\u6CDE\u725B\u626D\u94AE\u7EBD\u8113\u6D53\u519C\u5F04\u5974\u52AA\u6012\u5973\u6696\u8650\u759F\u632A\u61E6\u7CEF\u8BFA\u54E6\u6B27\u9E25\u6BB4\u85D5\u5455\u5076\u6CA4\u556A\u8DB4\u722C\u5E15\u6015\u7436\u62CD\u6392\u724C\u5F98\u6E43\u6D3E\u6500\u6F58\u76D8\u78D0\u76FC\u7554\u5224\u53DB\u4E53\u5E9E\u65C1\u802A\u80D6\u629B\u5486\u5228\u70AE\u888D\u8DD1\u6CE1\u5478\u80DA\u57F9\u88F4\u8D54\u966A\u914D\u4F69\u6C9B\u55B7\u76C6\u7830\u62A8\u70F9\u6F8E\u5F6D\u84EC\u68DA\u787C\u7BF7\u81A8\u670B\u9E4F\u6367\u78B0\u576F\u7812\u9739\u6279\u62AB\u5288\u7435\u6BD7\uFFFD".split("");
        for (j3 = 0; j3 != D5[197].length; ++j3)
          if (D5[197][j3].charCodeAt(0) !== 65533) {
            e7[D5[197][j3]] = 50432 + j3;
            d2[50432 + j3] = D5[197][j3];
          }
        D5[198] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u826A\u826B\u826C\u826D\u8271\u8275\u8276\u8277\u8278\u827B\u827C\u8280\u8281\u8283\u8285\u8286\u8287\u8289\u828C\u8290\u8293\u8294\u8295\u8296\u829A\u829B\u829E\u82A0\u82A2\u82A3\u82A7\u82B2\u82B5\u82B6\u82BA\u82BB\u82BC\u82BF\u82C0\u82C2\u82C3\u82C5\u82C6\u82C9\u82D0\u82D6\u82D9\u82DA\u82DD\u82E2\u82E7\u82E8\u82E9\u82EA\u82EC\u82ED\u82EE\u82F0\u82F2\u82F3\u82F5\u82F6\u82F8\uFFFD\u82FA\u82FC\u82FD\u82FE\u82FF\u8300\u830A\u830B\u830D\u8310\u8312\u8313\u8316\u8318\u8319\u831D\u831E\u831F\u8320\u8321\u8322\u8323\u8324\u8325\u8326\u8329\u832A\u832E\u8330\u8332\u8337\u833B\u833D\u5564\u813E\u75B2\u76AE\u5339\u75DE\u50FB\u5C41\u8B6C\u7BC7\u504F\u7247\u9A97\u98D8\u6F02\u74E2\u7968\u6487\u77A5\u62FC\u9891\u8D2B\u54C1\u8058\u4E52\u576A\u82F9\u840D\u5E73\u51ED\u74F6\u8BC4\u5C4F\u5761\u6CFC\u9887\u5A46\u7834\u9B44\u8FEB\u7C95\u5256\u6251\u94FA\u4EC6\u8386\u8461\u83E9\u84B2\u57D4\u6734\u5703\u666E\u6D66\u8C31\u66DD\u7011\u671F\u6B3A\u6816\u621A\u59BB\u4E03\u51C4\u6F06\u67D2\u6C8F\u5176\u68CB\u5947\u6B67\u7566\u5D0E\u8110\u9F50\u65D7\u7948\u7941\u9A91\u8D77\u5C82\u4E5E\u4F01\u542F\u5951\u780C\u5668\u6C14\u8FC4\u5F03\u6C7D\u6CE3\u8BAB\u6390\uFFFD".split("");
        for (j3 = 0; j3 != D5[198].length; ++j3)
          if (D5[198][j3].charCodeAt(0) !== 65533) {
            e7[D5[198][j3]] = 50688 + j3;
            d2[50688 + j3] = D5[198][j3];
          }
        D5[199] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u833E\u833F\u8341\u8342\u8344\u8345\u8348\u834A\u834B\u834C\u834D\u834E\u8353\u8355\u8356\u8357\u8358\u8359\u835D\u8362\u8370\u8371\u8372\u8373\u8374\u8375\u8376\u8379\u837A\u837E\u837F\u8380\u8381\u8382\u8383\u8384\u8387\u8388\u838A\u838B\u838C\u838D\u838F\u8390\u8391\u8394\u8395\u8396\u8397\u8399\u839A\u839D\u839F\u83A1\u83A2\u83A3\u83A4\u83A5\u83A6\u83A7\u83AC\u83AD\u83AE\uFFFD\u83AF\u83B5\u83BB\u83BE\u83BF\u83C2\u83C3\u83C4\u83C6\u83C8\u83C9\u83CB\u83CD\u83CE\u83D0\u83D1\u83D2\u83D3\u83D5\u83D7\u83D9\u83DA\u83DB\u83DE\u83E2\u83E3\u83E4\u83E6\u83E7\u83E8\u83EB\u83EC\u83ED\u6070\u6D3D\u7275\u6266\u948E\u94C5\u5343\u8FC1\u7B7E\u4EDF\u8C26\u4E7E\u9ED4\u94B1\u94B3\u524D\u6F5C\u9063\u6D45\u8C34\u5811\u5D4C\u6B20\u6B49\u67AA\u545B\u8154\u7F8C\u5899\u8537\u5F3A\u62A2\u6A47\u9539\u6572\u6084\u6865\u77A7\u4E54\u4FA8\u5DE7\u9798\u64AC\u7FD8\u5CED\u4FCF\u7A8D\u5207\u8304\u4E14\u602F\u7A83\u94A6\u4FB5\u4EB2\u79E6\u7434\u52E4\u82B9\u64D2\u79BD\u5BDD\u6C81\u9752\u8F7B\u6C22\u503E\u537F\u6E05\u64CE\u6674\u6C30\u60C5\u9877\u8BF7\u5E86\u743C\u7A77\u79CB\u4E18\u90B1\u7403\u6C42\u56DA\u914B\u6CC5\u8D8B\u533A\u86C6\u66F2\u8EAF\u5C48\u9A71\u6E20\uFFFD".split("");
        for (j3 = 0; j3 != D5[199].length; ++j3)
          if (D5[199][j3].charCodeAt(0) !== 65533) {
            e7[D5[199][j3]] = 50944 + j3;
            d2[50944 + j3] = D5[199][j3];
          }
        D5[200] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u83EE\u83EF\u83F3\u83F4\u83F5\u83F6\u83F7\u83FA\u83FB\u83FC\u83FE\u83FF\u8400\u8402\u8405\u8407\u8408\u8409\u840A\u8410\u8412\u8413\u8414\u8415\u8416\u8417\u8419\u841A\u841B\u841E\u841F\u8420\u8421\u8422\u8423\u8429\u842A\u842B\u842C\u842D\u842E\u842F\u8430\u8432\u8433\u8434\u8435\u8436\u8437\u8439\u843A\u843B\u843E\u843F\u8440\u8441\u8442\u8443\u8444\u8445\u8447\u8448\u8449\uFFFD\u844A\u844B\u844C\u844D\u844E\u844F\u8450\u8452\u8453\u8454\u8455\u8456\u8458\u845D\u845E\u845F\u8460\u8462\u8464\u8465\u8466\u8467\u8468\u846A\u846E\u846F\u8470\u8472\u8474\u8477\u8479\u847B\u847C\u53D6\u5A36\u9F8B\u8DA3\u53BB\u5708\u98A7\u6743\u919B\u6CC9\u5168\u75CA\u62F3\u72AC\u5238\u529D\u7F3A\u7094\u7638\u5374\u9E4A\u69B7\u786E\u96C0\u88D9\u7FA4\u7136\u71C3\u5189\u67D3\u74E4\u58E4\u6518\u56B7\u8BA9\u9976\u6270\u7ED5\u60F9\u70ED\u58EC\u4EC1\u4EBA\u5FCD\u97E7\u4EFB\u8BA4\u5203\u598A\u7EAB\u6254\u4ECD\u65E5\u620E\u8338\u84C9\u8363\u878D\u7194\u6EB6\u5BB9\u7ED2\u5197\u63C9\u67D4\u8089\u8339\u8815\u5112\u5B7A\u5982\u8FB1\u4E73\u6C5D\u5165\u8925\u8F6F\u962E\u854A\u745E\u9510\u95F0\u6DA6\u82E5\u5F31\u6492\u6D12\u8428\u816E\u9CC3\u585E\u8D5B\u4E09\u53C1\uFFFD".split("");
        for (j3 = 0; j3 != D5[200].length; ++j3)
          if (D5[200][j3].charCodeAt(0) !== 65533) {
            e7[D5[200][j3]] = 51200 + j3;
            d2[51200 + j3] = D5[200][j3];
          }
        D5[201] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u847D\u847E\u847F\u8480\u8481\u8483\u8484\u8485\u8486\u848A\u848D\u848F\u8490\u8491\u8492\u8493\u8494\u8495\u8496\u8498\u849A\u849B\u849D\u849E\u849F\u84A0\u84A2\u84A3\u84A4\u84A5\u84A6\u84A7\u84A8\u84A9\u84AA\u84AB\u84AC\u84AD\u84AE\u84B0\u84B1\u84B3\u84B5\u84B6\u84B7\u84BB\u84BC\u84BE\u84C0\u84C2\u84C3\u84C5\u84C6\u84C7\u84C8\u84CB\u84CC\u84CE\u84CF\u84D2\u84D4\u84D5\u84D7\uFFFD\u84D8\u84D9\u84DA\u84DB\u84DC\u84DE\u84E1\u84E2\u84E4\u84E7\u84E8\u84E9\u84EA\u84EB\u84ED\u84EE\u84EF\u84F1\u84F2\u84F3\u84F4\u84F5\u84F6\u84F7\u84F8\u84F9\u84FA\u84FB\u84FD\u84FE\u8500\u8501\u8502\u4F1E\u6563\u6851\u55D3\u4E27\u6414\u9A9A\u626B\u5AC2\u745F\u8272\u6DA9\u68EE\u50E7\u838E\u7802\u6740\u5239\u6C99\u7EB1\u50BB\u5565\u715E\u7B5B\u6652\u73CA\u82EB\u6749\u5C71\u5220\u717D\u886B\u95EA\u9655\u64C5\u8D61\u81B3\u5584\u6C55\u6247\u7F2E\u5892\u4F24\u5546\u8D4F\u664C\u4E0A\u5C1A\u88F3\u68A2\u634E\u7A0D\u70E7\u828D\u52FA\u97F6\u5C11\u54E8\u90B5\u7ECD\u5962\u8D4A\u86C7\u820C\u820D\u8D66\u6444\u5C04\u6151\u6D89\u793E\u8BBE\u7837\u7533\u547B\u4F38\u8EAB\u6DF1\u5A20\u7EC5\u795E\u6C88\u5BA1\u5A76\u751A\u80BE\u614E\u6E17\u58F0\u751F\u7525\u7272\u5347\u7EF3\uFFFD".split("");
        for (j3 = 0; j3 != D5[201].length; ++j3)
          if (D5[201][j3].charCodeAt(0) !== 65533) {
            e7[D5[201][j3]] = 51456 + j3;
            d2[51456 + j3] = D5[201][j3];
          }
        D5[202] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u8503\u8504\u8505\u8506\u8507\u8508\u8509\u850A\u850B\u850D\u850E\u850F\u8510\u8512\u8514\u8515\u8516\u8518\u8519\u851B\u851C\u851D\u851E\u8520\u8522\u8523\u8524\u8525\u8526\u8527\u8528\u8529\u852A\u852D\u852E\u852F\u8530\u8531\u8532\u8533\u8534\u8535\u8536\u853E\u853F\u8540\u8541\u8542\u8544\u8545\u8546\u8547\u854B\u854C\u854D\u854E\u854F\u8550\u8551\u8552\u8553\u8554\u8555\uFFFD\u8557\u8558\u855A\u855B\u855C\u855D\u855F\u8560\u8561\u8562\u8563\u8565\u8566\u8567\u8569\u856A\u856B\u856C\u856D\u856E\u856F\u8570\u8571\u8573\u8575\u8576\u8577\u8578\u857C\u857D\u857F\u8580\u8581\u7701\u76DB\u5269\u80DC\u5723\u5E08\u5931\u72EE\u65BD\u6E7F\u8BD7\u5C38\u8671\u5341\u77F3\u62FE\u65F6\u4EC0\u98DF\u8680\u5B9E\u8BC6\u53F2\u77E2\u4F7F\u5C4E\u9A76\u59CB\u5F0F\u793A\u58EB\u4E16\u67FF\u4E8B\u62ED\u8A93\u901D\u52BF\u662F\u55DC\u566C\u9002\u4ED5\u4F8D\u91CA\u9970\u6C0F\u5E02\u6043\u5BA4\u89C6\u8BD5\u6536\u624B\u9996\u5B88\u5BFF\u6388\u552E\u53D7\u7626\u517D\u852C\u67A2\u68B3\u6B8A\u6292\u8F93\u53D4\u8212\u6DD1\u758F\u4E66\u8D4E\u5B70\u719F\u85AF\u6691\u66D9\u7F72\u8700\u9ECD\u9F20\u5C5E\u672F\u8FF0\u6811\u675F\u620D\u7AD6\u5885\u5EB6\u6570\u6F31\uFFFD".split("");
        for (j3 = 0; j3 != D5[202].length; ++j3)
          if (D5[202][j3].charCodeAt(0) !== 65533) {
            e7[D5[202][j3]] = 51712 + j3;
            d2[51712 + j3] = D5[202][j3];
          }
        D5[203] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u8582\u8583\u8586\u8588\u8589\u858A\u858B\u858C\u858D\u858E\u8590\u8591\u8592\u8593\u8594\u8595\u8596\u8597\u8598\u8599\u859A\u859D\u859E\u859F\u85A0\u85A1\u85A2\u85A3\u85A5\u85A6\u85A7\u85A9\u85AB\u85AC\u85AD\u85B1\u85B2\u85B3\u85B4\u85B5\u85B6\u85B8\u85BA\u85BB\u85BC\u85BD\u85BE\u85BF\u85C0\u85C2\u85C3\u85C4\u85C5\u85C6\u85C7\u85C8\u85CA\u85CB\u85CC\u85CD\u85CE\u85D1\u85D2\uFFFD\u85D4\u85D6\u85D7\u85D8\u85D9\u85DA\u85DB\u85DD\u85DE\u85DF\u85E0\u85E1\u85E2\u85E3\u85E5\u85E6\u85E7\u85E8\u85EA\u85EB\u85EC\u85ED\u85EE\u85EF\u85F0\u85F1\u85F2\u85F3\u85F4\u85F5\u85F6\u85F7\u85F8\u6055\u5237\u800D\u6454\u8870\u7529\u5E05\u6813\u62F4\u971C\u53CC\u723D\u8C01\u6C34\u7761\u7A0E\u542E\u77AC\u987A\u821C\u8BF4\u7855\u6714\u70C1\u65AF\u6495\u5636\u601D\u79C1\u53F8\u4E1D\u6B7B\u8086\u5BFA\u55E3\u56DB\u4F3A\u4F3C\u9972\u5DF3\u677E\u8038\u6002\u9882\u9001\u5B8B\u8BBC\u8BF5\u641C\u8258\u64DE\u55FD\u82CF\u9165\u4FD7\u7D20\u901F\u7C9F\u50F3\u5851\u6EAF\u5BBF\u8BC9\u8083\u9178\u849C\u7B97\u867D\u968B\u968F\u7EE5\u9AD3\u788E\u5C81\u7A57\u9042\u96A7\u795F\u5B59\u635F\u7B0B\u84D1\u68AD\u5506\u7F29\u7410\u7D22\u9501\u6240\u584C\u4ED6\u5B83\u5979\u5854\uFFFD".split("");
        for (j3 = 0; j3 != D5[203].length; ++j3)
          if (D5[203][j3].charCodeAt(0) !== 65533) {
            e7[D5[203][j3]] = 51968 + j3;
            d2[51968 + j3] = D5[203][j3];
          }
        D5[204] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u85F9\u85FA\u85FC\u85FD\u85FE\u8600\u8601\u8602\u8603\u8604\u8606\u8607\u8608\u8609\u860A\u860B\u860C\u860D\u860E\u860F\u8610\u8612\u8613\u8614\u8615\u8617\u8618\u8619\u861A\u861B\u861C\u861D\u861E\u861F\u8620\u8621\u8622\u8623\u8624\u8625\u8626\u8628\u862A\u862B\u862C\u862D\u862E\u862F\u8630\u8631\u8632\u8633\u8634\u8635\u8636\u8637\u8639\u863A\u863B\u863D\u863E\u863F\u8640\uFFFD\u8641\u8642\u8643\u8644\u8645\u8646\u8647\u8648\u8649\u864A\u864B\u864C\u8652\u8653\u8655\u8656\u8657\u8658\u8659\u865B\u865C\u865D\u865F\u8660\u8661\u8663\u8664\u8665\u8666\u8667\u8668\u8669\u866A\u736D\u631E\u8E4B\u8E0F\u80CE\u82D4\u62AC\u53F0\u6CF0\u915E\u592A\u6001\u6C70\u574D\u644A\u8D2A\u762B\u6EE9\u575B\u6A80\u75F0\u6F6D\u8C2D\u8C08\u5766\u6BEF\u8892\u78B3\u63A2\u53F9\u70AD\u6C64\u5858\u642A\u5802\u68E0\u819B\u5510\u7CD6\u5018\u8EBA\u6DCC\u8D9F\u70EB\u638F\u6D9B\u6ED4\u7EE6\u8404\u6843\u9003\u6DD8\u9676\u8BA8\u5957\u7279\u85E4\u817E\u75BC\u8A8A\u68AF\u5254\u8E22\u9511\u63D0\u9898\u8E44\u557C\u4F53\u66FF\u568F\u60D5\u6D95\u5243\u5C49\u5929\u6DFB\u586B\u7530\u751C\u606C\u8214\u8146\u6311\u6761\u8FE2\u773A\u8DF3\u8D34\u94C1\u5E16\u5385\u542C\u70C3\uFFFD".split("");
        for (j3 = 0; j3 != D5[204].length; ++j3)
          if (D5[204][j3].charCodeAt(0) !== 65533) {
            e7[D5[204][j3]] = 52224 + j3;
            d2[52224 + j3] = D5[204][j3];
          }
        D5[205] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u866D\u866F\u8670\u8672\u8673\u8674\u8675\u8676\u8677\u8678\u8683\u8684\u8685\u8686\u8687\u8688\u8689\u868E\u868F\u8690\u8691\u8692\u8694\u8696\u8697\u8698\u8699\u869A\u869B\u869E\u869F\u86A0\u86A1\u86A2\u86A5\u86A6\u86AB\u86AD\u86AE\u86B2\u86B3\u86B7\u86B8\u86B9\u86BB\u86BC\u86BD\u86BE\u86BF\u86C1\u86C2\u86C3\u86C5\u86C8\u86CC\u86CD\u86D2\u86D3\u86D5\u86D6\u86D7\u86DA\u86DC\uFFFD\u86DD\u86E0\u86E1\u86E2\u86E3\u86E5\u86E6\u86E7\u86E8\u86EA\u86EB\u86EC\u86EF\u86F5\u86F6\u86F7\u86FA\u86FB\u86FC\u86FD\u86FF\u8701\u8704\u8705\u8706\u870B\u870C\u870E\u870F\u8710\u8711\u8714\u8716\u6C40\u5EF7\u505C\u4EAD\u5EAD\u633A\u8247\u901A\u6850\u916E\u77B3\u540C\u94DC\u5F64\u7AE5\u6876\u6345\u7B52\u7EDF\u75DB\u5077\u6295\u5934\u900F\u51F8\u79C3\u7A81\u56FE\u5F92\u9014\u6D82\u5C60\u571F\u5410\u5154\u6E4D\u56E2\u63A8\u9893\u817F\u8715\u892A\u9000\u541E\u5C6F\u81C0\u62D6\u6258\u8131\u9E35\u9640\u9A6E\u9A7C\u692D\u59A5\u62D3\u553E\u6316\u54C7\u86D9\u6D3C\u5A03\u74E6\u889C\u6B6A\u5916\u8C4C\u5F2F\u6E7E\u73A9\u987D\u4E38\u70F7\u5B8C\u7897\u633D\u665A\u7696\u60CB\u5B9B\u5A49\u4E07\u8155\u6C6A\u738B\u4EA1\u6789\u7F51\u5F80\u65FA\u671B\u5FD8\u5984\u5A01\uFFFD".split("");
        for (j3 = 0; j3 != D5[205].length; ++j3)
          if (D5[205][j3].charCodeAt(0) !== 65533) {
            e7[D5[205][j3]] = 52480 + j3;
            d2[52480 + j3] = D5[205][j3];
          }
        D5[206] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u8719\u871B\u871D\u871F\u8720\u8724\u8726\u8727\u8728\u872A\u872B\u872C\u872D\u872F\u8730\u8732\u8733\u8735\u8736\u8738\u8739\u873A\u873C\u873D\u8740\u8741\u8742\u8743\u8744\u8745\u8746\u874A\u874B\u874D\u874F\u8750\u8751\u8752\u8754\u8755\u8756\u8758\u875A\u875B\u875C\u875D\u875E\u875F\u8761\u8762\u8766\u8767\u8768\u8769\u876A\u876B\u876C\u876D\u876F\u8771\u8772\u8773\u8775\uFFFD\u8777\u8778\u8779\u877A\u877F\u8780\u8781\u8784\u8786\u8787\u8789\u878A\u878C\u878E\u878F\u8790\u8791\u8792\u8794\u8795\u8796\u8798\u8799\u879A\u879B\u879C\u879D\u879E\u87A0\u87A1\u87A2\u87A3\u87A4\u5DCD\u5FAE\u5371\u97E6\u8FDD\u6845\u56F4\u552F\u60DF\u4E3A\u6F4D\u7EF4\u82C7\u840E\u59D4\u4F1F\u4F2A\u5C3E\u7EAC\u672A\u851A\u5473\u754F\u80C3\u5582\u9B4F\u4F4D\u6E2D\u8C13\u5C09\u6170\u536B\u761F\u6E29\u868A\u6587\u95FB\u7EB9\u543B\u7A33\u7D0A\u95EE\u55E1\u7FC1\u74EE\u631D\u8717\u6DA1\u7A9D\u6211\u65A1\u5367\u63E1\u6C83\u5DEB\u545C\u94A8\u4E4C\u6C61\u8BEC\u5C4B\u65E0\u829C\u68A7\u543E\u5434\u6BCB\u6B66\u4E94\u6342\u5348\u821E\u4F0D\u4FAE\u575E\u620A\u96FE\u6664\u7269\u52FF\u52A1\u609F\u8BEF\u6614\u7199\u6790\u897F\u7852\u77FD\u6670\u563B\u5438\u9521\u727A\uFFFD".split("");
        for (j3 = 0; j3 != D5[206].length; ++j3)
          if (D5[206][j3].charCodeAt(0) !== 65533) {
            e7[D5[206][j3]] = 52736 + j3;
            d2[52736 + j3] = D5[206][j3];
          }
        D5[207] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u87A5\u87A6\u87A7\u87A9\u87AA\u87AE\u87B0\u87B1\u87B2\u87B4\u87B6\u87B7\u87B8\u87B9\u87BB\u87BC\u87BE\u87BF\u87C1\u87C2\u87C3\u87C4\u87C5\u87C7\u87C8\u87C9\u87CC\u87CD\u87CE\u87CF\u87D0\u87D4\u87D5\u87D6\u87D7\u87D8\u87D9\u87DA\u87DC\u87DD\u87DE\u87DF\u87E1\u87E2\u87E3\u87E4\u87E6\u87E7\u87E8\u87E9\u87EB\u87EC\u87ED\u87EF\u87F0\u87F1\u87F2\u87F3\u87F4\u87F5\u87F6\u87F7\u87F8\uFFFD\u87FA\u87FB\u87FC\u87FD\u87FF\u8800\u8801\u8802\u8804\u8805\u8806\u8807\u8808\u8809\u880B\u880C\u880D\u880E\u880F\u8810\u8811\u8812\u8814\u8817\u8818\u8819\u881A\u881C\u881D\u881E\u881F\u8820\u8823\u7A00\u606F\u5E0C\u6089\u819D\u5915\u60DC\u7184\u70EF\u6EAA\u6C50\u7280\u6A84\u88AD\u5E2D\u4E60\u5AB3\u559C\u94E3\u6D17\u7CFB\u9699\u620F\u7EC6\u778E\u867E\u5323\u971E\u8F96\u6687\u5CE1\u4FA0\u72ED\u4E0B\u53A6\u590F\u5413\u6380\u9528\u5148\u4ED9\u9C9C\u7EA4\u54B8\u8D24\u8854\u8237\u95F2\u6D8E\u5F26\u5ACC\u663E\u9669\u73B0\u732E\u53BF\u817A\u9985\u7FA1\u5BAA\u9677\u9650\u7EBF\u76F8\u53A2\u9576\u9999\u7BB1\u8944\u6E58\u4E61\u7FD4\u7965\u8BE6\u60F3\u54CD\u4EAB\u9879\u5DF7\u6A61\u50CF\u5411\u8C61\u8427\u785D\u9704\u524A\u54EE\u56A3\u9500\u6D88\u5BB5\u6DC6\u6653\uFFFD".split("");
        for (j3 = 0; j3 != D5[207].length; ++j3)
          if (D5[207][j3].charCodeAt(0) !== 65533) {
            e7[D5[207][j3]] = 52992 + j3;
            d2[52992 + j3] = D5[207][j3];
          }
        D5[208] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u8824\u8825\u8826\u8827\u8828\u8829\u882A\u882B\u882C\u882D\u882E\u882F\u8830\u8831\u8833\u8834\u8835\u8836\u8837\u8838\u883A\u883B\u883D\u883E\u883F\u8841\u8842\u8843\u8846\u8847\u8848\u8849\u884A\u884B\u884E\u884F\u8850\u8851\u8852\u8853\u8855\u8856\u8858\u885A\u885B\u885C\u885D\u885E\u885F\u8860\u8866\u8867\u886A\u886D\u886F\u8871\u8873\u8874\u8875\u8876\u8878\u8879\u887A\uFFFD\u887B\u887C\u8880\u8883\u8886\u8887\u8889\u888A\u888C\u888E\u888F\u8890\u8891\u8893\u8894\u8895\u8897\u8898\u8899\u889A\u889B\u889D\u889E\u889F\u88A0\u88A1\u88A3\u88A5\u88A6\u88A7\u88A8\u88A9\u88AA\u5C0F\u5B5D\u6821\u8096\u5578\u7B11\u6548\u6954\u4E9B\u6B47\u874E\u978B\u534F\u631F\u643A\u90AA\u659C\u80C1\u8C10\u5199\u68B0\u5378\u87F9\u61C8\u6CC4\u6CFB\u8C22\u5C51\u85AA\u82AF\u950C\u6B23\u8F9B\u65B0\u5FFB\u5FC3\u4FE1\u8845\u661F\u8165\u7329\u60FA\u5174\u5211\u578B\u5F62\u90A2\u884C\u9192\u5E78\u674F\u6027\u59D3\u5144\u51F6\u80F8\u5308\u6C79\u96C4\u718A\u4F11\u4FEE\u7F9E\u673D\u55C5\u9508\u79C0\u8896\u7EE3\u589F\u620C\u9700\u865A\u5618\u987B\u5F90\u8BB8\u84C4\u9157\u53D9\u65ED\u5E8F\u755C\u6064\u7D6E\u5A7F\u7EEA\u7EED\u8F69\u55A7\u5BA3\u60AC\u65CB\u7384\uFFFD".split("");
        for (j3 = 0; j3 != D5[208].length; ++j3)
          if (D5[208][j3].charCodeAt(0) !== 65533) {
            e7[D5[208][j3]] = 53248 + j3;
            d2[53248 + j3] = D5[208][j3];
          }
        D5[209] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u88AC\u88AE\u88AF\u88B0\u88B2\u88B3\u88B4\u88B5\u88B6\u88B8\u88B9\u88BA\u88BB\u88BD\u88BE\u88BF\u88C0\u88C3\u88C4\u88C7\u88C8\u88CA\u88CB\u88CC\u88CD\u88CF\u88D0\u88D1\u88D3\u88D6\u88D7\u88DA\u88DB\u88DC\u88DD\u88DE\u88E0\u88E1\u88E6\u88E7\u88E9\u88EA\u88EB\u88EC\u88ED\u88EE\u88EF\u88F2\u88F5\u88F6\u88F7\u88FA\u88FB\u88FD\u88FF\u8900\u8901\u8903\u8904\u8905\u8906\u8907\u8908\uFFFD\u8909\u890B\u890C\u890D\u890E\u890F\u8911\u8914\u8915\u8916\u8917\u8918\u891C\u891D\u891E\u891F\u8920\u8922\u8923\u8924\u8926\u8927\u8928\u8929\u892C\u892D\u892E\u892F\u8931\u8932\u8933\u8935\u8937\u9009\u7663\u7729\u7EDA\u9774\u859B\u5B66\u7A74\u96EA\u8840\u52CB\u718F\u5FAA\u65EC\u8BE2\u5BFB\u9A6F\u5DE1\u6B89\u6C5B\u8BAD\u8BAF\u900A\u8FC5\u538B\u62BC\u9E26\u9E2D\u5440\u4E2B\u82BD\u7259\u869C\u5D16\u8859\u6DAF\u96C5\u54D1\u4E9A\u8BB6\u7109\u54BD\u9609\u70DF\u6DF9\u76D0\u4E25\u7814\u8712\u5CA9\u5EF6\u8A00\u989C\u960E\u708E\u6CBF\u5944\u63A9\u773C\u884D\u6F14\u8273\u5830\u71D5\u538C\u781A\u96C1\u5501\u5F66\u7130\u5BB4\u8C1A\u9A8C\u6B83\u592E\u9E2F\u79E7\u6768\u626C\u4F6F\u75A1\u7F8A\u6D0B\u9633\u6C27\u4EF0\u75D2\u517B\u6837\u6F3E\u9080\u8170\u5996\u7476\uFFFD".split("");
        for (j3 = 0; j3 != D5[209].length; ++j3)
          if (D5[209][j3].charCodeAt(0) !== 65533) {
            e7[D5[209][j3]] = 53504 + j3;
            d2[53504 + j3] = D5[209][j3];
          }
        D5[210] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u8938\u8939\u893A\u893B\u893C\u893D\u893E\u893F\u8940\u8942\u8943\u8945\u8946\u8947\u8948\u8949\u894A\u894B\u894C\u894D\u894E\u894F\u8950\u8951\u8952\u8953\u8954\u8955\u8956\u8957\u8958\u8959\u895A\u895B\u895C\u895D\u8960\u8961\u8962\u8963\u8964\u8965\u8967\u8968\u8969\u896A\u896B\u896C\u896D\u896E\u896F\u8970\u8971\u8972\u8973\u8974\u8975\u8976\u8977\u8978\u8979\u897A\u897C\uFFFD\u897D\u897E\u8980\u8982\u8984\u8985\u8987\u8988\u8989\u898A\u898B\u898C\u898D\u898E\u898F\u8990\u8991\u8992\u8993\u8994\u8995\u8996\u8997\u8998\u8999\u899A\u899B\u899C\u899D\u899E\u899F\u89A0\u89A1\u6447\u5C27\u9065\u7A91\u8C23\u59DA\u54AC\u8200\u836F\u8981\u8000\u6930\u564E\u8036\u7237\u91CE\u51B6\u4E5F\u9875\u6396\u4E1A\u53F6\u66F3\u814B\u591C\u6DB2\u4E00\u58F9\u533B\u63D6\u94F1\u4F9D\u4F0A\u8863\u9890\u5937\u9057\u79FB\u4EEA\u80F0\u7591\u6C82\u5B9C\u59E8\u5F5D\u6905\u8681\u501A\u5DF2\u4E59\u77E3\u4EE5\u827A\u6291\u6613\u9091\u5C79\u4EBF\u5F79\u81C6\u9038\u8084\u75AB\u4EA6\u88D4\u610F\u6BC5\u5FC6\u4E49\u76CA\u6EA2\u8BE3\u8BAE\u8C0A\u8BD1\u5F02\u7FFC\u7FCC\u7ECE\u8335\u836B\u56E0\u6BB7\u97F3\u9634\u59FB\u541F\u94F6\u6DEB\u5BC5\u996E\u5C39\u5F15\u9690\uFFFD".split("");
        for (j3 = 0; j3 != D5[210].length; ++j3)
          if (D5[210][j3].charCodeAt(0) !== 65533) {
            e7[D5[210][j3]] = 53760 + j3;
            d2[53760 + j3] = D5[210][j3];
          }
        D5[211] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u89A2\u89A3\u89A4\u89A5\u89A6\u89A7\u89A8\u89A9\u89AA\u89AB\u89AC\u89AD\u89AE\u89AF\u89B0\u89B1\u89B2\u89B3\u89B4\u89B5\u89B6\u89B7\u89B8\u89B9\u89BA\u89BB\u89BC\u89BD\u89BE\u89BF\u89C0\u89C3\u89CD\u89D3\u89D4\u89D5\u89D7\u89D8\u89D9\u89DB\u89DD\u89DF\u89E0\u89E1\u89E2\u89E4\u89E7\u89E8\u89E9\u89EA\u89EC\u89ED\u89EE\u89F0\u89F1\u89F2\u89F4\u89F5\u89F6\u89F7\u89F8\u89F9\u89FA\uFFFD\u89FB\u89FC\u89FD\u89FE\u89FF\u8A01\u8A02\u8A03\u8A04\u8A05\u8A06\u8A08\u8A09\u8A0A\u8A0B\u8A0C\u8A0D\u8A0E\u8A0F\u8A10\u8A11\u8A12\u8A13\u8A14\u8A15\u8A16\u8A17\u8A18\u8A19\u8A1A\u8A1B\u8A1C\u8A1D\u5370\u82F1\u6A31\u5A74\u9E70\u5E94\u7F28\u83B9\u8424\u8425\u8367\u8747\u8FCE\u8D62\u76C8\u5F71\u9896\u786C\u6620\u54DF\u62E5\u4F63\u81C3\u75C8\u5EB8\u96CD\u8E0A\u86F9\u548F\u6CF3\u6D8C\u6C38\u607F\u52C7\u7528\u5E7D\u4F18\u60A0\u5FE7\u5C24\u7531\u90AE\u94C0\u72B9\u6CB9\u6E38\u9149\u6709\u53CB\u53F3\u4F51\u91C9\u8BF1\u53C8\u5E7C\u8FC2\u6DE4\u4E8E\u76C2\u6986\u865E\u611A\u8206\u4F59\u4FDE\u903E\u9C7C\u6109\u6E1D\u6E14\u9685\u4E88\u5A31\u96E8\u4E0E\u5C7F\u79B9\u5B87\u8BED\u7FBD\u7389\u57DF\u828B\u90C1\u5401\u9047\u55BB\u5CEA\u5FA1\u6108\u6B32\u72F1\u80B2\u8A89\uFFFD".split("");
        for (j3 = 0; j3 != D5[211].length; ++j3)
          if (D5[211][j3].charCodeAt(0) !== 65533) {
            e7[D5[211][j3]] = 54016 + j3;
            d2[54016 + j3] = D5[211][j3];
          }
        D5[212] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u8A1E\u8A1F\u8A20\u8A21\u8A22\u8A23\u8A24\u8A25\u8A26\u8A27\u8A28\u8A29\u8A2A\u8A2B\u8A2C\u8A2D\u8A2E\u8A2F\u8A30\u8A31\u8A32\u8A33\u8A34\u8A35\u8A36\u8A37\u8A38\u8A39\u8A3A\u8A3B\u8A3C\u8A3D\u8A3F\u8A40\u8A41\u8A42\u8A43\u8A44\u8A45\u8A46\u8A47\u8A49\u8A4A\u8A4B\u8A4C\u8A4D\u8A4E\u8A4F\u8A50\u8A51\u8A52\u8A53\u8A54\u8A55\u8A56\u8A57\u8A58\u8A59\u8A5A\u8A5B\u8A5C\u8A5D\u8A5E\uFFFD\u8A5F\u8A60\u8A61\u8A62\u8A63\u8A64\u8A65\u8A66\u8A67\u8A68\u8A69\u8A6A\u8A6B\u8A6C\u8A6D\u8A6E\u8A6F\u8A70\u8A71\u8A72\u8A73\u8A74\u8A75\u8A76\u8A77\u8A78\u8A7A\u8A7B\u8A7C\u8A7D\u8A7E\u8A7F\u8A80\u6D74\u5BD3\u88D5\u9884\u8C6B\u9A6D\u9E33\u6E0A\u51A4\u5143\u57A3\u8881\u539F\u63F4\u8F95\u56ED\u5458\u5706\u733F\u6E90\u7F18\u8FDC\u82D1\u613F\u6028\u9662\u66F0\u7EA6\u8D8A\u8DC3\u94A5\u5CB3\u7CA4\u6708\u60A6\u9605\u8018\u4E91\u90E7\u5300\u9668\u5141\u8FD0\u8574\u915D\u6655\u97F5\u5B55\u531D\u7838\u6742\u683D\u54C9\u707E\u5BB0\u8F7D\u518D\u5728\u54B1\u6512\u6682\u8D5E\u8D43\u810F\u846C\u906D\u7CDF\u51FF\u85FB\u67A3\u65E9\u6FA1\u86A4\u8E81\u566A\u9020\u7682\u7076\u71E5\u8D23\u62E9\u5219\u6CFD\u8D3C\u600E\u589E\u618E\u66FE\u8D60\u624E\u55B3\u6E23\u672D\u8F67\uFFFD".split("");
        for (j3 = 0; j3 != D5[212].length; ++j3)
          if (D5[212][j3].charCodeAt(0) !== 65533) {
            e7[D5[212][j3]] = 54272 + j3;
            d2[54272 + j3] = D5[212][j3];
          }
        D5[213] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u8A81\u8A82\u8A83\u8A84\u8A85\u8A86\u8A87\u8A88\u8A8B\u8A8C\u8A8D\u8A8E\u8A8F\u8A90\u8A91\u8A92\u8A94\u8A95\u8A96\u8A97\u8A98\u8A99\u8A9A\u8A9B\u8A9C\u8A9D\u8A9E\u8A9F\u8AA0\u8AA1\u8AA2\u8AA3\u8AA4\u8AA5\u8AA6\u8AA7\u8AA8\u8AA9\u8AAA\u8AAB\u8AAC\u8AAD\u8AAE\u8AAF\u8AB0\u8AB1\u8AB2\u8AB3\u8AB4\u8AB5\u8AB6\u8AB7\u8AB8\u8AB9\u8ABA\u8ABB\u8ABC\u8ABD\u8ABE\u8ABF\u8AC0\u8AC1\u8AC2\uFFFD\u8AC3\u8AC4\u8AC5\u8AC6\u8AC7\u8AC8\u8AC9\u8ACA\u8ACB\u8ACC\u8ACD\u8ACE\u8ACF\u8AD0\u8AD1\u8AD2\u8AD3\u8AD4\u8AD5\u8AD6\u8AD7\u8AD8\u8AD9\u8ADA\u8ADB\u8ADC\u8ADD\u8ADE\u8ADF\u8AE0\u8AE1\u8AE2\u8AE3\u94E1\u95F8\u7728\u6805\u69A8\u548B\u4E4D\u70B8\u8BC8\u6458\u658B\u5B85\u7A84\u503A\u5BE8\u77BB\u6BE1\u8A79\u7C98\u6CBE\u76CF\u65A9\u8F97\u5D2D\u5C55\u8638\u6808\u5360\u6218\u7AD9\u6E5B\u7EFD\u6A1F\u7AE0\u5F70\u6F33\u5F20\u638C\u6DA8\u6756\u4E08\u5E10\u8D26\u4ED7\u80C0\u7634\u969C\u62DB\u662D\u627E\u6CBC\u8D75\u7167\u7F69\u5146\u8087\u53EC\u906E\u6298\u54F2\u86F0\u8F99\u8005\u9517\u8517\u8FD9\u6D59\u73CD\u659F\u771F\u7504\u7827\u81FB\u8D1E\u9488\u4FA6\u6795\u75B9\u8BCA\u9707\u632F\u9547\u9635\u84B8\u6323\u7741\u5F81\u72F0\u4E89\u6014\u6574\u62EF\u6B63\u653F\uFFFD".split("");
        for (j3 = 0; j3 != D5[213].length; ++j3)
          if (D5[213][j3].charCodeAt(0) !== 65533) {
            e7[D5[213][j3]] = 54528 + j3;
            d2[54528 + j3] = D5[213][j3];
          }
        D5[214] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u8AE4\u8AE5\u8AE6\u8AE7\u8AE8\u8AE9\u8AEA\u8AEB\u8AEC\u8AED\u8AEE\u8AEF\u8AF0\u8AF1\u8AF2\u8AF3\u8AF4\u8AF5\u8AF6\u8AF7\u8AF8\u8AF9\u8AFA\u8AFB\u8AFC\u8AFD\u8AFE\u8AFF\u8B00\u8B01\u8B02\u8B03\u8B04\u8B05\u8B06\u8B08\u8B09\u8B0A\u8B0B\u8B0C\u8B0D\u8B0E\u8B0F\u8B10\u8B11\u8B12\u8B13\u8B14\u8B15\u8B16\u8B17\u8B18\u8B19\u8B1A\u8B1B\u8B1C\u8B1D\u8B1E\u8B1F\u8B20\u8B21\u8B22\u8B23\uFFFD\u8B24\u8B25\u8B27\u8B28\u8B29\u8B2A\u8B2B\u8B2C\u8B2D\u8B2E\u8B2F\u8B30\u8B31\u8B32\u8B33\u8B34\u8B35\u8B36\u8B37\u8B38\u8B39\u8B3A\u8B3B\u8B3C\u8B3D\u8B3E\u8B3F\u8B40\u8B41\u8B42\u8B43\u8B44\u8B45\u5E27\u75C7\u90D1\u8BC1\u829D\u679D\u652F\u5431\u8718\u77E5\u80A2\u8102\u6C41\u4E4B\u7EC7\u804C\u76F4\u690D\u6B96\u6267\u503C\u4F84\u5740\u6307\u6B62\u8DBE\u53EA\u65E8\u7EB8\u5FD7\u631A\u63B7\u81F3\u81F4\u7F6E\u5E1C\u5CD9\u5236\u667A\u79E9\u7A1A\u8D28\u7099\u75D4\u6EDE\u6CBB\u7A92\u4E2D\u76C5\u5FE0\u949F\u8877\u7EC8\u79CD\u80BF\u91CD\u4EF2\u4F17\u821F\u5468\u5DDE\u6D32\u8BCC\u7CA5\u8F74\u8098\u5E1A\u5492\u76B1\u5B99\u663C\u9AA4\u73E0\u682A\u86DB\u6731\u732A\u8BF8\u8BDB\u9010\u7AF9\u70DB\u716E\u62C4\u77A9\u5631\u4E3B\u8457\u67F1\u52A9\u86C0\u8D2E\u94F8\u7B51\uFFFD".split("");
        for (j3 = 0; j3 != D5[214].length; ++j3)
          if (D5[214][j3].charCodeAt(0) !== 65533) {
            e7[D5[214][j3]] = 54784 + j3;
            d2[54784 + j3] = D5[214][j3];
          }
        D5[215] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u8B46\u8B47\u8B48\u8B49\u8B4A\u8B4B\u8B4C\u8B4D\u8B4E\u8B4F\u8B50\u8B51\u8B52\u8B53\u8B54\u8B55\u8B56\u8B57\u8B58\u8B59\u8B5A\u8B5B\u8B5C\u8B5D\u8B5E\u8B5F\u8B60\u8B61\u8B62\u8B63\u8B64\u8B65\u8B67\u8B68\u8B69\u8B6A\u8B6B\u8B6D\u8B6E\u8B6F\u8B70\u8B71\u8B72\u8B73\u8B74\u8B75\u8B76\u8B77\u8B78\u8B79\u8B7A\u8B7B\u8B7C\u8B7D\u8B7E\u8B7F\u8B80\u8B81\u8B82\u8B83\u8B84\u8B85\u8B86\uFFFD\u8B87\u8B88\u8B89\u8B8A\u8B8B\u8B8C\u8B8D\u8B8E\u8B8F\u8B90\u8B91\u8B92\u8B93\u8B94\u8B95\u8B96\u8B97\u8B98\u8B99\u8B9A\u8B9B\u8B9C\u8B9D\u8B9E\u8B9F\u8BAC\u8BB1\u8BBB\u8BC7\u8BD0\u8BEA\u8C09\u8C1E\u4F4F\u6CE8\u795D\u9A7B\u6293\u722A\u62FD\u4E13\u7816\u8F6C\u64B0\u8D5A\u7BC6\u6869\u5E84\u88C5\u5986\u649E\u58EE\u72B6\u690E\u9525\u8FFD\u8D58\u5760\u7F00\u8C06\u51C6\u6349\u62D9\u5353\u684C\u7422\u8301\u914C\u5544\u7740\u707C\u6D4A\u5179\u54A8\u8D44\u59FF\u6ECB\u6DC4\u5B5C\u7D2B\u4ED4\u7C7D\u6ED3\u5B50\u81EA\u6E0D\u5B57\u9B03\u68D5\u8E2A\u5B97\u7EFC\u603B\u7EB5\u90B9\u8D70\u594F\u63CD\u79DF\u8DB3\u5352\u65CF\u7956\u8BC5\u963B\u7EC4\u94BB\u7E82\u5634\u9189\u6700\u7F6A\u5C0A\u9075\u6628\u5DE6\u4F50\u67DE\u505A\u4F5C\u5750\u5EA7\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD".split("");
        for (j3 = 0; j3 != D5[215].length; ++j3)
          if (D5[215][j3].charCodeAt(0) !== 65533) {
            e7[D5[215][j3]] = 55040 + j3;
            d2[55040 + j3] = D5[215][j3];
          }
        D5[216] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u8C38\u8C39\u8C3A\u8C3B\u8C3C\u8C3D\u8C3E\u8C3F\u8C40\u8C42\u8C43\u8C44\u8C45\u8C48\u8C4A\u8C4B\u8C4D\u8C4E\u8C4F\u8C50\u8C51\u8C52\u8C53\u8C54\u8C56\u8C57\u8C58\u8C59\u8C5B\u8C5C\u8C5D\u8C5E\u8C5F\u8C60\u8C63\u8C64\u8C65\u8C66\u8C67\u8C68\u8C69\u8C6C\u8C6D\u8C6E\u8C6F\u8C70\u8C71\u8C72\u8C74\u8C75\u8C76\u8C77\u8C7B\u8C7C\u8C7D\u8C7E\u8C7F\u8C80\u8C81\u8C83\u8C84\u8C86\u8C87\uFFFD\u8C88\u8C8B\u8C8D\u8C8E\u8C8F\u8C90\u8C91\u8C92\u8C93\u8C95\u8C96\u8C97\u8C99\u8C9A\u8C9B\u8C9C\u8C9D\u8C9E\u8C9F\u8CA0\u8CA1\u8CA2\u8CA3\u8CA4\u8CA5\u8CA6\u8CA7\u8CA8\u8CA9\u8CAA\u8CAB\u8CAC\u8CAD\u4E8D\u4E0C\u5140\u4E10\u5EFF\u5345\u4E15\u4E98\u4E1E\u9B32\u5B6C\u5669\u4E28\u79BA\u4E3F\u5315\u4E47\u592D\u723B\u536E\u6C10\u56DF\u80E4\u9997\u6BD3\u777E\u9F17\u4E36\u4E9F\u9F10\u4E5C\u4E69\u4E93\u8288\u5B5B\u556C\u560F\u4EC4\u538D\u539D\u53A3\u53A5\u53AE\u9765\u8D5D\u531A\u53F5\u5326\u532E\u533E\u8D5C\u5366\u5363\u5202\u5208\u520E\u522D\u5233\u523F\u5240\u524C\u525E\u5261\u525C\u84AF\u527D\u5282\u5281\u5290\u5293\u5182\u7F54\u4EBB\u4EC3\u4EC9\u4EC2\u4EE8\u4EE1\u4EEB\u4EDE\u4F1B\u4EF3\u4F22\u4F64\u4EF5\u4F25\u4F27\u4F09\u4F2B\u4F5E\u4F67\u6538\u4F5A\u4F5D\uFFFD".split("");
        for (j3 = 0; j3 != D5[216].length; ++j3)
          if (D5[216][j3].charCodeAt(0) !== 65533) {
            e7[D5[216][j3]] = 55296 + j3;
            d2[55296 + j3] = D5[216][j3];
          }
        D5[217] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u8CAE\u8CAF\u8CB0\u8CB1\u8CB2\u8CB3\u8CB4\u8CB5\u8CB6\u8CB7\u8CB8\u8CB9\u8CBA\u8CBB\u8CBC\u8CBD\u8CBE\u8CBF\u8CC0\u8CC1\u8CC2\u8CC3\u8CC4\u8CC5\u8CC6\u8CC7\u8CC8\u8CC9\u8CCA\u8CCB\u8CCC\u8CCD\u8CCE\u8CCF\u8CD0\u8CD1\u8CD2\u8CD3\u8CD4\u8CD5\u8CD6\u8CD7\u8CD8\u8CD9\u8CDA\u8CDB\u8CDC\u8CDD\u8CDE\u8CDF\u8CE0\u8CE1\u8CE2\u8CE3\u8CE4\u8CE5\u8CE6\u8CE7\u8CE8\u8CE9\u8CEA\u8CEB\u8CEC\uFFFD\u8CED\u8CEE\u8CEF\u8CF0\u8CF1\u8CF2\u8CF3\u8CF4\u8CF5\u8CF6\u8CF7\u8CF8\u8CF9\u8CFA\u8CFB\u8CFC\u8CFD\u8CFE\u8CFF\u8D00\u8D01\u8D02\u8D03\u8D04\u8D05\u8D06\u8D07\u8D08\u8D09\u8D0A\u8D0B\u8D0C\u8D0D\u4F5F\u4F57\u4F32\u4F3D\u4F76\u4F74\u4F91\u4F89\u4F83\u4F8F\u4F7E\u4F7B\u4FAA\u4F7C\u4FAC\u4F94\u4FE6\u4FE8\u4FEA\u4FC5\u4FDA\u4FE3\u4FDC\u4FD1\u4FDF\u4FF8\u5029\u504C\u4FF3\u502C\u500F\u502E\u502D\u4FFE\u501C\u500C\u5025\u5028\u507E\u5043\u5055\u5048\u504E\u506C\u507B\u50A5\u50A7\u50A9\u50BA\u50D6\u5106\u50ED\u50EC\u50E6\u50EE\u5107\u510B\u4EDD\u6C3D\u4F58\u4F65\u4FCE\u9FA0\u6C46\u7C74\u516E\u5DFD\u9EC9\u9998\u5181\u5914\u52F9\u530D\u8A07\u5310\u51EB\u5919\u5155\u4EA0\u5156\u4EB3\u886E\u88A4\u4EB5\u8114\u88D2\u7980\u5B34\u8803\u7FB8\u51AB\u51B1\u51BD\u51BC\uFFFD".split("");
        for (j3 = 0; j3 != D5[217].length; ++j3)
          if (D5[217][j3].charCodeAt(0) !== 65533) {
            e7[D5[217][j3]] = 55552 + j3;
            d2[55552 + j3] = D5[217][j3];
          }
        D5[218] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u8D0E\u8D0F\u8D10\u8D11\u8D12\u8D13\u8D14\u8D15\u8D16\u8D17\u8D18\u8D19\u8D1A\u8D1B\u8D1C\u8D20\u8D51\u8D52\u8D57\u8D5F\u8D65\u8D68\u8D69\u8D6A\u8D6C\u8D6E\u8D6F\u8D71\u8D72\u8D78\u8D79\u8D7A\u8D7B\u8D7C\u8D7D\u8D7E\u8D7F\u8D80\u8D82\u8D83\u8D86\u8D87\u8D88\u8D89\u8D8C\u8D8D\u8D8E\u8D8F\u8D90\u8D92\u8D93\u8D95\u8D96\u8D97\u8D98\u8D99\u8D9A\u8D9B\u8D9C\u8D9D\u8D9E\u8DA0\u8DA1\uFFFD\u8DA2\u8DA4\u8DA5\u8DA6\u8DA7\u8DA8\u8DA9\u8DAA\u8DAB\u8DAC\u8DAD\u8DAE\u8DAF\u8DB0\u8DB2\u8DB6\u8DB7\u8DB9\u8DBB\u8DBD\u8DC0\u8DC1\u8DC2\u8DC5\u8DC7\u8DC8\u8DC9\u8DCA\u8DCD\u8DD0\u8DD2\u8DD3\u8DD4\u51C7\u5196\u51A2\u51A5\u8BA0\u8BA6\u8BA7\u8BAA\u8BB4\u8BB5\u8BB7\u8BC2\u8BC3\u8BCB\u8BCF\u8BCE\u8BD2\u8BD3\u8BD4\u8BD6\u8BD8\u8BD9\u8BDC\u8BDF\u8BE0\u8BE4\u8BE8\u8BE9\u8BEE\u8BF0\u8BF3\u8BF6\u8BF9\u8BFC\u8BFF\u8C00\u8C02\u8C04\u8C07\u8C0C\u8C0F\u8C11\u8C12\u8C14\u8C15\u8C16\u8C19\u8C1B\u8C18\u8C1D\u8C1F\u8C20\u8C21\u8C25\u8C27\u8C2A\u8C2B\u8C2E\u8C2F\u8C32\u8C33\u8C35\u8C36\u5369\u537A\u961D\u9622\u9621\u9631\u962A\u963D\u963C\u9642\u9649\u9654\u965F\u9667\u966C\u9672\u9674\u9688\u968D\u9697\u96B0\u9097\u909B\u909D\u9099\u90AC\u90A1\u90B4\u90B3\u90B6\u90BA\uFFFD".split("");
        for (j3 = 0; j3 != D5[218].length; ++j3)
          if (D5[218][j3].charCodeAt(0) !== 65533) {
            e7[D5[218][j3]] = 55808 + j3;
            d2[55808 + j3] = D5[218][j3];
          }
        D5[219] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u8DD5\u8DD8\u8DD9\u8DDC\u8DE0\u8DE1\u8DE2\u8DE5\u8DE6\u8DE7\u8DE9\u8DED\u8DEE\u8DF0\u8DF1\u8DF2\u8DF4\u8DF6\u8DFC\u8DFE\u8DFF\u8E00\u8E01\u8E02\u8E03\u8E04\u8E06\u8E07\u8E08\u8E0B\u8E0D\u8E0E\u8E10\u8E11\u8E12\u8E13\u8E15\u8E16\u8E17\u8E18\u8E19\u8E1A\u8E1B\u8E1C\u8E20\u8E21\u8E24\u8E25\u8E26\u8E27\u8E28\u8E2B\u8E2D\u8E30\u8E32\u8E33\u8E34\u8E36\u8E37\u8E38\u8E3B\u8E3C\u8E3E\uFFFD\u8E3F\u8E43\u8E45\u8E46\u8E4C\u8E4D\u8E4E\u8E4F\u8E50\u8E53\u8E54\u8E55\u8E56\u8E57\u8E58\u8E5A\u8E5B\u8E5C\u8E5D\u8E5E\u8E5F\u8E60\u8E61\u8E62\u8E63\u8E64\u8E65\u8E67\u8E68\u8E6A\u8E6B\u8E6E\u8E71\u90B8\u90B0\u90CF\u90C5\u90BE\u90D0\u90C4\u90C7\u90D3\u90E6\u90E2\u90DC\u90D7\u90DB\u90EB\u90EF\u90FE\u9104\u9122\u911E\u9123\u9131\u912F\u9139\u9143\u9146\u520D\u5942\u52A2\u52AC\u52AD\u52BE\u54FF\u52D0\u52D6\u52F0\u53DF\u71EE\u77CD\u5EF4\u51F5\u51FC\u9B2F\u53B6\u5F01\u755A\u5DEF\u574C\u57A9\u57A1\u587E\u58BC\u58C5\u58D1\u5729\u572C\u572A\u5733\u5739\u572E\u572F\u575C\u573B\u5742\u5769\u5785\u576B\u5786\u577C\u577B\u5768\u576D\u5776\u5773\u57AD\u57A4\u578C\u57B2\u57CF\u57A7\u57B4\u5793\u57A0\u57D5\u57D8\u57DA\u57D9\u57D2\u57B8\u57F4\u57EF\u57F8\u57E4\u57DD\uFFFD".split("");
        for (j3 = 0; j3 != D5[219].length; ++j3)
          if (D5[219][j3].charCodeAt(0) !== 65533) {
            e7[D5[219][j3]] = 56064 + j3;
            d2[56064 + j3] = D5[219][j3];
          }
        D5[220] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u8E73\u8E75\u8E77\u8E78\u8E79\u8E7A\u8E7B\u8E7D\u8E7E\u8E80\u8E82\u8E83\u8E84\u8E86\u8E88\u8E89\u8E8A\u8E8B\u8E8C\u8E8D\u8E8E\u8E91\u8E92\u8E93\u8E95\u8E96\u8E97\u8E98\u8E99\u8E9A\u8E9B\u8E9D\u8E9F\u8EA0\u8EA1\u8EA2\u8EA3\u8EA4\u8EA5\u8EA6\u8EA7\u8EA8\u8EA9\u8EAA\u8EAD\u8EAE\u8EB0\u8EB1\u8EB3\u8EB4\u8EB5\u8EB6\u8EB7\u8EB8\u8EB9\u8EBB\u8EBC\u8EBD\u8EBE\u8EBF\u8EC0\u8EC1\u8EC2\uFFFD\u8EC3\u8EC4\u8EC5\u8EC6\u8EC7\u8EC8\u8EC9\u8ECA\u8ECB\u8ECC\u8ECD\u8ECF\u8ED0\u8ED1\u8ED2\u8ED3\u8ED4\u8ED5\u8ED6\u8ED7\u8ED8\u8ED9\u8EDA\u8EDB\u8EDC\u8EDD\u8EDE\u8EDF\u8EE0\u8EE1\u8EE2\u8EE3\u8EE4\u580B\u580D\u57FD\u57ED\u5800\u581E\u5819\u5844\u5820\u5865\u586C\u5881\u5889\u589A\u5880\u99A8\u9F19\u61FF\u8279\u827D\u827F\u828F\u828A\u82A8\u8284\u828E\u8291\u8297\u8299\u82AB\u82B8\u82BE\u82B0\u82C8\u82CA\u82E3\u8298\u82B7\u82AE\u82CB\u82CC\u82C1\u82A9\u82B4\u82A1\u82AA\u829F\u82C4\u82CE\u82A4\u82E1\u8309\u82F7\u82E4\u830F\u8307\u82DC\u82F4\u82D2\u82D8\u830C\u82FB\u82D3\u8311\u831A\u8306\u8314\u8315\u82E0\u82D5\u831C\u8351\u835B\u835C\u8308\u8392\u833C\u8334\u8331\u839B\u835E\u832F\u834F\u8347\u8343\u835F\u8340\u8317\u8360\u832D\u833A\u8333\u8366\u8365\uFFFD".split("");
        for (j3 = 0; j3 != D5[220].length; ++j3)
          if (D5[220][j3].charCodeAt(0) !== 65533) {
            e7[D5[220][j3]] = 56320 + j3;
            d2[56320 + j3] = D5[220][j3];
          }
        D5[221] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u8EE5\u8EE6\u8EE7\u8EE8\u8EE9\u8EEA\u8EEB\u8EEC\u8EED\u8EEE\u8EEF\u8EF0\u8EF1\u8EF2\u8EF3\u8EF4\u8EF5\u8EF6\u8EF7\u8EF8\u8EF9\u8EFA\u8EFB\u8EFC\u8EFD\u8EFE\u8EFF\u8F00\u8F01\u8F02\u8F03\u8F04\u8F05\u8F06\u8F07\u8F08\u8F09\u8F0A\u8F0B\u8F0C\u8F0D\u8F0E\u8F0F\u8F10\u8F11\u8F12\u8F13\u8F14\u8F15\u8F16\u8F17\u8F18\u8F19\u8F1A\u8F1B\u8F1C\u8F1D\u8F1E\u8F1F\u8F20\u8F21\u8F22\u8F23\uFFFD\u8F24\u8F25\u8F26\u8F27\u8F28\u8F29\u8F2A\u8F2B\u8F2C\u8F2D\u8F2E\u8F2F\u8F30\u8F31\u8F32\u8F33\u8F34\u8F35\u8F36\u8F37\u8F38\u8F39\u8F3A\u8F3B\u8F3C\u8F3D\u8F3E\u8F3F\u8F40\u8F41\u8F42\u8F43\u8F44\u8368\u831B\u8369\u836C\u836A\u836D\u836E\u83B0\u8378\u83B3\u83B4\u83A0\u83AA\u8393\u839C\u8385\u837C\u83B6\u83A9\u837D\u83B8\u837B\u8398\u839E\u83A8\u83BA\u83BC\u83C1\u8401\u83E5\u83D8\u5807\u8418\u840B\u83DD\u83FD\u83D6\u841C\u8438\u8411\u8406\u83D4\u83DF\u840F\u8403\u83F8\u83F9\u83EA\u83C5\u83C0\u8426\u83F0\u83E1\u845C\u8451\u845A\u8459\u8473\u8487\u8488\u847A\u8489\u8478\u843C\u8446\u8469\u8476\u848C\u848E\u8431\u846D\u84C1\u84CD\u84D0\u84E6\u84BD\u84D3\u84CA\u84BF\u84BA\u84E0\u84A1\u84B9\u84B4\u8497\u84E5\u84E3\u850C\u750D\u8538\u84F0\u8539\u851F\u853A\uFFFD".split("");
        for (j3 = 0; j3 != D5[221].length; ++j3)
          if (D5[221][j3].charCodeAt(0) !== 65533) {
            e7[D5[221][j3]] = 56576 + j3;
            d2[56576 + j3] = D5[221][j3];
          }
        D5[222] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u8F45\u8F46\u8F47\u8F48\u8F49\u8F4A\u8F4B\u8F4C\u8F4D\u8F4E\u8F4F\u8F50\u8F51\u8F52\u8F53\u8F54\u8F55\u8F56\u8F57\u8F58\u8F59\u8F5A\u8F5B\u8F5C\u8F5D\u8F5E\u8F5F\u8F60\u8F61\u8F62\u8F63\u8F64\u8F65\u8F6A\u8F80\u8F8C\u8F92\u8F9D\u8FA0\u8FA1\u8FA2\u8FA4\u8FA5\u8FA6\u8FA7\u8FAA\u8FAC\u8FAD\u8FAE\u8FAF\u8FB2\u8FB3\u8FB4\u8FB5\u8FB7\u8FB8\u8FBA\u8FBB\u8FBC\u8FBF\u8FC0\u8FC3\u8FC6\uFFFD\u8FC9\u8FCA\u8FCB\u8FCC\u8FCD\u8FCF\u8FD2\u8FD6\u8FD7\u8FDA\u8FE0\u8FE1\u8FE3\u8FE7\u8FEC\u8FEF\u8FF1\u8FF2\u8FF4\u8FF5\u8FF6\u8FFA\u8FFB\u8FFC\u8FFE\u8FFF\u9007\u9008\u900C\u900E\u9013\u9015\u9018\u8556\u853B\u84FF\u84FC\u8559\u8548\u8568\u8564\u855E\u857A\u77A2\u8543\u8572\u857B\u85A4\u85A8\u8587\u858F\u8579\u85AE\u859C\u8585\u85B9\u85B7\u85B0\u85D3\u85C1\u85DC\u85FF\u8627\u8605\u8629\u8616\u863C\u5EFE\u5F08\u593C\u5941\u8037\u5955\u595A\u5958\u530F\u5C22\u5C25\u5C2C\u5C34\u624C\u626A\u629F\u62BB\u62CA\u62DA\u62D7\u62EE\u6322\u62F6\u6339\u634B\u6343\u63AD\u63F6\u6371\u637A\u638E\u63B4\u636D\u63AC\u638A\u6369\u63AE\u63BC\u63F2\u63F8\u63E0\u63FF\u63C4\u63DE\u63CE\u6452\u63C6\u63BE\u6445\u6441\u640B\u641B\u6420\u640C\u6426\u6421\u645E\u6484\u646D\u6496\uFFFD".split("");
        for (j3 = 0; j3 != D5[222].length; ++j3)
          if (D5[222][j3].charCodeAt(0) !== 65533) {
            e7[D5[222][j3]] = 56832 + j3;
            d2[56832 + j3] = D5[222][j3];
          }
        D5[223] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u9019\u901C\u9023\u9024\u9025\u9027\u9028\u9029\u902A\u902B\u902C\u9030\u9031\u9032\u9033\u9034\u9037\u9039\u903A\u903D\u903F\u9040\u9043\u9045\u9046\u9048\u9049\u904A\u904B\u904C\u904E\u9054\u9055\u9056\u9059\u905A\u905C\u905D\u905E\u905F\u9060\u9061\u9064\u9066\u9067\u9069\u906A\u906B\u906C\u906F\u9070\u9071\u9072\u9073\u9076\u9077\u9078\u9079\u907A\u907B\u907C\u907E\u9081\uFFFD\u9084\u9085\u9086\u9087\u9089\u908A\u908C\u908D\u908E\u908F\u9090\u9092\u9094\u9096\u9098\u909A\u909C\u909E\u909F\u90A0\u90A4\u90A5\u90A7\u90A8\u90A9\u90AB\u90AD\u90B2\u90B7\u90BC\u90BD\u90BF\u90C0\u647A\u64B7\u64B8\u6499\u64BA\u64C0\u64D0\u64D7\u64E4\u64E2\u6509\u6525\u652E\u5F0B\u5FD2\u7519\u5F11\u535F\u53F1\u53FD\u53E9\u53E8\u53FB\u5412\u5416\u5406\u544B\u5452\u5453\u5454\u5456\u5443\u5421\u5457\u5459\u5423\u5432\u5482\u5494\u5477\u5471\u5464\u549A\u549B\u5484\u5476\u5466\u549D\u54D0\u54AD\u54C2\u54B4\u54D2\u54A7\u54A6\u54D3\u54D4\u5472\u54A3\u54D5\u54BB\u54BF\u54CC\u54D9\u54DA\u54DC\u54A9\u54AA\u54A4\u54DD\u54CF\u54DE\u551B\u54E7\u5520\u54FD\u5514\u54F3\u5522\u5523\u550F\u5511\u5527\u552A\u5567\u558F\u55B5\u5549\u556D\u5541\u5555\u553F\u5550\u553C\uFFFD".split("");
        for (j3 = 0; j3 != D5[223].length; ++j3)
          if (D5[223][j3].charCodeAt(0) !== 65533) {
            e7[D5[223][j3]] = 57088 + j3;
            d2[57088 + j3] = D5[223][j3];
          }
        D5[224] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u90C2\u90C3\u90C6\u90C8\u90C9\u90CB\u90CC\u90CD\u90D2\u90D4\u90D5\u90D6\u90D8\u90D9\u90DA\u90DE\u90DF\u90E0\u90E3\u90E4\u90E5\u90E9\u90EA\u90EC\u90EE\u90F0\u90F1\u90F2\u90F3\u90F5\u90F6\u90F7\u90F9\u90FA\u90FB\u90FC\u90FF\u9100\u9101\u9103\u9105\u9106\u9107\u9108\u9109\u910A\u910B\u910C\u910D\u910E\u910F\u9110\u9111\u9112\u9113\u9114\u9115\u9116\u9117\u9118\u911A\u911B\u911C\uFFFD\u911D\u911F\u9120\u9121\u9124\u9125\u9126\u9127\u9128\u9129\u912A\u912B\u912C\u912D\u912E\u9130\u9132\u9133\u9134\u9135\u9136\u9137\u9138\u913A\u913B\u913C\u913D\u913E\u913F\u9140\u9141\u9142\u9144\u5537\u5556\u5575\u5576\u5577\u5533\u5530\u555C\u558B\u55D2\u5583\u55B1\u55B9\u5588\u5581\u559F\u557E\u55D6\u5591\u557B\u55DF\u55BD\u55BE\u5594\u5599\u55EA\u55F7\u55C9\u561F\u55D1\u55EB\u55EC\u55D4\u55E6\u55DD\u55C4\u55EF\u55E5\u55F2\u55F3\u55CC\u55CD\u55E8\u55F5\u55E4\u8F94\u561E\u5608\u560C\u5601\u5624\u5623\u55FE\u5600\u5627\u562D\u5658\u5639\u5657\u562C\u564D\u5662\u5659\u565C\u564C\u5654\u5686\u5664\u5671\u566B\u567B\u567C\u5685\u5693\u56AF\u56D4\u56D7\u56DD\u56E1\u56F5\u56EB\u56F9\u56FF\u5704\u570A\u5709\u571C\u5E0F\u5E19\u5E14\u5E11\u5E31\u5E3B\u5E3C\uFFFD".split("");
        for (j3 = 0; j3 != D5[224].length; ++j3)
          if (D5[224][j3].charCodeAt(0) !== 65533) {
            e7[D5[224][j3]] = 57344 + j3;
            d2[57344 + j3] = D5[224][j3];
          }
        D5[225] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u9145\u9147\u9148\u9151\u9153\u9154\u9155\u9156\u9158\u9159\u915B\u915C\u915F\u9160\u9166\u9167\u9168\u916B\u916D\u9173\u917A\u917B\u917C\u9180\u9181\u9182\u9183\u9184\u9186\u9188\u918A\u918E\u918F\u9193\u9194\u9195\u9196\u9197\u9198\u9199\u919C\u919D\u919E\u919F\u91A0\u91A1\u91A4\u91A5\u91A6\u91A7\u91A8\u91A9\u91AB\u91AC\u91B0\u91B1\u91B2\u91B3\u91B6\u91B7\u91B8\u91B9\u91BB\uFFFD\u91BC\u91BD\u91BE\u91BF\u91C0\u91C1\u91C2\u91C3\u91C4\u91C5\u91C6\u91C8\u91CB\u91D0\u91D2\u91D3\u91D4\u91D5\u91D6\u91D7\u91D8\u91D9\u91DA\u91DB\u91DD\u91DE\u91DF\u91E0\u91E1\u91E2\u91E3\u91E4\u91E5\u5E37\u5E44\u5E54\u5E5B\u5E5E\u5E61\u5C8C\u5C7A\u5C8D\u5C90\u5C96\u5C88\u5C98\u5C99\u5C91\u5C9A\u5C9C\u5CB5\u5CA2\u5CBD\u5CAC\u5CAB\u5CB1\u5CA3\u5CC1\u5CB7\u5CC4\u5CD2\u5CE4\u5CCB\u5CE5\u5D02\u5D03\u5D27\u5D26\u5D2E\u5D24\u5D1E\u5D06\u5D1B\u5D58\u5D3E\u5D34\u5D3D\u5D6C\u5D5B\u5D6F\u5D5D\u5D6B\u5D4B\u5D4A\u5D69\u5D74\u5D82\u5D99\u5D9D\u8C73\u5DB7\u5DC5\u5F73\u5F77\u5F82\u5F87\u5F89\u5F8C\u5F95\u5F99\u5F9C\u5FA8\u5FAD\u5FB5\u5FBC\u8862\u5F61\u72AD\u72B0\u72B4\u72B7\u72B8\u72C3\u72C1\u72CE\u72CD\u72D2\u72E8\u72EF\u72E9\u72F2\u72F4\u72F7\u7301\u72F3\u7303\u72FA\uFFFD".split("");
        for (j3 = 0; j3 != D5[225].length; ++j3)
          if (D5[225][j3].charCodeAt(0) !== 65533) {
            e7[D5[225][j3]] = 57600 + j3;
            d2[57600 + j3] = D5[225][j3];
          }
        D5[226] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u91E6\u91E7\u91E8\u91E9\u91EA\u91EB\u91EC\u91ED\u91EE\u91EF\u91F0\u91F1\u91F2\u91F3\u91F4\u91F5\u91F6\u91F7\u91F8\u91F9\u91FA\u91FB\u91FC\u91FD\u91FE\u91FF\u9200\u9201\u9202\u9203\u9204\u9205\u9206\u9207\u9208\u9209\u920A\u920B\u920C\u920D\u920E\u920F\u9210\u9211\u9212\u9213\u9214\u9215\u9216\u9217\u9218\u9219\u921A\u921B\u921C\u921D\u921E\u921F\u9220\u9221\u9222\u9223\u9224\uFFFD\u9225\u9226\u9227\u9228\u9229\u922A\u922B\u922C\u922D\u922E\u922F\u9230\u9231\u9232\u9233\u9234\u9235\u9236\u9237\u9238\u9239\u923A\u923B\u923C\u923D\u923E\u923F\u9240\u9241\u9242\u9243\u9244\u9245\u72FB\u7317\u7313\u7321\u730A\u731E\u731D\u7315\u7322\u7339\u7325\u732C\u7338\u7331\u7350\u734D\u7357\u7360\u736C\u736F\u737E\u821B\u5925\u98E7\u5924\u5902\u9963\u9967\u9968\u9969\u996A\u996B\u996C\u9974\u9977\u997D\u9980\u9984\u9987\u998A\u998D\u9990\u9991\u9993\u9994\u9995\u5E80\u5E91\u5E8B\u5E96\u5EA5\u5EA0\u5EB9\u5EB5\u5EBE\u5EB3\u8D53\u5ED2\u5ED1\u5EDB\u5EE8\u5EEA\u81BA\u5FC4\u5FC9\u5FD6\u5FCF\u6003\u5FEE\u6004\u5FE1\u5FE4\u5FFE\u6005\u6006\u5FEA\u5FED\u5FF8\u6019\u6035\u6026\u601B\u600F\u600D\u6029\u602B\u600A\u603F\u6021\u6078\u6079\u607B\u607A\u6042\uFFFD".split("");
        for (j3 = 0; j3 != D5[226].length; ++j3)
          if (D5[226][j3].charCodeAt(0) !== 65533) {
            e7[D5[226][j3]] = 57856 + j3;
            d2[57856 + j3] = D5[226][j3];
          }
        D5[227] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u9246\u9247\u9248\u9249\u924A\u924B\u924C\u924D\u924E\u924F\u9250\u9251\u9252\u9253\u9254\u9255\u9256\u9257\u9258\u9259\u925A\u925B\u925C\u925D\u925E\u925F\u9260\u9261\u9262\u9263\u9264\u9265\u9266\u9267\u9268\u9269\u926A\u926B\u926C\u926D\u926E\u926F\u9270\u9271\u9272\u9273\u9275\u9276\u9277\u9278\u9279\u927A\u927B\u927C\u927D\u927E\u927F\u9280\u9281\u9282\u9283\u9284\u9285\uFFFD\u9286\u9287\u9288\u9289\u928A\u928B\u928C\u928D\u928F\u9290\u9291\u9292\u9293\u9294\u9295\u9296\u9297\u9298\u9299\u929A\u929B\u929C\u929D\u929E\u929F\u92A0\u92A1\u92A2\u92A3\u92A4\u92A5\u92A6\u92A7\u606A\u607D\u6096\u609A\u60AD\u609D\u6083\u6092\u608C\u609B\u60EC\u60BB\u60B1\u60DD\u60D8\u60C6\u60DA\u60B4\u6120\u6126\u6115\u6123\u60F4\u6100\u610E\u612B\u614A\u6175\u61AC\u6194\u61A7\u61B7\u61D4\u61F5\u5FDD\u96B3\u95E9\u95EB\u95F1\u95F3\u95F5\u95F6\u95FC\u95FE\u9603\u9604\u9606\u9608\u960A\u960B\u960C\u960D\u960F\u9612\u9615\u9616\u9617\u9619\u961A\u4E2C\u723F\u6215\u6C35\u6C54\u6C5C\u6C4A\u6CA3\u6C85\u6C90\u6C94\u6C8C\u6C68\u6C69\u6C74\u6C76\u6C86\u6CA9\u6CD0\u6CD4\u6CAD\u6CF7\u6CF8\u6CF1\u6CD7\u6CB2\u6CE0\u6CD6\u6CFA\u6CEB\u6CEE\u6CB1\u6CD3\u6CEF\u6CFE\uFFFD".split("");
        for (j3 = 0; j3 != D5[227].length; ++j3)
          if (D5[227][j3].charCodeAt(0) !== 65533) {
            e7[D5[227][j3]] = 58112 + j3;
            d2[58112 + j3] = D5[227][j3];
          }
        D5[228] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u92A8\u92A9\u92AA\u92AB\u92AC\u92AD\u92AF\u92B0\u92B1\u92B2\u92B3\u92B4\u92B5\u92B6\u92B7\u92B8\u92B9\u92BA\u92BB\u92BC\u92BD\u92BE\u92BF\u92C0\u92C1\u92C2\u92C3\u92C4\u92C5\u92C6\u92C7\u92C9\u92CA\u92CB\u92CC\u92CD\u92CE\u92CF\u92D0\u92D1\u92D2\u92D3\u92D4\u92D5\u92D6\u92D7\u92D8\u92D9\u92DA\u92DB\u92DC\u92DD\u92DE\u92DF\u92E0\u92E1\u92E2\u92E3\u92E4\u92E5\u92E6\u92E7\u92E8\uFFFD\u92E9\u92EA\u92EB\u92EC\u92ED\u92EE\u92EF\u92F0\u92F1\u92F2\u92F3\u92F4\u92F5\u92F6\u92F7\u92F8\u92F9\u92FA\u92FB\u92FC\u92FD\u92FE\u92FF\u9300\u9301\u9302\u9303\u9304\u9305\u9306\u9307\u9308\u9309\u6D39\u6D27\u6D0C\u6D43\u6D48\u6D07\u6D04\u6D19\u6D0E\u6D2B\u6D4D\u6D2E\u6D35\u6D1A\u6D4F\u6D52\u6D54\u6D33\u6D91\u6D6F\u6D9E\u6DA0\u6D5E\u6D93\u6D94\u6D5C\u6D60\u6D7C\u6D63\u6E1A\u6DC7\u6DC5\u6DDE\u6E0E\u6DBF\u6DE0\u6E11\u6DE6\u6DDD\u6DD9\u6E16\u6DAB\u6E0C\u6DAE\u6E2B\u6E6E\u6E4E\u6E6B\u6EB2\u6E5F\u6E86\u6E53\u6E54\u6E32\u6E25\u6E44\u6EDF\u6EB1\u6E98\u6EE0\u6F2D\u6EE2\u6EA5\u6EA7\u6EBD\u6EBB\u6EB7\u6ED7\u6EB4\u6ECF\u6E8F\u6EC2\u6E9F\u6F62\u6F46\u6F47\u6F24\u6F15\u6EF9\u6F2F\u6F36\u6F4B\u6F74\u6F2A\u6F09\u6F29\u6F89\u6F8D\u6F8C\u6F78\u6F72\u6F7C\u6F7A\u6FD1\uFFFD".split("");
        for (j3 = 0; j3 != D5[228].length; ++j3)
          if (D5[228][j3].charCodeAt(0) !== 65533) {
            e7[D5[228][j3]] = 58368 + j3;
            d2[58368 + j3] = D5[228][j3];
          }
        D5[229] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u930A\u930B\u930C\u930D\u930E\u930F\u9310\u9311\u9312\u9313\u9314\u9315\u9316\u9317\u9318\u9319\u931A\u931B\u931C\u931D\u931E\u931F\u9320\u9321\u9322\u9323\u9324\u9325\u9326\u9327\u9328\u9329\u932A\u932B\u932C\u932D\u932E\u932F\u9330\u9331\u9332\u9333\u9334\u9335\u9336\u9337\u9338\u9339\u933A\u933B\u933C\u933D\u933F\u9340\u9341\u9342\u9343\u9344\u9345\u9346\u9347\u9348\u9349\uFFFD\u934A\u934B\u934C\u934D\u934E\u934F\u9350\u9351\u9352\u9353\u9354\u9355\u9356\u9357\u9358\u9359\u935A\u935B\u935C\u935D\u935E\u935F\u9360\u9361\u9362\u9363\u9364\u9365\u9366\u9367\u9368\u9369\u936B\u6FC9\u6FA7\u6FB9\u6FB6\u6FC2\u6FE1\u6FEE\u6FDE\u6FE0\u6FEF\u701A\u7023\u701B\u7039\u7035\u704F\u705E\u5B80\u5B84\u5B95\u5B93\u5BA5\u5BB8\u752F\u9A9E\u6434\u5BE4\u5BEE\u8930\u5BF0\u8E47\u8B07\u8FB6\u8FD3\u8FD5\u8FE5\u8FEE\u8FE4\u8FE9\u8FE6\u8FF3\u8FE8\u9005\u9004\u900B\u9026\u9011\u900D\u9016\u9021\u9035\u9036\u902D\u902F\u9044\u9051\u9052\u9050\u9068\u9058\u9062\u905B\u66B9\u9074\u907D\u9082\u9088\u9083\u908B\u5F50\u5F57\u5F56\u5F58\u5C3B\u54AB\u5C50\u5C59\u5B71\u5C63\u5C66\u7FBC\u5F2A\u5F29\u5F2D\u8274\u5F3C\u9B3B\u5C6E\u5981\u5983\u598D\u59A9\u59AA\u59A3\uFFFD".split("");
        for (j3 = 0; j3 != D5[229].length; ++j3)
          if (D5[229][j3].charCodeAt(0) !== 65533) {
            e7[D5[229][j3]] = 58624 + j3;
            d2[58624 + j3] = D5[229][j3];
          }
        D5[230] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u936C\u936D\u936E\u936F\u9370\u9371\u9372\u9373\u9374\u9375\u9376\u9377\u9378\u9379\u937A\u937B\u937C\u937D\u937E\u937F\u9380\u9381\u9382\u9383\u9384\u9385\u9386\u9387\u9388\u9389\u938A\u938B\u938C\u938D\u938E\u9390\u9391\u9392\u9393\u9394\u9395\u9396\u9397\u9398\u9399\u939A\u939B\u939C\u939D\u939E\u939F\u93A0\u93A1\u93A2\u93A3\u93A4\u93A5\u93A6\u93A7\u93A8\u93A9\u93AA\u93AB\uFFFD\u93AC\u93AD\u93AE\u93AF\u93B0\u93B1\u93B2\u93B3\u93B4\u93B5\u93B6\u93B7\u93B8\u93B9\u93BA\u93BB\u93BC\u93BD\u93BE\u93BF\u93C0\u93C1\u93C2\u93C3\u93C4\u93C5\u93C6\u93C7\u93C8\u93C9\u93CB\u93CC\u93CD\u5997\u59CA\u59AB\u599E\u59A4\u59D2\u59B2\u59AF\u59D7\u59BE\u5A05\u5A06\u59DD\u5A08\u59E3\u59D8\u59F9\u5A0C\u5A09\u5A32\u5A34\u5A11\u5A23\u5A13\u5A40\u5A67\u5A4A\u5A55\u5A3C\u5A62\u5A75\u80EC\u5AAA\u5A9B\u5A77\u5A7A\u5ABE\u5AEB\u5AB2\u5AD2\u5AD4\u5AB8\u5AE0\u5AE3\u5AF1\u5AD6\u5AE6\u5AD8\u5ADC\u5B09\u5B17\u5B16\u5B32\u5B37\u5B40\u5C15\u5C1C\u5B5A\u5B65\u5B73\u5B51\u5B53\u5B62\u9A75\u9A77\u9A78\u9A7A\u9A7F\u9A7D\u9A80\u9A81\u9A85\u9A88\u9A8A\u9A90\u9A92\u9A93\u9A96\u9A98\u9A9B\u9A9C\u9A9D\u9A9F\u9AA0\u9AA2\u9AA3\u9AA5\u9AA7\u7E9F\u7EA1\u7EA3\u7EA5\u7EA8\u7EA9\uFFFD".split("");
        for (j3 = 0; j3 != D5[230].length; ++j3)
          if (D5[230][j3].charCodeAt(0) !== 65533) {
            e7[D5[230][j3]] = 58880 + j3;
            d2[58880 + j3] = D5[230][j3];
          }
        D5[231] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u93CE\u93CF\u93D0\u93D1\u93D2\u93D3\u93D4\u93D5\u93D7\u93D8\u93D9\u93DA\u93DB\u93DC\u93DD\u93DE\u93DF\u93E0\u93E1\u93E2\u93E3\u93E4\u93E5\u93E6\u93E7\u93E8\u93E9\u93EA\u93EB\u93EC\u93ED\u93EE\u93EF\u93F0\u93F1\u93F2\u93F3\u93F4\u93F5\u93F6\u93F7\u93F8\u93F9\u93FA\u93FB\u93FC\u93FD\u93FE\u93FF\u9400\u9401\u9402\u9403\u9404\u9405\u9406\u9407\u9408\u9409\u940A\u940B\u940C\u940D\uFFFD\u940E\u940F\u9410\u9411\u9412\u9413\u9414\u9415\u9416\u9417\u9418\u9419\u941A\u941B\u941C\u941D\u941E\u941F\u9420\u9421\u9422\u9423\u9424\u9425\u9426\u9427\u9428\u9429\u942A\u942B\u942C\u942D\u942E\u7EAD\u7EB0\u7EBE\u7EC0\u7EC1\u7EC2\u7EC9\u7ECB\u7ECC\u7ED0\u7ED4\u7ED7\u7EDB\u7EE0\u7EE1\u7EE8\u7EEB\u7EEE\u7EEF\u7EF1\u7EF2\u7F0D\u7EF6\u7EFA\u7EFB\u7EFE\u7F01\u7F02\u7F03\u7F07\u7F08\u7F0B\u7F0C\u7F0F\u7F11\u7F12\u7F17\u7F19\u7F1C\u7F1B\u7F1F\u7F21\u7F22\u7F23\u7F24\u7F25\u7F26\u7F27\u7F2A\u7F2B\u7F2C\u7F2D\u7F2F\u7F30\u7F31\u7F32\u7F33\u7F35\u5E7A\u757F\u5DDB\u753E\u9095\u738E\u7391\u73AE\u73A2\u739F\u73CF\u73C2\u73D1\u73B7\u73B3\u73C0\u73C9\u73C8\u73E5\u73D9\u987C\u740A\u73E9\u73E7\u73DE\u73BA\u73F2\u740F\u742A\u745B\u7426\u7425\u7428\u7430\u742E\u742C\uFFFD".split("");
        for (j3 = 0; j3 != D5[231].length; ++j3)
          if (D5[231][j3].charCodeAt(0) !== 65533) {
            e7[D5[231][j3]] = 59136 + j3;
            d2[59136 + j3] = D5[231][j3];
          }
        D5[232] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u942F\u9430\u9431\u9432\u9433\u9434\u9435\u9436\u9437\u9438\u9439\u943A\u943B\u943C\u943D\u943F\u9440\u9441\u9442\u9443\u9444\u9445\u9446\u9447\u9448\u9449\u944A\u944B\u944C\u944D\u944E\u944F\u9450\u9451\u9452\u9453\u9454\u9455\u9456\u9457\u9458\u9459\u945A\u945B\u945C\u945D\u945E\u945F\u9460\u9461\u9462\u9463\u9464\u9465\u9466\u9467\u9468\u9469\u946A\u946C\u946D\u946E\u946F\uFFFD\u9470\u9471\u9472\u9473\u9474\u9475\u9476\u9477\u9478\u9479\u947A\u947B\u947C\u947D\u947E\u947F\u9480\u9481\u9482\u9483\u9484\u9491\u9496\u9498\u94C7\u94CF\u94D3\u94D4\u94DA\u94E6\u94FB\u951C\u9520\u741B\u741A\u7441\u745C\u7457\u7455\u7459\u7477\u746D\u747E\u749C\u748E\u7480\u7481\u7487\u748B\u749E\u74A8\u74A9\u7490\u74A7\u74D2\u74BA\u97EA\u97EB\u97EC\u674C\u6753\u675E\u6748\u6769\u67A5\u6787\u676A\u6773\u6798\u67A7\u6775\u67A8\u679E\u67AD\u678B\u6777\u677C\u67F0\u6809\u67D8\u680A\u67E9\u67B0\u680C\u67D9\u67B5\u67DA\u67B3\u67DD\u6800\u67C3\u67B8\u67E2\u680E\u67C1\u67FD\u6832\u6833\u6860\u6861\u684E\u6862\u6844\u6864\u6883\u681D\u6855\u6866\u6841\u6867\u6840\u683E\u684A\u6849\u6829\u68B5\u688F\u6874\u6877\u6893\u686B\u68C2\u696E\u68FC\u691F\u6920\u68F9\uFFFD".split("");
        for (j3 = 0; j3 != D5[232].length; ++j3)
          if (D5[232][j3].charCodeAt(0) !== 65533) {
            e7[D5[232][j3]] = 59392 + j3;
            d2[59392 + j3] = D5[232][j3];
          }
        D5[233] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u9527\u9533\u953D\u9543\u9548\u954B\u9555\u955A\u9560\u956E\u9574\u9575\u9577\u9578\u9579\u957A\u957B\u957C\u957D\u957E\u9580\u9581\u9582\u9583\u9584\u9585\u9586\u9587\u9588\u9589\u958A\u958B\u958C\u958D\u958E\u958F\u9590\u9591\u9592\u9593\u9594\u9595\u9596\u9597\u9598\u9599\u959A\u959B\u959C\u959D\u959E\u959F\u95A0\u95A1\u95A2\u95A3\u95A4\u95A5\u95A6\u95A7\u95A8\u95A9\u95AA\uFFFD\u95AB\u95AC\u95AD\u95AE\u95AF\u95B0\u95B1\u95B2\u95B3\u95B4\u95B5\u95B6\u95B7\u95B8\u95B9\u95BA\u95BB\u95BC\u95BD\u95BE\u95BF\u95C0\u95C1\u95C2\u95C3\u95C4\u95C5\u95C6\u95C7\u95C8\u95C9\u95CA\u95CB\u6924\u68F0\u690B\u6901\u6957\u68E3\u6910\u6971\u6939\u6960\u6942\u695D\u6984\u696B\u6980\u6998\u6978\u6934\u69CC\u6987\u6988\u69CE\u6989\u6966\u6963\u6979\u699B\u69A7\u69BB\u69AB\u69AD\u69D4\u69B1\u69C1\u69CA\u69DF\u6995\u69E0\u698D\u69FF\u6A2F\u69ED\u6A17\u6A18\u6A65\u69F2\u6A44\u6A3E\u6AA0\u6A50\u6A5B\u6A35\u6A8E\u6A79\u6A3D\u6A28\u6A58\u6A7C\u6A91\u6A90\u6AA9\u6A97\u6AAB\u7337\u7352\u6B81\u6B82\u6B87\u6B84\u6B92\u6B93\u6B8D\u6B9A\u6B9B\u6BA1\u6BAA\u8F6B\u8F6D\u8F71\u8F72\u8F73\u8F75\u8F76\u8F78\u8F77\u8F79\u8F7A\u8F7C\u8F7E\u8F81\u8F82\u8F84\u8F87\u8F8B\uFFFD".split("");
        for (j3 = 0; j3 != D5[233].length; ++j3)
          if (D5[233][j3].charCodeAt(0) !== 65533) {
            e7[D5[233][j3]] = 59648 + j3;
            d2[59648 + j3] = D5[233][j3];
          }
        D5[234] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u95CC\u95CD\u95CE\u95CF\u95D0\u95D1\u95D2\u95D3\u95D4\u95D5\u95D6\u95D7\u95D8\u95D9\u95DA\u95DB\u95DC\u95DD\u95DE\u95DF\u95E0\u95E1\u95E2\u95E3\u95E4\u95E5\u95E6\u95E7\u95EC\u95FF\u9607\u9613\u9618\u961B\u961E\u9620\u9623\u9624\u9625\u9626\u9627\u9628\u9629\u962B\u962C\u962D\u962F\u9630\u9637\u9638\u9639\u963A\u963E\u9641\u9643\u964A\u964E\u964F\u9651\u9652\u9653\u9656\u9657\uFFFD\u9658\u9659\u965A\u965C\u965D\u965E\u9660\u9663\u9665\u9666\u966B\u966D\u966E\u966F\u9670\u9671\u9673\u9678\u9679\u967A\u967B\u967C\u967D\u967E\u967F\u9680\u9681\u9682\u9683\u9684\u9687\u9689\u968A\u8F8D\u8F8E\u8F8F\u8F98\u8F9A\u8ECE\u620B\u6217\u621B\u621F\u6222\u6221\u6225\u6224\u622C\u81E7\u74EF\u74F4\u74FF\u750F\u7511\u7513\u6534\u65EE\u65EF\u65F0\u660A\u6619\u6772\u6603\u6615\u6600\u7085\u66F7\u661D\u6634\u6631\u6636\u6635\u8006\u665F\u6654\u6641\u664F\u6656\u6661\u6657\u6677\u6684\u668C\u66A7\u669D\u66BE\u66DB\u66DC\u66E6\u66E9\u8D32\u8D33\u8D36\u8D3B\u8D3D\u8D40\u8D45\u8D46\u8D48\u8D49\u8D47\u8D4D\u8D55\u8D59\u89C7\u89CA\u89CB\u89CC\u89CE\u89CF\u89D0\u89D1\u726E\u729F\u725D\u7266\u726F\u727E\u727F\u7284\u728B\u728D\u728F\u7292\u6308\u6332\u63B0\uFFFD".split("");
        for (j3 = 0; j3 != D5[234].length; ++j3)
          if (D5[234][j3].charCodeAt(0) !== 65533) {
            e7[D5[234][j3]] = 59904 + j3;
            d2[59904 + j3] = D5[234][j3];
          }
        D5[235] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u968C\u968E\u9691\u9692\u9693\u9695\u9696\u969A\u969B\u969D\u969E\u969F\u96A0\u96A1\u96A2\u96A3\u96A4\u96A5\u96A6\u96A8\u96A9\u96AA\u96AB\u96AC\u96AD\u96AE\u96AF\u96B1\u96B2\u96B4\u96B5\u96B7\u96B8\u96BA\u96BB\u96BF\u96C2\u96C3\u96C8\u96CA\u96CB\u96D0\u96D1\u96D3\u96D4\u96D6\u96D7\u96D8\u96D9\u96DA\u96DB\u96DC\u96DD\u96DE\u96DF\u96E1\u96E2\u96E3\u96E4\u96E5\u96E6\u96E7\u96EB\uFFFD\u96EC\u96ED\u96EE\u96F0\u96F1\u96F2\u96F4\u96F5\u96F8\u96FA\u96FB\u96FC\u96FD\u96FF\u9702\u9703\u9705\u970A\u970B\u970C\u9710\u9711\u9712\u9714\u9715\u9717\u9718\u9719\u971A\u971B\u971D\u971F\u9720\u643F\u64D8\u8004\u6BEA\u6BF3\u6BFD\u6BF5\u6BF9\u6C05\u6C07\u6C06\u6C0D\u6C15\u6C18\u6C19\u6C1A\u6C21\u6C29\u6C24\u6C2A\u6C32\u6535\u6555\u656B\u724D\u7252\u7256\u7230\u8662\u5216\u809F\u809C\u8093\u80BC\u670A\u80BD\u80B1\u80AB\u80AD\u80B4\u80B7\u80E7\u80E8\u80E9\u80EA\u80DB\u80C2\u80C4\u80D9\u80CD\u80D7\u6710\u80DD\u80EB\u80F1\u80F4\u80ED\u810D\u810E\u80F2\u80FC\u6715\u8112\u8C5A\u8136\u811E\u812C\u8118\u8132\u8148\u814C\u8153\u8174\u8159\u815A\u8171\u8160\u8169\u817C\u817D\u816D\u8167\u584D\u5AB5\u8188\u8182\u8191\u6ED5\u81A3\u81AA\u81CC\u6726\u81CA\u81BB\uFFFD".split("");
        for (j3 = 0; j3 != D5[235].length; ++j3)
          if (D5[235][j3].charCodeAt(0) !== 65533) {
            e7[D5[235][j3]] = 60160 + j3;
            d2[60160 + j3] = D5[235][j3];
          }
        D5[236] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u9721\u9722\u9723\u9724\u9725\u9726\u9727\u9728\u9729\u972B\u972C\u972E\u972F\u9731\u9733\u9734\u9735\u9736\u9737\u973A\u973B\u973C\u973D\u973F\u9740\u9741\u9742\u9743\u9744\u9745\u9746\u9747\u9748\u9749\u974A\u974B\u974C\u974D\u974E\u974F\u9750\u9751\u9754\u9755\u9757\u9758\u975A\u975C\u975D\u975F\u9763\u9764\u9766\u9767\u9768\u976A\u976B\u976C\u976D\u976E\u976F\u9770\u9771\uFFFD\u9772\u9775\u9777\u9778\u9779\u977A\u977B\u977D\u977E\u977F\u9780\u9781\u9782\u9783\u9784\u9786\u9787\u9788\u9789\u978A\u978C\u978E\u978F\u9790\u9793\u9795\u9796\u9797\u9799\u979A\u979B\u979C\u979D\u81C1\u81A6\u6B24\u6B37\u6B39\u6B43\u6B46\u6B59\u98D1\u98D2\u98D3\u98D5\u98D9\u98DA\u6BB3\u5F40\u6BC2\u89F3\u6590\u9F51\u6593\u65BC\u65C6\u65C4\u65C3\u65CC\u65CE\u65D2\u65D6\u7080\u709C\u7096\u709D\u70BB\u70C0\u70B7\u70AB\u70B1\u70E8\u70CA\u7110\u7113\u7116\u712F\u7131\u7173\u715C\u7168\u7145\u7172\u714A\u7178\u717A\u7198\u71B3\u71B5\u71A8\u71A0\u71E0\u71D4\u71E7\u71F9\u721D\u7228\u706C\u7118\u7166\u71B9\u623E\u623D\u6243\u6248\u6249\u793B\u7940\u7946\u7949\u795B\u795C\u7953\u795A\u7962\u7957\u7960\u796F\u7967\u797A\u7985\u798A\u799A\u79A7\u79B3\u5FD1\u5FD0\uFFFD".split("");
        for (j3 = 0; j3 != D5[236].length; ++j3)
          if (D5[236][j3].charCodeAt(0) !== 65533) {
            e7[D5[236][j3]] = 60416 + j3;
            d2[60416 + j3] = D5[236][j3];
          }
        D5[237] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u979E\u979F\u97A1\u97A2\u97A4\u97A5\u97A6\u97A7\u97A8\u97A9\u97AA\u97AC\u97AE\u97B0\u97B1\u97B3\u97B5\u97B6\u97B7\u97B8\u97B9\u97BA\u97BB\u97BC\u97BD\u97BE\u97BF\u97C0\u97C1\u97C2\u97C3\u97C4\u97C5\u97C6\u97C7\u97C8\u97C9\u97CA\u97CB\u97CC\u97CD\u97CE\u97CF\u97D0\u97D1\u97D2\u97D3\u97D4\u97D5\u97D6\u97D7\u97D8\u97D9\u97DA\u97DB\u97DC\u97DD\u97DE\u97DF\u97E0\u97E1\u97E2\u97E3\uFFFD\u97E4\u97E5\u97E8\u97EE\u97EF\u97F0\u97F1\u97F2\u97F4\u97F7\u97F8\u97F9\u97FA\u97FB\u97FC\u97FD\u97FE\u97FF\u9800\u9801\u9802\u9803\u9804\u9805\u9806\u9807\u9808\u9809\u980A\u980B\u980C\u980D\u980E\u603C\u605D\u605A\u6067\u6041\u6059\u6063\u60AB\u6106\u610D\u615D\u61A9\u619D\u61CB\u61D1\u6206\u8080\u807F\u6C93\u6CF6\u6DFC\u77F6\u77F8\u7800\u7809\u7817\u7818\u7811\u65AB\u782D\u781C\u781D\u7839\u783A\u783B\u781F\u783C\u7825\u782C\u7823\u7829\u784E\u786D\u7856\u7857\u7826\u7850\u7847\u784C\u786A\u789B\u7893\u789A\u7887\u789C\u78A1\u78A3\u78B2\u78B9\u78A5\u78D4\u78D9\u78C9\u78EC\u78F2\u7905\u78F4\u7913\u7924\u791E\u7934\u9F9B\u9EF9\u9EFB\u9EFC\u76F1\u7704\u770D\u76F9\u7707\u7708\u771A\u7722\u7719\u772D\u7726\u7735\u7738\u7750\u7751\u7747\u7743\u775A\u7768\uFFFD".split("");
        for (j3 = 0; j3 != D5[237].length; ++j3)
          if (D5[237][j3].charCodeAt(0) !== 65533) {
            e7[D5[237][j3]] = 60672 + j3;
            d2[60672 + j3] = D5[237][j3];
          }
        D5[238] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u980F\u9810\u9811\u9812\u9813\u9814\u9815\u9816\u9817\u9818\u9819\u981A\u981B\u981C\u981D\u981E\u981F\u9820\u9821\u9822\u9823\u9824\u9825\u9826\u9827\u9828\u9829\u982A\u982B\u982C\u982D\u982E\u982F\u9830\u9831\u9832\u9833\u9834\u9835\u9836\u9837\u9838\u9839\u983A\u983B\u983C\u983D\u983E\u983F\u9840\u9841\u9842\u9843\u9844\u9845\u9846\u9847\u9848\u9849\u984A\u984B\u984C\u984D\uFFFD\u984E\u984F\u9850\u9851\u9852\u9853\u9854\u9855\u9856\u9857\u9858\u9859\u985A\u985B\u985C\u985D\u985E\u985F\u9860\u9861\u9862\u9863\u9864\u9865\u9866\u9867\u9868\u9869\u986A\u986B\u986C\u986D\u986E\u7762\u7765\u777F\u778D\u777D\u7780\u778C\u7791\u779F\u77A0\u77B0\u77B5\u77BD\u753A\u7540\u754E\u754B\u7548\u755B\u7572\u7579\u7583\u7F58\u7F61\u7F5F\u8A48\u7F68\u7F74\u7F71\u7F79\u7F81\u7F7E\u76CD\u76E5\u8832\u9485\u9486\u9487\u948B\u948A\u948C\u948D\u948F\u9490\u9494\u9497\u9495\u949A\u949B\u949C\u94A3\u94A4\u94AB\u94AA\u94AD\u94AC\u94AF\u94B0\u94B2\u94B4\u94B6\u94B7\u94B8\u94B9\u94BA\u94BC\u94BD\u94BF\u94C4\u94C8\u94C9\u94CA\u94CB\u94CC\u94CD\u94CE\u94D0\u94D1\u94D2\u94D5\u94D6\u94D7\u94D9\u94D8\u94DB\u94DE\u94DF\u94E0\u94E2\u94E4\u94E5\u94E7\u94E8\u94EA\uFFFD".split("");
        for (j3 = 0; j3 != D5[238].length; ++j3)
          if (D5[238][j3].charCodeAt(0) !== 65533) {
            e7[D5[238][j3]] = 60928 + j3;
            d2[60928 + j3] = D5[238][j3];
          }
        D5[239] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u986F\u9870\u9871\u9872\u9873\u9874\u988B\u988E\u9892\u9895\u9899\u98A3\u98A8\u98A9\u98AA\u98AB\u98AC\u98AD\u98AE\u98AF\u98B0\u98B1\u98B2\u98B3\u98B4\u98B5\u98B6\u98B7\u98B8\u98B9\u98BA\u98BB\u98BC\u98BD\u98BE\u98BF\u98C0\u98C1\u98C2\u98C3\u98C4\u98C5\u98C6\u98C7\u98C8\u98C9\u98CA\u98CB\u98CC\u98CD\u98CF\u98D0\u98D4\u98D6\u98D7\u98DB\u98DC\u98DD\u98E0\u98E1\u98E2\u98E3\u98E4\uFFFD\u98E5\u98E6\u98E9\u98EA\u98EB\u98EC\u98ED\u98EE\u98EF\u98F0\u98F1\u98F2\u98F3\u98F4\u98F5\u98F6\u98F7\u98F8\u98F9\u98FA\u98FB\u98FC\u98FD\u98FE\u98FF\u9900\u9901\u9902\u9903\u9904\u9905\u9906\u9907\u94E9\u94EB\u94EE\u94EF\u94F3\u94F4\u94F5\u94F7\u94F9\u94FC\u94FD\u94FF\u9503\u9502\u9506\u9507\u9509\u950A\u950D\u950E\u950F\u9512\u9513\u9514\u9515\u9516\u9518\u951B\u951D\u951E\u951F\u9522\u952A\u952B\u9529\u952C\u9531\u9532\u9534\u9536\u9537\u9538\u953C\u953E\u953F\u9542\u9535\u9544\u9545\u9546\u9549\u954C\u954E\u954F\u9552\u9553\u9554\u9556\u9557\u9558\u9559\u955B\u955E\u955F\u955D\u9561\u9562\u9564\u9565\u9566\u9567\u9568\u9569\u956A\u956B\u956C\u956F\u9571\u9572\u9573\u953A\u77E7\u77EC\u96C9\u79D5\u79ED\u79E3\u79EB\u7A06\u5D47\u7A03\u7A02\u7A1E\u7A14\uFFFD".split("");
        for (j3 = 0; j3 != D5[239].length; ++j3)
          if (D5[239][j3].charCodeAt(0) !== 65533) {
            e7[D5[239][j3]] = 61184 + j3;
            d2[61184 + j3] = D5[239][j3];
          }
        D5[240] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u9908\u9909\u990A\u990B\u990C\u990E\u990F\u9911\u9912\u9913\u9914\u9915\u9916\u9917\u9918\u9919\u991A\u991B\u991C\u991D\u991E\u991F\u9920\u9921\u9922\u9923\u9924\u9925\u9926\u9927\u9928\u9929\u992A\u992B\u992C\u992D\u992F\u9930\u9931\u9932\u9933\u9934\u9935\u9936\u9937\u9938\u9939\u993A\u993B\u993C\u993D\u993E\u993F\u9940\u9941\u9942\u9943\u9944\u9945\u9946\u9947\u9948\u9949\uFFFD\u994A\u994B\u994C\u994D\u994E\u994F\u9950\u9951\u9952\u9953\u9956\u9957\u9958\u9959\u995A\u995B\u995C\u995D\u995E\u995F\u9960\u9961\u9962\u9964\u9966\u9973\u9978\u9979\u997B\u997E\u9982\u9983\u9989\u7A39\u7A37\u7A51\u9ECF\u99A5\u7A70\u7688\u768E\u7693\u7699\u76A4\u74DE\u74E0\u752C\u9E20\u9E22\u9E28\u9E29\u9E2A\u9E2B\u9E2C\u9E32\u9E31\u9E36\u9E38\u9E37\u9E39\u9E3A\u9E3E\u9E41\u9E42\u9E44\u9E46\u9E47\u9E48\u9E49\u9E4B\u9E4C\u9E4E\u9E51\u9E55\u9E57\u9E5A\u9E5B\u9E5C\u9E5E\u9E63\u9E66\u9E67\u9E68\u9E69\u9E6A\u9E6B\u9E6C\u9E71\u9E6D\u9E73\u7592\u7594\u7596\u75A0\u759D\u75AC\u75A3\u75B3\u75B4\u75B8\u75C4\u75B1\u75B0\u75C3\u75C2\u75D6\u75CD\u75E3\u75E8\u75E6\u75E4\u75EB\u75E7\u7603\u75F1\u75FC\u75FF\u7610\u7600\u7605\u760C\u7617\u760A\u7625\u7618\u7615\u7619\uFFFD".split("");
        for (j3 = 0; j3 != D5[240].length; ++j3)
          if (D5[240][j3].charCodeAt(0) !== 65533) {
            e7[D5[240][j3]] = 61440 + j3;
            d2[61440 + j3] = D5[240][j3];
          }
        D5[241] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u998C\u998E\u999A\u999B\u999C\u999D\u999E\u999F\u99A0\u99A1\u99A2\u99A3\u99A4\u99A6\u99A7\u99A9\u99AA\u99AB\u99AC\u99AD\u99AE\u99AF\u99B0\u99B1\u99B2\u99B3\u99B4\u99B5\u99B6\u99B7\u99B8\u99B9\u99BA\u99BB\u99BC\u99BD\u99BE\u99BF\u99C0\u99C1\u99C2\u99C3\u99C4\u99C5\u99C6\u99C7\u99C8\u99C9\u99CA\u99CB\u99CC\u99CD\u99CE\u99CF\u99D0\u99D1\u99D2\u99D3\u99D4\u99D5\u99D6\u99D7\u99D8\uFFFD\u99D9\u99DA\u99DB\u99DC\u99DD\u99DE\u99DF\u99E0\u99E1\u99E2\u99E3\u99E4\u99E5\u99E6\u99E7\u99E8\u99E9\u99EA\u99EB\u99EC\u99ED\u99EE\u99EF\u99F0\u99F1\u99F2\u99F3\u99F4\u99F5\u99F6\u99F7\u99F8\u99F9\u761B\u763C\u7622\u7620\u7640\u762D\u7630\u763F\u7635\u7643\u763E\u7633\u764D\u765E\u7654\u765C\u7656\u766B\u766F\u7FCA\u7AE6\u7A78\u7A79\u7A80\u7A86\u7A88\u7A95\u7AA6\u7AA0\u7AAC\u7AA8\u7AAD\u7AB3\u8864\u8869\u8872\u887D\u887F\u8882\u88A2\u88C6\u88B7\u88BC\u88C9\u88E2\u88CE\u88E3\u88E5\u88F1\u891A\u88FC\u88E8\u88FE\u88F0\u8921\u8919\u8913\u891B\u890A\u8934\u892B\u8936\u8941\u8966\u897B\u758B\u80E5\u76B2\u76B4\u77DC\u8012\u8014\u8016\u801C\u8020\u8022\u8025\u8026\u8027\u8029\u8028\u8031\u800B\u8035\u8043\u8046\u804D\u8052\u8069\u8071\u8983\u9878\u9880\u9883\uFFFD".split("");
        for (j3 = 0; j3 != D5[241].length; ++j3)
          if (D5[241][j3].charCodeAt(0) !== 65533) {
            e7[D5[241][j3]] = 61696 + j3;
            d2[61696 + j3] = D5[241][j3];
          }
        D5[242] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u99FA\u99FB\u99FC\u99FD\u99FE\u99FF\u9A00\u9A01\u9A02\u9A03\u9A04\u9A05\u9A06\u9A07\u9A08\u9A09\u9A0A\u9A0B\u9A0C\u9A0D\u9A0E\u9A0F\u9A10\u9A11\u9A12\u9A13\u9A14\u9A15\u9A16\u9A17\u9A18\u9A19\u9A1A\u9A1B\u9A1C\u9A1D\u9A1E\u9A1F\u9A20\u9A21\u9A22\u9A23\u9A24\u9A25\u9A26\u9A27\u9A28\u9A29\u9A2A\u9A2B\u9A2C\u9A2D\u9A2E\u9A2F\u9A30\u9A31\u9A32\u9A33\u9A34\u9A35\u9A36\u9A37\u9A38\uFFFD\u9A39\u9A3A\u9A3B\u9A3C\u9A3D\u9A3E\u9A3F\u9A40\u9A41\u9A42\u9A43\u9A44\u9A45\u9A46\u9A47\u9A48\u9A49\u9A4A\u9A4B\u9A4C\u9A4D\u9A4E\u9A4F\u9A50\u9A51\u9A52\u9A53\u9A54\u9A55\u9A56\u9A57\u9A58\u9A59\u9889\u988C\u988D\u988F\u9894\u989A\u989B\u989E\u989F\u98A1\u98A2\u98A5\u98A6\u864D\u8654\u866C\u866E\u867F\u867A\u867C\u867B\u86A8\u868D\u868B\u86AC\u869D\u86A7\u86A3\u86AA\u8693\u86A9\u86B6\u86C4\u86B5\u86CE\u86B0\u86BA\u86B1\u86AF\u86C9\u86CF\u86B4\u86E9\u86F1\u86F2\u86ED\u86F3\u86D0\u8713\u86DE\u86F4\u86DF\u86D8\u86D1\u8703\u8707\u86F8\u8708\u870A\u870D\u8709\u8723\u873B\u871E\u8725\u872E\u871A\u873E\u8748\u8734\u8731\u8729\u8737\u873F\u8782\u8722\u877D\u877E\u877B\u8760\u8770\u874C\u876E\u878B\u8753\u8763\u877C\u8764\u8759\u8765\u8793\u87AF\u87A8\u87D2\uFFFD".split("");
        for (j3 = 0; j3 != D5[242].length; ++j3)
          if (D5[242][j3].charCodeAt(0) !== 65533) {
            e7[D5[242][j3]] = 61952 + j3;
            d2[61952 + j3] = D5[242][j3];
          }
        D5[243] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u9A5A\u9A5B\u9A5C\u9A5D\u9A5E\u9A5F\u9A60\u9A61\u9A62\u9A63\u9A64\u9A65\u9A66\u9A67\u9A68\u9A69\u9A6A\u9A6B\u9A72\u9A83\u9A89\u9A8D\u9A8E\u9A94\u9A95\u9A99\u9AA6\u9AA9\u9AAA\u9AAB\u9AAC\u9AAD\u9AAE\u9AAF\u9AB2\u9AB3\u9AB4\u9AB5\u9AB9\u9ABB\u9ABD\u9ABE\u9ABF\u9AC3\u9AC4\u9AC6\u9AC7\u9AC8\u9AC9\u9ACA\u9ACD\u9ACE\u9ACF\u9AD0\u9AD2\u9AD4\u9AD5\u9AD6\u9AD7\u9AD9\u9ADA\u9ADB\u9ADC\uFFFD\u9ADD\u9ADE\u9AE0\u9AE2\u9AE3\u9AE4\u9AE5\u9AE7\u9AE8\u9AE9\u9AEA\u9AEC\u9AEE\u9AF0\u9AF1\u9AF2\u9AF3\u9AF4\u9AF5\u9AF6\u9AF7\u9AF8\u9AFA\u9AFC\u9AFD\u9AFE\u9AFF\u9B00\u9B01\u9B02\u9B04\u9B05\u9B06\u87C6\u8788\u8785\u87AD\u8797\u8783\u87AB\u87E5\u87AC\u87B5\u87B3\u87CB\u87D3\u87BD\u87D1\u87C0\u87CA\u87DB\u87EA\u87E0\u87EE\u8816\u8813\u87FE\u880A\u881B\u8821\u8839\u883C\u7F36\u7F42\u7F44\u7F45\u8210\u7AFA\u7AFD\u7B08\u7B03\u7B04\u7B15\u7B0A\u7B2B\u7B0F\u7B47\u7B38\u7B2A\u7B19\u7B2E\u7B31\u7B20\u7B25\u7B24\u7B33\u7B3E\u7B1E\u7B58\u7B5A\u7B45\u7B75\u7B4C\u7B5D\u7B60\u7B6E\u7B7B\u7B62\u7B72\u7B71\u7B90\u7BA6\u7BA7\u7BB8\u7BAC\u7B9D\u7BA8\u7B85\u7BAA\u7B9C\u7BA2\u7BAB\u7BB4\u7BD1\u7BC1\u7BCC\u7BDD\u7BDA\u7BE5\u7BE6\u7BEA\u7C0C\u7BFE\u7BFC\u7C0F\u7C16\u7C0B\uFFFD".split("");
        for (j3 = 0; j3 != D5[243].length; ++j3)
          if (D5[243][j3].charCodeAt(0) !== 65533) {
            e7[D5[243][j3]] = 62208 + j3;
            d2[62208 + j3] = D5[243][j3];
          }
        D5[244] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u9B07\u9B09\u9B0A\u9B0B\u9B0C\u9B0D\u9B0E\u9B10\u9B11\u9B12\u9B14\u9B15\u9B16\u9B17\u9B18\u9B19\u9B1A\u9B1B\u9B1C\u9B1D\u9B1E\u9B20\u9B21\u9B22\u9B24\u9B25\u9B26\u9B27\u9B28\u9B29\u9B2A\u9B2B\u9B2C\u9B2D\u9B2E\u9B30\u9B31\u9B33\u9B34\u9B35\u9B36\u9B37\u9B38\u9B39\u9B3A\u9B3D\u9B3E\u9B3F\u9B40\u9B46\u9B4A\u9B4B\u9B4C\u9B4E\u9B50\u9B52\u9B53\u9B55\u9B56\u9B57\u9B58\u9B59\u9B5A\uFFFD\u9B5B\u9B5C\u9B5D\u9B5E\u9B5F\u9B60\u9B61\u9B62\u9B63\u9B64\u9B65\u9B66\u9B67\u9B68\u9B69\u9B6A\u9B6B\u9B6C\u9B6D\u9B6E\u9B6F\u9B70\u9B71\u9B72\u9B73\u9B74\u9B75\u9B76\u9B77\u9B78\u9B79\u9B7A\u9B7B\u7C1F\u7C2A\u7C26\u7C38\u7C41\u7C40\u81FE\u8201\u8202\u8204\u81EC\u8844\u8221\u8222\u8223\u822D\u822F\u8228\u822B\u8238\u823B\u8233\u8234\u823E\u8244\u8249\u824B\u824F\u825A\u825F\u8268\u887E\u8885\u8888\u88D8\u88DF\u895E\u7F9D\u7F9F\u7FA7\u7FAF\u7FB0\u7FB2\u7C7C\u6549\u7C91\u7C9D\u7C9C\u7C9E\u7CA2\u7CB2\u7CBC\u7CBD\u7CC1\u7CC7\u7CCC\u7CCD\u7CC8\u7CC5\u7CD7\u7CE8\u826E\u66A8\u7FBF\u7FCE\u7FD5\u7FE5\u7FE1\u7FE6\u7FE9\u7FEE\u7FF3\u7CF8\u7D77\u7DA6\u7DAE\u7E47\u7E9B\u9EB8\u9EB4\u8D73\u8D84\u8D94\u8D91\u8DB1\u8D67\u8D6D\u8C47\u8C49\u914A\u9150\u914E\u914F\u9164\uFFFD".split("");
        for (j3 = 0; j3 != D5[244].length; ++j3)
          if (D5[244][j3].charCodeAt(0) !== 65533) {
            e7[D5[244][j3]] = 62464 + j3;
            d2[62464 + j3] = D5[244][j3];
          }
        D5[245] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u9B7C\u9B7D\u9B7E\u9B7F\u9B80\u9B81\u9B82\u9B83\u9B84\u9B85\u9B86\u9B87\u9B88\u9B89\u9B8A\u9B8B\u9B8C\u9B8D\u9B8E\u9B8F\u9B90\u9B91\u9B92\u9B93\u9B94\u9B95\u9B96\u9B97\u9B98\u9B99\u9B9A\u9B9B\u9B9C\u9B9D\u9B9E\u9B9F\u9BA0\u9BA1\u9BA2\u9BA3\u9BA4\u9BA5\u9BA6\u9BA7\u9BA8\u9BA9\u9BAA\u9BAB\u9BAC\u9BAD\u9BAE\u9BAF\u9BB0\u9BB1\u9BB2\u9BB3\u9BB4\u9BB5\u9BB6\u9BB7\u9BB8\u9BB9\u9BBA\uFFFD\u9BBB\u9BBC\u9BBD\u9BBE\u9BBF\u9BC0\u9BC1\u9BC2\u9BC3\u9BC4\u9BC5\u9BC6\u9BC7\u9BC8\u9BC9\u9BCA\u9BCB\u9BCC\u9BCD\u9BCE\u9BCF\u9BD0\u9BD1\u9BD2\u9BD3\u9BD4\u9BD5\u9BD6\u9BD7\u9BD8\u9BD9\u9BDA\u9BDB\u9162\u9161\u9170\u9169\u916F\u917D\u917E\u9172\u9174\u9179\u918C\u9185\u9190\u918D\u9191\u91A2\u91A3\u91AA\u91AD\u91AE\u91AF\u91B5\u91B4\u91BA\u8C55\u9E7E\u8DB8\u8DEB\u8E05\u8E59\u8E69\u8DB5\u8DBF\u8DBC\u8DBA\u8DC4\u8DD6\u8DD7\u8DDA\u8DDE\u8DCE\u8DCF\u8DDB\u8DC6\u8DEC\u8DF7\u8DF8\u8DE3\u8DF9\u8DFB\u8DE4\u8E09\u8DFD\u8E14\u8E1D\u8E1F\u8E2C\u8E2E\u8E23\u8E2F\u8E3A\u8E40\u8E39\u8E35\u8E3D\u8E31\u8E49\u8E41\u8E42\u8E51\u8E52\u8E4A\u8E70\u8E76\u8E7C\u8E6F\u8E74\u8E85\u8E8F\u8E94\u8E90\u8E9C\u8E9E\u8C78\u8C82\u8C8A\u8C85\u8C98\u8C94\u659B\u89D6\u89DE\u89DA\u89DC\uFFFD".split("");
        for (j3 = 0; j3 != D5[245].length; ++j3)
          if (D5[245][j3].charCodeAt(0) !== 65533) {
            e7[D5[245][j3]] = 62720 + j3;
            d2[62720 + j3] = D5[245][j3];
          }
        D5[246] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u9BDC\u9BDD\u9BDE\u9BDF\u9BE0\u9BE1\u9BE2\u9BE3\u9BE4\u9BE5\u9BE6\u9BE7\u9BE8\u9BE9\u9BEA\u9BEB\u9BEC\u9BED\u9BEE\u9BEF\u9BF0\u9BF1\u9BF2\u9BF3\u9BF4\u9BF5\u9BF6\u9BF7\u9BF8\u9BF9\u9BFA\u9BFB\u9BFC\u9BFD\u9BFE\u9BFF\u9C00\u9C01\u9C02\u9C03\u9C04\u9C05\u9C06\u9C07\u9C08\u9C09\u9C0A\u9C0B\u9C0C\u9C0D\u9C0E\u9C0F\u9C10\u9C11\u9C12\u9C13\u9C14\u9C15\u9C16\u9C17\u9C18\u9C19\u9C1A\uFFFD\u9C1B\u9C1C\u9C1D\u9C1E\u9C1F\u9C20\u9C21\u9C22\u9C23\u9C24\u9C25\u9C26\u9C27\u9C28\u9C29\u9C2A\u9C2B\u9C2C\u9C2D\u9C2E\u9C2F\u9C30\u9C31\u9C32\u9C33\u9C34\u9C35\u9C36\u9C37\u9C38\u9C39\u9C3A\u9C3B\u89E5\u89EB\u89EF\u8A3E\u8B26\u9753\u96E9\u96F3\u96EF\u9706\u9701\u9708\u970F\u970E\u972A\u972D\u9730\u973E\u9F80\u9F83\u9F85\u9F86\u9F87\u9F88\u9F89\u9F8A\u9F8C\u9EFE\u9F0B\u9F0D\u96B9\u96BC\u96BD\u96CE\u96D2\u77BF\u96E0\u928E\u92AE\u92C8\u933E\u936A\u93CA\u938F\u943E\u946B\u9C7F\u9C82\u9C85\u9C86\u9C87\u9C88\u7A23\u9C8B\u9C8E\u9C90\u9C91\u9C92\u9C94\u9C95\u9C9A\u9C9B\u9C9E\u9C9F\u9CA0\u9CA1\u9CA2\u9CA3\u9CA5\u9CA6\u9CA7\u9CA8\u9CA9\u9CAB\u9CAD\u9CAE\u9CB0\u9CB1\u9CB2\u9CB3\u9CB4\u9CB5\u9CB6\u9CB7\u9CBA\u9CBB\u9CBC\u9CBD\u9CC4\u9CC5\u9CC6\u9CC7\u9CCA\u9CCB\uFFFD".split("");
        for (j3 = 0; j3 != D5[246].length; ++j3)
          if (D5[246][j3].charCodeAt(0) !== 65533) {
            e7[D5[246][j3]] = 62976 + j3;
            d2[62976 + j3] = D5[246][j3];
          }
        D5[247] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u9C3C\u9C3D\u9C3E\u9C3F\u9C40\u9C41\u9C42\u9C43\u9C44\u9C45\u9C46\u9C47\u9C48\u9C49\u9C4A\u9C4B\u9C4C\u9C4D\u9C4E\u9C4F\u9C50\u9C51\u9C52\u9C53\u9C54\u9C55\u9C56\u9C57\u9C58\u9C59\u9C5A\u9C5B\u9C5C\u9C5D\u9C5E\u9C5F\u9C60\u9C61\u9C62\u9C63\u9C64\u9C65\u9C66\u9C67\u9C68\u9C69\u9C6A\u9C6B\u9C6C\u9C6D\u9C6E\u9C6F\u9C70\u9C71\u9C72\u9C73\u9C74\u9C75\u9C76\u9C77\u9C78\u9C79\u9C7A\uFFFD\u9C7B\u9C7D\u9C7E\u9C80\u9C83\u9C84\u9C89\u9C8A\u9C8C\u9C8F\u9C93\u9C96\u9C97\u9C98\u9C99\u9C9D\u9CAA\u9CAC\u9CAF\u9CB9\u9CBE\u9CBF\u9CC0\u9CC1\u9CC2\u9CC8\u9CC9\u9CD1\u9CD2\u9CDA\u9CDB\u9CE0\u9CE1\u9CCC\u9CCD\u9CCE\u9CCF\u9CD0\u9CD3\u9CD4\u9CD5\u9CD7\u9CD8\u9CD9\u9CDC\u9CDD\u9CDF\u9CE2\u977C\u9785\u9791\u9792\u9794\u97AF\u97AB\u97A3\u97B2\u97B4\u9AB1\u9AB0\u9AB7\u9E58\u9AB6\u9ABA\u9ABC\u9AC1\u9AC0\u9AC5\u9AC2\u9ACB\u9ACC\u9AD1\u9B45\u9B43\u9B47\u9B49\u9B48\u9B4D\u9B51\u98E8\u990D\u992E\u9955\u9954\u9ADF\u9AE1\u9AE6\u9AEF\u9AEB\u9AFB\u9AED\u9AF9\u9B08\u9B0F\u9B13\u9B1F\u9B23\u9EBD\u9EBE\u7E3B\u9E82\u9E87\u9E88\u9E8B\u9E92\u93D6\u9E9D\u9E9F\u9EDB\u9EDC\u9EDD\u9EE0\u9EDF\u9EE2\u9EE9\u9EE7\u9EE5\u9EEA\u9EEF\u9F22\u9F2C\u9F2F\u9F39\u9F37\u9F3D\u9F3E\u9F44\uFFFD".split("");
        for (j3 = 0; j3 != D5[247].length; ++j3)
          if (D5[247][j3].charCodeAt(0) !== 65533) {
            e7[D5[247][j3]] = 63232 + j3;
            d2[63232 + j3] = D5[247][j3];
          }
        D5[248] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u9CE3\u9CE4\u9CE5\u9CE6\u9CE7\u9CE8\u9CE9\u9CEA\u9CEB\u9CEC\u9CED\u9CEE\u9CEF\u9CF0\u9CF1\u9CF2\u9CF3\u9CF4\u9CF5\u9CF6\u9CF7\u9CF8\u9CF9\u9CFA\u9CFB\u9CFC\u9CFD\u9CFE\u9CFF\u9D00\u9D01\u9D02\u9D03\u9D04\u9D05\u9D06\u9D07\u9D08\u9D09\u9D0A\u9D0B\u9D0C\u9D0D\u9D0E\u9D0F\u9D10\u9D11\u9D12\u9D13\u9D14\u9D15\u9D16\u9D17\u9D18\u9D19\u9D1A\u9D1B\u9D1C\u9D1D\u9D1E\u9D1F\u9D20\u9D21\uFFFD\u9D22\u9D23\u9D24\u9D25\u9D26\u9D27\u9D28\u9D29\u9D2A\u9D2B\u9D2C\u9D2D\u9D2E\u9D2F\u9D30\u9D31\u9D32\u9D33\u9D34\u9D35\u9D36\u9D37\u9D38\u9D39\u9D3A\u9D3B\u9D3C\u9D3D\u9D3E\u9D3F\u9D40\u9D41\u9D42\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD".split("");
        for (j3 = 0; j3 != D5[248].length; ++j3)
          if (D5[248][j3].charCodeAt(0) !== 65533) {
            e7[D5[248][j3]] = 63488 + j3;
            d2[63488 + j3] = D5[248][j3];
          }
        D5[249] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u9D43\u9D44\u9D45\u9D46\u9D47\u9D48\u9D49\u9D4A\u9D4B\u9D4C\u9D4D\u9D4E\u9D4F\u9D50\u9D51\u9D52\u9D53\u9D54\u9D55\u9D56\u9D57\u9D58\u9D59\u9D5A\u9D5B\u9D5C\u9D5D\u9D5E\u9D5F\u9D60\u9D61\u9D62\u9D63\u9D64\u9D65\u9D66\u9D67\u9D68\u9D69\u9D6A\u9D6B\u9D6C\u9D6D\u9D6E\u9D6F\u9D70\u9D71\u9D72\u9D73\u9D74\u9D75\u9D76\u9D77\u9D78\u9D79\u9D7A\u9D7B\u9D7C\u9D7D\u9D7E\u9D7F\u9D80\u9D81\uFFFD\u9D82\u9D83\u9D84\u9D85\u9D86\u9D87\u9D88\u9D89\u9D8A\u9D8B\u9D8C\u9D8D\u9D8E\u9D8F\u9D90\u9D91\u9D92\u9D93\u9D94\u9D95\u9D96\u9D97\u9D98\u9D99\u9D9A\u9D9B\u9D9C\u9D9D\u9D9E\u9D9F\u9DA0\u9DA1\u9DA2\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD".split("");
        for (j3 = 0; j3 != D5[249].length; ++j3)
          if (D5[249][j3].charCodeAt(0) !== 65533) {
            e7[D5[249][j3]] = 63744 + j3;
            d2[63744 + j3] = D5[249][j3];
          }
        D5[250] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u9DA3\u9DA4\u9DA5\u9DA6\u9DA7\u9DA8\u9DA9\u9DAA\u9DAB\u9DAC\u9DAD\u9DAE\u9DAF\u9DB0\u9DB1\u9DB2\u9DB3\u9DB4\u9DB5\u9DB6\u9DB7\u9DB8\u9DB9\u9DBA\u9DBB\u9DBC\u9DBD\u9DBE\u9DBF\u9DC0\u9DC1\u9DC2\u9DC3\u9DC4\u9DC5\u9DC6\u9DC7\u9DC8\u9DC9\u9DCA\u9DCB\u9DCC\u9DCD\u9DCE\u9DCF\u9DD0\u9DD1\u9DD2\u9DD3\u9DD4\u9DD5\u9DD6\u9DD7\u9DD8\u9DD9\u9DDA\u9DDB\u9DDC\u9DDD\u9DDE\u9DDF\u9DE0\u9DE1\uFFFD\u9DE2\u9DE3\u9DE4\u9DE5\u9DE6\u9DE7\u9DE8\u9DE9\u9DEA\u9DEB\u9DEC\u9DED\u9DEE\u9DEF\u9DF0\u9DF1\u9DF2\u9DF3\u9DF4\u9DF5\u9DF6\u9DF7\u9DF8\u9DF9\u9DFA\u9DFB\u9DFC\u9DFD\u9DFE\u9DFF\u9E00\u9E01\u9E02\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD".split("");
        for (j3 = 0; j3 != D5[250].length; ++j3)
          if (D5[250][j3].charCodeAt(0) !== 65533) {
            e7[D5[250][j3]] = 64e3 + j3;
            d2[64e3 + j3] = D5[250][j3];
          }
        D5[251] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u9E03\u9E04\u9E05\u9E06\u9E07\u9E08\u9E09\u9E0A\u9E0B\u9E0C\u9E0D\u9E0E\u9E0F\u9E10\u9E11\u9E12\u9E13\u9E14\u9E15\u9E16\u9E17\u9E18\u9E19\u9E1A\u9E1B\u9E1C\u9E1D\u9E1E\u9E24\u9E27\u9E2E\u9E30\u9E34\u9E3B\u9E3C\u9E40\u9E4D\u9E50\u9E52\u9E53\u9E54\u9E56\u9E59\u9E5D\u9E5F\u9E60\u9E61\u9E62\u9E65\u9E6E\u9E6F\u9E72\u9E74\u9E75\u9E76\u9E77\u9E78\u9E79\u9E7A\u9E7B\u9E7C\u9E7D\u9E80\uFFFD\u9E81\u9E83\u9E84\u9E85\u9E86\u9E89\u9E8A\u9E8C\u9E8D\u9E8E\u9E8F\u9E90\u9E91\u9E94\u9E95\u9E96\u9E97\u9E98\u9E99\u9E9A\u9E9B\u9E9C\u9E9E\u9EA0\u9EA1\u9EA2\u9EA3\u9EA4\u9EA5\u9EA7\u9EA8\u9EA9\u9EAA\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD".split("");
        for (j3 = 0; j3 != D5[251].length; ++j3)
          if (D5[251][j3].charCodeAt(0) !== 65533) {
            e7[D5[251][j3]] = 64256 + j3;
            d2[64256 + j3] = D5[251][j3];
          }
        D5[252] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u9EAB\u9EAC\u9EAD\u9EAE\u9EAF\u9EB0\u9EB1\u9EB2\u9EB3\u9EB5\u9EB6\u9EB7\u9EB9\u9EBA\u9EBC\u9EBF\u9EC0\u9EC1\u9EC2\u9EC3\u9EC5\u9EC6\u9EC7\u9EC8\u9ECA\u9ECB\u9ECC\u9ED0\u9ED2\u9ED3\u9ED5\u9ED6\u9ED7\u9ED9\u9EDA\u9EDE\u9EE1\u9EE3\u9EE4\u9EE6\u9EE8\u9EEB\u9EEC\u9EED\u9EEE\u9EF0\u9EF1\u9EF2\u9EF3\u9EF4\u9EF5\u9EF6\u9EF7\u9EF8\u9EFA\u9EFD\u9EFF\u9F00\u9F01\u9F02\u9F03\u9F04\u9F05\uFFFD\u9F06\u9F07\u9F08\u9F09\u9F0A\u9F0C\u9F0F\u9F11\u9F12\u9F14\u9F15\u9F16\u9F18\u9F1A\u9F1B\u9F1C\u9F1D\u9F1E\u9F1F\u9F21\u9F23\u9F24\u9F25\u9F26\u9F27\u9F28\u9F29\u9F2A\u9F2B\u9F2D\u9F2E\u9F30\u9F31\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD".split("");
        for (j3 = 0; j3 != D5[252].length; ++j3)
          if (D5[252][j3].charCodeAt(0) !== 65533) {
            e7[D5[252][j3]] = 64512 + j3;
            d2[64512 + j3] = D5[252][j3];
          }
        D5[253] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u9F32\u9F33\u9F34\u9F35\u9F36\u9F38\u9F3A\u9F3C\u9F3F\u9F40\u9F41\u9F42\u9F43\u9F45\u9F46\u9F47\u9F48\u9F49\u9F4A\u9F4B\u9F4C\u9F4D\u9F4E\u9F4F\u9F52\u9F53\u9F54\u9F55\u9F56\u9F57\u9F58\u9F59\u9F5A\u9F5B\u9F5C\u9F5D\u9F5E\u9F5F\u9F60\u9F61\u9F62\u9F63\u9F64\u9F65\u9F66\u9F67\u9F68\u9F69\u9F6A\u9F6B\u9F6C\u9F6D\u9F6E\u9F6F\u9F70\u9F71\u9F72\u9F73\u9F74\u9F75\u9F76\u9F77\u9F78\uFFFD\u9F79\u9F7A\u9F7B\u9F7C\u9F7D\u9F7E\u9F81\u9F82\u9F8D\u9F8E\u9F8F\u9F90\u9F91\u9F92\u9F93\u9F94\u9F95\u9F96\u9F97\u9F98\u9F9C\u9F9D\u9F9E\u9FA1\u9FA2\u9FA3\u9FA4\u9FA5\uF92C\uF979\uF995\uF9E7\uF9F1\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD".split("");
        for (j3 = 0; j3 != D5[253].length; ++j3)
          if (D5[253][j3].charCodeAt(0) !== 65533) {
            e7[D5[253][j3]] = 64768 + j3;
            d2[64768 + j3] = D5[253][j3];
          }
        D5[254] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFA0C\uFA0D\uFA0E\uFA0F\uFA11\uFA13\uFA14\uFA18\uFA1F\uFA20\uFA21\uFA23\uFA24\uFA27\uFA28\uFA29\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD".split("");
        for (j3 = 0; j3 != D5[254].length; ++j3)
          if (D5[254][j3].charCodeAt(0) !== 65533) {
            e7[D5[254][j3]] = 65024 + j3;
            d2[65024 + j3] = D5[254][j3];
          }
        return { "enc": e7, "dec": d2 };
      }();
      cptable2[949] = function() {
        var d2 = [], e7 = {}, D5 = [], j3;
        D5[0] = "\0\x07\b	\n\v\f\r\x1B !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~\x7F\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD".split("");
        for (j3 = 0; j3 != D5[0].length; ++j3)
          if (D5[0][j3].charCodeAt(0) !== 65533) {
            e7[D5[0][j3]] = 0 + j3;
            d2[0 + j3] = D5[0][j3];
          }
        D5[129] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uAC02\uAC03\uAC05\uAC06\uAC0B\uAC0C\uAC0D\uAC0E\uAC0F\uAC18\uAC1E\uAC1F\uAC21\uAC22\uAC23\uAC25\uAC26\uAC27\uAC28\uAC29\uAC2A\uAC2B\uAC2E\uAC32\uAC33\uAC34\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uAC35\uAC36\uAC37\uAC3A\uAC3B\uAC3D\uAC3E\uAC3F\uAC41\uAC42\uAC43\uAC44\uAC45\uAC46\uAC47\uAC48\uAC49\uAC4A\uAC4C\uAC4E\uAC4F\uAC50\uAC51\uAC52\uAC53\uAC55\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uAC56\uAC57\uAC59\uAC5A\uAC5B\uAC5D\uAC5E\uAC5F\uAC60\uAC61\uAC62\uAC63\uAC64\uAC65\uAC66\uAC67\uAC68\uAC69\uAC6A\uAC6B\uAC6C\uAC6D\uAC6E\uAC6F\uAC72\uAC73\uAC75\uAC76\uAC79\uAC7B\uAC7C\uAC7D\uAC7E\uAC7F\uAC82\uAC87\uAC88\uAC8D\uAC8E\uAC8F\uAC91\uAC92\uAC93\uAC95\uAC96\uAC97\uAC98\uAC99\uAC9A\uAC9B\uAC9E\uACA2\uACA3\uACA4\uACA5\uACA6\uACA7\uACAB\uACAD\uACAE\uACB1\uACB2\uACB3\uACB4\uACB5\uACB6\uACB7\uACBA\uACBE\uACBF\uACC0\uACC2\uACC3\uACC5\uACC6\uACC7\uACC9\uACCA\uACCB\uACCD\uACCE\uACCF\uACD0\uACD1\uACD2\uACD3\uACD4\uACD6\uACD8\uACD9\uACDA\uACDB\uACDC\uACDD\uACDE\uACDF\uACE2\uACE3\uACE5\uACE6\uACE9\uACEB\uACED\uACEE\uACF2\uACF4\uACF7\uACF8\uACF9\uACFA\uACFB\uACFE\uACFF\uAD01\uAD02\uAD03\uAD05\uAD07\uAD08\uAD09\uAD0A\uAD0B\uAD0E\uAD10\uAD12\uAD13\uFFFD".split("");
        for (j3 = 0; j3 != D5[129].length; ++j3)
          if (D5[129][j3].charCodeAt(0) !== 65533) {
            e7[D5[129][j3]] = 33024 + j3;
            d2[33024 + j3] = D5[129][j3];
          }
        D5[130] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uAD14\uAD15\uAD16\uAD17\uAD19\uAD1A\uAD1B\uAD1D\uAD1E\uAD1F\uAD21\uAD22\uAD23\uAD24\uAD25\uAD26\uAD27\uAD28\uAD2A\uAD2B\uAD2E\uAD2F\uAD30\uAD31\uAD32\uAD33\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uAD36\uAD37\uAD39\uAD3A\uAD3B\uAD3D\uAD3E\uAD3F\uAD40\uAD41\uAD42\uAD43\uAD46\uAD48\uAD4A\uAD4B\uAD4C\uAD4D\uAD4E\uAD4F\uAD51\uAD52\uAD53\uAD55\uAD56\uAD57\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uAD59\uAD5A\uAD5B\uAD5C\uAD5D\uAD5E\uAD5F\uAD60\uAD62\uAD64\uAD65\uAD66\uAD67\uAD68\uAD69\uAD6A\uAD6B\uAD6E\uAD6F\uAD71\uAD72\uAD77\uAD78\uAD79\uAD7A\uAD7E\uAD80\uAD83\uAD84\uAD85\uAD86\uAD87\uAD8A\uAD8B\uAD8D\uAD8E\uAD8F\uAD91\uAD92\uAD93\uAD94\uAD95\uAD96\uAD97\uAD98\uAD99\uAD9A\uAD9B\uAD9E\uAD9F\uADA0\uADA1\uADA2\uADA3\uADA5\uADA6\uADA7\uADA8\uADA9\uADAA\uADAB\uADAC\uADAD\uADAE\uADAF\uADB0\uADB1\uADB2\uADB3\uADB4\uADB5\uADB6\uADB8\uADB9\uADBA\uADBB\uADBC\uADBD\uADBE\uADBF\uADC2\uADC3\uADC5\uADC6\uADC7\uADC9\uADCA\uADCB\uADCC\uADCD\uADCE\uADCF\uADD2\uADD4\uADD5\uADD6\uADD7\uADD8\uADD9\uADDA\uADDB\uADDD\uADDE\uADDF\uADE1\uADE2\uADE3\uADE5\uADE6\uADE7\uADE8\uADE9\uADEA\uADEB\uADEC\uADED\uADEE\uADEF\uADF0\uADF1\uADF2\uADF3\uADF4\uADF5\uADF6\uADF7\uFFFD".split("");
        for (j3 = 0; j3 != D5[130].length; ++j3)
          if (D5[130][j3].charCodeAt(0) !== 65533) {
            e7[D5[130][j3]] = 33280 + j3;
            d2[33280 + j3] = D5[130][j3];
          }
        D5[131] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uADFA\uADFB\uADFD\uADFE\uAE02\uAE03\uAE04\uAE05\uAE06\uAE07\uAE0A\uAE0C\uAE0E\uAE0F\uAE10\uAE11\uAE12\uAE13\uAE15\uAE16\uAE17\uAE18\uAE19\uAE1A\uAE1B\uAE1C\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uAE1D\uAE1E\uAE1F\uAE20\uAE21\uAE22\uAE23\uAE24\uAE25\uAE26\uAE27\uAE28\uAE29\uAE2A\uAE2B\uAE2C\uAE2D\uAE2E\uAE2F\uAE32\uAE33\uAE35\uAE36\uAE39\uAE3B\uAE3C\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uAE3D\uAE3E\uAE3F\uAE42\uAE44\uAE47\uAE48\uAE49\uAE4B\uAE4F\uAE51\uAE52\uAE53\uAE55\uAE57\uAE58\uAE59\uAE5A\uAE5B\uAE5E\uAE62\uAE63\uAE64\uAE66\uAE67\uAE6A\uAE6B\uAE6D\uAE6E\uAE6F\uAE71\uAE72\uAE73\uAE74\uAE75\uAE76\uAE77\uAE7A\uAE7E\uAE7F\uAE80\uAE81\uAE82\uAE83\uAE86\uAE87\uAE88\uAE89\uAE8A\uAE8B\uAE8D\uAE8E\uAE8F\uAE90\uAE91\uAE92\uAE93\uAE94\uAE95\uAE96\uAE97\uAE98\uAE99\uAE9A\uAE9B\uAE9C\uAE9D\uAE9E\uAE9F\uAEA0\uAEA1\uAEA2\uAEA3\uAEA4\uAEA5\uAEA6\uAEA7\uAEA8\uAEA9\uAEAA\uAEAB\uAEAC\uAEAD\uAEAE\uAEAF\uAEB0\uAEB1\uAEB2\uAEB3\uAEB4\uAEB5\uAEB6\uAEB7\uAEB8\uAEB9\uAEBA\uAEBB\uAEBF\uAEC1\uAEC2\uAEC3\uAEC5\uAEC6\uAEC7\uAEC8\uAEC9\uAECA\uAECB\uAECE\uAED2\uAED3\uAED4\uAED5\uAED6\uAED7\uAEDA\uAEDB\uAEDD\uAEDE\uAEDF\uAEE0\uAEE1\uAEE2\uAEE3\uAEE4\uAEE5\uFFFD".split("");
        for (j3 = 0; j3 != D5[131].length; ++j3)
          if (D5[131][j3].charCodeAt(0) !== 65533) {
            e7[D5[131][j3]] = 33536 + j3;
            d2[33536 + j3] = D5[131][j3];
          }
        D5[132] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uAEE6\uAEE7\uAEE9\uAEEA\uAEEC\uAEEE\uAEEF\uAEF0\uAEF1\uAEF2\uAEF3\uAEF5\uAEF6\uAEF7\uAEF9\uAEFA\uAEFB\uAEFD\uAEFE\uAEFF\uAF00\uAF01\uAF02\uAF03\uAF04\uAF05\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uAF06\uAF09\uAF0A\uAF0B\uAF0C\uAF0E\uAF0F\uAF11\uAF12\uAF13\uAF14\uAF15\uAF16\uAF17\uAF18\uAF19\uAF1A\uAF1B\uAF1C\uAF1D\uAF1E\uAF1F\uAF20\uAF21\uAF22\uAF23\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uAF24\uAF25\uAF26\uAF27\uAF28\uAF29\uAF2A\uAF2B\uAF2E\uAF2F\uAF31\uAF33\uAF35\uAF36\uAF37\uAF38\uAF39\uAF3A\uAF3B\uAF3E\uAF40\uAF44\uAF45\uAF46\uAF47\uAF4A\uAF4B\uAF4C\uAF4D\uAF4E\uAF4F\uAF51\uAF52\uAF53\uAF54\uAF55\uAF56\uAF57\uAF58\uAF59\uAF5A\uAF5B\uAF5E\uAF5F\uAF60\uAF61\uAF62\uAF63\uAF66\uAF67\uAF68\uAF69\uAF6A\uAF6B\uAF6C\uAF6D\uAF6E\uAF6F\uAF70\uAF71\uAF72\uAF73\uAF74\uAF75\uAF76\uAF77\uAF78\uAF7A\uAF7B\uAF7C\uAF7D\uAF7E\uAF7F\uAF81\uAF82\uAF83\uAF85\uAF86\uAF87\uAF89\uAF8A\uAF8B\uAF8C\uAF8D\uAF8E\uAF8F\uAF92\uAF93\uAF94\uAF96\uAF97\uAF98\uAF99\uAF9A\uAF9B\uAF9D\uAF9E\uAF9F\uAFA0\uAFA1\uAFA2\uAFA3\uAFA4\uAFA5\uAFA6\uAFA7\uAFA8\uAFA9\uAFAA\uAFAB\uAFAC\uAFAD\uAFAE\uAFAF\uAFB0\uAFB1\uAFB2\uAFB3\uAFB4\uAFB5\uAFB6\uAFB7\uAFBA\uAFBB\uAFBD\uAFBE\uFFFD".split("");
        for (j3 = 0; j3 != D5[132].length; ++j3)
          if (D5[132][j3].charCodeAt(0) !== 65533) {
            e7[D5[132][j3]] = 33792 + j3;
            d2[33792 + j3] = D5[132][j3];
          }
        D5[133] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uAFBF\uAFC1\uAFC2\uAFC3\uAFC4\uAFC5\uAFC6\uAFCA\uAFCC\uAFCF\uAFD0\uAFD1\uAFD2\uAFD3\uAFD5\uAFD6\uAFD7\uAFD8\uAFD9\uAFDA\uAFDB\uAFDD\uAFDE\uAFDF\uAFE0\uAFE1\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uAFE2\uAFE3\uAFE4\uAFE5\uAFE6\uAFE7\uAFEA\uAFEB\uAFEC\uAFED\uAFEE\uAFEF\uAFF2\uAFF3\uAFF5\uAFF6\uAFF7\uAFF9\uAFFA\uAFFB\uAFFC\uAFFD\uAFFE\uAFFF\uB002\uB003\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uB005\uB006\uB007\uB008\uB009\uB00A\uB00B\uB00D\uB00E\uB00F\uB011\uB012\uB013\uB015\uB016\uB017\uB018\uB019\uB01A\uB01B\uB01E\uB01F\uB020\uB021\uB022\uB023\uB024\uB025\uB026\uB027\uB029\uB02A\uB02B\uB02C\uB02D\uB02E\uB02F\uB030\uB031\uB032\uB033\uB034\uB035\uB036\uB037\uB038\uB039\uB03A\uB03B\uB03C\uB03D\uB03E\uB03F\uB040\uB041\uB042\uB043\uB046\uB047\uB049\uB04B\uB04D\uB04F\uB050\uB051\uB052\uB056\uB058\uB05A\uB05B\uB05C\uB05E\uB05F\uB060\uB061\uB062\uB063\uB064\uB065\uB066\uB067\uB068\uB069\uB06A\uB06B\uB06C\uB06D\uB06E\uB06F\uB070\uB071\uB072\uB073\uB074\uB075\uB076\uB077\uB078\uB079\uB07A\uB07B\uB07E\uB07F\uB081\uB082\uB083\uB085\uB086\uB087\uB088\uB089\uB08A\uB08B\uB08E\uB090\uB092\uB093\uB094\uB095\uB096\uB097\uB09B\uB09D\uB09E\uB0A3\uB0A4\uFFFD".split("");
        for (j3 = 0; j3 != D5[133].length; ++j3)
          if (D5[133][j3].charCodeAt(0) !== 65533) {
            e7[D5[133][j3]] = 34048 + j3;
            d2[34048 + j3] = D5[133][j3];
          }
        D5[134] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uB0A5\uB0A6\uB0A7\uB0AA\uB0B0\uB0B2\uB0B6\uB0B7\uB0B9\uB0BA\uB0BB\uB0BD\uB0BE\uB0BF\uB0C0\uB0C1\uB0C2\uB0C3\uB0C6\uB0CA\uB0CB\uB0CC\uB0CD\uB0CE\uB0CF\uB0D2\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uB0D3\uB0D5\uB0D6\uB0D7\uB0D9\uB0DA\uB0DB\uB0DC\uB0DD\uB0DE\uB0DF\uB0E1\uB0E2\uB0E3\uB0E4\uB0E6\uB0E7\uB0E8\uB0E9\uB0EA\uB0EB\uB0EC\uB0ED\uB0EE\uB0EF\uB0F0\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uB0F1\uB0F2\uB0F3\uB0F4\uB0F5\uB0F6\uB0F7\uB0F8\uB0F9\uB0FA\uB0FB\uB0FC\uB0FD\uB0FE\uB0FF\uB100\uB101\uB102\uB103\uB104\uB105\uB106\uB107\uB10A\uB10D\uB10E\uB10F\uB111\uB114\uB115\uB116\uB117\uB11A\uB11E\uB11F\uB120\uB121\uB122\uB126\uB127\uB129\uB12A\uB12B\uB12D\uB12E\uB12F\uB130\uB131\uB132\uB133\uB136\uB13A\uB13B\uB13C\uB13D\uB13E\uB13F\uB142\uB143\uB145\uB146\uB147\uB149\uB14A\uB14B\uB14C\uB14D\uB14E\uB14F\uB152\uB153\uB156\uB157\uB159\uB15A\uB15B\uB15D\uB15E\uB15F\uB161\uB162\uB163\uB164\uB165\uB166\uB167\uB168\uB169\uB16A\uB16B\uB16C\uB16D\uB16E\uB16F\uB170\uB171\uB172\uB173\uB174\uB175\uB176\uB177\uB17A\uB17B\uB17D\uB17E\uB17F\uB181\uB183\uB184\uB185\uB186\uB187\uB18A\uB18C\uB18E\uB18F\uB190\uB191\uB195\uB196\uB197\uB199\uB19A\uB19B\uB19D\uFFFD".split("");
        for (j3 = 0; j3 != D5[134].length; ++j3)
          if (D5[134][j3].charCodeAt(0) !== 65533) {
            e7[D5[134][j3]] = 34304 + j3;
            d2[34304 + j3] = D5[134][j3];
          }
        D5[135] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uB19E\uB19F\uB1A0\uB1A1\uB1A2\uB1A3\uB1A4\uB1A5\uB1A6\uB1A7\uB1A9\uB1AA\uB1AB\uB1AC\uB1AD\uB1AE\uB1AF\uB1B0\uB1B1\uB1B2\uB1B3\uB1B4\uB1B5\uB1B6\uB1B7\uB1B8\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uB1B9\uB1BA\uB1BB\uB1BC\uB1BD\uB1BE\uB1BF\uB1C0\uB1C1\uB1C2\uB1C3\uB1C4\uB1C5\uB1C6\uB1C7\uB1C8\uB1C9\uB1CA\uB1CB\uB1CD\uB1CE\uB1CF\uB1D1\uB1D2\uB1D3\uB1D5\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uB1D6\uB1D7\uB1D8\uB1D9\uB1DA\uB1DB\uB1DE\uB1E0\uB1E1\uB1E2\uB1E3\uB1E4\uB1E5\uB1E6\uB1E7\uB1EA\uB1EB\uB1ED\uB1EE\uB1EF\uB1F1\uB1F2\uB1F3\uB1F4\uB1F5\uB1F6\uB1F7\uB1F8\uB1FA\uB1FC\uB1FE\uB1FF\uB200\uB201\uB202\uB203\uB206\uB207\uB209\uB20A\uB20D\uB20E\uB20F\uB210\uB211\uB212\uB213\uB216\uB218\uB21A\uB21B\uB21C\uB21D\uB21E\uB21F\uB221\uB222\uB223\uB224\uB225\uB226\uB227\uB228\uB229\uB22A\uB22B\uB22C\uB22D\uB22E\uB22F\uB230\uB231\uB232\uB233\uB235\uB236\uB237\uB238\uB239\uB23A\uB23B\uB23D\uB23E\uB23F\uB240\uB241\uB242\uB243\uB244\uB245\uB246\uB247\uB248\uB249\uB24A\uB24B\uB24C\uB24D\uB24E\uB24F\uB250\uB251\uB252\uB253\uB254\uB255\uB256\uB257\uB259\uB25A\uB25B\uB25D\uB25E\uB25F\uB261\uB262\uB263\uB264\uB265\uB266\uB267\uB26A\uB26B\uB26C\uB26D\uB26E\uFFFD".split("");
        for (j3 = 0; j3 != D5[135].length; ++j3)
          if (D5[135][j3].charCodeAt(0) !== 65533) {
            e7[D5[135][j3]] = 34560 + j3;
            d2[34560 + j3] = D5[135][j3];
          }
        D5[136] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uB26F\uB270\uB271\uB272\uB273\uB276\uB277\uB278\uB279\uB27A\uB27B\uB27D\uB27E\uB27F\uB280\uB281\uB282\uB283\uB286\uB287\uB288\uB28A\uB28B\uB28C\uB28D\uB28E\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uB28F\uB292\uB293\uB295\uB296\uB297\uB29B\uB29C\uB29D\uB29E\uB29F\uB2A2\uB2A4\uB2A7\uB2A8\uB2A9\uB2AB\uB2AD\uB2AE\uB2AF\uB2B1\uB2B2\uB2B3\uB2B5\uB2B6\uB2B7\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uB2B8\uB2B9\uB2BA\uB2BB\uB2BC\uB2BD\uB2BE\uB2BF\uB2C0\uB2C1\uB2C2\uB2C3\uB2C4\uB2C5\uB2C6\uB2C7\uB2CA\uB2CB\uB2CD\uB2CE\uB2CF\uB2D1\uB2D3\uB2D4\uB2D5\uB2D6\uB2D7\uB2DA\uB2DC\uB2DE\uB2DF\uB2E0\uB2E1\uB2E3\uB2E7\uB2E9\uB2EA\uB2F0\uB2F1\uB2F2\uB2F6\uB2FC\uB2FD\uB2FE\uB302\uB303\uB305\uB306\uB307\uB309\uB30A\uB30B\uB30C\uB30D\uB30E\uB30F\uB312\uB316\uB317\uB318\uB319\uB31A\uB31B\uB31D\uB31E\uB31F\uB320\uB321\uB322\uB323\uB324\uB325\uB326\uB327\uB328\uB329\uB32A\uB32B\uB32C\uB32D\uB32E\uB32F\uB330\uB331\uB332\uB333\uB334\uB335\uB336\uB337\uB338\uB339\uB33A\uB33B\uB33C\uB33D\uB33E\uB33F\uB340\uB341\uB342\uB343\uB344\uB345\uB346\uB347\uB348\uB349\uB34A\uB34B\uB34C\uB34D\uB34E\uB34F\uB350\uB351\uB352\uB353\uB357\uB359\uB35A\uB35D\uB360\uB361\uB362\uB363\uFFFD".split("");
        for (j3 = 0; j3 != D5[136].length; ++j3)
          if (D5[136][j3].charCodeAt(0) !== 65533) {
            e7[D5[136][j3]] = 34816 + j3;
            d2[34816 + j3] = D5[136][j3];
          }
        D5[137] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uB366\uB368\uB36A\uB36C\uB36D\uB36F\uB372\uB373\uB375\uB376\uB377\uB379\uB37A\uB37B\uB37C\uB37D\uB37E\uB37F\uB382\uB386\uB387\uB388\uB389\uB38A\uB38B\uB38D\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uB38E\uB38F\uB391\uB392\uB393\uB395\uB396\uB397\uB398\uB399\uB39A\uB39B\uB39C\uB39D\uB39E\uB39F\uB3A2\uB3A3\uB3A4\uB3A5\uB3A6\uB3A7\uB3A9\uB3AA\uB3AB\uB3AD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uB3AE\uB3AF\uB3B0\uB3B1\uB3B2\uB3B3\uB3B4\uB3B5\uB3B6\uB3B7\uB3B8\uB3B9\uB3BA\uB3BB\uB3BC\uB3BD\uB3BE\uB3BF\uB3C0\uB3C1\uB3C2\uB3C3\uB3C6\uB3C7\uB3C9\uB3CA\uB3CD\uB3CF\uB3D1\uB3D2\uB3D3\uB3D6\uB3D8\uB3DA\uB3DC\uB3DE\uB3DF\uB3E1\uB3E2\uB3E3\uB3E5\uB3E6\uB3E7\uB3E9\uB3EA\uB3EB\uB3EC\uB3ED\uB3EE\uB3EF\uB3F0\uB3F1\uB3F2\uB3F3\uB3F4\uB3F5\uB3F6\uB3F7\uB3F8\uB3F9\uB3FA\uB3FB\uB3FD\uB3FE\uB3FF\uB400\uB401\uB402\uB403\uB404\uB405\uB406\uB407\uB408\uB409\uB40A\uB40B\uB40C\uB40D\uB40E\uB40F\uB411\uB412\uB413\uB414\uB415\uB416\uB417\uB419\uB41A\uB41B\uB41D\uB41E\uB41F\uB421\uB422\uB423\uB424\uB425\uB426\uB427\uB42A\uB42C\uB42D\uB42E\uB42F\uB430\uB431\uB432\uB433\uB435\uB436\uB437\uB438\uB439\uB43A\uB43B\uB43C\uB43D\uB43E\uB43F\uB440\uB441\uB442\uB443\uB444\uFFFD".split("");
        for (j3 = 0; j3 != D5[137].length; ++j3)
          if (D5[137][j3].charCodeAt(0) !== 65533) {
            e7[D5[137][j3]] = 35072 + j3;
            d2[35072 + j3] = D5[137][j3];
          }
        D5[138] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uB445\uB446\uB447\uB448\uB449\uB44A\uB44B\uB44C\uB44D\uB44E\uB44F\uB452\uB453\uB455\uB456\uB457\uB459\uB45A\uB45B\uB45C\uB45D\uB45E\uB45F\uB462\uB464\uB466\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uB467\uB468\uB469\uB46A\uB46B\uB46D\uB46E\uB46F\uB470\uB471\uB472\uB473\uB474\uB475\uB476\uB477\uB478\uB479\uB47A\uB47B\uB47C\uB47D\uB47E\uB47F\uB481\uB482\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uB483\uB484\uB485\uB486\uB487\uB489\uB48A\uB48B\uB48C\uB48D\uB48E\uB48F\uB490\uB491\uB492\uB493\uB494\uB495\uB496\uB497\uB498\uB499\uB49A\uB49B\uB49C\uB49E\uB49F\uB4A0\uB4A1\uB4A2\uB4A3\uB4A5\uB4A6\uB4A7\uB4A9\uB4AA\uB4AB\uB4AD\uB4AE\uB4AF\uB4B0\uB4B1\uB4B2\uB4B3\uB4B4\uB4B6\uB4B8\uB4BA\uB4BB\uB4BC\uB4BD\uB4BE\uB4BF\uB4C1\uB4C2\uB4C3\uB4C5\uB4C6\uB4C7\uB4C9\uB4CA\uB4CB\uB4CC\uB4CD\uB4CE\uB4CF\uB4D1\uB4D2\uB4D3\uB4D4\uB4D6\uB4D7\uB4D8\uB4D9\uB4DA\uB4DB\uB4DE\uB4DF\uB4E1\uB4E2\uB4E5\uB4E7\uB4E8\uB4E9\uB4EA\uB4EB\uB4EE\uB4F0\uB4F2\uB4F3\uB4F4\uB4F5\uB4F6\uB4F7\uB4F9\uB4FA\uB4FB\uB4FC\uB4FD\uB4FE\uB4FF\uB500\uB501\uB502\uB503\uB504\uB505\uB506\uB507\uB508\uB509\uB50A\uB50B\uB50C\uB50D\uB50E\uB50F\uB510\uB511\uB512\uB513\uB516\uB517\uB519\uB51A\uB51D\uFFFD".split("");
        for (j3 = 0; j3 != D5[138].length; ++j3)
          if (D5[138][j3].charCodeAt(0) !== 65533) {
            e7[D5[138][j3]] = 35328 + j3;
            d2[35328 + j3] = D5[138][j3];
          }
        D5[139] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uB51E\uB51F\uB520\uB521\uB522\uB523\uB526\uB52B\uB52C\uB52D\uB52E\uB52F\uB532\uB533\uB535\uB536\uB537\uB539\uB53A\uB53B\uB53C\uB53D\uB53E\uB53F\uB542\uB546\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uB547\uB548\uB549\uB54A\uB54E\uB54F\uB551\uB552\uB553\uB555\uB556\uB557\uB558\uB559\uB55A\uB55B\uB55E\uB562\uB563\uB564\uB565\uB566\uB567\uB568\uB569\uB56A\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uB56B\uB56C\uB56D\uB56E\uB56F\uB570\uB571\uB572\uB573\uB574\uB575\uB576\uB577\uB578\uB579\uB57A\uB57B\uB57C\uB57D\uB57E\uB57F\uB580\uB581\uB582\uB583\uB584\uB585\uB586\uB587\uB588\uB589\uB58A\uB58B\uB58C\uB58D\uB58E\uB58F\uB590\uB591\uB592\uB593\uB594\uB595\uB596\uB597\uB598\uB599\uB59A\uB59B\uB59C\uB59D\uB59E\uB59F\uB5A2\uB5A3\uB5A5\uB5A6\uB5A7\uB5A9\uB5AC\uB5AD\uB5AE\uB5AF\uB5B2\uB5B6\uB5B7\uB5B8\uB5B9\uB5BA\uB5BE\uB5BF\uB5C1\uB5C2\uB5C3\uB5C5\uB5C6\uB5C7\uB5C8\uB5C9\uB5CA\uB5CB\uB5CE\uB5D2\uB5D3\uB5D4\uB5D5\uB5D6\uB5D7\uB5D9\uB5DA\uB5DB\uB5DC\uB5DD\uB5DE\uB5DF\uB5E0\uB5E1\uB5E2\uB5E3\uB5E4\uB5E5\uB5E6\uB5E7\uB5E8\uB5E9\uB5EA\uB5EB\uB5ED\uB5EE\uB5EF\uB5F0\uB5F1\uB5F2\uB5F3\uB5F4\uB5F5\uB5F6\uB5F7\uB5F8\uB5F9\uB5FA\uB5FB\uB5FC\uB5FD\uB5FE\uB5FF\uFFFD".split("");
        for (j3 = 0; j3 != D5[139].length; ++j3)
          if (D5[139][j3].charCodeAt(0) !== 65533) {
            e7[D5[139][j3]] = 35584 + j3;
            d2[35584 + j3] = D5[139][j3];
          }
        D5[140] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uB600\uB601\uB602\uB603\uB604\uB605\uB606\uB607\uB608\uB609\uB60A\uB60B\uB60C\uB60D\uB60E\uB60F\uB612\uB613\uB615\uB616\uB617\uB619\uB61A\uB61B\uB61C\uB61D\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uB61E\uB61F\uB620\uB621\uB622\uB623\uB624\uB626\uB627\uB628\uB629\uB62A\uB62B\uB62D\uB62E\uB62F\uB630\uB631\uB632\uB633\uB635\uB636\uB637\uB638\uB639\uB63A\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uB63B\uB63C\uB63D\uB63E\uB63F\uB640\uB641\uB642\uB643\uB644\uB645\uB646\uB647\uB649\uB64A\uB64B\uB64C\uB64D\uB64E\uB64F\uB650\uB651\uB652\uB653\uB654\uB655\uB656\uB657\uB658\uB659\uB65A\uB65B\uB65C\uB65D\uB65E\uB65F\uB660\uB661\uB662\uB663\uB665\uB666\uB667\uB669\uB66A\uB66B\uB66C\uB66D\uB66E\uB66F\uB670\uB671\uB672\uB673\uB674\uB675\uB676\uB677\uB678\uB679\uB67A\uB67B\uB67C\uB67D\uB67E\uB67F\uB680\uB681\uB682\uB683\uB684\uB685\uB686\uB687\uB688\uB689\uB68A\uB68B\uB68C\uB68D\uB68E\uB68F\uB690\uB691\uB692\uB693\uB694\uB695\uB696\uB697\uB698\uB699\uB69A\uB69B\uB69E\uB69F\uB6A1\uB6A2\uB6A3\uB6A5\uB6A6\uB6A7\uB6A8\uB6A9\uB6AA\uB6AD\uB6AE\uB6AF\uB6B0\uB6B2\uB6B3\uB6B4\uB6B5\uB6B6\uB6B7\uB6B8\uB6B9\uB6BA\uB6BB\uB6BC\uB6BD\uB6BE\uB6BF\uB6C0\uB6C1\uB6C2\uFFFD".split("");
        for (j3 = 0; j3 != D5[140].length; ++j3)
          if (D5[140][j3].charCodeAt(0) !== 65533) {
            e7[D5[140][j3]] = 35840 + j3;
            d2[35840 + j3] = D5[140][j3];
          }
        D5[141] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uB6C3\uB6C4\uB6C5\uB6C6\uB6C7\uB6C8\uB6C9\uB6CA\uB6CB\uB6CC\uB6CD\uB6CE\uB6CF\uB6D0\uB6D1\uB6D2\uB6D3\uB6D5\uB6D6\uB6D7\uB6D8\uB6D9\uB6DA\uB6DB\uB6DC\uB6DD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uB6DE\uB6DF\uB6E0\uB6E1\uB6E2\uB6E3\uB6E4\uB6E5\uB6E6\uB6E7\uB6E8\uB6E9\uB6EA\uB6EB\uB6EC\uB6ED\uB6EE\uB6EF\uB6F1\uB6F2\uB6F3\uB6F5\uB6F6\uB6F7\uB6F9\uB6FA\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uB6FB\uB6FC\uB6FD\uB6FE\uB6FF\uB702\uB703\uB704\uB706\uB707\uB708\uB709\uB70A\uB70B\uB70C\uB70D\uB70E\uB70F\uB710\uB711\uB712\uB713\uB714\uB715\uB716\uB717\uB718\uB719\uB71A\uB71B\uB71C\uB71D\uB71E\uB71F\uB720\uB721\uB722\uB723\uB724\uB725\uB726\uB727\uB72A\uB72B\uB72D\uB72E\uB731\uB732\uB733\uB734\uB735\uB736\uB737\uB73A\uB73C\uB73D\uB73E\uB73F\uB740\uB741\uB742\uB743\uB745\uB746\uB747\uB749\uB74A\uB74B\uB74D\uB74E\uB74F\uB750\uB751\uB752\uB753\uB756\uB757\uB758\uB759\uB75A\uB75B\uB75C\uB75D\uB75E\uB75F\uB761\uB762\uB763\uB765\uB766\uB767\uB769\uB76A\uB76B\uB76C\uB76D\uB76E\uB76F\uB772\uB774\uB776\uB777\uB778\uB779\uB77A\uB77B\uB77E\uB77F\uB781\uB782\uB783\uB785\uB786\uB787\uB788\uB789\uB78A\uB78B\uB78E\uB793\uB794\uB795\uB79A\uB79B\uB79D\uB79E\uFFFD".split("");
        for (j3 = 0; j3 != D5[141].length; ++j3)
          if (D5[141][j3].charCodeAt(0) !== 65533) {
            e7[D5[141][j3]] = 36096 + j3;
            d2[36096 + j3] = D5[141][j3];
          }
        D5[142] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uB79F\uB7A1\uB7A2\uB7A3\uB7A4\uB7A5\uB7A6\uB7A7\uB7AA\uB7AE\uB7AF\uB7B0\uB7B1\uB7B2\uB7B3\uB7B6\uB7B7\uB7B9\uB7BA\uB7BB\uB7BC\uB7BD\uB7BE\uB7BF\uB7C0\uB7C1\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uB7C2\uB7C3\uB7C4\uB7C5\uB7C6\uB7C8\uB7CA\uB7CB\uB7CC\uB7CD\uB7CE\uB7CF\uB7D0\uB7D1\uB7D2\uB7D3\uB7D4\uB7D5\uB7D6\uB7D7\uB7D8\uB7D9\uB7DA\uB7DB\uB7DC\uB7DD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uB7DE\uB7DF\uB7E0\uB7E1\uB7E2\uB7E3\uB7E4\uB7E5\uB7E6\uB7E7\uB7E8\uB7E9\uB7EA\uB7EB\uB7EE\uB7EF\uB7F1\uB7F2\uB7F3\uB7F5\uB7F6\uB7F7\uB7F8\uB7F9\uB7FA\uB7FB\uB7FE\uB802\uB803\uB804\uB805\uB806\uB80A\uB80B\uB80D\uB80E\uB80F\uB811\uB812\uB813\uB814\uB815\uB816\uB817\uB81A\uB81C\uB81E\uB81F\uB820\uB821\uB822\uB823\uB826\uB827\uB829\uB82A\uB82B\uB82D\uB82E\uB82F\uB830\uB831\uB832\uB833\uB836\uB83A\uB83B\uB83C\uB83D\uB83E\uB83F\uB841\uB842\uB843\uB845\uB846\uB847\uB848\uB849\uB84A\uB84B\uB84C\uB84D\uB84E\uB84F\uB850\uB852\uB854\uB855\uB856\uB857\uB858\uB859\uB85A\uB85B\uB85E\uB85F\uB861\uB862\uB863\uB865\uB866\uB867\uB868\uB869\uB86A\uB86B\uB86E\uB870\uB872\uB873\uB874\uB875\uB876\uB877\uB879\uB87A\uB87B\uB87D\uB87E\uB87F\uB880\uB881\uB882\uB883\uB884\uFFFD".split("");
        for (j3 = 0; j3 != D5[142].length; ++j3)
          if (D5[142][j3].charCodeAt(0) !== 65533) {
            e7[D5[142][j3]] = 36352 + j3;
            d2[36352 + j3] = D5[142][j3];
          }
        D5[143] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uB885\uB886\uB887\uB888\uB889\uB88A\uB88B\uB88C\uB88E\uB88F\uB890\uB891\uB892\uB893\uB894\uB895\uB896\uB897\uB898\uB899\uB89A\uB89B\uB89C\uB89D\uB89E\uB89F\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uB8A0\uB8A1\uB8A2\uB8A3\uB8A4\uB8A5\uB8A6\uB8A7\uB8A9\uB8AA\uB8AB\uB8AC\uB8AD\uB8AE\uB8AF\uB8B1\uB8B2\uB8B3\uB8B5\uB8B6\uB8B7\uB8B9\uB8BA\uB8BB\uB8BC\uB8BD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uB8BE\uB8BF\uB8C2\uB8C4\uB8C6\uB8C7\uB8C8\uB8C9\uB8CA\uB8CB\uB8CD\uB8CE\uB8CF\uB8D1\uB8D2\uB8D3\uB8D5\uB8D6\uB8D7\uB8D8\uB8D9\uB8DA\uB8DB\uB8DC\uB8DE\uB8E0\uB8E2\uB8E3\uB8E4\uB8E5\uB8E6\uB8E7\uB8EA\uB8EB\uB8ED\uB8EE\uB8EF\uB8F1\uB8F2\uB8F3\uB8F4\uB8F5\uB8F6\uB8F7\uB8FA\uB8FC\uB8FE\uB8FF\uB900\uB901\uB902\uB903\uB905\uB906\uB907\uB908\uB909\uB90A\uB90B\uB90C\uB90D\uB90E\uB90F\uB910\uB911\uB912\uB913\uB914\uB915\uB916\uB917\uB919\uB91A\uB91B\uB91C\uB91D\uB91E\uB91F\uB921\uB922\uB923\uB924\uB925\uB926\uB927\uB928\uB929\uB92A\uB92B\uB92C\uB92D\uB92E\uB92F\uB930\uB931\uB932\uB933\uB934\uB935\uB936\uB937\uB938\uB939\uB93A\uB93B\uB93E\uB93F\uB941\uB942\uB943\uB945\uB946\uB947\uB948\uB949\uB94A\uB94B\uB94D\uB94E\uB950\uB952\uB953\uB954\uB955\uB956\uB957\uFFFD".split("");
        for (j3 = 0; j3 != D5[143].length; ++j3)
          if (D5[143][j3].charCodeAt(0) !== 65533) {
            e7[D5[143][j3]] = 36608 + j3;
            d2[36608 + j3] = D5[143][j3];
          }
        D5[144] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uB95A\uB95B\uB95D\uB95E\uB95F\uB961\uB962\uB963\uB964\uB965\uB966\uB967\uB96A\uB96C\uB96E\uB96F\uB970\uB971\uB972\uB973\uB976\uB977\uB979\uB97A\uB97B\uB97D\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uB97E\uB97F\uB980\uB981\uB982\uB983\uB986\uB988\uB98B\uB98C\uB98F\uB990\uB991\uB992\uB993\uB994\uB995\uB996\uB997\uB998\uB999\uB99A\uB99B\uB99C\uB99D\uB99E\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uB99F\uB9A0\uB9A1\uB9A2\uB9A3\uB9A4\uB9A5\uB9A6\uB9A7\uB9A8\uB9A9\uB9AA\uB9AB\uB9AE\uB9AF\uB9B1\uB9B2\uB9B3\uB9B5\uB9B6\uB9B7\uB9B8\uB9B9\uB9BA\uB9BB\uB9BE\uB9C0\uB9C2\uB9C3\uB9C4\uB9C5\uB9C6\uB9C7\uB9CA\uB9CB\uB9CD\uB9D3\uB9D4\uB9D5\uB9D6\uB9D7\uB9DA\uB9DC\uB9DF\uB9E0\uB9E2\uB9E6\uB9E7\uB9E9\uB9EA\uB9EB\uB9ED\uB9EE\uB9EF\uB9F0\uB9F1\uB9F2\uB9F3\uB9F6\uB9FB\uB9FC\uB9FD\uB9FE\uB9FF\uBA02\uBA03\uBA04\uBA05\uBA06\uBA07\uBA09\uBA0A\uBA0B\uBA0C\uBA0D\uBA0E\uBA0F\uBA10\uBA11\uBA12\uBA13\uBA14\uBA16\uBA17\uBA18\uBA19\uBA1A\uBA1B\uBA1C\uBA1D\uBA1E\uBA1F\uBA20\uBA21\uBA22\uBA23\uBA24\uBA25\uBA26\uBA27\uBA28\uBA29\uBA2A\uBA2B\uBA2C\uBA2D\uBA2E\uBA2F\uBA30\uBA31\uBA32\uBA33\uBA34\uBA35\uBA36\uBA37\uBA3A\uBA3B\uBA3D\uBA3E\uBA3F\uBA41\uBA43\uBA44\uBA45\uBA46\uFFFD".split("");
        for (j3 = 0; j3 != D5[144].length; ++j3)
          if (D5[144][j3].charCodeAt(0) !== 65533) {
            e7[D5[144][j3]] = 36864 + j3;
            d2[36864 + j3] = D5[144][j3];
          }
        D5[145] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uBA47\uBA4A\uBA4C\uBA4F\uBA50\uBA51\uBA52\uBA56\uBA57\uBA59\uBA5A\uBA5B\uBA5D\uBA5E\uBA5F\uBA60\uBA61\uBA62\uBA63\uBA66\uBA6A\uBA6B\uBA6C\uBA6D\uBA6E\uBA6F\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uBA72\uBA73\uBA75\uBA76\uBA77\uBA79\uBA7A\uBA7B\uBA7C\uBA7D\uBA7E\uBA7F\uBA80\uBA81\uBA82\uBA86\uBA88\uBA89\uBA8A\uBA8B\uBA8D\uBA8E\uBA8F\uBA90\uBA91\uBA92\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uBA93\uBA94\uBA95\uBA96\uBA97\uBA98\uBA99\uBA9A\uBA9B\uBA9C\uBA9D\uBA9E\uBA9F\uBAA0\uBAA1\uBAA2\uBAA3\uBAA4\uBAA5\uBAA6\uBAA7\uBAAA\uBAAD\uBAAE\uBAAF\uBAB1\uBAB3\uBAB4\uBAB5\uBAB6\uBAB7\uBABA\uBABC\uBABE\uBABF\uBAC0\uBAC1\uBAC2\uBAC3\uBAC5\uBAC6\uBAC7\uBAC9\uBACA\uBACB\uBACC\uBACD\uBACE\uBACF\uBAD0\uBAD1\uBAD2\uBAD3\uBAD4\uBAD5\uBAD6\uBAD7\uBADA\uBADB\uBADC\uBADD\uBADE\uBADF\uBAE0\uBAE1\uBAE2\uBAE3\uBAE4\uBAE5\uBAE6\uBAE7\uBAE8\uBAE9\uBAEA\uBAEB\uBAEC\uBAED\uBAEE\uBAEF\uBAF0\uBAF1\uBAF2\uBAF3\uBAF4\uBAF5\uBAF6\uBAF7\uBAF8\uBAF9\uBAFA\uBAFB\uBAFD\uBAFE\uBAFF\uBB01\uBB02\uBB03\uBB05\uBB06\uBB07\uBB08\uBB09\uBB0A\uBB0B\uBB0C\uBB0E\uBB10\uBB12\uBB13\uBB14\uBB15\uBB16\uBB17\uBB19\uBB1A\uBB1B\uBB1D\uBB1E\uBB1F\uBB21\uBB22\uBB23\uBB24\uBB25\uBB26\uBB27\uFFFD".split("");
        for (j3 = 0; j3 != D5[145].length; ++j3)
          if (D5[145][j3].charCodeAt(0) !== 65533) {
            e7[D5[145][j3]] = 37120 + j3;
            d2[37120 + j3] = D5[145][j3];
          }
        D5[146] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uBB28\uBB2A\uBB2C\uBB2D\uBB2E\uBB2F\uBB30\uBB31\uBB32\uBB33\uBB37\uBB39\uBB3A\uBB3F\uBB40\uBB41\uBB42\uBB43\uBB46\uBB48\uBB4A\uBB4B\uBB4C\uBB4E\uBB51\uBB52\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uBB53\uBB55\uBB56\uBB57\uBB59\uBB5A\uBB5B\uBB5C\uBB5D\uBB5E\uBB5F\uBB60\uBB62\uBB64\uBB65\uBB66\uBB67\uBB68\uBB69\uBB6A\uBB6B\uBB6D\uBB6E\uBB6F\uBB70\uBB71\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uBB72\uBB73\uBB74\uBB75\uBB76\uBB77\uBB78\uBB79\uBB7A\uBB7B\uBB7C\uBB7D\uBB7E\uBB7F\uBB80\uBB81\uBB82\uBB83\uBB84\uBB85\uBB86\uBB87\uBB89\uBB8A\uBB8B\uBB8D\uBB8E\uBB8F\uBB91\uBB92\uBB93\uBB94\uBB95\uBB96\uBB97\uBB98\uBB99\uBB9A\uBB9B\uBB9C\uBB9D\uBB9E\uBB9F\uBBA0\uBBA1\uBBA2\uBBA3\uBBA5\uBBA6\uBBA7\uBBA9\uBBAA\uBBAB\uBBAD\uBBAE\uBBAF\uBBB0\uBBB1\uBBB2\uBBB3\uBBB5\uBBB6\uBBB8\uBBB9\uBBBA\uBBBB\uBBBC\uBBBD\uBBBE\uBBBF\uBBC1\uBBC2\uBBC3\uBBC5\uBBC6\uBBC7\uBBC9\uBBCA\uBBCB\uBBCC\uBBCD\uBBCE\uBBCF\uBBD1\uBBD2\uBBD4\uBBD5\uBBD6\uBBD7\uBBD8\uBBD9\uBBDA\uBBDB\uBBDC\uBBDD\uBBDE\uBBDF\uBBE0\uBBE1\uBBE2\uBBE3\uBBE4\uBBE5\uBBE6\uBBE7\uBBE8\uBBE9\uBBEA\uBBEB\uBBEC\uBBED\uBBEE\uBBEF\uBBF0\uBBF1\uBBF2\uBBF3\uBBF4\uBBF5\uBBF6\uBBF7\uBBFA\uBBFB\uBBFD\uBBFE\uBC01\uFFFD".split("");
        for (j3 = 0; j3 != D5[146].length; ++j3)
          if (D5[146][j3].charCodeAt(0) !== 65533) {
            e7[D5[146][j3]] = 37376 + j3;
            d2[37376 + j3] = D5[146][j3];
          }
        D5[147] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uBC03\uBC04\uBC05\uBC06\uBC07\uBC0A\uBC0E\uBC10\uBC12\uBC13\uBC19\uBC1A\uBC20\uBC21\uBC22\uBC23\uBC26\uBC28\uBC2A\uBC2B\uBC2C\uBC2E\uBC2F\uBC32\uBC33\uBC35\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uBC36\uBC37\uBC39\uBC3A\uBC3B\uBC3C\uBC3D\uBC3E\uBC3F\uBC42\uBC46\uBC47\uBC48\uBC4A\uBC4B\uBC4E\uBC4F\uBC51\uBC52\uBC53\uBC54\uBC55\uBC56\uBC57\uBC58\uBC59\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uBC5A\uBC5B\uBC5C\uBC5E\uBC5F\uBC60\uBC61\uBC62\uBC63\uBC64\uBC65\uBC66\uBC67\uBC68\uBC69\uBC6A\uBC6B\uBC6C\uBC6D\uBC6E\uBC6F\uBC70\uBC71\uBC72\uBC73\uBC74\uBC75\uBC76\uBC77\uBC78\uBC79\uBC7A\uBC7B\uBC7C\uBC7D\uBC7E\uBC7F\uBC80\uBC81\uBC82\uBC83\uBC86\uBC87\uBC89\uBC8A\uBC8D\uBC8F\uBC90\uBC91\uBC92\uBC93\uBC96\uBC98\uBC9B\uBC9C\uBC9D\uBC9E\uBC9F\uBCA2\uBCA3\uBCA5\uBCA6\uBCA9\uBCAA\uBCAB\uBCAC\uBCAD\uBCAE\uBCAF\uBCB2\uBCB6\uBCB7\uBCB8\uBCB9\uBCBA\uBCBB\uBCBE\uBCBF\uBCC1\uBCC2\uBCC3\uBCC5\uBCC6\uBCC7\uBCC8\uBCC9\uBCCA\uBCCB\uBCCC\uBCCE\uBCD2\uBCD3\uBCD4\uBCD6\uBCD7\uBCD9\uBCDA\uBCDB\uBCDD\uBCDE\uBCDF\uBCE0\uBCE1\uBCE2\uBCE3\uBCE4\uBCE5\uBCE6\uBCE7\uBCE8\uBCE9\uBCEA\uBCEB\uBCEC\uBCED\uBCEE\uBCEF\uBCF0\uBCF1\uBCF2\uBCF3\uBCF7\uBCF9\uBCFA\uBCFB\uBCFD\uFFFD".split("");
        for (j3 = 0; j3 != D5[147].length; ++j3)
          if (D5[147][j3].charCodeAt(0) !== 65533) {
            e7[D5[147][j3]] = 37632 + j3;
            d2[37632 + j3] = D5[147][j3];
          }
        D5[148] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uBCFE\uBCFF\uBD00\uBD01\uBD02\uBD03\uBD06\uBD08\uBD0A\uBD0B\uBD0C\uBD0D\uBD0E\uBD0F\uBD11\uBD12\uBD13\uBD15\uBD16\uBD17\uBD18\uBD19\uBD1A\uBD1B\uBD1C\uBD1D\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uBD1E\uBD1F\uBD20\uBD21\uBD22\uBD23\uBD25\uBD26\uBD27\uBD28\uBD29\uBD2A\uBD2B\uBD2D\uBD2E\uBD2F\uBD30\uBD31\uBD32\uBD33\uBD34\uBD35\uBD36\uBD37\uBD38\uBD39\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uBD3A\uBD3B\uBD3C\uBD3D\uBD3E\uBD3F\uBD41\uBD42\uBD43\uBD44\uBD45\uBD46\uBD47\uBD4A\uBD4B\uBD4D\uBD4E\uBD4F\uBD51\uBD52\uBD53\uBD54\uBD55\uBD56\uBD57\uBD5A\uBD5B\uBD5C\uBD5D\uBD5E\uBD5F\uBD60\uBD61\uBD62\uBD63\uBD65\uBD66\uBD67\uBD69\uBD6A\uBD6B\uBD6C\uBD6D\uBD6E\uBD6F\uBD70\uBD71\uBD72\uBD73\uBD74\uBD75\uBD76\uBD77\uBD78\uBD79\uBD7A\uBD7B\uBD7C\uBD7D\uBD7E\uBD7F\uBD82\uBD83\uBD85\uBD86\uBD8B\uBD8C\uBD8D\uBD8E\uBD8F\uBD92\uBD94\uBD96\uBD97\uBD98\uBD9B\uBD9D\uBD9E\uBD9F\uBDA0\uBDA1\uBDA2\uBDA3\uBDA5\uBDA6\uBDA7\uBDA8\uBDA9\uBDAA\uBDAB\uBDAC\uBDAD\uBDAE\uBDAF\uBDB1\uBDB2\uBDB3\uBDB4\uBDB5\uBDB6\uBDB7\uBDB9\uBDBA\uBDBB\uBDBC\uBDBD\uBDBE\uBDBF\uBDC0\uBDC1\uBDC2\uBDC3\uBDC4\uBDC5\uBDC6\uBDC7\uBDC8\uBDC9\uBDCA\uBDCB\uBDCC\uBDCD\uBDCE\uBDCF\uBDD0\uBDD1\uFFFD".split("");
        for (j3 = 0; j3 != D5[148].length; ++j3)
          if (D5[148][j3].charCodeAt(0) !== 65533) {
            e7[D5[148][j3]] = 37888 + j3;
            d2[37888 + j3] = D5[148][j3];
          }
        D5[149] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uBDD2\uBDD3\uBDD6\uBDD7\uBDD9\uBDDA\uBDDB\uBDDD\uBDDE\uBDDF\uBDE0\uBDE1\uBDE2\uBDE3\uBDE4\uBDE5\uBDE6\uBDE7\uBDE8\uBDEA\uBDEB\uBDEC\uBDED\uBDEE\uBDEF\uBDF1\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uBDF2\uBDF3\uBDF5\uBDF6\uBDF7\uBDF9\uBDFA\uBDFB\uBDFC\uBDFD\uBDFE\uBDFF\uBE01\uBE02\uBE04\uBE06\uBE07\uBE08\uBE09\uBE0A\uBE0B\uBE0E\uBE0F\uBE11\uBE12\uBE13\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uBE15\uBE16\uBE17\uBE18\uBE19\uBE1A\uBE1B\uBE1E\uBE20\uBE21\uBE22\uBE23\uBE24\uBE25\uBE26\uBE27\uBE28\uBE29\uBE2A\uBE2B\uBE2C\uBE2D\uBE2E\uBE2F\uBE30\uBE31\uBE32\uBE33\uBE34\uBE35\uBE36\uBE37\uBE38\uBE39\uBE3A\uBE3B\uBE3C\uBE3D\uBE3E\uBE3F\uBE40\uBE41\uBE42\uBE43\uBE46\uBE47\uBE49\uBE4A\uBE4B\uBE4D\uBE4F\uBE50\uBE51\uBE52\uBE53\uBE56\uBE58\uBE5C\uBE5D\uBE5E\uBE5F\uBE62\uBE63\uBE65\uBE66\uBE67\uBE69\uBE6B\uBE6C\uBE6D\uBE6E\uBE6F\uBE72\uBE76\uBE77\uBE78\uBE79\uBE7A\uBE7E\uBE7F\uBE81\uBE82\uBE83\uBE85\uBE86\uBE87\uBE88\uBE89\uBE8A\uBE8B\uBE8E\uBE92\uBE93\uBE94\uBE95\uBE96\uBE97\uBE9A\uBE9B\uBE9C\uBE9D\uBE9E\uBE9F\uBEA0\uBEA1\uBEA2\uBEA3\uBEA4\uBEA5\uBEA6\uBEA7\uBEA9\uBEAA\uBEAB\uBEAC\uBEAD\uBEAE\uBEAF\uBEB0\uBEB1\uBEB2\uBEB3\uBEB4\uBEB5\uBEB6\uBEB7\uFFFD".split("");
        for (j3 = 0; j3 != D5[149].length; ++j3)
          if (D5[149][j3].charCodeAt(0) !== 65533) {
            e7[D5[149][j3]] = 38144 + j3;
            d2[38144 + j3] = D5[149][j3];
          }
        D5[150] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uBEB8\uBEB9\uBEBA\uBEBB\uBEBC\uBEBD\uBEBE\uBEBF\uBEC0\uBEC1\uBEC2\uBEC3\uBEC4\uBEC5\uBEC6\uBEC7\uBEC8\uBEC9\uBECA\uBECB\uBECC\uBECD\uBECE\uBECF\uBED2\uBED3\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uBED5\uBED6\uBED9\uBEDA\uBEDB\uBEDC\uBEDD\uBEDE\uBEDF\uBEE1\uBEE2\uBEE6\uBEE7\uBEE8\uBEE9\uBEEA\uBEEB\uBEED\uBEEE\uBEEF\uBEF0\uBEF1\uBEF2\uBEF3\uBEF4\uBEF5\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uBEF6\uBEF7\uBEF8\uBEF9\uBEFA\uBEFB\uBEFC\uBEFD\uBEFE\uBEFF\uBF00\uBF02\uBF03\uBF04\uBF05\uBF06\uBF07\uBF0A\uBF0B\uBF0C\uBF0D\uBF0E\uBF0F\uBF10\uBF11\uBF12\uBF13\uBF14\uBF15\uBF16\uBF17\uBF1A\uBF1E\uBF1F\uBF20\uBF21\uBF22\uBF23\uBF24\uBF25\uBF26\uBF27\uBF28\uBF29\uBF2A\uBF2B\uBF2C\uBF2D\uBF2E\uBF2F\uBF30\uBF31\uBF32\uBF33\uBF34\uBF35\uBF36\uBF37\uBF38\uBF39\uBF3A\uBF3B\uBF3C\uBF3D\uBF3E\uBF3F\uBF42\uBF43\uBF45\uBF46\uBF47\uBF49\uBF4A\uBF4B\uBF4C\uBF4D\uBF4E\uBF4F\uBF52\uBF53\uBF54\uBF56\uBF57\uBF58\uBF59\uBF5A\uBF5B\uBF5C\uBF5D\uBF5E\uBF5F\uBF60\uBF61\uBF62\uBF63\uBF64\uBF65\uBF66\uBF67\uBF68\uBF69\uBF6A\uBF6B\uBF6C\uBF6D\uBF6E\uBF6F\uBF70\uBF71\uBF72\uBF73\uBF74\uBF75\uBF76\uBF77\uBF78\uBF79\uBF7A\uBF7B\uBF7C\uBF7D\uBF7E\uBF7F\uBF80\uBF81\uBF82\uFFFD".split("");
        for (j3 = 0; j3 != D5[150].length; ++j3)
          if (D5[150][j3].charCodeAt(0) !== 65533) {
            e7[D5[150][j3]] = 38400 + j3;
            d2[38400 + j3] = D5[150][j3];
          }
        D5[151] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uBF83\uBF84\uBF85\uBF86\uBF87\uBF88\uBF89\uBF8A\uBF8B\uBF8C\uBF8D\uBF8E\uBF8F\uBF90\uBF91\uBF92\uBF93\uBF95\uBF96\uBF97\uBF98\uBF99\uBF9A\uBF9B\uBF9C\uBF9D\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uBF9E\uBF9F\uBFA0\uBFA1\uBFA2\uBFA3\uBFA4\uBFA5\uBFA6\uBFA7\uBFA8\uBFA9\uBFAA\uBFAB\uBFAC\uBFAD\uBFAE\uBFAF\uBFB1\uBFB2\uBFB3\uBFB4\uBFB5\uBFB6\uBFB7\uBFB8\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uBFB9\uBFBA\uBFBB\uBFBC\uBFBD\uBFBE\uBFBF\uBFC0\uBFC1\uBFC2\uBFC3\uBFC4\uBFC6\uBFC7\uBFC8\uBFC9\uBFCA\uBFCB\uBFCE\uBFCF\uBFD1\uBFD2\uBFD3\uBFD5\uBFD6\uBFD7\uBFD8\uBFD9\uBFDA\uBFDB\uBFDD\uBFDE\uBFE0\uBFE2\uBFE3\uBFE4\uBFE5\uBFE6\uBFE7\uBFE8\uBFE9\uBFEA\uBFEB\uBFEC\uBFED\uBFEE\uBFEF\uBFF0\uBFF1\uBFF2\uBFF3\uBFF4\uBFF5\uBFF6\uBFF7\uBFF8\uBFF9\uBFFA\uBFFB\uBFFC\uBFFD\uBFFE\uBFFF\uC000\uC001\uC002\uC003\uC004\uC005\uC006\uC007\uC008\uC009\uC00A\uC00B\uC00C\uC00D\uC00E\uC00F\uC010\uC011\uC012\uC013\uC014\uC015\uC016\uC017\uC018\uC019\uC01A\uC01B\uC01C\uC01D\uC01E\uC01F\uC020\uC021\uC022\uC023\uC024\uC025\uC026\uC027\uC028\uC029\uC02A\uC02B\uC02C\uC02D\uC02E\uC02F\uC030\uC031\uC032\uC033\uC034\uC035\uC036\uC037\uC038\uC039\uC03A\uC03B\uC03D\uC03E\uC03F\uFFFD".split("");
        for (j3 = 0; j3 != D5[151].length; ++j3)
          if (D5[151][j3].charCodeAt(0) !== 65533) {
            e7[D5[151][j3]] = 38656 + j3;
            d2[38656 + j3] = D5[151][j3];
          }
        D5[152] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uC040\uC041\uC042\uC043\uC044\uC045\uC046\uC047\uC048\uC049\uC04A\uC04B\uC04C\uC04D\uC04E\uC04F\uC050\uC052\uC053\uC054\uC055\uC056\uC057\uC059\uC05A\uC05B\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uC05D\uC05E\uC05F\uC061\uC062\uC063\uC064\uC065\uC066\uC067\uC06A\uC06B\uC06C\uC06D\uC06E\uC06F\uC070\uC071\uC072\uC073\uC074\uC075\uC076\uC077\uC078\uC079\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uC07A\uC07B\uC07C\uC07D\uC07E\uC07F\uC080\uC081\uC082\uC083\uC084\uC085\uC086\uC087\uC088\uC089\uC08A\uC08B\uC08C\uC08D\uC08E\uC08F\uC092\uC093\uC095\uC096\uC097\uC099\uC09A\uC09B\uC09C\uC09D\uC09E\uC09F\uC0A2\uC0A4\uC0A6\uC0A7\uC0A8\uC0A9\uC0AA\uC0AB\uC0AE\uC0B1\uC0B2\uC0B7\uC0B8\uC0B9\uC0BA\uC0BB\uC0BE\uC0C2\uC0C3\uC0C4\uC0C6\uC0C7\uC0CA\uC0CB\uC0CD\uC0CE\uC0CF\uC0D1\uC0D2\uC0D3\uC0D4\uC0D5\uC0D6\uC0D7\uC0DA\uC0DE\uC0DF\uC0E0\uC0E1\uC0E2\uC0E3\uC0E6\uC0E7\uC0E9\uC0EA\uC0EB\uC0ED\uC0EE\uC0EF\uC0F0\uC0F1\uC0F2\uC0F3\uC0F6\uC0F8\uC0FA\uC0FB\uC0FC\uC0FD\uC0FE\uC0FF\uC101\uC102\uC103\uC105\uC106\uC107\uC109\uC10A\uC10B\uC10C\uC10D\uC10E\uC10F\uC111\uC112\uC113\uC114\uC116\uC117\uC118\uC119\uC11A\uC11B\uC121\uC122\uC125\uC128\uC129\uC12A\uC12B\uC12E\uFFFD".split("");
        for (j3 = 0; j3 != D5[152].length; ++j3)
          if (D5[152][j3].charCodeAt(0) !== 65533) {
            e7[D5[152][j3]] = 38912 + j3;
            d2[38912 + j3] = D5[152][j3];
          }
        D5[153] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uC132\uC133\uC134\uC135\uC137\uC13A\uC13B\uC13D\uC13E\uC13F\uC141\uC142\uC143\uC144\uC145\uC146\uC147\uC14A\uC14E\uC14F\uC150\uC151\uC152\uC153\uC156\uC157\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uC159\uC15A\uC15B\uC15D\uC15E\uC15F\uC160\uC161\uC162\uC163\uC166\uC16A\uC16B\uC16C\uC16D\uC16E\uC16F\uC171\uC172\uC173\uC175\uC176\uC177\uC179\uC17A\uC17B\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uC17C\uC17D\uC17E\uC17F\uC180\uC181\uC182\uC183\uC184\uC186\uC187\uC188\uC189\uC18A\uC18B\uC18F\uC191\uC192\uC193\uC195\uC197\uC198\uC199\uC19A\uC19B\uC19E\uC1A0\uC1A2\uC1A3\uC1A4\uC1A6\uC1A7\uC1AA\uC1AB\uC1AD\uC1AE\uC1AF\uC1B1\uC1B2\uC1B3\uC1B4\uC1B5\uC1B6\uC1B7\uC1B8\uC1B9\uC1BA\uC1BB\uC1BC\uC1BE\uC1BF\uC1C0\uC1C1\uC1C2\uC1C3\uC1C5\uC1C6\uC1C7\uC1C9\uC1CA\uC1CB\uC1CD\uC1CE\uC1CF\uC1D0\uC1D1\uC1D2\uC1D3\uC1D5\uC1D6\uC1D9\uC1DA\uC1DB\uC1DC\uC1DD\uC1DE\uC1DF\uC1E1\uC1E2\uC1E3\uC1E5\uC1E6\uC1E7\uC1E9\uC1EA\uC1EB\uC1EC\uC1ED\uC1EE\uC1EF\uC1F2\uC1F4\uC1F5\uC1F6\uC1F7\uC1F8\uC1F9\uC1FA\uC1FB\uC1FE\uC1FF\uC201\uC202\uC203\uC205\uC206\uC207\uC208\uC209\uC20A\uC20B\uC20E\uC210\uC212\uC213\uC214\uC215\uC216\uC217\uC21A\uC21B\uC21D\uC21E\uC221\uC222\uC223\uFFFD".split("");
        for (j3 = 0; j3 != D5[153].length; ++j3)
          if (D5[153][j3].charCodeAt(0) !== 65533) {
            e7[D5[153][j3]] = 39168 + j3;
            d2[39168 + j3] = D5[153][j3];
          }
        D5[154] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uC224\uC225\uC226\uC227\uC22A\uC22C\uC22E\uC230\uC233\uC235\uC236\uC237\uC238\uC239\uC23A\uC23B\uC23C\uC23D\uC23E\uC23F\uC240\uC241\uC242\uC243\uC244\uC245\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uC246\uC247\uC249\uC24A\uC24B\uC24C\uC24D\uC24E\uC24F\uC252\uC253\uC255\uC256\uC257\uC259\uC25A\uC25B\uC25C\uC25D\uC25E\uC25F\uC261\uC262\uC263\uC264\uC266\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uC267\uC268\uC269\uC26A\uC26B\uC26E\uC26F\uC271\uC272\uC273\uC275\uC276\uC277\uC278\uC279\uC27A\uC27B\uC27E\uC280\uC282\uC283\uC284\uC285\uC286\uC287\uC28A\uC28B\uC28C\uC28D\uC28E\uC28F\uC291\uC292\uC293\uC294\uC295\uC296\uC297\uC299\uC29A\uC29C\uC29E\uC29F\uC2A0\uC2A1\uC2A2\uC2A3\uC2A6\uC2A7\uC2A9\uC2AA\uC2AB\uC2AE\uC2AF\uC2B0\uC2B1\uC2B2\uC2B3\uC2B6\uC2B8\uC2BA\uC2BB\uC2BC\uC2BD\uC2BE\uC2BF\uC2C0\uC2C1\uC2C2\uC2C3\uC2C4\uC2C5\uC2C6\uC2C7\uC2C8\uC2C9\uC2CA\uC2CB\uC2CC\uC2CD\uC2CE\uC2CF\uC2D0\uC2D1\uC2D2\uC2D3\uC2D4\uC2D5\uC2D6\uC2D7\uC2D8\uC2D9\uC2DA\uC2DB\uC2DE\uC2DF\uC2E1\uC2E2\uC2E5\uC2E6\uC2E7\uC2E8\uC2E9\uC2EA\uC2EE\uC2F0\uC2F2\uC2F3\uC2F4\uC2F5\uC2F7\uC2FA\uC2FD\uC2FE\uC2FF\uC301\uC302\uC303\uC304\uC305\uC306\uC307\uC30A\uC30B\uC30E\uC30F\uFFFD".split("");
        for (j3 = 0; j3 != D5[154].length; ++j3)
          if (D5[154][j3].charCodeAt(0) !== 65533) {
            e7[D5[154][j3]] = 39424 + j3;
            d2[39424 + j3] = D5[154][j3];
          }
        D5[155] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uC310\uC311\uC312\uC316\uC317\uC319\uC31A\uC31B\uC31D\uC31E\uC31F\uC320\uC321\uC322\uC323\uC326\uC327\uC32A\uC32B\uC32C\uC32D\uC32E\uC32F\uC330\uC331\uC332\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uC333\uC334\uC335\uC336\uC337\uC338\uC339\uC33A\uC33B\uC33C\uC33D\uC33E\uC33F\uC340\uC341\uC342\uC343\uC344\uC346\uC347\uC348\uC349\uC34A\uC34B\uC34C\uC34D\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uC34E\uC34F\uC350\uC351\uC352\uC353\uC354\uC355\uC356\uC357\uC358\uC359\uC35A\uC35B\uC35C\uC35D\uC35E\uC35F\uC360\uC361\uC362\uC363\uC364\uC365\uC366\uC367\uC36A\uC36B\uC36D\uC36E\uC36F\uC371\uC373\uC374\uC375\uC376\uC377\uC37A\uC37B\uC37E\uC37F\uC380\uC381\uC382\uC383\uC385\uC386\uC387\uC389\uC38A\uC38B\uC38D\uC38E\uC38F\uC390\uC391\uC392\uC393\uC394\uC395\uC396\uC397\uC398\uC399\uC39A\uC39B\uC39C\uC39D\uC39E\uC39F\uC3A0\uC3A1\uC3A2\uC3A3\uC3A4\uC3A5\uC3A6\uC3A7\uC3A8\uC3A9\uC3AA\uC3AB\uC3AC\uC3AD\uC3AE\uC3AF\uC3B0\uC3B1\uC3B2\uC3B3\uC3B4\uC3B5\uC3B6\uC3B7\uC3B8\uC3B9\uC3BA\uC3BB\uC3BC\uC3BD\uC3BE\uC3BF\uC3C1\uC3C2\uC3C3\uC3C4\uC3C5\uC3C6\uC3C7\uC3C8\uC3C9\uC3CA\uC3CB\uC3CC\uC3CD\uC3CE\uC3CF\uC3D0\uC3D1\uC3D2\uC3D3\uC3D4\uC3D5\uC3D6\uC3D7\uC3DA\uFFFD".split("");
        for (j3 = 0; j3 != D5[155].length; ++j3)
          if (D5[155][j3].charCodeAt(0) !== 65533) {
            e7[D5[155][j3]] = 39680 + j3;
            d2[39680 + j3] = D5[155][j3];
          }
        D5[156] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uC3DB\uC3DD\uC3DE\uC3E1\uC3E3\uC3E4\uC3E5\uC3E6\uC3E7\uC3EA\uC3EB\uC3EC\uC3EE\uC3EF\uC3F0\uC3F1\uC3F2\uC3F3\uC3F6\uC3F7\uC3F9\uC3FA\uC3FB\uC3FC\uC3FD\uC3FE\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uC3FF\uC400\uC401\uC402\uC403\uC404\uC405\uC406\uC407\uC409\uC40A\uC40B\uC40C\uC40D\uC40E\uC40F\uC411\uC412\uC413\uC414\uC415\uC416\uC417\uC418\uC419\uC41A\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uC41B\uC41C\uC41D\uC41E\uC41F\uC420\uC421\uC422\uC423\uC425\uC426\uC427\uC428\uC429\uC42A\uC42B\uC42D\uC42E\uC42F\uC431\uC432\uC433\uC435\uC436\uC437\uC438\uC439\uC43A\uC43B\uC43E\uC43F\uC440\uC441\uC442\uC443\uC444\uC445\uC446\uC447\uC449\uC44A\uC44B\uC44C\uC44D\uC44E\uC44F\uC450\uC451\uC452\uC453\uC454\uC455\uC456\uC457\uC458\uC459\uC45A\uC45B\uC45C\uC45D\uC45E\uC45F\uC460\uC461\uC462\uC463\uC466\uC467\uC469\uC46A\uC46B\uC46D\uC46E\uC46F\uC470\uC471\uC472\uC473\uC476\uC477\uC478\uC47A\uC47B\uC47C\uC47D\uC47E\uC47F\uC481\uC482\uC483\uC484\uC485\uC486\uC487\uC488\uC489\uC48A\uC48B\uC48C\uC48D\uC48E\uC48F\uC490\uC491\uC492\uC493\uC495\uC496\uC497\uC498\uC499\uC49A\uC49B\uC49D\uC49E\uC49F\uC4A0\uC4A1\uC4A2\uC4A3\uC4A4\uC4A5\uC4A6\uC4A7\uC4A8\uC4A9\uFFFD".split("");
        for (j3 = 0; j3 != D5[156].length; ++j3)
          if (D5[156][j3].charCodeAt(0) !== 65533) {
            e7[D5[156][j3]] = 39936 + j3;
            d2[39936 + j3] = D5[156][j3];
          }
        D5[157] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uC4AA\uC4AB\uC4AC\uC4AD\uC4AE\uC4AF\uC4B0\uC4B1\uC4B2\uC4B3\uC4B4\uC4B5\uC4B6\uC4B7\uC4B9\uC4BA\uC4BB\uC4BD\uC4BE\uC4BF\uC4C0\uC4C1\uC4C2\uC4C3\uC4C4\uC4C5\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uC4C6\uC4C7\uC4C8\uC4C9\uC4CA\uC4CB\uC4CC\uC4CD\uC4CE\uC4CF\uC4D0\uC4D1\uC4D2\uC4D3\uC4D4\uC4D5\uC4D6\uC4D7\uC4D8\uC4D9\uC4DA\uC4DB\uC4DC\uC4DD\uC4DE\uC4DF\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uC4E0\uC4E1\uC4E2\uC4E3\uC4E4\uC4E5\uC4E6\uC4E7\uC4E8\uC4EA\uC4EB\uC4EC\uC4ED\uC4EE\uC4EF\uC4F2\uC4F3\uC4F5\uC4F6\uC4F7\uC4F9\uC4FB\uC4FC\uC4FD\uC4FE\uC502\uC503\uC504\uC505\uC506\uC507\uC508\uC509\uC50A\uC50B\uC50D\uC50E\uC50F\uC511\uC512\uC513\uC515\uC516\uC517\uC518\uC519\uC51A\uC51B\uC51D\uC51E\uC51F\uC520\uC521\uC522\uC523\uC524\uC525\uC526\uC527\uC52A\uC52B\uC52D\uC52E\uC52F\uC531\uC532\uC533\uC534\uC535\uC536\uC537\uC53A\uC53C\uC53E\uC53F\uC540\uC541\uC542\uC543\uC546\uC547\uC54B\uC54F\uC550\uC551\uC552\uC556\uC55A\uC55B\uC55C\uC55F\uC562\uC563\uC565\uC566\uC567\uC569\uC56A\uC56B\uC56C\uC56D\uC56E\uC56F\uC572\uC576\uC577\uC578\uC579\uC57A\uC57B\uC57E\uC57F\uC581\uC582\uC583\uC585\uC586\uC588\uC589\uC58A\uC58B\uC58E\uC590\uC592\uC593\uC594\uFFFD".split("");
        for (j3 = 0; j3 != D5[157].length; ++j3)
          if (D5[157][j3].charCodeAt(0) !== 65533) {
            e7[D5[157][j3]] = 40192 + j3;
            d2[40192 + j3] = D5[157][j3];
          }
        D5[158] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uC596\uC599\uC59A\uC59B\uC59D\uC59E\uC59F\uC5A1\uC5A2\uC5A3\uC5A4\uC5A5\uC5A6\uC5A7\uC5A8\uC5AA\uC5AB\uC5AC\uC5AD\uC5AE\uC5AF\uC5B0\uC5B1\uC5B2\uC5B3\uC5B6\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uC5B7\uC5BA\uC5BF\uC5C0\uC5C1\uC5C2\uC5C3\uC5CB\uC5CD\uC5CF\uC5D2\uC5D3\uC5D5\uC5D6\uC5D7\uC5D9\uC5DA\uC5DB\uC5DC\uC5DD\uC5DE\uC5DF\uC5E2\uC5E4\uC5E6\uC5E7\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uC5E8\uC5E9\uC5EA\uC5EB\uC5EF\uC5F1\uC5F2\uC5F3\uC5F5\uC5F8\uC5F9\uC5FA\uC5FB\uC602\uC603\uC604\uC609\uC60A\uC60B\uC60D\uC60E\uC60F\uC611\uC612\uC613\uC614\uC615\uC616\uC617\uC61A\uC61D\uC61E\uC61F\uC620\uC621\uC622\uC623\uC626\uC627\uC629\uC62A\uC62B\uC62F\uC631\uC632\uC636\uC638\uC63A\uC63C\uC63D\uC63E\uC63F\uC642\uC643\uC645\uC646\uC647\uC649\uC64A\uC64B\uC64C\uC64D\uC64E\uC64F\uC652\uC656\uC657\uC658\uC659\uC65A\uC65B\uC65E\uC65F\uC661\uC662\uC663\uC664\uC665\uC666\uC667\uC668\uC669\uC66A\uC66B\uC66D\uC66E\uC670\uC672\uC673\uC674\uC675\uC676\uC677\uC67A\uC67B\uC67D\uC67E\uC67F\uC681\uC682\uC683\uC684\uC685\uC686\uC687\uC68A\uC68C\uC68E\uC68F\uC690\uC691\uC692\uC693\uC696\uC697\uC699\uC69A\uC69B\uC69D\uC69E\uC69F\uC6A0\uC6A1\uC6A2\uC6A3\uC6A6\uFFFD".split("");
        for (j3 = 0; j3 != D5[158].length; ++j3)
          if (D5[158][j3].charCodeAt(0) !== 65533) {
            e7[D5[158][j3]] = 40448 + j3;
            d2[40448 + j3] = D5[158][j3];
          }
        D5[159] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uC6A8\uC6AA\uC6AB\uC6AC\uC6AD\uC6AE\uC6AF\uC6B2\uC6B3\uC6B5\uC6B6\uC6B7\uC6BB\uC6BC\uC6BD\uC6BE\uC6BF\uC6C2\uC6C4\uC6C6\uC6C7\uC6C8\uC6C9\uC6CA\uC6CB\uC6CE\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uC6CF\uC6D1\uC6D2\uC6D3\uC6D5\uC6D6\uC6D7\uC6D8\uC6D9\uC6DA\uC6DB\uC6DE\uC6DF\uC6E2\uC6E3\uC6E4\uC6E5\uC6E6\uC6E7\uC6EA\uC6EB\uC6ED\uC6EE\uC6EF\uC6F1\uC6F2\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uC6F3\uC6F4\uC6F5\uC6F6\uC6F7\uC6FA\uC6FB\uC6FC\uC6FE\uC6FF\uC700\uC701\uC702\uC703\uC706\uC707\uC709\uC70A\uC70B\uC70D\uC70E\uC70F\uC710\uC711\uC712\uC713\uC716\uC718\uC71A\uC71B\uC71C\uC71D\uC71E\uC71F\uC722\uC723\uC725\uC726\uC727\uC729\uC72A\uC72B\uC72C\uC72D\uC72E\uC72F\uC732\uC734\uC736\uC738\uC739\uC73A\uC73B\uC73E\uC73F\uC741\uC742\uC743\uC745\uC746\uC747\uC748\uC749\uC74B\uC74E\uC750\uC759\uC75A\uC75B\uC75D\uC75E\uC75F\uC761\uC762\uC763\uC764\uC765\uC766\uC767\uC769\uC76A\uC76C\uC76D\uC76E\uC76F\uC770\uC771\uC772\uC773\uC776\uC777\uC779\uC77A\uC77B\uC77F\uC780\uC781\uC782\uC786\uC78B\uC78C\uC78D\uC78F\uC792\uC793\uC795\uC799\uC79B\uC79C\uC79D\uC79E\uC79F\uC7A2\uC7A7\uC7A8\uC7A9\uC7AA\uC7AB\uC7AE\uC7AF\uC7B1\uC7B2\uC7B3\uC7B5\uC7B6\uC7B7\uFFFD".split("");
        for (j3 = 0; j3 != D5[159].length; ++j3)
          if (D5[159][j3].charCodeAt(0) !== 65533) {
            e7[D5[159][j3]] = 40704 + j3;
            d2[40704 + j3] = D5[159][j3];
          }
        D5[160] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uC7B8\uC7B9\uC7BA\uC7BB\uC7BE\uC7C2\uC7C3\uC7C4\uC7C5\uC7C6\uC7C7\uC7CA\uC7CB\uC7CD\uC7CF\uC7D1\uC7D2\uC7D3\uC7D4\uC7D5\uC7D6\uC7D7\uC7D9\uC7DA\uC7DB\uC7DC\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uC7DE\uC7DF\uC7E0\uC7E1\uC7E2\uC7E3\uC7E5\uC7E6\uC7E7\uC7E9\uC7EA\uC7EB\uC7ED\uC7EE\uC7EF\uC7F0\uC7F1\uC7F2\uC7F3\uC7F4\uC7F5\uC7F6\uC7F7\uC7F8\uC7F9\uC7FA\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uC7FB\uC7FC\uC7FD\uC7FE\uC7FF\uC802\uC803\uC805\uC806\uC807\uC809\uC80B\uC80C\uC80D\uC80E\uC80F\uC812\uC814\uC817\uC818\uC819\uC81A\uC81B\uC81E\uC81F\uC821\uC822\uC823\uC825\uC826\uC827\uC828\uC829\uC82A\uC82B\uC82E\uC830\uC832\uC833\uC834\uC835\uC836\uC837\uC839\uC83A\uC83B\uC83D\uC83E\uC83F\uC841\uC842\uC843\uC844\uC845\uC846\uC847\uC84A\uC84B\uC84E\uC84F\uC850\uC851\uC852\uC853\uC855\uC856\uC857\uC858\uC859\uC85A\uC85B\uC85C\uC85D\uC85E\uC85F\uC860\uC861\uC862\uC863\uC864\uC865\uC866\uC867\uC868\uC869\uC86A\uC86B\uC86C\uC86D\uC86E\uC86F\uC872\uC873\uC875\uC876\uC877\uC879\uC87B\uC87C\uC87D\uC87E\uC87F\uC882\uC884\uC888\uC889\uC88A\uC88E\uC88F\uC890\uC891\uC892\uC893\uC895\uC896\uC897\uC898\uC899\uC89A\uC89B\uC89C\uC89E\uC8A0\uC8A2\uC8A3\uC8A4\uFFFD".split("");
        for (j3 = 0; j3 != D5[160].length; ++j3)
          if (D5[160][j3].charCodeAt(0) !== 65533) {
            e7[D5[160][j3]] = 40960 + j3;
            d2[40960 + j3] = D5[160][j3];
          }
        D5[161] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uC8A5\uC8A6\uC8A7\uC8A9\uC8AA\uC8AB\uC8AC\uC8AD\uC8AE\uC8AF\uC8B0\uC8B1\uC8B2\uC8B3\uC8B4\uC8B5\uC8B6\uC8B7\uC8B8\uC8B9\uC8BA\uC8BB\uC8BE\uC8BF\uC8C0\uC8C1\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uC8C2\uC8C3\uC8C5\uC8C6\uC8C7\uC8C9\uC8CA\uC8CB\uC8CD\uC8CE\uC8CF\uC8D0\uC8D1\uC8D2\uC8D3\uC8D6\uC8D8\uC8DA\uC8DB\uC8DC\uC8DD\uC8DE\uC8DF\uC8E2\uC8E3\uC8E5\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uC8E6\uC8E7\uC8E8\uC8E9\uC8EA\uC8EB\uC8EC\uC8ED\uC8EE\uC8EF\uC8F0\uC8F1\uC8F2\uC8F3\uC8F4\uC8F6\uC8F7\uC8F8\uC8F9\uC8FA\uC8FB\uC8FE\uC8FF\uC901\uC902\uC903\uC907\uC908\uC909\uC90A\uC90B\uC90E\u3000\u3001\u3002\xB7\u2025\u2026\xA8\u3003\xAD\u2015\u2225\uFF3C\u223C\u2018\u2019\u201C\u201D\u3014\u3015\u3008\u3009\u300A\u300B\u300C\u300D\u300E\u300F\u3010\u3011\xB1\xD7\xF7\u2260\u2264\u2265\u221E\u2234\xB0\u2032\u2033\u2103\u212B\uFFE0\uFFE1\uFFE5\u2642\u2640\u2220\u22A5\u2312\u2202\u2207\u2261\u2252\xA7\u203B\u2606\u2605\u25CB\u25CF\u25CE\u25C7\u25C6\u25A1\u25A0\u25B3\u25B2\u25BD\u25BC\u2192\u2190\u2191\u2193\u2194\u3013\u226A\u226B\u221A\u223D\u221D\u2235\u222B\u222C\u2208\u220B\u2286\u2287\u2282\u2283\u222A\u2229\u2227\u2228\uFFE2\uFFFD".split("");
        for (j3 = 0; j3 != D5[161].length; ++j3)
          if (D5[161][j3].charCodeAt(0) !== 65533) {
            e7[D5[161][j3]] = 41216 + j3;
            d2[41216 + j3] = D5[161][j3];
          }
        D5[162] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uC910\uC912\uC913\uC914\uC915\uC916\uC917\uC919\uC91A\uC91B\uC91C\uC91D\uC91E\uC91F\uC920\uC921\uC922\uC923\uC924\uC925\uC926\uC927\uC928\uC929\uC92A\uC92B\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uC92D\uC92E\uC92F\uC930\uC931\uC932\uC933\uC935\uC936\uC937\uC938\uC939\uC93A\uC93B\uC93C\uC93D\uC93E\uC93F\uC940\uC941\uC942\uC943\uC944\uC945\uC946\uC947\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uC948\uC949\uC94A\uC94B\uC94C\uC94D\uC94E\uC94F\uC952\uC953\uC955\uC956\uC957\uC959\uC95A\uC95B\uC95C\uC95D\uC95E\uC95F\uC962\uC964\uC965\uC966\uC967\uC968\uC969\uC96A\uC96B\uC96D\uC96E\uC96F\u21D2\u21D4\u2200\u2203\xB4\uFF5E\u02C7\u02D8\u02DD\u02DA\u02D9\xB8\u02DB\xA1\xBF\u02D0\u222E\u2211\u220F\xA4\u2109\u2030\u25C1\u25C0\u25B7\u25B6\u2664\u2660\u2661\u2665\u2667\u2663\u2299\u25C8\u25A3\u25D0\u25D1\u2592\u25A4\u25A5\u25A8\u25A7\u25A6\u25A9\u2668\u260F\u260E\u261C\u261E\xB6\u2020\u2021\u2195\u2197\u2199\u2196\u2198\u266D\u2669\u266A\u266C\u327F\u321C\u2116\u33C7\u2122\u33C2\u33D8\u2121\u20AC\xAE\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD".split("");
        for (j3 = 0; j3 != D5[162].length; ++j3)
          if (D5[162][j3].charCodeAt(0) !== 65533) {
            e7[D5[162][j3]] = 41472 + j3;
            d2[41472 + j3] = D5[162][j3];
          }
        D5[163] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uC971\uC972\uC973\uC975\uC976\uC977\uC978\uC979\uC97A\uC97B\uC97D\uC97E\uC97F\uC980\uC981\uC982\uC983\uC984\uC985\uC986\uC987\uC98A\uC98B\uC98D\uC98E\uC98F\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uC991\uC992\uC993\uC994\uC995\uC996\uC997\uC99A\uC99C\uC99E\uC99F\uC9A0\uC9A1\uC9A2\uC9A3\uC9A4\uC9A5\uC9A6\uC9A7\uC9A8\uC9A9\uC9AA\uC9AB\uC9AC\uC9AD\uC9AE\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uC9AF\uC9B0\uC9B1\uC9B2\uC9B3\uC9B4\uC9B5\uC9B6\uC9B7\uC9B8\uC9B9\uC9BA\uC9BB\uC9BC\uC9BD\uC9BE\uC9BF\uC9C2\uC9C3\uC9C5\uC9C6\uC9C9\uC9CB\uC9CC\uC9CD\uC9CE\uC9CF\uC9D2\uC9D4\uC9D7\uC9D8\uC9DB\uFF01\uFF02\uFF03\uFF04\uFF05\uFF06\uFF07\uFF08\uFF09\uFF0A\uFF0B\uFF0C\uFF0D\uFF0E\uFF0F\uFF10\uFF11\uFF12\uFF13\uFF14\uFF15\uFF16\uFF17\uFF18\uFF19\uFF1A\uFF1B\uFF1C\uFF1D\uFF1E\uFF1F\uFF20\uFF21\uFF22\uFF23\uFF24\uFF25\uFF26\uFF27\uFF28\uFF29\uFF2A\uFF2B\uFF2C\uFF2D\uFF2E\uFF2F\uFF30\uFF31\uFF32\uFF33\uFF34\uFF35\uFF36\uFF37\uFF38\uFF39\uFF3A\uFF3B\uFFE6\uFF3D\uFF3E\uFF3F\uFF40\uFF41\uFF42\uFF43\uFF44\uFF45\uFF46\uFF47\uFF48\uFF49\uFF4A\uFF4B\uFF4C\uFF4D\uFF4E\uFF4F\uFF50\uFF51\uFF52\uFF53\uFF54\uFF55\uFF56\uFF57\uFF58\uFF59\uFF5A\uFF5B\uFF5C\uFF5D\uFFE3\uFFFD".split("");
        for (j3 = 0; j3 != D5[163].length; ++j3)
          if (D5[163][j3].charCodeAt(0) !== 65533) {
            e7[D5[163][j3]] = 41728 + j3;
            d2[41728 + j3] = D5[163][j3];
          }
        D5[164] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uC9DE\uC9DF\uC9E1\uC9E3\uC9E5\uC9E6\uC9E8\uC9E9\uC9EA\uC9EB\uC9EE\uC9F2\uC9F3\uC9F4\uC9F5\uC9F6\uC9F7\uC9FA\uC9FB\uC9FD\uC9FE\uC9FF\uCA01\uCA02\uCA03\uCA04\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uCA05\uCA06\uCA07\uCA0A\uCA0E\uCA0F\uCA10\uCA11\uCA12\uCA13\uCA15\uCA16\uCA17\uCA19\uCA1A\uCA1B\uCA1C\uCA1D\uCA1E\uCA1F\uCA20\uCA21\uCA22\uCA23\uCA24\uCA25\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uCA26\uCA27\uCA28\uCA2A\uCA2B\uCA2C\uCA2D\uCA2E\uCA2F\uCA30\uCA31\uCA32\uCA33\uCA34\uCA35\uCA36\uCA37\uCA38\uCA39\uCA3A\uCA3B\uCA3C\uCA3D\uCA3E\uCA3F\uCA40\uCA41\uCA42\uCA43\uCA44\uCA45\uCA46\u3131\u3132\u3133\u3134\u3135\u3136\u3137\u3138\u3139\u313A\u313B\u313C\u313D\u313E\u313F\u3140\u3141\u3142\u3143\u3144\u3145\u3146\u3147\u3148\u3149\u314A\u314B\u314C\u314D\u314E\u314F\u3150\u3151\u3152\u3153\u3154\u3155\u3156\u3157\u3158\u3159\u315A\u315B\u315C\u315D\u315E\u315F\u3160\u3161\u3162\u3163\u3164\u3165\u3166\u3167\u3168\u3169\u316A\u316B\u316C\u316D\u316E\u316F\u3170\u3171\u3172\u3173\u3174\u3175\u3176\u3177\u3178\u3179\u317A\u317B\u317C\u317D\u317E\u317F\u3180\u3181\u3182\u3183\u3184\u3185\u3186\u3187\u3188\u3189\u318A\u318B\u318C\u318D\u318E\uFFFD".split("");
        for (j3 = 0; j3 != D5[164].length; ++j3)
          if (D5[164][j3].charCodeAt(0) !== 65533) {
            e7[D5[164][j3]] = 41984 + j3;
            d2[41984 + j3] = D5[164][j3];
          }
        D5[165] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uCA47\uCA48\uCA49\uCA4A\uCA4B\uCA4E\uCA4F\uCA51\uCA52\uCA53\uCA55\uCA56\uCA57\uCA58\uCA59\uCA5A\uCA5B\uCA5E\uCA62\uCA63\uCA64\uCA65\uCA66\uCA67\uCA69\uCA6A\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uCA6B\uCA6C\uCA6D\uCA6E\uCA6F\uCA70\uCA71\uCA72\uCA73\uCA74\uCA75\uCA76\uCA77\uCA78\uCA79\uCA7A\uCA7B\uCA7C\uCA7E\uCA7F\uCA80\uCA81\uCA82\uCA83\uCA85\uCA86\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uCA87\uCA88\uCA89\uCA8A\uCA8B\uCA8C\uCA8D\uCA8E\uCA8F\uCA90\uCA91\uCA92\uCA93\uCA94\uCA95\uCA96\uCA97\uCA99\uCA9A\uCA9B\uCA9C\uCA9D\uCA9E\uCA9F\uCAA0\uCAA1\uCAA2\uCAA3\uCAA4\uCAA5\uCAA6\uCAA7\u2170\u2171\u2172\u2173\u2174\u2175\u2176\u2177\u2178\u2179\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u2160\u2161\u2162\u2163\u2164\u2165\u2166\u2167\u2168\u2169\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u0391\u0392\u0393\u0394\u0395\u0396\u0397\u0398\u0399\u039A\u039B\u039C\u039D\u039E\u039F\u03A0\u03A1\u03A3\u03A4\u03A5\u03A6\u03A7\u03A8\u03A9\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u03B1\u03B2\u03B3\u03B4\u03B5\u03B6\u03B7\u03B8\u03B9\u03BA\u03BB\u03BC\u03BD\u03BE\u03BF\u03C0\u03C1\u03C3\u03C4\u03C5\u03C6\u03C7\u03C8\u03C9\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD".split("");
        for (j3 = 0; j3 != D5[165].length; ++j3)
          if (D5[165][j3].charCodeAt(0) !== 65533) {
            e7[D5[165][j3]] = 42240 + j3;
            d2[42240 + j3] = D5[165][j3];
          }
        D5[166] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uCAA8\uCAA9\uCAAA\uCAAB\uCAAC\uCAAD\uCAAE\uCAAF\uCAB0\uCAB1\uCAB2\uCAB3\uCAB4\uCAB5\uCAB6\uCAB7\uCAB8\uCAB9\uCABA\uCABB\uCABE\uCABF\uCAC1\uCAC2\uCAC3\uCAC5\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uCAC6\uCAC7\uCAC8\uCAC9\uCACA\uCACB\uCACE\uCAD0\uCAD2\uCAD4\uCAD5\uCAD6\uCAD7\uCADA\uCADB\uCADC\uCADD\uCADE\uCADF\uCAE1\uCAE2\uCAE3\uCAE4\uCAE5\uCAE6\uCAE7\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uCAE8\uCAE9\uCAEA\uCAEB\uCAED\uCAEE\uCAEF\uCAF0\uCAF1\uCAF2\uCAF3\uCAF5\uCAF6\uCAF7\uCAF8\uCAF9\uCAFA\uCAFB\uCAFC\uCAFD\uCAFE\uCAFF\uCB00\uCB01\uCB02\uCB03\uCB04\uCB05\uCB06\uCB07\uCB09\uCB0A\u2500\u2502\u250C\u2510\u2518\u2514\u251C\u252C\u2524\u2534\u253C\u2501\u2503\u250F\u2513\u251B\u2517\u2523\u2533\u252B\u253B\u254B\u2520\u252F\u2528\u2537\u253F\u251D\u2530\u2525\u2538\u2542\u2512\u2511\u251A\u2519\u2516\u2515\u250E\u250D\u251E\u251F\u2521\u2522\u2526\u2527\u2529\u252A\u252D\u252E\u2531\u2532\u2535\u2536\u2539\u253A\u253D\u253E\u2540\u2541\u2543\u2544\u2545\u2546\u2547\u2548\u2549\u254A\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD".split("");
        for (j3 = 0; j3 != D5[166].length; ++j3)
          if (D5[166][j3].charCodeAt(0) !== 65533) {
            e7[D5[166][j3]] = 42496 + j3;
            d2[42496 + j3] = D5[166][j3];
          }
        D5[167] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uCB0B\uCB0C\uCB0D\uCB0E\uCB0F\uCB11\uCB12\uCB13\uCB15\uCB16\uCB17\uCB19\uCB1A\uCB1B\uCB1C\uCB1D\uCB1E\uCB1F\uCB22\uCB23\uCB24\uCB25\uCB26\uCB27\uCB28\uCB29\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uCB2A\uCB2B\uCB2C\uCB2D\uCB2E\uCB2F\uCB30\uCB31\uCB32\uCB33\uCB34\uCB35\uCB36\uCB37\uCB38\uCB39\uCB3A\uCB3B\uCB3C\uCB3D\uCB3E\uCB3F\uCB40\uCB42\uCB43\uCB44\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uCB45\uCB46\uCB47\uCB4A\uCB4B\uCB4D\uCB4E\uCB4F\uCB51\uCB52\uCB53\uCB54\uCB55\uCB56\uCB57\uCB5A\uCB5B\uCB5C\uCB5E\uCB5F\uCB60\uCB61\uCB62\uCB63\uCB65\uCB66\uCB67\uCB68\uCB69\uCB6A\uCB6B\uCB6C\u3395\u3396\u3397\u2113\u3398\u33C4\u33A3\u33A4\u33A5\u33A6\u3399\u339A\u339B\u339C\u339D\u339E\u339F\u33A0\u33A1\u33A2\u33CA\u338D\u338E\u338F\u33CF\u3388\u3389\u33C8\u33A7\u33A8\u33B0\u33B1\u33B2\u33B3\u33B4\u33B5\u33B6\u33B7\u33B8\u33B9\u3380\u3381\u3382\u3383\u3384\u33BA\u33BB\u33BC\u33BD\u33BE\u33BF\u3390\u3391\u3392\u3393\u3394\u2126\u33C0\u33C1\u338A\u338B\u338C\u33D6\u33C5\u33AD\u33AE\u33AF\u33DB\u33A9\u33AA\u33AB\u33AC\u33DD\u33D0\u33D3\u33C3\u33C9\u33DC\u33C6\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD".split("");
        for (j3 = 0; j3 != D5[167].length; ++j3)
          if (D5[167][j3].charCodeAt(0) !== 65533) {
            e7[D5[167][j3]] = 42752 + j3;
            d2[42752 + j3] = D5[167][j3];
          }
        D5[168] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uCB6D\uCB6E\uCB6F\uCB70\uCB71\uCB72\uCB73\uCB74\uCB75\uCB76\uCB77\uCB7A\uCB7B\uCB7C\uCB7D\uCB7E\uCB7F\uCB80\uCB81\uCB82\uCB83\uCB84\uCB85\uCB86\uCB87\uCB88\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uCB89\uCB8A\uCB8B\uCB8C\uCB8D\uCB8E\uCB8F\uCB90\uCB91\uCB92\uCB93\uCB94\uCB95\uCB96\uCB97\uCB98\uCB99\uCB9A\uCB9B\uCB9D\uCB9E\uCB9F\uCBA0\uCBA1\uCBA2\uCBA3\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uCBA4\uCBA5\uCBA6\uCBA7\uCBA8\uCBA9\uCBAA\uCBAB\uCBAC\uCBAD\uCBAE\uCBAF\uCBB0\uCBB1\uCBB2\uCBB3\uCBB4\uCBB5\uCBB6\uCBB7\uCBB9\uCBBA\uCBBB\uCBBC\uCBBD\uCBBE\uCBBF\uCBC0\uCBC1\uCBC2\uCBC3\uCBC4\xC6\xD0\xAA\u0126\uFFFD\u0132\uFFFD\u013F\u0141\xD8\u0152\xBA\xDE\u0166\u014A\uFFFD\u3260\u3261\u3262\u3263\u3264\u3265\u3266\u3267\u3268\u3269\u326A\u326B\u326C\u326D\u326E\u326F\u3270\u3271\u3272\u3273\u3274\u3275\u3276\u3277\u3278\u3279\u327A\u327B\u24D0\u24D1\u24D2\u24D3\u24D4\u24D5\u24D6\u24D7\u24D8\u24D9\u24DA\u24DB\u24DC\u24DD\u24DE\u24DF\u24E0\u24E1\u24E2\u24E3\u24E4\u24E5\u24E6\u24E7\u24E8\u24E9\u2460\u2461\u2462\u2463\u2464\u2465\u2466\u2467\u2468\u2469\u246A\u246B\u246C\u246D\u246E\xBD\u2153\u2154\xBC\xBE\u215B\u215C\u215D\u215E\uFFFD".split("");
        for (j3 = 0; j3 != D5[168].length; ++j3)
          if (D5[168][j3].charCodeAt(0) !== 65533) {
            e7[D5[168][j3]] = 43008 + j3;
            d2[43008 + j3] = D5[168][j3];
          }
        D5[169] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uCBC5\uCBC6\uCBC7\uCBC8\uCBC9\uCBCA\uCBCB\uCBCC\uCBCD\uCBCE\uCBCF\uCBD0\uCBD1\uCBD2\uCBD3\uCBD5\uCBD6\uCBD7\uCBD8\uCBD9\uCBDA\uCBDB\uCBDC\uCBDD\uCBDE\uCBDF\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uCBE0\uCBE1\uCBE2\uCBE3\uCBE5\uCBE6\uCBE8\uCBEA\uCBEB\uCBEC\uCBED\uCBEE\uCBEF\uCBF0\uCBF1\uCBF2\uCBF3\uCBF4\uCBF5\uCBF6\uCBF7\uCBF8\uCBF9\uCBFA\uCBFB\uCBFC\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uCBFD\uCBFE\uCBFF\uCC00\uCC01\uCC02\uCC03\uCC04\uCC05\uCC06\uCC07\uCC08\uCC09\uCC0A\uCC0B\uCC0E\uCC0F\uCC11\uCC12\uCC13\uCC15\uCC16\uCC17\uCC18\uCC19\uCC1A\uCC1B\uCC1E\uCC1F\uCC20\uCC23\uCC24\xE6\u0111\xF0\u0127\u0131\u0133\u0138\u0140\u0142\xF8\u0153\xDF\xFE\u0167\u014B\u0149\u3200\u3201\u3202\u3203\u3204\u3205\u3206\u3207\u3208\u3209\u320A\u320B\u320C\u320D\u320E\u320F\u3210\u3211\u3212\u3213\u3214\u3215\u3216\u3217\u3218\u3219\u321A\u321B\u249C\u249D\u249E\u249F\u24A0\u24A1\u24A2\u24A3\u24A4\u24A5\u24A6\u24A7\u24A8\u24A9\u24AA\u24AB\u24AC\u24AD\u24AE\u24AF\u24B0\u24B1\u24B2\u24B3\u24B4\u24B5\u2474\u2475\u2476\u2477\u2478\u2479\u247A\u247B\u247C\u247D\u247E\u247F\u2480\u2481\u2482\xB9\xB2\xB3\u2074\u207F\u2081\u2082\u2083\u2084\uFFFD".split("");
        for (j3 = 0; j3 != D5[169].length; ++j3)
          if (D5[169][j3].charCodeAt(0) !== 65533) {
            e7[D5[169][j3]] = 43264 + j3;
            d2[43264 + j3] = D5[169][j3];
          }
        D5[170] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uCC25\uCC26\uCC2A\uCC2B\uCC2D\uCC2F\uCC31\uCC32\uCC33\uCC34\uCC35\uCC36\uCC37\uCC3A\uCC3F\uCC40\uCC41\uCC42\uCC43\uCC46\uCC47\uCC49\uCC4A\uCC4B\uCC4D\uCC4E\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uCC4F\uCC50\uCC51\uCC52\uCC53\uCC56\uCC5A\uCC5B\uCC5C\uCC5D\uCC5E\uCC5F\uCC61\uCC62\uCC63\uCC65\uCC67\uCC69\uCC6A\uCC6B\uCC6C\uCC6D\uCC6E\uCC6F\uCC71\uCC72\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uCC73\uCC74\uCC76\uCC77\uCC78\uCC79\uCC7A\uCC7B\uCC7C\uCC7D\uCC7E\uCC7F\uCC80\uCC81\uCC82\uCC83\uCC84\uCC85\uCC86\uCC87\uCC88\uCC89\uCC8A\uCC8B\uCC8C\uCC8D\uCC8E\uCC8F\uCC90\uCC91\uCC92\uCC93\u3041\u3042\u3043\u3044\u3045\u3046\u3047\u3048\u3049\u304A\u304B\u304C\u304D\u304E\u304F\u3050\u3051\u3052\u3053\u3054\u3055\u3056\u3057\u3058\u3059\u305A\u305B\u305C\u305D\u305E\u305F\u3060\u3061\u3062\u3063\u3064\u3065\u3066\u3067\u3068\u3069\u306A\u306B\u306C\u306D\u306E\u306F\u3070\u3071\u3072\u3073\u3074\u3075\u3076\u3077\u3078\u3079\u307A\u307B\u307C\u307D\u307E\u307F\u3080\u3081\u3082\u3083\u3084\u3085\u3086\u3087\u3088\u3089\u308A\u308B\u308C\u308D\u308E\u308F\u3090\u3091\u3092\u3093\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD".split("");
        for (j3 = 0; j3 != D5[170].length; ++j3)
          if (D5[170][j3].charCodeAt(0) !== 65533) {
            e7[D5[170][j3]] = 43520 + j3;
            d2[43520 + j3] = D5[170][j3];
          }
        D5[171] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uCC94\uCC95\uCC96\uCC97\uCC9A\uCC9B\uCC9D\uCC9E\uCC9F\uCCA1\uCCA2\uCCA3\uCCA4\uCCA5\uCCA6\uCCA7\uCCAA\uCCAE\uCCAF\uCCB0\uCCB1\uCCB2\uCCB3\uCCB6\uCCB7\uCCB9\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uCCBA\uCCBB\uCCBD\uCCBE\uCCBF\uCCC0\uCCC1\uCCC2\uCCC3\uCCC6\uCCC8\uCCCA\uCCCB\uCCCC\uCCCD\uCCCE\uCCCF\uCCD1\uCCD2\uCCD3\uCCD5\uCCD6\uCCD7\uCCD8\uCCD9\uCCDA\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uCCDB\uCCDC\uCCDD\uCCDE\uCCDF\uCCE0\uCCE1\uCCE2\uCCE3\uCCE5\uCCE6\uCCE7\uCCE8\uCCE9\uCCEA\uCCEB\uCCED\uCCEE\uCCEF\uCCF1\uCCF2\uCCF3\uCCF4\uCCF5\uCCF6\uCCF7\uCCF8\uCCF9\uCCFA\uCCFB\uCCFC\uCCFD\u30A1\u30A2\u30A3\u30A4\u30A5\u30A6\u30A7\u30A8\u30A9\u30AA\u30AB\u30AC\u30AD\u30AE\u30AF\u30B0\u30B1\u30B2\u30B3\u30B4\u30B5\u30B6\u30B7\u30B8\u30B9\u30BA\u30BB\u30BC\u30BD\u30BE\u30BF\u30C0\u30C1\u30C2\u30C3\u30C4\u30C5\u30C6\u30C7\u30C8\u30C9\u30CA\u30CB\u30CC\u30CD\u30CE\u30CF\u30D0\u30D1\u30D2\u30D3\u30D4\u30D5\u30D6\u30D7\u30D8\u30D9\u30DA\u30DB\u30DC\u30DD\u30DE\u30DF\u30E0\u30E1\u30E2\u30E3\u30E4\u30E5\u30E6\u30E7\u30E8\u30E9\u30EA\u30EB\u30EC\u30ED\u30EE\u30EF\u30F0\u30F1\u30F2\u30F3\u30F4\u30F5\u30F6\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD".split("");
        for (j3 = 0; j3 != D5[171].length; ++j3)
          if (D5[171][j3].charCodeAt(0) !== 65533) {
            e7[D5[171][j3]] = 43776 + j3;
            d2[43776 + j3] = D5[171][j3];
          }
        D5[172] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uCCFE\uCCFF\uCD00\uCD02\uCD03\uCD04\uCD05\uCD06\uCD07\uCD0A\uCD0B\uCD0D\uCD0E\uCD0F\uCD11\uCD12\uCD13\uCD14\uCD15\uCD16\uCD17\uCD1A\uCD1C\uCD1E\uCD1F\uCD20\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uCD21\uCD22\uCD23\uCD25\uCD26\uCD27\uCD29\uCD2A\uCD2B\uCD2D\uCD2E\uCD2F\uCD30\uCD31\uCD32\uCD33\uCD34\uCD35\uCD36\uCD37\uCD38\uCD3A\uCD3B\uCD3C\uCD3D\uCD3E\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uCD3F\uCD40\uCD41\uCD42\uCD43\uCD44\uCD45\uCD46\uCD47\uCD48\uCD49\uCD4A\uCD4B\uCD4C\uCD4D\uCD4E\uCD4F\uCD50\uCD51\uCD52\uCD53\uCD54\uCD55\uCD56\uCD57\uCD58\uCD59\uCD5A\uCD5B\uCD5D\uCD5E\uCD5F\u0410\u0411\u0412\u0413\u0414\u0415\u0401\u0416\u0417\u0418\u0419\u041A\u041B\u041C\u041D\u041E\u041F\u0420\u0421\u0422\u0423\u0424\u0425\u0426\u0427\u0428\u0429\u042A\u042B\u042C\u042D\u042E\u042F\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u0430\u0431\u0432\u0433\u0434\u0435\u0451\u0436\u0437\u0438\u0439\u043A\u043B\u043C\u043D\u043E\u043F\u0440\u0441\u0442\u0443\u0444\u0445\u0446\u0447\u0448\u0449\u044A\u044B\u044C\u044D\u044E\u044F\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD".split("");
        for (j3 = 0; j3 != D5[172].length; ++j3)
          if (D5[172][j3].charCodeAt(0) !== 65533) {
            e7[D5[172][j3]] = 44032 + j3;
            d2[44032 + j3] = D5[172][j3];
          }
        D5[173] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uCD61\uCD62\uCD63\uCD65\uCD66\uCD67\uCD68\uCD69\uCD6A\uCD6B\uCD6E\uCD70\uCD72\uCD73\uCD74\uCD75\uCD76\uCD77\uCD79\uCD7A\uCD7B\uCD7C\uCD7D\uCD7E\uCD7F\uCD80\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uCD81\uCD82\uCD83\uCD84\uCD85\uCD86\uCD87\uCD89\uCD8A\uCD8B\uCD8C\uCD8D\uCD8E\uCD8F\uCD90\uCD91\uCD92\uCD93\uCD96\uCD97\uCD99\uCD9A\uCD9B\uCD9D\uCD9E\uCD9F\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uCDA0\uCDA1\uCDA2\uCDA3\uCDA6\uCDA8\uCDAA\uCDAB\uCDAC\uCDAD\uCDAE\uCDAF\uCDB1\uCDB2\uCDB3\uCDB4\uCDB5\uCDB6\uCDB7\uCDB8\uCDB9\uCDBA\uCDBB\uCDBC\uCDBD\uCDBE\uCDBF\uCDC0\uCDC1\uCDC2\uCDC3\uCDC5\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD".split("");
        for (j3 = 0; j3 != D5[173].length; ++j3)
          if (D5[173][j3].charCodeAt(0) !== 65533) {
            e7[D5[173][j3]] = 44288 + j3;
            d2[44288 + j3] = D5[173][j3];
          }
        D5[174] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uCDC6\uCDC7\uCDC8\uCDC9\uCDCA\uCDCB\uCDCD\uCDCE\uCDCF\uCDD1\uCDD2\uCDD3\uCDD4\uCDD5\uCDD6\uCDD7\uCDD8\uCDD9\uCDDA\uCDDB\uCDDC\uCDDD\uCDDE\uCDDF\uCDE0\uCDE1\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uCDE2\uCDE3\uCDE4\uCDE5\uCDE6\uCDE7\uCDE9\uCDEA\uCDEB\uCDED\uCDEE\uCDEF\uCDF1\uCDF2\uCDF3\uCDF4\uCDF5\uCDF6\uCDF7\uCDFA\uCDFC\uCDFE\uCDFF\uCE00\uCE01\uCE02\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uCE03\uCE05\uCE06\uCE07\uCE09\uCE0A\uCE0B\uCE0D\uCE0E\uCE0F\uCE10\uCE11\uCE12\uCE13\uCE15\uCE16\uCE17\uCE18\uCE1A\uCE1B\uCE1C\uCE1D\uCE1E\uCE1F\uCE22\uCE23\uCE25\uCE26\uCE27\uCE29\uCE2A\uCE2B\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD".split("");
        for (j3 = 0; j3 != D5[174].length; ++j3)
          if (D5[174][j3].charCodeAt(0) !== 65533) {
            e7[D5[174][j3]] = 44544 + j3;
            d2[44544 + j3] = D5[174][j3];
          }
        D5[175] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uCE2C\uCE2D\uCE2E\uCE2F\uCE32\uCE34\uCE36\uCE37\uCE38\uCE39\uCE3A\uCE3B\uCE3C\uCE3D\uCE3E\uCE3F\uCE40\uCE41\uCE42\uCE43\uCE44\uCE45\uCE46\uCE47\uCE48\uCE49\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uCE4A\uCE4B\uCE4C\uCE4D\uCE4E\uCE4F\uCE50\uCE51\uCE52\uCE53\uCE54\uCE55\uCE56\uCE57\uCE5A\uCE5B\uCE5D\uCE5E\uCE62\uCE63\uCE64\uCE65\uCE66\uCE67\uCE6A\uCE6C\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uCE6E\uCE6F\uCE70\uCE71\uCE72\uCE73\uCE76\uCE77\uCE79\uCE7A\uCE7B\uCE7D\uCE7E\uCE7F\uCE80\uCE81\uCE82\uCE83\uCE86\uCE88\uCE8A\uCE8B\uCE8C\uCE8D\uCE8E\uCE8F\uCE92\uCE93\uCE95\uCE96\uCE97\uCE99\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD".split("");
        for (j3 = 0; j3 != D5[175].length; ++j3)
          if (D5[175][j3].charCodeAt(0) !== 65533) {
            e7[D5[175][j3]] = 44800 + j3;
            d2[44800 + j3] = D5[175][j3];
          }
        D5[176] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uCE9A\uCE9B\uCE9C\uCE9D\uCE9E\uCE9F\uCEA2\uCEA6\uCEA7\uCEA8\uCEA9\uCEAA\uCEAB\uCEAE\uCEAF\uCEB0\uCEB1\uCEB2\uCEB3\uCEB4\uCEB5\uCEB6\uCEB7\uCEB8\uCEB9\uCEBA\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uCEBB\uCEBC\uCEBD\uCEBE\uCEBF\uCEC0\uCEC2\uCEC3\uCEC4\uCEC5\uCEC6\uCEC7\uCEC8\uCEC9\uCECA\uCECB\uCECC\uCECD\uCECE\uCECF\uCED0\uCED1\uCED2\uCED3\uCED4\uCED5\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uCED6\uCED7\uCED8\uCED9\uCEDA\uCEDB\uCEDC\uCEDD\uCEDE\uCEDF\uCEE0\uCEE1\uCEE2\uCEE3\uCEE6\uCEE7\uCEE9\uCEEA\uCEED\uCEEE\uCEEF\uCEF0\uCEF1\uCEF2\uCEF3\uCEF6\uCEFA\uCEFB\uCEFC\uCEFD\uCEFE\uCEFF\uAC00\uAC01\uAC04\uAC07\uAC08\uAC09\uAC0A\uAC10\uAC11\uAC12\uAC13\uAC14\uAC15\uAC16\uAC17\uAC19\uAC1A\uAC1B\uAC1C\uAC1D\uAC20\uAC24\uAC2C\uAC2D\uAC2F\uAC30\uAC31\uAC38\uAC39\uAC3C\uAC40\uAC4B\uAC4D\uAC54\uAC58\uAC5C\uAC70\uAC71\uAC74\uAC77\uAC78\uAC7A\uAC80\uAC81\uAC83\uAC84\uAC85\uAC86\uAC89\uAC8A\uAC8B\uAC8C\uAC90\uAC94\uAC9C\uAC9D\uAC9F\uACA0\uACA1\uACA8\uACA9\uACAA\uACAC\uACAF\uACB0\uACB8\uACB9\uACBB\uACBC\uACBD\uACC1\uACC4\uACC8\uACCC\uACD5\uACD7\uACE0\uACE1\uACE4\uACE7\uACE8\uACEA\uACEC\uACEF\uACF0\uACF1\uACF3\uACF5\uACF6\uACFC\uACFD\uAD00\uAD04\uAD06\uFFFD".split("");
        for (j3 = 0; j3 != D5[176].length; ++j3)
          if (D5[176][j3].charCodeAt(0) !== 65533) {
            e7[D5[176][j3]] = 45056 + j3;
            d2[45056 + j3] = D5[176][j3];
          }
        D5[177] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uCF02\uCF03\uCF05\uCF06\uCF07\uCF09\uCF0A\uCF0B\uCF0C\uCF0D\uCF0E\uCF0F\uCF12\uCF14\uCF16\uCF17\uCF18\uCF19\uCF1A\uCF1B\uCF1D\uCF1E\uCF1F\uCF21\uCF22\uCF23\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uCF25\uCF26\uCF27\uCF28\uCF29\uCF2A\uCF2B\uCF2E\uCF32\uCF33\uCF34\uCF35\uCF36\uCF37\uCF39\uCF3A\uCF3B\uCF3C\uCF3D\uCF3E\uCF3F\uCF40\uCF41\uCF42\uCF43\uCF44\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uCF45\uCF46\uCF47\uCF48\uCF49\uCF4A\uCF4B\uCF4C\uCF4D\uCF4E\uCF4F\uCF50\uCF51\uCF52\uCF53\uCF56\uCF57\uCF59\uCF5A\uCF5B\uCF5D\uCF5E\uCF5F\uCF60\uCF61\uCF62\uCF63\uCF66\uCF68\uCF6A\uCF6B\uCF6C\uAD0C\uAD0D\uAD0F\uAD11\uAD18\uAD1C\uAD20\uAD29\uAD2C\uAD2D\uAD34\uAD35\uAD38\uAD3C\uAD44\uAD45\uAD47\uAD49\uAD50\uAD54\uAD58\uAD61\uAD63\uAD6C\uAD6D\uAD70\uAD73\uAD74\uAD75\uAD76\uAD7B\uAD7C\uAD7D\uAD7F\uAD81\uAD82\uAD88\uAD89\uAD8C\uAD90\uAD9C\uAD9D\uADA4\uADB7\uADC0\uADC1\uADC4\uADC8\uADD0\uADD1\uADD3\uADDC\uADE0\uADE4\uADF8\uADF9\uADFC\uADFF\uAE00\uAE01\uAE08\uAE09\uAE0B\uAE0D\uAE14\uAE30\uAE31\uAE34\uAE37\uAE38\uAE3A\uAE40\uAE41\uAE43\uAE45\uAE46\uAE4A\uAE4C\uAE4D\uAE4E\uAE50\uAE54\uAE56\uAE5C\uAE5D\uAE5F\uAE60\uAE61\uAE65\uAE68\uAE69\uAE6C\uAE70\uAE78\uFFFD".split("");
        for (j3 = 0; j3 != D5[177].length; ++j3)
          if (D5[177][j3].charCodeAt(0) !== 65533) {
            e7[D5[177][j3]] = 45312 + j3;
            d2[45312 + j3] = D5[177][j3];
          }
        D5[178] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uCF6D\uCF6E\uCF6F\uCF72\uCF73\uCF75\uCF76\uCF77\uCF79\uCF7A\uCF7B\uCF7C\uCF7D\uCF7E\uCF7F\uCF81\uCF82\uCF83\uCF84\uCF86\uCF87\uCF88\uCF89\uCF8A\uCF8B\uCF8D\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uCF8E\uCF8F\uCF90\uCF91\uCF92\uCF93\uCF94\uCF95\uCF96\uCF97\uCF98\uCF99\uCF9A\uCF9B\uCF9C\uCF9D\uCF9E\uCF9F\uCFA0\uCFA2\uCFA3\uCFA4\uCFA5\uCFA6\uCFA7\uCFA9\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uCFAA\uCFAB\uCFAC\uCFAD\uCFAE\uCFAF\uCFB1\uCFB2\uCFB3\uCFB4\uCFB5\uCFB6\uCFB7\uCFB8\uCFB9\uCFBA\uCFBB\uCFBC\uCFBD\uCFBE\uCFBF\uCFC0\uCFC1\uCFC2\uCFC3\uCFC5\uCFC6\uCFC7\uCFC8\uCFC9\uCFCA\uCFCB\uAE79\uAE7B\uAE7C\uAE7D\uAE84\uAE85\uAE8C\uAEBC\uAEBD\uAEBE\uAEC0\uAEC4\uAECC\uAECD\uAECF\uAED0\uAED1\uAED8\uAED9\uAEDC\uAEE8\uAEEB\uAEED\uAEF4\uAEF8\uAEFC\uAF07\uAF08\uAF0D\uAF10\uAF2C\uAF2D\uAF30\uAF32\uAF34\uAF3C\uAF3D\uAF3F\uAF41\uAF42\uAF43\uAF48\uAF49\uAF50\uAF5C\uAF5D\uAF64\uAF65\uAF79\uAF80\uAF84\uAF88\uAF90\uAF91\uAF95\uAF9C\uAFB8\uAFB9\uAFBC\uAFC0\uAFC7\uAFC8\uAFC9\uAFCB\uAFCD\uAFCE\uAFD4\uAFDC\uAFE8\uAFE9\uAFF0\uAFF1\uAFF4\uAFF8\uB000\uB001\uB004\uB00C\uB010\uB014\uB01C\uB01D\uB028\uB044\uB045\uB048\uB04A\uB04C\uB04E\uB053\uB054\uB055\uB057\uB059\uFFFD".split("");
        for (j3 = 0; j3 != D5[178].length; ++j3)
          if (D5[178][j3].charCodeAt(0) !== 65533) {
            e7[D5[178][j3]] = 45568 + j3;
            d2[45568 + j3] = D5[178][j3];
          }
        D5[179] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uCFCC\uCFCD\uCFCE\uCFCF\uCFD0\uCFD1\uCFD2\uCFD3\uCFD4\uCFD5\uCFD6\uCFD7\uCFD8\uCFD9\uCFDA\uCFDB\uCFDC\uCFDD\uCFDE\uCFDF\uCFE2\uCFE3\uCFE5\uCFE6\uCFE7\uCFE9\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uCFEA\uCFEB\uCFEC\uCFED\uCFEE\uCFEF\uCFF2\uCFF4\uCFF6\uCFF7\uCFF8\uCFF9\uCFFA\uCFFB\uCFFD\uCFFE\uCFFF\uD001\uD002\uD003\uD005\uD006\uD007\uD008\uD009\uD00A\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uD00B\uD00C\uD00D\uD00E\uD00F\uD010\uD012\uD013\uD014\uD015\uD016\uD017\uD019\uD01A\uD01B\uD01C\uD01D\uD01E\uD01F\uD020\uD021\uD022\uD023\uD024\uD025\uD026\uD027\uD028\uD029\uD02A\uD02B\uD02C\uB05D\uB07C\uB07D\uB080\uB084\uB08C\uB08D\uB08F\uB091\uB098\uB099\uB09A\uB09C\uB09F\uB0A0\uB0A1\uB0A2\uB0A8\uB0A9\uB0AB\uB0AC\uB0AD\uB0AE\uB0AF\uB0B1\uB0B3\uB0B4\uB0B5\uB0B8\uB0BC\uB0C4\uB0C5\uB0C7\uB0C8\uB0C9\uB0D0\uB0D1\uB0D4\uB0D8\uB0E0\uB0E5\uB108\uB109\uB10B\uB10C\uB110\uB112\uB113\uB118\uB119\uB11B\uB11C\uB11D\uB123\uB124\uB125\uB128\uB12C\uB134\uB135\uB137\uB138\uB139\uB140\uB141\uB144\uB148\uB150\uB151\uB154\uB155\uB158\uB15C\uB160\uB178\uB179\uB17C\uB180\uB182\uB188\uB189\uB18B\uB18D\uB192\uB193\uB194\uB198\uB19C\uB1A8\uB1CC\uB1D0\uB1D4\uB1DC\uB1DD\uFFFD".split("");
        for (j3 = 0; j3 != D5[179].length; ++j3)
          if (D5[179][j3].charCodeAt(0) !== 65533) {
            e7[D5[179][j3]] = 45824 + j3;
            d2[45824 + j3] = D5[179][j3];
          }
        D5[180] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uD02E\uD02F\uD030\uD031\uD032\uD033\uD036\uD037\uD039\uD03A\uD03B\uD03D\uD03E\uD03F\uD040\uD041\uD042\uD043\uD046\uD048\uD04A\uD04B\uD04C\uD04D\uD04E\uD04F\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uD051\uD052\uD053\uD055\uD056\uD057\uD059\uD05A\uD05B\uD05C\uD05D\uD05E\uD05F\uD061\uD062\uD063\uD064\uD065\uD066\uD067\uD068\uD069\uD06A\uD06B\uD06E\uD06F\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uD071\uD072\uD073\uD075\uD076\uD077\uD078\uD079\uD07A\uD07B\uD07E\uD07F\uD080\uD082\uD083\uD084\uD085\uD086\uD087\uD088\uD089\uD08A\uD08B\uD08C\uD08D\uD08E\uD08F\uD090\uD091\uD092\uD093\uD094\uB1DF\uB1E8\uB1E9\uB1EC\uB1F0\uB1F9\uB1FB\uB1FD\uB204\uB205\uB208\uB20B\uB20C\uB214\uB215\uB217\uB219\uB220\uB234\uB23C\uB258\uB25C\uB260\uB268\uB269\uB274\uB275\uB27C\uB284\uB285\uB289\uB290\uB291\uB294\uB298\uB299\uB29A\uB2A0\uB2A1\uB2A3\uB2A5\uB2A6\uB2AA\uB2AC\uB2B0\uB2B4\uB2C8\uB2C9\uB2CC\uB2D0\uB2D2\uB2D8\uB2D9\uB2DB\uB2DD\uB2E2\uB2E4\uB2E5\uB2E6\uB2E8\uB2EB\uB2EC\uB2ED\uB2EE\uB2EF\uB2F3\uB2F4\uB2F5\uB2F7\uB2F8\uB2F9\uB2FA\uB2FB\uB2FF\uB300\uB301\uB304\uB308\uB310\uB311\uB313\uB314\uB315\uB31C\uB354\uB355\uB356\uB358\uB35B\uB35C\uB35E\uB35F\uB364\uB365\uFFFD".split("");
        for (j3 = 0; j3 != D5[180].length; ++j3)
          if (D5[180][j3].charCodeAt(0) !== 65533) {
            e7[D5[180][j3]] = 46080 + j3;
            d2[46080 + j3] = D5[180][j3];
          }
        D5[181] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uD095\uD096\uD097\uD098\uD099\uD09A\uD09B\uD09C\uD09D\uD09E\uD09F\uD0A0\uD0A1\uD0A2\uD0A3\uD0A6\uD0A7\uD0A9\uD0AA\uD0AB\uD0AD\uD0AE\uD0AF\uD0B0\uD0B1\uD0B2\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uD0B3\uD0B6\uD0B8\uD0BA\uD0BB\uD0BC\uD0BD\uD0BE\uD0BF\uD0C2\uD0C3\uD0C5\uD0C6\uD0C7\uD0CA\uD0CB\uD0CC\uD0CD\uD0CE\uD0CF\uD0D2\uD0D6\uD0D7\uD0D8\uD0D9\uD0DA\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uD0DB\uD0DE\uD0DF\uD0E1\uD0E2\uD0E3\uD0E5\uD0E6\uD0E7\uD0E8\uD0E9\uD0EA\uD0EB\uD0EE\uD0F2\uD0F3\uD0F4\uD0F5\uD0F6\uD0F7\uD0F9\uD0FA\uD0FB\uD0FC\uD0FD\uD0FE\uD0FF\uD100\uD101\uD102\uD103\uD104\uB367\uB369\uB36B\uB36E\uB370\uB371\uB374\uB378\uB380\uB381\uB383\uB384\uB385\uB38C\uB390\uB394\uB3A0\uB3A1\uB3A8\uB3AC\uB3C4\uB3C5\uB3C8\uB3CB\uB3CC\uB3CE\uB3D0\uB3D4\uB3D5\uB3D7\uB3D9\uB3DB\uB3DD\uB3E0\uB3E4\uB3E8\uB3FC\uB410\uB418\uB41C\uB420\uB428\uB429\uB42B\uB434\uB450\uB451\uB454\uB458\uB460\uB461\uB463\uB465\uB46C\uB480\uB488\uB49D\uB4A4\uB4A8\uB4AC\uB4B5\uB4B7\uB4B9\uB4C0\uB4C4\uB4C8\uB4D0\uB4D5\uB4DC\uB4DD\uB4E0\uB4E3\uB4E4\uB4E6\uB4EC\uB4ED\uB4EF\uB4F1\uB4F8\uB514\uB515\uB518\uB51B\uB51C\uB524\uB525\uB527\uB528\uB529\uB52A\uB530\uB531\uB534\uB538\uFFFD".split("");
        for (j3 = 0; j3 != D5[181].length; ++j3)
          if (D5[181][j3].charCodeAt(0) !== 65533) {
            e7[D5[181][j3]] = 46336 + j3;
            d2[46336 + j3] = D5[181][j3];
          }
        D5[182] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uD105\uD106\uD107\uD108\uD109\uD10A\uD10B\uD10C\uD10E\uD10F\uD110\uD111\uD112\uD113\uD114\uD115\uD116\uD117\uD118\uD119\uD11A\uD11B\uD11C\uD11D\uD11E\uD11F\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uD120\uD121\uD122\uD123\uD124\uD125\uD126\uD127\uD128\uD129\uD12A\uD12B\uD12C\uD12D\uD12E\uD12F\uD132\uD133\uD135\uD136\uD137\uD139\uD13B\uD13C\uD13D\uD13E\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uD13F\uD142\uD146\uD147\uD148\uD149\uD14A\uD14B\uD14E\uD14F\uD151\uD152\uD153\uD155\uD156\uD157\uD158\uD159\uD15A\uD15B\uD15E\uD160\uD162\uD163\uD164\uD165\uD166\uD167\uD169\uD16A\uD16B\uD16D\uB540\uB541\uB543\uB544\uB545\uB54B\uB54C\uB54D\uB550\uB554\uB55C\uB55D\uB55F\uB560\uB561\uB5A0\uB5A1\uB5A4\uB5A8\uB5AA\uB5AB\uB5B0\uB5B1\uB5B3\uB5B4\uB5B5\uB5BB\uB5BC\uB5BD\uB5C0\uB5C4\uB5CC\uB5CD\uB5CF\uB5D0\uB5D1\uB5D8\uB5EC\uB610\uB611\uB614\uB618\uB625\uB62C\uB634\uB648\uB664\uB668\uB69C\uB69D\uB6A0\uB6A4\uB6AB\uB6AC\uB6B1\uB6D4\uB6F0\uB6F4\uB6F8\uB700\uB701\uB705\uB728\uB729\uB72C\uB72F\uB730\uB738\uB739\uB73B\uB744\uB748\uB74C\uB754\uB755\uB760\uB764\uB768\uB770\uB771\uB773\uB775\uB77C\uB77D\uB780\uB784\uB78C\uB78D\uB78F\uB790\uB791\uB792\uB796\uB797\uFFFD".split("");
        for (j3 = 0; j3 != D5[182].length; ++j3)
          if (D5[182][j3].charCodeAt(0) !== 65533) {
            e7[D5[182][j3]] = 46592 + j3;
            d2[46592 + j3] = D5[182][j3];
          }
        D5[183] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uD16E\uD16F\uD170\uD171\uD172\uD173\uD174\uD175\uD176\uD177\uD178\uD179\uD17A\uD17B\uD17D\uD17E\uD17F\uD180\uD181\uD182\uD183\uD185\uD186\uD187\uD189\uD18A\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uD18B\uD18C\uD18D\uD18E\uD18F\uD190\uD191\uD192\uD193\uD194\uD195\uD196\uD197\uD198\uD199\uD19A\uD19B\uD19C\uD19D\uD19E\uD19F\uD1A2\uD1A3\uD1A5\uD1A6\uD1A7\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uD1A9\uD1AA\uD1AB\uD1AC\uD1AD\uD1AE\uD1AF\uD1B2\uD1B4\uD1B6\uD1B7\uD1B8\uD1B9\uD1BB\uD1BD\uD1BE\uD1BF\uD1C1\uD1C2\uD1C3\uD1C4\uD1C5\uD1C6\uD1C7\uD1C8\uD1C9\uD1CA\uD1CB\uD1CC\uD1CD\uD1CE\uD1CF\uB798\uB799\uB79C\uB7A0\uB7A8\uB7A9\uB7AB\uB7AC\uB7AD\uB7B4\uB7B5\uB7B8\uB7C7\uB7C9\uB7EC\uB7ED\uB7F0\uB7F4\uB7FC\uB7FD\uB7FF\uB800\uB801\uB807\uB808\uB809\uB80C\uB810\uB818\uB819\uB81B\uB81D\uB824\uB825\uB828\uB82C\uB834\uB835\uB837\uB838\uB839\uB840\uB844\uB851\uB853\uB85C\uB85D\uB860\uB864\uB86C\uB86D\uB86F\uB871\uB878\uB87C\uB88D\uB8A8\uB8B0\uB8B4\uB8B8\uB8C0\uB8C1\uB8C3\uB8C5\uB8CC\uB8D0\uB8D4\uB8DD\uB8DF\uB8E1\uB8E8\uB8E9\uB8EC\uB8F0\uB8F8\uB8F9\uB8FB\uB8FD\uB904\uB918\uB920\uB93C\uB93D\uB940\uB944\uB94C\uB94F\uB951\uB958\uB959\uB95C\uB960\uB968\uB969\uFFFD".split("");
        for (j3 = 0; j3 != D5[183].length; ++j3)
          if (D5[183][j3].charCodeAt(0) !== 65533) {
            e7[D5[183][j3]] = 46848 + j3;
            d2[46848 + j3] = D5[183][j3];
          }
        D5[184] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uD1D0\uD1D1\uD1D2\uD1D3\uD1D4\uD1D5\uD1D6\uD1D7\uD1D9\uD1DA\uD1DB\uD1DC\uD1DD\uD1DE\uD1DF\uD1E0\uD1E1\uD1E2\uD1E3\uD1E4\uD1E5\uD1E6\uD1E7\uD1E8\uD1E9\uD1EA\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uD1EB\uD1EC\uD1ED\uD1EE\uD1EF\uD1F0\uD1F1\uD1F2\uD1F3\uD1F5\uD1F6\uD1F7\uD1F9\uD1FA\uD1FB\uD1FC\uD1FD\uD1FE\uD1FF\uD200\uD201\uD202\uD203\uD204\uD205\uD206\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uD208\uD20A\uD20B\uD20C\uD20D\uD20E\uD20F\uD211\uD212\uD213\uD214\uD215\uD216\uD217\uD218\uD219\uD21A\uD21B\uD21C\uD21D\uD21E\uD21F\uD220\uD221\uD222\uD223\uD224\uD225\uD226\uD227\uD228\uD229\uB96B\uB96D\uB974\uB975\uB978\uB97C\uB984\uB985\uB987\uB989\uB98A\uB98D\uB98E\uB9AC\uB9AD\uB9B0\uB9B4\uB9BC\uB9BD\uB9BF\uB9C1\uB9C8\uB9C9\uB9CC\uB9CE\uB9CF\uB9D0\uB9D1\uB9D2\uB9D8\uB9D9\uB9DB\uB9DD\uB9DE\uB9E1\uB9E3\uB9E4\uB9E5\uB9E8\uB9EC\uB9F4\uB9F5\uB9F7\uB9F8\uB9F9\uB9FA\uBA00\uBA01\uBA08\uBA15\uBA38\uBA39\uBA3C\uBA40\uBA42\uBA48\uBA49\uBA4B\uBA4D\uBA4E\uBA53\uBA54\uBA55\uBA58\uBA5C\uBA64\uBA65\uBA67\uBA68\uBA69\uBA70\uBA71\uBA74\uBA78\uBA83\uBA84\uBA85\uBA87\uBA8C\uBAA8\uBAA9\uBAAB\uBAAC\uBAB0\uBAB2\uBAB8\uBAB9\uBABB\uBABD\uBAC4\uBAC8\uBAD8\uBAD9\uBAFC\uFFFD".split("");
        for (j3 = 0; j3 != D5[184].length; ++j3)
          if (D5[184][j3].charCodeAt(0) !== 65533) {
            e7[D5[184][j3]] = 47104 + j3;
            d2[47104 + j3] = D5[184][j3];
          }
        D5[185] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uD22A\uD22B\uD22E\uD22F\uD231\uD232\uD233\uD235\uD236\uD237\uD238\uD239\uD23A\uD23B\uD23E\uD240\uD242\uD243\uD244\uD245\uD246\uD247\uD249\uD24A\uD24B\uD24C\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uD24D\uD24E\uD24F\uD250\uD251\uD252\uD253\uD254\uD255\uD256\uD257\uD258\uD259\uD25A\uD25B\uD25D\uD25E\uD25F\uD260\uD261\uD262\uD263\uD265\uD266\uD267\uD268\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uD269\uD26A\uD26B\uD26C\uD26D\uD26E\uD26F\uD270\uD271\uD272\uD273\uD274\uD275\uD276\uD277\uD278\uD279\uD27A\uD27B\uD27C\uD27D\uD27E\uD27F\uD282\uD283\uD285\uD286\uD287\uD289\uD28A\uD28B\uD28C\uBB00\uBB04\uBB0D\uBB0F\uBB11\uBB18\uBB1C\uBB20\uBB29\uBB2B\uBB34\uBB35\uBB36\uBB38\uBB3B\uBB3C\uBB3D\uBB3E\uBB44\uBB45\uBB47\uBB49\uBB4D\uBB4F\uBB50\uBB54\uBB58\uBB61\uBB63\uBB6C\uBB88\uBB8C\uBB90\uBBA4\uBBA8\uBBAC\uBBB4\uBBB7\uBBC0\uBBC4\uBBC8\uBBD0\uBBD3\uBBF8\uBBF9\uBBFC\uBBFF\uBC00\uBC02\uBC08\uBC09\uBC0B\uBC0C\uBC0D\uBC0F\uBC11\uBC14\uBC15\uBC16\uBC17\uBC18\uBC1B\uBC1C\uBC1D\uBC1E\uBC1F\uBC24\uBC25\uBC27\uBC29\uBC2D\uBC30\uBC31\uBC34\uBC38\uBC40\uBC41\uBC43\uBC44\uBC45\uBC49\uBC4C\uBC4D\uBC50\uBC5D\uBC84\uBC85\uBC88\uBC8B\uBC8C\uBC8E\uBC94\uBC95\uBC97\uFFFD".split("");
        for (j3 = 0; j3 != D5[185].length; ++j3)
          if (D5[185][j3].charCodeAt(0) !== 65533) {
            e7[D5[185][j3]] = 47360 + j3;
            d2[47360 + j3] = D5[185][j3];
          }
        D5[186] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uD28D\uD28E\uD28F\uD292\uD293\uD294\uD296\uD297\uD298\uD299\uD29A\uD29B\uD29D\uD29E\uD29F\uD2A1\uD2A2\uD2A3\uD2A5\uD2A6\uD2A7\uD2A8\uD2A9\uD2AA\uD2AB\uD2AD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uD2AE\uD2AF\uD2B0\uD2B2\uD2B3\uD2B4\uD2B5\uD2B6\uD2B7\uD2BA\uD2BB\uD2BD\uD2BE\uD2C1\uD2C3\uD2C4\uD2C5\uD2C6\uD2C7\uD2CA\uD2CC\uD2CD\uD2CE\uD2CF\uD2D0\uD2D1\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uD2D2\uD2D3\uD2D5\uD2D6\uD2D7\uD2D9\uD2DA\uD2DB\uD2DD\uD2DE\uD2DF\uD2E0\uD2E1\uD2E2\uD2E3\uD2E6\uD2E7\uD2E8\uD2E9\uD2EA\uD2EB\uD2EC\uD2ED\uD2EE\uD2EF\uD2F2\uD2F3\uD2F5\uD2F6\uD2F7\uD2F9\uD2FA\uBC99\uBC9A\uBCA0\uBCA1\uBCA4\uBCA7\uBCA8\uBCB0\uBCB1\uBCB3\uBCB4\uBCB5\uBCBC\uBCBD\uBCC0\uBCC4\uBCCD\uBCCF\uBCD0\uBCD1\uBCD5\uBCD8\uBCDC\uBCF4\uBCF5\uBCF6\uBCF8\uBCFC\uBD04\uBD05\uBD07\uBD09\uBD10\uBD14\uBD24\uBD2C\uBD40\uBD48\uBD49\uBD4C\uBD50\uBD58\uBD59\uBD64\uBD68\uBD80\uBD81\uBD84\uBD87\uBD88\uBD89\uBD8A\uBD90\uBD91\uBD93\uBD95\uBD99\uBD9A\uBD9C\uBDA4\uBDB0\uBDB8\uBDD4\uBDD5\uBDD8\uBDDC\uBDE9\uBDF0\uBDF4\uBDF8\uBE00\uBE03\uBE05\uBE0C\uBE0D\uBE10\uBE14\uBE1C\uBE1D\uBE1F\uBE44\uBE45\uBE48\uBE4C\uBE4E\uBE54\uBE55\uBE57\uBE59\uBE5A\uBE5B\uBE60\uBE61\uBE64\uFFFD".split("");
        for (j3 = 0; j3 != D5[186].length; ++j3)
          if (D5[186][j3].charCodeAt(0) !== 65533) {
            e7[D5[186][j3]] = 47616 + j3;
            d2[47616 + j3] = D5[186][j3];
          }
        D5[187] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uD2FB\uD2FC\uD2FD\uD2FE\uD2FF\uD302\uD304\uD306\uD307\uD308\uD309\uD30A\uD30B\uD30F\uD311\uD312\uD313\uD315\uD317\uD318\uD319\uD31A\uD31B\uD31E\uD322\uD323\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uD324\uD326\uD327\uD32A\uD32B\uD32D\uD32E\uD32F\uD331\uD332\uD333\uD334\uD335\uD336\uD337\uD33A\uD33E\uD33F\uD340\uD341\uD342\uD343\uD346\uD347\uD348\uD349\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uD34A\uD34B\uD34C\uD34D\uD34E\uD34F\uD350\uD351\uD352\uD353\uD354\uD355\uD356\uD357\uD358\uD359\uD35A\uD35B\uD35C\uD35D\uD35E\uD35F\uD360\uD361\uD362\uD363\uD364\uD365\uD366\uD367\uD368\uD369\uBE68\uBE6A\uBE70\uBE71\uBE73\uBE74\uBE75\uBE7B\uBE7C\uBE7D\uBE80\uBE84\uBE8C\uBE8D\uBE8F\uBE90\uBE91\uBE98\uBE99\uBEA8\uBED0\uBED1\uBED4\uBED7\uBED8\uBEE0\uBEE3\uBEE4\uBEE5\uBEEC\uBF01\uBF08\uBF09\uBF18\uBF19\uBF1B\uBF1C\uBF1D\uBF40\uBF41\uBF44\uBF48\uBF50\uBF51\uBF55\uBF94\uBFB0\uBFC5\uBFCC\uBFCD\uBFD0\uBFD4\uBFDC\uBFDF\uBFE1\uC03C\uC051\uC058\uC05C\uC060\uC068\uC069\uC090\uC091\uC094\uC098\uC0A0\uC0A1\uC0A3\uC0A5\uC0AC\uC0AD\uC0AF\uC0B0\uC0B3\uC0B4\uC0B5\uC0B6\uC0BC\uC0BD\uC0BF\uC0C0\uC0C1\uC0C5\uC0C8\uC0C9\uC0CC\uC0D0\uC0D8\uC0D9\uC0DB\uC0DC\uC0DD\uC0E4\uFFFD".split("");
        for (j3 = 0; j3 != D5[187].length; ++j3)
          if (D5[187][j3].charCodeAt(0) !== 65533) {
            e7[D5[187][j3]] = 47872 + j3;
            d2[47872 + j3] = D5[187][j3];
          }
        D5[188] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uD36A\uD36B\uD36C\uD36D\uD36E\uD36F\uD370\uD371\uD372\uD373\uD374\uD375\uD376\uD377\uD378\uD379\uD37A\uD37B\uD37E\uD37F\uD381\uD382\uD383\uD385\uD386\uD387\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uD388\uD389\uD38A\uD38B\uD38E\uD392\uD393\uD394\uD395\uD396\uD397\uD39A\uD39B\uD39D\uD39E\uD39F\uD3A1\uD3A2\uD3A3\uD3A4\uD3A5\uD3A6\uD3A7\uD3AA\uD3AC\uD3AE\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uD3AF\uD3B0\uD3B1\uD3B2\uD3B3\uD3B5\uD3B6\uD3B7\uD3B9\uD3BA\uD3BB\uD3BD\uD3BE\uD3BF\uD3C0\uD3C1\uD3C2\uD3C3\uD3C6\uD3C7\uD3CA\uD3CB\uD3CC\uD3CD\uD3CE\uD3CF\uD3D1\uD3D2\uD3D3\uD3D4\uD3D5\uD3D6\uC0E5\uC0E8\uC0EC\uC0F4\uC0F5\uC0F7\uC0F9\uC100\uC104\uC108\uC110\uC115\uC11C\uC11D\uC11E\uC11F\uC120\uC123\uC124\uC126\uC127\uC12C\uC12D\uC12F\uC130\uC131\uC136\uC138\uC139\uC13C\uC140\uC148\uC149\uC14B\uC14C\uC14D\uC154\uC155\uC158\uC15C\uC164\uC165\uC167\uC168\uC169\uC170\uC174\uC178\uC185\uC18C\uC18D\uC18E\uC190\uC194\uC196\uC19C\uC19D\uC19F\uC1A1\uC1A5\uC1A8\uC1A9\uC1AC\uC1B0\uC1BD\uC1C4\uC1C8\uC1CC\uC1D4\uC1D7\uC1D8\uC1E0\uC1E4\uC1E8\uC1F0\uC1F1\uC1F3\uC1FC\uC1FD\uC200\uC204\uC20C\uC20D\uC20F\uC211\uC218\uC219\uC21C\uC21F\uC220\uC228\uC229\uC22B\uC22D\uFFFD".split("");
        for (j3 = 0; j3 != D5[188].length; ++j3)
          if (D5[188][j3].charCodeAt(0) !== 65533) {
            e7[D5[188][j3]] = 48128 + j3;
            d2[48128 + j3] = D5[188][j3];
          }
        D5[189] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uD3D7\uD3D9\uD3DA\uD3DB\uD3DC\uD3DD\uD3DE\uD3DF\uD3E0\uD3E2\uD3E4\uD3E5\uD3E6\uD3E7\uD3E8\uD3E9\uD3EA\uD3EB\uD3EE\uD3EF\uD3F1\uD3F2\uD3F3\uD3F5\uD3F6\uD3F7\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uD3F8\uD3F9\uD3FA\uD3FB\uD3FE\uD400\uD402\uD403\uD404\uD405\uD406\uD407\uD409\uD40A\uD40B\uD40C\uD40D\uD40E\uD40F\uD410\uD411\uD412\uD413\uD414\uD415\uD416\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uD417\uD418\uD419\uD41A\uD41B\uD41C\uD41E\uD41F\uD420\uD421\uD422\uD423\uD424\uD425\uD426\uD427\uD428\uD429\uD42A\uD42B\uD42C\uD42D\uD42E\uD42F\uD430\uD431\uD432\uD433\uD434\uD435\uD436\uD437\uC22F\uC231\uC232\uC234\uC248\uC250\uC251\uC254\uC258\uC260\uC265\uC26C\uC26D\uC270\uC274\uC27C\uC27D\uC27F\uC281\uC288\uC289\uC290\uC298\uC29B\uC29D\uC2A4\uC2A5\uC2A8\uC2AC\uC2AD\uC2B4\uC2B5\uC2B7\uC2B9\uC2DC\uC2DD\uC2E0\uC2E3\uC2E4\uC2EB\uC2EC\uC2ED\uC2EF\uC2F1\uC2F6\uC2F8\uC2F9\uC2FB\uC2FC\uC300\uC308\uC309\uC30C\uC30D\uC313\uC314\uC315\uC318\uC31C\uC324\uC325\uC328\uC329\uC345\uC368\uC369\uC36C\uC370\uC372\uC378\uC379\uC37C\uC37D\uC384\uC388\uC38C\uC3C0\uC3D8\uC3D9\uC3DC\uC3DF\uC3E0\uC3E2\uC3E8\uC3E9\uC3ED\uC3F4\uC3F5\uC3F8\uC408\uC410\uC424\uC42C\uC430\uFFFD".split("");
        for (j3 = 0; j3 != D5[189].length; ++j3)
          if (D5[189][j3].charCodeAt(0) !== 65533) {
            e7[D5[189][j3]] = 48384 + j3;
            d2[48384 + j3] = D5[189][j3];
          }
        D5[190] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uD438\uD439\uD43A\uD43B\uD43C\uD43D\uD43E\uD43F\uD441\uD442\uD443\uD445\uD446\uD447\uD448\uD449\uD44A\uD44B\uD44C\uD44D\uD44E\uD44F\uD450\uD451\uD452\uD453\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uD454\uD455\uD456\uD457\uD458\uD459\uD45A\uD45B\uD45D\uD45E\uD45F\uD461\uD462\uD463\uD465\uD466\uD467\uD468\uD469\uD46A\uD46B\uD46C\uD46E\uD470\uD471\uD472\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uD473\uD474\uD475\uD476\uD477\uD47A\uD47B\uD47D\uD47E\uD481\uD483\uD484\uD485\uD486\uD487\uD48A\uD48C\uD48E\uD48F\uD490\uD491\uD492\uD493\uD495\uD496\uD497\uD498\uD499\uD49A\uD49B\uD49C\uD49D\uC434\uC43C\uC43D\uC448\uC464\uC465\uC468\uC46C\uC474\uC475\uC479\uC480\uC494\uC49C\uC4B8\uC4BC\uC4E9\uC4F0\uC4F1\uC4F4\uC4F8\uC4FA\uC4FF\uC500\uC501\uC50C\uC510\uC514\uC51C\uC528\uC529\uC52C\uC530\uC538\uC539\uC53B\uC53D\uC544\uC545\uC548\uC549\uC54A\uC54C\uC54D\uC54E\uC553\uC554\uC555\uC557\uC558\uC559\uC55D\uC55E\uC560\uC561\uC564\uC568\uC570\uC571\uC573\uC574\uC575\uC57C\uC57D\uC580\uC584\uC587\uC58C\uC58D\uC58F\uC591\uC595\uC597\uC598\uC59C\uC5A0\uC5A9\uC5B4\uC5B5\uC5B8\uC5B9\uC5BB\uC5BC\uC5BD\uC5BE\uC5C4\uC5C5\uC5C6\uC5C7\uC5C8\uC5C9\uC5CA\uC5CC\uC5CE\uFFFD".split("");
        for (j3 = 0; j3 != D5[190].length; ++j3)
          if (D5[190][j3].charCodeAt(0) !== 65533) {
            e7[D5[190][j3]] = 48640 + j3;
            d2[48640 + j3] = D5[190][j3];
          }
        D5[191] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uD49E\uD49F\uD4A0\uD4A1\uD4A2\uD4A3\uD4A4\uD4A5\uD4A6\uD4A7\uD4A8\uD4AA\uD4AB\uD4AC\uD4AD\uD4AE\uD4AF\uD4B0\uD4B1\uD4B2\uD4B3\uD4B4\uD4B5\uD4B6\uD4B7\uD4B8\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uD4B9\uD4BA\uD4BB\uD4BC\uD4BD\uD4BE\uD4BF\uD4C0\uD4C1\uD4C2\uD4C3\uD4C4\uD4C5\uD4C6\uD4C7\uD4C8\uD4C9\uD4CA\uD4CB\uD4CD\uD4CE\uD4CF\uD4D1\uD4D2\uD4D3\uD4D5\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uD4D6\uD4D7\uD4D8\uD4D9\uD4DA\uD4DB\uD4DD\uD4DE\uD4E0\uD4E1\uD4E2\uD4E3\uD4E4\uD4E5\uD4E6\uD4E7\uD4E9\uD4EA\uD4EB\uD4ED\uD4EE\uD4EF\uD4F1\uD4F2\uD4F3\uD4F4\uD4F5\uD4F6\uD4F7\uD4F9\uD4FA\uD4FC\uC5D0\uC5D1\uC5D4\uC5D8\uC5E0\uC5E1\uC5E3\uC5E5\uC5EC\uC5ED\uC5EE\uC5F0\uC5F4\uC5F6\uC5F7\uC5FC\uC5FD\uC5FE\uC5FF\uC600\uC601\uC605\uC606\uC607\uC608\uC60C\uC610\uC618\uC619\uC61B\uC61C\uC624\uC625\uC628\uC62C\uC62D\uC62E\uC630\uC633\uC634\uC635\uC637\uC639\uC63B\uC640\uC641\uC644\uC648\uC650\uC651\uC653\uC654\uC655\uC65C\uC65D\uC660\uC66C\uC66F\uC671\uC678\uC679\uC67C\uC680\uC688\uC689\uC68B\uC68D\uC694\uC695\uC698\uC69C\uC6A4\uC6A5\uC6A7\uC6A9\uC6B0\uC6B1\uC6B4\uC6B8\uC6B9\uC6BA\uC6C0\uC6C1\uC6C3\uC6C5\uC6CC\uC6CD\uC6D0\uC6D4\uC6DC\uC6DD\uC6E0\uC6E1\uC6E8\uFFFD".split("");
        for (j3 = 0; j3 != D5[191].length; ++j3)
          if (D5[191][j3].charCodeAt(0) !== 65533) {
            e7[D5[191][j3]] = 48896 + j3;
            d2[48896 + j3] = D5[191][j3];
          }
        D5[192] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uD4FE\uD4FF\uD500\uD501\uD502\uD503\uD505\uD506\uD507\uD509\uD50A\uD50B\uD50D\uD50E\uD50F\uD510\uD511\uD512\uD513\uD516\uD518\uD519\uD51A\uD51B\uD51C\uD51D\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uD51E\uD51F\uD520\uD521\uD522\uD523\uD524\uD525\uD526\uD527\uD528\uD529\uD52A\uD52B\uD52C\uD52D\uD52E\uD52F\uD530\uD531\uD532\uD533\uD534\uD535\uD536\uD537\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uD538\uD539\uD53A\uD53B\uD53E\uD53F\uD541\uD542\uD543\uD545\uD546\uD547\uD548\uD549\uD54A\uD54B\uD54E\uD550\uD552\uD553\uD554\uD555\uD556\uD557\uD55A\uD55B\uD55D\uD55E\uD55F\uD561\uD562\uD563\uC6E9\uC6EC\uC6F0\uC6F8\uC6F9\uC6FD\uC704\uC705\uC708\uC70C\uC714\uC715\uC717\uC719\uC720\uC721\uC724\uC728\uC730\uC731\uC733\uC735\uC737\uC73C\uC73D\uC740\uC744\uC74A\uC74C\uC74D\uC74F\uC751\uC752\uC753\uC754\uC755\uC756\uC757\uC758\uC75C\uC760\uC768\uC76B\uC774\uC775\uC778\uC77C\uC77D\uC77E\uC783\uC784\uC785\uC787\uC788\uC789\uC78A\uC78E\uC790\uC791\uC794\uC796\uC797\uC798\uC79A\uC7A0\uC7A1\uC7A3\uC7A4\uC7A5\uC7A6\uC7AC\uC7AD\uC7B0\uC7B4\uC7BC\uC7BD\uC7BF\uC7C0\uC7C1\uC7C8\uC7C9\uC7CC\uC7CE\uC7D0\uC7D8\uC7DD\uC7E4\uC7E8\uC7EC\uC800\uC801\uC804\uC808\uC80A\uFFFD".split("");
        for (j3 = 0; j3 != D5[192].length; ++j3)
          if (D5[192][j3].charCodeAt(0) !== 65533) {
            e7[D5[192][j3]] = 49152 + j3;
            d2[49152 + j3] = D5[192][j3];
          }
        D5[193] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uD564\uD566\uD567\uD56A\uD56C\uD56E\uD56F\uD570\uD571\uD572\uD573\uD576\uD577\uD579\uD57A\uD57B\uD57D\uD57E\uD57F\uD580\uD581\uD582\uD583\uD586\uD58A\uD58B\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uD58C\uD58D\uD58E\uD58F\uD591\uD592\uD593\uD594\uD595\uD596\uD597\uD598\uD599\uD59A\uD59B\uD59C\uD59D\uD59E\uD59F\uD5A0\uD5A1\uD5A2\uD5A3\uD5A4\uD5A6\uD5A7\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uD5A8\uD5A9\uD5AA\uD5AB\uD5AC\uD5AD\uD5AE\uD5AF\uD5B0\uD5B1\uD5B2\uD5B3\uD5B4\uD5B5\uD5B6\uD5B7\uD5B8\uD5B9\uD5BA\uD5BB\uD5BC\uD5BD\uD5BE\uD5BF\uD5C0\uD5C1\uD5C2\uD5C3\uD5C4\uD5C5\uD5C6\uD5C7\uC810\uC811\uC813\uC815\uC816\uC81C\uC81D\uC820\uC824\uC82C\uC82D\uC82F\uC831\uC838\uC83C\uC840\uC848\uC849\uC84C\uC84D\uC854\uC870\uC871\uC874\uC878\uC87A\uC880\uC881\uC883\uC885\uC886\uC887\uC88B\uC88C\uC88D\uC894\uC89D\uC89F\uC8A1\uC8A8\uC8BC\uC8BD\uC8C4\uC8C8\uC8CC\uC8D4\uC8D5\uC8D7\uC8D9\uC8E0\uC8E1\uC8E4\uC8F5\uC8FC\uC8FD\uC900\uC904\uC905\uC906\uC90C\uC90D\uC90F\uC911\uC918\uC92C\uC934\uC950\uC951\uC954\uC958\uC960\uC961\uC963\uC96C\uC970\uC974\uC97C\uC988\uC989\uC98C\uC990\uC998\uC999\uC99B\uC99D\uC9C0\uC9C1\uC9C4\uC9C7\uC9C8\uC9CA\uC9D0\uC9D1\uC9D3\uFFFD".split("");
        for (j3 = 0; j3 != D5[193].length; ++j3)
          if (D5[193][j3].charCodeAt(0) !== 65533) {
            e7[D5[193][j3]] = 49408 + j3;
            d2[49408 + j3] = D5[193][j3];
          }
        D5[194] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uD5CA\uD5CB\uD5CD\uD5CE\uD5CF\uD5D1\uD5D3\uD5D4\uD5D5\uD5D6\uD5D7\uD5DA\uD5DC\uD5DE\uD5DF\uD5E0\uD5E1\uD5E2\uD5E3\uD5E6\uD5E7\uD5E9\uD5EA\uD5EB\uD5ED\uD5EE\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uD5EF\uD5F0\uD5F1\uD5F2\uD5F3\uD5F6\uD5F8\uD5FA\uD5FB\uD5FC\uD5FD\uD5FE\uD5FF\uD602\uD603\uD605\uD606\uD607\uD609\uD60A\uD60B\uD60C\uD60D\uD60E\uD60F\uD612\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uD616\uD617\uD618\uD619\uD61A\uD61B\uD61D\uD61E\uD61F\uD621\uD622\uD623\uD625\uD626\uD627\uD628\uD629\uD62A\uD62B\uD62C\uD62E\uD62F\uD630\uD631\uD632\uD633\uD634\uD635\uD636\uD637\uD63A\uD63B\uC9D5\uC9D6\uC9D9\uC9DA\uC9DC\uC9DD\uC9E0\uC9E2\uC9E4\uC9E7\uC9EC\uC9ED\uC9EF\uC9F0\uC9F1\uC9F8\uC9F9\uC9FC\uCA00\uCA08\uCA09\uCA0B\uCA0C\uCA0D\uCA14\uCA18\uCA29\uCA4C\uCA4D\uCA50\uCA54\uCA5C\uCA5D\uCA5F\uCA60\uCA61\uCA68\uCA7D\uCA84\uCA98\uCABC\uCABD\uCAC0\uCAC4\uCACC\uCACD\uCACF\uCAD1\uCAD3\uCAD8\uCAD9\uCAE0\uCAEC\uCAF4\uCB08\uCB10\uCB14\uCB18\uCB20\uCB21\uCB41\uCB48\uCB49\uCB4C\uCB50\uCB58\uCB59\uCB5D\uCB64\uCB78\uCB79\uCB9C\uCBB8\uCBD4\uCBE4\uCBE7\uCBE9\uCC0C\uCC0D\uCC10\uCC14\uCC1C\uCC1D\uCC21\uCC22\uCC27\uCC28\uCC29\uCC2C\uCC2E\uCC30\uCC38\uCC39\uCC3B\uFFFD".split("");
        for (j3 = 0; j3 != D5[194].length; ++j3)
          if (D5[194][j3].charCodeAt(0) !== 65533) {
            e7[D5[194][j3]] = 49664 + j3;
            d2[49664 + j3] = D5[194][j3];
          }
        D5[195] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uD63D\uD63E\uD63F\uD641\uD642\uD643\uD644\uD646\uD647\uD64A\uD64C\uD64E\uD64F\uD650\uD652\uD653\uD656\uD657\uD659\uD65A\uD65B\uD65D\uD65E\uD65F\uD660\uD661\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uD662\uD663\uD664\uD665\uD666\uD668\uD66A\uD66B\uD66C\uD66D\uD66E\uD66F\uD672\uD673\uD675\uD676\uD677\uD678\uD679\uD67A\uD67B\uD67C\uD67D\uD67E\uD67F\uD680\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uD681\uD682\uD684\uD686\uD687\uD688\uD689\uD68A\uD68B\uD68E\uD68F\uD691\uD692\uD693\uD695\uD696\uD697\uD698\uD699\uD69A\uD69B\uD69C\uD69E\uD6A0\uD6A2\uD6A3\uD6A4\uD6A5\uD6A6\uD6A7\uD6A9\uD6AA\uCC3C\uCC3D\uCC3E\uCC44\uCC45\uCC48\uCC4C\uCC54\uCC55\uCC57\uCC58\uCC59\uCC60\uCC64\uCC66\uCC68\uCC70\uCC75\uCC98\uCC99\uCC9C\uCCA0\uCCA8\uCCA9\uCCAB\uCCAC\uCCAD\uCCB4\uCCB5\uCCB8\uCCBC\uCCC4\uCCC5\uCCC7\uCCC9\uCCD0\uCCD4\uCCE4\uCCEC\uCCF0\uCD01\uCD08\uCD09\uCD0C\uCD10\uCD18\uCD19\uCD1B\uCD1D\uCD24\uCD28\uCD2C\uCD39\uCD5C\uCD60\uCD64\uCD6C\uCD6D\uCD6F\uCD71\uCD78\uCD88\uCD94\uCD95\uCD98\uCD9C\uCDA4\uCDA5\uCDA7\uCDA9\uCDB0\uCDC4\uCDCC\uCDD0\uCDE8\uCDEC\uCDF0\uCDF8\uCDF9\uCDFB\uCDFD\uCE04\uCE08\uCE0C\uCE14\uCE19\uCE20\uCE21\uCE24\uCE28\uCE30\uCE31\uCE33\uCE35\uFFFD".split("");
        for (j3 = 0; j3 != D5[195].length; ++j3)
          if (D5[195][j3].charCodeAt(0) !== 65533) {
            e7[D5[195][j3]] = 49920 + j3;
            d2[49920 + j3] = D5[195][j3];
          }
        D5[196] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uD6AB\uD6AD\uD6AE\uD6AF\uD6B1\uD6B2\uD6B3\uD6B4\uD6B5\uD6B6\uD6B7\uD6B8\uD6BA\uD6BC\uD6BD\uD6BE\uD6BF\uD6C0\uD6C1\uD6C2\uD6C3\uD6C6\uD6C7\uD6C9\uD6CA\uD6CB\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uD6CD\uD6CE\uD6CF\uD6D0\uD6D2\uD6D3\uD6D5\uD6D6\uD6D8\uD6DA\uD6DB\uD6DC\uD6DD\uD6DE\uD6DF\uD6E1\uD6E2\uD6E3\uD6E5\uD6E6\uD6E7\uD6E9\uD6EA\uD6EB\uD6EC\uD6ED\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uD6EE\uD6EF\uD6F1\uD6F2\uD6F3\uD6F4\uD6F6\uD6F7\uD6F8\uD6F9\uD6FA\uD6FB\uD6FE\uD6FF\uD701\uD702\uD703\uD705\uD706\uD707\uD708\uD709\uD70A\uD70B\uD70C\uD70D\uD70E\uD70F\uD710\uD712\uD713\uD714\uCE58\uCE59\uCE5C\uCE5F\uCE60\uCE61\uCE68\uCE69\uCE6B\uCE6D\uCE74\uCE75\uCE78\uCE7C\uCE84\uCE85\uCE87\uCE89\uCE90\uCE91\uCE94\uCE98\uCEA0\uCEA1\uCEA3\uCEA4\uCEA5\uCEAC\uCEAD\uCEC1\uCEE4\uCEE5\uCEE8\uCEEB\uCEEC\uCEF4\uCEF5\uCEF7\uCEF8\uCEF9\uCF00\uCF01\uCF04\uCF08\uCF10\uCF11\uCF13\uCF15\uCF1C\uCF20\uCF24\uCF2C\uCF2D\uCF2F\uCF30\uCF31\uCF38\uCF54\uCF55\uCF58\uCF5C\uCF64\uCF65\uCF67\uCF69\uCF70\uCF71\uCF74\uCF78\uCF80\uCF85\uCF8C\uCFA1\uCFA8\uCFB0\uCFC4\uCFE0\uCFE1\uCFE4\uCFE8\uCFF0\uCFF1\uCFF3\uCFF5\uCFFC\uD000\uD004\uD011\uD018\uD02D\uD034\uD035\uD038\uD03C\uFFFD".split("");
        for (j3 = 0; j3 != D5[196].length; ++j3)
          if (D5[196][j3].charCodeAt(0) !== 65533) {
            e7[D5[196][j3]] = 50176 + j3;
            d2[50176 + j3] = D5[196][j3];
          }
        D5[197] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uD715\uD716\uD717\uD71A\uD71B\uD71D\uD71E\uD71F\uD721\uD722\uD723\uD724\uD725\uD726\uD727\uD72A\uD72C\uD72E\uD72F\uD730\uD731\uD732\uD733\uD736\uD737\uD739\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uD73A\uD73B\uD73D\uD73E\uD73F\uD740\uD741\uD742\uD743\uD745\uD746\uD748\uD74A\uD74B\uD74C\uD74D\uD74E\uD74F\uD752\uD753\uD755\uD75A\uD75B\uD75C\uD75D\uD75E\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uD75F\uD762\uD764\uD766\uD767\uD768\uD76A\uD76B\uD76D\uD76E\uD76F\uD771\uD772\uD773\uD775\uD776\uD777\uD778\uD779\uD77A\uD77B\uD77E\uD77F\uD780\uD782\uD783\uD784\uD785\uD786\uD787\uD78A\uD78B\uD044\uD045\uD047\uD049\uD050\uD054\uD058\uD060\uD06C\uD06D\uD070\uD074\uD07C\uD07D\uD081\uD0A4\uD0A5\uD0A8\uD0AC\uD0B4\uD0B5\uD0B7\uD0B9\uD0C0\uD0C1\uD0C4\uD0C8\uD0C9\uD0D0\uD0D1\uD0D3\uD0D4\uD0D5\uD0DC\uD0DD\uD0E0\uD0E4\uD0EC\uD0ED\uD0EF\uD0F0\uD0F1\uD0F8\uD10D\uD130\uD131\uD134\uD138\uD13A\uD140\uD141\uD143\uD144\uD145\uD14C\uD14D\uD150\uD154\uD15C\uD15D\uD15F\uD161\uD168\uD16C\uD17C\uD184\uD188\uD1A0\uD1A1\uD1A4\uD1A8\uD1B0\uD1B1\uD1B3\uD1B5\uD1BA\uD1BC\uD1C0\uD1D8\uD1F4\uD1F8\uD207\uD209\uD210\uD22C\uD22D\uD230\uD234\uD23C\uD23D\uD23F\uD241\uD248\uD25C\uFFFD".split("");
        for (j3 = 0; j3 != D5[197].length; ++j3)
          if (D5[197][j3].charCodeAt(0) !== 65533) {
            e7[D5[197][j3]] = 50432 + j3;
            d2[50432 + j3] = D5[197][j3];
          }
        D5[198] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uD78D\uD78E\uD78F\uD791\uD792\uD793\uD794\uD795\uD796\uD797\uD79A\uD79C\uD79E\uD79F\uD7A0\uD7A1\uD7A2\uD7A3\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uD264\uD280\uD281\uD284\uD288\uD290\uD291\uD295\uD29C\uD2A0\uD2A4\uD2AC\uD2B1\uD2B8\uD2B9\uD2BC\uD2BF\uD2C0\uD2C2\uD2C8\uD2C9\uD2CB\uD2D4\uD2D8\uD2DC\uD2E4\uD2E5\uD2F0\uD2F1\uD2F4\uD2F8\uD300\uD301\uD303\uD305\uD30C\uD30D\uD30E\uD310\uD314\uD316\uD31C\uD31D\uD31F\uD320\uD321\uD325\uD328\uD329\uD32C\uD330\uD338\uD339\uD33B\uD33C\uD33D\uD344\uD345\uD37C\uD37D\uD380\uD384\uD38C\uD38D\uD38F\uD390\uD391\uD398\uD399\uD39C\uD3A0\uD3A8\uD3A9\uD3AB\uD3AD\uD3B4\uD3B8\uD3BC\uD3C4\uD3C5\uD3C8\uD3C9\uD3D0\uD3D8\uD3E1\uD3E3\uD3EC\uD3ED\uD3F0\uD3F4\uD3FC\uD3FD\uD3FF\uD401\uFFFD".split("");
        for (j3 = 0; j3 != D5[198].length; ++j3)
          if (D5[198][j3].charCodeAt(0) !== 65533) {
            e7[D5[198][j3]] = 50688 + j3;
            d2[50688 + j3] = D5[198][j3];
          }
        D5[199] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uD408\uD41D\uD440\uD444\uD45C\uD460\uD464\uD46D\uD46F\uD478\uD479\uD47C\uD47F\uD480\uD482\uD488\uD489\uD48B\uD48D\uD494\uD4A9\uD4CC\uD4D0\uD4D4\uD4DC\uD4DF\uD4E8\uD4EC\uD4F0\uD4F8\uD4FB\uD4FD\uD504\uD508\uD50C\uD514\uD515\uD517\uD53C\uD53D\uD540\uD544\uD54C\uD54D\uD54F\uD551\uD558\uD559\uD55C\uD560\uD565\uD568\uD569\uD56B\uD56D\uD574\uD575\uD578\uD57C\uD584\uD585\uD587\uD588\uD589\uD590\uD5A5\uD5C8\uD5C9\uD5CC\uD5D0\uD5D2\uD5D8\uD5D9\uD5DB\uD5DD\uD5E4\uD5E5\uD5E8\uD5EC\uD5F4\uD5F5\uD5F7\uD5F9\uD600\uD601\uD604\uD608\uD610\uD611\uD613\uD614\uD615\uD61C\uD620\uFFFD".split("");
        for (j3 = 0; j3 != D5[199].length; ++j3)
          if (D5[199][j3].charCodeAt(0) !== 65533) {
            e7[D5[199][j3]] = 50944 + j3;
            d2[50944 + j3] = D5[199][j3];
          }
        D5[200] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uD624\uD62D\uD638\uD639\uD63C\uD640\uD645\uD648\uD649\uD64B\uD64D\uD651\uD654\uD655\uD658\uD65C\uD667\uD669\uD670\uD671\uD674\uD683\uD685\uD68C\uD68D\uD690\uD694\uD69D\uD69F\uD6A1\uD6A8\uD6AC\uD6B0\uD6B9\uD6BB\uD6C4\uD6C5\uD6C8\uD6CC\uD6D1\uD6D4\uD6D7\uD6D9\uD6E0\uD6E4\uD6E8\uD6F0\uD6F5\uD6FC\uD6FD\uD700\uD704\uD711\uD718\uD719\uD71C\uD720\uD728\uD729\uD72B\uD72D\uD734\uD735\uD738\uD73C\uD744\uD747\uD749\uD750\uD751\uD754\uD756\uD757\uD758\uD759\uD760\uD761\uD763\uD765\uD769\uD76C\uD770\uD774\uD77C\uD77D\uD781\uD788\uD789\uD78C\uD790\uD798\uD799\uD79B\uD79D\uFFFD".split("");
        for (j3 = 0; j3 != D5[200].length; ++j3)
          if (D5[200][j3].charCodeAt(0) !== 65533) {
            e7[D5[200][j3]] = 51200 + j3;
            d2[51200 + j3] = D5[200][j3];
          }
        D5[202] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u4F3D\u4F73\u5047\u50F9\u52A0\u53EF\u5475\u54E5\u5609\u5AC1\u5BB6\u6687\u67B6\u67B7\u67EF\u6B4C\u73C2\u75C2\u7A3C\u82DB\u8304\u8857\u8888\u8A36\u8CC8\u8DCF\u8EFB\u8FE6\u99D5\u523B\u5374\u5404\u606A\u6164\u6BBC\u73CF\u811A\u89BA\u89D2\u95A3\u4F83\u520A\u58BE\u5978\u59E6\u5E72\u5E79\u61C7\u63C0\u6746\u67EC\u687F\u6F97\u764E\u770B\u78F5\u7A08\u7AFF\u7C21\u809D\u826E\u8271\u8AEB\u9593\u4E6B\u559D\u66F7\u6E34\u78A3\u7AED\u845B\u8910\u874E\u97A8\u52D8\u574E\u582A\u5D4C\u611F\u61BE\u6221\u6562\u67D1\u6A44\u6E1B\u7518\u75B3\u76E3\u77B0\u7D3A\u90AF\u9451\u9452\u9F95\uFFFD".split("");
        for (j3 = 0; j3 != D5[202].length; ++j3)
          if (D5[202][j3].charCodeAt(0) !== 65533) {
            e7[D5[202][j3]] = 51712 + j3;
            d2[51712 + j3] = D5[202][j3];
          }
        D5[203] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u5323\u5CAC\u7532\u80DB\u9240\u9598\u525B\u5808\u59DC\u5CA1\u5D17\u5EB7\u5F3A\u5F4A\u6177\u6C5F\u757A\u7586\u7CE0\u7D73\u7DB1\u7F8C\u8154\u8221\u8591\u8941\u8B1B\u92FC\u964D\u9C47\u4ECB\u4EF7\u500B\u51F1\u584F\u6137\u613E\u6168\u6539\u69EA\u6F11\u75A5\u7686\u76D6\u7B87\u82A5\u84CB\uF900\u93A7\u958B\u5580\u5BA2\u5751\uF901\u7CB3\u7FB9\u91B5\u5028\u53BB\u5C45\u5DE8\u62D2\u636E\u64DA\u64E7\u6E20\u70AC\u795B\u8DDD\u8E1E\uF902\u907D\u9245\u92F8\u4E7E\u4EF6\u5065\u5DFE\u5EFA\u6106\u6957\u8171\u8654\u8E47\u9375\u9A2B\u4E5E\u5091\u6770\u6840\u5109\u528D\u5292\u6AA2\uFFFD".split("");
        for (j3 = 0; j3 != D5[203].length; ++j3)
          if (D5[203][j3].charCodeAt(0) !== 65533) {
            e7[D5[203][j3]] = 51968 + j3;
            d2[51968 + j3] = D5[203][j3];
          }
        D5[204] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u77BC\u9210\u9ED4\u52AB\u602F\u8FF2\u5048\u61A9\u63ED\u64CA\u683C\u6A84\u6FC0\u8188\u89A1\u9694\u5805\u727D\u72AC\u7504\u7D79\u7E6D\u80A9\u898B\u8B74\u9063\u9D51\u6289\u6C7A\u6F54\u7D50\u7F3A\u8A23\u517C\u614A\u7B9D\u8B19\u9257\u938C\u4EAC\u4FD3\u501E\u50BE\u5106\u52C1\u52CD\u537F\u5770\u5883\u5E9A\u5F91\u6176\u61AC\u64CE\u656C\u666F\u66BB\u66F4\u6897\u6D87\u7085\u70F1\u749F\u74A5\u74CA\u75D9\u786C\u78EC\u7ADF\u7AF6\u7D45\u7D93\u8015\u803F\u811B\u8396\u8B66\u8F15\u9015\u93E1\u9803\u9838\u9A5A\u9BE8\u4FC2\u5553\u583A\u5951\u5B63\u5C46\u60B8\u6212\u6842\u68B0\uFFFD".split("");
        for (j3 = 0; j3 != D5[204].length; ++j3)
          if (D5[204][j3].charCodeAt(0) !== 65533) {
            e7[D5[204][j3]] = 52224 + j3;
            d2[52224 + j3] = D5[204][j3];
          }
        D5[205] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u68E8\u6EAA\u754C\u7678\u78CE\u7A3D\u7CFB\u7E6B\u7E7C\u8A08\u8AA1\u8C3F\u968E\u9DC4\u53E4\u53E9\u544A\u5471\u56FA\u59D1\u5B64\u5C3B\u5EAB\u62F7\u6537\u6545\u6572\u66A0\u67AF\u69C1\u6CBD\u75FC\u7690\u777E\u7A3F\u7F94\u8003\u80A1\u818F\u82E6\u82FD\u83F0\u85C1\u8831\u88B4\u8AA5\uF903\u8F9C\u932E\u96C7\u9867\u9AD8\u9F13\u54ED\u659B\u66F2\u688F\u7A40\u8C37\u9D60\u56F0\u5764\u5D11\u6606\u68B1\u68CD\u6EFE\u7428\u889E\u9BE4\u6C68\uF904\u9AA8\u4F9B\u516C\u5171\u529F\u5B54\u5DE5\u6050\u606D\u62F1\u63A7\u653B\u73D9\u7A7A\u86A3\u8CA2\u978F\u4E32\u5BE1\u6208\u679C\u74DC\uFFFD".split("");
        for (j3 = 0; j3 != D5[205].length; ++j3)
          if (D5[205][j3].charCodeAt(0) !== 65533) {
            e7[D5[205][j3]] = 52480 + j3;
            d2[52480 + j3] = D5[205][j3];
          }
        D5[206] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u79D1\u83D3\u8A87\u8AB2\u8DE8\u904E\u934B\u9846\u5ED3\u69E8\u85FF\u90ED\uF905\u51A0\u5B98\u5BEC\u6163\u68FA\u6B3E\u704C\u742F\u74D8\u7BA1\u7F50\u83C5\u89C0\u8CAB\u95DC\u9928\u522E\u605D\u62EC\u9002\u4F8A\u5149\u5321\u58D9\u5EE3\u66E0\u6D38\u709A\u72C2\u73D6\u7B50\u80F1\u945B\u5366\u639B\u7F6B\u4E56\u5080\u584A\u58DE\u602A\u6127\u62D0\u69D0\u9B41\u5B8F\u7D18\u80B1\u8F5F\u4EA4\u50D1\u54AC\u55AC\u5B0C\u5DA0\u5DE7\u652A\u654E\u6821\u6A4B\u72E1\u768E\u77EF\u7D5E\u7FF9\u81A0\u854E\u86DF\u8F03\u8F4E\u90CA\u9903\u9A55\u9BAB\u4E18\u4E45\u4E5D\u4EC7\u4FF1\u5177\u52FE\uFFFD".split("");
        for (j3 = 0; j3 != D5[206].length; ++j3)
          if (D5[206][j3].charCodeAt(0) !== 65533) {
            e7[D5[206][j3]] = 52736 + j3;
            d2[52736 + j3] = D5[206][j3];
          }
        D5[207] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u5340\u53E3\u53E5\u548E\u5614\u5775\u57A2\u5BC7\u5D87\u5ED0\u61FC\u62D8\u6551\u67B8\u67E9\u69CB\u6B50\u6BC6\u6BEC\u6C42\u6E9D\u7078\u72D7\u7396\u7403\u77BF\u77E9\u7A76\u7D7F\u8009\u81FC\u8205\u820A\u82DF\u8862\u8B33\u8CFC\u8EC0\u9011\u90B1\u9264\u92B6\u99D2\u9A45\u9CE9\u9DD7\u9F9C\u570B\u5C40\u83CA\u97A0\u97AB\u9EB4\u541B\u7A98\u7FA4\u88D9\u8ECD\u90E1\u5800\u5C48\u6398\u7A9F\u5BAE\u5F13\u7A79\u7AAE\u828E\u8EAC\u5026\u5238\u52F8\u5377\u5708\u62F3\u6372\u6B0A\u6DC3\u7737\u53A5\u7357\u8568\u8E76\u95D5\u673A\u6AC3\u6F70\u8A6D\u8ECC\u994B\uF906\u6677\u6B78\u8CB4\uFFFD".split("");
        for (j3 = 0; j3 != D5[207].length; ++j3)
          if (D5[207][j3].charCodeAt(0) !== 65533) {
            e7[D5[207][j3]] = 52992 + j3;
            d2[52992 + j3] = D5[207][j3];
          }
        D5[208] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u9B3C\uF907\u53EB\u572D\u594E\u63C6\u69FB\u73EA\u7845\u7ABA\u7AC5\u7CFE\u8475\u898F\u8D73\u9035\u95A8\u52FB\u5747\u7547\u7B60\u83CC\u921E\uF908\u6A58\u514B\u524B\u5287\u621F\u68D8\u6975\u9699\u50C5\u52A4\u52E4\u61C3\u65A4\u6839\u69FF\u747E\u7B4B\u82B9\u83EB\u89B2\u8B39\u8FD1\u9949\uF909\u4ECA\u5997\u64D2\u6611\u6A8E\u7434\u7981\u79BD\u82A9\u887E\u887F\u895F\uF90A\u9326\u4F0B\u53CA\u6025\u6271\u6C72\u7D1A\u7D66\u4E98\u5162\u77DC\u80AF\u4F01\u4F0E\u5176\u5180\u55DC\u5668\u573B\u57FA\u57FC\u5914\u5947\u5993\u5BC4\u5C90\u5D0E\u5DF1\u5E7E\u5FCC\u6280\u65D7\u65E3\uFFFD".split("");
        for (j3 = 0; j3 != D5[208].length; ++j3)
          if (D5[208][j3].charCodeAt(0) !== 65533) {
            e7[D5[208][j3]] = 53248 + j3;
            d2[53248 + j3] = D5[208][j3];
          }
        D5[209] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u671E\u671F\u675E\u68CB\u68C4\u6A5F\u6B3A\u6C23\u6C7D\u6C82\u6DC7\u7398\u7426\u742A\u7482\u74A3\u7578\u757F\u7881\u78EF\u7941\u7947\u7948\u797A\u7B95\u7D00\u7DBA\u7F88\u8006\u802D\u808C\u8A18\u8B4F\u8C48\u8D77\u9321\u9324\u98E2\u9951\u9A0E\u9A0F\u9A65\u9E92\u7DCA\u4F76\u5409\u62EE\u6854\u91D1\u55AB\u513A\uF90B\uF90C\u5A1C\u61E6\uF90D\u62CF\u62FF\uF90E\uF90F\uF910\uF911\uF912\uF913\u90A3\uF914\uF915\uF916\uF917\uF918\u8AFE\uF919\uF91A\uF91B\uF91C\u6696\uF91D\u7156\uF91E\uF91F\u96E3\uF920\u634F\u637A\u5357\uF921\u678F\u6960\u6E73\uF922\u7537\uF923\uF924\uF925\uFFFD".split("");
        for (j3 = 0; j3 != D5[209].length; ++j3)
          if (D5[209][j3].charCodeAt(0) !== 65533) {
            e7[D5[209][j3]] = 53504 + j3;
            d2[53504 + j3] = D5[209][j3];
          }
        D5[210] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u7D0D\uF926\uF927\u8872\u56CA\u5A18\uF928\uF929\uF92A\uF92B\uF92C\u4E43\uF92D\u5167\u5948\u67F0\u8010\uF92E\u5973\u5E74\u649A\u79CA\u5FF5\u606C\u62C8\u637B\u5BE7\u5BD7\u52AA\uF92F\u5974\u5F29\u6012\uF930\uF931\uF932\u7459\uF933\uF934\uF935\uF936\uF937\uF938\u99D1\uF939\uF93A\uF93B\uF93C\uF93D\uF93E\uF93F\uF940\uF941\uF942\uF943\u6FC3\uF944\uF945\u81BF\u8FB2\u60F1\uF946\uF947\u8166\uF948\uF949\u5C3F\uF94A\uF94B\uF94C\uF94D\uF94E\uF94F\uF950\uF951\u5AE9\u8A25\u677B\u7D10\uF952\uF953\uF954\uF955\uF956\uF957\u80FD\uF958\uF959\u5C3C\u6CE5\u533F\u6EBA\u591A\u8336\uFFFD".split("");
        for (j3 = 0; j3 != D5[210].length; ++j3)
          if (D5[210][j3].charCodeAt(0) !== 65533) {
            e7[D5[210][j3]] = 53760 + j3;
            d2[53760 + j3] = D5[210][j3];
          }
        D5[211] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u4E39\u4EB6\u4F46\u55AE\u5718\u58C7\u5F56\u65B7\u65E6\u6A80\u6BB5\u6E4D\u77ED\u7AEF\u7C1E\u7DDE\u86CB\u8892\u9132\u935B\u64BB\u6FBE\u737A\u75B8\u9054\u5556\u574D\u61BA\u64D4\u66C7\u6DE1\u6E5B\u6F6D\u6FB9\u75F0\u8043\u81BD\u8541\u8983\u8AC7\u8B5A\u931F\u6C93\u7553\u7B54\u8E0F\u905D\u5510\u5802\u5858\u5E62\u6207\u649E\u68E0\u7576\u7CD6\u87B3\u9EE8\u4EE3\u5788\u576E\u5927\u5C0D\u5CB1\u5E36\u5F85\u6234\u64E1\u73B3\u81FA\u888B\u8CB8\u968A\u9EDB\u5B85\u5FB7\u60B3\u5012\u5200\u5230\u5716\u5835\u5857\u5C0E\u5C60\u5CF6\u5D8B\u5EA6\u5F92\u60BC\u6311\u6389\u6417\u6843\uFFFD".split("");
        for (j3 = 0; j3 != D5[211].length; ++j3)
          if (D5[211][j3].charCodeAt(0) !== 65533) {
            e7[D5[211][j3]] = 54016 + j3;
            d2[54016 + j3] = D5[211][j3];
          }
        D5[212] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u68F9\u6AC2\u6DD8\u6E21\u6ED4\u6FE4\u71FE\u76DC\u7779\u79B1\u7A3B\u8404\u89A9\u8CED\u8DF3\u8E48\u9003\u9014\u9053\u90FD\u934D\u9676\u97DC\u6BD2\u7006\u7258\u72A2\u7368\u7763\u79BF\u7BE4\u7E9B\u8B80\u58A9\u60C7\u6566\u65FD\u66BE\u6C8C\u711E\u71C9\u8C5A\u9813\u4E6D\u7A81\u4EDD\u51AC\u51CD\u52D5\u540C\u61A7\u6771\u6850\u68DF\u6D1E\u6F7C\u75BC\u77B3\u7AE5\u80F4\u8463\u9285\u515C\u6597\u675C\u6793\u75D8\u7AC7\u8373\uF95A\u8C46\u9017\u982D\u5C6F\u81C0\u829A\u9041\u906F\u920D\u5F97\u5D9D\u6A59\u71C8\u767B\u7B49\u85E4\u8B04\u9127\u9A30\u5587\u61F6\uF95B\u7669\u7F85\uFFFD".split("");
        for (j3 = 0; j3 != D5[212].length; ++j3)
          if (D5[212][j3].charCodeAt(0) !== 65533) {
            e7[D5[212][j3]] = 54272 + j3;
            d2[54272 + j3] = D5[212][j3];
          }
        D5[213] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u863F\u87BA\u88F8\u908F\uF95C\u6D1B\u70D9\u73DE\u7D61\u843D\uF95D\u916A\u99F1\uF95E\u4E82\u5375\u6B04\u6B12\u703E\u721B\u862D\u9E1E\u524C\u8FA3\u5D50\u64E5\u652C\u6B16\u6FEB\u7C43\u7E9C\u85CD\u8964\u89BD\u62C9\u81D8\u881F\u5ECA\u6717\u6D6A\u72FC\u7405\u746F\u8782\u90DE\u4F86\u5D0D\u5FA0\u840A\u51B7\u63A0\u7565\u4EAE\u5006\u5169\u51C9\u6881\u6A11\u7CAE\u7CB1\u7CE7\u826F\u8AD2\u8F1B\u91CF\u4FB6\u5137\u52F5\u5442\u5EEC\u616E\u623E\u65C5\u6ADA\u6FFE\u792A\u85DC\u8823\u95AD\u9A62\u9A6A\u9E97\u9ECE\u529B\u66C6\u6B77\u701D\u792B\u8F62\u9742\u6190\u6200\u6523\u6F23\uFFFD".split("");
        for (j3 = 0; j3 != D5[213].length; ++j3)
          if (D5[213][j3].charCodeAt(0) !== 65533) {
            e7[D5[213][j3]] = 54528 + j3;
            d2[54528 + j3] = D5[213][j3];
          }
        D5[214] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u7149\u7489\u7DF4\u806F\u84EE\u8F26\u9023\u934A\u51BD\u5217\u52A3\u6D0C\u70C8\u88C2\u5EC9\u6582\u6BAE\u6FC2\u7C3E\u7375\u4EE4\u4F36\u56F9\uF95F\u5CBA\u5DBA\u601C\u73B2\u7B2D\u7F9A\u7FCE\u8046\u901E\u9234\u96F6\u9748\u9818\u9F61\u4F8B\u6FA7\u79AE\u91B4\u96B7\u52DE\uF960\u6488\u64C4\u6AD3\u6F5E\u7018\u7210\u76E7\u8001\u8606\u865C\u8DEF\u8F05\u9732\u9B6F\u9DFA\u9E75\u788C\u797F\u7DA0\u83C9\u9304\u9E7F\u9E93\u8AD6\u58DF\u5F04\u6727\u7027\u74CF\u7C60\u807E\u5121\u7028\u7262\u78CA\u8CC2\u8CDA\u8CF4\u96F7\u4E86\u50DA\u5BEE\u5ED6\u6599\u71CE\u7642\u77AD\u804A\u84FC\uFFFD".split("");
        for (j3 = 0; j3 != D5[214].length; ++j3)
          if (D5[214][j3].charCodeAt(0) !== 65533) {
            e7[D5[214][j3]] = 54784 + j3;
            d2[54784 + j3] = D5[214][j3];
          }
        D5[215] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u907C\u9B27\u9F8D\u58D8\u5A41\u5C62\u6A13\u6DDA\u6F0F\u763B\u7D2F\u7E37\u851E\u8938\u93E4\u964B\u5289\u65D2\u67F3\u69B4\u6D41\u6E9C\u700F\u7409\u7460\u7559\u7624\u786B\u8B2C\u985E\u516D\u622E\u9678\u4F96\u502B\u5D19\u6DEA\u7DB8\u8F2A\u5F8B\u6144\u6817\uF961\u9686\u52D2\u808B\u51DC\u51CC\u695E\u7A1C\u7DBE\u83F1\u9675\u4FDA\u5229\u5398\u540F\u550E\u5C65\u60A7\u674E\u68A8\u6D6C\u7281\u72F8\u7406\u7483\uF962\u75E2\u7C6C\u7F79\u7FB8\u8389\u88CF\u88E1\u91CC\u91D0\u96E2\u9BC9\u541D\u6F7E\u71D0\u7498\u85FA\u8EAA\u96A3\u9C57\u9E9F\u6797\u6DCB\u7433\u81E8\u9716\u782C\uFFFD".split("");
        for (j3 = 0; j3 != D5[215].length; ++j3)
          if (D5[215][j3].charCodeAt(0) !== 65533) {
            e7[D5[215][j3]] = 55040 + j3;
            d2[55040 + j3] = D5[215][j3];
          }
        D5[216] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u7ACB\u7B20\u7C92\u6469\u746A\u75F2\u78BC\u78E8\u99AC\u9B54\u9EBB\u5BDE\u5E55\u6F20\u819C\u83AB\u9088\u4E07\u534D\u5A29\u5DD2\u5F4E\u6162\u633D\u6669\u66FC\u6EFF\u6F2B\u7063\u779E\u842C\u8513\u883B\u8F13\u9945\u9C3B\u551C\u62B9\u672B\u6CAB\u8309\u896A\u977A\u4EA1\u5984\u5FD8\u5FD9\u671B\u7DB2\u7F54\u8292\u832B\u83BD\u8F1E\u9099\u57CB\u59B9\u5A92\u5BD0\u6627\u679A\u6885\u6BCF\u7164\u7F75\u8CB7\u8CE3\u9081\u9B45\u8108\u8C8A\u964C\u9A40\u9EA5\u5B5F\u6C13\u731B\u76F2\u76DF\u840C\u51AA\u8993\u514D\u5195\u52C9\u68C9\u6C94\u7704\u7720\u7DBF\u7DEC\u9762\u9EB5\u6EC5\uFFFD".split("");
        for (j3 = 0; j3 != D5[216].length; ++j3)
          if (D5[216][j3].charCodeAt(0) !== 65533) {
            e7[D5[216][j3]] = 55296 + j3;
            d2[55296 + j3] = D5[216][j3];
          }
        D5[217] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u8511\u51A5\u540D\u547D\u660E\u669D\u6927\u6E9F\u76BF\u7791\u8317\u84C2\u879F\u9169\u9298\u9CF4\u8882\u4FAE\u5192\u52DF\u59C6\u5E3D\u6155\u6478\u6479\u66AE\u67D0\u6A21\u6BCD\u6BDB\u725F\u7261\u7441\u7738\u77DB\u8017\u82BC\u8305\u8B00\u8B28\u8C8C\u6728\u6C90\u7267\u76EE\u7766\u7A46\u9DA9\u6B7F\u6C92\u5922\u6726\u8499\u536F\u5893\u5999\u5EDF\u63CF\u6634\u6773\u6E3A\u732B\u7AD7\u82D7\u9328\u52D9\u5DEB\u61AE\u61CB\u620A\u62C7\u64AB\u65E0\u6959\u6B66\u6BCB\u7121\u73F7\u755D\u7E46\u821E\u8302\u856A\u8AA3\u8CBF\u9727\u9D61\u58A8\u9ED8\u5011\u520E\u543B\u554F\u6587\uFFFD".split("");
        for (j3 = 0; j3 != D5[217].length; ++j3)
          if (D5[217][j3].charCodeAt(0) !== 65533) {
            e7[D5[217][j3]] = 55552 + j3;
            d2[55552 + j3] = D5[217][j3];
          }
        D5[218] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u6C76\u7D0A\u7D0B\u805E\u868A\u9580\u96EF\u52FF\u6C95\u7269\u5473\u5A9A\u5C3E\u5D4B\u5F4C\u5FAE\u672A\u68B6\u6963\u6E3C\u6E44\u7709\u7C73\u7F8E\u8587\u8B0E\u8FF7\u9761\u9EF4\u5CB7\u60B6\u610D\u61AB\u654F\u65FB\u65FC\u6C11\u6CEF\u739F\u73C9\u7DE1\u9594\u5BC6\u871C\u8B10\u525D\u535A\u62CD\u640F\u64B2\u6734\u6A38\u6CCA\u73C0\u749E\u7B94\u7C95\u7E1B\u818A\u8236\u8584\u8FEB\u96F9\u99C1\u4F34\u534A\u53CD\u53DB\u62CC\u642C\u6500\u6591\u69C3\u6CEE\u6F58\u73ED\u7554\u7622\u76E4\u76FC\u78D0\u78FB\u792C\u7D46\u822C\u87E0\u8FD4\u9812\u98EF\u52C3\u62D4\u64A5\u6E24\u6F51\uFFFD".split("");
        for (j3 = 0; j3 != D5[218].length; ++j3)
          if (D5[218][j3].charCodeAt(0) !== 65533) {
            e7[D5[218][j3]] = 55808 + j3;
            d2[55808 + j3] = D5[218][j3];
          }
        D5[219] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u767C\u8DCB\u91B1\u9262\u9AEE\u9B43\u5023\u508D\u574A\u59A8\u5C28\u5E47\u5F77\u623F\u653E\u65B9\u65C1\u6609\u678B\u699C\u6EC2\u78C5\u7D21\u80AA\u8180\u822B\u82B3\u84A1\u868C\u8A2A\u8B17\u90A6\u9632\u9F90\u500D\u4FF3\uF963\u57F9\u5F98\u62DC\u6392\u676F\u6E43\u7119\u76C3\u80CC\u80DA\u88F4\u88F5\u8919\u8CE0\u8F29\u914D\u966A\u4F2F\u4F70\u5E1B\u67CF\u6822\u767D\u767E\u9B44\u5E61\u6A0A\u7169\u71D4\u756A\uF964\u7E41\u8543\u85E9\u98DC\u4F10\u7B4F\u7F70\u95A5\u51E1\u5E06\u68B5\u6C3E\u6C4E\u6CDB\u72AF\u7BC4\u8303\u6CD5\u743A\u50FB\u5288\u58C1\u64D8\u6A97\u74A7\u7656\uFFFD".split("");
        for (j3 = 0; j3 != D5[219].length; ++j3)
          if (D5[219][j3].charCodeAt(0) !== 65533) {
            e7[D5[219][j3]] = 56064 + j3;
            d2[56064 + j3] = D5[219][j3];
          }
        D5[220] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u78A7\u8617\u95E2\u9739\uF965\u535E\u5F01\u8B8A\u8FA8\u8FAF\u908A\u5225\u77A5\u9C49\u9F08\u4E19\u5002\u5175\u5C5B\u5E77\u661E\u663A\u67C4\u68C5\u70B3\u7501\u75C5\u79C9\u7ADD\u8F27\u9920\u9A08\u4FDD\u5821\u5831\u5BF6\u666E\u6B65\u6D11\u6E7A\u6F7D\u73E4\u752B\u83E9\u88DC\u8913\u8B5C\u8F14\u4F0F\u50D5\u5310\u535C\u5B93\u5FA9\u670D\u798F\u8179\u832F\u8514\u8907\u8986\u8F39\u8F3B\u99A5\u9C12\u672C\u4E76\u4FF8\u5949\u5C01\u5CEF\u5CF0\u6367\u68D2\u70FD\u71A2\u742B\u7E2B\u84EC\u8702\u9022\u92D2\u9CF3\u4E0D\u4ED8\u4FEF\u5085\u5256\u526F\u5426\u5490\u57E0\u592B\u5A66\uFFFD".split("");
        for (j3 = 0; j3 != D5[220].length; ++j3)
          if (D5[220][j3].charCodeAt(0) !== 65533) {
            e7[D5[220][j3]] = 56320 + j3;
            d2[56320 + j3] = D5[220][j3];
          }
        D5[221] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u5B5A\u5B75\u5BCC\u5E9C\uF966\u6276\u6577\u65A7\u6D6E\u6EA5\u7236\u7B26\u7C3F\u7F36\u8150\u8151\u819A\u8240\u8299\u83A9\u8A03\u8CA0\u8CE6\u8CFB\u8D74\u8DBA\u90E8\u91DC\u961C\u9644\u99D9\u9CE7\u5317\u5206\u5429\u5674\u58B3\u5954\u596E\u5FFF\u61A4\u626E\u6610\u6C7E\u711A\u76C6\u7C89\u7CDE\u7D1B\u82AC\u8CC1\u96F0\uF967\u4F5B\u5F17\u5F7F\u62C2\u5D29\u670B\u68DA\u787C\u7E43\u9D6C\u4E15\u5099\u5315\u532A\u5351\u5983\u5A62\u5E87\u60B2\u618A\u6249\u6279\u6590\u6787\u69A7\u6BD4\u6BD6\u6BD7\u6BD8\u6CB8\uF968\u7435\u75FA\u7812\u7891\u79D5\u79D8\u7C83\u7DCB\u7FE1\u80A5\uFFFD".split("");
        for (j3 = 0; j3 != D5[221].length; ++j3)
          if (D5[221][j3].charCodeAt(0) !== 65533) {
            e7[D5[221][j3]] = 56576 + j3;
            d2[56576 + j3] = D5[221][j3];
          }
        D5[222] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u813E\u81C2\u83F2\u871A\u88E8\u8AB9\u8B6C\u8CBB\u9119\u975E\u98DB\u9F3B\u56AC\u5B2A\u5F6C\u658C\u6AB3\u6BAF\u6D5C\u6FF1\u7015\u725D\u73AD\u8CA7\u8CD3\u983B\u6191\u6C37\u8058\u9A01\u4E4D\u4E8B\u4E9B\u4ED5\u4F3A\u4F3C\u4F7F\u4FDF\u50FF\u53F2\u53F8\u5506\u55E3\u56DB\u58EB\u5962\u5A11\u5BEB\u5BFA\u5C04\u5DF3\u5E2B\u5F99\u601D\u6368\u659C\u65AF\u67F6\u67FB\u68AD\u6B7B\u6C99\u6CD7\u6E23\u7009\u7345\u7802\u793E\u7940\u7960\u79C1\u7BE9\u7D17\u7D72\u8086\u820D\u838E\u84D1\u86C7\u88DF\u8A50\u8A5E\u8B1D\u8CDC\u8D66\u8FAD\u90AA\u98FC\u99DF\u9E9D\u524A\uF969\u6714\uF96A\uFFFD".split("");
        for (j3 = 0; j3 != D5[222].length; ++j3)
          if (D5[222][j3].charCodeAt(0) !== 65533) {
            e7[D5[222][j3]] = 56832 + j3;
            d2[56832 + j3] = D5[222][j3];
          }
        D5[223] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u5098\u522A\u5C71\u6563\u6C55\u73CA\u7523\u759D\u7B97\u849C\u9178\u9730\u4E77\u6492\u6BBA\u715E\u85A9\u4E09\uF96B\u6749\u68EE\u6E17\u829F\u8518\u886B\u63F7\u6F81\u9212\u98AF\u4E0A\u50B7\u50CF\u511F\u5546\u55AA\u5617\u5B40\u5C19\u5CE0\u5E38\u5E8A\u5EA0\u5EC2\u60F3\u6851\u6A61\u6E58\u723D\u7240\u72C0\u76F8\u7965\u7BB1\u7FD4\u88F3\u89F4\u8A73\u8C61\u8CDE\u971C\u585E\u74BD\u8CFD\u55C7\uF96C\u7A61\u7D22\u8272\u7272\u751F\u7525\uF96D\u7B19\u5885\u58FB\u5DBC\u5E8F\u5EB6\u5F90\u6055\u6292\u637F\u654D\u6691\u66D9\u66F8\u6816\u68F2\u7280\u745E\u7B6E\u7D6E\u7DD6\u7F72\uFFFD".split("");
        for (j3 = 0; j3 != D5[223].length; ++j3)
          if (D5[223][j3].charCodeAt(0) !== 65533) {
            e7[D5[223][j3]] = 57088 + j3;
            d2[57088 + j3] = D5[223][j3];
          }
        D5[224] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u80E5\u8212\u85AF\u897F\u8A93\u901D\u92E4\u9ECD\u9F20\u5915\u596D\u5E2D\u60DC\u6614\u6673\u6790\u6C50\u6DC5\u6F5F\u77F3\u78A9\u84C6\u91CB\u932B\u4ED9\u50CA\u5148\u5584\u5B0B\u5BA3\u6247\u657E\u65CB\u6E32\u717D\u7401\u7444\u7487\u74BF\u766C\u79AA\u7DDA\u7E55\u7FA8\u817A\u81B3\u8239\u861A\u87EC\u8A75\u8DE3\u9078\u9291\u9425\u994D\u9BAE\u5368\u5C51\u6954\u6CC4\u6D29\u6E2B\u820C\u859B\u893B\u8A2D\u8AAA\u96EA\u9F67\u5261\u66B9\u6BB2\u7E96\u87FE\u8D0D\u9583\u965D\u651D\u6D89\u71EE\uF96E\u57CE\u59D3\u5BAC\u6027\u60FA\u6210\u661F\u665F\u7329\u73F9\u76DB\u7701\u7B6C\uFFFD".split("");
        for (j3 = 0; j3 != D5[224].length; ++j3)
          if (D5[224][j3].charCodeAt(0) !== 65533) {
            e7[D5[224][j3]] = 57344 + j3;
            d2[57344 + j3] = D5[224][j3];
          }
        D5[225] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u8056\u8072\u8165\u8AA0\u9192\u4E16\u52E2\u6B72\u6D17\u7A05\u7B39\u7D30\uF96F\u8CB0\u53EC\u562F\u5851\u5BB5\u5C0F\u5C11\u5DE2\u6240\u6383\u6414\u662D\u68B3\u6CBC\u6D88\u6EAF\u701F\u70A4\u71D2\u7526\u758F\u758E\u7619\u7B11\u7BE0\u7C2B\u7D20\u7D39\u852C\u856D\u8607\u8A34\u900D\u9061\u90B5\u92B7\u97F6\u9A37\u4FD7\u5C6C\u675F\u6D91\u7C9F\u7E8C\u8B16\u8D16\u901F\u5B6B\u5DFD\u640D\u84C0\u905C\u98E1\u7387\u5B8B\u609A\u677E\u6DDE\u8A1F\u8AA6\u9001\u980C\u5237\uF970\u7051\u788E\u9396\u8870\u91D7\u4FEE\u53D7\u55FD\u56DA\u5782\u58FD\u5AC2\u5B88\u5CAB\u5CC0\u5E25\u6101\uFFFD".split("");
        for (j3 = 0; j3 != D5[225].length; ++j3)
          if (D5[225][j3].charCodeAt(0) !== 65533) {
            e7[D5[225][j3]] = 57600 + j3;
            d2[57600 + j3] = D5[225][j3];
          }
        D5[226] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u620D\u624B\u6388\u641C\u6536\u6578\u6A39\u6B8A\u6C34\u6D19\u6F31\u71E7\u72E9\u7378\u7407\u74B2\u7626\u7761\u79C0\u7A57\u7AEA\u7CB9\u7D8F\u7DAC\u7E61\u7F9E\u8129\u8331\u8490\u84DA\u85EA\u8896\u8AB0\u8B90\u8F38\u9042\u9083\u916C\u9296\u92B9\u968B\u96A7\u96A8\u96D6\u9700\u9808\u9996\u9AD3\u9B1A\u53D4\u587E\u5919\u5B70\u5BBF\u6DD1\u6F5A\u719F\u7421\u74B9\u8085\u83FD\u5DE1\u5F87\u5FAA\u6042\u65EC\u6812\u696F\u6A53\u6B89\u6D35\u6DF3\u73E3\u76FE\u77AC\u7B4D\u7D14\u8123\u821C\u8340\u84F4\u8563\u8A62\u8AC4\u9187\u931E\u9806\u99B4\u620C\u8853\u8FF0\u9265\u5D07\u5D27\uFFFD".split("");
        for (j3 = 0; j3 != D5[226].length; ++j3)
          if (D5[226][j3].charCodeAt(0) !== 65533) {
            e7[D5[226][j3]] = 57856 + j3;
            d2[57856 + j3] = D5[226][j3];
          }
        D5[227] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u5D69\u745F\u819D\u8768\u6FD5\u62FE\u7FD2\u8936\u8972\u4E1E\u4E58\u50E7\u52DD\u5347\u627F\u6607\u7E69\u8805\u965E\u4F8D\u5319\u5636\u59CB\u5AA4\u5C38\u5C4E\u5C4D\u5E02\u5F11\u6043\u65BD\u662F\u6642\u67BE\u67F4\u731C\u77E2\u793A\u7FC5\u8494\u84CD\u8996\u8A66\u8A69\u8AE1\u8C55\u8C7A\u57F4\u5BD4\u5F0F\u606F\u62ED\u690D\u6B96\u6E5C\u7184\u7BD2\u8755\u8B58\u8EFE\u98DF\u98FE\u4F38\u4F81\u4FE1\u547B\u5A20\u5BB8\u613C\u65B0\u6668\u71FC\u7533\u795E\u7D33\u814E\u81E3\u8398\u85AA\u85CE\u8703\u8A0A\u8EAB\u8F9B\uF971\u8FC5\u5931\u5BA4\u5BE6\u6089\u5BE9\u5C0B\u5FC3\u6C81\uFFFD".split("");
        for (j3 = 0; j3 != D5[227].length; ++j3)
          if (D5[227][j3].charCodeAt(0) !== 65533) {
            e7[D5[227][j3]] = 58112 + j3;
            d2[58112 + j3] = D5[227][j3];
          }
        D5[228] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uF972\u6DF1\u700B\u751A\u82AF\u8AF6\u4EC0\u5341\uF973\u96D9\u6C0F\u4E9E\u4FC4\u5152\u555E\u5A25\u5CE8\u6211\u7259\u82BD\u83AA\u86FE\u8859\u8A1D\u963F\u96C5\u9913\u9D09\u9D5D\u580A\u5CB3\u5DBD\u5E44\u60E1\u6115\u63E1\u6A02\u6E25\u9102\u9354\u984E\u9C10\u9F77\u5B89\u5CB8\u6309\u664F\u6848\u773C\u96C1\u978D\u9854\u9B9F\u65A1\u8B01\u8ECB\u95BC\u5535\u5CA9\u5DD6\u5EB5\u6697\u764C\u83F4\u95C7\u58D3\u62BC\u72CE\u9D28\u4EF0\u592E\u600F\u663B\u6B83\u79E7\u9D26\u5393\u54C0\u57C3\u5D16\u611B\u66D6\u6DAF\u788D\u827E\u9698\u9744\u5384\u627C\u6396\u6DB2\u7E0A\u814B\u984D\uFFFD".split("");
        for (j3 = 0; j3 != D5[228].length; ++j3)
          if (D5[228][j3].charCodeAt(0) !== 65533) {
            e7[D5[228][j3]] = 58368 + j3;
            d2[58368 + j3] = D5[228][j3];
          }
        D5[229] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u6AFB\u7F4C\u9DAF\u9E1A\u4E5F\u503B\u51B6\u591C\u60F9\u63F6\u6930\u723A\u8036\uF974\u91CE\u5F31\uF975\uF976\u7D04\u82E5\u846F\u84BB\u85E5\u8E8D\uF977\u4F6F\uF978\uF979\u58E4\u5B43\u6059\u63DA\u6518\u656D\u6698\uF97A\u694A\u6A23\u6D0B\u7001\u716C\u75D2\u760D\u79B3\u7A70\uF97B\u7F8A\uF97C\u8944\uF97D\u8B93\u91C0\u967D\uF97E\u990A\u5704\u5FA1\u65BC\u6F01\u7600\u79A6\u8A9E\u99AD\u9B5A\u9F6C\u5104\u61B6\u6291\u6A8D\u81C6\u5043\u5830\u5F66\u7109\u8A00\u8AFA\u5B7C\u8616\u4FFA\u513C\u56B4\u5944\u63A9\u6DF9\u5DAA\u696D\u5186\u4E88\u4F59\uF97F\uF980\uF981\u5982\uF982\uFFFD".split("");
        for (j3 = 0; j3 != D5[229].length; ++j3)
          if (D5[229][j3].charCodeAt(0) !== 65533) {
            e7[D5[229][j3]] = 58624 + j3;
            d2[58624 + j3] = D5[229][j3];
          }
        D5[230] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uF983\u6B5F\u6C5D\uF984\u74B5\u7916\uF985\u8207\u8245\u8339\u8F3F\u8F5D\uF986\u9918\uF987\uF988\uF989\u4EA6\uF98A\u57DF\u5F79\u6613\uF98B\uF98C\u75AB\u7E79\u8B6F\uF98D\u9006\u9A5B\u56A5\u5827\u59F8\u5A1F\u5BB4\uF98E\u5EF6\uF98F\uF990\u6350\u633B\uF991\u693D\u6C87\u6CBF\u6D8E\u6D93\u6DF5\u6F14\uF992\u70DF\u7136\u7159\uF993\u71C3\u71D5\uF994\u784F\u786F\uF995\u7B75\u7DE3\uF996\u7E2F\uF997\u884D\u8EDF\uF998\uF999\uF99A\u925B\uF99B\u9CF6\uF99C\uF99D\uF99E\u6085\u6D85\uF99F\u71B1\uF9A0\uF9A1\u95B1\u53AD\uF9A2\uF9A3\uF9A4\u67D3\uF9A5\u708E\u7130\u7430\u8276\u82D2\uFFFD".split("");
        for (j3 = 0; j3 != D5[230].length; ++j3)
          if (D5[230][j3].charCodeAt(0) !== 65533) {
            e7[D5[230][j3]] = 58880 + j3;
            d2[58880 + j3] = D5[230][j3];
          }
        D5[231] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uF9A6\u95BB\u9AE5\u9E7D\u66C4\uF9A7\u71C1\u8449\uF9A8\uF9A9\u584B\uF9AA\uF9AB\u5DB8\u5F71\uF9AC\u6620\u668E\u6979\u69AE\u6C38\u6CF3\u6E36\u6F41\u6FDA\u701B\u702F\u7150\u71DF\u7370\uF9AD\u745B\uF9AE\u74D4\u76C8\u7A4E\u7E93\uF9AF\uF9B0\u82F1\u8A60\u8FCE\uF9B1\u9348\uF9B2\u9719\uF9B3\uF9B4\u4E42\u502A\uF9B5\u5208\u53E1\u66F3\u6C6D\u6FCA\u730A\u777F\u7A62\u82AE\u85DD\u8602\uF9B6\u88D4\u8A63\u8B7D\u8C6B\uF9B7\u92B3\uF9B8\u9713\u9810\u4E94\u4F0D\u4FC9\u50B2\u5348\u543E\u5433\u55DA\u5862\u58BA\u5967\u5A1B\u5BE4\u609F\uF9B9\u61CA\u6556\u65FF\u6664\u68A7\u6C5A\u6FB3\uFFFD".split("");
        for (j3 = 0; j3 != D5[231].length; ++j3)
          if (D5[231][j3].charCodeAt(0) !== 65533) {
            e7[D5[231][j3]] = 59136 + j3;
            d2[59136 + j3] = D5[231][j3];
          }
        D5[232] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u70CF\u71AC\u7352\u7B7D\u8708\u8AA4\u9C32\u9F07\u5C4B\u6C83\u7344\u7389\u923A\u6EAB\u7465\u761F\u7A69\u7E15\u860A\u5140\u58C5\u64C1\u74EE\u7515\u7670\u7FC1\u9095\u96CD\u9954\u6E26\u74E6\u7AA9\u7AAA\u81E5\u86D9\u8778\u8A1B\u5A49\u5B8C\u5B9B\u68A1\u6900\u6D63\u73A9\u7413\u742C\u7897\u7DE9\u7FEB\u8118\u8155\u839E\u8C4C\u962E\u9811\u66F0\u5F80\u65FA\u6789\u6C6A\u738B\u502D\u5A03\u6B6A\u77EE\u5916\u5D6C\u5DCD\u7325\u754F\uF9BA\uF9BB\u50E5\u51F9\u582F\u592D\u5996\u59DA\u5BE5\uF9BC\uF9BD\u5DA2\u62D7\u6416\u6493\u64FE\uF9BE\u66DC\uF9BF\u6A48\uF9C0\u71FF\u7464\uF9C1\uFFFD".split("");
        for (j3 = 0; j3 != D5[232].length; ++j3)
          if (D5[232][j3].charCodeAt(0) !== 65533) {
            e7[D5[232][j3]] = 59392 + j3;
            d2[59392 + j3] = D5[232][j3];
          }
        D5[233] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u7A88\u7AAF\u7E47\u7E5E\u8000\u8170\uF9C2\u87EF\u8981\u8B20\u9059\uF9C3\u9080\u9952\u617E\u6B32\u6D74\u7E1F\u8925\u8FB1\u4FD1\u50AD\u5197\u52C7\u57C7\u5889\u5BB9\u5EB8\u6142\u6995\u6D8C\u6E67\u6EB6\u7194\u7462\u7528\u752C\u8073\u8338\u84C9\u8E0A\u9394\u93DE\uF9C4\u4E8E\u4F51\u5076\u512A\u53C8\u53CB\u53F3\u5B87\u5BD3\u5C24\u611A\u6182\u65F4\u725B\u7397\u7440\u76C2\u7950\u7991\u79B9\u7D06\u7FBD\u828B\u85D5\u865E\u8FC2\u9047\u90F5\u91EA\u9685\u96E8\u96E9\u52D6\u5F67\u65ED\u6631\u682F\u715C\u7A36\u90C1\u980A\u4E91\uF9C5\u6A52\u6B9E\u6F90\u7189\u8018\u82B8\u8553\uFFFD".split("");
        for (j3 = 0; j3 != D5[233].length; ++j3)
          if (D5[233][j3].charCodeAt(0) !== 65533) {
            e7[D5[233][j3]] = 59648 + j3;
            d2[59648 + j3] = D5[233][j3];
          }
        D5[234] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u904B\u9695\u96F2\u97FB\u851A\u9B31\u4E90\u718A\u96C4\u5143\u539F\u54E1\u5713\u5712\u57A3\u5A9B\u5AC4\u5BC3\u6028\u613F\u63F4\u6C85\u6D39\u6E72\u6E90\u7230\u733F\u7457\u82D1\u8881\u8F45\u9060\uF9C6\u9662\u9858\u9D1B\u6708\u8D8A\u925E\u4F4D\u5049\u50DE\u5371\u570D\u59D4\u5A01\u5C09\u6170\u6690\u6E2D\u7232\u744B\u7DEF\u80C3\u840E\u8466\u853F\u875F\u885B\u8918\u8B02\u9055\u97CB\u9B4F\u4E73\u4F91\u5112\u516A\uF9C7\u552F\u55A9\u5B7A\u5BA5\u5E7C\u5E7D\u5EBE\u60A0\u60DF\u6108\u6109\u63C4\u6538\u6709\uF9C8\u67D4\u67DA\uF9C9\u6961\u6962\u6CB9\u6D27\uF9CA\u6E38\uF9CB\uFFFD".split("");
        for (j3 = 0; j3 != D5[234].length; ++j3)
          if (D5[234][j3].charCodeAt(0) !== 65533) {
            e7[D5[234][j3]] = 59904 + j3;
            d2[59904 + j3] = D5[234][j3];
          }
        D5[235] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u6FE1\u7336\u7337\uF9CC\u745C\u7531\uF9CD\u7652\uF9CE\uF9CF\u7DAD\u81FE\u8438\u88D5\u8A98\u8ADB\u8AED\u8E30\u8E42\u904A\u903E\u907A\u9149\u91C9\u936E\uF9D0\uF9D1\u5809\uF9D2\u6BD3\u8089\u80B2\uF9D3\uF9D4\u5141\u596B\u5C39\uF9D5\uF9D6\u6F64\u73A7\u80E4\u8D07\uF9D7\u9217\u958F\uF9D8\uF9D9\uF9DA\uF9DB\u807F\u620E\u701C\u7D68\u878D\uF9DC\u57A0\u6069\u6147\u6BB7\u8ABE\u9280\u96B1\u4E59\u541F\u6DEB\u852D\u9670\u97F3\u98EE\u63D6\u6CE3\u9091\u51DD\u61C9\u81BA\u9DF9\u4F9D\u501A\u5100\u5B9C\u610F\u61FF\u64EC\u6905\u6BC5\u7591\u77E3\u7FA9\u8264\u858F\u87FB\u8863\u8ABC\uFFFD".split("");
        for (j3 = 0; j3 != D5[235].length; ++j3)
          if (D5[235][j3].charCodeAt(0) !== 65533) {
            e7[D5[235][j3]] = 60160 + j3;
            d2[60160 + j3] = D5[235][j3];
          }
        D5[236] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u8B70\u91AB\u4E8C\u4EE5\u4F0A\uF9DD\uF9DE\u5937\u59E8\uF9DF\u5DF2\u5F1B\u5F5B\u6021\uF9E0\uF9E1\uF9E2\uF9E3\u723E\u73E5\uF9E4\u7570\u75CD\uF9E5\u79FB\uF9E6\u800C\u8033\u8084\u82E1\u8351\uF9E7\uF9E8\u8CBD\u8CB3\u9087\uF9E9\uF9EA\u98F4\u990C\uF9EB\uF9EC\u7037\u76CA\u7FCA\u7FCC\u7FFC\u8B1A\u4EBA\u4EC1\u5203\u5370\uF9ED\u54BD\u56E0\u59FB\u5BC5\u5F15\u5FCD\u6E6E\uF9EE\uF9EF\u7D6A\u8335\uF9F0\u8693\u8A8D\uF9F1\u976D\u9777\uF9F2\uF9F3\u4E00\u4F5A\u4F7E\u58F9\u65E5\u6EA2\u9038\u93B0\u99B9\u4EFB\u58EC\u598A\u59D9\u6041\uF9F4\uF9F5\u7A14\uF9F6\u834F\u8CC3\u5165\u5344\uFFFD".split("");
        for (j3 = 0; j3 != D5[236].length; ++j3)
          if (D5[236][j3].charCodeAt(0) !== 65533) {
            e7[D5[236][j3]] = 60416 + j3;
            d2[60416 + j3] = D5[236][j3];
          }
        D5[237] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uF9F7\uF9F8\uF9F9\u4ECD\u5269\u5B55\u82BF\u4ED4\u523A\u54A8\u59C9\u59FF\u5B50\u5B57\u5B5C\u6063\u6148\u6ECB\u7099\u716E\u7386\u74F7\u75B5\u78C1\u7D2B\u8005\u81EA\u8328\u8517\u85C9\u8AEE\u8CC7\u96CC\u4F5C\u52FA\u56BC\u65AB\u6628\u707C\u70B8\u7235\u7DBD\u828D\u914C\u96C0\u9D72\u5B71\u68E7\u6B98\u6F7A\u76DE\u5C91\u66AB\u6F5B\u7BB4\u7C2A\u8836\u96DC\u4E08\u4ED7\u5320\u5834\u58BB\u58EF\u596C\u5C07\u5E33\u5E84\u5F35\u638C\u66B2\u6756\u6A1F\u6AA3\u6B0C\u6F3F\u7246\uF9FA\u7350\u748B\u7AE0\u7CA7\u8178\u81DF\u81E7\u838A\u846C\u8523\u8594\u85CF\u88DD\u8D13\u91AC\u9577\uFFFD".split("");
        for (j3 = 0; j3 != D5[237].length; ++j3)
          if (D5[237][j3].charCodeAt(0) !== 65533) {
            e7[D5[237][j3]] = 60672 + j3;
            d2[60672 + j3] = D5[237][j3];
          }
        D5[238] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u969C\u518D\u54C9\u5728\u5BB0\u624D\u6750\u683D\u6893\u6E3D\u6ED3\u707D\u7E21\u88C1\u8CA1\u8F09\u9F4B\u9F4E\u722D\u7B8F\u8ACD\u931A\u4F47\u4F4E\u5132\u5480\u59D0\u5E95\u62B5\u6775\u696E\u6A17\u6CAE\u6E1A\u72D9\u732A\u75BD\u7BB8\u7D35\u82E7\u83F9\u8457\u85F7\u8A5B\u8CAF\u8E87\u9019\u90B8\u96CE\u9F5F\u52E3\u540A\u5AE1\u5BC2\u6458\u6575\u6EF4\u72C4\uF9FB\u7684\u7A4D\u7B1B\u7C4D\u7E3E\u7FDF\u837B\u8B2B\u8CCA\u8D64\u8DE1\u8E5F\u8FEA\u8FF9\u9069\u93D1\u4F43\u4F7A\u50B3\u5168\u5178\u524D\u526A\u5861\u587C\u5960\u5C08\u5C55\u5EDB\u609B\u6230\u6813\u6BBF\u6C08\u6FB1\uFFFD".split("");
        for (j3 = 0; j3 != D5[238].length; ++j3)
          if (D5[238][j3].charCodeAt(0) !== 65533) {
            e7[D5[238][j3]] = 60928 + j3;
            d2[60928 + j3] = D5[238][j3];
          }
        D5[239] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u714E\u7420\u7530\u7538\u7551\u7672\u7B4C\u7B8B\u7BAD\u7BC6\u7E8F\u8A6E\u8F3E\u8F49\u923F\u9293\u9322\u942B\u96FB\u985A\u986B\u991E\u5207\u622A\u6298\u6D59\u7664\u7ACA\u7BC0\u7D76\u5360\u5CBE\u5E97\u6F38\u70B9\u7C98\u9711\u9B8E\u9EDE\u63A5\u647A\u8776\u4E01\u4E95\u4EAD\u505C\u5075\u5448\u59C3\u5B9A\u5E40\u5EAD\u5EF7\u5F81\u60C5\u633A\u653F\u6574\u65CC\u6676\u6678\u67FE\u6968\u6A89\u6B63\u6C40\u6DC0\u6DE8\u6E1F\u6E5E\u701E\u70A1\u738E\u73FD\u753A\u775B\u7887\u798E\u7A0B\u7A7D\u7CBE\u7D8E\u8247\u8A02\u8AEA\u8C9E\u912D\u914A\u91D8\u9266\u92CC\u9320\u9706\u9756\uFFFD".split("");
        for (j3 = 0; j3 != D5[239].length; ++j3)
          if (D5[239][j3].charCodeAt(0) !== 65533) {
            e7[D5[239][j3]] = 61184 + j3;
            d2[61184 + j3] = D5[239][j3];
          }
        D5[240] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u975C\u9802\u9F0E\u5236\u5291\u557C\u5824\u5E1D\u5F1F\u608C\u63D0\u68AF\u6FDF\u796D\u7B2C\u81CD\u85BA\u88FD\u8AF8\u8E44\u918D\u9664\u969B\u973D\u984C\u9F4A\u4FCE\u5146\u51CB\u52A9\u5632\u5F14\u5F6B\u63AA\u64CD\u65E9\u6641\u66FA\u66F9\u671D\u689D\u68D7\u69FD\u6F15\u6F6E\u7167\u71E5\u722A\u74AA\u773A\u7956\u795A\u79DF\u7A20\u7A95\u7C97\u7CDF\u7D44\u7E70\u8087\u85FB\u86A4\u8A54\u8ABF\u8D99\u8E81\u9020\u906D\u91E3\u963B\u96D5\u9CE5\u65CF\u7C07\u8DB3\u93C3\u5B58\u5C0A\u5352\u62D9\u731D\u5027\u5B97\u5F9E\u60B0\u616B\u68D5\u6DD9\u742E\u7A2E\u7D42\u7D9C\u7E31\u816B\uFFFD".split("");
        for (j3 = 0; j3 != D5[240].length; ++j3)
          if (D5[240][j3].charCodeAt(0) !== 65533) {
            e7[D5[240][j3]] = 61440 + j3;
            d2[61440 + j3] = D5[240][j3];
          }
        D5[241] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u8E2A\u8E35\u937E\u9418\u4F50\u5750\u5DE6\u5EA7\u632B\u7F6A\u4E3B\u4F4F\u4F8F\u505A\u59DD\u80C4\u546A\u5468\u55FE\u594F\u5B99\u5DDE\u5EDA\u665D\u6731\u67F1\u682A\u6CE8\u6D32\u6E4A\u6F8D\u70B7\u73E0\u7587\u7C4C\u7D02\u7D2C\u7DA2\u821F\u86DB\u8A3B\u8A85\u8D70\u8E8A\u8F33\u9031\u914E\u9152\u9444\u99D0\u7AF9\u7CA5\u4FCA\u5101\u51C6\u57C8\u5BEF\u5CFB\u6659\u6A3D\u6D5A\u6E96\u6FEC\u710C\u756F\u7AE3\u8822\u9021\u9075\u96CB\u99FF\u8301\u4E2D\u4EF2\u8846\u91CD\u537D\u6ADB\u696B\u6C41\u847A\u589E\u618E\u66FE\u62EF\u70DD\u7511\u75C7\u7E52\u84B8\u8B49\u8D08\u4E4B\u53EA\uFFFD".split("");
        for (j3 = 0; j3 != D5[241].length; ++j3)
          if (D5[241][j3].charCodeAt(0) !== 65533) {
            e7[D5[241][j3]] = 61696 + j3;
            d2[61696 + j3] = D5[241][j3];
          }
        D5[242] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u54AB\u5730\u5740\u5FD7\u6301\u6307\u646F\u652F\u65E8\u667A\u679D\u67B3\u6B62\u6C60\u6C9A\u6F2C\u77E5\u7825\u7949\u7957\u7D19\u80A2\u8102\u81F3\u829D\u82B7\u8718\u8A8C\uF9FC\u8D04\u8DBE\u9072\u76F4\u7A19\u7A37\u7E54\u8077\u5507\u55D4\u5875\u632F\u6422\u6649\u664B\u686D\u699B\u6B84\u6D25\u6EB1\u73CD\u7468\u74A1\u755B\u75B9\u76E1\u771E\u778B\u79E6\u7E09\u7E1D\u81FB\u852F\u8897\u8A3A\u8CD1\u8EEB\u8FB0\u9032\u93AD\u9663\u9673\u9707\u4F84\u53F1\u59EA\u5AC9\u5E19\u684E\u74C6\u75BE\u79E9\u7A92\u81A3\u86ED\u8CEA\u8DCC\u8FED\u659F\u6715\uF9FD\u57F7\u6F57\u7DDD\u8F2F\uFFFD".split("");
        for (j3 = 0; j3 != D5[242].length; ++j3)
          if (D5[242][j3].charCodeAt(0) !== 65533) {
            e7[D5[242][j3]] = 61952 + j3;
            d2[61952 + j3] = D5[242][j3];
          }
        D5[243] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u93F6\u96C6\u5FB5\u61F2\u6F84\u4E14\u4F98\u501F\u53C9\u55DF\u5D6F\u5DEE\u6B21\u6B64\u78CB\u7B9A\uF9FE\u8E49\u8ECA\u906E\u6349\u643E\u7740\u7A84\u932F\u947F\u9F6A\u64B0\u6FAF\u71E6\u74A8\u74DA\u7AC4\u7C12\u7E82\u7CB2\u7E98\u8B9A\u8D0A\u947D\u9910\u994C\u5239\u5BDF\u64E6\u672D\u7D2E\u50ED\u53C3\u5879\u6158\u6159\u61FA\u65AC\u7AD9\u8B92\u8B96\u5009\u5021\u5275\u5531\u5A3C\u5EE0\u5F70\u6134\u655E\u660C\u6636\u66A2\u69CD\u6EC4\u6F32\u7316\u7621\u7A93\u8139\u8259\u83D6\u84BC\u50B5\u57F0\u5BC0\u5BE8\u5F69\u63A1\u7826\u7DB5\u83DC\u8521\u91C7\u91F5\u518A\u67F5\u7B56\uFFFD".split("");
        for (j3 = 0; j3 != D5[243].length; ++j3)
          if (D5[243][j3].charCodeAt(0) !== 65533) {
            e7[D5[243][j3]] = 62208 + j3;
            d2[62208 + j3] = D5[243][j3];
          }
        D5[244] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u8CAC\u51C4\u59BB\u60BD\u8655\u501C\uF9FF\u5254\u5C3A\u617D\u621A\u62D3\u64F2\u65A5\u6ECC\u7620\u810A\u8E60\u965F\u96BB\u4EDF\u5343\u5598\u5929\u5DDD\u64C5\u6CC9\u6DFA\u7394\u7A7F\u821B\u85A6\u8CE4\u8E10\u9077\u91E7\u95E1\u9621\u97C6\u51F8\u54F2\u5586\u5FB9\u64A4\u6F88\u7DB4\u8F1F\u8F4D\u9435\u50C9\u5C16\u6CBE\u6DFB\u751B\u77BB\u7C3D\u7C64\u8A79\u8AC2\u581E\u59BE\u5E16\u6377\u7252\u758A\u776B\u8ADC\u8CBC\u8F12\u5EF3\u6674\u6DF8\u807D\u83C1\u8ACB\u9751\u9BD6\uFA00\u5243\u66FF\u6D95\u6EEF\u7DE0\u8AE6\u902E\u905E\u9AD4\u521D\u527F\u54E8\u6194\u6284\u62DB\u68A2\uFFFD".split("");
        for (j3 = 0; j3 != D5[244].length; ++j3)
          if (D5[244][j3].charCodeAt(0) !== 65533) {
            e7[D5[244][j3]] = 62464 + j3;
            d2[62464 + j3] = D5[244][j3];
          }
        D5[245] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u6912\u695A\u6A35\u7092\u7126\u785D\u7901\u790E\u79D2\u7A0D\u8096\u8278\u82D5\u8349\u8549\u8C82\u8D85\u9162\u918B\u91AE\u4FC3\u56D1\u71ED\u77D7\u8700\u89F8\u5BF8\u5FD6\u6751\u90A8\u53E2\u585A\u5BF5\u60A4\u6181\u6460\u7E3D\u8070\u8525\u9283\u64AE\u50AC\u5D14\u6700\u589C\u62BD\u63A8\u690E\u6978\u6A1E\u6E6B\u76BA\u79CB\u82BB\u8429\u8ACF\u8DA8\u8FFD\u9112\u914B\u919C\u9310\u9318\u939A\u96DB\u9A36\u9C0D\u4E11\u755C\u795D\u7AFA\u7B51\u7BC9\u7E2E\u84C4\u8E59\u8E74\u8EF8\u9010\u6625\u693F\u7443\u51FA\u672E\u9EDC\u5145\u5FE0\u6C96\u87F2\u885D\u8877\u60B4\u81B5\u8403\uFFFD".split("");
        for (j3 = 0; j3 != D5[245].length; ++j3)
          if (D5[245][j3].charCodeAt(0) !== 65533) {
            e7[D5[245][j3]] = 62720 + j3;
            d2[62720 + j3] = D5[245][j3];
          }
        D5[246] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u8D05\u53D6\u5439\u5634\u5A36\u5C31\u708A\u7FE0\u805A\u8106\u81ED\u8DA3\u9189\u9A5F\u9DF2\u5074\u4EC4\u53A0\u60FB\u6E2C\u5C64\u4F88\u5024\u55E4\u5CD9\u5E5F\u6065\u6894\u6CBB\u6DC4\u71BE\u75D4\u75F4\u7661\u7A1A\u7A49\u7DC7\u7DFB\u7F6E\u81F4\u86A9\u8F1C\u96C9\u99B3\u9F52\u5247\u52C5\u98ED\u89AA\u4E03\u67D2\u6F06\u4FB5\u5BE2\u6795\u6C88\u6D78\u741B\u7827\u91DD\u937C\u87C4\u79E4\u7A31\u5FEB\u4ED6\u54A4\u553E\u58AE\u59A5\u60F0\u6253\u62D6\u6736\u6955\u8235\u9640\u99B1\u99DD\u502C\u5353\u5544\u577C\uFA01\u6258\uFA02\u64E2\u666B\u67DD\u6FC1\u6FEF\u7422\u7438\u8A17\uFFFD".split("");
        for (j3 = 0; j3 != D5[246].length; ++j3)
          if (D5[246][j3].charCodeAt(0) !== 65533) {
            e7[D5[246][j3]] = 62976 + j3;
            d2[62976 + j3] = D5[246][j3];
          }
        D5[247] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u9438\u5451\u5606\u5766\u5F48\u619A\u6B4E\u7058\u70AD\u7DBB\u8A95\u596A\u812B\u63A2\u7708\u803D\u8CAA\u5854\u642D\u69BB\u5B95\u5E11\u6E6F\uFA03\u8569\u514C\u53F0\u592A\u6020\u614B\u6B86\u6C70\u6CF0\u7B1E\u80CE\u82D4\u8DC6\u90B0\u98B1\uFA04\u64C7\u6FA4\u6491\u6504\u514E\u5410\u571F\u8A0E\u615F\u6876\uFA05\u75DB\u7B52\u7D71\u901A\u5806\u69CC\u817F\u892A\u9000\u9839\u5078\u5957\u59AC\u6295\u900F\u9B2A\u615D\u7279\u95D6\u5761\u5A46\u5DF4\u628A\u64AD\u64FA\u6777\u6CE2\u6D3E\u722C\u7436\u7834\u7F77\u82AD\u8DDB\u9817\u5224\u5742\u677F\u7248\u74E3\u8CA9\u8FA6\u9211\uFFFD".split("");
        for (j3 = 0; j3 != D5[247].length; ++j3)
          if (D5[247][j3].charCodeAt(0) !== 65533) {
            e7[D5[247][j3]] = 63232 + j3;
            d2[63232 + j3] = D5[247][j3];
          }
        D5[248] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u962A\u516B\u53ED\u634C\u4F69\u5504\u6096\u6557\u6C9B\u6D7F\u724C\u72FD\u7A17\u8987\u8C9D\u5F6D\u6F8E\u70F9\u81A8\u610E\u4FBF\u504F\u6241\u7247\u7BC7\u7DE8\u7FE9\u904D\u97AD\u9A19\u8CB6\u576A\u5E73\u67B0\u840D\u8A55\u5420\u5B16\u5E63\u5EE2\u5F0A\u6583\u80BA\u853D\u9589\u965B\u4F48\u5305\u530D\u530F\u5486\u54FA\u5703\u5E03\u6016\u629B\u62B1\u6355\uFA06\u6CE1\u6D66\u75B1\u7832\u80DE\u812F\u82DE\u8461\u84B2\u888D\u8912\u900B\u92EA\u98FD\u9B91\u5E45\u66B4\u66DD\u7011\u7206\uFA07\u4FF5\u527D\u5F6A\u6153\u6753\u6A19\u6F02\u74E2\u7968\u8868\u8C79\u98C7\u98C4\u9A43\uFFFD".split("");
        for (j3 = 0; j3 != D5[248].length; ++j3)
          if (D5[248][j3].charCodeAt(0) !== 65533) {
            e7[D5[248][j3]] = 63488 + j3;
            d2[63488 + j3] = D5[248][j3];
          }
        D5[249] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u54C1\u7A1F\u6953\u8AF7\u8C4A\u98A8\u99AE\u5F7C\u62AB\u75B2\u76AE\u88AB\u907F\u9642\u5339\u5F3C\u5FC5\u6CCC\u73CC\u7562\u758B\u7B46\u82FE\u999D\u4E4F\u903C\u4E0B\u4F55\u53A6\u590F\u5EC8\u6630\u6CB3\u7455\u8377\u8766\u8CC0\u9050\u971E\u9C15\u58D1\u5B78\u8650\u8B14\u9DB4\u5BD2\u6068\u608D\u65F1\u6C57\u6F22\u6FA3\u701A\u7F55\u7FF0\u9591\u9592\u9650\u97D3\u5272\u8F44\u51FD\u542B\u54B8\u5563\u558A\u6ABB\u6DB5\u7DD8\u8266\u929C\u9677\u9E79\u5408\u54C8\u76D2\u86E4\u95A4\u95D4\u965C\u4EA2\u4F09\u59EE\u5AE6\u5DF7\u6052\u6297\u676D\u6841\u6C86\u6E2F\u7F38\u809B\u822A\uFFFD".split("");
        for (j3 = 0; j3 != D5[249].length; ++j3)
          if (D5[249][j3].charCodeAt(0) !== 65533) {
            e7[D5[249][j3]] = 63744 + j3;
            d2[63744 + j3] = D5[249][j3];
          }
        D5[250] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFA08\uFA09\u9805\u4EA5\u5055\u54B3\u5793\u595A\u5B69\u5BB3\u61C8\u6977\u6D77\u7023\u87F9\u89E3\u8A72\u8AE7\u9082\u99ED\u9AB8\u52BE\u6838\u5016\u5E78\u674F\u8347\u884C\u4EAB\u5411\u56AE\u73E6\u9115\u97FF\u9909\u9957\u9999\u5653\u589F\u865B\u8A31\u61B2\u6AF6\u737B\u8ED2\u6B47\u96AA\u9A57\u5955\u7200\u8D6B\u9769\u4FD4\u5CF4\u5F26\u61F8\u665B\u6CEB\u70AB\u7384\u73B9\u73FE\u7729\u774D\u7D43\u7D62\u7E23\u8237\u8852\uFA0A\u8CE2\u9249\u986F\u5B51\u7A74\u8840\u9801\u5ACC\u4FE0\u5354\u593E\u5CFD\u633E\u6D79\u72F9\u8105\u8107\u83A2\u92CF\u9830\u4EA8\u5144\u5211\u578B\uFFFD".split("");
        for (j3 = 0; j3 != D5[250].length; ++j3)
          if (D5[250][j3].charCodeAt(0) !== 65533) {
            e7[D5[250][j3]] = 64e3 + j3;
            d2[64e3 + j3] = D5[250][j3];
          }
        D5[251] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u5F62\u6CC2\u6ECE\u7005\u7050\u70AF\u7192\u73E9\u7469\u834A\u87A2\u8861\u9008\u90A2\u93A3\u99A8\u516E\u5F57\u60E0\u6167\u66B3\u8559\u8E4A\u91AF\u978B\u4E4E\u4E92\u547C\u58D5\u58FA\u597D\u5CB5\u5F27\u6236\u6248\u660A\u6667\u6BEB\u6D69\u6DCF\u6E56\u6EF8\u6F94\u6FE0\u6FE9\u705D\u72D0\u7425\u745A\u74E0\u7693\u795C\u7CCA\u7E1E\u80E1\u82A6\u846B\u84BF\u864E\u865F\u8774\u8B77\u8C6A\u93AC\u9800\u9865\u60D1\u6216\u9177\u5A5A\u660F\u6DF7\u6E3E\u743F\u9B42\u5FFD\u60DA\u7B0F\u54C4\u5F18\u6C5E\u6CD3\u6D2A\u70D8\u7D05\u8679\u8A0C\u9D3B\u5316\u548C\u5B05\u6A3A\u706B\u7575\uFFFD".split("");
        for (j3 = 0; j3 != D5[251].length; ++j3)
          if (D5[251][j3].charCodeAt(0) !== 65533) {
            e7[D5[251][j3]] = 64256 + j3;
            d2[64256 + j3] = D5[251][j3];
          }
        D5[252] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u798D\u79BE\u82B1\u83EF\u8A71\u8B41\u8CA8\u9774\uFA0B\u64F4\u652B\u78BA\u78BB\u7A6B\u4E38\u559A\u5950\u5BA6\u5E7B\u60A3\u63DB\u6B61\u6665\u6853\u6E19\u7165\u74B0\u7D08\u9084\u9A69\u9C25\u6D3B\u6ED1\u733E\u8C41\u95CA\u51F0\u5E4C\u5FA8\u604D\u60F6\u6130\u614C\u6643\u6644\u69A5\u6CC1\u6E5F\u6EC9\u6F62\u714C\u749C\u7687\u7BC1\u7C27\u8352\u8757\u9051\u968D\u9EC3\u532F\u56DE\u5EFB\u5F8A\u6062\u6094\u61F7\u6666\u6703\u6A9C\u6DEE\u6FAE\u7070\u736A\u7E6A\u81BE\u8334\u86D4\u8AA8\u8CC4\u5283\u7372\u5B96\u6A6B\u9404\u54EE\u5686\u5B5D\u6548\u6585\u66C9\u689F\u6D8D\u6DC6\uFFFD".split("");
        for (j3 = 0; j3 != D5[252].length; ++j3)
          if (D5[252][j3].charCodeAt(0) !== 65533) {
            e7[D5[252][j3]] = 64512 + j3;
            d2[64512 + j3] = D5[252][j3];
          }
        D5[253] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u723B\u80B4\u9175\u9A4D\u4FAF\u5019\u539A\u540E\u543C\u5589\u55C5\u5E3F\u5F8C\u673D\u7166\u73DD\u9005\u52DB\u52F3\u5864\u58CE\u7104\u718F\u71FB\u85B0\u8A13\u6688\u85A8\u55A7\u6684\u714A\u8431\u5349\u5599\u6BC1\u5F59\u5FBD\u63EE\u6689\u7147\u8AF1\u8F1D\u9EBE\u4F11\u643A\u70CB\u7566\u8667\u6064\u8B4E\u9DF8\u5147\u51F6\u5308\u6D36\u80F8\u9ED1\u6615\u6B23\u7098\u75D5\u5403\u5C79\u7D07\u8A16\u6B20\u6B3D\u6B46\u5438\u6070\u6D3D\u7FD5\u8208\u50D6\u51DE\u559C\u566B\u56CD\u59EC\u5B09\u5E0C\u6199\u6198\u6231\u665E\u66E6\u7199\u71B9\u71BA\u72A7\u79A7\u7A00\u7FB2\u8A70\uFFFD".split("");
        for (j3 = 0; j3 != D5[253].length; ++j3)
          if (D5[253][j3].charCodeAt(0) !== 65533) {
            e7[D5[253][j3]] = 64768 + j3;
            d2[64768 + j3] = D5[253][j3];
          }
        return { "enc": e7, "dec": d2 };
      }();
      cptable2[950] = function() {
        var d2 = [], e7 = {}, D5 = [], j3;
        D5[0] = "\0\x07\b	\n\v\f\r\x1B !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~\x7F\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD".split("");
        for (j3 = 0; j3 != D5[0].length; ++j3)
          if (D5[0][j3].charCodeAt(0) !== 65533) {
            e7[D5[0][j3]] = 0 + j3;
            d2[0 + j3] = D5[0][j3];
          }
        D5[161] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u3000\uFF0C\u3001\u3002\uFF0E\u2027\uFF1B\uFF1A\uFF1F\uFF01\uFE30\u2026\u2025\uFE50\uFE51\uFE52\xB7\uFE54\uFE55\uFE56\uFE57\uFF5C\u2013\uFE31\u2014\uFE33\u2574\uFE34\uFE4F\uFF08\uFF09\uFE35\uFE36\uFF5B\uFF5D\uFE37\uFE38\u3014\u3015\uFE39\uFE3A\u3010\u3011\uFE3B\uFE3C\u300A\u300B\uFE3D\uFE3E\u3008\u3009\uFE3F\uFE40\u300C\u300D\uFE41\uFE42\u300E\u300F\uFE43\uFE44\uFE59\uFE5A\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFE5B\uFE5C\uFE5D\uFE5E\u2018\u2019\u201C\u201D\u301D\u301E\u2035\u2032\uFF03\uFF06\uFF0A\u203B\xA7\u3003\u25CB\u25CF\u25B3\u25B2\u25CE\u2606\u2605\u25C7\u25C6\u25A1\u25A0\u25BD\u25BC\u32A3\u2105\xAF\uFFE3\uFF3F\u02CD\uFE49\uFE4A\uFE4D\uFE4E\uFE4B\uFE4C\uFE5F\uFE60\uFE61\uFF0B\uFF0D\xD7\xF7\xB1\u221A\uFF1C\uFF1E\uFF1D\u2266\u2267\u2260\u221E\u2252\u2261\uFE62\uFE63\uFE64\uFE65\uFE66\uFF5E\u2229\u222A\u22A5\u2220\u221F\u22BF\u33D2\u33D1\u222B\u222E\u2235\u2234\u2640\u2642\u2295\u2299\u2191\u2193\u2190\u2192\u2196\u2197\u2199\u2198\u2225\u2223\uFF0F\uFFFD".split("");
        for (j3 = 0; j3 != D5[161].length; ++j3)
          if (D5[161][j3].charCodeAt(0) !== 65533) {
            e7[D5[161][j3]] = 41216 + j3;
            d2[41216 + j3] = D5[161][j3];
          }
        D5[162] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFF3C\u2215\uFE68\uFF04\uFFE5\u3012\uFFE0\uFFE1\uFF05\uFF20\u2103\u2109\uFE69\uFE6A\uFE6B\u33D5\u339C\u339D\u339E\u33CE\u33A1\u338E\u338F\u33C4\xB0\u5159\u515B\u515E\u515D\u5161\u5163\u55E7\u74E9\u7CCE\u2581\u2582\u2583\u2584\u2585\u2586\u2587\u2588\u258F\u258E\u258D\u258C\u258B\u258A\u2589\u253C\u2534\u252C\u2524\u251C\u2594\u2500\u2502\u2595\u250C\u2510\u2514\u2518\u256D\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u256E\u2570\u256F\u2550\u255E\u256A\u2561\u25E2\u25E3\u25E5\u25E4\u2571\u2572\u2573\uFF10\uFF11\uFF12\uFF13\uFF14\uFF15\uFF16\uFF17\uFF18\uFF19\u2160\u2161\u2162\u2163\u2164\u2165\u2166\u2167\u2168\u2169\u3021\u3022\u3023\u3024\u3025\u3026\u3027\u3028\u3029\u5341\u5344\u5345\uFF21\uFF22\uFF23\uFF24\uFF25\uFF26\uFF27\uFF28\uFF29\uFF2A\uFF2B\uFF2C\uFF2D\uFF2E\uFF2F\uFF30\uFF31\uFF32\uFF33\uFF34\uFF35\uFF36\uFF37\uFF38\uFF39\uFF3A\uFF41\uFF42\uFF43\uFF44\uFF45\uFF46\uFF47\uFF48\uFF49\uFF4A\uFF4B\uFF4C\uFF4D\uFF4E\uFF4F\uFF50\uFF51\uFF52\uFF53\uFF54\uFF55\uFF56\uFFFD".split("");
        for (j3 = 0; j3 != D5[162].length; ++j3)
          if (D5[162][j3].charCodeAt(0) !== 65533) {
            e7[D5[162][j3]] = 41472 + j3;
            d2[41472 + j3] = D5[162][j3];
          }
        D5[163] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFF57\uFF58\uFF59\uFF5A\u0391\u0392\u0393\u0394\u0395\u0396\u0397\u0398\u0399\u039A\u039B\u039C\u039D\u039E\u039F\u03A0\u03A1\u03A3\u03A4\u03A5\u03A6\u03A7\u03A8\u03A9\u03B1\u03B2\u03B3\u03B4\u03B5\u03B6\u03B7\u03B8\u03B9\u03BA\u03BB\u03BC\u03BD\u03BE\u03BF\u03C0\u03C1\u03C3\u03C4\u03C5\u03C6\u03C7\u03C8\u03C9\u3105\u3106\u3107\u3108\u3109\u310A\u310B\u310C\u310D\u310E\u310F\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u3110\u3111\u3112\u3113\u3114\u3115\u3116\u3117\u3118\u3119\u311A\u311B\u311C\u311D\u311E\u311F\u3120\u3121\u3122\u3123\u3124\u3125\u3126\u3127\u3128\u3129\u02D9\u02C9\u02CA\u02C7\u02CB\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u20AC\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD".split("");
        for (j3 = 0; j3 != D5[163].length; ++j3)
          if (D5[163][j3].charCodeAt(0) !== 65533) {
            e7[D5[163][j3]] = 41728 + j3;
            d2[41728 + j3] = D5[163][j3];
          }
        D5[164] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u4E00\u4E59\u4E01\u4E03\u4E43\u4E5D\u4E86\u4E8C\u4EBA\u513F\u5165\u516B\u51E0\u5200\u5201\u529B\u5315\u5341\u535C\u53C8\u4E09\u4E0B\u4E08\u4E0A\u4E2B\u4E38\u51E1\u4E45\u4E48\u4E5F\u4E5E\u4E8E\u4EA1\u5140\u5203\u52FA\u5343\u53C9\u53E3\u571F\u58EB\u5915\u5927\u5973\u5B50\u5B51\u5B53\u5BF8\u5C0F\u5C22\u5C38\u5C71\u5DDD\u5DE5\u5DF1\u5DF2\u5DF3\u5DFE\u5E72\u5EFE\u5F0B\u5F13\u624D\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u4E11\u4E10\u4E0D\u4E2D\u4E30\u4E39\u4E4B\u5C39\u4E88\u4E91\u4E95\u4E92\u4E94\u4EA2\u4EC1\u4EC0\u4EC3\u4EC6\u4EC7\u4ECD\u4ECA\u4ECB\u4EC4\u5143\u5141\u5167\u516D\u516E\u516C\u5197\u51F6\u5206\u5207\u5208\u52FB\u52FE\u52FF\u5316\u5339\u5348\u5347\u5345\u535E\u5384\u53CB\u53CA\u53CD\u58EC\u5929\u592B\u592A\u592D\u5B54\u5C11\u5C24\u5C3A\u5C6F\u5DF4\u5E7B\u5EFF\u5F14\u5F15\u5FC3\u6208\u6236\u624B\u624E\u652F\u6587\u6597\u65A4\u65B9\u65E5\u66F0\u6708\u6728\u6B20\u6B62\u6B79\u6BCB\u6BD4\u6BDB\u6C0F\u6C34\u706B\u722A\u7236\u723B\u7247\u7259\u725B\u72AC\u738B\u4E19\uFFFD".split("");
        for (j3 = 0; j3 != D5[164].length; ++j3)
          if (D5[164][j3].charCodeAt(0) !== 65533) {
            e7[D5[164][j3]] = 41984 + j3;
            d2[41984 + j3] = D5[164][j3];
          }
        D5[165] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u4E16\u4E15\u4E14\u4E18\u4E3B\u4E4D\u4E4F\u4E4E\u4EE5\u4ED8\u4ED4\u4ED5\u4ED6\u4ED7\u4EE3\u4EE4\u4ED9\u4EDE\u5145\u5144\u5189\u518A\u51AC\u51F9\u51FA\u51F8\u520A\u52A0\u529F\u5305\u5306\u5317\u531D\u4EDF\u534A\u5349\u5361\u5360\u536F\u536E\u53BB\u53EF\u53E4\u53F3\u53EC\u53EE\u53E9\u53E8\u53FC\u53F8\u53F5\u53EB\u53E6\u53EA\u53F2\u53F1\u53F0\u53E5\u53ED\u53FB\u56DB\u56DA\u5916\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u592E\u5931\u5974\u5976\u5B55\u5B83\u5C3C\u5DE8\u5DE7\u5DE6\u5E02\u5E03\u5E73\u5E7C\u5F01\u5F18\u5F17\u5FC5\u620A\u6253\u6254\u6252\u6251\u65A5\u65E6\u672E\u672C\u672A\u672B\u672D\u6B63\u6BCD\u6C11\u6C10\u6C38\u6C41\u6C40\u6C3E\u72AF\u7384\u7389\u74DC\u74E6\u7518\u751F\u7528\u7529\u7530\u7531\u7532\u7533\u758B\u767D\u76AE\u76BF\u76EE\u77DB\u77E2\u77F3\u793A\u79BE\u7A74\u7ACB\u4E1E\u4E1F\u4E52\u4E53\u4E69\u4E99\u4EA4\u4EA6\u4EA5\u4EFF\u4F09\u4F19\u4F0A\u4F15\u4F0D\u4F10\u4F11\u4F0F\u4EF2\u4EF6\u4EFB\u4EF0\u4EF3\u4EFD\u4F01\u4F0B\u5149\u5147\u5146\u5148\u5168\uFFFD".split("");
        for (j3 = 0; j3 != D5[165].length; ++j3)
          if (D5[165][j3].charCodeAt(0) !== 65533) {
            e7[D5[165][j3]] = 42240 + j3;
            d2[42240 + j3] = D5[165][j3];
          }
        D5[166] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u5171\u518D\u51B0\u5217\u5211\u5212\u520E\u5216\u52A3\u5308\u5321\u5320\u5370\u5371\u5409\u540F\u540C\u540A\u5410\u5401\u540B\u5404\u5411\u540D\u5408\u5403\u540E\u5406\u5412\u56E0\u56DE\u56DD\u5733\u5730\u5728\u572D\u572C\u572F\u5729\u5919\u591A\u5937\u5938\u5984\u5978\u5983\u597D\u5979\u5982\u5981\u5B57\u5B58\u5B87\u5B88\u5B85\u5B89\u5BFA\u5C16\u5C79\u5DDE\u5E06\u5E76\u5E74\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u5F0F\u5F1B\u5FD9\u5FD6\u620E\u620C\u620D\u6210\u6263\u625B\u6258\u6536\u65E9\u65E8\u65EC\u65ED\u66F2\u66F3\u6709\u673D\u6734\u6731\u6735\u6B21\u6B64\u6B7B\u6C16\u6C5D\u6C57\u6C59\u6C5F\u6C60\u6C50\u6C55\u6C61\u6C5B\u6C4D\u6C4E\u7070\u725F\u725D\u767E\u7AF9\u7C73\u7CF8\u7F36\u7F8A\u7FBD\u8001\u8003\u800C\u8012\u8033\u807F\u8089\u808B\u808C\u81E3\u81EA\u81F3\u81FC\u820C\u821B\u821F\u826E\u8272\u827E\u866B\u8840\u884C\u8863\u897F\u9621\u4E32\u4EA8\u4F4D\u4F4F\u4F47\u4F57\u4F5E\u4F34\u4F5B\u4F55\u4F30\u4F50\u4F51\u4F3D\u4F3A\u4F38\u4F43\u4F54\u4F3C\u4F46\u4F63\uFFFD".split("");
        for (j3 = 0; j3 != D5[166].length; ++j3)
          if (D5[166][j3].charCodeAt(0) !== 65533) {
            e7[D5[166][j3]] = 42496 + j3;
            d2[42496 + j3] = D5[166][j3];
          }
        D5[167] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u4F5C\u4F60\u4F2F\u4F4E\u4F36\u4F59\u4F5D\u4F48\u4F5A\u514C\u514B\u514D\u5175\u51B6\u51B7\u5225\u5224\u5229\u522A\u5228\u52AB\u52A9\u52AA\u52AC\u5323\u5373\u5375\u541D\u542D\u541E\u543E\u5426\u544E\u5427\u5446\u5443\u5433\u5448\u5442\u541B\u5429\u544A\u5439\u543B\u5438\u542E\u5435\u5436\u5420\u543C\u5440\u5431\u542B\u541F\u542C\u56EA\u56F0\u56E4\u56EB\u574A\u5751\u5740\u574D\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u5747\u574E\u573E\u5750\u574F\u573B\u58EF\u593E\u599D\u5992\u59A8\u599E\u59A3\u5999\u5996\u598D\u59A4\u5993\u598A\u59A5\u5B5D\u5B5C\u5B5A\u5B5B\u5B8C\u5B8B\u5B8F\u5C2C\u5C40\u5C41\u5C3F\u5C3E\u5C90\u5C91\u5C94\u5C8C\u5DEB\u5E0C\u5E8F\u5E87\u5E8A\u5EF7\u5F04\u5F1F\u5F64\u5F62\u5F77\u5F79\u5FD8\u5FCC\u5FD7\u5FCD\u5FF1\u5FEB\u5FF8\u5FEA\u6212\u6211\u6284\u6297\u6296\u6280\u6276\u6289\u626D\u628A\u627C\u627E\u6279\u6273\u6292\u626F\u6298\u626E\u6295\u6293\u6291\u6286\u6539\u653B\u6538\u65F1\u66F4\u675F\u674E\u674F\u6750\u6751\u675C\u6756\u675E\u6749\u6746\u6760\uFFFD".split("");
        for (j3 = 0; j3 != D5[167].length; ++j3)
          if (D5[167][j3].charCodeAt(0) !== 65533) {
            e7[D5[167][j3]] = 42752 + j3;
            d2[42752 + j3] = D5[167][j3];
          }
        D5[168] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u6753\u6757\u6B65\u6BCF\u6C42\u6C5E\u6C99\u6C81\u6C88\u6C89\u6C85\u6C9B\u6C6A\u6C7A\u6C90\u6C70\u6C8C\u6C68\u6C96\u6C92\u6C7D\u6C83\u6C72\u6C7E\u6C74\u6C86\u6C76\u6C8D\u6C94\u6C98\u6C82\u7076\u707C\u707D\u7078\u7262\u7261\u7260\u72C4\u72C2\u7396\u752C\u752B\u7537\u7538\u7682\u76EF\u77E3\u79C1\u79C0\u79BF\u7A76\u7CFB\u7F55\u8096\u8093\u809D\u8098\u809B\u809A\u80B2\u826F\u8292\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u828B\u828D\u898B\u89D2\u8A00\u8C37\u8C46\u8C55\u8C9D\u8D64\u8D70\u8DB3\u8EAB\u8ECA\u8F9B\u8FB0\u8FC2\u8FC6\u8FC5\u8FC4\u5DE1\u9091\u90A2\u90AA\u90A6\u90A3\u9149\u91C6\u91CC\u9632\u962E\u9631\u962A\u962C\u4E26\u4E56\u4E73\u4E8B\u4E9B\u4E9E\u4EAB\u4EAC\u4F6F\u4F9D\u4F8D\u4F73\u4F7F\u4F6C\u4F9B\u4F8B\u4F86\u4F83\u4F70\u4F75\u4F88\u4F69\u4F7B\u4F96\u4F7E\u4F8F\u4F91\u4F7A\u5154\u5152\u5155\u5169\u5177\u5176\u5178\u51BD\u51FD\u523B\u5238\u5237\u523A\u5230\u522E\u5236\u5241\u52BE\u52BB\u5352\u5354\u5353\u5351\u5366\u5377\u5378\u5379\u53D6\u53D4\u53D7\u5473\u5475\uFFFD".split("");
        for (j3 = 0; j3 != D5[168].length; ++j3)
          if (D5[168][j3].charCodeAt(0) !== 65533) {
            e7[D5[168][j3]] = 43008 + j3;
            d2[43008 + j3] = D5[168][j3];
          }
        D5[169] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u5496\u5478\u5495\u5480\u547B\u5477\u5484\u5492\u5486\u547C\u5490\u5471\u5476\u548C\u549A\u5462\u5468\u548B\u547D\u548E\u56FA\u5783\u5777\u576A\u5769\u5761\u5766\u5764\u577C\u591C\u5949\u5947\u5948\u5944\u5954\u59BE\u59BB\u59D4\u59B9\u59AE\u59D1\u59C6\u59D0\u59CD\u59CB\u59D3\u59CA\u59AF\u59B3\u59D2\u59C5\u5B5F\u5B64\u5B63\u5B97\u5B9A\u5B98\u5B9C\u5B99\u5B9B\u5C1A\u5C48\u5C45\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u5C46\u5CB7\u5CA1\u5CB8\u5CA9\u5CAB\u5CB1\u5CB3\u5E18\u5E1A\u5E16\u5E15\u5E1B\u5E11\u5E78\u5E9A\u5E97\u5E9C\u5E95\u5E96\u5EF6\u5F26\u5F27\u5F29\u5F80\u5F81\u5F7F\u5F7C\u5FDD\u5FE0\u5FFD\u5FF5\u5FFF\u600F\u6014\u602F\u6035\u6016\u602A\u6015\u6021\u6027\u6029\u602B\u601B\u6216\u6215\u623F\u623E\u6240\u627F\u62C9\u62CC\u62C4\u62BF\u62C2\u62B9\u62D2\u62DB\u62AB\u62D3\u62D4\u62CB\u62C8\u62A8\u62BD\u62BC\u62D0\u62D9\u62C7\u62CD\u62B5\u62DA\u62B1\u62D8\u62D6\u62D7\u62C6\u62AC\u62CE\u653E\u65A7\u65BC\u65FA\u6614\u6613\u660C\u6606\u6602\u660E\u6600\u660F\u6615\u660A\uFFFD".split("");
        for (j3 = 0; j3 != D5[169].length; ++j3)
          if (D5[169][j3].charCodeAt(0) !== 65533) {
            e7[D5[169][j3]] = 43264 + j3;
            d2[43264 + j3] = D5[169][j3];
          }
        D5[170] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u6607\u670D\u670B\u676D\u678B\u6795\u6771\u679C\u6773\u6777\u6787\u679D\u6797\u676F\u6770\u677F\u6789\u677E\u6790\u6775\u679A\u6793\u677C\u676A\u6772\u6B23\u6B66\u6B67\u6B7F\u6C13\u6C1B\u6CE3\u6CE8\u6CF3\u6CB1\u6CCC\u6CE5\u6CB3\u6CBD\u6CBE\u6CBC\u6CE2\u6CAB\u6CD5\u6CD3\u6CB8\u6CC4\u6CB9\u6CC1\u6CAE\u6CD7\u6CC5\u6CF1\u6CBF\u6CBB\u6CE1\u6CDB\u6CCA\u6CAC\u6CEF\u6CDC\u6CD6\u6CE0\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u7095\u708E\u7092\u708A\u7099\u722C\u722D\u7238\u7248\u7267\u7269\u72C0\u72CE\u72D9\u72D7\u72D0\u73A9\u73A8\u739F\u73AB\u73A5\u753D\u759D\u7599\u759A\u7684\u76C2\u76F2\u76F4\u77E5\u77FD\u793E\u7940\u7941\u79C9\u79C8\u7A7A\u7A79\u7AFA\u7CFE\u7F54\u7F8C\u7F8B\u8005\u80BA\u80A5\u80A2\u80B1\u80A1\u80AB\u80A9\u80B4\u80AA\u80AF\u81E5\u81FE\u820D\u82B3\u829D\u8299\u82AD\u82BD\u829F\u82B9\u82B1\u82AC\u82A5\u82AF\u82B8\u82A3\u82B0\u82BE\u82B7\u864E\u8671\u521D\u8868\u8ECB\u8FCE\u8FD4\u8FD1\u90B5\u90B8\u90B1\u90B6\u91C7\u91D1\u9577\u9580\u961C\u9640\u963F\u963B\u9644\uFFFD".split("");
        for (j3 = 0; j3 != D5[170].length; ++j3)
          if (D5[170][j3].charCodeAt(0) !== 65533) {
            e7[D5[170][j3]] = 43520 + j3;
            d2[43520 + j3] = D5[170][j3];
          }
        D5[171] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u9642\u96B9\u96E8\u9752\u975E\u4E9F\u4EAD\u4EAE\u4FE1\u4FB5\u4FAF\u4FBF\u4FE0\u4FD1\u4FCF\u4FDD\u4FC3\u4FB6\u4FD8\u4FDF\u4FCA\u4FD7\u4FAE\u4FD0\u4FC4\u4FC2\u4FDA\u4FCE\u4FDE\u4FB7\u5157\u5192\u5191\u51A0\u524E\u5243\u524A\u524D\u524C\u524B\u5247\u52C7\u52C9\u52C3\u52C1\u530D\u5357\u537B\u539A\u53DB\u54AC\u54C0\u54A8\u54CE\u54C9\u54B8\u54A6\u54B3\u54C7\u54C2\u54BD\u54AA\u54C1\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u54C4\u54C8\u54AF\u54AB\u54B1\u54BB\u54A9\u54A7\u54BF\u56FF\u5782\u578B\u57A0\u57A3\u57A2\u57CE\u57AE\u5793\u5955\u5951\u594F\u594E\u5950\u59DC\u59D8\u59FF\u59E3\u59E8\u5A03\u59E5\u59EA\u59DA\u59E6\u5A01\u59FB\u5B69\u5BA3\u5BA6\u5BA4\u5BA2\u5BA5\u5C01\u5C4E\u5C4F\u5C4D\u5C4B\u5CD9\u5CD2\u5DF7\u5E1D\u5E25\u5E1F\u5E7D\u5EA0\u5EA6\u5EFA\u5F08\u5F2D\u5F65\u5F88\u5F85\u5F8A\u5F8B\u5F87\u5F8C\u5F89\u6012\u601D\u6020\u6025\u600E\u6028\u604D\u6070\u6068\u6062\u6046\u6043\u606C\u606B\u606A\u6064\u6241\u62DC\u6316\u6309\u62FC\u62ED\u6301\u62EE\u62FD\u6307\u62F1\u62F7\uFFFD".split("");
        for (j3 = 0; j3 != D5[171].length; ++j3)
          if (D5[171][j3].charCodeAt(0) !== 65533) {
            e7[D5[171][j3]] = 43776 + j3;
            d2[43776 + j3] = D5[171][j3];
          }
        D5[172] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u62EF\u62EC\u62FE\u62F4\u6311\u6302\u653F\u6545\u65AB\u65BD\u65E2\u6625\u662D\u6620\u6627\u662F\u661F\u6628\u6631\u6624\u66F7\u67FF\u67D3\u67F1\u67D4\u67D0\u67EC\u67B6\u67AF\u67F5\u67E9\u67EF\u67C4\u67D1\u67B4\u67DA\u67E5\u67B8\u67CF\u67DE\u67F3\u67B0\u67D9\u67E2\u67DD\u67D2\u6B6A\u6B83\u6B86\u6BB5\u6BD2\u6BD7\u6C1F\u6CC9\u6D0B\u6D32\u6D2A\u6D41\u6D25\u6D0C\u6D31\u6D1E\u6D17\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u6D3B\u6D3D\u6D3E\u6D36\u6D1B\u6CF5\u6D39\u6D27\u6D38\u6D29\u6D2E\u6D35\u6D0E\u6D2B\u70AB\u70BA\u70B3\u70AC\u70AF\u70AD\u70B8\u70AE\u70A4\u7230\u7272\u726F\u7274\u72E9\u72E0\u72E1\u73B7\u73CA\u73BB\u73B2\u73CD\u73C0\u73B3\u751A\u752D\u754F\u754C\u754E\u754B\u75AB\u75A4\u75A5\u75A2\u75A3\u7678\u7686\u7687\u7688\u76C8\u76C6\u76C3\u76C5\u7701\u76F9\u76F8\u7709\u770B\u76FE\u76FC\u7707\u77DC\u7802\u7814\u780C\u780D\u7946\u7949\u7948\u7947\u79B9\u79BA\u79D1\u79D2\u79CB\u7A7F\u7A81\u7AFF\u7AFD\u7C7D\u7D02\u7D05\u7D00\u7D09\u7D07\u7D04\u7D06\u7F38\u7F8E\u7FBF\u8004\uFFFD".split("");
        for (j3 = 0; j3 != D5[172].length; ++j3)
          if (D5[172][j3].charCodeAt(0) !== 65533) {
            e7[D5[172][j3]] = 44032 + j3;
            d2[44032 + j3] = D5[172][j3];
          }
        D5[173] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u8010\u800D\u8011\u8036\u80D6\u80E5\u80DA\u80C3\u80C4\u80CC\u80E1\u80DB\u80CE\u80DE\u80E4\u80DD\u81F4\u8222\u82E7\u8303\u8305\u82E3\u82DB\u82E6\u8304\u82E5\u8302\u8309\u82D2\u82D7\u82F1\u8301\u82DC\u82D4\u82D1\u82DE\u82D3\u82DF\u82EF\u8306\u8650\u8679\u867B\u867A\u884D\u886B\u8981\u89D4\u8A08\u8A02\u8A03\u8C9E\u8CA0\u8D74\u8D73\u8DB4\u8ECD\u8ECC\u8FF0\u8FE6\u8FE2\u8FEA\u8FE5\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u8FED\u8FEB\u8FE4\u8FE8\u90CA\u90CE\u90C1\u90C3\u914B\u914A\u91CD\u9582\u9650\u964B\u964C\u964D\u9762\u9769\u97CB\u97ED\u97F3\u9801\u98A8\u98DB\u98DF\u9996\u9999\u4E58\u4EB3\u500C\u500D\u5023\u4FEF\u5026\u5025\u4FF8\u5029\u5016\u5006\u503C\u501F\u501A\u5012\u5011\u4FFA\u5000\u5014\u5028\u4FF1\u5021\u500B\u5019\u5018\u4FF3\u4FEE\u502D\u502A\u4FFE\u502B\u5009\u517C\u51A4\u51A5\u51A2\u51CD\u51CC\u51C6\u51CB\u5256\u525C\u5254\u525B\u525D\u532A\u537F\u539F\u539D\u53DF\u54E8\u5510\u5501\u5537\u54FC\u54E5\u54F2\u5506\u54FA\u5514\u54E9\u54ED\u54E1\u5509\u54EE\u54EA\uFFFD".split("");
        for (j3 = 0; j3 != D5[173].length; ++j3)
          if (D5[173][j3].charCodeAt(0) !== 65533) {
            e7[D5[173][j3]] = 44288 + j3;
            d2[44288 + j3] = D5[173][j3];
          }
        D5[174] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u54E6\u5527\u5507\u54FD\u550F\u5703\u5704\u57C2\u57D4\u57CB\u57C3\u5809\u590F\u5957\u5958\u595A\u5A11\u5A18\u5A1C\u5A1F\u5A1B\u5A13\u59EC\u5A20\u5A23\u5A29\u5A25\u5A0C\u5A09\u5B6B\u5C58\u5BB0\u5BB3\u5BB6\u5BB4\u5BAE\u5BB5\u5BB9\u5BB8\u5C04\u5C51\u5C55\u5C50\u5CED\u5CFD\u5CFB\u5CEA\u5CE8\u5CF0\u5CF6\u5D01\u5CF4\u5DEE\u5E2D\u5E2B\u5EAB\u5EAD\u5EA7\u5F31\u5F92\u5F91\u5F90\u6059\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u6063\u6065\u6050\u6055\u606D\u6069\u606F\u6084\u609F\u609A\u608D\u6094\u608C\u6085\u6096\u6247\u62F3\u6308\u62FF\u634E\u633E\u632F\u6355\u6342\u6346\u634F\u6349\u633A\u6350\u633D\u632A\u632B\u6328\u634D\u634C\u6548\u6549\u6599\u65C1\u65C5\u6642\u6649\u664F\u6643\u6652\u664C\u6645\u6641\u66F8\u6714\u6715\u6717\u6821\u6838\u6848\u6846\u6853\u6839\u6842\u6854\u6829\u68B3\u6817\u684C\u6851\u683D\u67F4\u6850\u6840\u683C\u6843\u682A\u6845\u6813\u6818\u6841\u6B8A\u6B89\u6BB7\u6C23\u6C27\u6C28\u6C26\u6C24\u6CF0\u6D6A\u6D95\u6D88\u6D87\u6D66\u6D78\u6D77\u6D59\u6D93\uFFFD".split("");
        for (j3 = 0; j3 != D5[174].length; ++j3)
          if (D5[174][j3].charCodeAt(0) !== 65533) {
            e7[D5[174][j3]] = 44544 + j3;
            d2[44544 + j3] = D5[174][j3];
          }
        D5[175] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u6D6C\u6D89\u6D6E\u6D5A\u6D74\u6D69\u6D8C\u6D8A\u6D79\u6D85\u6D65\u6D94\u70CA\u70D8\u70E4\u70D9\u70C8\u70CF\u7239\u7279\u72FC\u72F9\u72FD\u72F8\u72F7\u7386\u73ED\u7409\u73EE\u73E0\u73EA\u73DE\u7554\u755D\u755C\u755A\u7559\u75BE\u75C5\u75C7\u75B2\u75B3\u75BD\u75BC\u75B9\u75C2\u75B8\u768B\u76B0\u76CA\u76CD\u76CE\u7729\u771F\u7720\u7728\u77E9\u7830\u7827\u7838\u781D\u7834\u7837\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u7825\u782D\u7820\u781F\u7832\u7955\u7950\u7960\u795F\u7956\u795E\u795D\u7957\u795A\u79E4\u79E3\u79E7\u79DF\u79E6\u79E9\u79D8\u7A84\u7A88\u7AD9\u7B06\u7B11\u7C89\u7D21\u7D17\u7D0B\u7D0A\u7D20\u7D22\u7D14\u7D10\u7D15\u7D1A\u7D1C\u7D0D\u7D19\u7D1B\u7F3A\u7F5F\u7F94\u7FC5\u7FC1\u8006\u8018\u8015\u8019\u8017\u803D\u803F\u80F1\u8102\u80F0\u8105\u80ED\u80F4\u8106\u80F8\u80F3\u8108\u80FD\u810A\u80FC\u80EF\u81ED\u81EC\u8200\u8210\u822A\u822B\u8228\u822C\u82BB\u832B\u8352\u8354\u834A\u8338\u8350\u8349\u8335\u8334\u834F\u8332\u8339\u8336\u8317\u8340\u8331\u8328\u8343\uFFFD".split("");
        for (j3 = 0; j3 != D5[175].length; ++j3)
          if (D5[175][j3].charCodeAt(0) !== 65533) {
            e7[D5[175][j3]] = 44800 + j3;
            d2[44800 + j3] = D5[175][j3];
          }
        D5[176] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u8654\u868A\u86AA\u8693\u86A4\u86A9\u868C\u86A3\u869C\u8870\u8877\u8881\u8882\u887D\u8879\u8A18\u8A10\u8A0E\u8A0C\u8A15\u8A0A\u8A17\u8A13\u8A16\u8A0F\u8A11\u8C48\u8C7A\u8C79\u8CA1\u8CA2\u8D77\u8EAC\u8ED2\u8ED4\u8ECF\u8FB1\u9001\u9006\u8FF7\u9000\u8FFA\u8FF4\u9003\u8FFD\u9005\u8FF8\u9095\u90E1\u90DD\u90E2\u9152\u914D\u914C\u91D8\u91DD\u91D7\u91DC\u91D9\u9583\u9662\u9663\u9661\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u965B\u965D\u9664\u9658\u965E\u96BB\u98E2\u99AC\u9AA8\u9AD8\u9B25\u9B32\u9B3C\u4E7E\u507A\u507D\u505C\u5047\u5043\u504C\u505A\u5049\u5065\u5076\u504E\u5055\u5075\u5074\u5077\u504F\u500F\u506F\u506D\u515C\u5195\u51F0\u526A\u526F\u52D2\u52D9\u52D8\u52D5\u5310\u530F\u5319\u533F\u5340\u533E\u53C3\u66FC\u5546\u556A\u5566\u5544\u555E\u5561\u5543\u554A\u5531\u5556\u554F\u5555\u552F\u5564\u5538\u552E\u555C\u552C\u5563\u5533\u5541\u5557\u5708\u570B\u5709\u57DF\u5805\u580A\u5806\u57E0\u57E4\u57FA\u5802\u5835\u57F7\u57F9\u5920\u5962\u5A36\u5A41\u5A49\u5A66\u5A6A\u5A40\uFFFD".split("");
        for (j3 = 0; j3 != D5[176].length; ++j3)
          if (D5[176][j3].charCodeAt(0) !== 65533) {
            e7[D5[176][j3]] = 45056 + j3;
            d2[45056 + j3] = D5[176][j3];
          }
        D5[177] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u5A3C\u5A62\u5A5A\u5A46\u5A4A\u5B70\u5BC7\u5BC5\u5BC4\u5BC2\u5BBF\u5BC6\u5C09\u5C08\u5C07\u5C60\u5C5C\u5C5D\u5D07\u5D06\u5D0E\u5D1B\u5D16\u5D22\u5D11\u5D29\u5D14\u5D19\u5D24\u5D27\u5D17\u5DE2\u5E38\u5E36\u5E33\u5E37\u5EB7\u5EB8\u5EB6\u5EB5\u5EBE\u5F35\u5F37\u5F57\u5F6C\u5F69\u5F6B\u5F97\u5F99\u5F9E\u5F98\u5FA1\u5FA0\u5F9C\u607F\u60A3\u6089\u60A0\u60A8\u60CB\u60B4\u60E6\u60BD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u60C5\u60BB\u60B5\u60DC\u60BC\u60D8\u60D5\u60C6\u60DF\u60B8\u60DA\u60C7\u621A\u621B\u6248\u63A0\u63A7\u6372\u6396\u63A2\u63A5\u6377\u6367\u6398\u63AA\u6371\u63A9\u6389\u6383\u639B\u636B\u63A8\u6384\u6388\u6399\u63A1\u63AC\u6392\u638F\u6380\u637B\u6369\u6368\u637A\u655D\u6556\u6551\u6559\u6557\u555F\u654F\u6558\u6555\u6554\u659C\u659B\u65AC\u65CF\u65CB\u65CC\u65CE\u665D\u665A\u6664\u6668\u6666\u665E\u66F9\u52D7\u671B\u6881\u68AF\u68A2\u6893\u68B5\u687F\u6876\u68B1\u68A7\u6897\u68B0\u6883\u68C4\u68AD\u6886\u6885\u6894\u689D\u68A8\u689F\u68A1\u6882\u6B32\u6BBA\uFFFD".split("");
        for (j3 = 0; j3 != D5[177].length; ++j3)
          if (D5[177][j3].charCodeAt(0) !== 65533) {
            e7[D5[177][j3]] = 45312 + j3;
            d2[45312 + j3] = D5[177][j3];
          }
        D5[178] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u6BEB\u6BEC\u6C2B\u6D8E\u6DBC\u6DF3\u6DD9\u6DB2\u6DE1\u6DCC\u6DE4\u6DFB\u6DFA\u6E05\u6DC7\u6DCB\u6DAF\u6DD1\u6DAE\u6DDE\u6DF9\u6DB8\u6DF7\u6DF5\u6DC5\u6DD2\u6E1A\u6DB5\u6DDA\u6DEB\u6DD8\u6DEA\u6DF1\u6DEE\u6DE8\u6DC6\u6DC4\u6DAA\u6DEC\u6DBF\u6DE6\u70F9\u7109\u710A\u70FD\u70EF\u723D\u727D\u7281\u731C\u731B\u7316\u7313\u7319\u7387\u7405\u740A\u7403\u7406\u73FE\u740D\u74E0\u74F6\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u74F7\u751C\u7522\u7565\u7566\u7562\u7570\u758F\u75D4\u75D5\u75B5\u75CA\u75CD\u768E\u76D4\u76D2\u76DB\u7737\u773E\u773C\u7736\u7738\u773A\u786B\u7843\u784E\u7965\u7968\u796D\u79FB\u7A92\u7A95\u7B20\u7B28\u7B1B\u7B2C\u7B26\u7B19\u7B1E\u7B2E\u7C92\u7C97\u7C95\u7D46\u7D43\u7D71\u7D2E\u7D39\u7D3C\u7D40\u7D30\u7D33\u7D44\u7D2F\u7D42\u7D32\u7D31\u7F3D\u7F9E\u7F9A\u7FCC\u7FCE\u7FD2\u801C\u804A\u8046\u812F\u8116\u8123\u812B\u8129\u8130\u8124\u8202\u8235\u8237\u8236\u8239\u838E\u839E\u8398\u8378\u83A2\u8396\u83BD\u83AB\u8392\u838A\u8393\u8389\u83A0\u8377\u837B\u837C\uFFFD".split("");
        for (j3 = 0; j3 != D5[178].length; ++j3)
          if (D5[178][j3].charCodeAt(0) !== 65533) {
            e7[D5[178][j3]] = 45568 + j3;
            d2[45568 + j3] = D5[178][j3];
          }
        D5[179] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u8386\u83A7\u8655\u5F6A\u86C7\u86C0\u86B6\u86C4\u86B5\u86C6\u86CB\u86B1\u86AF\u86C9\u8853\u889E\u8888\u88AB\u8892\u8896\u888D\u888B\u8993\u898F\u8A2A\u8A1D\u8A23\u8A25\u8A31\u8A2D\u8A1F\u8A1B\u8A22\u8C49\u8C5A\u8CA9\u8CAC\u8CAB\u8CA8\u8CAA\u8CA7\u8D67\u8D66\u8DBE\u8DBA\u8EDB\u8EDF\u9019\u900D\u901A\u9017\u9023\u901F\u901D\u9010\u9015\u901E\u9020\u900F\u9022\u9016\u901B\u9014\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u90E8\u90ED\u90FD\u9157\u91CE\u91F5\u91E6\u91E3\u91E7\u91ED\u91E9\u9589\u966A\u9675\u9673\u9678\u9670\u9674\u9676\u9677\u966C\u96C0\u96EA\u96E9\u7AE0\u7ADF\u9802\u9803\u9B5A\u9CE5\u9E75\u9E7F\u9EA5\u9EBB\u50A2\u508D\u5085\u5099\u5091\u5080\u5096\u5098\u509A\u6700\u51F1\u5272\u5274\u5275\u5269\u52DE\u52DD\u52DB\u535A\u53A5\u557B\u5580\u55A7\u557C\u558A\u559D\u5598\u5582\u559C\u55AA\u5594\u5587\u558B\u5583\u55B3\u55AE\u559F\u553E\u55B2\u559A\u55BB\u55AC\u55B1\u557E\u5589\u55AB\u5599\u570D\u582F\u582A\u5834\u5824\u5830\u5831\u5821\u581D\u5820\u58F9\u58FA\u5960\uFFFD".split("");
        for (j3 = 0; j3 != D5[179].length; ++j3)
          if (D5[179][j3].charCodeAt(0) !== 65533) {
            e7[D5[179][j3]] = 45824 + j3;
            d2[45824 + j3] = D5[179][j3];
          }
        D5[180] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u5A77\u5A9A\u5A7F\u5A92\u5A9B\u5AA7\u5B73\u5B71\u5BD2\u5BCC\u5BD3\u5BD0\u5C0A\u5C0B\u5C31\u5D4C\u5D50\u5D34\u5D47\u5DFD\u5E45\u5E3D\u5E40\u5E43\u5E7E\u5ECA\u5EC1\u5EC2\u5EC4\u5F3C\u5F6D\u5FA9\u5FAA\u5FA8\u60D1\u60E1\u60B2\u60B6\u60E0\u611C\u6123\u60FA\u6115\u60F0\u60FB\u60F4\u6168\u60F1\u610E\u60F6\u6109\u6100\u6112\u621F\u6249\u63A3\u638C\u63CF\u63C0\u63E9\u63C9\u63C6\u63CD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u63D2\u63E3\u63D0\u63E1\u63D6\u63ED\u63EE\u6376\u63F4\u63EA\u63DB\u6452\u63DA\u63F9\u655E\u6566\u6562\u6563\u6591\u6590\u65AF\u666E\u6670\u6674\u6676\u666F\u6691\u667A\u667E\u6677\u66FE\u66FF\u671F\u671D\u68FA\u68D5\u68E0\u68D8\u68D7\u6905\u68DF\u68F5\u68EE\u68E7\u68F9\u68D2\u68F2\u68E3\u68CB\u68CD\u690D\u6912\u690E\u68C9\u68DA\u696E\u68FB\u6B3E\u6B3A\u6B3D\u6B98\u6B96\u6BBC\u6BEF\u6C2E\u6C2F\u6C2C\u6E2F\u6E38\u6E54\u6E21\u6E32\u6E67\u6E4A\u6E20\u6E25\u6E23\u6E1B\u6E5B\u6E58\u6E24\u6E56\u6E6E\u6E2D\u6E26\u6E6F\u6E34\u6E4D\u6E3A\u6E2C\u6E43\u6E1D\u6E3E\u6ECB\uFFFD".split("");
        for (j3 = 0; j3 != D5[180].length; ++j3)
          if (D5[180][j3].charCodeAt(0) !== 65533) {
            e7[D5[180][j3]] = 46080 + j3;
            d2[46080 + j3] = D5[180][j3];
          }
        D5[181] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u6E89\u6E19\u6E4E\u6E63\u6E44\u6E72\u6E69\u6E5F\u7119\u711A\u7126\u7130\u7121\u7136\u716E\u711C\u724C\u7284\u7280\u7336\u7325\u7334\u7329\u743A\u742A\u7433\u7422\u7425\u7435\u7436\u7434\u742F\u741B\u7426\u7428\u7525\u7526\u756B\u756A\u75E2\u75DB\u75E3\u75D9\u75D8\u75DE\u75E0\u767B\u767C\u7696\u7693\u76B4\u76DC\u774F\u77ED\u785D\u786C\u786F\u7A0D\u7A08\u7A0B\u7A05\u7A00\u7A98\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u7A97\u7A96\u7AE5\u7AE3\u7B49\u7B56\u7B46\u7B50\u7B52\u7B54\u7B4D\u7B4B\u7B4F\u7B51\u7C9F\u7CA5\u7D5E\u7D50\u7D68\u7D55\u7D2B\u7D6E\u7D72\u7D61\u7D66\u7D62\u7D70\u7D73\u5584\u7FD4\u7FD5\u800B\u8052\u8085\u8155\u8154\u814B\u8151\u814E\u8139\u8146\u813E\u814C\u8153\u8174\u8212\u821C\u83E9\u8403\u83F8\u840D\u83E0\u83C5\u840B\u83C1\u83EF\u83F1\u83F4\u8457\u840A\u83F0\u840C\u83CC\u83FD\u83F2\u83CA\u8438\u840E\u8404\u83DC\u8407\u83D4\u83DF\u865B\u86DF\u86D9\u86ED\u86D4\u86DB\u86E4\u86D0\u86DE\u8857\u88C1\u88C2\u88B1\u8983\u8996\u8A3B\u8A60\u8A55\u8A5E\u8A3C\u8A41\uFFFD".split("");
        for (j3 = 0; j3 != D5[181].length; ++j3)
          if (D5[181][j3].charCodeAt(0) !== 65533) {
            e7[D5[181][j3]] = 46336 + j3;
            d2[46336 + j3] = D5[181][j3];
          }
        D5[182] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u8A54\u8A5B\u8A50\u8A46\u8A34\u8A3A\u8A36\u8A56\u8C61\u8C82\u8CAF\u8CBC\u8CB3\u8CBD\u8CC1\u8CBB\u8CC0\u8CB4\u8CB7\u8CB6\u8CBF\u8CB8\u8D8A\u8D85\u8D81\u8DCE\u8DDD\u8DCB\u8DDA\u8DD1\u8DCC\u8DDB\u8DC6\u8EFB\u8EF8\u8EFC\u8F9C\u902E\u9035\u9031\u9038\u9032\u9036\u9102\u90F5\u9109\u90FE\u9163\u9165\u91CF\u9214\u9215\u9223\u9209\u921E\u920D\u9210\u9207\u9211\u9594\u958F\u958B\u9591\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u9593\u9592\u958E\u968A\u968E\u968B\u967D\u9685\u9686\u968D\u9672\u9684\u96C1\u96C5\u96C4\u96C6\u96C7\u96EF\u96F2\u97CC\u9805\u9806\u9808\u98E7\u98EA\u98EF\u98E9\u98F2\u98ED\u99AE\u99AD\u9EC3\u9ECD\u9ED1\u4E82\u50AD\u50B5\u50B2\u50B3\u50C5\u50BE\u50AC\u50B7\u50BB\u50AF\u50C7\u527F\u5277\u527D\u52DF\u52E6\u52E4\u52E2\u52E3\u532F\u55DF\u55E8\u55D3\u55E6\u55CE\u55DC\u55C7\u55D1\u55E3\u55E4\u55EF\u55DA\u55E1\u55C5\u55C6\u55E5\u55C9\u5712\u5713\u585E\u5851\u5858\u5857\u585A\u5854\u586B\u584C\u586D\u584A\u5862\u5852\u584B\u5967\u5AC1\u5AC9\u5ACC\u5ABE\u5ABD\u5ABC\uFFFD".split("");
        for (j3 = 0; j3 != D5[182].length; ++j3)
          if (D5[182][j3].charCodeAt(0) !== 65533) {
            e7[D5[182][j3]] = 46592 + j3;
            d2[46592 + j3] = D5[182][j3];
          }
        D5[183] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u5AB3\u5AC2\u5AB2\u5D69\u5D6F\u5E4C\u5E79\u5EC9\u5EC8\u5F12\u5F59\u5FAC\u5FAE\u611A\u610F\u6148\u611F\u60F3\u611B\u60F9\u6101\u6108\u614E\u614C\u6144\u614D\u613E\u6134\u6127\u610D\u6106\u6137\u6221\u6222\u6413\u643E\u641E\u642A\u642D\u643D\u642C\u640F\u641C\u6414\u640D\u6436\u6416\u6417\u6406\u656C\u659F\u65B0\u6697\u6689\u6687\u6688\u6696\u6684\u6698\u668D\u6703\u6994\u696D\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u695A\u6977\u6960\u6954\u6975\u6930\u6982\u694A\u6968\u696B\u695E\u6953\u6979\u6986\u695D\u6963\u695B\u6B47\u6B72\u6BC0\u6BBF\u6BD3\u6BFD\u6EA2\u6EAF\u6ED3\u6EB6\u6EC2\u6E90\u6E9D\u6EC7\u6EC5\u6EA5\u6E98\u6EBC\u6EBA\u6EAB\u6ED1\u6E96\u6E9C\u6EC4\u6ED4\u6EAA\u6EA7\u6EB4\u714E\u7159\u7169\u7164\u7149\u7167\u715C\u716C\u7166\u714C\u7165\u715E\u7146\u7168\u7156\u723A\u7252\u7337\u7345\u733F\u733E\u746F\u745A\u7455\u745F\u745E\u7441\u743F\u7459\u745B\u745C\u7576\u7578\u7600\u75F0\u7601\u75F2\u75F1\u75FA\u75FF\u75F4\u75F3\u76DE\u76DF\u775B\u776B\u7766\u775E\u7763\uFFFD".split("");
        for (j3 = 0; j3 != D5[183].length; ++j3)
          if (D5[183][j3].charCodeAt(0) !== 65533) {
            e7[D5[183][j3]] = 46848 + j3;
            d2[46848 + j3] = D5[183][j3];
          }
        D5[184] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u7779\u776A\u776C\u775C\u7765\u7768\u7762\u77EE\u788E\u78B0\u7897\u7898\u788C\u7889\u787C\u7891\u7893\u787F\u797A\u797F\u7981\u842C\u79BD\u7A1C\u7A1A\u7A20\u7A14\u7A1F\u7A1E\u7A9F\u7AA0\u7B77\u7BC0\u7B60\u7B6E\u7B67\u7CB1\u7CB3\u7CB5\u7D93\u7D79\u7D91\u7D81\u7D8F\u7D5B\u7F6E\u7F69\u7F6A\u7F72\u7FA9\u7FA8\u7FA4\u8056\u8058\u8086\u8084\u8171\u8170\u8178\u8165\u816E\u8173\u816B\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u8179\u817A\u8166\u8205\u8247\u8482\u8477\u843D\u8431\u8475\u8466\u846B\u8449\u846C\u845B\u843C\u8435\u8461\u8463\u8469\u846D\u8446\u865E\u865C\u865F\u86F9\u8713\u8708\u8707\u8700\u86FE\u86FB\u8702\u8703\u8706\u870A\u8859\u88DF\u88D4\u88D9\u88DC\u88D8\u88DD\u88E1\u88CA\u88D5\u88D2\u899C\u89E3\u8A6B\u8A72\u8A73\u8A66\u8A69\u8A70\u8A87\u8A7C\u8A63\u8AA0\u8A71\u8A85\u8A6D\u8A62\u8A6E\u8A6C\u8A79\u8A7B\u8A3E\u8A68\u8C62\u8C8A\u8C89\u8CCA\u8CC7\u8CC8\u8CC4\u8CB2\u8CC3\u8CC2\u8CC5\u8DE1\u8DDF\u8DE8\u8DEF\u8DF3\u8DFA\u8DEA\u8DE4\u8DE6\u8EB2\u8F03\u8F09\u8EFE\u8F0A\uFFFD".split("");
        for (j3 = 0; j3 != D5[184].length; ++j3)
          if (D5[184][j3].charCodeAt(0) !== 65533) {
            e7[D5[184][j3]] = 47104 + j3;
            d2[47104 + j3] = D5[184][j3];
          }
        D5[185] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u8F9F\u8FB2\u904B\u904A\u9053\u9042\u9054\u903C\u9055\u9050\u9047\u904F\u904E\u904D\u9051\u903E\u9041\u9112\u9117\u916C\u916A\u9169\u91C9\u9237\u9257\u9238\u923D\u9240\u923E\u925B\u924B\u9264\u9251\u9234\u9249\u924D\u9245\u9239\u923F\u925A\u9598\u9698\u9694\u9695\u96CD\u96CB\u96C9\u96CA\u96F7\u96FB\u96F9\u96F6\u9756\u9774\u9776\u9810\u9811\u9813\u980A\u9812\u980C\u98FC\u98F4\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u98FD\u98FE\u99B3\u99B1\u99B4\u9AE1\u9CE9\u9E82\u9F0E\u9F13\u9F20\u50E7\u50EE\u50E5\u50D6\u50ED\u50DA\u50D5\u50CF\u50D1\u50F1\u50CE\u50E9\u5162\u51F3\u5283\u5282\u5331\u53AD\u55FE\u5600\u561B\u5617\u55FD\u5614\u5606\u5609\u560D\u560E\u55F7\u5616\u561F\u5608\u5610\u55F6\u5718\u5716\u5875\u587E\u5883\u5893\u588A\u5879\u5885\u587D\u58FD\u5925\u5922\u5924\u596A\u5969\u5AE1\u5AE6\u5AE9\u5AD7\u5AD6\u5AD8\u5AE3\u5B75\u5BDE\u5BE7\u5BE1\u5BE5\u5BE6\u5BE8\u5BE2\u5BE4\u5BDF\u5C0D\u5C62\u5D84\u5D87\u5E5B\u5E63\u5E55\u5E57\u5E54\u5ED3\u5ED6\u5F0A\u5F46\u5F70\u5FB9\u6147\uFFFD".split("");
        for (j3 = 0; j3 != D5[185].length; ++j3)
          if (D5[185][j3].charCodeAt(0) !== 65533) {
            e7[D5[185][j3]] = 47360 + j3;
            d2[47360 + j3] = D5[185][j3];
          }
        D5[186] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u613F\u614B\u6177\u6162\u6163\u615F\u615A\u6158\u6175\u622A\u6487\u6458\u6454\u64A4\u6478\u645F\u647A\u6451\u6467\u6434\u646D\u647B\u6572\u65A1\u65D7\u65D6\u66A2\u66A8\u669D\u699C\u69A8\u6995\u69C1\u69AE\u69D3\u69CB\u699B\u69B7\u69BB\u69AB\u69B4\u69D0\u69CD\u69AD\u69CC\u69A6\u69C3\u69A3\u6B49\u6B4C\u6C33\u6F33\u6F14\u6EFE\u6F13\u6EF4\u6F29\u6F3E\u6F20\u6F2C\u6F0F\u6F02\u6F22\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u6EFF\u6EEF\u6F06\u6F31\u6F38\u6F32\u6F23\u6F15\u6F2B\u6F2F\u6F88\u6F2A\u6EEC\u6F01\u6EF2\u6ECC\u6EF7\u7194\u7199\u717D\u718A\u7184\u7192\u723E\u7292\u7296\u7344\u7350\u7464\u7463\u746A\u7470\u746D\u7504\u7591\u7627\u760D\u760B\u7609\u7613\u76E1\u76E3\u7784\u777D\u777F\u7761\u78C1\u789F\u78A7\u78B3\u78A9\u78A3\u798E\u798F\u798D\u7A2E\u7A31\u7AAA\u7AA9\u7AED\u7AEF\u7BA1\u7B95\u7B8B\u7B75\u7B97\u7B9D\u7B94\u7B8F\u7BB8\u7B87\u7B84\u7CB9\u7CBD\u7CBE\u7DBB\u7DB0\u7D9C\u7DBD\u7DBE\u7DA0\u7DCA\u7DB4\u7DB2\u7DB1\u7DBA\u7DA2\u7DBF\u7DB5\u7DB8\u7DAD\u7DD2\u7DC7\u7DAC\uFFFD".split("");
        for (j3 = 0; j3 != D5[186].length; ++j3)
          if (D5[186][j3].charCodeAt(0) !== 65533) {
            e7[D5[186][j3]] = 47616 + j3;
            d2[47616 + j3] = D5[186][j3];
          }
        D5[187] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u7F70\u7FE0\u7FE1\u7FDF\u805E\u805A\u8087\u8150\u8180\u818F\u8188\u818A\u817F\u8182\u81E7\u81FA\u8207\u8214\u821E\u824B\u84C9\u84BF\u84C6\u84C4\u8499\u849E\u84B2\u849C\u84CB\u84B8\u84C0\u84D3\u8490\u84BC\u84D1\u84CA\u873F\u871C\u873B\u8722\u8725\u8734\u8718\u8755\u8737\u8729\u88F3\u8902\u88F4\u88F9\u88F8\u88FD\u88E8\u891A\u88EF\u8AA6\u8A8C\u8A9E\u8AA3\u8A8D\u8AA1\u8A93\u8AA4\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u8AAA\u8AA5\u8AA8\u8A98\u8A91\u8A9A\u8AA7\u8C6A\u8C8D\u8C8C\u8CD3\u8CD1\u8CD2\u8D6B\u8D99\u8D95\u8DFC\u8F14\u8F12\u8F15\u8F13\u8FA3\u9060\u9058\u905C\u9063\u9059\u905E\u9062\u905D\u905B\u9119\u9118\u911E\u9175\u9178\u9177\u9174\u9278\u9280\u9285\u9298\u9296\u927B\u9293\u929C\u92A8\u927C\u9291\u95A1\u95A8\u95A9\u95A3\u95A5\u95A4\u9699\u969C\u969B\u96CC\u96D2\u9700\u977C\u9785\u97F6\u9817\u9818\u98AF\u98B1\u9903\u9905\u990C\u9909\u99C1\u9AAF\u9AB0\u9AE6\u9B41\u9B42\u9CF4\u9CF6\u9CF3\u9EBC\u9F3B\u9F4A\u5104\u5100\u50FB\u50F5\u50F9\u5102\u5108\u5109\u5105\u51DC\uFFFD".split("");
        for (j3 = 0; j3 != D5[187].length; ++j3)
          if (D5[187][j3].charCodeAt(0) !== 65533) {
            e7[D5[187][j3]] = 47872 + j3;
            d2[47872 + j3] = D5[187][j3];
          }
        D5[188] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u5287\u5288\u5289\u528D\u528A\u52F0\u53B2\u562E\u563B\u5639\u5632\u563F\u5634\u5629\u5653\u564E\u5657\u5674\u5636\u562F\u5630\u5880\u589F\u589E\u58B3\u589C\u58AE\u58A9\u58A6\u596D\u5B09\u5AFB\u5B0B\u5AF5\u5B0C\u5B08\u5BEE\u5BEC\u5BE9\u5BEB\u5C64\u5C65\u5D9D\u5D94\u5E62\u5E5F\u5E61\u5EE2\u5EDA\u5EDF\u5EDD\u5EE3\u5EE0\u5F48\u5F71\u5FB7\u5FB5\u6176\u6167\u616E\u615D\u6155\u6182\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u617C\u6170\u616B\u617E\u61A7\u6190\u61AB\u618E\u61AC\u619A\u61A4\u6194\u61AE\u622E\u6469\u646F\u6479\u649E\u64B2\u6488\u6490\u64B0\u64A5\u6493\u6495\u64A9\u6492\u64AE\u64AD\u64AB\u649A\u64AC\u6499\u64A2\u64B3\u6575\u6577\u6578\u66AE\u66AB\u66B4\u66B1\u6A23\u6A1F\u69E8\u6A01\u6A1E\u6A19\u69FD\u6A21\u6A13\u6A0A\u69F3\u6A02\u6A05\u69ED\u6A11\u6B50\u6B4E\u6BA4\u6BC5\u6BC6\u6F3F\u6F7C\u6F84\u6F51\u6F66\u6F54\u6F86\u6F6D\u6F5B\u6F78\u6F6E\u6F8E\u6F7A\u6F70\u6F64\u6F97\u6F58\u6ED5\u6F6F\u6F60\u6F5F\u719F\u71AC\u71B1\u71A8\u7256\u729B\u734E\u7357\u7469\u748B\u7483\uFFFD".split("");
        for (j3 = 0; j3 != D5[188].length; ++j3)
          if (D5[188][j3].charCodeAt(0) !== 65533) {
            e7[D5[188][j3]] = 48128 + j3;
            d2[48128 + j3] = D5[188][j3];
          }
        D5[189] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u747E\u7480\u757F\u7620\u7629\u761F\u7624\u7626\u7621\u7622\u769A\u76BA\u76E4\u778E\u7787\u778C\u7791\u778B\u78CB\u78C5\u78BA\u78CA\u78BE\u78D5\u78BC\u78D0\u7A3F\u7A3C\u7A40\u7A3D\u7A37\u7A3B\u7AAF\u7AAE\u7BAD\u7BB1\u7BC4\u7BB4\u7BC6\u7BC7\u7BC1\u7BA0\u7BCC\u7CCA\u7DE0\u7DF4\u7DEF\u7DFB\u7DD8\u7DEC\u7DDD\u7DE8\u7DE3\u7DDA\u7DDE\u7DE9\u7D9E\u7DD9\u7DF2\u7DF9\u7F75\u7F77\u7FAF\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u7FE9\u8026\u819B\u819C\u819D\u81A0\u819A\u8198\u8517\u853D\u851A\u84EE\u852C\u852D\u8513\u8511\u8523\u8521\u8514\u84EC\u8525\u84FF\u8506\u8782\u8774\u8776\u8760\u8766\u8778\u8768\u8759\u8757\u874C\u8753\u885B\u885D\u8910\u8907\u8912\u8913\u8915\u890A\u8ABC\u8AD2\u8AC7\u8AC4\u8A95\u8ACB\u8AF8\u8AB2\u8AC9\u8AC2\u8ABF\u8AB0\u8AD6\u8ACD\u8AB6\u8AB9\u8ADB\u8C4C\u8C4E\u8C6C\u8CE0\u8CDE\u8CE6\u8CE4\u8CEC\u8CED\u8CE2\u8CE3\u8CDC\u8CEA\u8CE1\u8D6D\u8D9F\u8DA3\u8E2B\u8E10\u8E1D\u8E22\u8E0F\u8E29\u8E1F\u8E21\u8E1E\u8EBA\u8F1D\u8F1B\u8F1F\u8F29\u8F26\u8F2A\u8F1C\u8F1E\uFFFD".split("");
        for (j3 = 0; j3 != D5[189].length; ++j3)
          if (D5[189][j3].charCodeAt(0) !== 65533) {
            e7[D5[189][j3]] = 48384 + j3;
            d2[48384 + j3] = D5[189][j3];
          }
        D5[190] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u8F25\u9069\u906E\u9068\u906D\u9077\u9130\u912D\u9127\u9131\u9187\u9189\u918B\u9183\u92C5\u92BB\u92B7\u92EA\u92AC\u92E4\u92C1\u92B3\u92BC\u92D2\u92C7\u92F0\u92B2\u95AD\u95B1\u9704\u9706\u9707\u9709\u9760\u978D\u978B\u978F\u9821\u982B\u981C\u98B3\u990A\u9913\u9912\u9918\u99DD\u99D0\u99DF\u99DB\u99D1\u99D5\u99D2\u99D9\u9AB7\u9AEE\u9AEF\u9B27\u9B45\u9B44\u9B77\u9B6F\u9D06\u9D09\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u9D03\u9EA9\u9EBE\u9ECE\u58A8\u9F52\u5112\u5118\u5114\u5110\u5115\u5180\u51AA\u51DD\u5291\u5293\u52F3\u5659\u566B\u5679\u5669\u5664\u5678\u566A\u5668\u5665\u5671\u566F\u566C\u5662\u5676\u58C1\u58BE\u58C7\u58C5\u596E\u5B1D\u5B34\u5B78\u5BF0\u5C0E\u5F4A\u61B2\u6191\u61A9\u618A\u61CD\u61B6\u61BE\u61CA\u61C8\u6230\u64C5\u64C1\u64CB\u64BB\u64BC\u64DA\u64C4\u64C7\u64C2\u64CD\u64BF\u64D2\u64D4\u64BE\u6574\u66C6\u66C9\u66B9\u66C4\u66C7\u66B8\u6A3D\u6A38\u6A3A\u6A59\u6A6B\u6A58\u6A39\u6A44\u6A62\u6A61\u6A4B\u6A47\u6A35\u6A5F\u6A48\u6B59\u6B77\u6C05\u6FC2\u6FB1\u6FA1\uFFFD".split("");
        for (j3 = 0; j3 != D5[190].length; ++j3)
          if (D5[190][j3].charCodeAt(0) !== 65533) {
            e7[D5[190][j3]] = 48640 + j3;
            d2[48640 + j3] = D5[190][j3];
          }
        D5[191] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u6FC3\u6FA4\u6FC1\u6FA7\u6FB3\u6FC0\u6FB9\u6FB6\u6FA6\u6FA0\u6FB4\u71BE\u71C9\u71D0\u71D2\u71C8\u71D5\u71B9\u71CE\u71D9\u71DC\u71C3\u71C4\u7368\u749C\u74A3\u7498\u749F\u749E\u74E2\u750C\u750D\u7634\u7638\u763A\u76E7\u76E5\u77A0\u779E\u779F\u77A5\u78E8\u78DA\u78EC\u78E7\u79A6\u7A4D\u7A4E\u7A46\u7A4C\u7A4B\u7ABA\u7BD9\u7C11\u7BC9\u7BE4\u7BDB\u7BE1\u7BE9\u7BE6\u7CD5\u7CD6\u7E0A\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u7E11\u7E08\u7E1B\u7E23\u7E1E\u7E1D\u7E09\u7E10\u7F79\u7FB2\u7FF0\u7FF1\u7FEE\u8028\u81B3\u81A9\u81A8\u81FB\u8208\u8258\u8259\u854A\u8559\u8548\u8568\u8569\u8543\u8549\u856D\u856A\u855E\u8783\u879F\u879E\u87A2\u878D\u8861\u892A\u8932\u8925\u892B\u8921\u89AA\u89A6\u8AE6\u8AFA\u8AEB\u8AF1\u8B00\u8ADC\u8AE7\u8AEE\u8AFE\u8B01\u8B02\u8AF7\u8AED\u8AF3\u8AF6\u8AFC\u8C6B\u8C6D\u8C93\u8CF4\u8E44\u8E31\u8E34\u8E42\u8E39\u8E35\u8F3B\u8F2F\u8F38\u8F33\u8FA8\u8FA6\u9075\u9074\u9078\u9072\u907C\u907A\u9134\u9192\u9320\u9336\u92F8\u9333\u932F\u9322\u92FC\u932B\u9304\u931A\uFFFD".split("");
        for (j3 = 0; j3 != D5[191].length; ++j3)
          if (D5[191][j3].charCodeAt(0) !== 65533) {
            e7[D5[191][j3]] = 48896 + j3;
            d2[48896 + j3] = D5[191][j3];
          }
        D5[192] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u9310\u9326\u9321\u9315\u932E\u9319\u95BB\u96A7\u96A8\u96AA\u96D5\u970E\u9711\u9716\u970D\u9713\u970F\u975B\u975C\u9766\u9798\u9830\u9838\u983B\u9837\u982D\u9839\u9824\u9910\u9928\u991E\u991B\u9921\u991A\u99ED\u99E2\u99F1\u9AB8\u9ABC\u9AFB\u9AED\u9B28\u9B91\u9D15\u9D23\u9D26\u9D28\u9D12\u9D1B\u9ED8\u9ED4\u9F8D\u9F9C\u512A\u511F\u5121\u5132\u52F5\u568E\u5680\u5690\u5685\u5687\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u568F\u58D5\u58D3\u58D1\u58CE\u5B30\u5B2A\u5B24\u5B7A\u5C37\u5C68\u5DBC\u5DBA\u5DBD\u5DB8\u5E6B\u5F4C\u5FBD\u61C9\u61C2\u61C7\u61E6\u61CB\u6232\u6234\u64CE\u64CA\u64D8\u64E0\u64F0\u64E6\u64EC\u64F1\u64E2\u64ED\u6582\u6583\u66D9\u66D6\u6A80\u6A94\u6A84\u6AA2\u6A9C\u6ADB\u6AA3\u6A7E\u6A97\u6A90\u6AA0\u6B5C\u6BAE\u6BDA\u6C08\u6FD8\u6FF1\u6FDF\u6FE0\u6FDB\u6FE4\u6FEB\u6FEF\u6F80\u6FEC\u6FE1\u6FE9\u6FD5\u6FEE\u6FF0\u71E7\u71DF\u71EE\u71E6\u71E5\u71ED\u71EC\u71F4\u71E0\u7235\u7246\u7370\u7372\u74A9\u74B0\u74A6\u74A8\u7646\u7642\u764C\u76EA\u77B3\u77AA\u77B0\u77AC\uFFFD".split("");
        for (j3 = 0; j3 != D5[192].length; ++j3)
          if (D5[192][j3].charCodeAt(0) !== 65533) {
            e7[D5[192][j3]] = 49152 + j3;
            d2[49152 + j3] = D5[192][j3];
          }
        D5[193] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u77A7\u77AD\u77EF\u78F7\u78FA\u78F4\u78EF\u7901\u79A7\u79AA\u7A57\u7ABF\u7C07\u7C0D\u7BFE\u7BF7\u7C0C\u7BE0\u7CE0\u7CDC\u7CDE\u7CE2\u7CDF\u7CD9\u7CDD\u7E2E\u7E3E\u7E46\u7E37\u7E32\u7E43\u7E2B\u7E3D\u7E31\u7E45\u7E41\u7E34\u7E39\u7E48\u7E35\u7E3F\u7E2F\u7F44\u7FF3\u7FFC\u8071\u8072\u8070\u806F\u8073\u81C6\u81C3\u81BA\u81C2\u81C0\u81BF\u81BD\u81C9\u81BE\u81E8\u8209\u8271\u85AA\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u8584\u857E\u859C\u8591\u8594\u85AF\u859B\u8587\u85A8\u858A\u8667\u87C0\u87D1\u87B3\u87D2\u87C6\u87AB\u87BB\u87BA\u87C8\u87CB\u893B\u8936\u8944\u8938\u893D\u89AC\u8B0E\u8B17\u8B19\u8B1B\u8B0A\u8B20\u8B1D\u8B04\u8B10\u8C41\u8C3F\u8C73\u8CFA\u8CFD\u8CFC\u8CF8\u8CFB\u8DA8\u8E49\u8E4B\u8E48\u8E4A\u8F44\u8F3E\u8F42\u8F45\u8F3F\u907F\u907D\u9084\u9081\u9082\u9080\u9139\u91A3\u919E\u919C\u934D\u9382\u9328\u9375\u934A\u9365\u934B\u9318\u937E\u936C\u935B\u9370\u935A\u9354\u95CA\u95CB\u95CC\u95C8\u95C6\u96B1\u96B8\u96D6\u971C\u971E\u97A0\u97D3\u9846\u98B6\u9935\u9A01\uFFFD".split("");
        for (j3 = 0; j3 != D5[193].length; ++j3)
          if (D5[193][j3].charCodeAt(0) !== 65533) {
            e7[D5[193][j3]] = 49408 + j3;
            d2[49408 + j3] = D5[193][j3];
          }
        D5[194] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u99FF\u9BAE\u9BAB\u9BAA\u9BAD\u9D3B\u9D3F\u9E8B\u9ECF\u9EDE\u9EDC\u9EDD\u9EDB\u9F3E\u9F4B\u53E2\u5695\u56AE\u58D9\u58D8\u5B38\u5F5D\u61E3\u6233\u64F4\u64F2\u64FE\u6506\u64FA\u64FB\u64F7\u65B7\u66DC\u6726\u6AB3\u6AAC\u6AC3\u6ABB\u6AB8\u6AC2\u6AAE\u6AAF\u6B5F\u6B78\u6BAF\u7009\u700B\u6FFE\u7006\u6FFA\u7011\u700F\u71FB\u71FC\u71FE\u71F8\u7377\u7375\u74A7\u74BF\u7515\u7656\u7658\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u7652\u77BD\u77BF\u77BB\u77BC\u790E\u79AE\u7A61\u7A62\u7A60\u7AC4\u7AC5\u7C2B\u7C27\u7C2A\u7C1E\u7C23\u7C21\u7CE7\u7E54\u7E55\u7E5E\u7E5A\u7E61\u7E52\u7E59\u7F48\u7FF9\u7FFB\u8077\u8076\u81CD\u81CF\u820A\u85CF\u85A9\u85CD\u85D0\u85C9\u85B0\u85BA\u85B9\u85A6\u87EF\u87EC\u87F2\u87E0\u8986\u89B2\u89F4\u8B28\u8B39\u8B2C\u8B2B\u8C50\u8D05\u8E59\u8E63\u8E66\u8E64\u8E5F\u8E55\u8EC0\u8F49\u8F4D\u9087\u9083\u9088\u91AB\u91AC\u91D0\u9394\u938A\u9396\u93A2\u93B3\u93AE\u93AC\u93B0\u9398\u939A\u9397\u95D4\u95D6\u95D0\u95D5\u96E2\u96DC\u96D9\u96DB\u96DE\u9724\u97A3\u97A6\uFFFD".split("");
        for (j3 = 0; j3 != D5[194].length; ++j3)
          if (D5[194][j3].charCodeAt(0) !== 65533) {
            e7[D5[194][j3]] = 49664 + j3;
            d2[49664 + j3] = D5[194][j3];
          }
        D5[195] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u97AD\u97F9\u984D\u984F\u984C\u984E\u9853\u98BA\u993E\u993F\u993D\u992E\u99A5\u9A0E\u9AC1\u9B03\u9B06\u9B4F\u9B4E\u9B4D\u9BCA\u9BC9\u9BFD\u9BC8\u9BC0\u9D51\u9D5D\u9D60\u9EE0\u9F15\u9F2C\u5133\u56A5\u58DE\u58DF\u58E2\u5BF5\u9F90\u5EEC\u61F2\u61F7\u61F6\u61F5\u6500\u650F\u66E0\u66DD\u6AE5\u6ADD\u6ADA\u6AD3\u701B\u701F\u7028\u701A\u701D\u7015\u7018\u7206\u720D\u7258\u72A2\u7378\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u737A\u74BD\u74CA\u74E3\u7587\u7586\u765F\u7661\u77C7\u7919\u79B1\u7A6B\u7A69\u7C3E\u7C3F\u7C38\u7C3D\u7C37\u7C40\u7E6B\u7E6D\u7E79\u7E69\u7E6A\u7F85\u7E73\u7FB6\u7FB9\u7FB8\u81D8\u85E9\u85DD\u85EA\u85D5\u85E4\u85E5\u85F7\u87FB\u8805\u880D\u87F9\u87FE\u8960\u895F\u8956\u895E\u8B41\u8B5C\u8B58\u8B49\u8B5A\u8B4E\u8B4F\u8B46\u8B59\u8D08\u8D0A\u8E7C\u8E72\u8E87\u8E76\u8E6C\u8E7A\u8E74\u8F54\u8F4E\u8FAD\u908A\u908B\u91B1\u91AE\u93E1\u93D1\u93DF\u93C3\u93C8\u93DC\u93DD\u93D6\u93E2\u93CD\u93D8\u93E4\u93D7\u93E8\u95DC\u96B4\u96E3\u972A\u9727\u9761\u97DC\u97FB\u985E\uFFFD".split("");
        for (j3 = 0; j3 != D5[195].length; ++j3)
          if (D5[195][j3].charCodeAt(0) !== 65533) {
            e7[D5[195][j3]] = 49920 + j3;
            d2[49920 + j3] = D5[195][j3];
          }
        D5[196] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u9858\u985B\u98BC\u9945\u9949\u9A16\u9A19\u9B0D\u9BE8\u9BE7\u9BD6\u9BDB\u9D89\u9D61\u9D72\u9D6A\u9D6C\u9E92\u9E97\u9E93\u9EB4\u52F8\u56A8\u56B7\u56B6\u56B4\u56BC\u58E4\u5B40\u5B43\u5B7D\u5BF6\u5DC9\u61F8\u61FA\u6518\u6514\u6519\u66E6\u6727\u6AEC\u703E\u7030\u7032\u7210\u737B\u74CF\u7662\u7665\u7926\u792A\u792C\u792B\u7AC7\u7AF6\u7C4C\u7C43\u7C4D\u7CEF\u7CF0\u8FAE\u7E7D\u7E7C\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u7E82\u7F4C\u8000\u81DA\u8266\u85FB\u85F9\u8611\u85FA\u8606\u860B\u8607\u860A\u8814\u8815\u8964\u89BA\u89F8\u8B70\u8B6C\u8B66\u8B6F\u8B5F\u8B6B\u8D0F\u8D0D\u8E89\u8E81\u8E85\u8E82\u91B4\u91CB\u9418\u9403\u93FD\u95E1\u9730\u98C4\u9952\u9951\u99A8\u9A2B\u9A30\u9A37\u9A35\u9C13\u9C0D\u9E79\u9EB5\u9EE8\u9F2F\u9F5F\u9F63\u9F61\u5137\u5138\u56C1\u56C0\u56C2\u5914\u5C6C\u5DCD\u61FC\u61FE\u651D\u651C\u6595\u66E9\u6AFB\u6B04\u6AFA\u6BB2\u704C\u721B\u72A7\u74D6\u74D4\u7669\u77D3\u7C50\u7E8F\u7E8C\u7FBC\u8617\u862D\u861A\u8823\u8822\u8821\u881F\u896A\u896C\u89BD\u8B74\uFFFD".split("");
        for (j3 = 0; j3 != D5[196].length; ++j3)
          if (D5[196][j3].charCodeAt(0) !== 65533) {
            e7[D5[196][j3]] = 50176 + j3;
            d2[50176 + j3] = D5[196][j3];
          }
        D5[197] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u8B77\u8B7D\u8D13\u8E8A\u8E8D\u8E8B\u8F5F\u8FAF\u91BA\u942E\u9433\u9435\u943A\u9438\u9432\u942B\u95E2\u9738\u9739\u9732\u97FF\u9867\u9865\u9957\u9A45\u9A43\u9A40\u9A3E\u9ACF\u9B54\u9B51\u9C2D\u9C25\u9DAF\u9DB4\u9DC2\u9DB8\u9E9D\u9EEF\u9F19\u9F5C\u9F66\u9F67\u513C\u513B\u56C8\u56CA\u56C9\u5B7F\u5DD4\u5DD2\u5F4E\u61FF\u6524\u6B0A\u6B61\u7051\u7058\u7380\u74E4\u758A\u766E\u766C\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u79B3\u7C60\u7C5F\u807E\u807D\u81DF\u8972\u896F\u89FC\u8B80\u8D16\u8D17\u8E91\u8E93\u8F61\u9148\u9444\u9451\u9452\u973D\u973E\u97C3\u97C1\u986B\u9955\u9A55\u9A4D\u9AD2\u9B1A\u9C49\u9C31\u9C3E\u9C3B\u9DD3\u9DD7\u9F34\u9F6C\u9F6A\u9F94\u56CC\u5DD6\u6200\u6523\u652B\u652A\u66EC\u6B10\u74DA\u7ACA\u7C64\u7C63\u7C65\u7E93\u7E96\u7E94\u81E2\u8638\u863F\u8831\u8B8A\u9090\u908F\u9463\u9460\u9464\u9768\u986F\u995C\u9A5A\u9A5B\u9A57\u9AD3\u9AD4\u9AD1\u9C54\u9C57\u9C56\u9DE5\u9E9F\u9EF4\u56D1\u58E9\u652C\u705E\u7671\u7672\u77D7\u7F50\u7F88\u8836\u8839\u8862\u8B93\u8B92\uFFFD".split("");
        for (j3 = 0; j3 != D5[197].length; ++j3)
          if (D5[197][j3].charCodeAt(0) !== 65533) {
            e7[D5[197][j3]] = 50432 + j3;
            d2[50432 + j3] = D5[197][j3];
          }
        D5[198] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u8B96\u8277\u8D1B\u91C0\u946A\u9742\u9748\u9744\u97C6\u9870\u9A5F\u9B22\u9B58\u9C5F\u9DF9\u9DFA\u9E7C\u9E7D\u9F07\u9F77\u9F72\u5EF3\u6B16\u7063\u7C6C\u7C6E\u883B\u89C0\u8EA1\u91C1\u9472\u9470\u9871\u995E\u9AD6\u9B23\u9ECC\u7064\u77DA\u8B9A\u9477\u97C9\u9A62\u9A65\u7E9C\u8B9C\u8EAA\u91C5\u947D\u947E\u947C\u9C77\u9C78\u9EF7\u8C54\u947F\u9E1A\u7228\u9A6A\u9B31\u9E1B\u9E1E\u7C72\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD".split("");
        for (j3 = 0; j3 != D5[198].length; ++j3)
          if (D5[198][j3].charCodeAt(0) !== 65533) {
            e7[D5[198][j3]] = 50688 + j3;
            d2[50688 + j3] = D5[198][j3];
          }
        D5[201] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u4E42\u4E5C\u51F5\u531A\u5382\u4E07\u4E0C\u4E47\u4E8D\u56D7\uFA0C\u5C6E\u5F73\u4E0F\u5187\u4E0E\u4E2E\u4E93\u4EC2\u4EC9\u4EC8\u5198\u52FC\u536C\u53B9\u5720\u5903\u592C\u5C10\u5DFF\u65E1\u6BB3\u6BCC\u6C14\u723F\u4E31\u4E3C\u4EE8\u4EDC\u4EE9\u4EE1\u4EDD\u4EDA\u520C\u531C\u534C\u5722\u5723\u5917\u592F\u5B81\u5B84\u5C12\u5C3B\u5C74\u5C73\u5E04\u5E80\u5E82\u5FC9\u6209\u6250\u6C15\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u6C36\u6C43\u6C3F\u6C3B\u72AE\u72B0\u738A\u79B8\u808A\u961E\u4F0E\u4F18\u4F2C\u4EF5\u4F14\u4EF1\u4F00\u4EF7\u4F08\u4F1D\u4F02\u4F05\u4F22\u4F13\u4F04\u4EF4\u4F12\u51B1\u5213\u5209\u5210\u52A6\u5322\u531F\u534D\u538A\u5407\u56E1\u56DF\u572E\u572A\u5734\u593C\u5980\u597C\u5985\u597B\u597E\u5977\u597F\u5B56\u5C15\u5C25\u5C7C\u5C7A\u5C7B\u5C7E\u5DDF\u5E75\u5E84\u5F02\u5F1A\u5F74\u5FD5\u5FD4\u5FCF\u625C\u625E\u6264\u6261\u6266\u6262\u6259\u6260\u625A\u6265\u65EF\u65EE\u673E\u6739\u6738\u673B\u673A\u673F\u673C\u6733\u6C18\u6C46\u6C52\u6C5C\u6C4F\u6C4A\u6C54\u6C4B\uFFFD".split("");
        for (j3 = 0; j3 != D5[201].length; ++j3)
          if (D5[201][j3].charCodeAt(0) !== 65533) {
            e7[D5[201][j3]] = 51456 + j3;
            d2[51456 + j3] = D5[201][j3];
          }
        D5[202] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u6C4C\u7071\u725E\u72B4\u72B5\u738E\u752A\u767F\u7A75\u7F51\u8278\u827C\u8280\u827D\u827F\u864D\u897E\u9099\u9097\u9098\u909B\u9094\u9622\u9624\u9620\u9623\u4F56\u4F3B\u4F62\u4F49\u4F53\u4F64\u4F3E\u4F67\u4F52\u4F5F\u4F41\u4F58\u4F2D\u4F33\u4F3F\u4F61\u518F\u51B9\u521C\u521E\u5221\u52AD\u52AE\u5309\u5363\u5372\u538E\u538F\u5430\u5437\u542A\u5454\u5445\u5419\u541C\u5425\u5418\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u543D\u544F\u5441\u5428\u5424\u5447\u56EE\u56E7\u56E5\u5741\u5745\u574C\u5749\u574B\u5752\u5906\u5940\u59A6\u5998\u59A0\u5997\u598E\u59A2\u5990\u598F\u59A7\u59A1\u5B8E\u5B92\u5C28\u5C2A\u5C8D\u5C8F\u5C88\u5C8B\u5C89\u5C92\u5C8A\u5C86\u5C93\u5C95\u5DE0\u5E0A\u5E0E\u5E8B\u5E89\u5E8C\u5E88\u5E8D\u5F05\u5F1D\u5F78\u5F76\u5FD2\u5FD1\u5FD0\u5FED\u5FE8\u5FEE\u5FF3\u5FE1\u5FE4\u5FE3\u5FFA\u5FEF\u5FF7\u5FFB\u6000\u5FF4\u623A\u6283\u628C\u628E\u628F\u6294\u6287\u6271\u627B\u627A\u6270\u6281\u6288\u6277\u627D\u6272\u6274\u6537\u65F0\u65F4\u65F3\u65F2\u65F5\u6745\u6747\uFFFD".split("");
        for (j3 = 0; j3 != D5[202].length; ++j3)
          if (D5[202][j3].charCodeAt(0) !== 65533) {
            e7[D5[202][j3]] = 51712 + j3;
            d2[51712 + j3] = D5[202][j3];
          }
        D5[203] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u6759\u6755\u674C\u6748\u675D\u674D\u675A\u674B\u6BD0\u6C19\u6C1A\u6C78\u6C67\u6C6B\u6C84\u6C8B\u6C8F\u6C71\u6C6F\u6C69\u6C9A\u6C6D\u6C87\u6C95\u6C9C\u6C66\u6C73\u6C65\u6C7B\u6C8E\u7074\u707A\u7263\u72BF\u72BD\u72C3\u72C6\u72C1\u72BA\u72C5\u7395\u7397\u7393\u7394\u7392\u753A\u7539\u7594\u7595\u7681\u793D\u8034\u8095\u8099\u8090\u8092\u809C\u8290\u828F\u8285\u828E\u8291\u8293\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u828A\u8283\u8284\u8C78\u8FC9\u8FBF\u909F\u90A1\u90A5\u909E\u90A7\u90A0\u9630\u9628\u962F\u962D\u4E33\u4F98\u4F7C\u4F85\u4F7D\u4F80\u4F87\u4F76\u4F74\u4F89\u4F84\u4F77\u4F4C\u4F97\u4F6A\u4F9A\u4F79\u4F81\u4F78\u4F90\u4F9C\u4F94\u4F9E\u4F92\u4F82\u4F95\u4F6B\u4F6E\u519E\u51BC\u51BE\u5235\u5232\u5233\u5246\u5231\u52BC\u530A\u530B\u533C\u5392\u5394\u5487\u547F\u5481\u5491\u5482\u5488\u546B\u547A\u547E\u5465\u546C\u5474\u5466\u548D\u546F\u5461\u5460\u5498\u5463\u5467\u5464\u56F7\u56F9\u576F\u5772\u576D\u576B\u5771\u5770\u5776\u5780\u5775\u577B\u5773\u5774\u5762\uFFFD".split("");
        for (j3 = 0; j3 != D5[203].length; ++j3)
          if (D5[203][j3].charCodeAt(0) !== 65533) {
            e7[D5[203][j3]] = 51968 + j3;
            d2[51968 + j3] = D5[203][j3];
          }
        D5[204] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u5768\u577D\u590C\u5945\u59B5\u59BA\u59CF\u59CE\u59B2\u59CC\u59C1\u59B6\u59BC\u59C3\u59D6\u59B1\u59BD\u59C0\u59C8\u59B4\u59C7\u5B62\u5B65\u5B93\u5B95\u5C44\u5C47\u5CAE\u5CA4\u5CA0\u5CB5\u5CAF\u5CA8\u5CAC\u5C9F\u5CA3\u5CAD\u5CA2\u5CAA\u5CA7\u5C9D\u5CA5\u5CB6\u5CB0\u5CA6\u5E17\u5E14\u5E19\u5F28\u5F22\u5F23\u5F24\u5F54\u5F82\u5F7E\u5F7D\u5FDE\u5FE5\u602D\u6026\u6019\u6032\u600B\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u6034\u600A\u6017\u6033\u601A\u601E\u602C\u6022\u600D\u6010\u602E\u6013\u6011\u600C\u6009\u601C\u6214\u623D\u62AD\u62B4\u62D1\u62BE\u62AA\u62B6\u62CA\u62AE\u62B3\u62AF\u62BB\u62A9\u62B0\u62B8\u653D\u65A8\u65BB\u6609\u65FC\u6604\u6612\u6608\u65FB\u6603\u660B\u660D\u6605\u65FD\u6611\u6610\u66F6\u670A\u6785\u676C\u678E\u6792\u6776\u677B\u6798\u6786\u6784\u6774\u678D\u678C\u677A\u679F\u6791\u6799\u6783\u677D\u6781\u6778\u6779\u6794\u6B25\u6B80\u6B7E\u6BDE\u6C1D\u6C93\u6CEC\u6CEB\u6CEE\u6CD9\u6CB6\u6CD4\u6CAD\u6CE7\u6CB7\u6CD0\u6CC2\u6CBA\u6CC3\u6CC6\u6CED\u6CF2\uFFFD".split("");
        for (j3 = 0; j3 != D5[204].length; ++j3)
          if (D5[204][j3].charCodeAt(0) !== 65533) {
            e7[D5[204][j3]] = 52224 + j3;
            d2[52224 + j3] = D5[204][j3];
          }
        D5[205] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u6CD2\u6CDD\u6CB4\u6C8A\u6C9D\u6C80\u6CDE\u6CC0\u6D30\u6CCD\u6CC7\u6CB0\u6CF9\u6CCF\u6CE9\u6CD1\u7094\u7098\u7085\u7093\u7086\u7084\u7091\u7096\u7082\u709A\u7083\u726A\u72D6\u72CB\u72D8\u72C9\u72DC\u72D2\u72D4\u72DA\u72CC\u72D1\u73A4\u73A1\u73AD\u73A6\u73A2\u73A0\u73AC\u739D\u74DD\u74E8\u753F\u7540\u753E\u758C\u7598\u76AF\u76F3\u76F1\u76F0\u76F5\u77F8\u77FC\u77F9\u77FB\u77FA\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u77F7\u7942\u793F\u79C5\u7A78\u7A7B\u7AFB\u7C75\u7CFD\u8035\u808F\u80AE\u80A3\u80B8\u80B5\u80AD\u8220\u82A0\u82C0\u82AB\u829A\u8298\u829B\u82B5\u82A7\u82AE\u82BC\u829E\u82BA\u82B4\u82A8\u82A1\u82A9\u82C2\u82A4\u82C3\u82B6\u82A2\u8670\u866F\u866D\u866E\u8C56\u8FD2\u8FCB\u8FD3\u8FCD\u8FD6\u8FD5\u8FD7\u90B2\u90B4\u90AF\u90B3\u90B0\u9639\u963D\u963C\u963A\u9643\u4FCD\u4FC5\u4FD3\u4FB2\u4FC9\u4FCB\u4FC1\u4FD4\u4FDC\u4FD9\u4FBB\u4FB3\u4FDB\u4FC7\u4FD6\u4FBA\u4FC0\u4FB9\u4FEC\u5244\u5249\u52C0\u52C2\u533D\u537C\u5397\u5396\u5399\u5398\u54BA\u54A1\u54AD\u54A5\u54CF\uFFFD".split("");
        for (j3 = 0; j3 != D5[205].length; ++j3)
          if (D5[205][j3].charCodeAt(0) !== 65533) {
            e7[D5[205][j3]] = 52480 + j3;
            d2[52480 + j3] = D5[205][j3];
          }
        D5[206] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u54C3\u830D\u54B7\u54AE\u54D6\u54B6\u54C5\u54C6\u54A0\u5470\u54BC\u54A2\u54BE\u5472\u54DE\u54B0\u57B5\u579E\u579F\u57A4\u578C\u5797\u579D\u579B\u5794\u5798\u578F\u5799\u57A5\u579A\u5795\u58F4\u590D\u5953\u59E1\u59DE\u59EE\u5A00\u59F1\u59DD\u59FA\u59FD\u59FC\u59F6\u59E4\u59F2\u59F7\u59DB\u59E9\u59F3\u59F5\u59E0\u59FE\u59F4\u59ED\u5BA8\u5C4C\u5CD0\u5CD8\u5CCC\u5CD7\u5CCB\u5CDB\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u5CDE\u5CDA\u5CC9\u5CC7\u5CCA\u5CD6\u5CD3\u5CD4\u5CCF\u5CC8\u5CC6\u5CCE\u5CDF\u5CF8\u5DF9\u5E21\u5E22\u5E23\u5E20\u5E24\u5EB0\u5EA4\u5EA2\u5E9B\u5EA3\u5EA5\u5F07\u5F2E\u5F56\u5F86\u6037\u6039\u6054\u6072\u605E\u6045\u6053\u6047\u6049\u605B\u604C\u6040\u6042\u605F\u6024\u6044\u6058\u6066\u606E\u6242\u6243\u62CF\u630D\u630B\u62F5\u630E\u6303\u62EB\u62F9\u630F\u630C\u62F8\u62F6\u6300\u6313\u6314\u62FA\u6315\u62FB\u62F0\u6541\u6543\u65AA\u65BF\u6636\u6621\u6632\u6635\u661C\u6626\u6622\u6633\u662B\u663A\u661D\u6634\u6639\u662E\u670F\u6710\u67C1\u67F2\u67C8\u67BA\uFFFD".split("");
        for (j3 = 0; j3 != D5[206].length; ++j3)
          if (D5[206][j3].charCodeAt(0) !== 65533) {
            e7[D5[206][j3]] = 52736 + j3;
            d2[52736 + j3] = D5[206][j3];
          }
        D5[207] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u67DC\u67BB\u67F8\u67D8\u67C0\u67B7\u67C5\u67EB\u67E4\u67DF\u67B5\u67CD\u67B3\u67F7\u67F6\u67EE\u67E3\u67C2\u67B9\u67CE\u67E7\u67F0\u67B2\u67FC\u67C6\u67ED\u67CC\u67AE\u67E6\u67DB\u67FA\u67C9\u67CA\u67C3\u67EA\u67CB\u6B28\u6B82\u6B84\u6BB6\u6BD6\u6BD8\u6BE0\u6C20\u6C21\u6D28\u6D34\u6D2D\u6D1F\u6D3C\u6D3F\u6D12\u6D0A\u6CDA\u6D33\u6D04\u6D19\u6D3A\u6D1A\u6D11\u6D00\u6D1D\u6D42\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u6D01\u6D18\u6D37\u6D03\u6D0F\u6D40\u6D07\u6D20\u6D2C\u6D08\u6D22\u6D09\u6D10\u70B7\u709F\u70BE\u70B1\u70B0\u70A1\u70B4\u70B5\u70A9\u7241\u7249\u724A\u726C\u7270\u7273\u726E\u72CA\u72E4\u72E8\u72EB\u72DF\u72EA\u72E6\u72E3\u7385\u73CC\u73C2\u73C8\u73C5\u73B9\u73B6\u73B5\u73B4\u73EB\u73BF\u73C7\u73BE\u73C3\u73C6\u73B8\u73CB\u74EC\u74EE\u752E\u7547\u7548\u75A7\u75AA\u7679\u76C4\u7708\u7703\u7704\u7705\u770A\u76F7\u76FB\u76FA\u77E7\u77E8\u7806\u7811\u7812\u7805\u7810\u780F\u780E\u7809\u7803\u7813\u794A\u794C\u794B\u7945\u7944\u79D5\u79CD\u79CF\u79D6\u79CE\u7A80\uFFFD".split("");
        for (j3 = 0; j3 != D5[207].length; ++j3)
          if (D5[207][j3].charCodeAt(0) !== 65533) {
            e7[D5[207][j3]] = 52992 + j3;
            d2[52992 + j3] = D5[207][j3];
          }
        D5[208] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u7A7E\u7AD1\u7B00\u7B01\u7C7A\u7C78\u7C79\u7C7F\u7C80\u7C81\u7D03\u7D08\u7D01\u7F58\u7F91\u7F8D\u7FBE\u8007\u800E\u800F\u8014\u8037\u80D8\u80C7\u80E0\u80D1\u80C8\u80C2\u80D0\u80C5\u80E3\u80D9\u80DC\u80CA\u80D5\u80C9\u80CF\u80D7\u80E6\u80CD\u81FF\u8221\u8294\u82D9\u82FE\u82F9\u8307\u82E8\u8300\u82D5\u833A\u82EB\u82D6\u82F4\u82EC\u82E1\u82F2\u82F5\u830C\u82FB\u82F6\u82F0\u82EA\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u82E4\u82E0\u82FA\u82F3\u82ED\u8677\u8674\u867C\u8673\u8841\u884E\u8867\u886A\u8869\u89D3\u8A04\u8A07\u8D72\u8FE3\u8FE1\u8FEE\u8FE0\u90F1\u90BD\u90BF\u90D5\u90C5\u90BE\u90C7\u90CB\u90C8\u91D4\u91D3\u9654\u964F\u9651\u9653\u964A\u964E\u501E\u5005\u5007\u5013\u5022\u5030\u501B\u4FF5\u4FF4\u5033\u5037\u502C\u4FF6\u4FF7\u5017\u501C\u5020\u5027\u5035\u502F\u5031\u500E\u515A\u5194\u5193\u51CA\u51C4\u51C5\u51C8\u51CE\u5261\u525A\u5252\u525E\u525F\u5255\u5262\u52CD\u530E\u539E\u5526\u54E2\u5517\u5512\u54E7\u54F3\u54E4\u551A\u54FF\u5504\u5508\u54EB\u5511\u5505\u54F1\uFFFD".split("");
        for (j3 = 0; j3 != D5[208].length; ++j3)
          if (D5[208][j3].charCodeAt(0) !== 65533) {
            e7[D5[208][j3]] = 53248 + j3;
            d2[53248 + j3] = D5[208][j3];
          }
        D5[209] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u550A\u54FB\u54F7\u54F8\u54E0\u550E\u5503\u550B\u5701\u5702\u57CC\u5832\u57D5\u57D2\u57BA\u57C6\u57BD\u57BC\u57B8\u57B6\u57BF\u57C7\u57D0\u57B9\u57C1\u590E\u594A\u5A19\u5A16\u5A2D\u5A2E\u5A15\u5A0F\u5A17\u5A0A\u5A1E\u5A33\u5B6C\u5BA7\u5BAD\u5BAC\u5C03\u5C56\u5C54\u5CEC\u5CFF\u5CEE\u5CF1\u5CF7\u5D00\u5CF9\u5E29\u5E28\u5EA8\u5EAE\u5EAA\u5EAC\u5F33\u5F30\u5F67\u605D\u605A\u6067\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u6041\u60A2\u6088\u6080\u6092\u6081\u609D\u6083\u6095\u609B\u6097\u6087\u609C\u608E\u6219\u6246\u62F2\u6310\u6356\u632C\u6344\u6345\u6336\u6343\u63E4\u6339\u634B\u634A\u633C\u6329\u6341\u6334\u6358\u6354\u6359\u632D\u6347\u6333\u635A\u6351\u6338\u6357\u6340\u6348\u654A\u6546\u65C6\u65C3\u65C4\u65C2\u664A\u665F\u6647\u6651\u6712\u6713\u681F\u681A\u6849\u6832\u6833\u683B\u684B\u684F\u6816\u6831\u681C\u6835\u682B\u682D\u682F\u684E\u6844\u6834\u681D\u6812\u6814\u6826\u6828\u682E\u684D\u683A\u6825\u6820\u6B2C\u6B2F\u6B2D\u6B31\u6B34\u6B6D\u8082\u6B88\u6BE6\u6BE4\uFFFD".split("");
        for (j3 = 0; j3 != D5[209].length; ++j3)
          if (D5[209][j3].charCodeAt(0) !== 65533) {
            e7[D5[209][j3]] = 53504 + j3;
            d2[53504 + j3] = D5[209][j3];
          }
        D5[210] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u6BE8\u6BE3\u6BE2\u6BE7\u6C25\u6D7A\u6D63\u6D64\u6D76\u6D0D\u6D61\u6D92\u6D58\u6D62\u6D6D\u6D6F\u6D91\u6D8D\u6DEF\u6D7F\u6D86\u6D5E\u6D67\u6D60\u6D97\u6D70\u6D7C\u6D5F\u6D82\u6D98\u6D2F\u6D68\u6D8B\u6D7E\u6D80\u6D84\u6D16\u6D83\u6D7B\u6D7D\u6D75\u6D90\u70DC\u70D3\u70D1\u70DD\u70CB\u7F39\u70E2\u70D7\u70D2\u70DE\u70E0\u70D4\u70CD\u70C5\u70C6\u70C7\u70DA\u70CE\u70E1\u7242\u7278\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u7277\u7276\u7300\u72FA\u72F4\u72FE\u72F6\u72F3\u72FB\u7301\u73D3\u73D9\u73E5\u73D6\u73BC\u73E7\u73E3\u73E9\u73DC\u73D2\u73DB\u73D4\u73DD\u73DA\u73D7\u73D8\u73E8\u74DE\u74DF\u74F4\u74F5\u7521\u755B\u755F\u75B0\u75C1\u75BB\u75C4\u75C0\u75BF\u75B6\u75BA\u768A\u76C9\u771D\u771B\u7710\u7713\u7712\u7723\u7711\u7715\u7719\u771A\u7722\u7727\u7823\u782C\u7822\u7835\u782F\u7828\u782E\u782B\u7821\u7829\u7833\u782A\u7831\u7954\u795B\u794F\u795C\u7953\u7952\u7951\u79EB\u79EC\u79E0\u79EE\u79ED\u79EA\u79DC\u79DE\u79DD\u7A86\u7A89\u7A85\u7A8B\u7A8C\u7A8A\u7A87\u7AD8\u7B10\uFFFD".split("");
        for (j3 = 0; j3 != D5[210].length; ++j3)
          if (D5[210][j3].charCodeAt(0) !== 65533) {
            e7[D5[210][j3]] = 53760 + j3;
            d2[53760 + j3] = D5[210][j3];
          }
        D5[211] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u7B04\u7B13\u7B05\u7B0F\u7B08\u7B0A\u7B0E\u7B09\u7B12\u7C84\u7C91\u7C8A\u7C8C\u7C88\u7C8D\u7C85\u7D1E\u7D1D\u7D11\u7D0E\u7D18\u7D16\u7D13\u7D1F\u7D12\u7D0F\u7D0C\u7F5C\u7F61\u7F5E\u7F60\u7F5D\u7F5B\u7F96\u7F92\u7FC3\u7FC2\u7FC0\u8016\u803E\u8039\u80FA\u80F2\u80F9\u80F5\u8101\u80FB\u8100\u8201\u822F\u8225\u8333\u832D\u8344\u8319\u8351\u8325\u8356\u833F\u8341\u8326\u831C\u8322\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u8342\u834E\u831B\u832A\u8308\u833C\u834D\u8316\u8324\u8320\u8337\u832F\u8329\u8347\u8345\u834C\u8353\u831E\u832C\u834B\u8327\u8348\u8653\u8652\u86A2\u86A8\u8696\u868D\u8691\u869E\u8687\u8697\u8686\u868B\u869A\u8685\u86A5\u8699\u86A1\u86A7\u8695\u8698\u868E\u869D\u8690\u8694\u8843\u8844\u886D\u8875\u8876\u8872\u8880\u8871\u887F\u886F\u8883\u887E\u8874\u887C\u8A12\u8C47\u8C57\u8C7B\u8CA4\u8CA3\u8D76\u8D78\u8DB5\u8DB7\u8DB6\u8ED1\u8ED3\u8FFE\u8FF5\u9002\u8FFF\u8FFB\u9004\u8FFC\u8FF6\u90D6\u90E0\u90D9\u90DA\u90E3\u90DF\u90E5\u90D8\u90DB\u90D7\u90DC\u90E4\u9150\uFFFD".split("");
        for (j3 = 0; j3 != D5[211].length; ++j3)
          if (D5[211][j3].charCodeAt(0) !== 65533) {
            e7[D5[211][j3]] = 54016 + j3;
            d2[54016 + j3] = D5[211][j3];
          }
        D5[212] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u914E\u914F\u91D5\u91E2\u91DA\u965C\u965F\u96BC\u98E3\u9ADF\u9B2F\u4E7F\u5070\u506A\u5061\u505E\u5060\u5053\u504B\u505D\u5072\u5048\u504D\u5041\u505B\u504A\u5062\u5015\u5045\u505F\u5069\u506B\u5063\u5064\u5046\u5040\u506E\u5073\u5057\u5051\u51D0\u526B\u526D\u526C\u526E\u52D6\u52D3\u532D\u539C\u5575\u5576\u553C\u554D\u5550\u5534\u552A\u5551\u5562\u5536\u5535\u5530\u5552\u5545\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u550C\u5532\u5565\u554E\u5539\u5548\u552D\u553B\u5540\u554B\u570A\u5707\u57FB\u5814\u57E2\u57F6\u57DC\u57F4\u5800\u57ED\u57FD\u5808\u57F8\u580B\u57F3\u57CF\u5807\u57EE\u57E3\u57F2\u57E5\u57EC\u57E1\u580E\u57FC\u5810\u57E7\u5801\u580C\u57F1\u57E9\u57F0\u580D\u5804\u595C\u5A60\u5A58\u5A55\u5A67\u5A5E\u5A38\u5A35\u5A6D\u5A50\u5A5F\u5A65\u5A6C\u5A53\u5A64\u5A57\u5A43\u5A5D\u5A52\u5A44\u5A5B\u5A48\u5A8E\u5A3E\u5A4D\u5A39\u5A4C\u5A70\u5A69\u5A47\u5A51\u5A56\u5A42\u5A5C\u5B72\u5B6E\u5BC1\u5BC0\u5C59\u5D1E\u5D0B\u5D1D\u5D1A\u5D20\u5D0C\u5D28\u5D0D\u5D26\u5D25\u5D0F\uFFFD".split("");
        for (j3 = 0; j3 != D5[212].length; ++j3)
          if (D5[212][j3].charCodeAt(0) !== 65533) {
            e7[D5[212][j3]] = 54272 + j3;
            d2[54272 + j3] = D5[212][j3];
          }
        D5[213] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u5D30\u5D12\u5D23\u5D1F\u5D2E\u5E3E\u5E34\u5EB1\u5EB4\u5EB9\u5EB2\u5EB3\u5F36\u5F38\u5F9B\u5F96\u5F9F\u608A\u6090\u6086\u60BE\u60B0\u60BA\u60D3\u60D4\u60CF\u60E4\u60D9\u60DD\u60C8\u60B1\u60DB\u60B7\u60CA\u60BF\u60C3\u60CD\u60C0\u6332\u6365\u638A\u6382\u637D\u63BD\u639E\u63AD\u639D\u6397\u63AB\u638E\u636F\u6387\u6390\u636E\u63AF\u6375\u639C\u636D\u63AE\u637C\u63A4\u633B\u639F\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u6378\u6385\u6381\u6391\u638D\u6370\u6553\u65CD\u6665\u6661\u665B\u6659\u665C\u6662\u6718\u6879\u6887\u6890\u689C\u686D\u686E\u68AE\u68AB\u6956\u686F\u68A3\u68AC\u68A9\u6875\u6874\u68B2\u688F\u6877\u6892\u687C\u686B\u6872\u68AA\u6880\u6871\u687E\u689B\u6896\u688B\u68A0\u6889\u68A4\u6878\u687B\u6891\u688C\u688A\u687D\u6B36\u6B33\u6B37\u6B38\u6B91\u6B8F\u6B8D\u6B8E\u6B8C\u6C2A\u6DC0\u6DAB\u6DB4\u6DB3\u6E74\u6DAC\u6DE9\u6DE2\u6DB7\u6DF6\u6DD4\u6E00\u6DC8\u6DE0\u6DDF\u6DD6\u6DBE\u6DE5\u6DDC\u6DDD\u6DDB\u6DF4\u6DCA\u6DBD\u6DED\u6DF0\u6DBA\u6DD5\u6DC2\u6DCF\u6DC9\uFFFD".split("");
        for (j3 = 0; j3 != D5[213].length; ++j3)
          if (D5[213][j3].charCodeAt(0) !== 65533) {
            e7[D5[213][j3]] = 54528 + j3;
            d2[54528 + j3] = D5[213][j3];
          }
        D5[214] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u6DD0\u6DF2\u6DD3\u6DFD\u6DD7\u6DCD\u6DE3\u6DBB\u70FA\u710D\u70F7\u7117\u70F4\u710C\u70F0\u7104\u70F3\u7110\u70FC\u70FF\u7106\u7113\u7100\u70F8\u70F6\u710B\u7102\u710E\u727E\u727B\u727C\u727F\u731D\u7317\u7307\u7311\u7318\u730A\u7308\u72FF\u730F\u731E\u7388\u73F6\u73F8\u73F5\u7404\u7401\u73FD\u7407\u7400\u73FA\u73FC\u73FF\u740C\u740B\u73F4\u7408\u7564\u7563\u75CE\u75D2\u75CF\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u75CB\u75CC\u75D1\u75D0\u768F\u7689\u76D3\u7739\u772F\u772D\u7731\u7732\u7734\u7733\u773D\u7725\u773B\u7735\u7848\u7852\u7849\u784D\u784A\u784C\u7826\u7845\u7850\u7964\u7967\u7969\u796A\u7963\u796B\u7961\u79BB\u79FA\u79F8\u79F6\u79F7\u7A8F\u7A94\u7A90\u7B35\u7B47\u7B34\u7B25\u7B30\u7B22\u7B24\u7B33\u7B18\u7B2A\u7B1D\u7B31\u7B2B\u7B2D\u7B2F\u7B32\u7B38\u7B1A\u7B23\u7C94\u7C98\u7C96\u7CA3\u7D35\u7D3D\u7D38\u7D36\u7D3A\u7D45\u7D2C\u7D29\u7D41\u7D47\u7D3E\u7D3F\u7D4A\u7D3B\u7D28\u7F63\u7F95\u7F9C\u7F9D\u7F9B\u7FCA\u7FCB\u7FCD\u7FD0\u7FD1\u7FC7\u7FCF\u7FC9\u801F\uFFFD".split("");
        for (j3 = 0; j3 != D5[214].length; ++j3)
          if (D5[214][j3].charCodeAt(0) !== 65533) {
            e7[D5[214][j3]] = 54784 + j3;
            d2[54784 + j3] = D5[214][j3];
          }
        D5[215] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u801E\u801B\u8047\u8043\u8048\u8118\u8125\u8119\u811B\u812D\u811F\u812C\u811E\u8121\u8115\u8127\u811D\u8122\u8211\u8238\u8233\u823A\u8234\u8232\u8274\u8390\u83A3\u83A8\u838D\u837A\u8373\u83A4\u8374\u838F\u8381\u8395\u8399\u8375\u8394\u83A9\u837D\u8383\u838C\u839D\u839B\u83AA\u838B\u837E\u83A5\u83AF\u8388\u8397\u83B0\u837F\u83A6\u8387\u83AE\u8376\u839A\u8659\u8656\u86BF\u86B7\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u86C2\u86C1\u86C5\u86BA\u86B0\u86C8\u86B9\u86B3\u86B8\u86CC\u86B4\u86BB\u86BC\u86C3\u86BD\u86BE\u8852\u8889\u8895\u88A8\u88A2\u88AA\u889A\u8891\u88A1\u889F\u8898\u88A7\u8899\u889B\u8897\u88A4\u88AC\u888C\u8893\u888E\u8982\u89D6\u89D9\u89D5\u8A30\u8A27\u8A2C\u8A1E\u8C39\u8C3B\u8C5C\u8C5D\u8C7D\u8CA5\u8D7D\u8D7B\u8D79\u8DBC\u8DC2\u8DB9\u8DBF\u8DC1\u8ED8\u8EDE\u8EDD\u8EDC\u8ED7\u8EE0\u8EE1\u9024\u900B\u9011\u901C\u900C\u9021\u90EF\u90EA\u90F0\u90F4\u90F2\u90F3\u90D4\u90EB\u90EC\u90E9\u9156\u9158\u915A\u9153\u9155\u91EC\u91F4\u91F1\u91F3\u91F8\u91E4\u91F9\u91EA\uFFFD".split("");
        for (j3 = 0; j3 != D5[215].length; ++j3)
          if (D5[215][j3].charCodeAt(0) !== 65533) {
            e7[D5[215][j3]] = 55040 + j3;
            d2[55040 + j3] = D5[215][j3];
          }
        D5[216] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u91EB\u91F7\u91E8\u91EE\u957A\u9586\u9588\u967C\u966D\u966B\u9671\u966F\u96BF\u976A\u9804\u98E5\u9997\u509B\u5095\u5094\u509E\u508B\u50A3\u5083\u508C\u508E\u509D\u5068\u509C\u5092\u5082\u5087\u515F\u51D4\u5312\u5311\u53A4\u53A7\u5591\u55A8\u55A5\u55AD\u5577\u5645\u55A2\u5593\u5588\u558F\u55B5\u5581\u55A3\u5592\u55A4\u557D\u558C\u55A6\u557F\u5595\u55A1\u558E\u570C\u5829\u5837\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u5819\u581E\u5827\u5823\u5828\u57F5\u5848\u5825\u581C\u581B\u5833\u583F\u5836\u582E\u5839\u5838\u582D\u582C\u583B\u5961\u5AAF\u5A94\u5A9F\u5A7A\u5AA2\u5A9E\u5A78\u5AA6\u5A7C\u5AA5\u5AAC\u5A95\u5AAE\u5A37\u5A84\u5A8A\u5A97\u5A83\u5A8B\u5AA9\u5A7B\u5A7D\u5A8C\u5A9C\u5A8F\u5A93\u5A9D\u5BEA\u5BCD\u5BCB\u5BD4\u5BD1\u5BCA\u5BCE\u5C0C\u5C30\u5D37\u5D43\u5D6B\u5D41\u5D4B\u5D3F\u5D35\u5D51\u5D4E\u5D55\u5D33\u5D3A\u5D52\u5D3D\u5D31\u5D59\u5D42\u5D39\u5D49\u5D38\u5D3C\u5D32\u5D36\u5D40\u5D45\u5E44\u5E41\u5F58\u5FA6\u5FA5\u5FAB\u60C9\u60B9\u60CC\u60E2\u60CE\u60C4\u6114\uFFFD".split("");
        for (j3 = 0; j3 != D5[216].length; ++j3)
          if (D5[216][j3].charCodeAt(0) !== 65533) {
            e7[D5[216][j3]] = 55296 + j3;
            d2[55296 + j3] = D5[216][j3];
          }
        D5[217] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u60F2\u610A\u6116\u6105\u60F5\u6113\u60F8\u60FC\u60FE\u60C1\u6103\u6118\u611D\u6110\u60FF\u6104\u610B\u624A\u6394\u63B1\u63B0\u63CE\u63E5\u63E8\u63EF\u63C3\u649D\u63F3\u63CA\u63E0\u63F6\u63D5\u63F2\u63F5\u6461\u63DF\u63BE\u63DD\u63DC\u63C4\u63D8\u63D3\u63C2\u63C7\u63CC\u63CB\u63C8\u63F0\u63D7\u63D9\u6532\u6567\u656A\u6564\u655C\u6568\u6565\u658C\u659D\u659E\u65AE\u65D0\u65D2\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u667C\u666C\u667B\u6680\u6671\u6679\u666A\u6672\u6701\u690C\u68D3\u6904\u68DC\u692A\u68EC\u68EA\u68F1\u690F\u68D6\u68F7\u68EB\u68E4\u68F6\u6913\u6910\u68F3\u68E1\u6907\u68CC\u6908\u6970\u68B4\u6911\u68EF\u68C6\u6914\u68F8\u68D0\u68FD\u68FC\u68E8\u690B\u690A\u6917\u68CE\u68C8\u68DD\u68DE\u68E6\u68F4\u68D1\u6906\u68D4\u68E9\u6915\u6925\u68C7\u6B39\u6B3B\u6B3F\u6B3C\u6B94\u6B97\u6B99\u6B95\u6BBD\u6BF0\u6BF2\u6BF3\u6C30\u6DFC\u6E46\u6E47\u6E1F\u6E49\u6E88\u6E3C\u6E3D\u6E45\u6E62\u6E2B\u6E3F\u6E41\u6E5D\u6E73\u6E1C\u6E33\u6E4B\u6E40\u6E51\u6E3B\u6E03\u6E2E\u6E5E\uFFFD".split("");
        for (j3 = 0; j3 != D5[217].length; ++j3)
          if (D5[217][j3].charCodeAt(0) !== 65533) {
            e7[D5[217][j3]] = 55552 + j3;
            d2[55552 + j3] = D5[217][j3];
          }
        D5[218] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u6E68\u6E5C\u6E61\u6E31\u6E28\u6E60\u6E71\u6E6B\u6E39\u6E22\u6E30\u6E53\u6E65\u6E27\u6E78\u6E64\u6E77\u6E55\u6E79\u6E52\u6E66\u6E35\u6E36\u6E5A\u7120\u711E\u712F\u70FB\u712E\u7131\u7123\u7125\u7122\u7132\u711F\u7128\u713A\u711B\u724B\u725A\u7288\u7289\u7286\u7285\u728B\u7312\u730B\u7330\u7322\u7331\u7333\u7327\u7332\u732D\u7326\u7323\u7335\u730C\u742E\u742C\u7430\u742B\u7416\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u741A\u7421\u742D\u7431\u7424\u7423\u741D\u7429\u7420\u7432\u74FB\u752F\u756F\u756C\u75E7\u75DA\u75E1\u75E6\u75DD\u75DF\u75E4\u75D7\u7695\u7692\u76DA\u7746\u7747\u7744\u774D\u7745\u774A\u774E\u774B\u774C\u77DE\u77EC\u7860\u7864\u7865\u785C\u786D\u7871\u786A\u786E\u7870\u7869\u7868\u785E\u7862\u7974\u7973\u7972\u7970\u7A02\u7A0A\u7A03\u7A0C\u7A04\u7A99\u7AE6\u7AE4\u7B4A\u7B3B\u7B44\u7B48\u7B4C\u7B4E\u7B40\u7B58\u7B45\u7CA2\u7C9E\u7CA8\u7CA1\u7D58\u7D6F\u7D63\u7D53\u7D56\u7D67\u7D6A\u7D4F\u7D6D\u7D5C\u7D6B\u7D52\u7D54\u7D69\u7D51\u7D5F\u7D4E\u7F3E\u7F3F\u7F65\uFFFD".split("");
        for (j3 = 0; j3 != D5[218].length; ++j3)
          if (D5[218][j3].charCodeAt(0) !== 65533) {
            e7[D5[218][j3]] = 55808 + j3;
            d2[55808 + j3] = D5[218][j3];
          }
        D5[219] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u7F66\u7FA2\u7FA0\u7FA1\u7FD7\u8051\u804F\u8050\u80FE\u80D4\u8143\u814A\u8152\u814F\u8147\u813D\u814D\u813A\u81E6\u81EE\u81F7\u81F8\u81F9\u8204\u823C\u823D\u823F\u8275\u833B\u83CF\u83F9\u8423\u83C0\u83E8\u8412\u83E7\u83E4\u83FC\u83F6\u8410\u83C6\u83C8\u83EB\u83E3\u83BF\u8401\u83DD\u83E5\u83D8\u83FF\u83E1\u83CB\u83CE\u83D6\u83F5\u83C9\u8409\u840F\u83DE\u8411\u8406\u83C2\u83F3\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u83D5\u83FA\u83C7\u83D1\u83EA\u8413\u83C3\u83EC\u83EE\u83C4\u83FB\u83D7\u83E2\u841B\u83DB\u83FE\u86D8\u86E2\u86E6\u86D3\u86E3\u86DA\u86EA\u86DD\u86EB\u86DC\u86EC\u86E9\u86D7\u86E8\u86D1\u8848\u8856\u8855\u88BA\u88D7\u88B9\u88B8\u88C0\u88BE\u88B6\u88BC\u88B7\u88BD\u88B2\u8901\u88C9\u8995\u8998\u8997\u89DD\u89DA\u89DB\u8A4E\u8A4D\u8A39\u8A59\u8A40\u8A57\u8A58\u8A44\u8A45\u8A52\u8A48\u8A51\u8A4A\u8A4C\u8A4F\u8C5F\u8C81\u8C80\u8CBA\u8CBE\u8CB0\u8CB9\u8CB5\u8D84\u8D80\u8D89\u8DD8\u8DD3\u8DCD\u8DC7\u8DD6\u8DDC\u8DCF\u8DD5\u8DD9\u8DC8\u8DD7\u8DC5\u8EEF\u8EF7\u8EFA\uFFFD".split("");
        for (j3 = 0; j3 != D5[219].length; ++j3)
          if (D5[219][j3].charCodeAt(0) !== 65533) {
            e7[D5[219][j3]] = 56064 + j3;
            d2[56064 + j3] = D5[219][j3];
          }
        D5[220] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u8EF9\u8EE6\u8EEE\u8EE5\u8EF5\u8EE7\u8EE8\u8EF6\u8EEB\u8EF1\u8EEC\u8EF4\u8EE9\u902D\u9034\u902F\u9106\u912C\u9104\u90FF\u90FC\u9108\u90F9\u90FB\u9101\u9100\u9107\u9105\u9103\u9161\u9164\u915F\u9162\u9160\u9201\u920A\u9225\u9203\u921A\u9226\u920F\u920C\u9200\u9212\u91FF\u91FD\u9206\u9204\u9227\u9202\u921C\u9224\u9219\u9217\u9205\u9216\u957B\u958D\u958C\u9590\u9687\u967E\u9688\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u9689\u9683\u9680\u96C2\u96C8\u96C3\u96F1\u96F0\u976C\u9770\u976E\u9807\u98A9\u98EB\u9CE6\u9EF9\u4E83\u4E84\u4EB6\u50BD\u50BF\u50C6\u50AE\u50C4\u50CA\u50B4\u50C8\u50C2\u50B0\u50C1\u50BA\u50B1\u50CB\u50C9\u50B6\u50B8\u51D7\u527A\u5278\u527B\u527C\u55C3\u55DB\u55CC\u55D0\u55CB\u55CA\u55DD\u55C0\u55D4\u55C4\u55E9\u55BF\u55D2\u558D\u55CF\u55D5\u55E2\u55D6\u55C8\u55F2\u55CD\u55D9\u55C2\u5714\u5853\u5868\u5864\u584F\u584D\u5849\u586F\u5855\u584E\u585D\u5859\u5865\u585B\u583D\u5863\u5871\u58FC\u5AC7\u5AC4\u5ACB\u5ABA\u5AB8\u5AB1\u5AB5\u5AB0\u5ABF\u5AC8\u5ABB\u5AC6\uFFFD".split("");
        for (j3 = 0; j3 != D5[220].length; ++j3)
          if (D5[220][j3].charCodeAt(0) !== 65533) {
            e7[D5[220][j3]] = 56320 + j3;
            d2[56320 + j3] = D5[220][j3];
          }
        D5[221] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u5AB7\u5AC0\u5ACA\u5AB4\u5AB6\u5ACD\u5AB9\u5A90\u5BD6\u5BD8\u5BD9\u5C1F\u5C33\u5D71\u5D63\u5D4A\u5D65\u5D72\u5D6C\u5D5E\u5D68\u5D67\u5D62\u5DF0\u5E4F\u5E4E\u5E4A\u5E4D\u5E4B\u5EC5\u5ECC\u5EC6\u5ECB\u5EC7\u5F40\u5FAF\u5FAD\u60F7\u6149\u614A\u612B\u6145\u6136\u6132\u612E\u6146\u612F\u614F\u6129\u6140\u6220\u9168\u6223\u6225\u6224\u63C5\u63F1\u63EB\u6410\u6412\u6409\u6420\u6424\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u6433\u6443\u641F\u6415\u6418\u6439\u6437\u6422\u6423\u640C\u6426\u6430\u6428\u6441\u6435\u642F\u640A\u641A\u6440\u6425\u6427\u640B\u63E7\u641B\u642E\u6421\u640E\u656F\u6592\u65D3\u6686\u668C\u6695\u6690\u668B\u668A\u6699\u6694\u6678\u6720\u6966\u695F\u6938\u694E\u6962\u6971\u693F\u6945\u696A\u6939\u6942\u6957\u6959\u697A\u6948\u6949\u6935\u696C\u6933\u693D\u6965\u68F0\u6978\u6934\u6969\u6940\u696F\u6944\u6976\u6958\u6941\u6974\u694C\u693B\u694B\u6937\u695C\u694F\u6951\u6932\u6952\u692F\u697B\u693C\u6B46\u6B45\u6B43\u6B42\u6B48\u6B41\u6B9B\uFA0D\u6BFB\u6BFC\uFFFD".split("");
        for (j3 = 0; j3 != D5[221].length; ++j3)
          if (D5[221][j3].charCodeAt(0) !== 65533) {
            e7[D5[221][j3]] = 56576 + j3;
            d2[56576 + j3] = D5[221][j3];
          }
        D5[222] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u6BF9\u6BF7\u6BF8\u6E9B\u6ED6\u6EC8\u6E8F\u6EC0\u6E9F\u6E93\u6E94\u6EA0\u6EB1\u6EB9\u6EC6\u6ED2\u6EBD\u6EC1\u6E9E\u6EC9\u6EB7\u6EB0\u6ECD\u6EA6\u6ECF\u6EB2\u6EBE\u6EC3\u6EDC\u6ED8\u6E99\u6E92\u6E8E\u6E8D\u6EA4\u6EA1\u6EBF\u6EB3\u6ED0\u6ECA\u6E97\u6EAE\u6EA3\u7147\u7154\u7152\u7163\u7160\u7141\u715D\u7162\u7172\u7178\u716A\u7161\u7142\u7158\u7143\u714B\u7170\u715F\u7150\u7153\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u7144\u714D\u715A\u724F\u728D\u728C\u7291\u7290\u728E\u733C\u7342\u733B\u733A\u7340\u734A\u7349\u7444\u744A\u744B\u7452\u7451\u7457\u7440\u744F\u7450\u744E\u7442\u7446\u744D\u7454\u74E1\u74FF\u74FE\u74FD\u751D\u7579\u7577\u6983\u75EF\u760F\u7603\u75F7\u75FE\u75FC\u75F9\u75F8\u7610\u75FB\u75F6\u75ED\u75F5\u75FD\u7699\u76B5\u76DD\u7755\u775F\u7760\u7752\u7756\u775A\u7769\u7767\u7754\u7759\u776D\u77E0\u7887\u789A\u7894\u788F\u7884\u7895\u7885\u7886\u78A1\u7883\u7879\u7899\u7880\u7896\u787B\u797C\u7982\u797D\u7979\u7A11\u7A18\u7A19\u7A12\u7A17\u7A15\u7A22\u7A13\uFFFD".split("");
        for (j3 = 0; j3 != D5[222].length; ++j3)
          if (D5[222][j3].charCodeAt(0) !== 65533) {
            e7[D5[222][j3]] = 56832 + j3;
            d2[56832 + j3] = D5[222][j3];
          }
        D5[223] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u7A1B\u7A10\u7AA3\u7AA2\u7A9E\u7AEB\u7B66\u7B64\u7B6D\u7B74\u7B69\u7B72\u7B65\u7B73\u7B71\u7B70\u7B61\u7B78\u7B76\u7B63\u7CB2\u7CB4\u7CAF\u7D88\u7D86\u7D80\u7D8D\u7D7F\u7D85\u7D7A\u7D8E\u7D7B\u7D83\u7D7C\u7D8C\u7D94\u7D84\u7D7D\u7D92\u7F6D\u7F6B\u7F67\u7F68\u7F6C\u7FA6\u7FA5\u7FA7\u7FDB\u7FDC\u8021\u8164\u8160\u8177\u815C\u8169\u815B\u8162\u8172\u6721\u815E\u8176\u8167\u816F\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u8144\u8161\u821D\u8249\u8244\u8240\u8242\u8245\u84F1\u843F\u8456\u8476\u8479\u848F\u848D\u8465\u8451\u8440\u8486\u8467\u8430\u844D\u847D\u845A\u8459\u8474\u8473\u845D\u8507\u845E\u8437\u843A\u8434\u847A\u8443\u8478\u8432\u8445\u8429\u83D9\u844B\u842F\u8442\u842D\u845F\u8470\u8439\u844E\u844C\u8452\u846F\u84C5\u848E\u843B\u8447\u8436\u8433\u8468\u847E\u8444\u842B\u8460\u8454\u846E\u8450\u870B\u8704\u86F7\u870C\u86FA\u86D6\u86F5\u874D\u86F8\u870E\u8709\u8701\u86F6\u870D\u8705\u88D6\u88CB\u88CD\u88CE\u88DE\u88DB\u88DA\u88CC\u88D0\u8985\u899B\u89DF\u89E5\u89E4\uFFFD".split("");
        for (j3 = 0; j3 != D5[223].length; ++j3)
          if (D5[223][j3].charCodeAt(0) !== 65533) {
            e7[D5[223][j3]] = 57088 + j3;
            d2[57088 + j3] = D5[223][j3];
          }
        D5[224] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u89E1\u89E0\u89E2\u89DC\u89E6\u8A76\u8A86\u8A7F\u8A61\u8A3F\u8A77\u8A82\u8A84\u8A75\u8A83\u8A81\u8A74\u8A7A\u8C3C\u8C4B\u8C4A\u8C65\u8C64\u8C66\u8C86\u8C84\u8C85\u8CCC\u8D68\u8D69\u8D91\u8D8C\u8D8E\u8D8F\u8D8D\u8D93\u8D94\u8D90\u8D92\u8DF0\u8DE0\u8DEC\u8DF1\u8DEE\u8DD0\u8DE9\u8DE3\u8DE2\u8DE7\u8DF2\u8DEB\u8DF4\u8F06\u8EFF\u8F01\u8F00\u8F05\u8F07\u8F08\u8F02\u8F0B\u9052\u903F\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u9044\u9049\u903D\u9110\u910D\u910F\u9111\u9116\u9114\u910B\u910E\u916E\u916F\u9248\u9252\u9230\u923A\u9266\u9233\u9265\u925E\u9283\u922E\u924A\u9246\u926D\u926C\u924F\u9260\u9267\u926F\u9236\u9261\u9270\u9231\u9254\u9263\u9250\u9272\u924E\u9253\u924C\u9256\u9232\u959F\u959C\u959E\u959B\u9692\u9693\u9691\u9697\u96CE\u96FA\u96FD\u96F8\u96F5\u9773\u9777\u9778\u9772\u980F\u980D\u980E\u98AC\u98F6\u98F9\u99AF\u99B2\u99B0\u99B5\u9AAD\u9AAB\u9B5B\u9CEA\u9CED\u9CE7\u9E80\u9EFD\u50E6\u50D4\u50D7\u50E8\u50F3\u50DB\u50EA\u50DD\u50E4\u50D3\u50EC\u50F0\u50EF\u50E3\u50E0\uFFFD".split("");
        for (j3 = 0; j3 != D5[224].length; ++j3)
          if (D5[224][j3].charCodeAt(0) !== 65533) {
            e7[D5[224][j3]] = 57344 + j3;
            d2[57344 + j3] = D5[224][j3];
          }
        D5[225] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u51D8\u5280\u5281\u52E9\u52EB\u5330\u53AC\u5627\u5615\u560C\u5612\u55FC\u560F\u561C\u5601\u5613\u5602\u55FA\u561D\u5604\u55FF\u55F9\u5889\u587C\u5890\u5898\u5886\u5881\u587F\u5874\u588B\u587A\u5887\u5891\u588E\u5876\u5882\u5888\u587B\u5894\u588F\u58FE\u596B\u5ADC\u5AEE\u5AE5\u5AD5\u5AEA\u5ADA\u5AED\u5AEB\u5AF3\u5AE2\u5AE0\u5ADB\u5AEC\u5ADE\u5ADD\u5AD9\u5AE8\u5ADF\u5B77\u5BE0\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u5BE3\u5C63\u5D82\u5D80\u5D7D\u5D86\u5D7A\u5D81\u5D77\u5D8A\u5D89\u5D88\u5D7E\u5D7C\u5D8D\u5D79\u5D7F\u5E58\u5E59\u5E53\u5ED8\u5ED1\u5ED7\u5ECE\u5EDC\u5ED5\u5ED9\u5ED2\u5ED4\u5F44\u5F43\u5F6F\u5FB6\u612C\u6128\u6141\u615E\u6171\u6173\u6152\u6153\u6172\u616C\u6180\u6174\u6154\u617A\u615B\u6165\u613B\u616A\u6161\u6156\u6229\u6227\u622B\u642B\u644D\u645B\u645D\u6474\u6476\u6472\u6473\u647D\u6475\u6466\u64A6\u644E\u6482\u645E\u645C\u644B\u6453\u6460\u6450\u647F\u643F\u646C\u646B\u6459\u6465\u6477\u6573\u65A0\u66A1\u66A0\u669F\u6705\u6704\u6722\u69B1\u69B6\u69C9\uFFFD".split("");
        for (j3 = 0; j3 != D5[225].length; ++j3)
          if (D5[225][j3].charCodeAt(0) !== 65533) {
            e7[D5[225][j3]] = 57600 + j3;
            d2[57600 + j3] = D5[225][j3];
          }
        D5[226] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u69A0\u69CE\u6996\u69B0\u69AC\u69BC\u6991\u6999\u698E\u69A7\u698D\u69A9\u69BE\u69AF\u69BF\u69C4\u69BD\u69A4\u69D4\u69B9\u69CA\u699A\u69CF\u69B3\u6993\u69AA\u69A1\u699E\u69D9\u6997\u6990\u69C2\u69B5\u69A5\u69C6\u6B4A\u6B4D\u6B4B\u6B9E\u6B9F\u6BA0\u6BC3\u6BC4\u6BFE\u6ECE\u6EF5\u6EF1\u6F03\u6F25\u6EF8\u6F37\u6EFB\u6F2E\u6F09\u6F4E\u6F19\u6F1A\u6F27\u6F18\u6F3B\u6F12\u6EED\u6F0A\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u6F36\u6F73\u6EF9\u6EEE\u6F2D\u6F40\u6F30\u6F3C\u6F35\u6EEB\u6F07\u6F0E\u6F43\u6F05\u6EFD\u6EF6\u6F39\u6F1C\u6EFC\u6F3A\u6F1F\u6F0D\u6F1E\u6F08\u6F21\u7187\u7190\u7189\u7180\u7185\u7182\u718F\u717B\u7186\u7181\u7197\u7244\u7253\u7297\u7295\u7293\u7343\u734D\u7351\u734C\u7462\u7473\u7471\u7475\u7472\u7467\u746E\u7500\u7502\u7503\u757D\u7590\u7616\u7608\u760C\u7615\u7611\u760A\u7614\u76B8\u7781\u777C\u7785\u7782\u776E\u7780\u776F\u777E\u7783\u78B2\u78AA\u78B4\u78AD\u78A8\u787E\u78AB\u789E\u78A5\u78A0\u78AC\u78A2\u78A4\u7998\u798A\u798B\u7996\u7995\u7994\u7993\uFFFD".split("");
        for (j3 = 0; j3 != D5[226].length; ++j3)
          if (D5[226][j3].charCodeAt(0) !== 65533) {
            e7[D5[226][j3]] = 57856 + j3;
            d2[57856 + j3] = D5[226][j3];
          }
        D5[227] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u7997\u7988\u7992\u7990\u7A2B\u7A4A\u7A30\u7A2F\u7A28\u7A26\u7AA8\u7AAB\u7AAC\u7AEE\u7B88\u7B9C\u7B8A\u7B91\u7B90\u7B96\u7B8D\u7B8C\u7B9B\u7B8E\u7B85\u7B98\u5284\u7B99\u7BA4\u7B82\u7CBB\u7CBF\u7CBC\u7CBA\u7DA7\u7DB7\u7DC2\u7DA3\u7DAA\u7DC1\u7DC0\u7DC5\u7D9D\u7DCE\u7DC4\u7DC6\u7DCB\u7DCC\u7DAF\u7DB9\u7D96\u7DBC\u7D9F\u7DA6\u7DAE\u7DA9\u7DA1\u7DC9\u7F73\u7FE2\u7FE3\u7FE5\u7FDE\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u8024\u805D\u805C\u8189\u8186\u8183\u8187\u818D\u818C\u818B\u8215\u8497\u84A4\u84A1\u849F\u84BA\u84CE\u84C2\u84AC\u84AE\u84AB\u84B9\u84B4\u84C1\u84CD\u84AA\u849A\u84B1\u84D0\u849D\u84A7\u84BB\u84A2\u8494\u84C7\u84CC\u849B\u84A9\u84AF\u84A8\u84D6\u8498\u84B6\u84CF\u84A0\u84D7\u84D4\u84D2\u84DB\u84B0\u8491\u8661\u8733\u8723\u8728\u876B\u8740\u872E\u871E\u8721\u8719\u871B\u8743\u872C\u8741\u873E\u8746\u8720\u8732\u872A\u872D\u873C\u8712\u873A\u8731\u8735\u8742\u8726\u8727\u8738\u8724\u871A\u8730\u8711\u88F7\u88E7\u88F1\u88F2\u88FA\u88FE\u88EE\u88FC\u88F6\u88FB\uFFFD".split("");
        for (j3 = 0; j3 != D5[227].length; ++j3)
          if (D5[227][j3].charCodeAt(0) !== 65533) {
            e7[D5[227][j3]] = 58112 + j3;
            d2[58112 + j3] = D5[227][j3];
          }
        D5[228] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u88F0\u88EC\u88EB\u899D\u89A1\u899F\u899E\u89E9\u89EB\u89E8\u8AAB\u8A99\u8A8B\u8A92\u8A8F\u8A96\u8C3D\u8C68\u8C69\u8CD5\u8CCF\u8CD7\u8D96\u8E09\u8E02\u8DFF\u8E0D\u8DFD\u8E0A\u8E03\u8E07\u8E06\u8E05\u8DFE\u8E00\u8E04\u8F10\u8F11\u8F0E\u8F0D\u9123\u911C\u9120\u9122\u911F\u911D\u911A\u9124\u9121\u911B\u917A\u9172\u9179\u9173\u92A5\u92A4\u9276\u929B\u927A\u92A0\u9294\u92AA\u928D\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u92A6\u929A\u92AB\u9279\u9297\u927F\u92A3\u92EE\u928E\u9282\u9295\u92A2\u927D\u9288\u92A1\u928A\u9286\u928C\u9299\u92A7\u927E\u9287\u92A9\u929D\u928B\u922D\u969E\u96A1\u96FF\u9758\u977D\u977A\u977E\u9783\u9780\u9782\u977B\u9784\u9781\u977F\u97CE\u97CD\u9816\u98AD\u98AE\u9902\u9900\u9907\u999D\u999C\u99C3\u99B9\u99BB\u99BA\u99C2\u99BD\u99C7\u9AB1\u9AE3\u9AE7\u9B3E\u9B3F\u9B60\u9B61\u9B5F\u9CF1\u9CF2\u9CF5\u9EA7\u50FF\u5103\u5130\u50F8\u5106\u5107\u50F6\u50FE\u510B\u510C\u50FD\u510A\u528B\u528C\u52F1\u52EF\u5648\u5642\u564C\u5635\u5641\u564A\u5649\u5646\u5658\uFFFD".split("");
        for (j3 = 0; j3 != D5[228].length; ++j3)
          if (D5[228][j3].charCodeAt(0) !== 65533) {
            e7[D5[228][j3]] = 58368 + j3;
            d2[58368 + j3] = D5[228][j3];
          }
        D5[229] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u565A\u5640\u5633\u563D\u562C\u563E\u5638\u562A\u563A\u571A\u58AB\u589D\u58B1\u58A0\u58A3\u58AF\u58AC\u58A5\u58A1\u58FF\u5AFF\u5AF4\u5AFD\u5AF7\u5AF6\u5B03\u5AF8\u5B02\u5AF9\u5B01\u5B07\u5B05\u5B0F\u5C67\u5D99\u5D97\u5D9F\u5D92\u5DA2\u5D93\u5D95\u5DA0\u5D9C\u5DA1\u5D9A\u5D9E\u5E69\u5E5D\u5E60\u5E5C\u7DF3\u5EDB\u5EDE\u5EE1\u5F49\u5FB2\u618B\u6183\u6179\u61B1\u61B0\u61A2\u6189\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u619B\u6193\u61AF\u61AD\u619F\u6192\u61AA\u61A1\u618D\u6166\u61B3\u622D\u646E\u6470\u6496\u64A0\u6485\u6497\u649C\u648F\u648B\u648A\u648C\u64A3\u649F\u6468\u64B1\u6498\u6576\u657A\u6579\u657B\u65B2\u65B3\u66B5\u66B0\u66A9\u66B2\u66B7\u66AA\u66AF\u6A00\u6A06\u6A17\u69E5\u69F8\u6A15\u69F1\u69E4\u6A20\u69FF\u69EC\u69E2\u6A1B\u6A1D\u69FE\u6A27\u69F2\u69EE\u6A14\u69F7\u69E7\u6A40\u6A08\u69E6\u69FB\u6A0D\u69FC\u69EB\u6A09\u6A04\u6A18\u6A25\u6A0F\u69F6\u6A26\u6A07\u69F4\u6A16\u6B51\u6BA5\u6BA3\u6BA2\u6BA6\u6C01\u6C00\u6BFF\u6C02\u6F41\u6F26\u6F7E\u6F87\u6FC6\u6F92\uFFFD".split("");
        for (j3 = 0; j3 != D5[229].length; ++j3)
          if (D5[229][j3].charCodeAt(0) !== 65533) {
            e7[D5[229][j3]] = 58624 + j3;
            d2[58624 + j3] = D5[229][j3];
          }
        D5[230] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u6F8D\u6F89\u6F8C\u6F62\u6F4F\u6F85\u6F5A\u6F96\u6F76\u6F6C\u6F82\u6F55\u6F72\u6F52\u6F50\u6F57\u6F94\u6F93\u6F5D\u6F00\u6F61\u6F6B\u6F7D\u6F67\u6F90\u6F53\u6F8B\u6F69\u6F7F\u6F95\u6F63\u6F77\u6F6A\u6F7B\u71B2\u71AF\u719B\u71B0\u71A0\u719A\u71A9\u71B5\u719D\u71A5\u719E\u71A4\u71A1\u71AA\u719C\u71A7\u71B3\u7298\u729A\u7358\u7352\u735E\u735F\u7360\u735D\u735B\u7361\u735A\u7359\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u7362\u7487\u7489\u748A\u7486\u7481\u747D\u7485\u7488\u747C\u7479\u7508\u7507\u757E\u7625\u761E\u7619\u761D\u761C\u7623\u761A\u7628\u761B\u769C\u769D\u769E\u769B\u778D\u778F\u7789\u7788\u78CD\u78BB\u78CF\u78CC\u78D1\u78CE\u78D4\u78C8\u78C3\u78C4\u78C9\u799A\u79A1\u79A0\u799C\u79A2\u799B\u6B76\u7A39\u7AB2\u7AB4\u7AB3\u7BB7\u7BCB\u7BBE\u7BAC\u7BCE\u7BAF\u7BB9\u7BCA\u7BB5\u7CC5\u7CC8\u7CCC\u7CCB\u7DF7\u7DDB\u7DEA\u7DE7\u7DD7\u7DE1\u7E03\u7DFA\u7DE6\u7DF6\u7DF1\u7DF0\u7DEE\u7DDF\u7F76\u7FAC\u7FB0\u7FAD\u7FED\u7FEB\u7FEA\u7FEC\u7FE6\u7FE8\u8064\u8067\u81A3\u819F\uFFFD".split("");
        for (j3 = 0; j3 != D5[230].length; ++j3)
          if (D5[230][j3].charCodeAt(0) !== 65533) {
            e7[D5[230][j3]] = 58880 + j3;
            d2[58880 + j3] = D5[230][j3];
          }
        D5[231] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u819E\u8195\u81A2\u8199\u8197\u8216\u824F\u8253\u8252\u8250\u824E\u8251\u8524\u853B\u850F\u8500\u8529\u850E\u8509\u850D\u851F\u850A\u8527\u851C\u84FB\u852B\u84FA\u8508\u850C\u84F4\u852A\u84F2\u8515\u84F7\u84EB\u84F3\u84FC\u8512\u84EA\u84E9\u8516\u84FE\u8528\u851D\u852E\u8502\u84FD\u851E\u84F6\u8531\u8526\u84E7\u84E8\u84F0\u84EF\u84F9\u8518\u8520\u8530\u850B\u8519\u852F\u8662\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u8756\u8763\u8764\u8777\u87E1\u8773\u8758\u8754\u875B\u8752\u8761\u875A\u8751\u875E\u876D\u876A\u8750\u874E\u875F\u875D\u876F\u876C\u877A\u876E\u875C\u8765\u874F\u877B\u8775\u8762\u8767\u8769\u885A\u8905\u890C\u8914\u890B\u8917\u8918\u8919\u8906\u8916\u8911\u890E\u8909\u89A2\u89A4\u89A3\u89ED\u89F0\u89EC\u8ACF\u8AC6\u8AB8\u8AD3\u8AD1\u8AD4\u8AD5\u8ABB\u8AD7\u8ABE\u8AC0\u8AC5\u8AD8\u8AC3\u8ABA\u8ABD\u8AD9\u8C3E\u8C4D\u8C8F\u8CE5\u8CDF\u8CD9\u8CE8\u8CDA\u8CDD\u8CE7\u8DA0\u8D9C\u8DA1\u8D9B\u8E20\u8E23\u8E25\u8E24\u8E2E\u8E15\u8E1B\u8E16\u8E11\u8E19\u8E26\u8E27\uFFFD".split("");
        for (j3 = 0; j3 != D5[231].length; ++j3)
          if (D5[231][j3].charCodeAt(0) !== 65533) {
            e7[D5[231][j3]] = 59136 + j3;
            d2[59136 + j3] = D5[231][j3];
          }
        D5[232] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u8E14\u8E12\u8E18\u8E13\u8E1C\u8E17\u8E1A\u8F2C\u8F24\u8F18\u8F1A\u8F20\u8F23\u8F16\u8F17\u9073\u9070\u906F\u9067\u906B\u912F\u912B\u9129\u912A\u9132\u9126\u912E\u9185\u9186\u918A\u9181\u9182\u9184\u9180\u92D0\u92C3\u92C4\u92C0\u92D9\u92B6\u92CF\u92F1\u92DF\u92D8\u92E9\u92D7\u92DD\u92CC\u92EF\u92C2\u92E8\u92CA\u92C8\u92CE\u92E6\u92CD\u92D5\u92C9\u92E0\u92DE\u92E7\u92D1\u92D3\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u92B5\u92E1\u92C6\u92B4\u957C\u95AC\u95AB\u95AE\u95B0\u96A4\u96A2\u96D3\u9705\u9708\u9702\u975A\u978A\u978E\u9788\u97D0\u97CF\u981E\u981D\u9826\u9829\u9828\u9820\u981B\u9827\u98B2\u9908\u98FA\u9911\u9914\u9916\u9917\u9915\u99DC\u99CD\u99CF\u99D3\u99D4\u99CE\u99C9\u99D6\u99D8\u99CB\u99D7\u99CC\u9AB3\u9AEC\u9AEB\u9AF3\u9AF2\u9AF1\u9B46\u9B43\u9B67\u9B74\u9B71\u9B66\u9B76\u9B75\u9B70\u9B68\u9B64\u9B6C\u9CFC\u9CFA\u9CFD\u9CFF\u9CF7\u9D07\u9D00\u9CF9\u9CFB\u9D08\u9D05\u9D04\u9E83\u9ED3\u9F0F\u9F10\u511C\u5113\u5117\u511A\u5111\u51DE\u5334\u53E1\u5670\u5660\u566E\uFFFD".split("");
        for (j3 = 0; j3 != D5[232].length; ++j3)
          if (D5[232][j3].charCodeAt(0) !== 65533) {
            e7[D5[232][j3]] = 59392 + j3;
            d2[59392 + j3] = D5[232][j3];
          }
        D5[233] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u5673\u5666\u5663\u566D\u5672\u565E\u5677\u571C\u571B\u58C8\u58BD\u58C9\u58BF\u58BA\u58C2\u58BC\u58C6\u5B17\u5B19\u5B1B\u5B21\u5B14\u5B13\u5B10\u5B16\u5B28\u5B1A\u5B20\u5B1E\u5BEF\u5DAC\u5DB1\u5DA9\u5DA7\u5DB5\u5DB0\u5DAE\u5DAA\u5DA8\u5DB2\u5DAD\u5DAF\u5DB4\u5E67\u5E68\u5E66\u5E6F\u5EE9\u5EE7\u5EE6\u5EE8\u5EE5\u5F4B\u5FBC\u619D\u61A8\u6196\u61C5\u61B4\u61C6\u61C1\u61CC\u61BA\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u61BF\u61B8\u618C\u64D7\u64D6\u64D0\u64CF\u64C9\u64BD\u6489\u64C3\u64DB\u64F3\u64D9\u6533\u657F\u657C\u65A2\u66C8\u66BE\u66C0\u66CA\u66CB\u66CF\u66BD\u66BB\u66BA\u66CC\u6723\u6A34\u6A66\u6A49\u6A67\u6A32\u6A68\u6A3E\u6A5D\u6A6D\u6A76\u6A5B\u6A51\u6A28\u6A5A\u6A3B\u6A3F\u6A41\u6A6A\u6A64\u6A50\u6A4F\u6A54\u6A6F\u6A69\u6A60\u6A3C\u6A5E\u6A56\u6A55\u6A4D\u6A4E\u6A46\u6B55\u6B54\u6B56\u6BA7\u6BAA\u6BAB\u6BC8\u6BC7\u6C04\u6C03\u6C06\u6FAD\u6FCB\u6FA3\u6FC7\u6FBC\u6FCE\u6FC8\u6F5E\u6FC4\u6FBD\u6F9E\u6FCA\u6FA8\u7004\u6FA5\u6FAE\u6FBA\u6FAC\u6FAA\u6FCF\u6FBF\u6FB8\uFFFD".split("");
        for (j3 = 0; j3 != D5[233].length; ++j3)
          if (D5[233][j3].charCodeAt(0) !== 65533) {
            e7[D5[233][j3]] = 59648 + j3;
            d2[59648 + j3] = D5[233][j3];
          }
        D5[234] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u6FA2\u6FC9\u6FAB\u6FCD\u6FAF\u6FB2\u6FB0\u71C5\u71C2\u71BF\u71B8\u71D6\u71C0\u71C1\u71CB\u71D4\u71CA\u71C7\u71CF\u71BD\u71D8\u71BC\u71C6\u71DA\u71DB\u729D\u729E\u7369\u7366\u7367\u736C\u7365\u736B\u736A\u747F\u749A\u74A0\u7494\u7492\u7495\u74A1\u750B\u7580\u762F\u762D\u7631\u763D\u7633\u763C\u7635\u7632\u7630\u76BB\u76E6\u779A\u779D\u77A1\u779C\u779B\u77A2\u77A3\u7795\u7799\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u7797\u78DD\u78E9\u78E5\u78EA\u78DE\u78E3\u78DB\u78E1\u78E2\u78ED\u78DF\u78E0\u79A4\u7A44\u7A48\u7A47\u7AB6\u7AB8\u7AB5\u7AB1\u7AB7\u7BDE\u7BE3\u7BE7\u7BDD\u7BD5\u7BE5\u7BDA\u7BE8\u7BF9\u7BD4\u7BEA\u7BE2\u7BDC\u7BEB\u7BD8\u7BDF\u7CD2\u7CD4\u7CD7\u7CD0\u7CD1\u7E12\u7E21\u7E17\u7E0C\u7E1F\u7E20\u7E13\u7E0E\u7E1C\u7E15\u7E1A\u7E22\u7E0B\u7E0F\u7E16\u7E0D\u7E14\u7E25\u7E24\u7F43\u7F7B\u7F7C\u7F7A\u7FB1\u7FEF\u802A\u8029\u806C\u81B1\u81A6\u81AE\u81B9\u81B5\u81AB\u81B0\u81AC\u81B4\u81B2\u81B7\u81A7\u81F2\u8255\u8256\u8257\u8556\u8545\u856B\u854D\u8553\u8561\u8558\uFFFD".split("");
        for (j3 = 0; j3 != D5[234].length; ++j3)
          if (D5[234][j3].charCodeAt(0) !== 65533) {
            e7[D5[234][j3]] = 59904 + j3;
            d2[59904 + j3] = D5[234][j3];
          }
        D5[235] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u8540\u8546\u8564\u8541\u8562\u8544\u8551\u8547\u8563\u853E\u855B\u8571\u854E\u856E\u8575\u8555\u8567\u8560\u858C\u8566\u855D\u8554\u8565\u856C\u8663\u8665\u8664\u879B\u878F\u8797\u8793\u8792\u8788\u8781\u8796\u8798\u8779\u8787\u87A3\u8785\u8790\u8791\u879D\u8784\u8794\u879C\u879A\u8789\u891E\u8926\u8930\u892D\u892E\u8927\u8931\u8922\u8929\u8923\u892F\u892C\u891F\u89F1\u8AE0\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u8AE2\u8AF2\u8AF4\u8AF5\u8ADD\u8B14\u8AE4\u8ADF\u8AF0\u8AC8\u8ADE\u8AE1\u8AE8\u8AFF\u8AEF\u8AFB\u8C91\u8C92\u8C90\u8CF5\u8CEE\u8CF1\u8CF0\u8CF3\u8D6C\u8D6E\u8DA5\u8DA7\u8E33\u8E3E\u8E38\u8E40\u8E45\u8E36\u8E3C\u8E3D\u8E41\u8E30\u8E3F\u8EBD\u8F36\u8F2E\u8F35\u8F32\u8F39\u8F37\u8F34\u9076\u9079\u907B\u9086\u90FA\u9133\u9135\u9136\u9193\u9190\u9191\u918D\u918F\u9327\u931E\u9308\u931F\u9306\u930F\u937A\u9338\u933C\u931B\u9323\u9312\u9301\u9346\u932D\u930E\u930D\u92CB\u931D\u92FA\u9325\u9313\u92F9\u92F7\u9334\u9302\u9324\u92FF\u9329\u9339\u9335\u932A\u9314\u930C\uFFFD".split("");
        for (j3 = 0; j3 != D5[235].length; ++j3)
          if (D5[235][j3].charCodeAt(0) !== 65533) {
            e7[D5[235][j3]] = 60160 + j3;
            d2[60160 + j3] = D5[235][j3];
          }
        D5[236] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u930B\u92FE\u9309\u9300\u92FB\u9316\u95BC\u95CD\u95BE\u95B9\u95BA\u95B6\u95BF\u95B5\u95BD\u96A9\u96D4\u970B\u9712\u9710\u9799\u9797\u9794\u97F0\u97F8\u9835\u982F\u9832\u9924\u991F\u9927\u9929\u999E\u99EE\u99EC\u99E5\u99E4\u99F0\u99E3\u99EA\u99E9\u99E7\u9AB9\u9ABF\u9AB4\u9ABB\u9AF6\u9AFA\u9AF9\u9AF7\u9B33\u9B80\u9B85\u9B87\u9B7C\u9B7E\u9B7B\u9B82\u9B93\u9B92\u9B90\u9B7A\u9B95\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u9B7D\u9B88\u9D25\u9D17\u9D20\u9D1E\u9D14\u9D29\u9D1D\u9D18\u9D22\u9D10\u9D19\u9D1F\u9E88\u9E86\u9E87\u9EAE\u9EAD\u9ED5\u9ED6\u9EFA\u9F12\u9F3D\u5126\u5125\u5122\u5124\u5120\u5129\u52F4\u5693\u568C\u568D\u5686\u5684\u5683\u567E\u5682\u567F\u5681\u58D6\u58D4\u58CF\u58D2\u5B2D\u5B25\u5B32\u5B23\u5B2C\u5B27\u5B26\u5B2F\u5B2E\u5B7B\u5BF1\u5BF2\u5DB7\u5E6C\u5E6A\u5FBE\u5FBB\u61C3\u61B5\u61BC\u61E7\u61E0\u61E5\u61E4\u61E8\u61DE\u64EF\u64E9\u64E3\u64EB\u64E4\u64E8\u6581\u6580\u65B6\u65DA\u66D2\u6A8D\u6A96\u6A81\u6AA5\u6A89\u6A9F\u6A9B\u6AA1\u6A9E\u6A87\u6A93\u6A8E\uFFFD".split("");
        for (j3 = 0; j3 != D5[236].length; ++j3)
          if (D5[236][j3].charCodeAt(0) !== 65533) {
            e7[D5[236][j3]] = 60416 + j3;
            d2[60416 + j3] = D5[236][j3];
          }
        D5[237] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u6A95\u6A83\u6AA8\u6AA4\u6A91\u6A7F\u6AA6\u6A9A\u6A85\u6A8C\u6A92\u6B5B\u6BAD\u6C09\u6FCC\u6FA9\u6FF4\u6FD4\u6FE3\u6FDC\u6FED\u6FE7\u6FE6\u6FDE\u6FF2\u6FDD\u6FE2\u6FE8\u71E1\u71F1\u71E8\u71F2\u71E4\u71F0\u71E2\u7373\u736E\u736F\u7497\u74B2\u74AB\u7490\u74AA\u74AD\u74B1\u74A5\u74AF\u7510\u7511\u7512\u750F\u7584\u7643\u7648\u7649\u7647\u76A4\u76E9\u77B5\u77AB\u77B2\u77B7\u77B6\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u77B4\u77B1\u77A8\u77F0\u78F3\u78FD\u7902\u78FB\u78FC\u78F2\u7905\u78F9\u78FE\u7904\u79AB\u79A8\u7A5C\u7A5B\u7A56\u7A58\u7A54\u7A5A\u7ABE\u7AC0\u7AC1\u7C05\u7C0F\u7BF2\u7C00\u7BFF\u7BFB\u7C0E\u7BF4\u7C0B\u7BF3\u7C02\u7C09\u7C03\u7C01\u7BF8\u7BFD\u7C06\u7BF0\u7BF1\u7C10\u7C0A\u7CE8\u7E2D\u7E3C\u7E42\u7E33\u9848\u7E38\u7E2A\u7E49\u7E40\u7E47\u7E29\u7E4C\u7E30\u7E3B\u7E36\u7E44\u7E3A\u7F45\u7F7F\u7F7E\u7F7D\u7FF4\u7FF2\u802C\u81BB\u81C4\u81CC\u81CA\u81C5\u81C7\u81BC\u81E9\u825B\u825A\u825C\u8583\u8580\u858F\u85A7\u8595\u85A0\u858B\u85A3\u857B\u85A4\u859A\u859E\uFFFD".split("");
        for (j3 = 0; j3 != D5[237].length; ++j3)
          if (D5[237][j3].charCodeAt(0) !== 65533) {
            e7[D5[237][j3]] = 60672 + j3;
            d2[60672 + j3] = D5[237][j3];
          }
        D5[238] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u8577\u857C\u8589\u85A1\u857A\u8578\u8557\u858E\u8596\u8586\u858D\u8599\u859D\u8581\u85A2\u8582\u8588\u8585\u8579\u8576\u8598\u8590\u859F\u8668\u87BE\u87AA\u87AD\u87C5\u87B0\u87AC\u87B9\u87B5\u87BC\u87AE\u87C9\u87C3\u87C2\u87CC\u87B7\u87AF\u87C4\u87CA\u87B4\u87B6\u87BF\u87B8\u87BD\u87DE\u87B2\u8935\u8933\u893C\u893E\u8941\u8952\u8937\u8942\u89AD\u89AF\u89AE\u89F2\u89F3\u8B1E\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u8B18\u8B16\u8B11\u8B05\u8B0B\u8B22\u8B0F\u8B12\u8B15\u8B07\u8B0D\u8B08\u8B06\u8B1C\u8B13\u8B1A\u8C4F\u8C70\u8C72\u8C71\u8C6F\u8C95\u8C94\u8CF9\u8D6F\u8E4E\u8E4D\u8E53\u8E50\u8E4C\u8E47\u8F43\u8F40\u9085\u907E\u9138\u919A\u91A2\u919B\u9199\u919F\u91A1\u919D\u91A0\u93A1\u9383\u93AF\u9364\u9356\u9347\u937C\u9358\u935C\u9376\u9349\u9350\u9351\u9360\u936D\u938F\u934C\u936A\u9379\u9357\u9355\u9352\u934F\u9371\u9377\u937B\u9361\u935E\u9363\u9367\u9380\u934E\u9359\u95C7\u95C0\u95C9\u95C3\u95C5\u95B7\u96AE\u96B0\u96AC\u9720\u971F\u9718\u971D\u9719\u979A\u97A1\u979C\uFFFD".split("");
        for (j3 = 0; j3 != D5[238].length; ++j3)
          if (D5[238][j3].charCodeAt(0) !== 65533) {
            e7[D5[238][j3]] = 60928 + j3;
            d2[60928 + j3] = D5[238][j3];
          }
        D5[239] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u979E\u979D\u97D5\u97D4\u97F1\u9841\u9844\u984A\u9849\u9845\u9843\u9925\u992B\u992C\u992A\u9933\u9932\u992F\u992D\u9931\u9930\u9998\u99A3\u99A1\u9A02\u99FA\u99F4\u99F7\u99F9\u99F8\u99F6\u99FB\u99FD\u99FE\u99FC\u9A03\u9ABE\u9AFE\u9AFD\u9B01\u9AFC\u9B48\u9B9A\u9BA8\u9B9E\u9B9B\u9BA6\u9BA1\u9BA5\u9BA4\u9B86\u9BA2\u9BA0\u9BAF\u9D33\u9D41\u9D67\u9D36\u9D2E\u9D2F\u9D31\u9D38\u9D30\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u9D45\u9D42\u9D43\u9D3E\u9D37\u9D40\u9D3D\u7FF5\u9D2D\u9E8A\u9E89\u9E8D\u9EB0\u9EC8\u9EDA\u9EFB\u9EFF\u9F24\u9F23\u9F22\u9F54\u9FA0\u5131\u512D\u512E\u5698\u569C\u5697\u569A\u569D\u5699\u5970\u5B3C\u5C69\u5C6A\u5DC0\u5E6D\u5E6E\u61D8\u61DF\u61ED\u61EE\u61F1\u61EA\u61F0\u61EB\u61D6\u61E9\u64FF\u6504\u64FD\u64F8\u6501\u6503\u64FC\u6594\u65DB\u66DA\u66DB\u66D8\u6AC5\u6AB9\u6ABD\u6AE1\u6AC6\u6ABA\u6AB6\u6AB7\u6AC7\u6AB4\u6AAD\u6B5E\u6BC9\u6C0B\u7007\u700C\u700D\u7001\u7005\u7014\u700E\u6FFF\u7000\u6FFB\u7026\u6FFC\u6FF7\u700A\u7201\u71FF\u71F9\u7203\u71FD\u7376\uFFFD".split("");
        for (j3 = 0; j3 != D5[239].length; ++j3)
          if (D5[239][j3].charCodeAt(0) !== 65533) {
            e7[D5[239][j3]] = 61184 + j3;
            d2[61184 + j3] = D5[239][j3];
          }
        D5[240] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u74B8\u74C0\u74B5\u74C1\u74BE\u74B6\u74BB\u74C2\u7514\u7513\u765C\u7664\u7659\u7650\u7653\u7657\u765A\u76A6\u76BD\u76EC\u77C2\u77BA\u78FF\u790C\u7913\u7914\u7909\u7910\u7912\u7911\u79AD\u79AC\u7A5F\u7C1C\u7C29\u7C19\u7C20\u7C1F\u7C2D\u7C1D\u7C26\u7C28\u7C22\u7C25\u7C30\u7E5C\u7E50\u7E56\u7E63\u7E58\u7E62\u7E5F\u7E51\u7E60\u7E57\u7E53\u7FB5\u7FB3\u7FF7\u7FF8\u8075\u81D1\u81D2\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u81D0\u825F\u825E\u85B4\u85C6\u85C0\u85C3\u85C2\u85B3\u85B5\u85BD\u85C7\u85C4\u85BF\u85CB\u85CE\u85C8\u85C5\u85B1\u85B6\u85D2\u8624\u85B8\u85B7\u85BE\u8669\u87E7\u87E6\u87E2\u87DB\u87EB\u87EA\u87E5\u87DF\u87F3\u87E4\u87D4\u87DC\u87D3\u87ED\u87D8\u87E3\u87A4\u87D7\u87D9\u8801\u87F4\u87E8\u87DD\u8953\u894B\u894F\u894C\u8946\u8950\u8951\u8949\u8B2A\u8B27\u8B23\u8B33\u8B30\u8B35\u8B47\u8B2F\u8B3C\u8B3E\u8B31\u8B25\u8B37\u8B26\u8B36\u8B2E\u8B24\u8B3B\u8B3D\u8B3A\u8C42\u8C75\u8C99\u8C98\u8C97\u8CFE\u8D04\u8D02\u8D00\u8E5C\u8E62\u8E60\u8E57\u8E56\u8E5E\u8E65\u8E67\uFFFD".split("");
        for (j3 = 0; j3 != D5[240].length; ++j3)
          if (D5[240][j3].charCodeAt(0) !== 65533) {
            e7[D5[240][j3]] = 61440 + j3;
            d2[61440 + j3] = D5[240][j3];
          }
        D5[241] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u8E5B\u8E5A\u8E61\u8E5D\u8E69\u8E54\u8F46\u8F47\u8F48\u8F4B\u9128\u913A\u913B\u913E\u91A8\u91A5\u91A7\u91AF\u91AA\u93B5\u938C\u9392\u93B7\u939B\u939D\u9389\u93A7\u938E\u93AA\u939E\u93A6\u9395\u9388\u9399\u939F\u938D\u93B1\u9391\u93B2\u93A4\u93A8\u93B4\u93A3\u93A5\u95D2\u95D3\u95D1\u96B3\u96D7\u96DA\u5DC2\u96DF\u96D8\u96DD\u9723\u9722\u9725\u97AC\u97AE\u97A8\u97AB\u97A4\u97AA\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u97A2\u97A5\u97D7\u97D9\u97D6\u97D8\u97FA\u9850\u9851\u9852\u98B8\u9941\u993C\u993A\u9A0F\u9A0B\u9A09\u9A0D\u9A04\u9A11\u9A0A\u9A05\u9A07\u9A06\u9AC0\u9ADC\u9B08\u9B04\u9B05\u9B29\u9B35\u9B4A\u9B4C\u9B4B\u9BC7\u9BC6\u9BC3\u9BBF\u9BC1\u9BB5\u9BB8\u9BD3\u9BB6\u9BC4\u9BB9\u9BBD\u9D5C\u9D53\u9D4F\u9D4A\u9D5B\u9D4B\u9D59\u9D56\u9D4C\u9D57\u9D52\u9D54\u9D5F\u9D58\u9D5A\u9E8E\u9E8C\u9EDF\u9F01\u9F00\u9F16\u9F25\u9F2B\u9F2A\u9F29\u9F28\u9F4C\u9F55\u5134\u5135\u5296\u52F7\u53B4\u56AB\u56AD\u56A6\u56A7\u56AA\u56AC\u58DA\u58DD\u58DB\u5912\u5B3D\u5B3E\u5B3F\u5DC3\u5E70\uFFFD".split("");
        for (j3 = 0; j3 != D5[241].length; ++j3)
          if (D5[241][j3].charCodeAt(0) !== 65533) {
            e7[D5[241][j3]] = 61696 + j3;
            d2[61696 + j3] = D5[241][j3];
          }
        D5[242] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u5FBF\u61FB\u6507\u6510\u650D\u6509\u650C\u650E\u6584\u65DE\u65DD\u66DE\u6AE7\u6AE0\u6ACC\u6AD1\u6AD9\u6ACB\u6ADF\u6ADC\u6AD0\u6AEB\u6ACF\u6ACD\u6ADE\u6B60\u6BB0\u6C0C\u7019\u7027\u7020\u7016\u702B\u7021\u7022\u7023\u7029\u7017\u7024\u701C\u702A\u720C\u720A\u7207\u7202\u7205\u72A5\u72A6\u72A4\u72A3\u72A1\u74CB\u74C5\u74B7\u74C3\u7516\u7660\u77C9\u77CA\u77C4\u77F1\u791D\u791B\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u7921\u791C\u7917\u791E\u79B0\u7A67\u7A68\u7C33\u7C3C\u7C39\u7C2C\u7C3B\u7CEC\u7CEA\u7E76\u7E75\u7E78\u7E70\u7E77\u7E6F\u7E7A\u7E72\u7E74\u7E68\u7F4B\u7F4A\u7F83\u7F86\u7FB7\u7FFD\u7FFE\u8078\u81D7\u81D5\u8264\u8261\u8263\u85EB\u85F1\u85ED\u85D9\u85E1\u85E8\u85DA\u85D7\u85EC\u85F2\u85F8\u85D8\u85DF\u85E3\u85DC\u85D1\u85F0\u85E6\u85EF\u85DE\u85E2\u8800\u87FA\u8803\u87F6\u87F7\u8809\u880C\u880B\u8806\u87FC\u8808\u87FF\u880A\u8802\u8962\u895A\u895B\u8957\u8961\u895C\u8958\u895D\u8959\u8988\u89B7\u89B6\u89F6\u8B50\u8B48\u8B4A\u8B40\u8B53\u8B56\u8B54\u8B4B\u8B55\uFFFD".split("");
        for (j3 = 0; j3 != D5[242].length; ++j3)
          if (D5[242][j3].charCodeAt(0) !== 65533) {
            e7[D5[242][j3]] = 61952 + j3;
            d2[61952 + j3] = D5[242][j3];
          }
        D5[243] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u8B51\u8B42\u8B52\u8B57\u8C43\u8C77\u8C76\u8C9A\u8D06\u8D07\u8D09\u8DAC\u8DAA\u8DAD\u8DAB\u8E6D\u8E78\u8E73\u8E6A\u8E6F\u8E7B\u8EC2\u8F52\u8F51\u8F4F\u8F50\u8F53\u8FB4\u9140\u913F\u91B0\u91AD\u93DE\u93C7\u93CF\u93C2\u93DA\u93D0\u93F9\u93EC\u93CC\u93D9\u93A9\u93E6\u93CA\u93D4\u93EE\u93E3\u93D5\u93C4\u93CE\u93C0\u93D2\u93E7\u957D\u95DA\u95DB\u96E1\u9729\u972B\u972C\u9728\u9726\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u97B3\u97B7\u97B6\u97DD\u97DE\u97DF\u985C\u9859\u985D\u9857\u98BF\u98BD\u98BB\u98BE\u9948\u9947\u9943\u99A6\u99A7\u9A1A\u9A15\u9A25\u9A1D\u9A24\u9A1B\u9A22\u9A20\u9A27\u9A23\u9A1E\u9A1C\u9A14\u9AC2\u9B0B\u9B0A\u9B0E\u9B0C\u9B37\u9BEA\u9BEB\u9BE0\u9BDE\u9BE4\u9BE6\u9BE2\u9BF0\u9BD4\u9BD7\u9BEC\u9BDC\u9BD9\u9BE5\u9BD5\u9BE1\u9BDA\u9D77\u9D81\u9D8A\u9D84\u9D88\u9D71\u9D80\u9D78\u9D86\u9D8B\u9D8C\u9D7D\u9D6B\u9D74\u9D75\u9D70\u9D69\u9D85\u9D73\u9D7B\u9D82\u9D6F\u9D79\u9D7F\u9D87\u9D68\u9E94\u9E91\u9EC0\u9EFC\u9F2D\u9F40\u9F41\u9F4D\u9F56\u9F57\u9F58\u5337\u56B2\uFFFD".split("");
        for (j3 = 0; j3 != D5[243].length; ++j3)
          if (D5[243][j3].charCodeAt(0) !== 65533) {
            e7[D5[243][j3]] = 62208 + j3;
            d2[62208 + j3] = D5[243][j3];
          }
        D5[244] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u56B5\u56B3\u58E3\u5B45\u5DC6\u5DC7\u5EEE\u5EEF\u5FC0\u5FC1\u61F9\u6517\u6516\u6515\u6513\u65DF\u66E8\u66E3\u66E4\u6AF3\u6AF0\u6AEA\u6AE8\u6AF9\u6AF1\u6AEE\u6AEF\u703C\u7035\u702F\u7037\u7034\u7031\u7042\u7038\u703F\u703A\u7039\u7040\u703B\u7033\u7041\u7213\u7214\u72A8\u737D\u737C\u74BA\u76AB\u76AA\u76BE\u76ED\u77CC\u77CE\u77CF\u77CD\u77F2\u7925\u7923\u7927\u7928\u7924\u7929\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u79B2\u7A6E\u7A6C\u7A6D\u7AF7\u7C49\u7C48\u7C4A\u7C47\u7C45\u7CEE\u7E7B\u7E7E\u7E81\u7E80\u7FBA\u7FFF\u8079\u81DB\u81D9\u820B\u8268\u8269\u8622\u85FF\u8601\u85FE\u861B\u8600\u85F6\u8604\u8609\u8605\u860C\u85FD\u8819\u8810\u8811\u8817\u8813\u8816\u8963\u8966\u89B9\u89F7\u8B60\u8B6A\u8B5D\u8B68\u8B63\u8B65\u8B67\u8B6D\u8DAE\u8E86\u8E88\u8E84\u8F59\u8F56\u8F57\u8F55\u8F58\u8F5A\u908D\u9143\u9141\u91B7\u91B5\u91B2\u91B3\u940B\u9413\u93FB\u9420\u940F\u9414\u93FE\u9415\u9410\u9428\u9419\u940D\u93F5\u9400\u93F7\u9407\u940E\u9416\u9412\u93FA\u9409\u93F8\u940A\u93FF\uFFFD".split("");
        for (j3 = 0; j3 != D5[244].length; ++j3)
          if (D5[244][j3].charCodeAt(0) !== 65533) {
            e7[D5[244][j3]] = 62464 + j3;
            d2[62464 + j3] = D5[244][j3];
          }
        D5[245] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u93FC\u940C\u93F6\u9411\u9406\u95DE\u95E0\u95DF\u972E\u972F\u97B9\u97BB\u97FD\u97FE\u9860\u9862\u9863\u985F\u98C1\u98C2\u9950\u994E\u9959\u994C\u994B\u9953\u9A32\u9A34\u9A31\u9A2C\u9A2A\u9A36\u9A29\u9A2E\u9A38\u9A2D\u9AC7\u9ACA\u9AC6\u9B10\u9B12\u9B11\u9C0B\u9C08\u9BF7\u9C05\u9C12\u9BF8\u9C40\u9C07\u9C0E\u9C06\u9C17\u9C14\u9C09\u9D9F\u9D99\u9DA4\u9D9D\u9D92\u9D98\u9D90\u9D9B\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u9DA0\u9D94\u9D9C\u9DAA\u9D97\u9DA1\u9D9A\u9DA2\u9DA8\u9D9E\u9DA3\u9DBF\u9DA9\u9D96\u9DA6\u9DA7\u9E99\u9E9B\u9E9A\u9EE5\u9EE4\u9EE7\u9EE6\u9F30\u9F2E\u9F5B\u9F60\u9F5E\u9F5D\u9F59\u9F91\u513A\u5139\u5298\u5297\u56C3\u56BD\u56BE\u5B48\u5B47\u5DCB\u5DCF\u5EF1\u61FD\u651B\u6B02\u6AFC\u6B03\u6AF8\u6B00\u7043\u7044\u704A\u7048\u7049\u7045\u7046\u721D\u721A\u7219\u737E\u7517\u766A\u77D0\u792D\u7931\u792F\u7C54\u7C53\u7CF2\u7E8A\u7E87\u7E88\u7E8B\u7E86\u7E8D\u7F4D\u7FBB\u8030\u81DD\u8618\u862A\u8626\u861F\u8623\u861C\u8619\u8627\u862E\u8621\u8620\u8629\u861E\u8625\uFFFD".split("");
        for (j3 = 0; j3 != D5[245].length; ++j3)
          if (D5[245][j3].charCodeAt(0) !== 65533) {
            e7[D5[245][j3]] = 62720 + j3;
            d2[62720 + j3] = D5[245][j3];
          }
        D5[246] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u8829\u881D\u881B\u8820\u8824\u881C\u882B\u884A\u896D\u8969\u896E\u896B\u89FA\u8B79\u8B78\u8B45\u8B7A\u8B7B\u8D10\u8D14\u8DAF\u8E8E\u8E8C\u8F5E\u8F5B\u8F5D\u9146\u9144\u9145\u91B9\u943F\u943B\u9436\u9429\u943D\u943C\u9430\u9439\u942A\u9437\u942C\u9440\u9431\u95E5\u95E4\u95E3\u9735\u973A\u97BF\u97E1\u9864\u98C9\u98C6\u98C0\u9958\u9956\u9A39\u9A3D\u9A46\u9A44\u9A42\u9A41\u9A3A\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u9A3F\u9ACD\u9B15\u9B17\u9B18\u9B16\u9B3A\u9B52\u9C2B\u9C1D\u9C1C\u9C2C\u9C23\u9C28\u9C29\u9C24\u9C21\u9DB7\u9DB6\u9DBC\u9DC1\u9DC7\u9DCA\u9DCF\u9DBE\u9DC5\u9DC3\u9DBB\u9DB5\u9DCE\u9DB9\u9DBA\u9DAC\u9DC8\u9DB1\u9DAD\u9DCC\u9DB3\u9DCD\u9DB2\u9E7A\u9E9C\u9EEB\u9EEE\u9EED\u9F1B\u9F18\u9F1A\u9F31\u9F4E\u9F65\u9F64\u9F92\u4EB9\u56C6\u56C5\u56CB\u5971\u5B4B\u5B4C\u5DD5\u5DD1\u5EF2\u6521\u6520\u6526\u6522\u6B0B\u6B08\u6B09\u6C0D\u7055\u7056\u7057\u7052\u721E\u721F\u72A9\u737F\u74D8\u74D5\u74D9\u74D7\u766D\u76AD\u7935\u79B4\u7A70\u7A71\u7C57\u7C5C\u7C59\u7C5B\u7C5A\uFFFD".split("");
        for (j3 = 0; j3 != D5[246].length; ++j3)
          if (D5[246][j3].charCodeAt(0) !== 65533) {
            e7[D5[246][j3]] = 62976 + j3;
            d2[62976 + j3] = D5[246][j3];
          }
        D5[247] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u7CF4\u7CF1\u7E91\u7F4F\u7F87\u81DE\u826B\u8634\u8635\u8633\u862C\u8632\u8636\u882C\u8828\u8826\u882A\u8825\u8971\u89BF\u89BE\u89FB\u8B7E\u8B84\u8B82\u8B86\u8B85\u8B7F\u8D15\u8E95\u8E94\u8E9A\u8E92\u8E90\u8E96\u8E97\u8F60\u8F62\u9147\u944C\u9450\u944A\u944B\u944F\u9447\u9445\u9448\u9449\u9446\u973F\u97E3\u986A\u9869\u98CB\u9954\u995B\u9A4E\u9A53\u9A54\u9A4C\u9A4F\u9A48\u9A4A\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u9A49\u9A52\u9A50\u9AD0\u9B19\u9B2B\u9B3B\u9B56\u9B55\u9C46\u9C48\u9C3F\u9C44\u9C39\u9C33\u9C41\u9C3C\u9C37\u9C34\u9C32\u9C3D\u9C36\u9DDB\u9DD2\u9DDE\u9DDA\u9DCB\u9DD0\u9DDC\u9DD1\u9DDF\u9DE9\u9DD9\u9DD8\u9DD6\u9DF5\u9DD5\u9DDD\u9EB6\u9EF0\u9F35\u9F33\u9F32\u9F42\u9F6B\u9F95\u9FA2\u513D\u5299\u58E8\u58E7\u5972\u5B4D\u5DD8\u882F\u5F4F\u6201\u6203\u6204\u6529\u6525\u6596\u66EB\u6B11\u6B12\u6B0F\u6BCA\u705B\u705A\u7222\u7382\u7381\u7383\u7670\u77D4\u7C67\u7C66\u7E95\u826C\u863A\u8640\u8639\u863C\u8631\u863B\u863E\u8830\u8832\u882E\u8833\u8976\u8974\u8973\u89FE\uFFFD".split("");
        for (j3 = 0; j3 != D5[247].length; ++j3)
          if (D5[247][j3].charCodeAt(0) !== 65533) {
            e7[D5[247][j3]] = 63232 + j3;
            d2[63232 + j3] = D5[247][j3];
          }
        D5[248] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u8B8C\u8B8E\u8B8B\u8B88\u8C45\u8D19\u8E98\u8F64\u8F63\u91BC\u9462\u9455\u945D\u9457\u945E\u97C4\u97C5\u9800\u9A56\u9A59\u9B1E\u9B1F\u9B20\u9C52\u9C58\u9C50\u9C4A\u9C4D\u9C4B\u9C55\u9C59\u9C4C\u9C4E\u9DFB\u9DF7\u9DEF\u9DE3\u9DEB\u9DF8\u9DE4\u9DF6\u9DE1\u9DEE\u9DE6\u9DF2\u9DF0\u9DE2\u9DEC\u9DF4\u9DF3\u9DE8\u9DED\u9EC2\u9ED0\u9EF2\u9EF3\u9F06\u9F1C\u9F38\u9F37\u9F36\u9F43\u9F4F\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u9F71\u9F70\u9F6E\u9F6F\u56D3\u56CD\u5B4E\u5C6D\u652D\u66ED\u66EE\u6B13\u705F\u7061\u705D\u7060\u7223\u74DB\u74E5\u77D5\u7938\u79B7\u79B6\u7C6A\u7E97\u7F89\u826D\u8643\u8838\u8837\u8835\u884B\u8B94\u8B95\u8E9E\u8E9F\u8EA0\u8E9D\u91BE\u91BD\u91C2\u946B\u9468\u9469\u96E5\u9746\u9743\u9747\u97C7\u97E5\u9A5E\u9AD5\u9B59\u9C63\u9C67\u9C66\u9C62\u9C5E\u9C60\u9E02\u9DFE\u9E07\u9E03\u9E06\u9E05\u9E00\u9E01\u9E09\u9DFF\u9DFD\u9E04\u9EA0\u9F1E\u9F46\u9F74\u9F75\u9F76\u56D4\u652E\u65B8\u6B18\u6B19\u6B17\u6B1A\u7062\u7226\u72AA\u77D8\u77D9\u7939\u7C69\u7C6B\u7CF6\u7E9A\uFFFD".split("");
        for (j3 = 0; j3 != D5[248].length; ++j3)
          if (D5[248][j3].charCodeAt(0) !== 65533) {
            e7[D5[248][j3]] = 63488 + j3;
            d2[63488 + j3] = D5[248][j3];
          }
        D5[249] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u7E98\u7E9B\u7E99\u81E0\u81E1\u8646\u8647\u8648\u8979\u897A\u897C\u897B\u89FF\u8B98\u8B99\u8EA5\u8EA4\u8EA3\u946E\u946D\u946F\u9471\u9473\u9749\u9872\u995F\u9C68\u9C6E\u9C6D\u9E0B\u9E0D\u9E10\u9E0F\u9E12\u9E11\u9EA1\u9EF5\u9F09\u9F47\u9F78\u9F7B\u9F7A\u9F79\u571E\u7066\u7C6F\u883C\u8DB2\u8EA6\u91C3\u9474\u9478\u9476\u9475\u9A60\u9C74\u9C73\u9C71\u9C75\u9E14\u9E13\u9EF6\u9F0A\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u9FA4\u7068\u7065\u7CF7\u866A\u883E\u883D\u883F\u8B9E\u8C9C\u8EA9\u8EC9\u974B\u9873\u9874\u98CC\u9961\u99AB\u9A64\u9A66\u9A67\u9B24\u9E15\u9E17\u9F48\u6207\u6B1E\u7227\u864C\u8EA8\u9482\u9480\u9481\u9A69\u9A68\u9B2E\u9E19\u7229\u864B\u8B9F\u9483\u9C79\u9EB7\u7675\u9A6B\u9C7A\u9E1D\u7069\u706A\u9EA4\u9F7E\u9F49\u9F98\u7881\u92B9\u88CF\u58BB\u6052\u7CA7\u5AFA\u2554\u2566\u2557\u2560\u256C\u2563\u255A\u2569\u255D\u2552\u2564\u2555\u255E\u256A\u2561\u2558\u2567\u255B\u2553\u2565\u2556\u255F\u256B\u2562\u2559\u2568\u255C\u2551\u2550\u256D\u256E\u2570\u256F\u2593\uFFFD".split("");
        for (j3 = 0; j3 != D5[249].length; ++j3)
          if (D5[249][j3].charCodeAt(0) !== 65533) {
            e7[D5[249][j3]] = 63744 + j3;
            d2[63744 + j3] = D5[249][j3];
          }
        return { "enc": e7, "dec": d2 };
      }();
      cptable2[1250] = function() {
        var d2 = "\0\x07\b	\n\v\f\r\x1B !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~\x7F\u20AC\uFFFD\u201A\uFFFD\u201E\u2026\u2020\u2021\uFFFD\u2030\u0160\u2039\u015A\u0164\u017D\u0179\uFFFD\u2018\u2019\u201C\u201D\u2022\u2013\u2014\uFFFD\u2122\u0161\u203A\u015B\u0165\u017E\u017A\xA0\u02C7\u02D8\u0141\xA4\u0104\xA6\xA7\xA8\xA9\u015E\xAB\xAC\xAD\xAE\u017B\xB0\xB1\u02DB\u0142\xB4\xB5\xB6\xB7\xB8\u0105\u015F\xBB\u013D\u02DD\u013E\u017C\u0154\xC1\xC2\u0102\xC4\u0139\u0106\xC7\u010C\xC9\u0118\xCB\u011A\xCD\xCE\u010E\u0110\u0143\u0147\xD3\xD4\u0150\xD6\xD7\u0158\u016E\xDA\u0170\xDC\xDD\u0162\xDF\u0155\xE1\xE2\u0103\xE4\u013A\u0107\xE7\u010D\xE9\u0119\xEB\u011B\xED\xEE\u010F\u0111\u0144\u0148\xF3\xF4\u0151\xF6\xF7\u0159\u016F\xFA\u0171\xFC\xFD\u0163\u02D9", D5 = [], e7 = {};
        for (var i6 = 0; i6 != d2.length; ++i6) {
          if (d2.charCodeAt(i6) !== 65533)
            e7[d2.charAt(i6)] = i6;
          D5[i6] = d2.charAt(i6);
        }
        return { "enc": e7, "dec": D5 };
      }();
      cptable2[1251] = function() {
        var d2 = "\0\x07\b	\n\v\f\r\x1B !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~\x7F\u0402\u0403\u201A\u0453\u201E\u2026\u2020\u2021\u20AC\u2030\u0409\u2039\u040A\u040C\u040B\u040F\u0452\u2018\u2019\u201C\u201D\u2022\u2013\u2014\uFFFD\u2122\u0459\u203A\u045A\u045C\u045B\u045F\xA0\u040E\u045E\u0408\xA4\u0490\xA6\xA7\u0401\xA9\u0404\xAB\xAC\xAD\xAE\u0407\xB0\xB1\u0406\u0456\u0491\xB5\xB6\xB7\u0451\u2116\u0454\xBB\u0458\u0405\u0455\u0457\u0410\u0411\u0412\u0413\u0414\u0415\u0416\u0417\u0418\u0419\u041A\u041B\u041C\u041D\u041E\u041F\u0420\u0421\u0422\u0423\u0424\u0425\u0426\u0427\u0428\u0429\u042A\u042B\u042C\u042D\u042E\u042F\u0430\u0431\u0432\u0433\u0434\u0435\u0436\u0437\u0438\u0439\u043A\u043B\u043C\u043D\u043E\u043F\u0440\u0441\u0442\u0443\u0444\u0445\u0446\u0447\u0448\u0449\u044A\u044B\u044C\u044D\u044E\u044F", D5 = [], e7 = {};
        for (var i6 = 0; i6 != d2.length; ++i6) {
          if (d2.charCodeAt(i6) !== 65533)
            e7[d2.charAt(i6)] = i6;
          D5[i6] = d2.charAt(i6);
        }
        return { "enc": e7, "dec": D5 };
      }();
      cptable2[1252] = function() {
        var d2 = "\0\x07\b	\n\v\f\r\x1B !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~\x7F\u20AC\uFFFD\u201A\u0192\u201E\u2026\u2020\u2021\u02C6\u2030\u0160\u2039\u0152\uFFFD\u017D\uFFFD\uFFFD\u2018\u2019\u201C\u201D\u2022\u2013\u2014\u02DC\u2122\u0161\u203A\u0153\uFFFD\u017E\u0178\xA0\xA1\xA2\xA3\xA4\xA5\xA6\xA7\xA8\xA9\xAA\xAB\xAC\xAD\xAE\xAF\xB0\xB1\xB2\xB3\xB4\xB5\xB6\xB7\xB8\xB9\xBA\xBB\xBC\xBD\xBE\xBF\xC0\xC1\xC2\xC3\xC4\xC5\xC6\xC7\xC8\xC9\xCA\xCB\xCC\xCD\xCE\xCF\xD0\xD1\xD2\xD3\xD4\xD5\xD6\xD7\xD8\xD9\xDA\xDB\xDC\xDD\xDE\xDF\xE0\xE1\xE2\xE3\xE4\xE5\xE6\xE7\xE8\xE9\xEA\xEB\xEC\xED\xEE\xEF\xF0\xF1\xF2\xF3\xF4\xF5\xF6\xF7\xF8\xF9\xFA\xFB\xFC\xFD\xFE\xFF", D5 = [], e7 = {};
        for (var i6 = 0; i6 != d2.length; ++i6) {
          if (d2.charCodeAt(i6) !== 65533)
            e7[d2.charAt(i6)] = i6;
          D5[i6] = d2.charAt(i6);
        }
        return { "enc": e7, "dec": D5 };
      }();
      cptable2[1253] = function() {
        var d2 = "\0\x07\b	\n\v\f\r\x1B !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~\x7F\u20AC\uFFFD\u201A\u0192\u201E\u2026\u2020\u2021\uFFFD\u2030\uFFFD\u2039\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u2018\u2019\u201C\u201D\u2022\u2013\u2014\uFFFD\u2122\uFFFD\u203A\uFFFD\uFFFD\uFFFD\uFFFD\xA0\u0385\u0386\xA3\xA4\xA5\xA6\xA7\xA8\xA9\uFFFD\xAB\xAC\xAD\xAE\u2015\xB0\xB1\xB2\xB3\u0384\xB5\xB6\xB7\u0388\u0389\u038A\xBB\u038C\xBD\u038E\u038F\u0390\u0391\u0392\u0393\u0394\u0395\u0396\u0397\u0398\u0399\u039A\u039B\u039C\u039D\u039E\u039F\u03A0\u03A1\uFFFD\u03A3\u03A4\u03A5\u03A6\u03A7\u03A8\u03A9\u03AA\u03AB\u03AC\u03AD\u03AE\u03AF\u03B0\u03B1\u03B2\u03B3\u03B4\u03B5\u03B6\u03B7\u03B8\u03B9\u03BA\u03BB\u03BC\u03BD\u03BE\u03BF\u03C0\u03C1\u03C2\u03C3\u03C4\u03C5\u03C6\u03C7\u03C8\u03C9\u03CA\u03CB\u03CC\u03CD\u03CE\uFFFD", D5 = [], e7 = {};
        for (var i6 = 0; i6 != d2.length; ++i6) {
          if (d2.charCodeAt(i6) !== 65533)
            e7[d2.charAt(i6)] = i6;
          D5[i6] = d2.charAt(i6);
        }
        return { "enc": e7, "dec": D5 };
      }();
      cptable2[1254] = function() {
        var d2 = "\0\x07\b	\n\v\f\r\x1B !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~\x7F\u20AC\uFFFD\u201A\u0192\u201E\u2026\u2020\u2021\u02C6\u2030\u0160\u2039\u0152\uFFFD\uFFFD\uFFFD\uFFFD\u2018\u2019\u201C\u201D\u2022\u2013\u2014\u02DC\u2122\u0161\u203A\u0153\uFFFD\uFFFD\u0178\xA0\xA1\xA2\xA3\xA4\xA5\xA6\xA7\xA8\xA9\xAA\xAB\xAC\xAD\xAE\xAF\xB0\xB1\xB2\xB3\xB4\xB5\xB6\xB7\xB8\xB9\xBA\xBB\xBC\xBD\xBE\xBF\xC0\xC1\xC2\xC3\xC4\xC5\xC6\xC7\xC8\xC9\xCA\xCB\xCC\xCD\xCE\xCF\u011E\xD1\xD2\xD3\xD4\xD5\xD6\xD7\xD8\xD9\xDA\xDB\xDC\u0130\u015E\xDF\xE0\xE1\xE2\xE3\xE4\xE5\xE6\xE7\xE8\xE9\xEA\xEB\xEC\xED\xEE\xEF\u011F\xF1\xF2\xF3\xF4\xF5\xF6\xF7\xF8\xF9\xFA\xFB\xFC\u0131\u015F\xFF", D5 = [], e7 = {};
        for (var i6 = 0; i6 != d2.length; ++i6) {
          if (d2.charCodeAt(i6) !== 65533)
            e7[d2.charAt(i6)] = i6;
          D5[i6] = d2.charAt(i6);
        }
        return { "enc": e7, "dec": D5 };
      }();
      cptable2[1255] = function() {
        var d2 = "\0\x07\b	\n\v\f\r\x1B !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~\x7F\u20AC\uFFFD\u201A\u0192\u201E\u2026\u2020\u2021\u02C6\u2030\uFFFD\u2039\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u2018\u2019\u201C\u201D\u2022\u2013\u2014\u02DC\u2122\uFFFD\u203A\uFFFD\uFFFD\uFFFD\uFFFD\xA0\xA1\xA2\xA3\u20AA\xA5\xA6\xA7\xA8\xA9\xD7\xAB\xAC\xAD\xAE\xAF\xB0\xB1\xB2\xB3\xB4\xB5\xB6\xB7\xB8\xB9\xF7\xBB\xBC\xBD\xBE\xBF\u05B0\u05B1\u05B2\u05B3\u05B4\u05B5\u05B6\u05B7\u05B8\u05B9\uFFFD\u05BB\u05BC\u05BD\u05BE\u05BF\u05C0\u05C1\u05C2\u05C3\u05F0\u05F1\u05F2\u05F3\u05F4\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u05D0\u05D1\u05D2\u05D3\u05D4\u05D5\u05D6\u05D7\u05D8\u05D9\u05DA\u05DB\u05DC\u05DD\u05DE\u05DF\u05E0\u05E1\u05E2\u05E3\u05E4\u05E5\u05E6\u05E7\u05E8\u05E9\u05EA\uFFFD\uFFFD\u200E\u200F\uFFFD", D5 = [], e7 = {};
        for (var i6 = 0; i6 != d2.length; ++i6) {
          if (d2.charCodeAt(i6) !== 65533)
            e7[d2.charAt(i6)] = i6;
          D5[i6] = d2.charAt(i6);
        }
        return { "enc": e7, "dec": D5 };
      }();
      cptable2[1256] = function() {
        var d2 = "\0\x07\b	\n\v\f\r\x1B !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~\x7F\u20AC\u067E\u201A\u0192\u201E\u2026\u2020\u2021\u02C6\u2030\u0679\u2039\u0152\u0686\u0698\u0688\u06AF\u2018\u2019\u201C\u201D\u2022\u2013\u2014\u06A9\u2122\u0691\u203A\u0153\u200C\u200D\u06BA\xA0\u060C\xA2\xA3\xA4\xA5\xA6\xA7\xA8\xA9\u06BE\xAB\xAC\xAD\xAE\xAF\xB0\xB1\xB2\xB3\xB4\xB5\xB6\xB7\xB8\xB9\u061B\xBB\xBC\xBD\xBE\u061F\u06C1\u0621\u0622\u0623\u0624\u0625\u0626\u0627\u0628\u0629\u062A\u062B\u062C\u062D\u062E\u062F\u0630\u0631\u0632\u0633\u0634\u0635\u0636\xD7\u0637\u0638\u0639\u063A\u0640\u0641\u0642\u0643\xE0\u0644\xE2\u0645\u0646\u0647\u0648\xE7\xE8\xE9\xEA\xEB\u0649\u064A\xEE\xEF\u064B\u064C\u064D\u064E\xF4\u064F\u0650\xF7\u0651\xF9\u0652\xFB\xFC\u200E\u200F\u06D2", D5 = [], e7 = {};
        for (var i6 = 0; i6 != d2.length; ++i6) {
          if (d2.charCodeAt(i6) !== 65533)
            e7[d2.charAt(i6)] = i6;
          D5[i6] = d2.charAt(i6);
        }
        return { "enc": e7, "dec": D5 };
      }();
      cptable2[1257] = function() {
        var d2 = "\0\x07\b	\n\v\f\r\x1B !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~\x7F\u20AC\uFFFD\u201A\uFFFD\u201E\u2026\u2020\u2021\uFFFD\u2030\uFFFD\u2039\uFFFD\xA8\u02C7\xB8\uFFFD\u2018\u2019\u201C\u201D\u2022\u2013\u2014\uFFFD\u2122\uFFFD\u203A\uFFFD\xAF\u02DB\uFFFD\xA0\uFFFD\xA2\xA3\xA4\uFFFD\xA6\xA7\xD8\xA9\u0156\xAB\xAC\xAD\xAE\xC6\xB0\xB1\xB2\xB3\xB4\xB5\xB6\xB7\xF8\xB9\u0157\xBB\xBC\xBD\xBE\xE6\u0104\u012E\u0100\u0106\xC4\xC5\u0118\u0112\u010C\xC9\u0179\u0116\u0122\u0136\u012A\u013B\u0160\u0143\u0145\xD3\u014C\xD5\xD6\xD7\u0172\u0141\u015A\u016A\xDC\u017B\u017D\xDF\u0105\u012F\u0101\u0107\xE4\xE5\u0119\u0113\u010D\xE9\u017A\u0117\u0123\u0137\u012B\u013C\u0161\u0144\u0146\xF3\u014D\xF5\xF6\xF7\u0173\u0142\u015B\u016B\xFC\u017C\u017E\u02D9", D5 = [], e7 = {};
        for (var i6 = 0; i6 != d2.length; ++i6) {
          if (d2.charCodeAt(i6) !== 65533)
            e7[d2.charAt(i6)] = i6;
          D5[i6] = d2.charAt(i6);
        }
        return { "enc": e7, "dec": D5 };
      }();
      cptable2[1258] = function() {
        var d2 = "\0\x07\b	\n\v\f\r\x1B !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~\x7F\u20AC\uFFFD\u201A\u0192\u201E\u2026\u2020\u2021\u02C6\u2030\uFFFD\u2039\u0152\uFFFD\uFFFD\uFFFD\uFFFD\u2018\u2019\u201C\u201D\u2022\u2013\u2014\u02DC\u2122\uFFFD\u203A\u0153\uFFFD\uFFFD\u0178\xA0\xA1\xA2\xA3\xA4\xA5\xA6\xA7\xA8\xA9\xAA\xAB\xAC\xAD\xAE\xAF\xB0\xB1\xB2\xB3\xB4\xB5\xB6\xB7\xB8\xB9\xBA\xBB\xBC\xBD\xBE\xBF\xC0\xC1\xC2\u0102\xC4\xC5\xC6\xC7\xC8\xC9\xCA\xCB\u0300\xCD\xCE\xCF\u0110\xD1\u0309\xD3\xD4\u01A0\xD6\xD7\xD8\xD9\xDA\xDB\xDC\u01AF\u0303\xDF\xE0\xE1\xE2\u0103\xE4\xE5\xE6\xE7\xE8\xE9\xEA\xEB\u0301\xED\xEE\xEF\u0111\xF1\u0323\xF3\xF4\u01A1\xF6\xF7\xF8\xF9\xFA\xFB\xFC\u01B0\u20AB\xFF", D5 = [], e7 = {};
        for (var i6 = 0; i6 != d2.length; ++i6) {
          if (d2.charCodeAt(i6) !== 65533)
            e7[d2.charAt(i6)] = i6;
          D5[i6] = d2.charAt(i6);
        }
        return { "enc": e7, "dec": D5 };
      }();
      cptable2[1e4] = function() {
        var d2 = "\0\x07\b	\n\v\f\r\x1B !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~\x7F\xC4\xC5\xC7\xC9\xD1\xD6\xDC\xE1\xE0\xE2\xE4\xE3\xE5\xE7\xE9\xE8\xEA\xEB\xED\xEC\xEE\xEF\xF1\xF3\xF2\xF4\xF6\xF5\xFA\xF9\xFB\xFC\u2020\xB0\xA2\xA3\xA7\u2022\xB6\xDF\xAE\xA9\u2122\xB4\xA8\u2260\xC6\xD8\u221E\xB1\u2264\u2265\xA5\xB5\u2202\u2211\u220F\u03C0\u222B\xAA\xBA\u2126\xE6\xF8\xBF\xA1\xAC\u221A\u0192\u2248\u2206\xAB\xBB\u2026\xA0\xC0\xC3\xD5\u0152\u0153\u2013\u2014\u201C\u201D\u2018\u2019\xF7\u25CA\xFF\u0178\u2044\xA4\u2039\u203A\uFB01\uFB02\u2021\xB7\u201A\u201E\u2030\xC2\xCA\xC1\xCB\xC8\xCD\xCE\xCF\xCC\xD3\xD4\uFFFD\xD2\xDA\xDB\xD9\u0131\u02C6\u02DC\xAF\u02D8\u02D9\u02DA\xB8\u02DD\u02DB\u02C7", D5 = [], e7 = {};
        for (var i6 = 0; i6 != d2.length; ++i6) {
          if (d2.charCodeAt(i6) !== 65533)
            e7[d2.charAt(i6)] = i6;
          D5[i6] = d2.charAt(i6);
        }
        return { "enc": e7, "dec": D5 };
      }();
      cptable2[10006] = function() {
        var d2 = "\0\x07\b	\n\v\f\r\x1B !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~\x7F\xC4\xB9\xB2\xC9\xB3\xD6\xDC\u0385\xE0\xE2\xE4\u0384\xA8\xE7\xE9\xE8\xEA\xEB\xA3\u2122\xEE\xEF\u2022\xBD\u2030\xF4\xF6\xA6\xAD\xF9\xFB\xFC\u2020\u0393\u0394\u0398\u039B\u039E\u03A0\xDF\xAE\xA9\u03A3\u03AA\xA7\u2260\xB0\u0387\u0391\xB1\u2264\u2265\xA5\u0392\u0395\u0396\u0397\u0399\u039A\u039C\u03A6\u03AB\u03A8\u03A9\u03AC\u039D\xAC\u039F\u03A1\u2248\u03A4\xAB\xBB\u2026\xA0\u03A5\u03A7\u0386\u0388\u0153\u2013\u2015\u201C\u201D\u2018\u2019\xF7\u0389\u038A\u038C\u038E\u03AD\u03AE\u03AF\u03CC\u038F\u03CD\u03B1\u03B2\u03C8\u03B4\u03B5\u03C6\u03B3\u03B7\u03B9\u03BE\u03BA\u03BB\u03BC\u03BD\u03BF\u03C0\u03CE\u03C1\u03C3\u03C4\u03B8\u03C9\u03C2\u03C7\u03C5\u03B6\u03CA\u03CB\u0390\u03B0\uFFFD", D5 = [], e7 = {};
        for (var i6 = 0; i6 != d2.length; ++i6) {
          if (d2.charCodeAt(i6) !== 65533)
            e7[d2.charAt(i6)] = i6;
          D5[i6] = d2.charAt(i6);
        }
        return { "enc": e7, "dec": D5 };
      }();
      cptable2[10007] = function() {
        var d2 = "\0\x07\b	\n\v\f\r\x1B !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~\x7F\u0410\u0411\u0412\u0413\u0414\u0415\u0416\u0417\u0418\u0419\u041A\u041B\u041C\u041D\u041E\u041F\u0420\u0421\u0422\u0423\u0424\u0425\u0426\u0427\u0428\u0429\u042A\u042B\u042C\u042D\u042E\u042F\u2020\xB0\xA2\xA3\xA7\u2022\xB6\u0406\xAE\xA9\u2122\u0402\u0452\u2260\u0403\u0453\u221E\xB1\u2264\u2265\u0456\xB5\u2202\u0408\u0404\u0454\u0407\u0457\u0409\u0459\u040A\u045A\u0458\u0405\xAC\u221A\u0192\u2248\u2206\xAB\xBB\u2026\xA0\u040B\u045B\u040C\u045C\u0455\u2013\u2014\u201C\u201D\u2018\u2019\xF7\u201E\u040E\u045E\u040F\u045F\u2116\u0401\u0451\u044F\u0430\u0431\u0432\u0433\u0434\u0435\u0436\u0437\u0438\u0439\u043A\u043B\u043C\u043D\u043E\u043F\u0440\u0441\u0442\u0443\u0444\u0445\u0446\u0447\u0448\u0449\u044A\u044B\u044C\u044D\u044E\xA4", D5 = [], e7 = {};
        for (var i6 = 0; i6 != d2.length; ++i6) {
          if (d2.charCodeAt(i6) !== 65533)
            e7[d2.charAt(i6)] = i6;
          D5[i6] = d2.charAt(i6);
        }
        return { "enc": e7, "dec": D5 };
      }();
      cptable2[10008] = function() {
        var d2 = [], e7 = {}, D5 = [], j3;
        D5[0] = "\0\x07\b	\n\v\f\r\x1B !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~\x7F\x80\uF8D8\uF8D9\uF8DA\uF8DB\uF8DC\uF8DD\uF8DE\uF8DF\uF8E0\uF8E1\uF8E2\uF8E3\uF8E4\uF8E5\uF8E6\uF8E7\uF8E8\uF8E9\uF8EA\uF8EB\uF8EC\uF8ED\uF8EE\uF8EF\uF8F0\uF8F1\uF8F2\uF8F3\uF8F4\uF8F5\uF8F6\uF8F7\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uF8F8\uF8F9\uF8FA\uF8FB\uF8FC\uF8FD\uF8FE\uF8FF".split("");
        for (j3 = 0; j3 != D5[0].length; ++j3)
          if (D5[0][j3].charCodeAt(0) !== 65533) {
            e7[D5[0][j3]] = 0 + j3;
            d2[0 + j3] = D5[0][j3];
          }
        D5[161] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u3000\u3001\u3002\u30FB\u02C9\u02C7\xA8\u3003\u3005\u2015\uFF5E\uFFFD\u2026\u2018\u2019\u201C\u201D\u3014\u3015\u3008\u3009\u300A\u300B\u300C\u300D\u300E\u300F\u3016\u3017\u3010\u3011\xB1\xD7\xF7\u2236\u2227\u2228\u2211\u220F\u222A\u2229\u2208\u2237\u221A\u22A5\u2225\u2220\u2312\u2299\u222B\u222E\u2261\u224C\u2248\u223D\u221D\u2260\u226E\u226F\u2264\u2265\u221E\u2235\u2234\u2642\u2640\xB0\u2032\u2033\u2103\uFF04\xA4\uFFE0\uFFE1\u2030\xA7\u2116\u2606\u2605\u25CB\u25CF\u25CE\u25C7\u25C6\u25A1\u25A0\u25B3\u25B2\u203B\u2192\u2190\u2191\u2193\u3013\uFFFD".split("");
        for (j3 = 0; j3 != D5[161].length; ++j3)
          if (D5[161][j3].charCodeAt(0) !== 65533) {
            e7[D5[161][j3]] = 41216 + j3;
            d2[41216 + j3] = D5[161][j3];
          }
        D5[162] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u2488\u2489\u248A\u248B\u248C\u248D\u248E\u248F\u2490\u2491\u2492\u2493\u2494\u2495\u2496\u2497\u2498\u2499\u249A\u249B\u2474\u2475\u2476\u2477\u2478\u2479\u247A\u247B\u247C\u247D\u247E\u247F\u2480\u2481\u2482\u2483\u2484\u2485\u2486\u2487\u2460\u2461\u2462\u2463\u2464\u2465\u2466\u2467\u2468\u2469\uFFFD\uFFFD\u3220\u3221\u3222\u3223\u3224\u3225\u3226\u3227\u3228\u3229\uFFFD\uFFFD\u2160\u2161\u2162\u2163\u2164\u2165\u2166\u2167\u2168\u2169\u216A\u216B\uFFFD\uFFFD\uFFFD".split("");
        for (j3 = 0; j3 != D5[162].length; ++j3)
          if (D5[162][j3].charCodeAt(0) !== 65533) {
            e7[D5[162][j3]] = 41472 + j3;
            d2[41472 + j3] = D5[162][j3];
          }
        D5[163] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFF01\uFF02\uFF03\uFFE5\uFF05\uFF06\uFF07\uFF08\uFF09\uFF0A\uFF0B\uFF0C\uFF0D\uFF0E\uFF0F\uFF10\uFF11\uFF12\uFF13\uFF14\uFF15\uFF16\uFF17\uFF18\uFF19\uFF1A\uFF1B\uFF1C\uFF1D\uFF1E\uFF1F\uFF20\uFF21\uFF22\uFF23\uFF24\uFF25\uFF26\uFF27\uFF28\uFF29\uFF2A\uFF2B\uFF2C\uFF2D\uFF2E\uFF2F\uFF30\uFF31\uFF32\uFF33\uFF34\uFF35\uFF36\uFF37\uFF38\uFF39\uFF3A\uFF3B\uFF3C\uFF3D\uFF3E\uFF3F\uFF40\uFF41\uFF42\uFF43\uFF44\uFF45\uFF46\uFF47\uFF48\uFF49\uFF4A\uFF4B\uFF4C\uFF4D\uFF4E\uFF4F\uFF50\uFF51\uFF52\uFF53\uFF54\uFF55\uFF56\uFF57\uFF58\uFF59\uFF5A\uFF5B\uFF5C\uFF5D\uFFE3\uFFFD".split("");
        for (j3 = 0; j3 != D5[163].length; ++j3)
          if (D5[163][j3].charCodeAt(0) !== 65533) {
            e7[D5[163][j3]] = 41728 + j3;
            d2[41728 + j3] = D5[163][j3];
          }
        D5[164] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u3041\u3042\u3043\u3044\u3045\u3046\u3047\u3048\u3049\u304A\u304B\u304C\u304D\u304E\u304F\u3050\u3051\u3052\u3053\u3054\u3055\u3056\u3057\u3058\u3059\u305A\u305B\u305C\u305D\u305E\u305F\u3060\u3061\u3062\u3063\u3064\u3065\u3066\u3067\u3068\u3069\u306A\u306B\u306C\u306D\u306E\u306F\u3070\u3071\u3072\u3073\u3074\u3075\u3076\u3077\u3078\u3079\u307A\u307B\u307C\u307D\u307E\u307F\u3080\u3081\u3082\u3083\u3084\u3085\u3086\u3087\u3088\u3089\u308A\u308B\u308C\u308D\u308E\u308F\u3090\u3091\u3092\u3093\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD".split("");
        for (j3 = 0; j3 != D5[164].length; ++j3)
          if (D5[164][j3].charCodeAt(0) !== 65533) {
            e7[D5[164][j3]] = 41984 + j3;
            d2[41984 + j3] = D5[164][j3];
          }
        D5[165] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u30A1\u30A2\u30A3\u30A4\u30A5\u30A6\u30A7\u30A8\u30A9\u30AA\u30AB\u30AC\u30AD\u30AE\u30AF\u30B0\u30B1\u30B2\u30B3\u30B4\u30B5\u30B6\u30B7\u30B8\u30B9\u30BA\u30BB\u30BC\u30BD\u30BE\u30BF\u30C0\u30C1\u30C2\u30C3\u30C4\u30C5\u30C6\u30C7\u30C8\u30C9\u30CA\u30CB\u30CC\u30CD\u30CE\u30CF\u30D0\u30D1\u30D2\u30D3\u30D4\u30D5\u30D6\u30D7\u30D8\u30D9\u30DA\u30DB\u30DC\u30DD\u30DE\u30DF\u30E0\u30E1\u30E2\u30E3\u30E4\u30E5\u30E6\u30E7\u30E8\u30E9\u30EA\u30EB\u30EC\u30ED\u30EE\u30EF\u30F0\u30F1\u30F2\u30F3\u30F4\u30F5\u30F6\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD".split("");
        for (j3 = 0; j3 != D5[165].length; ++j3)
          if (D5[165][j3].charCodeAt(0) !== 65533) {
            e7[D5[165][j3]] = 42240 + j3;
            d2[42240 + j3] = D5[165][j3];
          }
        D5[166] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u0391\u0392\u0393\u0394\u0395\u0396\u0397\u0398\u0399\u039A\u039B\u039C\u039D\u039E\u039F\u03A0\u03A1\u03A3\u03A4\u03A5\u03A6\u03A7\u03A8\u03A9\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u03B1\u03B2\u03B3\u03B4\u03B5\u03B6\u03B7\u03B8\u03B9\u03BA\u03BB\u03BC\u03BD\u03BE\u03BF\u03C0\u03C1\u03C3\u03C4\u03C5\u03C6\u03C7\u03C8\u03C9\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD".split("");
        for (j3 = 0; j3 != D5[166].length; ++j3)
          if (D5[166][j3].charCodeAt(0) !== 65533) {
            e7[D5[166][j3]] = 42496 + j3;
            d2[42496 + j3] = D5[166][j3];
          }
        D5[167] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u0410\u0411\u0412\u0413\u0414\u0415\u0401\u0416\u0417\u0418\u0419\u041A\u041B\u041C\u041D\u041E\u041F\u0420\u0421\u0422\u0423\u0424\u0425\u0426\u0427\u0428\u0429\u042A\u042B\u042C\u042D\u042E\u042F\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u0430\u0431\u0432\u0433\u0434\u0435\u0451\u0436\u0437\u0438\u0439\u043A\u043B\u043C\u043D\u043E\u043F\u0440\u0441\u0442\u0443\u0444\u0445\u0446\u0447\u0448\u0449\u044A\u044B\u044C\u044D\u044E\u044F\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD".split("");
        for (j3 = 0; j3 != D5[167].length; ++j3)
          if (D5[167][j3].charCodeAt(0) !== 65533) {
            e7[D5[167][j3]] = 42752 + j3;
            d2[42752 + j3] = D5[167][j3];
          }
        D5[168] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u0101\xE1\u01CE\xE0\u0113\xE9\u011B\xE8\u012B\xED\u01D0\xEC\u014D\xF3\u01D2\xF2\u016B\xFA\u01D4\xF9\u01D6\u01D8\u01DA\u01DC\xFC\xEA\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u3105\u3106\u3107\u3108\u3109\u310A\u310B\u310C\u310D\u310E\u310F\u3110\u3111\u3112\u3113\u3114\u3115\u3116\u3117\u3118\u3119\u311A\u311B\u311C\u311D\u311E\u311F\u3120\u3121\u3122\u3123\u3124\u3125\u3126\u3127\u3128\u3129\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD".split("");
        for (j3 = 0; j3 != D5[168].length; ++j3)
          if (D5[168][j3].charCodeAt(0) !== 65533) {
            e7[D5[168][j3]] = 43008 + j3;
            d2[43008 + j3] = D5[168][j3];
          }
        D5[169] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u2500\u2501\u2502\u2503\u2504\u2505\u2506\u2507\u2508\u2509\u250A\u250B\u250C\u250D\u250E\u250F\u2510\u2511\u2512\u2513\u2514\u2515\u2516\u2517\u2518\u2519\u251A\u251B\u251C\u251D\u251E\u251F\u2520\u2521\u2522\u2523\u2524\u2525\u2526\u2527\u2528\u2529\u252A\u252B\u252C\u252D\u252E\u252F\u2530\u2531\u2532\u2533\u2534\u2535\u2536\u2537\u2538\u2539\u253A\u253B\u253C\u253D\u253E\u253F\u2540\u2541\u2542\u2543\u2544\u2545\u2546\u2547\u2548\u2549\u254A\u254B\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD".split("");
        for (j3 = 0; j3 != D5[169].length; ++j3)
          if (D5[169][j3].charCodeAt(0) !== 65533) {
            e7[D5[169][j3]] = 43264 + j3;
            d2[43264 + j3] = D5[169][j3];
          }
        D5[176] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u554A\u963F\u57C3\u6328\u54CE\u5509\u54C0\u7691\u764C\u853C\u77EE\u827E\u788D\u7231\u9698\u978D\u6C28\u5B89\u4FFA\u6309\u6697\u5CB8\u80FA\u6848\u80AE\u6602\u76CE\u51F9\u6556\u71AC\u7FF1\u8884\u50B2\u5965\u61CA\u6FB3\u82AD\u634C\u6252\u53ED\u5427\u7B06\u516B\u75A4\u5DF4\u62D4\u8DCB\u9776\u628A\u8019\u575D\u9738\u7F62\u7238\u767D\u67CF\u767E\u6446\u4F70\u8D25\u62DC\u7A17\u6591\u73ED\u642C\u6273\u822C\u9881\u677F\u7248\u626E\u62CC\u4F34\u74E3\u534A\u529E\u7ECA\u90A6\u5E2E\u6886\u699C\u8180\u7ED1\u68D2\u78C5\u868C\u9551\u508D\u8C24\u82DE\u80DE\u5305\u8912\u5265\uFFFD".split("");
        for (j3 = 0; j3 != D5[176].length; ++j3)
          if (D5[176][j3].charCodeAt(0) !== 65533) {
            e7[D5[176][j3]] = 45056 + j3;
            d2[45056 + j3] = D5[176][j3];
          }
        D5[177] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u8584\u96F9\u4FDD\u5821\u9971\u5B9D\u62B1\u62A5\u66B4\u8C79\u9C8D\u7206\u676F\u7891\u60B2\u5351\u5317\u8F88\u80CC\u8D1D\u94A1\u500D\u72C8\u5907\u60EB\u7119\u88AB\u5954\u82EF\u672C\u7B28\u5D29\u7EF7\u752D\u6CF5\u8E66\u8FF8\u903C\u9F3B\u6BD4\u9119\u7B14\u5F7C\u78A7\u84D6\u853D\u6BD5\u6BD9\u6BD6\u5E01\u5E87\u75F9\u95ED\u655D\u5F0A\u5FC5\u8F9F\u58C1\u81C2\u907F\u965B\u97AD\u8FB9\u7F16\u8D2C\u6241\u4FBF\u53D8\u535E\u8FA8\u8FA9\u8FAB\u904D\u6807\u5F6A\u8198\u8868\u9CD6\u618B\u522B\u762A\u5F6C\u658C\u6FD2\u6EE8\u5BBE\u6448\u5175\u51B0\u67C4\u4E19\u79C9\u997C\u70B3\uFFFD".split("");
        for (j3 = 0; j3 != D5[177].length; ++j3)
          if (D5[177][j3].charCodeAt(0) !== 65533) {
            e7[D5[177][j3]] = 45312 + j3;
            d2[45312 + j3] = D5[177][j3];
          }
        D5[178] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u75C5\u5E76\u73BB\u83E0\u64AD\u62E8\u94B5\u6CE2\u535A\u52C3\u640F\u94C2\u7B94\u4F2F\u5E1B\u8236\u8116\u818A\u6E24\u6CCA\u9A73\u6355\u535C\u54FA\u8865\u57E0\u4E0D\u5E03\u6B65\u7C3F\u90E8\u6016\u64E6\u731C\u88C1\u6750\u624D\u8D22\u776C\u8E29\u91C7\u5F69\u83DC\u8521\u9910\u53C2\u8695\u6B8B\u60ED\u60E8\u707F\u82CD\u8231\u4ED3\u6CA7\u85CF\u64CD\u7CD9\u69FD\u66F9\u8349\u5395\u7B56\u4FA7\u518C\u6D4B\u5C42\u8E6D\u63D2\u53C9\u832C\u8336\u67E5\u78B4\u643D\u5BDF\u5C94\u5DEE\u8BE7\u62C6\u67F4\u8C7A\u6400\u63BA\u8749\u998B\u8C17\u7F20\u94F2\u4EA7\u9610\u98A4\u660C\u7316\uFFFD".split("");
        for (j3 = 0; j3 != D5[178].length; ++j3)
          if (D5[178][j3].charCodeAt(0) !== 65533) {
            e7[D5[178][j3]] = 45568 + j3;
            d2[45568 + j3] = D5[178][j3];
          }
        D5[179] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u573A\u5C1D\u5E38\u957F\u507F\u80A0\u5382\u655E\u7545\u5531\u5021\u8D85\u6284\u949E\u671D\u5632\u6F6E\u5DE2\u5435\u7092\u8F66\u626F\u64A4\u63A3\u5F7B\u6F88\u90F4\u81E3\u8FB0\u5C18\u6668\u5FF1\u6C89\u9648\u8D81\u886C\u6491\u79F0\u57CE\u6A59\u6210\u5448\u4E58\u7A0B\u60E9\u6F84\u8BDA\u627F\u901E\u9A8B\u79E4\u5403\u75F4\u6301\u5319\u6C60\u8FDF\u5F1B\u9A70\u803B\u9F7F\u4F88\u5C3A\u8D64\u7FC5\u65A5\u70BD\u5145\u51B2\u866B\u5D07\u5BA0\u62BD\u916C\u7574\u8E0C\u7A20\u6101\u7B79\u4EC7\u7EF8\u7785\u4E11\u81ED\u521D\u51FA\u6A71\u53A8\u8E87\u9504\u96CF\u6EC1\u9664\u695A\uFFFD".split("");
        for (j3 = 0; j3 != D5[179].length; ++j3)
          if (D5[179][j3].charCodeAt(0) !== 65533) {
            e7[D5[179][j3]] = 45824 + j3;
            d2[45824 + j3] = D5[179][j3];
          }
        D5[180] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u7840\u50A8\u77D7\u6410\u89E6\u5904\u63E3\u5DDD\u7A7F\u693D\u4F20\u8239\u5598\u4E32\u75AE\u7A97\u5E62\u5E8A\u95EF\u521B\u5439\u708A\u6376\u9524\u5782\u6625\u693F\u9187\u5507\u6DF3\u7EAF\u8822\u6233\u7EF0\u75B5\u8328\u78C1\u96CC\u8F9E\u6148\u74F7\u8BCD\u6B64\u523A\u8D50\u6B21\u806A\u8471\u56F1\u5306\u4ECE\u4E1B\u51D1\u7C97\u918B\u7C07\u4FC3\u8E7F\u7BE1\u7A9C\u6467\u5D14\u50AC\u8106\u7601\u7CB9\u6DEC\u7FE0\u6751\u5B58\u5BF8\u78CB\u64AE\u6413\u63AA\u632B\u9519\u642D\u8FBE\u7B54\u7629\u6253\u5927\u5446\u6B79\u50A3\u6234\u5E26\u6B86\u4EE3\u8D37\u888B\u5F85\u902E\uFFFD".split("");
        for (j3 = 0; j3 != D5[180].length; ++j3)
          if (D5[180][j3].charCodeAt(0) !== 65533) {
            e7[D5[180][j3]] = 46080 + j3;
            d2[46080 + j3] = D5[180][j3];
          }
        D5[181] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u6020\u803D\u62C5\u4E39\u5355\u90F8\u63B8\u80C6\u65E6\u6C2E\u4F46\u60EE\u6DE1\u8BDE\u5F39\u86CB\u5F53\u6321\u515A\u8361\u6863\u5200\u6363\u8E48\u5012\u5C9B\u7977\u5BFC\u5230\u7A3B\u60BC\u9053\u76D7\u5FB7\u5F97\u7684\u8E6C\u706F\u767B\u7B49\u77AA\u51F3\u9093\u5824\u4F4E\u6EF4\u8FEA\u654C\u7B1B\u72C4\u6DA4\u7FDF\u5AE1\u62B5\u5E95\u5730\u8482\u7B2C\u5E1D\u5F1F\u9012\u7F14\u98A0\u6382\u6EC7\u7898\u70B9\u5178\u975B\u57AB\u7535\u4F43\u7538\u5E97\u60E6\u5960\u6DC0\u6BBF\u7889\u53FC\u96D5\u51CB\u5201\u6389\u540A\u9493\u8C03\u8DCC\u7239\u789F\u8776\u8FED\u8C0D\u53E0\uFFFD".split("");
        for (j3 = 0; j3 != D5[181].length; ++j3)
          if (D5[181][j3].charCodeAt(0) !== 65533) {
            e7[D5[181][j3]] = 46336 + j3;
            d2[46336 + j3] = D5[181][j3];
          }
        D5[182] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u4E01\u76EF\u53EE\u9489\u9876\u9F0E\u952D\u5B9A\u8BA2\u4E22\u4E1C\u51AC\u8463\u61C2\u52A8\u680B\u4F97\u606B\u51BB\u6D1E\u515C\u6296\u6597\u9661\u8C46\u9017\u75D8\u90FD\u7763\u6BD2\u728A\u72EC\u8BFB\u5835\u7779\u8D4C\u675C\u9540\u809A\u5EA6\u6E21\u5992\u7AEF\u77ED\u953B\u6BB5\u65AD\u7F0E\u5806\u5151\u961F\u5BF9\u58A9\u5428\u8E72\u6566\u987F\u56E4\u949D\u76FE\u9041\u6387\u54C6\u591A\u593A\u579B\u8EB2\u6735\u8DFA\u8235\u5241\u60F0\u5815\u86FE\u5CE8\u9E45\u4FC4\u989D\u8BB9\u5A25\u6076\u5384\u627C\u904F\u9102\u997F\u6069\u800C\u513F\u8033\u5C14\u9975\u6D31\u4E8C\uFFFD".split("");
        for (j3 = 0; j3 != D5[182].length; ++j3)
          if (D5[182][j3].charCodeAt(0) !== 65533) {
            e7[D5[182][j3]] = 46592 + j3;
            d2[46592 + j3] = D5[182][j3];
          }
        D5[183] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u8D30\u53D1\u7F5A\u7B4F\u4F10\u4E4F\u9600\u6CD5\u73D0\u85E9\u5E06\u756A\u7FFB\u6A0A\u77FE\u9492\u7E41\u51E1\u70E6\u53CD\u8FD4\u8303\u8D29\u72AF\u996D\u6CDB\u574A\u82B3\u65B9\u80AA\u623F\u9632\u59A8\u4EFF\u8BBF\u7EBA\u653E\u83F2\u975E\u5561\u98DE\u80A5\u532A\u8BFD\u5420\u80BA\u5E9F\u6CB8\u8D39\u82AC\u915A\u5429\u6C1B\u5206\u7EB7\u575F\u711A\u6C7E\u7C89\u594B\u4EFD\u5FFF\u6124\u7CAA\u4E30\u5C01\u67AB\u8702\u5CF0\u950B\u98CE\u75AF\u70FD\u9022\u51AF\u7F1D\u8BBD\u5949\u51E4\u4F5B\u5426\u592B\u6577\u80A4\u5B75\u6276\u62C2\u8F90\u5E45\u6C1F\u7B26\u4F0F\u4FD8\u670D\uFFFD".split("");
        for (j3 = 0; j3 != D5[183].length; ++j3)
          if (D5[183][j3].charCodeAt(0) !== 65533) {
            e7[D5[183][j3]] = 46848 + j3;
            d2[46848 + j3] = D5[183][j3];
          }
        D5[184] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u6D6E\u6DAA\u798F\u88B1\u5F17\u752B\u629A\u8F85\u4FEF\u91DC\u65A7\u812F\u8151\u5E9C\u8150\u8D74\u526F\u8986\u8D4B\u590D\u5085\u4ED8\u961C\u7236\u8179\u8D1F\u5BCC\u8BA3\u9644\u5987\u7F1A\u5490\u5676\u560E\u8BE5\u6539\u6982\u9499\u76D6\u6E89\u5E72\u7518\u6746\u67D1\u7AFF\u809D\u8D76\u611F\u79C6\u6562\u8D63\u5188\u521A\u94A2\u7F38\u809B\u7EB2\u5C97\u6E2F\u6760\u7BD9\u768B\u9AD8\u818F\u7F94\u7CD5\u641E\u9550\u7A3F\u544A\u54E5\u6B4C\u6401\u6208\u9E3D\u80F3\u7599\u5272\u9769\u845B\u683C\u86E4\u9601\u9694\u94EC\u4E2A\u5404\u7ED9\u6839\u8DDF\u8015\u66F4\u5E9A\u7FB9\uFFFD".split("");
        for (j3 = 0; j3 != D5[184].length; ++j3)
          if (D5[184][j3].charCodeAt(0) !== 65533) {
            e7[D5[184][j3]] = 47104 + j3;
            d2[47104 + j3] = D5[184][j3];
          }
        D5[185] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u57C2\u803F\u6897\u5DE5\u653B\u529F\u606D\u9F9A\u4F9B\u8EAC\u516C\u5BAB\u5F13\u5DE9\u6C5E\u62F1\u8D21\u5171\u94A9\u52FE\u6C9F\u82DF\u72D7\u57A2\u6784\u8D2D\u591F\u8F9C\u83C7\u5495\u7B8D\u4F30\u6CBD\u5B64\u59D1\u9F13\u53E4\u86CA\u9AA8\u8C37\u80A1\u6545\u987E\u56FA\u96C7\u522E\u74DC\u5250\u5BE1\u6302\u8902\u4E56\u62D0\u602A\u68FA\u5173\u5B98\u51A0\u89C2\u7BA1\u9986\u7F50\u60EF\u704C\u8D2F\u5149\u5E7F\u901B\u7470\u89C4\u572D\u7845\u5F52\u9F9F\u95FA\u8F68\u9B3C\u8BE1\u7678\u6842\u67DC\u8DEA\u8D35\u523D\u8F8A\u6EDA\u68CD\u9505\u90ED\u56FD\u679C\u88F9\u8FC7\u54C8\uFFFD".split("");
        for (j3 = 0; j3 != D5[185].length; ++j3)
          if (D5[185][j3].charCodeAt(0) !== 65533) {
            e7[D5[185][j3]] = 47360 + j3;
            d2[47360 + j3] = D5[185][j3];
          }
        D5[186] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u9AB8\u5B69\u6D77\u6C26\u4EA5\u5BB3\u9A87\u9163\u61A8\u90AF\u97E9\u542B\u6DB5\u5BD2\u51FD\u558A\u7F55\u7FF0\u64BC\u634D\u65F1\u61BE\u608D\u710A\u6C57\u6C49\u592F\u676D\u822A\u58D5\u568E\u8C6A\u6BEB\u90DD\u597D\u8017\u53F7\u6D69\u5475\u559D\u8377\u83CF\u6838\u79BE\u548C\u4F55\u5408\u76D2\u8C89\u9602\u6CB3\u6DB8\u8D6B\u8910\u9E64\u8D3A\u563F\u9ED1\u75D5\u5F88\u72E0\u6068\u54FC\u4EA8\u6A2A\u8861\u6052\u8F70\u54C4\u70D8\u8679\u9E3F\u6D2A\u5B8F\u5F18\u7EA2\u5589\u4FAF\u7334\u543C\u539A\u5019\u540E\u547C\u4E4E\u5FFD\u745A\u58F6\u846B\u80E1\u8774\u72D0\u7CCA\u6E56\uFFFD".split("");
        for (j3 = 0; j3 != D5[186].length; ++j3)
          if (D5[186][j3].charCodeAt(0) !== 65533) {
            e7[D5[186][j3]] = 47616 + j3;
            d2[47616 + j3] = D5[186][j3];
          }
        D5[187] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u5F27\u864E\u552C\u62A4\u4E92\u6CAA\u6237\u82B1\u54D7\u534E\u733E\u6ED1\u753B\u5212\u5316\u8BDD\u69D0\u5F8A\u6000\u6DEE\u574F\u6B22\u73AF\u6853\u8FD8\u7F13\u6362\u60A3\u5524\u75EA\u8C62\u7115\u6DA3\u5BA6\u5E7B\u8352\u614C\u9EC4\u78FA\u8757\u7C27\u7687\u51F0\u60F6\u714C\u6643\u5E4C\u604D\u8C0E\u7070\u6325\u8F89\u5FBD\u6062\u86D4\u56DE\u6BC1\u6094\u6167\u5349\u60E0\u6666\u8D3F\u79FD\u4F1A\u70E9\u6C47\u8BB3\u8BF2\u7ED8\u8364\u660F\u5A5A\u9B42\u6D51\u6DF7\u8C41\u6D3B\u4F19\u706B\u83B7\u6216\u60D1\u970D\u8D27\u7978\u51FB\u573E\u57FA\u673A\u7578\u7A3D\u79EF\u7B95\uFFFD".split("");
        for (j3 = 0; j3 != D5[187].length; ++j3)
          if (D5[187][j3].charCodeAt(0) !== 65533) {
            e7[D5[187][j3]] = 47872 + j3;
            d2[47872 + j3] = D5[187][j3];
          }
        D5[188] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u808C\u9965\u8FF9\u6FC0\u8BA5\u9E21\u59EC\u7EE9\u7F09\u5409\u6781\u68D8\u8F91\u7C4D\u96C6\u53CA\u6025\u75BE\u6C72\u5373\u5AC9\u7EA7\u6324\u51E0\u810A\u5DF1\u84DF\u6280\u5180\u5B63\u4F0E\u796D\u5242\u60B8\u6D4E\u5BC4\u5BC2\u8BA1\u8BB0\u65E2\u5FCC\u9645\u5993\u7EE7\u7EAA\u5609\u67B7\u5939\u4F73\u5BB6\u52A0\u835A\u988A\u8D3E\u7532\u94BE\u5047\u7A3C\u4EF7\u67B6\u9A7E\u5AC1\u6B7C\u76D1\u575A\u5C16\u7B3A\u95F4\u714E\u517C\u80A9\u8270\u5978\u7F04\u8327\u68C0\u67EC\u78B1\u7877\u62E3\u6361\u7B80\u4FED\u526A\u51CF\u8350\u69DB\u9274\u8DF5\u8D31\u89C1\u952E\u7BAD\u4EF6\uFFFD".split("");
        for (j3 = 0; j3 != D5[188].length; ++j3)
          if (D5[188][j3].charCodeAt(0) !== 65533) {
            e7[D5[188][j3]] = 48128 + j3;
            d2[48128 + j3] = D5[188][j3];
          }
        D5[189] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u5065\u8230\u5251\u996F\u6E10\u6E85\u6DA7\u5EFA\u50F5\u59DC\u5C06\u6D46\u6C5F\u7586\u848B\u6868\u5956\u8BB2\u5320\u9171\u964D\u8549\u6912\u7901\u7126\u80F6\u4EA4\u90CA\u6D47\u9A84\u5A07\u56BC\u6405\u94F0\u77EB\u4FA5\u811A\u72E1\u89D2\u997A\u7F34\u7EDE\u527F\u6559\u9175\u8F7F\u8F83\u53EB\u7A96\u63ED\u63A5\u7686\u79F8\u8857\u9636\u622A\u52AB\u8282\u6854\u6770\u6377\u776B\u7AED\u6D01\u7ED3\u89E3\u59D0\u6212\u85C9\u82A5\u754C\u501F\u4ECB\u75A5\u8BEB\u5C4A\u5DFE\u7B4B\u65A4\u91D1\u4ECA\u6D25\u895F\u7D27\u9526\u4EC5\u8C28\u8FDB\u9773\u664B\u7981\u8FD1\u70EC\u6D78\uFFFD".split("");
        for (j3 = 0; j3 != D5[189].length; ++j3)
          if (D5[189][j3].charCodeAt(0) !== 65533) {
            e7[D5[189][j3]] = 48384 + j3;
            d2[48384 + j3] = D5[189][j3];
          }
        D5[190] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u5C3D\u52B2\u8346\u5162\u830E\u775B\u6676\u9CB8\u4EAC\u60CA\u7CBE\u7CB3\u7ECF\u4E95\u8B66\u666F\u9888\u9759\u5883\u656C\u955C\u5F84\u75C9\u9756\u7ADF\u7ADE\u51C0\u70AF\u7A98\u63EA\u7A76\u7EA0\u7396\u97ED\u4E45\u7078\u4E5D\u9152\u53A9\u6551\u65E7\u81FC\u8205\u548E\u5C31\u759A\u97A0\u62D8\u72D9\u75BD\u5C45\u9A79\u83CA\u5C40\u5480\u77E9\u4E3E\u6CAE\u805A\u62D2\u636E\u5DE8\u5177\u8DDD\u8E1E\u952F\u4FF1\u53E5\u60E7\u70AC\u5267\u6350\u9E43\u5A1F\u5026\u7737\u5377\u7EE2\u6485\u652B\u6289\u6398\u5014\u7235\u89C9\u51B3\u8BC0\u7EDD\u5747\u83CC\u94A7\u519B\u541B\u5CFB\uFFFD".split("");
        for (j3 = 0; j3 != D5[190].length; ++j3)
          if (D5[190][j3].charCodeAt(0) !== 65533) {
            e7[D5[190][j3]] = 48640 + j3;
            d2[48640 + j3] = D5[190][j3];
          }
        D5[191] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u4FCA\u7AE3\u6D5A\u90E1\u9A8F\u5580\u5496\u5361\u54AF\u5F00\u63E9\u6977\u51EF\u6168\u520A\u582A\u52D8\u574E\u780D\u770B\u5EB7\u6177\u7CE0\u625B\u6297\u4EA2\u7095\u8003\u62F7\u70E4\u9760\u5777\u82DB\u67EF\u68F5\u78D5\u9897\u79D1\u58F3\u54B3\u53EF\u6E34\u514B\u523B\u5BA2\u8BFE\u80AF\u5543\u57A6\u6073\u5751\u542D\u7A7A\u6050\u5B54\u63A7\u62A0\u53E3\u6263\u5BC7\u67AF\u54ED\u7A9F\u82E6\u9177\u5E93\u88E4\u5938\u57AE\u630E\u8DE8\u80EF\u5757\u7B77\u4FA9\u5FEB\u5BBD\u6B3E\u5321\u7B50\u72C2\u6846\u77FF\u7736\u65F7\u51B5\u4E8F\u76D4\u5CBF\u7AA5\u8475\u594E\u9B41\u5080\uFFFD".split("");
        for (j3 = 0; j3 != D5[191].length; ++j3)
          if (D5[191][j3].charCodeAt(0) !== 65533) {
            e7[D5[191][j3]] = 48896 + j3;
            d2[48896 + j3] = D5[191][j3];
          }
        D5[192] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u9988\u6127\u6E83\u5764\u6606\u6346\u56F0\u62EC\u6269\u5ED3\u9614\u5783\u62C9\u5587\u8721\u814A\u8FA3\u5566\u83B1\u6765\u8D56\u84DD\u5A6A\u680F\u62E6\u7BEE\u9611\u5170\u6F9C\u8C30\u63FD\u89C8\u61D2\u7F06\u70C2\u6EE5\u7405\u6994\u72FC\u5ECA\u90CE\u6717\u6D6A\u635E\u52B3\u7262\u8001\u4F6C\u59E5\u916A\u70D9\u6D9D\u52D2\u4E50\u96F7\u956D\u857E\u78CA\u7D2F\u5121\u5792\u64C2\u808B\u7C7B\u6CEA\u68F1\u695E\u51B7\u5398\u68A8\u7281\u9ECE\u7BF1\u72F8\u79BB\u6F13\u7406\u674E\u91CC\u9CA4\u793C\u8389\u8354\u540F\u6817\u4E3D\u5389\u52B1\u783E\u5386\u5229\u5088\u4F8B\u4FD0\uFFFD".split("");
        for (j3 = 0; j3 != D5[192].length; ++j3)
          if (D5[192][j3].charCodeAt(0) !== 65533) {
            e7[D5[192][j3]] = 49152 + j3;
            d2[49152 + j3] = D5[192][j3];
          }
        D5[193] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u75E2\u7ACB\u7C92\u6CA5\u96B6\u529B\u7483\u54E9\u4FE9\u8054\u83B2\u8FDE\u9570\u5EC9\u601C\u6D9F\u5E18\u655B\u8138\u94FE\u604B\u70BC\u7EC3\u7CAE\u51C9\u6881\u7CB1\u826F\u4E24\u8F86\u91CF\u667E\u4EAE\u8C05\u64A9\u804A\u50DA\u7597\u71CE\u5BE5\u8FBD\u6F66\u4E86\u6482\u9563\u5ED6\u6599\u5217\u88C2\u70C8\u52A3\u730E\u7433\u6797\u78F7\u9716\u4E34\u90BB\u9CDE\u6DCB\u51DB\u8D41\u541D\u62CE\u73B2\u83F1\u96F6\u9F84\u94C3\u4F36\u7F9A\u51CC\u7075\u9675\u5CAD\u9886\u53E6\u4EE4\u6E9C\u7409\u69B4\u786B\u998F\u7559\u5218\u7624\u6D41\u67F3\u516D\u9F99\u804B\u5499\u7B3C\u7ABF\uFFFD".split("");
        for (j3 = 0; j3 != D5[193].length; ++j3)
          if (D5[193][j3].charCodeAt(0) !== 65533) {
            e7[D5[193][j3]] = 49408 + j3;
            d2[49408 + j3] = D5[193][j3];
          }
        D5[194] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u9686\u5784\u62E2\u9647\u697C\u5A04\u6402\u7BD3\u6F0F\u964B\u82A6\u5362\u9885\u5E90\u7089\u63B3\u5364\u864F\u9C81\u9E93\u788C\u9732\u8DEF\u8D42\u9E7F\u6F5E\u7984\u5F55\u9646\u622E\u9A74\u5415\u94DD\u4FA3\u65C5\u5C65\u5C61\u7F15\u8651\u6C2F\u5F8B\u7387\u6EE4\u7EFF\u5CE6\u631B\u5B6A\u6EE6\u5375\u4E71\u63A0\u7565\u62A1\u8F6E\u4F26\u4ED1\u6CA6\u7EB6\u8BBA\u841D\u87BA\u7F57\u903B\u9523\u7BA9\u9AA1\u88F8\u843D\u6D1B\u9A86\u7EDC\u5988\u9EBB\u739B\u7801\u8682\u9A6C\u9A82\u561B\u5417\u57CB\u4E70\u9EA6\u5356\u8FC8\u8109\u7792\u9992\u86EE\u6EE1\u8513\u66FC\u6162\u6F2B\uFFFD".split("");
        for (j3 = 0; j3 != D5[194].length; ++j3)
          if (D5[194][j3].charCodeAt(0) !== 65533) {
            e7[D5[194][j3]] = 49664 + j3;
            d2[49664 + j3] = D5[194][j3];
          }
        D5[195] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u8C29\u8292\u832B\u76F2\u6C13\u5FD9\u83BD\u732B\u8305\u951A\u6BDB\u77DB\u94C6\u536F\u8302\u5192\u5E3D\u8C8C\u8D38\u4E48\u73AB\u679A\u6885\u9176\u9709\u7164\u6CA1\u7709\u5A92\u9541\u6BCF\u7F8E\u6627\u5BD0\u59B9\u5A9A\u95E8\u95F7\u4EEC\u840C\u8499\u6AAC\u76DF\u9530\u731B\u68A6\u5B5F\u772F\u919A\u9761\u7CDC\u8FF7\u8C1C\u5F25\u7C73\u79D8\u89C5\u6CCC\u871C\u5BC6\u5E42\u68C9\u7720\u7EF5\u5195\u514D\u52C9\u5A29\u7F05\u9762\u82D7\u63CF\u7784\u85D0\u79D2\u6E3A\u5E99\u5999\u8511\u706D\u6C11\u62BF\u76BF\u654F\u60AF\u95FD\u660E\u879F\u9E23\u94ED\u540D\u547D\u8C2C\u6478\uFFFD".split("");
        for (j3 = 0; j3 != D5[195].length; ++j3)
          if (D5[195][j3].charCodeAt(0) !== 65533) {
            e7[D5[195][j3]] = 49920 + j3;
            d2[49920 + j3] = D5[195][j3];
          }
        D5[196] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u6479\u8611\u6A21\u819C\u78E8\u6469\u9B54\u62B9\u672B\u83AB\u58A8\u9ED8\u6CAB\u6F20\u5BDE\u964C\u8C0B\u725F\u67D0\u62C7\u7261\u4EA9\u59C6\u6BCD\u5893\u66AE\u5E55\u52DF\u6155\u6728\u76EE\u7766\u7267\u7A46\u62FF\u54EA\u5450\u94A0\u90A3\u5A1C\u7EB3\u6C16\u4E43\u5976\u8010\u5948\u5357\u7537\u96BE\u56CA\u6320\u8111\u607C\u95F9\u6DD6\u5462\u9981\u5185\u5AE9\u80FD\u59AE\u9713\u502A\u6CE5\u5C3C\u62DF\u4F60\u533F\u817B\u9006\u6EBA\u852B\u62C8\u5E74\u78BE\u64B5\u637B\u5FF5\u5A18\u917F\u9E1F\u5C3F\u634F\u8042\u5B7D\u556E\u954A\u954D\u6D85\u60A8\u67E0\u72DE\u51DD\u5B81\uFFFD".split("");
        for (j3 = 0; j3 != D5[196].length; ++j3)
          if (D5[196][j3].charCodeAt(0) !== 65533) {
            e7[D5[196][j3]] = 50176 + j3;
            d2[50176 + j3] = D5[196][j3];
          }
        D5[197] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u62E7\u6CDE\u725B\u626D\u94AE\u7EBD\u8113\u6D53\u519C\u5F04\u5974\u52AA\u6012\u5973\u6696\u8650\u759F\u632A\u61E6\u7CEF\u8BFA\u54E6\u6B27\u9E25\u6BB4\u85D5\u5455\u5076\u6CA4\u556A\u8DB4\u722C\u5E15\u6015\u7436\u62CD\u6392\u724C\u5F98\u6E43\u6D3E\u6500\u6F58\u76D8\u78D0\u76FC\u7554\u5224\u53DB\u4E53\u5E9E\u65C1\u802A\u80D6\u629B\u5486\u5228\u70AE\u888D\u8DD1\u6CE1\u5478\u80DA\u57F9\u88F4\u8D54\u966A\u914D\u4F69\u6C9B\u55B7\u76C6\u7830\u62A8\u70F9\u6F8E\u5F6D\u84EC\u68DA\u787C\u7BF7\u81A8\u670B\u9E4F\u6367\u78B0\u576F\u7812\u9739\u6279\u62AB\u5288\u7435\u6BD7\uFFFD".split("");
        for (j3 = 0; j3 != D5[197].length; ++j3)
          if (D5[197][j3].charCodeAt(0) !== 65533) {
            e7[D5[197][j3]] = 50432 + j3;
            d2[50432 + j3] = D5[197][j3];
          }
        D5[198] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u5564\u813E\u75B2\u76AE\u5339\u75DE\u50FB\u5C41\u8B6C\u7BC7\u504F\u7247\u9A97\u98D8\u6F02\u74E2\u7968\u6487\u77A5\u62FC\u9891\u8D2B\u54C1\u8058\u4E52\u576A\u82F9\u840D\u5E73\u51ED\u74F6\u8BC4\u5C4F\u5761\u6CFC\u9887\u5A46\u7834\u9B44\u8FEB\u7C95\u5256\u6251\u94FA\u4EC6\u8386\u8461\u83E9\u84B2\u57D4\u6734\u5703\u666E\u6D66\u8C31\u66DD\u7011\u671F\u6B3A\u6816\u621A\u59BB\u4E03\u51C4\u6F06\u67D2\u6C8F\u5176\u68CB\u5947\u6B67\u7566\u5D0E\u8110\u9F50\u65D7\u7948\u7941\u9A91\u8D77\u5C82\u4E5E\u4F01\u542F\u5951\u780C\u5668\u6C14\u8FC4\u5F03\u6C7D\u6CE3\u8BAB\u6390\uFFFD".split("");
        for (j3 = 0; j3 != D5[198].length; ++j3)
          if (D5[198][j3].charCodeAt(0) !== 65533) {
            e7[D5[198][j3]] = 50688 + j3;
            d2[50688 + j3] = D5[198][j3];
          }
        D5[199] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u6070\u6D3D\u7275\u6266\u948E\u94C5\u5343\u8FC1\u7B7E\u4EDF\u8C26\u4E7E\u9ED4\u94B1\u94B3\u524D\u6F5C\u9063\u6D45\u8C34\u5811\u5D4C\u6B20\u6B49\u67AA\u545B\u8154\u7F8C\u5899\u8537\u5F3A\u62A2\u6A47\u9539\u6572\u6084\u6865\u77A7\u4E54\u4FA8\u5DE7\u9798\u64AC\u7FD8\u5CED\u4FCF\u7A8D\u5207\u8304\u4E14\u602F\u7A83\u94A6\u4FB5\u4EB2\u79E6\u7434\u52E4\u82B9\u64D2\u79BD\u5BDD\u6C81\u9752\u8F7B\u6C22\u503E\u537F\u6E05\u64CE\u6674\u6C30\u60C5\u9877\u8BF7\u5E86\u743C\u7A77\u79CB\u4E18\u90B1\u7403\u6C42\u56DA\u914B\u6CC5\u8D8B\u533A\u86C6\u66F2\u8EAF\u5C48\u9A71\u6E20\uFFFD".split("");
        for (j3 = 0; j3 != D5[199].length; ++j3)
          if (D5[199][j3].charCodeAt(0) !== 65533) {
            e7[D5[199][j3]] = 50944 + j3;
            d2[50944 + j3] = D5[199][j3];
          }
        D5[200] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u53D6\u5A36\u9F8B\u8DA3\u53BB\u5708\u98A7\u6743\u919B\u6CC9\u5168\u75CA\u62F3\u72AC\u5238\u529D\u7F3A\u7094\u7638\u5374\u9E4A\u69B7\u786E\u96C0\u88D9\u7FA4\u7136\u71C3\u5189\u67D3\u74E4\u58E4\u6518\u56B7\u8BA9\u9976\u6270\u7ED5\u60F9\u70ED\u58EC\u4EC1\u4EBA\u5FCD\u97E7\u4EFB\u8BA4\u5203\u598A\u7EAB\u6254\u4ECD\u65E5\u620E\u8338\u84C9\u8363\u878D\u7194\u6EB6\u5BB9\u7ED2\u5197\u63C9\u67D4\u8089\u8339\u8815\u5112\u5B7A\u5982\u8FB1\u4E73\u6C5D\u5165\u8925\u8F6F\u962E\u854A\u745E\u9510\u95F0\u6DA6\u82E5\u5F31\u6492\u6D12\u8428\u816E\u9CC3\u585E\u8D5B\u4E09\u53C1\uFFFD".split("");
        for (j3 = 0; j3 != D5[200].length; ++j3)
          if (D5[200][j3].charCodeAt(0) !== 65533) {
            e7[D5[200][j3]] = 51200 + j3;
            d2[51200 + j3] = D5[200][j3];
          }
        D5[201] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u4F1E\u6563\u6851\u55D3\u4E27\u6414\u9A9A\u626B\u5AC2\u745F\u8272\u6DA9\u68EE\u50E7\u838E\u7802\u6740\u5239\u6C99\u7EB1\u50BB\u5565\u715E\u7B5B\u6652\u73CA\u82EB\u6749\u5C71\u5220\u717D\u886B\u95EA\u9655\u64C5\u8D61\u81B3\u5584\u6C55\u6247\u7F2E\u5892\u4F24\u5546\u8D4F\u664C\u4E0A\u5C1A\u88F3\u68A2\u634E\u7A0D\u70E7\u828D\u52FA\u97F6\u5C11\u54E8\u90B5\u7ECD\u5962\u8D4A\u86C7\u820C\u820D\u8D66\u6444\u5C04\u6151\u6D89\u793E\u8BBE\u7837\u7533\u547B\u4F38\u8EAB\u6DF1\u5A20\u7EC5\u795E\u6C88\u5BA1\u5A76\u751A\u80BE\u614E\u6E17\u58F0\u751F\u7525\u7272\u5347\u7EF3\uFFFD".split("");
        for (j3 = 0; j3 != D5[201].length; ++j3)
          if (D5[201][j3].charCodeAt(0) !== 65533) {
            e7[D5[201][j3]] = 51456 + j3;
            d2[51456 + j3] = D5[201][j3];
          }
        D5[202] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u7701\u76DB\u5269\u80DC\u5723\u5E08\u5931\u72EE\u65BD\u6E7F\u8BD7\u5C38\u8671\u5341\u77F3\u62FE\u65F6\u4EC0\u98DF\u8680\u5B9E\u8BC6\u53F2\u77E2\u4F7F\u5C4E\u9A76\u59CB\u5F0F\u793A\u58EB\u4E16\u67FF\u4E8B\u62ED\u8A93\u901D\u52BF\u662F\u55DC\u566C\u9002\u4ED5\u4F8D\u91CA\u9970\u6C0F\u5E02\u6043\u5BA4\u89C6\u8BD5\u6536\u624B\u9996\u5B88\u5BFF\u6388\u552E\u53D7\u7626\u517D\u852C\u67A2\u68B3\u6B8A\u6292\u8F93\u53D4\u8212\u6DD1\u758F\u4E66\u8D4E\u5B70\u719F\u85AF\u6691\u66D9\u7F72\u8700\u9ECD\u9F20\u5C5E\u672F\u8FF0\u6811\u675F\u620D\u7AD6\u5885\u5EB6\u6570\u6F31\uFFFD".split("");
        for (j3 = 0; j3 != D5[202].length; ++j3)
          if (D5[202][j3].charCodeAt(0) !== 65533) {
            e7[D5[202][j3]] = 51712 + j3;
            d2[51712 + j3] = D5[202][j3];
          }
        D5[203] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u6055\u5237\u800D\u6454\u8870\u7529\u5E05\u6813\u62F4\u971C\u53CC\u723D\u8C01\u6C34\u7761\u7A0E\u542E\u77AC\u987A\u821C\u8BF4\u7855\u6714\u70C1\u65AF\u6495\u5636\u601D\u79C1\u53F8\u4E1D\u6B7B\u8086\u5BFA\u55E3\u56DB\u4F3A\u4F3C\u9972\u5DF3\u677E\u8038\u6002\u9882\u9001\u5B8B\u8BBC\u8BF5\u641C\u8258\u64DE\u55FD\u82CF\u9165\u4FD7\u7D20\u901F\u7C9F\u50F3\u5851\u6EAF\u5BBF\u8BC9\u8083\u9178\u849C\u7B97\u867D\u968B\u968F\u7EE5\u9AD3\u788E\u5C81\u7A57\u9042\u96A7\u795F\u5B59\u635F\u7B0B\u84D1\u68AD\u5506\u7F29\u7410\u7D22\u9501\u6240\u584C\u4ED6\u5B83\u5979\u5854\uFFFD".split("");
        for (j3 = 0; j3 != D5[203].length; ++j3)
          if (D5[203][j3].charCodeAt(0) !== 65533) {
            e7[D5[203][j3]] = 51968 + j3;
            d2[51968 + j3] = D5[203][j3];
          }
        D5[204] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u736D\u631E\u8E4B\u8E0F\u80CE\u82D4\u62AC\u53F0\u6CF0\u915E\u592A\u6001\u6C70\u574D\u644A\u8D2A\u762B\u6EE9\u575B\u6A80\u75F0\u6F6D\u8C2D\u8C08\u5766\u6BEF\u8892\u78B3\u63A2\u53F9\u70AD\u6C64\u5858\u642A\u5802\u68E0\u819B\u5510\u7CD6\u5018\u8EBA\u6DCC\u8D9F\u70EB\u638F\u6D9B\u6ED4\u7EE6\u8404\u6843\u9003\u6DD8\u9676\u8BA8\u5957\u7279\u85E4\u817E\u75BC\u8A8A\u68AF\u5254\u8E22\u9511\u63D0\u9898\u8E44\u557C\u4F53\u66FF\u568F\u60D5\u6D95\u5243\u5C49\u5929\u6DFB\u586B\u7530\u751C\u606C\u8214\u8146\u6311\u6761\u8FE2\u773A\u8DF3\u8D34\u94C1\u5E16\u5385\u542C\u70C3\uFFFD".split("");
        for (j3 = 0; j3 != D5[204].length; ++j3)
          if (D5[204][j3].charCodeAt(0) !== 65533) {
            e7[D5[204][j3]] = 52224 + j3;
            d2[52224 + j3] = D5[204][j3];
          }
        D5[205] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u6C40\u5EF7\u505C\u4EAD\u5EAD\u633A\u8247\u901A\u6850\u916E\u77B3\u540C\u94DC\u5F64\u7AE5\u6876\u6345\u7B52\u7EDF\u75DB\u5077\u6295\u5934\u900F\u51F8\u79C3\u7A81\u56FE\u5F92\u9014\u6D82\u5C60\u571F\u5410\u5154\u6E4D\u56E2\u63A8\u9893\u817F\u8715\u892A\u9000\u541E\u5C6F\u81C0\u62D6\u6258\u8131\u9E35\u9640\u9A6E\u9A7C\u692D\u59A5\u62D3\u553E\u6316\u54C7\u86D9\u6D3C\u5A03\u74E6\u889C\u6B6A\u5916\u8C4C\u5F2F\u6E7E\u73A9\u987D\u4E38\u70F7\u5B8C\u7897\u633D\u665A\u7696\u60CB\u5B9B\u5A49\u4E07\u8155\u6C6A\u738B\u4EA1\u6789\u7F51\u5F80\u65FA\u671B\u5FD8\u5984\u5A01\uFFFD".split("");
        for (j3 = 0; j3 != D5[205].length; ++j3)
          if (D5[205][j3].charCodeAt(0) !== 65533) {
            e7[D5[205][j3]] = 52480 + j3;
            d2[52480 + j3] = D5[205][j3];
          }
        D5[206] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u5DCD\u5FAE\u5371\u97E6\u8FDD\u6845\u56F4\u552F\u60DF\u4E3A\u6F4D\u7EF4\u82C7\u840E\u59D4\u4F1F\u4F2A\u5C3E\u7EAC\u672A\u851A\u5473\u754F\u80C3\u5582\u9B4F\u4F4D\u6E2D\u8C13\u5C09\u6170\u536B\u761F\u6E29\u868A\u6587\u95FB\u7EB9\u543B\u7A33\u7D0A\u95EE\u55E1\u7FC1\u74EE\u631D\u8717\u6DA1\u7A9D\u6211\u65A1\u5367\u63E1\u6C83\u5DEB\u545C\u94A8\u4E4C\u6C61\u8BEC\u5C4B\u65E0\u829C\u68A7\u543E\u5434\u6BCB\u6B66\u4E94\u6342\u5348\u821E\u4F0D\u4FAE\u575E\u620A\u96FE\u6664\u7269\u52FF\u52A1\u609F\u8BEF\u6614\u7199\u6790\u897F\u7852\u77FD\u6670\u563B\u5438\u9521\u727A\uFFFD".split("");
        for (j3 = 0; j3 != D5[206].length; ++j3)
          if (D5[206][j3].charCodeAt(0) !== 65533) {
            e7[D5[206][j3]] = 52736 + j3;
            d2[52736 + j3] = D5[206][j3];
          }
        D5[207] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u7A00\u606F\u5E0C\u6089\u819D\u5915\u60DC\u7184\u70EF\u6EAA\u6C50\u7280\u6A84\u88AD\u5E2D\u4E60\u5AB3\u559C\u94E3\u6D17\u7CFB\u9699\u620F\u7EC6\u778E\u867E\u5323\u971E\u8F96\u6687\u5CE1\u4FA0\u72ED\u4E0B\u53A6\u590F\u5413\u6380\u9528\u5148\u4ED9\u9C9C\u7EA4\u54B8\u8D24\u8854\u8237\u95F2\u6D8E\u5F26\u5ACC\u663E\u9669\u73B0\u732E\u53BF\u817A\u9985\u7FA1\u5BAA\u9677\u9650\u7EBF\u76F8\u53A2\u9576\u9999\u7BB1\u8944\u6E58\u4E61\u7FD4\u7965\u8BE6\u60F3\u54CD\u4EAB\u9879\u5DF7\u6A61\u50CF\u5411\u8C61\u8427\u785D\u9704\u524A\u54EE\u56A3\u9500\u6D88\u5BB5\u6DC6\u6653\uFFFD".split("");
        for (j3 = 0; j3 != D5[207].length; ++j3)
          if (D5[207][j3].charCodeAt(0) !== 65533) {
            e7[D5[207][j3]] = 52992 + j3;
            d2[52992 + j3] = D5[207][j3];
          }
        D5[208] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u5C0F\u5B5D\u6821\u8096\u5578\u7B11\u6548\u6954\u4E9B\u6B47\u874E\u978B\u534F\u631F\u643A\u90AA\u659C\u80C1\u8C10\u5199\u68B0\u5378\u87F9\u61C8\u6CC4\u6CFB\u8C22\u5C51\u85AA\u82AF\u950C\u6B23\u8F9B\u65B0\u5FFB\u5FC3\u4FE1\u8845\u661F\u8165\u7329\u60FA\u5174\u5211\u578B\u5F62\u90A2\u884C\u9192\u5E78\u674F\u6027\u59D3\u5144\u51F6\u80F8\u5308\u6C79\u96C4\u718A\u4F11\u4FEE\u7F9E\u673D\u55C5\u9508\u79C0\u8896\u7EE3\u589F\u620C\u9700\u865A\u5618\u987B\u5F90\u8BB8\u84C4\u9157\u53D9\u65ED\u5E8F\u755C\u6064\u7D6E\u5A7F\u7EEA\u7EED\u8F69\u55A7\u5BA3\u60AC\u65CB\u7384\uFFFD".split("");
        for (j3 = 0; j3 != D5[208].length; ++j3)
          if (D5[208][j3].charCodeAt(0) !== 65533) {
            e7[D5[208][j3]] = 53248 + j3;
            d2[53248 + j3] = D5[208][j3];
          }
        D5[209] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u9009\u7663\u7729\u7EDA\u9774\u859B\u5B66\u7A74\u96EA\u8840\u52CB\u718F\u5FAA\u65EC\u8BE2\u5BFB\u9A6F\u5DE1\u6B89\u6C5B\u8BAD\u8BAF\u900A\u8FC5\u538B\u62BC\u9E26\u9E2D\u5440\u4E2B\u82BD\u7259\u869C\u5D16\u8859\u6DAF\u96C5\u54D1\u4E9A\u8BB6\u7109\u54BD\u9609\u70DF\u6DF9\u76D0\u4E25\u7814\u8712\u5CA9\u5EF6\u8A00\u989C\u960E\u708E\u6CBF\u5944\u63A9\u773C\u884D\u6F14\u8273\u5830\u71D5\u538C\u781A\u96C1\u5501\u5F66\u7130\u5BB4\u8C1A\u9A8C\u6B83\u592E\u9E2F\u79E7\u6768\u626C\u4F6F\u75A1\u7F8A\u6D0B\u9633\u6C27\u4EF0\u75D2\u517B\u6837\u6F3E\u9080\u8170\u5996\u7476\uFFFD".split("");
        for (j3 = 0; j3 != D5[209].length; ++j3)
          if (D5[209][j3].charCodeAt(0) !== 65533) {
            e7[D5[209][j3]] = 53504 + j3;
            d2[53504 + j3] = D5[209][j3];
          }
        D5[210] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u6447\u5C27\u9065\u7A91\u8C23\u59DA\u54AC\u8200\u836F\u8981\u8000\u6930\u564E\u8036\u7237\u91CE\u51B6\u4E5F\u9875\u6396\u4E1A\u53F6\u66F3\u814B\u591C\u6DB2\u4E00\u58F9\u533B\u63D6\u94F1\u4F9D\u4F0A\u8863\u9890\u5937\u9057\u79FB\u4EEA\u80F0\u7591\u6C82\u5B9C\u59E8\u5F5D\u6905\u8681\u501A\u5DF2\u4E59\u77E3\u4EE5\u827A\u6291\u6613\u9091\u5C79\u4EBF\u5F79\u81C6\u9038\u8084\u75AB\u4EA6\u88D4\u610F\u6BC5\u5FC6\u4E49\u76CA\u6EA2\u8BE3\u8BAE\u8C0A\u8BD1\u5F02\u7FFC\u7FCC\u7ECE\u8335\u836B\u56E0\u6BB7\u97F3\u9634\u59FB\u541F\u94F6\u6DEB\u5BC5\u996E\u5C39\u5F15\u9690\uFFFD".split("");
        for (j3 = 0; j3 != D5[210].length; ++j3)
          if (D5[210][j3].charCodeAt(0) !== 65533) {
            e7[D5[210][j3]] = 53760 + j3;
            d2[53760 + j3] = D5[210][j3];
          }
        D5[211] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u5370\u82F1\u6A31\u5A74\u9E70\u5E94\u7F28\u83B9\u8424\u8425\u8367\u8747\u8FCE\u8D62\u76C8\u5F71\u9896\u786C\u6620\u54DF\u62E5\u4F63\u81C3\u75C8\u5EB8\u96CD\u8E0A\u86F9\u548F\u6CF3\u6D8C\u6C38\u607F\u52C7\u7528\u5E7D\u4F18\u60A0\u5FE7\u5C24\u7531\u90AE\u94C0\u72B9\u6CB9\u6E38\u9149\u6709\u53CB\u53F3\u4F51\u91C9\u8BF1\u53C8\u5E7C\u8FC2\u6DE4\u4E8E\u76C2\u6986\u865E\u611A\u8206\u4F59\u4FDE\u903E\u9C7C\u6109\u6E1D\u6E14\u9685\u4E88\u5A31\u96E8\u4E0E\u5C7F\u79B9\u5B87\u8BED\u7FBD\u7389\u57DF\u828B\u90C1\u5401\u9047\u55BB\u5CEA\u5FA1\u6108\u6B32\u72F1\u80B2\u8A89\uFFFD".split("");
        for (j3 = 0; j3 != D5[211].length; ++j3)
          if (D5[211][j3].charCodeAt(0) !== 65533) {
            e7[D5[211][j3]] = 54016 + j3;
            d2[54016 + j3] = D5[211][j3];
          }
        D5[212] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u6D74\u5BD3\u88D5\u9884\u8C6B\u9A6D\u9E33\u6E0A\u51A4\u5143\u57A3\u8881\u539F\u63F4\u8F95\u56ED\u5458\u5706\u733F\u6E90\u7F18\u8FDC\u82D1\u613F\u6028\u9662\u66F0\u7EA6\u8D8A\u8DC3\u94A5\u5CB3\u7CA4\u6708\u60A6\u9605\u8018\u4E91\u90E7\u5300\u9668\u5141\u8FD0\u8574\u915D\u6655\u97F5\u5B55\u531D\u7838\u6742\u683D\u54C9\u707E\u5BB0\u8F7D\u518D\u5728\u54B1\u6512\u6682\u8D5E\u8D43\u810F\u846C\u906D\u7CDF\u51FF\u85FB\u67A3\u65E9\u6FA1\u86A4\u8E81\u566A\u9020\u7682\u7076\u71E5\u8D23\u62E9\u5219\u6CFD\u8D3C\u600E\u589E\u618E\u66FE\u8D60\u624E\u55B3\u6E23\u672D\u8F67\uFFFD".split("");
        for (j3 = 0; j3 != D5[212].length; ++j3)
          if (D5[212][j3].charCodeAt(0) !== 65533) {
            e7[D5[212][j3]] = 54272 + j3;
            d2[54272 + j3] = D5[212][j3];
          }
        D5[213] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u94E1\u95F8\u7728\u6805\u69A8\u548B\u4E4D\u70B8\u8BC8\u6458\u658B\u5B85\u7A84\u503A\u5BE8\u77BB\u6BE1\u8A79\u7C98\u6CBE\u76CF\u65A9\u8F97\u5D2D\u5C55\u8638\u6808\u5360\u6218\u7AD9\u6E5B\u7EFD\u6A1F\u7AE0\u5F70\u6F33\u5F20\u638C\u6DA8\u6756\u4E08\u5E10\u8D26\u4ED7\u80C0\u7634\u969C\u62DB\u662D\u627E\u6CBC\u8D75\u7167\u7F69\u5146\u8087\u53EC\u906E\u6298\u54F2\u86F0\u8F99\u8005\u9517\u8517\u8FD9\u6D59\u73CD\u659F\u771F\u7504\u7827\u81FB\u8D1E\u9488\u4FA6\u6795\u75B9\u8BCA\u9707\u632F\u9547\u9635\u84B8\u6323\u7741\u5F81\u72F0\u4E89\u6014\u6574\u62EF\u6B63\u653F\uFFFD".split("");
        for (j3 = 0; j3 != D5[213].length; ++j3)
          if (D5[213][j3].charCodeAt(0) !== 65533) {
            e7[D5[213][j3]] = 54528 + j3;
            d2[54528 + j3] = D5[213][j3];
          }
        D5[214] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u5E27\u75C7\u90D1\u8BC1\u829D\u679D\u652F\u5431\u8718\u77E5\u80A2\u8102\u6C41\u4E4B\u7EC7\u804C\u76F4\u690D\u6B96\u6267\u503C\u4F84\u5740\u6307\u6B62\u8DBE\u53EA\u65E8\u7EB8\u5FD7\u631A\u63B7\u81F3\u81F4\u7F6E\u5E1C\u5CD9\u5236\u667A\u79E9\u7A1A\u8D28\u7099\u75D4\u6EDE\u6CBB\u7A92\u4E2D\u76C5\u5FE0\u949F\u8877\u7EC8\u79CD\u80BF\u91CD\u4EF2\u4F17\u821F\u5468\u5DDE\u6D32\u8BCC\u7CA5\u8F74\u8098\u5E1A\u5492\u76B1\u5B99\u663C\u9AA4\u73E0\u682A\u86DB\u6731\u732A\u8BF8\u8BDB\u9010\u7AF9\u70DB\u716E\u62C4\u77A9\u5631\u4E3B\u8457\u67F1\u52A9\u86C0\u8D2E\u94F8\u7B51\uFFFD".split("");
        for (j3 = 0; j3 != D5[214].length; ++j3)
          if (D5[214][j3].charCodeAt(0) !== 65533) {
            e7[D5[214][j3]] = 54784 + j3;
            d2[54784 + j3] = D5[214][j3];
          }
        D5[215] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u4F4F\u6CE8\u795D\u9A7B\u6293\u722A\u62FD\u4E13\u7816\u8F6C\u64B0\u8D5A\u7BC6\u6869\u5E84\u88C5\u5986\u649E\u58EE\u72B6\u690E\u9525\u8FFD\u8D58\u5760\u7F00\u8C06\u51C6\u6349\u62D9\u5353\u684C\u7422\u8301\u914C\u5544\u7740\u707C\u6D4A\u5179\u54A8\u8D44\u59FF\u6ECB\u6DC4\u5B5C\u7D2B\u4ED4\u7C7D\u6ED3\u5B50\u81EA\u6E0D\u5B57\u9B03\u68D5\u8E2A\u5B97\u7EFC\u603B\u7EB5\u90B9\u8D70\u594F\u63CD\u79DF\u8DB3\u5352\u65CF\u7956\u8BC5\u963B\u7EC4\u94BB\u7E82\u5634\u9189\u6700\u7F6A\u5C0A\u9075\u6628\u5DE6\u4F50\u67DE\u505A\u4F5C\u5750\u5EA7\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD".split("");
        for (j3 = 0; j3 != D5[215].length; ++j3)
          if (D5[215][j3].charCodeAt(0) !== 65533) {
            e7[D5[215][j3]] = 55040 + j3;
            d2[55040 + j3] = D5[215][j3];
          }
        D5[216] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u4E8D\u4E0C\u5140\u4E10\u5EFF\u5345\u4E15\u4E98\u4E1E\u9B32\u5B6C\u5669\u4E28\u79BA\u4E3F\u5315\u4E47\u592D\u723B\u536E\u6C10\u56DF\u80E4\u9997\u6BD3\u777E\u9F17\u4E36\u4E9F\u9F10\u4E5C\u4E69\u4E93\u8288\u5B5B\u556C\u560F\u4EC4\u538D\u539D\u53A3\u53A5\u53AE\u9765\u8D5D\u531A\u53F5\u5326\u532E\u533E\u8D5C\u5366\u5363\u5202\u5208\u520E\u522D\u5233\u523F\u5240\u524C\u525E\u5261\u525C\u84AF\u527D\u5282\u5281\u5290\u5293\u5182\u7F54\u4EBB\u4EC3\u4EC9\u4EC2\u4EE8\u4EE1\u4EEB\u4EDE\u4F1B\u4EF3\u4F22\u4F64\u4EF5\u4F25\u4F27\u4F09\u4F2B\u4F5E\u4F67\u6538\u4F5A\u4F5D\uFFFD".split("");
        for (j3 = 0; j3 != D5[216].length; ++j3)
          if (D5[216][j3].charCodeAt(0) !== 65533) {
            e7[D5[216][j3]] = 55296 + j3;
            d2[55296 + j3] = D5[216][j3];
          }
        D5[217] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u4F5F\u4F57\u4F32\u4F3D\u4F76\u4F74\u4F91\u4F89\u4F83\u4F8F\u4F7E\u4F7B\u4FAA\u4F7C\u4FAC\u4F94\u4FE6\u4FE8\u4FEA\u4FC5\u4FDA\u4FE3\u4FDC\u4FD1\u4FDF\u4FF8\u5029\u504C\u4FF3\u502C\u500F\u502E\u502D\u4FFE\u501C\u500C\u5025\u5028\u507E\u5043\u5055\u5048\u504E\u506C\u507B\u50A5\u50A7\u50A9\u50BA\u50D6\u5106\u50ED\u50EC\u50E6\u50EE\u5107\u510B\u4EDD\u6C3D\u4F58\u4F65\u4FCE\u9FA0\u6C46\u7C74\u516E\u5DFD\u9EC9\u9998\u5181\u5914\u52F9\u530D\u8A07\u5310\u51EB\u5919\u5155\u4EA0\u5156\u4EB3\u886E\u88A4\u4EB5\u8114\u88D2\u7980\u5B34\u8803\u7FB8\u51AB\u51B1\u51BD\u51BC\uFFFD".split("");
        for (j3 = 0; j3 != D5[217].length; ++j3)
          if (D5[217][j3].charCodeAt(0) !== 65533) {
            e7[D5[217][j3]] = 55552 + j3;
            d2[55552 + j3] = D5[217][j3];
          }
        D5[218] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u51C7\u5196\u51A2\u51A5\u8BA0\u8BA6\u8BA7\u8BAA\u8BB4\u8BB5\u8BB7\u8BC2\u8BC3\u8BCB\u8BCF\u8BCE\u8BD2\u8BD3\u8BD4\u8BD6\u8BD8\u8BD9\u8BDC\u8BDF\u8BE0\u8BE4\u8BE8\u8BE9\u8BEE\u8BF0\u8BF3\u8BF6\u8BF9\u8BFC\u8BFF\u8C00\u8C02\u8C04\u8C07\u8C0C\u8C0F\u8C11\u8C12\u8C14\u8C15\u8C16\u8C19\u8C1B\u8C18\u8C1D\u8C1F\u8C20\u8C21\u8C25\u8C27\u8C2A\u8C2B\u8C2E\u8C2F\u8C32\u8C33\u8C35\u8C36\u5369\u537A\u961D\u9622\u9621\u9631\u962A\u963D\u963C\u9642\u9649\u9654\u965F\u9667\u966C\u9672\u9674\u9688\u968D\u9697\u96B0\u9097\u909B\u909D\u9099\u90AC\u90A1\u90B4\u90B3\u90B6\u90BA\uFFFD".split("");
        for (j3 = 0; j3 != D5[218].length; ++j3)
          if (D5[218][j3].charCodeAt(0) !== 65533) {
            e7[D5[218][j3]] = 55808 + j3;
            d2[55808 + j3] = D5[218][j3];
          }
        D5[219] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u90B8\u90B0\u90CF\u90C5\u90BE\u90D0\u90C4\u90C7\u90D3\u90E6\u90E2\u90DC\u90D7\u90DB\u90EB\u90EF\u90FE\u9104\u9122\u911E\u9123\u9131\u912F\u9139\u9143\u9146\u520D\u5942\u52A2\u52AC\u52AD\u52BE\u54FF\u52D0\u52D6\u52F0\u53DF\u71EE\u77CD\u5EF4\u51F5\u51FC\u9B2F\u53B6\u5F01\u755A\u5DEF\u574C\u57A9\u57A1\u587E\u58BC\u58C5\u58D1\u5729\u572C\u572A\u5733\u5739\u572E\u572F\u575C\u573B\u5742\u5769\u5785\u576B\u5786\u577C\u577B\u5768\u576D\u5776\u5773\u57AD\u57A4\u578C\u57B2\u57CF\u57A7\u57B4\u5793\u57A0\u57D5\u57D8\u57DA\u57D9\u57D2\u57B8\u57F4\u57EF\u57F8\u57E4\u57DD\uFFFD".split("");
        for (j3 = 0; j3 != D5[219].length; ++j3)
          if (D5[219][j3].charCodeAt(0) !== 65533) {
            e7[D5[219][j3]] = 56064 + j3;
            d2[56064 + j3] = D5[219][j3];
          }
        D5[220] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u580B\u580D\u57FD\u57ED\u5800\u581E\u5819\u5844\u5820\u5865\u586C\u5881\u5889\u589A\u5880\u99A8\u9F19\u61FF\u8279\u827D\u827F\u828F\u828A\u82A8\u8284\u828E\u8291\u8297\u8299\u82AB\u82B8\u82BE\u82B0\u82C8\u82CA\u82E3\u8298\u82B7\u82AE\u82CB\u82CC\u82C1\u82A9\u82B4\u82A1\u82AA\u829F\u82C4\u82CE\u82A4\u82E1\u8309\u82F7\u82E4\u830F\u8307\u82DC\u82F4\u82D2\u82D8\u830C\u82FB\u82D3\u8311\u831A\u8306\u8314\u8315\u82E0\u82D5\u831C\u8351\u835B\u835C\u8308\u8392\u833C\u8334\u8331\u839B\u835E\u832F\u834F\u8347\u8343\u835F\u8340\u8317\u8360\u832D\u833A\u8333\u8366\u8365\uFFFD".split("");
        for (j3 = 0; j3 != D5[220].length; ++j3)
          if (D5[220][j3].charCodeAt(0) !== 65533) {
            e7[D5[220][j3]] = 56320 + j3;
            d2[56320 + j3] = D5[220][j3];
          }
        D5[221] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u8368\u831B\u8369\u836C\u836A\u836D\u836E\u83B0\u8378\u83B3\u83B4\u83A0\u83AA\u8393\u839C\u8385\u837C\u83B6\u83A9\u837D\u83B8\u837B\u8398\u839E\u83A8\u83BA\u83BC\u83C1\u8401\u83E5\u83D8\u5807\u8418\u840B\u83DD\u83FD\u83D6\u841C\u8438\u8411\u8406\u83D4\u83DF\u840F\u8403\u83F8\u83F9\u83EA\u83C5\u83C0\u8426\u83F0\u83E1\u845C\u8451\u845A\u8459\u8473\u8487\u8488\u847A\u8489\u8478\u843C\u8446\u8469\u8476\u848C\u848E\u8431\u846D\u84C1\u84CD\u84D0\u84E6\u84BD\u84D3\u84CA\u84BF\u84BA\u84E0\u84A1\u84B9\u84B4\u8497\u84E5\u84E3\u850C\u750D\u8538\u84F0\u8539\u851F\u853A\uFFFD".split("");
        for (j3 = 0; j3 != D5[221].length; ++j3)
          if (D5[221][j3].charCodeAt(0) !== 65533) {
            e7[D5[221][j3]] = 56576 + j3;
            d2[56576 + j3] = D5[221][j3];
          }
        D5[222] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u8556\u853B\u84FF\u84FC\u8559\u8548\u8568\u8564\u855E\u857A\u77A2\u8543\u8572\u857B\u85A4\u85A8\u8587\u858F\u8579\u85AE\u859C\u8585\u85B9\u85B7\u85B0\u85D3\u85C1\u85DC\u85FF\u8627\u8605\u8629\u8616\u863C\u5EFE\u5F08\u593C\u5941\u8037\u5955\u595A\u5958\u530F\u5C22\u5C25\u5C2C\u5C34\u624C\u626A\u629F\u62BB\u62CA\u62DA\u62D7\u62EE\u6322\u62F6\u6339\u634B\u6343\u63AD\u63F6\u6371\u637A\u638E\u63B4\u636D\u63AC\u638A\u6369\u63AE\u63BC\u63F2\u63F8\u63E0\u63FF\u63C4\u63DE\u63CE\u6452\u63C6\u63BE\u6445\u6441\u640B\u641B\u6420\u640C\u6426\u6421\u645E\u6484\u646D\u6496\uFFFD".split("");
        for (j3 = 0; j3 != D5[222].length; ++j3)
          if (D5[222][j3].charCodeAt(0) !== 65533) {
            e7[D5[222][j3]] = 56832 + j3;
            d2[56832 + j3] = D5[222][j3];
          }
        D5[223] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u647A\u64B7\u64B8\u6499\u64BA\u64C0\u64D0\u64D7\u64E4\u64E2\u6509\u6525\u652E\u5F0B\u5FD2\u7519\u5F11\u535F\u53F1\u53FD\u53E9\u53E8\u53FB\u5412\u5416\u5406\u544B\u5452\u5453\u5454\u5456\u5443\u5421\u5457\u5459\u5423\u5432\u5482\u5494\u5477\u5471\u5464\u549A\u549B\u5484\u5476\u5466\u549D\u54D0\u54AD\u54C2\u54B4\u54D2\u54A7\u54A6\u54D3\u54D4\u5472\u54A3\u54D5\u54BB\u54BF\u54CC\u54D9\u54DA\u54DC\u54A9\u54AA\u54A4\u54DD\u54CF\u54DE\u551B\u54E7\u5520\u54FD\u5514\u54F3\u5522\u5523\u550F\u5511\u5527\u552A\u5567\u558F\u55B5\u5549\u556D\u5541\u5555\u553F\u5550\u553C\uFFFD".split("");
        for (j3 = 0; j3 != D5[223].length; ++j3)
          if (D5[223][j3].charCodeAt(0) !== 65533) {
            e7[D5[223][j3]] = 57088 + j3;
            d2[57088 + j3] = D5[223][j3];
          }
        D5[224] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u5537\u5556\u5575\u5576\u5577\u5533\u5530\u555C\u558B\u55D2\u5583\u55B1\u55B9\u5588\u5581\u559F\u557E\u55D6\u5591\u557B\u55DF\u55BD\u55BE\u5594\u5599\u55EA\u55F7\u55C9\u561F\u55D1\u55EB\u55EC\u55D4\u55E6\u55DD\u55C4\u55EF\u55E5\u55F2\u55F3\u55CC\u55CD\u55E8\u55F5\u55E4\u8F94\u561E\u5608\u560C\u5601\u5624\u5623\u55FE\u5600\u5627\u562D\u5658\u5639\u5657\u562C\u564D\u5662\u5659\u565C\u564C\u5654\u5686\u5664\u5671\u566B\u567B\u567C\u5685\u5693\u56AF\u56D4\u56D7\u56DD\u56E1\u56F5\u56EB\u56F9\u56FF\u5704\u570A\u5709\u571C\u5E0F\u5E19\u5E14\u5E11\u5E31\u5E3B\u5E3C\uFFFD".split("");
        for (j3 = 0; j3 != D5[224].length; ++j3)
          if (D5[224][j3].charCodeAt(0) !== 65533) {
            e7[D5[224][j3]] = 57344 + j3;
            d2[57344 + j3] = D5[224][j3];
          }
        D5[225] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u5E37\u5E44\u5E54\u5E5B\u5E5E\u5E61\u5C8C\u5C7A\u5C8D\u5C90\u5C96\u5C88\u5C98\u5C99\u5C91\u5C9A\u5C9C\u5CB5\u5CA2\u5CBD\u5CAC\u5CAB\u5CB1\u5CA3\u5CC1\u5CB7\u5CC4\u5CD2\u5CE4\u5CCB\u5CE5\u5D02\u5D03\u5D27\u5D26\u5D2E\u5D24\u5D1E\u5D06\u5D1B\u5D58\u5D3E\u5D34\u5D3D\u5D6C\u5D5B\u5D6F\u5D5D\u5D6B\u5D4B\u5D4A\u5D69\u5D74\u5D82\u5D99\u5D9D\u8C73\u5DB7\u5DC5\u5F73\u5F77\u5F82\u5F87\u5F89\u5F8C\u5F95\u5F99\u5F9C\u5FA8\u5FAD\u5FB5\u5FBC\u8862\u5F61\u72AD\u72B0\u72B4\u72B7\u72B8\u72C3\u72C1\u72CE\u72CD\u72D2\u72E8\u72EF\u72E9\u72F2\u72F4\u72F7\u7301\u72F3\u7303\u72FA\uFFFD".split("");
        for (j3 = 0; j3 != D5[225].length; ++j3)
          if (D5[225][j3].charCodeAt(0) !== 65533) {
            e7[D5[225][j3]] = 57600 + j3;
            d2[57600 + j3] = D5[225][j3];
          }
        D5[226] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u72FB\u7317\u7313\u7321\u730A\u731E\u731D\u7315\u7322\u7339\u7325\u732C\u7338\u7331\u7350\u734D\u7357\u7360\u736C\u736F\u737E\u821B\u5925\u98E7\u5924\u5902\u9963\u9967\u9968\u9969\u996A\u996B\u996C\u9974\u9977\u997D\u9980\u9984\u9987\u998A\u998D\u9990\u9991\u9993\u9994\u9995\u5E80\u5E91\u5E8B\u5E96\u5EA5\u5EA0\u5EB9\u5EB5\u5EBE\u5EB3\u8D53\u5ED2\u5ED1\u5EDB\u5EE8\u5EEA\u81BA\u5FC4\u5FC9\u5FD6\u5FCF\u6003\u5FEE\u6004\u5FE1\u5FE4\u5FFE\u6005\u6006\u5FEA\u5FED\u5FF8\u6019\u6035\u6026\u601B\u600F\u600D\u6029\u602B\u600A\u603F\u6021\u6078\u6079\u607B\u607A\u6042\uFFFD".split("");
        for (j3 = 0; j3 != D5[226].length; ++j3)
          if (D5[226][j3].charCodeAt(0) !== 65533) {
            e7[D5[226][j3]] = 57856 + j3;
            d2[57856 + j3] = D5[226][j3];
          }
        D5[227] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u606A\u607D\u6096\u609A\u60AD\u609D\u6083\u6092\u608C\u609B\u60EC\u60BB\u60B1\u60DD\u60D8\u60C6\u60DA\u60B4\u6120\u6126\u6115\u6123\u60F4\u6100\u610E\u612B\u614A\u6175\u61AC\u6194\u61A7\u61B7\u61D4\u61F5\u5FDD\u96B3\u95E9\u95EB\u95F1\u95F3\u95F5\u95F6\u95FC\u95FE\u9603\u9604\u9606\u9608\u960A\u960B\u960C\u960D\u960F\u9612\u9615\u9616\u9617\u9619\u961A\u4E2C\u723F\u6215\u6C35\u6C54\u6C5C\u6C4A\u6CA3\u6C85\u6C90\u6C94\u6C8C\u6C68\u6C69\u6C74\u6C76\u6C86\u6CA9\u6CD0\u6CD4\u6CAD\u6CF7\u6CF8\u6CF1\u6CD7\u6CB2\u6CE0\u6CD6\u6CFA\u6CEB\u6CEE\u6CB1\u6CD3\u6CEF\u6CFE\uFFFD".split("");
        for (j3 = 0; j3 != D5[227].length; ++j3)
          if (D5[227][j3].charCodeAt(0) !== 65533) {
            e7[D5[227][j3]] = 58112 + j3;
            d2[58112 + j3] = D5[227][j3];
          }
        D5[228] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u6D39\u6D27\u6D0C\u6D43\u6D48\u6D07\u6D04\u6D19\u6D0E\u6D2B\u6D4D\u6D2E\u6D35\u6D1A\u6D4F\u6D52\u6D54\u6D33\u6D91\u6D6F\u6D9E\u6DA0\u6D5E\u6D93\u6D94\u6D5C\u6D60\u6D7C\u6D63\u6E1A\u6DC7\u6DC5\u6DDE\u6E0E\u6DBF\u6DE0\u6E11\u6DE6\u6DDD\u6DD9\u6E16\u6DAB\u6E0C\u6DAE\u6E2B\u6E6E\u6E4E\u6E6B\u6EB2\u6E5F\u6E86\u6E53\u6E54\u6E32\u6E25\u6E44\u6EDF\u6EB1\u6E98\u6EE0\u6F2D\u6EE2\u6EA5\u6EA7\u6EBD\u6EBB\u6EB7\u6ED7\u6EB4\u6ECF\u6E8F\u6EC2\u6E9F\u6F62\u6F46\u6F47\u6F24\u6F15\u6EF9\u6F2F\u6F36\u6F4B\u6F74\u6F2A\u6F09\u6F29\u6F89\u6F8D\u6F8C\u6F78\u6F72\u6F7C\u6F7A\u6FD1\uFFFD".split("");
        for (j3 = 0; j3 != D5[228].length; ++j3)
          if (D5[228][j3].charCodeAt(0) !== 65533) {
            e7[D5[228][j3]] = 58368 + j3;
            d2[58368 + j3] = D5[228][j3];
          }
        D5[229] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u6FC9\u6FA7\u6FB9\u6FB6\u6FC2\u6FE1\u6FEE\u6FDE\u6FE0\u6FEF\u701A\u7023\u701B\u7039\u7035\u704F\u705E\u5B80\u5B84\u5B95\u5B93\u5BA5\u5BB8\u752F\u9A9E\u6434\u5BE4\u5BEE\u8930\u5BF0\u8E47\u8B07\u8FB6\u8FD3\u8FD5\u8FE5\u8FEE\u8FE4\u8FE9\u8FE6\u8FF3\u8FE8\u9005\u9004\u900B\u9026\u9011\u900D\u9016\u9021\u9035\u9036\u902D\u902F\u9044\u9051\u9052\u9050\u9068\u9058\u9062\u905B\u66B9\u9074\u907D\u9082\u9088\u9083\u908B\u5F50\u5F57\u5F56\u5F58\u5C3B\u54AB\u5C50\u5C59\u5B71\u5C63\u5C66\u7FBC\u5F2A\u5F29\u5F2D\u8274\u5F3C\u9B3B\u5C6E\u5981\u5983\u598D\u59A9\u59AA\u59A3\uFFFD".split("");
        for (j3 = 0; j3 != D5[229].length; ++j3)
          if (D5[229][j3].charCodeAt(0) !== 65533) {
            e7[D5[229][j3]] = 58624 + j3;
            d2[58624 + j3] = D5[229][j3];
          }
        D5[230] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u5997\u59CA\u59AB\u599E\u59A4\u59D2\u59B2\u59AF\u59D7\u59BE\u5A05\u5A06\u59DD\u5A08\u59E3\u59D8\u59F9\u5A0C\u5A09\u5A32\u5A34\u5A11\u5A23\u5A13\u5A40\u5A67\u5A4A\u5A55\u5A3C\u5A62\u5A75\u80EC\u5AAA\u5A9B\u5A77\u5A7A\u5ABE\u5AEB\u5AB2\u5AD2\u5AD4\u5AB8\u5AE0\u5AE3\u5AF1\u5AD6\u5AE6\u5AD8\u5ADC\u5B09\u5B17\u5B16\u5B32\u5B37\u5B40\u5C15\u5C1C\u5B5A\u5B65\u5B73\u5B51\u5B53\u5B62\u9A75\u9A77\u9A78\u9A7A\u9A7F\u9A7D\u9A80\u9A81\u9A85\u9A88\u9A8A\u9A90\u9A92\u9A93\u9A96\u9A98\u9A9B\u9A9C\u9A9D\u9A9F\u9AA0\u9AA2\u9AA3\u9AA5\u9AA7\u7E9F\u7EA1\u7EA3\u7EA5\u7EA8\u7EA9\uFFFD".split("");
        for (j3 = 0; j3 != D5[230].length; ++j3)
          if (D5[230][j3].charCodeAt(0) !== 65533) {
            e7[D5[230][j3]] = 58880 + j3;
            d2[58880 + j3] = D5[230][j3];
          }
        D5[231] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u7EAD\u7EB0\u7EBE\u7EC0\u7EC1\u7EC2\u7EC9\u7ECB\u7ECC\u7ED0\u7ED4\u7ED7\u7EDB\u7EE0\u7EE1\u7EE8\u7EEB\u7EEE\u7EEF\u7EF1\u7EF2\u7F0D\u7EF6\u7EFA\u7EFB\u7EFE\u7F01\u7F02\u7F03\u7F07\u7F08\u7F0B\u7F0C\u7F0F\u7F11\u7F12\u7F17\u7F19\u7F1C\u7F1B\u7F1F\u7F21\u7F22\u7F23\u7F24\u7F25\u7F26\u7F27\u7F2A\u7F2B\u7F2C\u7F2D\u7F2F\u7F30\u7F31\u7F32\u7F33\u7F35\u5E7A\u757F\u5DDB\u753E\u9095\u738E\u7391\u73AE\u73A2\u739F\u73CF\u73C2\u73D1\u73B7\u73B3\u73C0\u73C9\u73C8\u73E5\u73D9\u987C\u740A\u73E9\u73E7\u73DE\u73BA\u73F2\u740F\u742A\u745B\u7426\u7425\u7428\u7430\u742E\u742C\uFFFD".split("");
        for (j3 = 0; j3 != D5[231].length; ++j3)
          if (D5[231][j3].charCodeAt(0) !== 65533) {
            e7[D5[231][j3]] = 59136 + j3;
            d2[59136 + j3] = D5[231][j3];
          }
        D5[232] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u741B\u741A\u7441\u745C\u7457\u7455\u7459\u7477\u746D\u747E\u749C\u748E\u7480\u7481\u7487\u748B\u749E\u74A8\u74A9\u7490\u74A7\u74D2\u74BA\u97EA\u97EB\u97EC\u674C\u6753\u675E\u6748\u6769\u67A5\u6787\u676A\u6773\u6798\u67A7\u6775\u67A8\u679E\u67AD\u678B\u6777\u677C\u67F0\u6809\u67D8\u680A\u67E9\u67B0\u680C\u67D9\u67B5\u67DA\u67B3\u67DD\u6800\u67C3\u67B8\u67E2\u680E\u67C1\u67FD\u6832\u6833\u6860\u6861\u684E\u6862\u6844\u6864\u6883\u681D\u6855\u6866\u6841\u6867\u6840\u683E\u684A\u6849\u6829\u68B5\u688F\u6874\u6877\u6893\u686B\u68C2\u696E\u68FC\u691F\u6920\u68F9\uFFFD".split("");
        for (j3 = 0; j3 != D5[232].length; ++j3)
          if (D5[232][j3].charCodeAt(0) !== 65533) {
            e7[D5[232][j3]] = 59392 + j3;
            d2[59392 + j3] = D5[232][j3];
          }
        D5[233] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u6924\u68F0\u690B\u6901\u6957\u68E3\u6910\u6971\u6939\u6960\u6942\u695D\u6984\u696B\u6980\u6998\u6978\u6934\u69CC\u6987\u6988\u69CE\u6989\u6966\u6963\u6979\u699B\u69A7\u69BB\u69AB\u69AD\u69D4\u69B1\u69C1\u69CA\u69DF\u6995\u69E0\u698D\u69FF\u6A2F\u69ED\u6A17\u6A18\u6A65\u69F2\u6A44\u6A3E\u6AA0\u6A50\u6A5B\u6A35\u6A8E\u6A79\u6A3D\u6A28\u6A58\u6A7C\u6A91\u6A90\u6AA9\u6A97\u6AAB\u7337\u7352\u6B81\u6B82\u6B87\u6B84\u6B92\u6B93\u6B8D\u6B9A\u6B9B\u6BA1\u6BAA\u8F6B\u8F6D\u8F71\u8F72\u8F73\u8F75\u8F76\u8F78\u8F77\u8F79\u8F7A\u8F7C\u8F7E\u8F81\u8F82\u8F84\u8F87\u8F8B\uFFFD".split("");
        for (j3 = 0; j3 != D5[233].length; ++j3)
          if (D5[233][j3].charCodeAt(0) !== 65533) {
            e7[D5[233][j3]] = 59648 + j3;
            d2[59648 + j3] = D5[233][j3];
          }
        D5[234] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u8F8D\u8F8E\u8F8F\u8F98\u8F9A\u8ECE\u620B\u6217\u621B\u621F\u6222\u6221\u6225\u6224\u622C\u81E7\u74EF\u74F4\u74FF\u750F\u7511\u7513\u6534\u65EE\u65EF\u65F0\u660A\u6619\u6772\u6603\u6615\u6600\u7085\u66F7\u661D\u6634\u6631\u6636\u6635\u8006\u665F\u6654\u6641\u664F\u6656\u6661\u6657\u6677\u6684\u668C\u66A7\u669D\u66BE\u66DB\u66DC\u66E6\u66E9\u8D32\u8D33\u8D36\u8D3B\u8D3D\u8D40\u8D45\u8D46\u8D48\u8D49\u8D47\u8D4D\u8D55\u8D59\u89C7\u89CA\u89CB\u89CC\u89CE\u89CF\u89D0\u89D1\u726E\u729F\u725D\u7266\u726F\u727E\u727F\u7284\u728B\u728D\u728F\u7292\u6308\u6332\u63B0\uFFFD".split("");
        for (j3 = 0; j3 != D5[234].length; ++j3)
          if (D5[234][j3].charCodeAt(0) !== 65533) {
            e7[D5[234][j3]] = 59904 + j3;
            d2[59904 + j3] = D5[234][j3];
          }
        D5[235] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u643F\u64D8\u8004\u6BEA\u6BF3\u6BFD\u6BF5\u6BF9\u6C05\u6C07\u6C06\u6C0D\u6C15\u6C18\u6C19\u6C1A\u6C21\u6C29\u6C24\u6C2A\u6C32\u6535\u6555\u656B\u724D\u7252\u7256\u7230\u8662\u5216\u809F\u809C\u8093\u80BC\u670A\u80BD\u80B1\u80AB\u80AD\u80B4\u80B7\u80E7\u80E8\u80E9\u80EA\u80DB\u80C2\u80C4\u80D9\u80CD\u80D7\u6710\u80DD\u80EB\u80F1\u80F4\u80ED\u810D\u810E\u80F2\u80FC\u6715\u8112\u8C5A\u8136\u811E\u812C\u8118\u8132\u8148\u814C\u8153\u8174\u8159\u815A\u8171\u8160\u8169\u817C\u817D\u816D\u8167\u584D\u5AB5\u8188\u8182\u8191\u6ED5\u81A3\u81AA\u81CC\u6726\u81CA\u81BB\uFFFD".split("");
        for (j3 = 0; j3 != D5[235].length; ++j3)
          if (D5[235][j3].charCodeAt(0) !== 65533) {
            e7[D5[235][j3]] = 60160 + j3;
            d2[60160 + j3] = D5[235][j3];
          }
        D5[236] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u81C1\u81A6\u6B24\u6B37\u6B39\u6B43\u6B46\u6B59\u98D1\u98D2\u98D3\u98D5\u98D9\u98DA\u6BB3\u5F40\u6BC2\u89F3\u6590\u9F51\u6593\u65BC\u65C6\u65C4\u65C3\u65CC\u65CE\u65D2\u65D6\u7080\u709C\u7096\u709D\u70BB\u70C0\u70B7\u70AB\u70B1\u70E8\u70CA\u7110\u7113\u7116\u712F\u7131\u7173\u715C\u7168\u7145\u7172\u714A\u7178\u717A\u7198\u71B3\u71B5\u71A8\u71A0\u71E0\u71D4\u71E7\u71F9\u721D\u7228\u706C\u7118\u7166\u71B9\u623E\u623D\u6243\u6248\u6249\u793B\u7940\u7946\u7949\u795B\u795C\u7953\u795A\u7962\u7957\u7960\u796F\u7967\u797A\u7985\u798A\u799A\u79A7\u79B3\u5FD1\u5FD0\uFFFD".split("");
        for (j3 = 0; j3 != D5[236].length; ++j3)
          if (D5[236][j3].charCodeAt(0) !== 65533) {
            e7[D5[236][j3]] = 60416 + j3;
            d2[60416 + j3] = D5[236][j3];
          }
        D5[237] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u603C\u605D\u605A\u6067\u6041\u6059\u6063\u60AB\u6106\u610D\u615D\u61A9\u619D\u61CB\u61D1\u6206\u8080\u807F\u6C93\u6CF6\u6DFC\u77F6\u77F8\u7800\u7809\u7817\u7818\u7811\u65AB\u782D\u781C\u781D\u7839\u783A\u783B\u781F\u783C\u7825\u782C\u7823\u7829\u784E\u786D\u7856\u7857\u7826\u7850\u7847\u784C\u786A\u789B\u7893\u789A\u7887\u789C\u78A1\u78A3\u78B2\u78B9\u78A5\u78D4\u78D9\u78C9\u78EC\u78F2\u7905\u78F4\u7913\u7924\u791E\u7934\u9F9B\u9EF9\u9EFB\u9EFC\u76F1\u7704\u770D\u76F9\u7707\u7708\u771A\u7722\u7719\u772D\u7726\u7735\u7738\u7750\u7751\u7747\u7743\u775A\u7768\uFFFD".split("");
        for (j3 = 0; j3 != D5[237].length; ++j3)
          if (D5[237][j3].charCodeAt(0) !== 65533) {
            e7[D5[237][j3]] = 60672 + j3;
            d2[60672 + j3] = D5[237][j3];
          }
        D5[238] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u7762\u7765\u777F\u778D\u777D\u7780\u778C\u7791\u779F\u77A0\u77B0\u77B5\u77BD\u753A\u7540\u754E\u754B\u7548\u755B\u7572\u7579\u7583\u7F58\u7F61\u7F5F\u8A48\u7F68\u7F74\u7F71\u7F79\u7F81\u7F7E\u76CD\u76E5\u8832\u9485\u9486\u9487\u948B\u948A\u948C\u948D\u948F\u9490\u9494\u9497\u9495\u949A\u949B\u949C\u94A3\u94A4\u94AB\u94AA\u94AD\u94AC\u94AF\u94B0\u94B2\u94B4\u94B6\u94B7\u94B8\u94B9\u94BA\u94BC\u94BD\u94BF\u94C4\u94C8\u94C9\u94CA\u94CB\u94CC\u94CD\u94CE\u94D0\u94D1\u94D2\u94D5\u94D6\u94D7\u94D9\u94D8\u94DB\u94DE\u94DF\u94E0\u94E2\u94E4\u94E5\u94E7\u94E8\u94EA\uFFFD".split("");
        for (j3 = 0; j3 != D5[238].length; ++j3)
          if (D5[238][j3].charCodeAt(0) !== 65533) {
            e7[D5[238][j3]] = 60928 + j3;
            d2[60928 + j3] = D5[238][j3];
          }
        D5[239] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u94E9\u94EB\u94EE\u94EF\u94F3\u94F4\u94F5\u94F7\u94F9\u94FC\u94FD\u94FF\u9503\u9502\u9506\u9507\u9509\u950A\u950D\u950E\u950F\u9512\u9513\u9514\u9515\u9516\u9518\u951B\u951D\u951E\u951F\u9522\u952A\u952B\u9529\u952C\u9531\u9532\u9534\u9536\u9537\u9538\u953C\u953E\u953F\u9542\u9535\u9544\u9545\u9546\u9549\u954C\u954E\u954F\u9552\u9553\u9554\u9556\u9557\u9558\u9559\u955B\u955E\u955F\u955D\u9561\u9562\u9564\u9565\u9566\u9567\u9568\u9569\u956A\u956B\u956C\u956F\u9571\u9572\u9573\u953A\u77E7\u77EC\u96C9\u79D5\u79ED\u79E3\u79EB\u7A06\u5D47\u7A03\u7A02\u7A1E\u7A14\uFFFD".split("");
        for (j3 = 0; j3 != D5[239].length; ++j3)
          if (D5[239][j3].charCodeAt(0) !== 65533) {
            e7[D5[239][j3]] = 61184 + j3;
            d2[61184 + j3] = D5[239][j3];
          }
        D5[240] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u7A39\u7A37\u7A51\u9ECF\u99A5\u7A70\u7688\u768E\u7693\u7699\u76A4\u74DE\u74E0\u752C\u9E20\u9E22\u9E28\u9E29\u9E2A\u9E2B\u9E2C\u9E32\u9E31\u9E36\u9E38\u9E37\u9E39\u9E3A\u9E3E\u9E41\u9E42\u9E44\u9E46\u9E47\u9E48\u9E49\u9E4B\u9E4C\u9E4E\u9E51\u9E55\u9E57\u9E5A\u9E5B\u9E5C\u9E5E\u9E63\u9E66\u9E67\u9E68\u9E69\u9E6A\u9E6B\u9E6C\u9E71\u9E6D\u9E73\u7592\u7594\u7596\u75A0\u759D\u75AC\u75A3\u75B3\u75B4\u75B8\u75C4\u75B1\u75B0\u75C3\u75C2\u75D6\u75CD\u75E3\u75E8\u75E6\u75E4\u75EB\u75E7\u7603\u75F1\u75FC\u75FF\u7610\u7600\u7605\u760C\u7617\u760A\u7625\u7618\u7615\u7619\uFFFD".split("");
        for (j3 = 0; j3 != D5[240].length; ++j3)
          if (D5[240][j3].charCodeAt(0) !== 65533) {
            e7[D5[240][j3]] = 61440 + j3;
            d2[61440 + j3] = D5[240][j3];
          }
        D5[241] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u761B\u763C\u7622\u7620\u7640\u762D\u7630\u763F\u7635\u7643\u763E\u7633\u764D\u765E\u7654\u765C\u7656\u766B\u766F\u7FCA\u7AE6\u7A78\u7A79\u7A80\u7A86\u7A88\u7A95\u7AA6\u7AA0\u7AAC\u7AA8\u7AAD\u7AB3\u8864\u8869\u8872\u887D\u887F\u8882\u88A2\u88C6\u88B7\u88BC\u88C9\u88E2\u88CE\u88E3\u88E5\u88F1\u891A\u88FC\u88E8\u88FE\u88F0\u8921\u8919\u8913\u891B\u890A\u8934\u892B\u8936\u8941\u8966\u897B\u758B\u80E5\u76B2\u76B4\u77DC\u8012\u8014\u8016\u801C\u8020\u8022\u8025\u8026\u8027\u8029\u8028\u8031\u800B\u8035\u8043\u8046\u804D\u8052\u8069\u8071\u8983\u9878\u9880\u9883\uFFFD".split("");
        for (j3 = 0; j3 != D5[241].length; ++j3)
          if (D5[241][j3].charCodeAt(0) !== 65533) {
            e7[D5[241][j3]] = 61696 + j3;
            d2[61696 + j3] = D5[241][j3];
          }
        D5[242] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u9889\u988C\u988D\u988F\u9894\u989A\u989B\u989E\u989F\u98A1\u98A2\u98A5\u98A6\u864D\u8654\u866C\u866E\u867F\u867A\u867C\u867B\u86A8\u868D\u868B\u86AC\u869D\u86A7\u86A3\u86AA\u8693\u86A9\u86B6\u86C4\u86B5\u86CE\u86B0\u86BA\u86B1\u86AF\u86C9\u86CF\u86B4\u86E9\u86F1\u86F2\u86ED\u86F3\u86D0\u8713\u86DE\u86F4\u86DF\u86D8\u86D1\u8703\u8707\u86F8\u8708\u870A\u870D\u8709\u8723\u873B\u871E\u8725\u872E\u871A\u873E\u8748\u8734\u8731\u8729\u8737\u873F\u8782\u8722\u877D\u877E\u877B\u8760\u8770\u874C\u876E\u878B\u8753\u8763\u877C\u8764\u8759\u8765\u8793\u87AF\u87A8\u87D2\uFFFD".split("");
        for (j3 = 0; j3 != D5[242].length; ++j3)
          if (D5[242][j3].charCodeAt(0) !== 65533) {
            e7[D5[242][j3]] = 61952 + j3;
            d2[61952 + j3] = D5[242][j3];
          }
        D5[243] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u87C6\u8788\u8785\u87AD\u8797\u8783\u87AB\u87E5\u87AC\u87B5\u87B3\u87CB\u87D3\u87BD\u87D1\u87C0\u87CA\u87DB\u87EA\u87E0\u87EE\u8816\u8813\u87FE\u880A\u881B\u8821\u8839\u883C\u7F36\u7F42\u7F44\u7F45\u8210\u7AFA\u7AFD\u7B08\u7B03\u7B04\u7B15\u7B0A\u7B2B\u7B0F\u7B47\u7B38\u7B2A\u7B19\u7B2E\u7B31\u7B20\u7B25\u7B24\u7B33\u7B3E\u7B1E\u7B58\u7B5A\u7B45\u7B75\u7B4C\u7B5D\u7B60\u7B6E\u7B7B\u7B62\u7B72\u7B71\u7B90\u7BA6\u7BA7\u7BB8\u7BAC\u7B9D\u7BA8\u7B85\u7BAA\u7B9C\u7BA2\u7BAB\u7BB4\u7BD1\u7BC1\u7BCC\u7BDD\u7BDA\u7BE5\u7BE6\u7BEA\u7C0C\u7BFE\u7BFC\u7C0F\u7C16\u7C0B\uFFFD".split("");
        for (j3 = 0; j3 != D5[243].length; ++j3)
          if (D5[243][j3].charCodeAt(0) !== 65533) {
            e7[D5[243][j3]] = 62208 + j3;
            d2[62208 + j3] = D5[243][j3];
          }
        D5[244] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u7C1F\u7C2A\u7C26\u7C38\u7C41\u7C40\u81FE\u8201\u8202\u8204\u81EC\u8844\u8221\u8222\u8223\u822D\u822F\u8228\u822B\u8238\u823B\u8233\u8234\u823E\u8244\u8249\u824B\u824F\u825A\u825F\u8268\u887E\u8885\u8888\u88D8\u88DF\u895E\u7F9D\u7F9F\u7FA7\u7FAF\u7FB0\u7FB2\u7C7C\u6549\u7C91\u7C9D\u7C9C\u7C9E\u7CA2\u7CB2\u7CBC\u7CBD\u7CC1\u7CC7\u7CCC\u7CCD\u7CC8\u7CC5\u7CD7\u7CE8\u826E\u66A8\u7FBF\u7FCE\u7FD5\u7FE5\u7FE1\u7FE6\u7FE9\u7FEE\u7FF3\u7CF8\u7D77\u7DA6\u7DAE\u7E47\u7E9B\u9EB8\u9EB4\u8D73\u8D84\u8D94\u8D91\u8DB1\u8D67\u8D6D\u8C47\u8C49\u914A\u9150\u914E\u914F\u9164\uFFFD".split("");
        for (j3 = 0; j3 != D5[244].length; ++j3)
          if (D5[244][j3].charCodeAt(0) !== 65533) {
            e7[D5[244][j3]] = 62464 + j3;
            d2[62464 + j3] = D5[244][j3];
          }
        D5[245] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u9162\u9161\u9170\u9169\u916F\u917D\u917E\u9172\u9174\u9179\u918C\u9185\u9190\u918D\u9191\u91A2\u91A3\u91AA\u91AD\u91AE\u91AF\u91B5\u91B4\u91BA\u8C55\u9E7E\u8DB8\u8DEB\u8E05\u8E59\u8E69\u8DB5\u8DBF\u8DBC\u8DBA\u8DC4\u8DD6\u8DD7\u8DDA\u8DDE\u8DCE\u8DCF\u8DDB\u8DC6\u8DEC\u8DF7\u8DF8\u8DE3\u8DF9\u8DFB\u8DE4\u8E09\u8DFD\u8E14\u8E1D\u8E1F\u8E2C\u8E2E\u8E23\u8E2F\u8E3A\u8E40\u8E39\u8E35\u8E3D\u8E31\u8E49\u8E41\u8E42\u8E51\u8E52\u8E4A\u8E70\u8E76\u8E7C\u8E6F\u8E74\u8E85\u8E8F\u8E94\u8E90\u8E9C\u8E9E\u8C78\u8C82\u8C8A\u8C85\u8C98\u8C94\u659B\u89D6\u89DE\u89DA\u89DC\uFFFD".split("");
        for (j3 = 0; j3 != D5[245].length; ++j3)
          if (D5[245][j3].charCodeAt(0) !== 65533) {
            e7[D5[245][j3]] = 62720 + j3;
            d2[62720 + j3] = D5[245][j3];
          }
        D5[246] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u89E5\u89EB\u89EF\u8A3E\u8B26\u9753\u96E9\u96F3\u96EF\u9706\u9701\u9708\u970F\u970E\u972A\u972D\u9730\u973E\u9F80\u9F83\u9F85\u9F86\u9F87\u9F88\u9F89\u9F8A\u9F8C\u9EFE\u9F0B\u9F0D\u96B9\u96BC\u96BD\u96CE\u96D2\u77BF\u96E0\u928E\u92AE\u92C8\u933E\u936A\u93CA\u938F\u943E\u946B\u9C7F\u9C82\u9C85\u9C86\u9C87\u9C88\u7A23\u9C8B\u9C8E\u9C90\u9C91\u9C92\u9C94\u9C95\u9C9A\u9C9B\u9C9E\u9C9F\u9CA0\u9CA1\u9CA2\u9CA3\u9CA5\u9CA6\u9CA7\u9CA8\u9CA9\u9CAB\u9CAD\u9CAE\u9CB0\u9CB1\u9CB2\u9CB3\u9CB4\u9CB5\u9CB6\u9CB7\u9CBA\u9CBB\u9CBC\u9CBD\u9CC4\u9CC5\u9CC6\u9CC7\u9CCA\u9CCB\uFFFD".split("");
        for (j3 = 0; j3 != D5[246].length; ++j3)
          if (D5[246][j3].charCodeAt(0) !== 65533) {
            e7[D5[246][j3]] = 62976 + j3;
            d2[62976 + j3] = D5[246][j3];
          }
        D5[247] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u9CCC\u9CCD\u9CCE\u9CCF\u9CD0\u9CD3\u9CD4\u9CD5\u9CD7\u9CD8\u9CD9\u9CDC\u9CDD\u9CDF\u9CE2\u977C\u9785\u9791\u9792\u9794\u97AF\u97AB\u97A3\u97B2\u97B4\u9AB1\u9AB0\u9AB7\u9E58\u9AB6\u9ABA\u9ABC\u9AC1\u9AC0\u9AC5\u9AC2\u9ACB\u9ACC\u9AD1\u9B45\u9B43\u9B47\u9B49\u9B48\u9B4D\u9B51\u98E8\u990D\u992E\u9955\u9954\u9ADF\u9AE1\u9AE6\u9AEF\u9AEB\u9AFB\u9AED\u9AF9\u9B08\u9B0F\u9B13\u9B1F\u9B23\u9EBD\u9EBE\u7E3B\u9E82\u9E87\u9E88\u9E8B\u9E92\u93D6\u9E9D\u9E9F\u9EDB\u9EDC\u9EDD\u9EE0\u9EDF\u9EE2\u9EE9\u9EE7\u9EE5\u9EEA\u9EEF\u9F22\u9F2C\u9F2F\u9F39\u9F37\u9F3D\u9F3E\u9F44\uFFFD".split("");
        for (j3 = 0; j3 != D5[247].length; ++j3)
          if (D5[247][j3].charCodeAt(0) !== 65533) {
            e7[D5[247][j3]] = 63232 + j3;
            d2[63232 + j3] = D5[247][j3];
          }
        return { "enc": e7, "dec": d2 };
      }();
      cptable2[10029] = function() {
        var d2 = "\0\x07\b	\n\v\f\r\x1B !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~\x7F\xC4\u0100\u0101\xC9\u0104\xD6\xDC\xE1\u0105\u010C\xE4\u010D\u0106\u0107\xE9\u0179\u017A\u010E\xED\u010F\u0112\u0113\u0116\xF3\u0117\xF4\xF6\xF5\xFA\u011A\u011B\xFC\u2020\xB0\u0118\xA3\xA7\u2022\xB6\xDF\xAE\xA9\u2122\u0119\xA8\u2260\u0123\u012E\u012F\u012A\u2264\u2265\u012B\u0136\u2202\u2211\u0142\u013B\u013C\u013D\u013E\u0139\u013A\u0145\u0146\u0143\xAC\u221A\u0144\u0147\u2206\xAB\xBB\u2026\xA0\u0148\u0150\xD5\u0151\u014C\u2013\u2014\u201C\u201D\u2018\u2019\xF7\u25CA\u014D\u0154\u0155\u0158\u2039\u203A\u0159\u0156\u0157\u0160\u201A\u201E\u0161\u015A\u015B\xC1\u0164\u0165\xCD\u017D\u017E\u016A\xD3\xD4\u016B\u016E\xDA\u016F\u0170\u0171\u0172\u0173\xDD\xFD\u0137\u017B\u0141\u017C\u0122\u02C7", D5 = [], e7 = {};
        for (var i6 = 0; i6 != d2.length; ++i6) {
          if (d2.charCodeAt(i6) !== 65533)
            e7[d2.charAt(i6)] = i6;
          D5[i6] = d2.charAt(i6);
        }
        return { "enc": e7, "dec": D5 };
      }();
      cptable2[10079] = function() {
        var d2 = "\0\x07\b	\n\v\f\r\x1B !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~\x7F\xC4\xC5\xC7\xC9\xD1\xD6\xDC\xE1\xE0\xE2\xE4\xE3\xE5\xE7\xE9\xE8\xEA\xEB\xED\xEC\xEE\xEF\xF1\xF3\xF2\xF4\xF6\xF5\xFA\xF9\xFB\xFC\xDD\xB0\xA2\xA3\xA7\u2022\xB6\xDF\xAE\xA9\u2122\xB4\xA8\u2260\xC6\xD8\u221E\xB1\u2264\u2265\xA5\xB5\u2202\u2211\u220F\u03C0\u222B\xAA\xBA\u2126\xE6\xF8\xBF\xA1\xAC\u221A\u0192\u2248\u2206\xAB\xBB\u2026\xA0\xC0\xC3\xD5\u0152\u0153\u2013\u2014\u201C\u201D\u2018\u2019\xF7\u25CA\xFF\u0178\u2044\xA4\xD0\xF0\xDE\xFE\xFD\xB7\u201A\u201E\u2030\xC2\xCA\xC1\xCB\xC8\xCD\xCE\xCF\xCC\xD3\xD4\uFFFD\xD2\xDA\xDB\xD9\u0131\u02C6\u02DC\xAF\u02D8\u02D9\u02DA\xB8\u02DD\u02DB\u02C7", D5 = [], e7 = {};
        for (var i6 = 0; i6 != d2.length; ++i6) {
          if (d2.charCodeAt(i6) !== 65533)
            e7[d2.charAt(i6)] = i6;
          D5[i6] = d2.charAt(i6);
        }
        return { "enc": e7, "dec": D5 };
      }();
      cptable2[10081] = function() {
        var d2 = "\0\x07\b	\n\v\f\r\x1B !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~\x7F\xC4\xC5\xC7\xC9\xD1\xD6\xDC\xE1\xE0\xE2\xE4\xE3\xE5\xE7\xE9\xE8\xEA\xEB\xED\xEC\xEE\xEF\xF1\xF3\xF2\xF4\xF6\xF5\xFA\xF9\xFB\xFC\u2020\xB0\xA2\xA3\xA7\u2022\xB6\xDF\xAE\xA9\u2122\xB4\xA8\u2260\xC6\xD8\u221E\xB1\u2264\u2265\xA5\xB5\u2202\u2211\u220F\u03C0\u222B\xAA\xBA\u2126\xE6\xF8\xBF\xA1\xAC\u221A\u0192\u2248\u2206\xAB\xBB\u2026\xA0\xC0\xC3\xD5\u0152\u0153\u2013\u2014\u201C\u201D\u2018\u2019\xF7\u25CA\xFF\u0178\u011E\u011F\u0130\u0131\u015E\u015F\u2021\xB7\u201A\u201E\u2030\xC2\xCA\xC1\xCB\xC8\xCD\xCE\xCF\xCC\xD3\xD4\uFFFD\xD2\xDA\xDB\xD9\uFFFD\u02C6\u02DC\xAF\u02D8\u02D9\u02DA\xB8\u02DD\u02DB\u02C7", D5 = [], e7 = {};
        for (var i6 = 0; i6 != d2.length; ++i6) {
          if (d2.charCodeAt(i6) !== 65533)
            e7[d2.charAt(i6)] = i6;
          D5[i6] = d2.charAt(i6);
        }
        return { "enc": e7, "dec": D5 };
      }();
      cptable2[28591] = function() {
        var d2 = "\0\x07\b	\n\v\f\r\x1B !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~\x7F\x80\x81\x82\x83\x84\x85\x86\x87\x88\x89\x8A\x8B\x8C\x8D\x8E\x8F\x90\x91\x92\x93\x94\x95\x96\x97\x98\x99\x9A\x9B\x9C\x9D\x9E\x9F\xA0\xA1\xA2\xA3\xA4\xA5\xA6\xA7\xA8\xA9\xAA\xAB\xAC\xAD\xAE\xAF\xB0\xB1\xB2\xB3\xB4\xB5\xB6\xB7\xB8\xB9\xBA\xBB\xBC\xBD\xBE\xBF\xC0\xC1\xC2\xC3\xC4\xC5\xC6\xC7\xC8\xC9\xCA\xCB\xCC\xCD\xCE\xCF\xD0\xD1\xD2\xD3\xD4\xD5\xD6\xD7\xD8\xD9\xDA\xDB\xDC\xDD\xDE\xDF\xE0\xE1\xE2\xE3\xE4\xE5\xE6\xE7\xE8\xE9\xEA\xEB\xEC\xED\xEE\xEF\xF0\xF1\xF2\xF3\xF4\xF5\xF6\xF7\xF8\xF9\xFA\xFB\xFC\xFD\xFE\xFF", D5 = [], e7 = {};
        for (var i6 = 0; i6 != d2.length; ++i6) {
          if (d2.charCodeAt(i6) !== 65533)
            e7[d2.charAt(i6)] = i6;
          D5[i6] = d2.charAt(i6);
        }
        return { "enc": e7, "dec": D5 };
      }();
      if (typeof module !== "undefined" && module.exports && typeof DO_NOT_EXPORT_CODEPAGE === "undefined")
        module.exports = cptable2;
      (function(root, factory) {
        "use strict";
        if (typeof cptable2 === "undefined") {
          if (typeof __require !== "undefined") {
            var cpt = cptable2;
            if (typeof module !== "undefined" && module.exports && typeof DO_NOT_EXPORT_CODEPAGE === "undefined")
              module.exports = factory(cpt);
            else
              root.cptable = factory(cpt);
          } else
            throw new Error("cptable not found");
        } else
          cptable2 = factory(cptable2);
      })(exports, function(cpt) {
        "use strict";
        var magic = {
          "1200": "utf16le",
          "1201": "utf16be",
          "12000": "utf32le",
          "12001": "utf32be",
          "16969": "utf64le",
          "20127": "ascii",
          "65000": "utf7",
          "65001": "utf8"
        };
        var sbcs_cache = [874, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1e4];
        var dbcs_cache = [932, 936, 949, 950];
        var magic_cache = [65001];
        var magic_decode = {};
        var magic_encode = {};
        var cpdcache = {};
        var cpecache = {};
        var sfcc = function sfcc2(x3) {
          return String.fromCharCode(x3);
        };
        var cca = function cca2(x3) {
          return x3.charCodeAt(0);
        };
        var has_buf = typeof Buffer !== "undefined";
        var Buffer_from = function() {
        };
        if (has_buf) {
          var nbfs = !Buffer.from;
          if (!nbfs)
            try {
              Buffer.from("foo", "utf8");
            } catch (e7) {
              nbfs = true;
            }
          Buffer_from = nbfs ? function(buf, enc) {
            return enc ? new Buffer(buf, enc) : new Buffer(buf);
          } : Buffer.from.bind(Buffer);
          if (!Buffer.allocUnsafe)
            Buffer.allocUnsafe = function(n6) {
              return new Buffer(n6);
            };
          var mdl = 1024, mdb = Buffer.allocUnsafe(mdl);
          var make_EE = function make_EE2(E6) {
            var EE = Buffer.allocUnsafe(65536);
            for (var i6 = 0; i6 < 65536; ++i6)
              EE[i6] = 0;
            var keys = Object.keys(E6), len = keys.length;
            for (var ee2 = 0, e7 = keys[ee2]; ee2 < len; ++ee2) {
              if (!(e7 = keys[ee2]))
                continue;
              EE[e7.charCodeAt(0)] = E6[e7];
            }
            return EE;
          };
          var sbcs_encode = function make_sbcs_encode(cp) {
            var EE = make_EE(cpt[cp].enc);
            return function sbcs_e(data, ofmt) {
              var len = data.length;
              var out, i6 = 0, j3 = 0, D5 = 0, w3 = 0;
              if (typeof data === "string") {
                out = Buffer.allocUnsafe(len);
                for (i6 = 0; i6 < len; ++i6)
                  out[i6] = EE[data.charCodeAt(i6)];
              } else if (Buffer.isBuffer(data)) {
                out = Buffer.allocUnsafe(2 * len);
                j3 = 0;
                for (i6 = 0; i6 < len; ++i6) {
                  D5 = data[i6];
                  if (D5 < 128)
                    out[j3++] = EE[D5];
                  else if (D5 < 224) {
                    out[j3++] = EE[((D5 & 31) << 6) + (data[i6 + 1] & 63)];
                    ++i6;
                  } else if (D5 < 240) {
                    out[j3++] = EE[((D5 & 15) << 12) + ((data[i6 + 1] & 63) << 6) + (data[i6 + 2] & 63)];
                    i6 += 2;
                  } else {
                    w3 = ((D5 & 7) << 18) + ((data[i6 + 1] & 63) << 12) + ((data[i6 + 2] & 63) << 6) + (data[i6 + 3] & 63);
                    i6 += 3;
                    if (w3 < 65536)
                      out[j3++] = EE[w3];
                    else {
                      w3 -= 65536;
                      out[j3++] = EE[55296 + (w3 >> 10 & 1023)];
                      out[j3++] = EE[56320 + (w3 & 1023)];
                    }
                  }
                }
                out = out.slice(0, j3);
              } else {
                out = Buffer.allocUnsafe(len);
                for (i6 = 0; i6 < len; ++i6)
                  out[i6] = EE[data[i6].charCodeAt(0)];
              }
              if (!ofmt || ofmt === "buf")
                return out;
              if (ofmt !== "arr")
                return out.toString("binary");
              return [].slice.call(out);
            };
          };
          var sbcs_decode = function make_sbcs_decode(cp) {
            var D5 = cpt[cp].dec;
            var DD = Buffer.allocUnsafe(131072), d2 = 0, c8 = "";
            for (d2 = 0; d2 < D5.length; ++d2) {
              if (!(c8 = D5[d2]))
                continue;
              var w3 = c8.charCodeAt(0);
              DD[2 * d2] = w3 & 255;
              DD[2 * d2 + 1] = w3 >> 8;
            }
            return function sbcs_d(data) {
              var len = data.length, i6 = 0, j3 = 0;
              if (2 * len > mdl) {
                mdl = 2 * len;
                mdb = Buffer.allocUnsafe(mdl);
              }
              if (Buffer.isBuffer(data)) {
                for (i6 = 0; i6 < len; i6++) {
                  j3 = 2 * data[i6];
                  mdb[2 * i6] = DD[j3];
                  mdb[2 * i6 + 1] = DD[j3 + 1];
                }
              } else if (typeof data === "string") {
                for (i6 = 0; i6 < len; i6++) {
                  j3 = 2 * data.charCodeAt(i6);
                  mdb[2 * i6] = DD[j3];
                  mdb[2 * i6 + 1] = DD[j3 + 1];
                }
              } else {
                for (i6 = 0; i6 < len; i6++) {
                  j3 = 2 * data[i6];
                  mdb[2 * i6] = DD[j3];
                  mdb[2 * i6 + 1] = DD[j3 + 1];
                }
              }
              return mdb.slice(0, 2 * len).toString("ucs2");
            };
          };
          var dbcs_encode = function make_dbcs_encode(cp) {
            var E6 = cpt[cp].enc;
            var EE = Buffer.allocUnsafe(131072);
            for (var i6 = 0; i6 < 131072; ++i6)
              EE[i6] = 0;
            var keys = Object.keys(E6);
            for (var ee2 = 0, e7 = keys[ee2]; ee2 < keys.length; ++ee2) {
              if (!(e7 = keys[ee2]))
                continue;
              var f2 = e7.charCodeAt(0);
              EE[2 * f2] = E6[e7] & 255;
              EE[2 * f2 + 1] = E6[e7] >> 8;
            }
            return function dbcs_e(data, ofmt) {
              var len = data.length, out = Buffer.allocUnsafe(2 * len), i7 = 0, j3 = 0, jj = 0, k2 = 0, D5 = 0;
              if (typeof data === "string") {
                for (i7 = k2 = 0; i7 < len; ++i7) {
                  j3 = data.charCodeAt(i7) * 2;
                  out[k2++] = EE[j3 + 1] || EE[j3];
                  if (EE[j3 + 1] > 0)
                    out[k2++] = EE[j3];
                }
                out = out.slice(0, k2);
              } else if (Buffer.isBuffer(data)) {
                for (i7 = k2 = 0; i7 < len; ++i7) {
                  D5 = data[i7];
                  if (D5 < 128)
                    j3 = D5;
                  else if (D5 < 224) {
                    j3 = ((D5 & 31) << 6) + (data[i7 + 1] & 63);
                    ++i7;
                  } else if (D5 < 240) {
                    j3 = ((D5 & 15) << 12) + ((data[i7 + 1] & 63) << 6) + (data[i7 + 2] & 63);
                    i7 += 2;
                  } else {
                    j3 = ((D5 & 7) << 18) + ((data[i7 + 1] & 63) << 12) + ((data[i7 + 2] & 63) << 6) + (data[i7 + 3] & 63);
                    i7 += 3;
                  }
                  if (j3 < 65536) {
                    j3 *= 2;
                    out[k2++] = EE[j3 + 1] || EE[j3];
                    if (EE[j3 + 1] > 0)
                      out[k2++] = EE[j3];
                  } else {
                    jj = j3 - 65536;
                    j3 = 2 * (55296 + (jj >> 10 & 1023));
                    out[k2++] = EE[j3 + 1] || EE[j3];
                    if (EE[j3 + 1] > 0)
                      out[k2++] = EE[j3];
                    j3 = 2 * (56320 + (jj & 1023));
                    out[k2++] = EE[j3 + 1] || EE[j3];
                    if (EE[j3 + 1] > 0)
                      out[k2++] = EE[j3];
                  }
                }
                out = out.slice(0, k2);
              } else {
                for (i7 = k2 = 0; i7 < len; i7++) {
                  j3 = data[i7].charCodeAt(0) * 2;
                  out[k2++] = EE[j3 + 1] || EE[j3];
                  if (EE[j3 + 1] > 0)
                    out[k2++] = EE[j3];
                }
              }
              if (!ofmt || ofmt === "buf")
                return out;
              if (ofmt !== "arr")
                return out.toString("binary");
              return [].slice.call(out);
            };
          };
          var dbcs_decode = function make_dbcs_decode(cp) {
            var D5 = cpt[cp].dec;
            var DD = Buffer.allocUnsafe(131072), d2 = 0, c8, w3 = 0, j3 = 0, i6 = 0;
            for (i6 = 0; i6 < 65536; ++i6) {
              DD[2 * i6] = 255;
              DD[2 * i6 + 1] = 253;
            }
            for (d2 = 0; d2 < D5.length; ++d2) {
              if (!(c8 = D5[d2]))
                continue;
              w3 = c8.charCodeAt(0);
              j3 = 2 * d2;
              DD[j3] = w3 & 255;
              DD[j3 + 1] = w3 >> 8;
            }
            return function dbcs_d(data) {
              var len = data.length, out = Buffer.allocUnsafe(2 * len), i7 = 0, j4 = 0, k2 = 0;
              if (Buffer.isBuffer(data)) {
                for (i7 = 0; i7 < len; i7++) {
                  j4 = 2 * data[i7];
                  if (DD[j4] === 255 && DD[j4 + 1] === 253) {
                    j4 = 2 * ((data[i7] << 8) + data[i7 + 1]);
                    ++i7;
                  }
                  out[k2++] = DD[j4];
                  out[k2++] = DD[j4 + 1];
                }
              } else if (typeof data === "string") {
                for (i7 = 0; i7 < len; i7++) {
                  j4 = 2 * data.charCodeAt(i7);
                  if (DD[j4] === 255 && DD[j4 + 1] === 253) {
                    j4 = 2 * ((data.charCodeAt(i7) << 8) + data.charCodeAt(i7 + 1));
                    ++i7;
                  }
                  out[k2++] = DD[j4];
                  out[k2++] = DD[j4 + 1];
                }
              } else {
                for (i7 = 0; i7 < len; i7++) {
                  j4 = 2 * data[i7];
                  if (DD[j4] === 255 && DD[j4 + 1] === 253) {
                    j4 = 2 * ((data[i7] << 8) + data[i7 + 1]);
                    ++i7;
                  }
                  out[k2++] = DD[j4];
                  out[k2++] = DD[j4 + 1];
                }
              }
              return out.slice(0, k2).toString("ucs2");
            };
          };
          magic_decode[65001] = function utf8_d(data) {
            if (typeof data === "string")
              return utf8_d(data.split("").map(cca));
            var len = data.length, w3 = 0, ww = 0;
            if (4 * len > mdl) {
              mdl = 4 * len;
              mdb = Buffer.allocUnsafe(mdl);
            }
            var i6 = 0;
            if (len >= 3 && data[0] == 239) {
              if (data[1] == 187 && data[2] == 191)
                i6 = 3;
            }
            for (var j3 = 1, k2 = 0, D5 = 0; i6 < len; i6 += j3) {
              j3 = 1;
              D5 = data[i6];
              if (D5 < 128)
                w3 = D5;
              else if (D5 < 224) {
                w3 = (D5 & 31) * 64 + (data[i6 + 1] & 63);
                j3 = 2;
              } else if (D5 < 240) {
                w3 = ((D5 & 15) << 12) + (data[i6 + 1] & 63) * 64 + (data[i6 + 2] & 63);
                j3 = 3;
              } else {
                w3 = (D5 & 7) * 262144 + ((data[i6 + 1] & 63) << 12) + (data[i6 + 2] & 63) * 64 + (data[i6 + 3] & 63);
                j3 = 4;
              }
              if (w3 < 65536) {
                mdb[k2++] = w3 & 255;
                mdb[k2++] = w3 >> 8;
              } else {
                w3 -= 65536;
                ww = 55296 + (w3 >> 10 & 1023);
                w3 = 56320 + (w3 & 1023);
                mdb[k2++] = ww & 255;
                mdb[k2++] = ww >>> 8;
                mdb[k2++] = w3 & 255;
                mdb[k2++] = w3 >>> 8 & 255;
              }
            }
            return mdb.slice(0, k2).toString("ucs2");
          };
          magic_encode[65001] = function utf8_e(data, ofmt) {
            if (has_buf && Buffer.isBuffer(data)) {
              if (!ofmt || ofmt === "buf")
                return data;
              if (ofmt !== "arr")
                return data.toString("binary");
              return [].slice.call(data);
            }
            var len = data.length, w3 = 0, ww = 0, j3 = 0;
            var direct = typeof data === "string";
            if (4 * len > mdl) {
              mdl = 4 * len;
              mdb = Buffer.allocUnsafe(mdl);
            }
            for (var i6 = 0; i6 < len; ++i6) {
              w3 = direct ? data.charCodeAt(i6) : data[i6].charCodeAt(0);
              if (w3 <= 127)
                mdb[j3++] = w3;
              else if (w3 <= 2047) {
                mdb[j3++] = 192 + (w3 >> 6);
                mdb[j3++] = 128 + (w3 & 63);
              } else if (w3 >= 55296 && w3 <= 57343) {
                w3 -= 55296;
                ++i6;
                ww = (direct ? data.charCodeAt(i6) : data[i6].charCodeAt(0)) - 56320 + (w3 << 10);
                mdb[j3++] = 240 + (ww >>> 18 & 7);
                mdb[j3++] = 144 + (ww >>> 12 & 63);
                mdb[j3++] = 128 + (ww >>> 6 & 63);
                mdb[j3++] = 128 + (ww & 63);
              } else {
                mdb[j3++] = 224 + (w3 >> 12);
                mdb[j3++] = 128 + (w3 >> 6 & 63);
                mdb[j3++] = 128 + (w3 & 63);
              }
            }
            if (!ofmt || ofmt === "buf")
              return mdb.slice(0, j3);
            if (ofmt !== "arr")
              return mdb.slice(0, j3).toString("binary");
            return [].slice.call(mdb, 0, j3);
          };
        }
        var encache = function encache2() {
          if (has_buf) {
            if (cpdcache[sbcs_cache[0]])
              return;
            var i6 = 0, s3 = 0;
            for (i6 = 0; i6 < sbcs_cache.length; ++i6) {
              s3 = sbcs_cache[i6];
              if (cpt[s3]) {
                cpdcache[s3] = sbcs_decode(s3);
                cpecache[s3] = sbcs_encode(s3);
              }
            }
            for (i6 = 0; i6 < dbcs_cache.length; ++i6) {
              s3 = dbcs_cache[i6];
              if (cpt[s3]) {
                cpdcache[s3] = dbcs_decode(s3);
                cpecache[s3] = dbcs_encode(s3);
              }
            }
            for (i6 = 0; i6 < magic_cache.length; ++i6) {
              s3 = magic_cache[i6];
              if (magic_decode[s3])
                cpdcache[s3] = magic_decode[s3];
              if (magic_encode[s3])
                cpecache[s3] = magic_encode[s3];
            }
          }
        };
        var null_enc = function(data, ofmt) {
          return "";
        };
        var cp_decache = function cp_decache2(cp) {
          delete cpdcache[cp];
          delete cpecache[cp];
        };
        var decache = function decache2() {
          if (has_buf) {
            if (!cpdcache[sbcs_cache[0]])
              return;
            sbcs_cache.forEach(cp_decache);
            dbcs_cache.forEach(cp_decache);
            magic_cache.forEach(cp_decache);
          }
          last_enc = null_enc;
          last_cp = 0;
        };
        var cache = {
          encache,
          decache,
          sbcs: sbcs_cache,
          dbcs: dbcs_cache
        };
        encache();
        var BM = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
        var SetD = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789'(),-./:?";
        var last_enc = null_enc, last_cp = 0;
        var encode = function encode2(cp, data, ofmt) {
          if (cp === last_cp && last_enc) {
            return last_enc(data, ofmt);
          }
          if (cpecache[cp]) {
            last_enc = cpecache[last_cp = cp];
            return last_enc(data, ofmt);
          }
          if (has_buf && Buffer.isBuffer(data))
            data = data.toString("utf8");
          var len = data.length;
          var out = has_buf ? Buffer.allocUnsafe(4 * len) : [], w3 = 0, i6 = 0, j3 = 0, ww = 0;
          var C6 = cpt[cp], E6, M3 = "";
          var isstr = typeof data === "string";
          if (C6 && (E6 = C6.enc))
            for (i6 = 0; i6 < len; ++i6, ++j3) {
              w3 = E6[isstr ? data.charAt(i6) : data[i6]];
              if (w3 > 255) {
                out[j3] = w3 >> 8;
                out[++j3] = w3 & 255;
              } else
                out[j3] = w3 & 255;
            }
          else if (M3 = magic[cp])
            switch (M3) {
              case "utf8":
                if (has_buf && isstr) {
                  out = Buffer_from(data, M3);
                  j3 = out.length;
                  break;
                }
                for (i6 = 0; i6 < len; ++i6, ++j3) {
                  w3 = isstr ? data.charCodeAt(i6) : data[i6].charCodeAt(0);
                  if (w3 <= 127)
                    out[j3] = w3;
                  else if (w3 <= 2047) {
                    out[j3] = 192 + (w3 >> 6);
                    out[++j3] = 128 + (w3 & 63);
                  } else if (w3 >= 55296 && w3 <= 57343) {
                    w3 -= 55296;
                    ww = (isstr ? data.charCodeAt(++i6) : data[++i6].charCodeAt(0)) - 56320 + (w3 << 10);
                    out[j3] = 240 + (ww >>> 18 & 7);
                    out[++j3] = 144 + (ww >>> 12 & 63);
                    out[++j3] = 128 + (ww >>> 6 & 63);
                    out[++j3] = 128 + (ww & 63);
                  } else {
                    out[j3] = 224 + (w3 >> 12);
                    out[++j3] = 128 + (w3 >> 6 & 63);
                    out[++j3] = 128 + (w3 & 63);
                  }
                }
                break;
              case "ascii":
                if (has_buf && typeof data === "string") {
                  out = Buffer_from(data, M3);
                  j3 = out.length;
                  break;
                }
                for (i6 = 0; i6 < len; ++i6, ++j3) {
                  w3 = isstr ? data.charCodeAt(i6) : data[i6].charCodeAt(0);
                  if (w3 <= 127)
                    out[j3] = w3;
                  else
                    throw new Error("bad ascii " + w3);
                }
                break;
              case "utf16le":
                if (has_buf && typeof data === "string") {
                  out = Buffer_from(data, M3);
                  j3 = out.length;
                  break;
                }
                for (i6 = 0; i6 < len; ++i6) {
                  w3 = isstr ? data.charCodeAt(i6) : data[i6].charCodeAt(0);
                  out[j3++] = w3 & 255;
                  out[j3++] = w3 >> 8;
                }
                break;
              case "utf16be":
                for (i6 = 0; i6 < len; ++i6) {
                  w3 = isstr ? data.charCodeAt(i6) : data[i6].charCodeAt(0);
                  out[j3++] = w3 >> 8;
                  out[j3++] = w3 & 255;
                }
                break;
              case "utf32le":
                for (i6 = 0; i6 < len; ++i6) {
                  w3 = isstr ? data.charCodeAt(i6) : data[i6].charCodeAt(0);
                  if (w3 >= 55296 && w3 <= 57343)
                    w3 = 65536 + (w3 - 55296 << 10) + (data[++i6].charCodeAt(0) - 56320);
                  out[j3++] = w3 & 255;
                  w3 >>= 8;
                  out[j3++] = w3 & 255;
                  w3 >>= 8;
                  out[j3++] = w3 & 255;
                  w3 >>= 8;
                  out[j3++] = w3 & 255;
                }
                break;
              case "utf32be":
                for (i6 = 0; i6 < len; ++i6) {
                  w3 = isstr ? data.charCodeAt(i6) : data[i6].charCodeAt(0);
                  if (w3 >= 55296 && w3 <= 57343)
                    w3 = 65536 + (w3 - 55296 << 10) + (data[++i6].charCodeAt(0) - 56320);
                  out[j3 + 3] = w3 & 255;
                  w3 >>= 8;
                  out[j3 + 2] = w3 & 255;
                  w3 >>= 8;
                  out[j3 + 1] = w3 & 255;
                  w3 >>= 8;
                  out[j3] = w3 & 255;
                  j3 += 4;
                }
                break;
              case "utf7":
                for (i6 = 0; i6 < len; i6++) {
                  var c8 = isstr ? data.charAt(i6) : data[i6].charAt(0);
                  if (c8 === "+") {
                    out[j3++] = 43;
                    out[j3++] = 45;
                    continue;
                  }
                  if (SetD.indexOf(c8) > -1) {
                    out[j3++] = c8.charCodeAt(0);
                    continue;
                  }
                  var tt2 = encode2(1201, c8);
                  out[j3++] = 43;
                  out[j3++] = BM.charCodeAt(tt2[0] >> 2);
                  out[j3++] = BM.charCodeAt(((tt2[0] & 3) << 4) + ((tt2[1] || 0) >> 4));
                  out[j3++] = BM.charCodeAt(((tt2[1] & 15) << 2) + ((tt2[2] || 0) >> 6));
                  out[j3++] = 45;
                }
                break;
              default:
                throw new Error("Unsupported magic: " + cp + " " + magic[cp]);
            }
          else
            throw new Error("Unrecognized CP: " + cp);
          out = out.slice(0, j3);
          if (!has_buf)
            return ofmt == "str" ? out.map(sfcc).join("") : out;
          if (!ofmt || ofmt === "buf")
            return out;
          if (ofmt !== "arr")
            return out.toString("binary");
          return [].slice.call(out);
        };
        var decode = function decode2(cp, data) {
          var F3;
          if (F3 = cpdcache[cp])
            return F3(data);
          if (typeof data === "string")
            return decode2(cp, data.split("").map(cca));
          var len = data.length, out = new Array(len), s3 = "", w3 = 0, i6 = 0, j3 = 1, k2 = 0, ww = 0;
          var C6 = cpt[cp], D5, M3 = "";
          if (C6 && (D5 = C6.dec)) {
            for (i6 = 0; i6 < len; i6 += j3) {
              j3 = 2;
              s3 = D5[(data[i6] << 8) + data[i6 + 1]];
              if (!s3) {
                j3 = 1;
                s3 = D5[data[i6]];
              }
              if (!s3)
                throw new Error("Unrecognized code: " + data[i6] + " " + data[i6 + j3 - 1] + " " + i6 + " " + j3 + " " + D5[data[i6]]);
              out[k2++] = s3;
            }
          } else if (M3 = magic[cp])
            switch (M3) {
              case "utf8":
                if (len >= 3 && data[0] == 239) {
                  if (data[1] == 187 && data[2] == 191)
                    i6 = 3;
                }
                for (; i6 < len; i6 += j3) {
                  j3 = 1;
                  if (data[i6] < 128)
                    w3 = data[i6];
                  else if (data[i6] < 224) {
                    w3 = (data[i6] & 31) * 64 + (data[i6 + 1] & 63);
                    j3 = 2;
                  } else if (data[i6] < 240) {
                    w3 = ((data[i6] & 15) << 12) + (data[i6 + 1] & 63) * 64 + (data[i6 + 2] & 63);
                    j3 = 3;
                  } else {
                    w3 = (data[i6] & 7) * 262144 + ((data[i6 + 1] & 63) << 12) + (data[i6 + 2] & 63) * 64 + (data[i6 + 3] & 63);
                    j3 = 4;
                  }
                  if (w3 < 65536) {
                    out[k2++] = String.fromCharCode(w3);
                  } else {
                    w3 -= 65536;
                    ww = 55296 + (w3 >> 10 & 1023);
                    w3 = 56320 + (w3 & 1023);
                    out[k2++] = String.fromCharCode(ww);
                    out[k2++] = String.fromCharCode(w3);
                  }
                }
                break;
              case "ascii":
                if (has_buf && Buffer.isBuffer(data))
                  return data.toString(M3);
                for (i6 = 0; i6 < len; i6++)
                  out[i6] = String.fromCharCode(data[i6]);
                k2 = len;
                break;
              case "utf16le":
                if (len >= 2 && data[0] == 255) {
                  if (data[1] == 254)
                    i6 = 2;
                }
                if (has_buf && Buffer.isBuffer(data))
                  return data.toString(M3);
                j3 = 2;
                for (; i6 + 1 < len; i6 += j3) {
                  out[k2++] = String.fromCharCode((data[i6 + 1] << 8) + data[i6]);
                }
                break;
              case "utf16be":
                if (len >= 2 && data[0] == 254) {
                  if (data[1] == 255)
                    i6 = 2;
                }
                j3 = 2;
                for (; i6 + 1 < len; i6 += j3) {
                  out[k2++] = String.fromCharCode((data[i6] << 8) + data[i6 + 1]);
                }
                break;
              case "utf32le":
                if (len >= 4 && data[0] == 255) {
                  if (data[1] == 254 && data[2] === 0 && data[3] === 0)
                    i6 = 4;
                }
                j3 = 4;
                for (; i6 < len; i6 += j3) {
                  w3 = (data[i6 + 3] << 24) + (data[i6 + 2] << 16) + (data[i6 + 1] << 8) + data[i6];
                  if (w3 > 65535) {
                    w3 -= 65536;
                    out[k2++] = String.fromCharCode(55296 + (w3 >> 10 & 1023));
                    out[k2++] = String.fromCharCode(56320 + (w3 & 1023));
                  } else
                    out[k2++] = String.fromCharCode(w3);
                }
                break;
              case "utf32be":
                if (len >= 4 && data[3] == 255) {
                  if (data[2] == 254 && data[1] === 0 && data[0] === 0)
                    i6 = 4;
                }
                j3 = 4;
                for (; i6 < len; i6 += j3) {
                  w3 = (data[i6] << 24) + (data[i6 + 1] << 16) + (data[i6 + 2] << 8) + data[i6 + 3];
                  if (w3 > 65535) {
                    w3 -= 65536;
                    out[k2++] = String.fromCharCode(55296 + (w3 >> 10 & 1023));
                    out[k2++] = String.fromCharCode(56320 + (w3 & 1023));
                  } else
                    out[k2++] = String.fromCharCode(w3);
                }
                break;
              case "utf7":
                if (len >= 4 && data[0] == 43 && data[1] == 47 && data[2] == 118) {
                  if (len >= 5 && data[3] == 56 && data[4] == 45)
                    i6 = 5;
                  else if (data[3] == 56 || data[3] == 57 || data[3] == 43 || data[3] == 47)
                    i6 = 4;
                }
                for (; i6 < len; i6 += j3) {
                  if (data[i6] !== 43) {
                    j3 = 1;
                    out[k2++] = String.fromCharCode(data[i6]);
                    continue;
                  }
                  j3 = 1;
                  if (data[i6 + 1] === 45) {
                    j3 = 2;
                    out[k2++] = "+";
                    continue;
                  }
                  while (String.fromCharCode(data[i6 + j3]).match(/[A-Za-z0-9+\/]/))
                    j3++;
                  var dash = 0;
                  if (data[i6 + j3] === 45) {
                    ++j3;
                    dash = 1;
                  }
                  var tt2 = [];
                  var o64 = "";
                  var c12 = 0, c22 = 0, c32 = 0;
                  var e1 = 0, e23 = 0, e32 = 0, e42 = 0;
                  for (var l5 = 1; l5 < j3 - dash; ) {
                    e1 = BM.indexOf(String.fromCharCode(data[i6 + l5++]));
                    e23 = BM.indexOf(String.fromCharCode(data[i6 + l5++]));
                    c12 = e1 << 2 | e23 >> 4;
                    tt2.push(c12);
                    e32 = BM.indexOf(String.fromCharCode(data[i6 + l5++]));
                    if (e32 === -1)
                      break;
                    c22 = (e23 & 15) << 4 | e32 >> 2;
                    tt2.push(c22);
                    e42 = BM.indexOf(String.fromCharCode(data[i6 + l5++]));
                    if (e42 === -1)
                      break;
                    c32 = (e32 & 3) << 6 | e42;
                    if (e42 < 64)
                      tt2.push(c32);
                  }
                  o64 = decode2(1201, tt2);
                  for (l5 = 0; l5 < o64.length; ++l5)
                    out[k2++] = o64.charAt(l5);
                }
                break;
              default:
                throw new Error("Unsupported magic: " + cp + " " + magic[cp]);
            }
          else
            throw new Error("Unrecognized CP: " + cp);
          return out.slice(0, k2).join("");
        };
        var hascp = function hascp2(cp) {
          return !!(cpt[cp] || magic[cp]);
        };
        cpt.utils = { decode, encode, hascp, magic, cache };
        return cpt;
      });
    }
  });

  // (disabled):stream
  var require_stream = __commonJS({
    "(disabled):stream"() {
    }
  });

  // (disabled):fs
  var require_fs = __commonJS({
    "(disabled):fs"() {
    }
  });

  // node_modules/@e965/xlsx/xlsx.js
  var require_xlsx = __commonJS({
    "node_modules/@e965/xlsx/xlsx.js"(exports, module) {
      var XLSX = {};
      function make_xlsx_lib(XLSX2) {
        XLSX2.version = "0.20.3";
        var current_codepage = 1200, current_ansi = 1252;
        var $cptable;
        var VALID_ANSI = [874, 932, 936, 949, 950, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1e4];
        var CS2CP = {
          0: 1252,
          1: 65001,
          2: 65001,
          77: 1e4,
          128: 932,
          129: 949,
          130: 1361,
          134: 936,
          136: 950,
          161: 1253,
          162: 1254,
          163: 1258,
          177: 1255,
          178: 1256,
          186: 1257,
          204: 1251,
          222: 874,
          238: 1250,
          255: 1252,
          69: 6969
        };
        var set_ansi = function(cp) {
          if (VALID_ANSI.indexOf(cp) == -1)
            return;
          current_ansi = CS2CP[0] = cp;
        };
        function reset_ansi() {
          set_ansi(1252);
        }
        var set_cp = function(cp) {
          current_codepage = cp;
          set_ansi(cp);
        };
        function reset_cp() {
          set_cp(1200);
          reset_ansi();
        }
        function char_codes(data) {
          var o6 = [];
          for (var i6 = 0, len = data.length; i6 < len; ++i6)
            o6[i6] = data.charCodeAt(i6);
          return o6;
        }
        function utf16leread(data) {
          var o6 = [];
          for (var i6 = 0; i6 < data.length >> 1; ++i6)
            o6[i6] = String.fromCharCode(data.charCodeAt(2 * i6) + (data.charCodeAt(2 * i6 + 1) << 8));
          return o6.join("");
        }
        function utf16lereadu(data) {
          var o6 = [];
          for (var i6 = 0; i6 < data.length >> 1; ++i6)
            o6[i6] = String.fromCharCode(data[2 * i6] + (data[2 * i6 + 1] << 8));
          return o6.join("");
        }
        function utf16beread(data) {
          var o6 = [];
          for (var i6 = 0; i6 < data.length >> 1; ++i6)
            o6[i6] = String.fromCharCode(data.charCodeAt(2 * i6 + 1) + (data.charCodeAt(2 * i6) << 8));
          return o6.join("");
        }
        var debom = function(data) {
          var c12 = data.charCodeAt(0), c22 = data.charCodeAt(1);
          if (c12 == 255 && c22 == 254)
            return utf16leread(data.slice(2));
          if (c12 == 254 && c22 == 255)
            return utf16beread(data.slice(2));
          if (c12 == 65279)
            return data.slice(1);
          return data;
        };
        var _getchar = function _gc1(x3) {
          return String.fromCharCode(x3);
        };
        var _getansi = function _ga1(x3) {
          return String.fromCharCode(x3);
        };
        function set_cptable(cptable2) {
          $cptable = cptable2;
          set_cp = function(cp) {
            current_codepage = cp;
            set_ansi(cp);
          };
          debom = function(data) {
            if (data.charCodeAt(0) === 255 && data.charCodeAt(1) === 254) {
              return $cptable.utils.decode(1200, char_codes(data.slice(2)));
            }
            return data;
          };
          _getchar = function _gc2(x3) {
            if (current_codepage === 1200)
              return String.fromCharCode(x3);
            return $cptable.utils.decode(current_codepage, [x3 & 255, x3 >> 8])[0];
          };
          _getansi = function _ga2(x3) {
            return $cptable.utils.decode(current_ansi, [x3])[0];
          };
          cpdoit();
        }
        var DENSE = null;
        var DIF_XL = true;
        var Base64_map = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";
        function Base64_encode(input) {
          var o6 = "";
          var c12 = 0, c22 = 0, c32 = 0, e1 = 0, e23 = 0, e32 = 0, e42 = 0;
          for (var i6 = 0; i6 < input.length; ) {
            c12 = input.charCodeAt(i6++);
            e1 = c12 >> 2;
            c22 = input.charCodeAt(i6++);
            e23 = (c12 & 3) << 4 | c22 >> 4;
            c32 = input.charCodeAt(i6++);
            e32 = (c22 & 15) << 2 | c32 >> 6;
            e42 = c32 & 63;
            if (isNaN(c22)) {
              e32 = e42 = 64;
            } else if (isNaN(c32)) {
              e42 = 64;
            }
            o6 += Base64_map.charAt(e1) + Base64_map.charAt(e23) + Base64_map.charAt(e32) + Base64_map.charAt(e42);
          }
          return o6;
        }
        function Base64_encode_pass(input) {
          var o6 = "";
          var c12 = 0, c22 = 0, c32 = 0, e1 = 0, e23 = 0, e32 = 0, e42 = 0;
          for (var i6 = 0; i6 < input.length; ) {
            c12 = input.charCodeAt(i6++);
            if (c12 > 255)
              c12 = 95;
            e1 = c12 >> 2;
            c22 = input.charCodeAt(i6++);
            if (c22 > 255)
              c22 = 95;
            e23 = (c12 & 3) << 4 | c22 >> 4;
            c32 = input.charCodeAt(i6++);
            if (c32 > 255)
              c32 = 95;
            e32 = (c22 & 15) << 2 | c32 >> 6;
            e42 = c32 & 63;
            if (isNaN(c22)) {
              e32 = e42 = 64;
            } else if (isNaN(c32)) {
              e42 = 64;
            }
            o6 += Base64_map.charAt(e1) + Base64_map.charAt(e23) + Base64_map.charAt(e32) + Base64_map.charAt(e42);
          }
          return o6;
        }
        function Base64_encode_arr(input) {
          var o6 = "";
          var c12 = 0, c22 = 0, c32 = 0, e1 = 0, e23 = 0, e32 = 0, e42 = 0;
          for (var i6 = 0; i6 < input.length; ) {
            c12 = input[i6++];
            e1 = c12 >> 2;
            c22 = input[i6++];
            e23 = (c12 & 3) << 4 | c22 >> 4;
            c32 = input[i6++];
            e32 = (c22 & 15) << 2 | c32 >> 6;
            e42 = c32 & 63;
            if (isNaN(c22)) {
              e32 = e42 = 64;
            } else if (isNaN(c32)) {
              e42 = 64;
            }
            o6 += Base64_map.charAt(e1) + Base64_map.charAt(e23) + Base64_map.charAt(e32) + Base64_map.charAt(e42);
          }
          return o6;
        }
        function Base64_decode(input) {
          var o6 = "";
          var c12 = 0, c22 = 0, c32 = 0, e1 = 0, e23 = 0, e32 = 0, e42 = 0;
          if (input.slice(0, 5) == "data:") {
            var i6 = input.slice(0, 1024).indexOf(";base64,");
            if (i6 > -1)
              input = input.slice(i6 + 8);
          }
          input = input.replace(/[^\w\+\/\=]/g, "");
          for (var i6 = 0; i6 < input.length; ) {
            e1 = Base64_map.indexOf(input.charAt(i6++));
            e23 = Base64_map.indexOf(input.charAt(i6++));
            c12 = e1 << 2 | e23 >> 4;
            o6 += String.fromCharCode(c12);
            e32 = Base64_map.indexOf(input.charAt(i6++));
            c22 = (e23 & 15) << 4 | e32 >> 2;
            if (e32 !== 64) {
              o6 += String.fromCharCode(c22);
            }
            e42 = Base64_map.indexOf(input.charAt(i6++));
            c32 = (e32 & 3) << 6 | e42;
            if (e42 !== 64) {
              o6 += String.fromCharCode(c32);
            }
          }
          return o6;
        }
        var has_buf = function() {
          return typeof Buffer !== "undefined" && typeof process !== "undefined" && typeof process.versions !== "undefined" && !!process.versions.node;
        }();
        var Buffer_from = function() {
          if (typeof Buffer !== "undefined") {
            var nbfs = !Buffer.from;
            if (!nbfs)
              try {
                Buffer.from("foo", "utf8");
              } catch (e7) {
                nbfs = true;
              }
            return nbfs ? function(buf, enc) {
              return enc ? new Buffer(buf, enc) : new Buffer(buf);
            } : Buffer.from.bind(Buffer);
          }
          return function() {
          };
        }();
        var buf_utf16le = function() {
          if (typeof Buffer === "undefined")
            return false;
          var x3 = Buffer_from([65, 0]);
          if (!x3)
            return false;
          var o6 = x3.toString("utf16le");
          return o6.length == 1;
        }();
        function new_raw_buf(len) {
          if (has_buf)
            return Buffer.alloc ? Buffer.alloc(len) : new Buffer(len);
          return typeof Uint8Array != "undefined" ? new Uint8Array(len) : new Array(len);
        }
        function new_unsafe_buf(len) {
          if (has_buf)
            return Buffer.allocUnsafe ? Buffer.allocUnsafe(len) : new Buffer(len);
          return typeof Uint8Array != "undefined" ? new Uint8Array(len) : new Array(len);
        }
        var s2a = function s2a2(s3) {
          if (has_buf)
            return Buffer_from(s3, "binary");
          return s3.split("").map(function(x3) {
            return x3.charCodeAt(0) & 255;
          });
        };
        function s2ab(s3) {
          if (typeof ArrayBuffer === "undefined")
            return s2a(s3);
          var buf = new ArrayBuffer(s3.length), view = new Uint8Array(buf);
          for (var i6 = 0; i6 != s3.length; ++i6)
            view[i6] = s3.charCodeAt(i6) & 255;
          return buf;
        }
        function a2s(data) {
          if (Array.isArray(data))
            return data.map(function(c8) {
              return String.fromCharCode(c8);
            }).join("");
          var o6 = [];
          for (var i6 = 0; i6 < data.length; ++i6)
            o6[i6] = String.fromCharCode(data[i6]);
          return o6.join("");
        }
        function a2u(data) {
          if (typeof Uint8Array === "undefined")
            throw new Error("Unsupported");
          return new Uint8Array(data);
        }
        function ab2a(data) {
          if (typeof ArrayBuffer == "undefined")
            throw new Error("Unsupported");
          if (data instanceof ArrayBuffer)
            return ab2a(new Uint8Array(data));
          var o6 = new Array(data.length);
          for (var i6 = 0; i6 < data.length; ++i6)
            o6[i6] = data[i6];
          return o6;
        }
        var bconcat = has_buf ? function(bufs) {
          return Buffer.concat(bufs.map(function(buf) {
            return Buffer.isBuffer(buf) ? buf : Buffer_from(buf);
          }));
        } : function(bufs) {
          if (typeof Uint8Array !== "undefined") {
            var i6 = 0, maxlen = 0;
            for (i6 = 0; i6 < bufs.length; ++i6)
              maxlen += bufs[i6].length;
            var o6 = new Uint8Array(maxlen);
            var len = 0;
            for (i6 = 0, maxlen = 0; i6 < bufs.length; maxlen += len, ++i6) {
              len = bufs[i6].length;
              if (bufs[i6] instanceof Uint8Array)
                o6.set(bufs[i6], maxlen);
              else if (typeof bufs[i6] == "string")
                o6.set(new Uint8Array(s2a(bufs[i6])), maxlen);
              else
                o6.set(new Uint8Array(bufs[i6]), maxlen);
            }
            return o6;
          }
          return [].concat.apply([], bufs.map(function(buf) {
            return Array.isArray(buf) ? buf : [].slice.call(buf);
          }));
        };
        function utf8decode(content2) {
          var out = [], widx = 0, L2 = content2.length + 250;
          var o6 = new_raw_buf(content2.length + 255);
          for (var ridx = 0; ridx < content2.length; ++ridx) {
            var c8 = content2.charCodeAt(ridx);
            if (c8 < 128)
              o6[widx++] = c8;
            else if (c8 < 2048) {
              o6[widx++] = 192 | c8 >> 6 & 31;
              o6[widx++] = 128 | c8 & 63;
            } else if (c8 >= 55296 && c8 < 57344) {
              c8 = (c8 & 1023) + 64;
              var d2 = content2.charCodeAt(++ridx) & 1023;
              o6[widx++] = 240 | c8 >> 8 & 7;
              o6[widx++] = 128 | c8 >> 2 & 63;
              o6[widx++] = 128 | d2 >> 6 & 15 | (c8 & 3) << 4;
              o6[widx++] = 128 | d2 & 63;
            } else {
              o6[widx++] = 224 | c8 >> 12 & 15;
              o6[widx++] = 128 | c8 >> 6 & 63;
              o6[widx++] = 128 | c8 & 63;
            }
            if (widx > L2) {
              out.push(o6.slice(0, widx));
              widx = 0;
              o6 = new_raw_buf(65535);
              L2 = 65530;
            }
          }
          out.push(o6.slice(0, widx));
          return bconcat(out);
        }
        var chr0 = /\u0000/g, chr1 = /[\u0001-\u0006]/g;
        function _strrev(x3) {
          var o6 = "", i6 = x3.length - 1;
          while (i6 >= 0)
            o6 += x3.charAt(i6--);
          return o6;
        }
        function pad0(v4, d2) {
          var t5 = "" + v4;
          return t5.length >= d2 ? t5 : fill("0", d2 - t5.length) + t5;
        }
        function pad_(v4, d2) {
          var t5 = "" + v4;
          return t5.length >= d2 ? t5 : fill(" ", d2 - t5.length) + t5;
        }
        function rpad_(v4, d2) {
          var t5 = "" + v4;
          return t5.length >= d2 ? t5 : t5 + fill(" ", d2 - t5.length);
        }
        function pad0r1(v4, d2) {
          var t5 = "" + Math.round(v4);
          return t5.length >= d2 ? t5 : fill("0", d2 - t5.length) + t5;
        }
        function pad0r2(v4, d2) {
          var t5 = "" + v4;
          return t5.length >= d2 ? t5 : fill("0", d2 - t5.length) + t5;
        }
        var p2_32 = Math.pow(2, 32);
        function pad0r(v4, d2) {
          if (v4 > p2_32 || v4 < -p2_32)
            return pad0r1(v4, d2);
          var i6 = Math.round(v4);
          return pad0r2(i6, d2);
        }
        function SSF_isgeneral(s3, i6) {
          i6 = i6 || 0;
          return s3.length >= 7 + i6 && (s3.charCodeAt(i6) | 32) === 103 && (s3.charCodeAt(i6 + 1) | 32) === 101 && (s3.charCodeAt(i6 + 2) | 32) === 110 && (s3.charCodeAt(i6 + 3) | 32) === 101 && (s3.charCodeAt(i6 + 4) | 32) === 114 && (s3.charCodeAt(i6 + 5) | 32) === 97 && (s3.charCodeAt(i6 + 6) | 32) === 108;
        }
        var days2 = [
          ["Sun", "Sunday"],
          ["Mon", "Monday"],
          ["Tue", "Tuesday"],
          ["Wed", "Wednesday"],
          ["Thu", "Thursday"],
          ["Fri", "Friday"],
          ["Sat", "Saturday"]
        ];
        var months = [
          ["J", "Jan", "January"],
          ["F", "Feb", "February"],
          ["M", "Mar", "March"],
          ["A", "Apr", "April"],
          ["M", "May", "May"],
          ["J", "Jun", "June"],
          ["J", "Jul", "July"],
          ["A", "Aug", "August"],
          ["S", "Sep", "September"],
          ["O", "Oct", "October"],
          ["N", "Nov", "November"],
          ["D", "Dec", "December"]
        ];
        function SSF_init_table(t5) {
          if (!t5)
            t5 = {};
          t5[0] = "General";
          t5[1] = "0";
          t5[2] = "0.00";
          t5[3] = "#,##0";
          t5[4] = "#,##0.00";
          t5[9] = "0%";
          t5[10] = "0.00%";
          t5[11] = "0.00E+00";
          t5[12] = "# ?/?";
          t5[13] = "# ??/??";
          t5[14] = "m/d/yy";
          t5[15] = "d-mmm-yy";
          t5[16] = "d-mmm";
          t5[17] = "mmm-yy";
          t5[18] = "h:mm AM/PM";
          t5[19] = "h:mm:ss AM/PM";
          t5[20] = "h:mm";
          t5[21] = "h:mm:ss";
          t5[22] = "m/d/yy h:mm";
          t5[37] = "#,##0 ;(#,##0)";
          t5[38] = "#,##0 ;[Red](#,##0)";
          t5[39] = "#,##0.00;(#,##0.00)";
          t5[40] = "#,##0.00;[Red](#,##0.00)";
          t5[45] = "mm:ss";
          t5[46] = "[h]:mm:ss";
          t5[47] = "mmss.0";
          t5[48] = "##0.0E+0";
          t5[49] = "@";
          t5[56] = '"\u4E0A\u5348/\u4E0B\u5348 "hh"\u6642"mm"\u5206"ss"\u79D2 "';
          return t5;
        }
        var table_fmt = {
          0: "General",
          1: "0",
          2: "0.00",
          3: "#,##0",
          4: "#,##0.00",
          9: "0%",
          10: "0.00%",
          11: "0.00E+00",
          12: "# ?/?",
          13: "# ??/??",
          14: "m/d/yy",
          15: "d-mmm-yy",
          16: "d-mmm",
          17: "mmm-yy",
          18: "h:mm AM/PM",
          19: "h:mm:ss AM/PM",
          20: "h:mm",
          21: "h:mm:ss",
          22: "m/d/yy h:mm",
          37: "#,##0 ;(#,##0)",
          38: "#,##0 ;[Red](#,##0)",
          39: "#,##0.00;(#,##0.00)",
          40: "#,##0.00;[Red](#,##0.00)",
          45: "mm:ss",
          46: "[h]:mm:ss",
          47: "mmss.0",
          48: "##0.0E+0",
          49: "@",
          56: '"\u4E0A\u5348/\u4E0B\u5348 "hh"\u6642"mm"\u5206"ss"\u79D2 "'
        };
        var SSF_default_map = {
          5: 37,
          6: 38,
          7: 39,
          8: 40,
          23: 0,
          24: 0,
          25: 0,
          26: 0,
          27: 14,
          28: 14,
          29: 14,
          30: 14,
          31: 14,
          50: 14,
          51: 14,
          52: 14,
          53: 14,
          54: 14,
          55: 14,
          56: 14,
          57: 14,
          58: 14,
          59: 1,
          60: 2,
          61: 3,
          62: 4,
          67: 9,
          68: 10,
          69: 12,
          70: 13,
          71: 14,
          72: 14,
          73: 15,
          74: 16,
          75: 17,
          76: 20,
          77: 21,
          78: 22,
          79: 45,
          80: 46,
          81: 47,
          82: 0
        };
        var SSF_default_str = {
          5: '"$"#,##0_);\\("$"#,##0\\)',
          63: '"$"#,##0_);\\("$"#,##0\\)',
          6: '"$"#,##0_);[Red]\\("$"#,##0\\)',
          64: '"$"#,##0_);[Red]\\("$"#,##0\\)',
          7: '"$"#,##0.00_);\\("$"#,##0.00\\)',
          65: '"$"#,##0.00_);\\("$"#,##0.00\\)',
          8: '"$"#,##0.00_);[Red]\\("$"#,##0.00\\)',
          66: '"$"#,##0.00_);[Red]\\("$"#,##0.00\\)',
          41: '_(* #,##0_);_(* \\(#,##0\\);_(* "-"_);_(@_)',
          42: '_("$"* #,##0_);_("$"* \\(#,##0\\);_("$"* "-"_);_(@_)',
          43: '_(* #,##0.00_);_(* \\(#,##0.00\\);_(* "-"??_);_(@_)',
          44: '_("$"* #,##0.00_);_("$"* \\(#,##0.00\\);_("$"* "-"??_);_(@_)'
        };
        function SSF_frac(x3, D5, mixed) {
          var sgn = x3 < 0 ? -1 : 1;
          var B5 = x3 * sgn;
          var P_2 = 0, P_1 = 1, P3 = 0;
          var Q_2 = 1, Q_1 = 0, Q2 = 0;
          var A4 = Math.floor(B5);
          while (Q_1 < D5) {
            A4 = Math.floor(B5);
            P3 = A4 * P_1 + P_2;
            Q2 = A4 * Q_1 + Q_2;
            if (B5 - A4 < 5e-8)
              break;
            B5 = 1 / (B5 - A4);
            P_2 = P_1;
            P_1 = P3;
            Q_2 = Q_1;
            Q_1 = Q2;
          }
          if (Q2 > D5) {
            if (Q_1 > D5) {
              Q2 = Q_2;
              P3 = P_2;
            } else {
              Q2 = Q_1;
              P3 = P_1;
            }
          }
          if (!mixed)
            return [0, sgn * P3, Q2];
          var q3 = Math.floor(sgn * P3 / Q2);
          return [q3, sgn * P3 - q3 * Q2, Q2];
        }
        function SSF_normalize_xl_unsafe(v4) {
          var s3 = v4.toPrecision(16);
          if (s3.indexOf("e") > -1) {
            var m4 = s3.slice(0, s3.indexOf("e"));
            m4 = m4.indexOf(".") > -1 ? m4.slice(0, m4.slice(0, 2) == "0." ? 17 : 16) : m4.slice(0, 15) + fill("0", m4.length - 15);
            return m4 + s3.slice(s3.indexOf("e"));
          }
          var n6 = s3.indexOf(".") > -1 ? s3.slice(0, s3.slice(0, 2) == "0." ? 17 : 16) : s3.slice(0, 15) + fill("0", s3.length - 15);
          return Number(n6);
        }
        function SSF_parse_date_code(v4, opts, b22) {
          if (v4 > 2958465 || v4 < 0)
            return null;
          v4 = SSF_normalize_xl_unsafe(v4);
          var date = v4 | 0, time = Math.floor(86400 * (v4 - date)), dow = 0;
          var dout = [];
          var out = { D: date, T: time, u: 86400 * (v4 - date) - time, y: 0, m: 0, d: 0, H: 0, M: 0, S: 0, q: 0 };
          if (Math.abs(out.u) < 1e-6)
            out.u = 0;
          if (opts && opts.date1904)
            date += 1462;
          if (out.u > 0.9999) {
            out.u = 0;
            if (++time == 86400) {
              out.T = time = 0;
              ++date;
              ++out.D;
            }
          }
          if (date === 60) {
            dout = b22 ? [1317, 10, 29] : [1900, 2, 29];
            dow = 3;
          } else if (date === 0) {
            dout = b22 ? [1317, 8, 29] : [1900, 1, 0];
            dow = 6;
          } else {
            if (date > 60)
              --date;
            var d2 = new Date(1900, 0, 1);
            d2.setDate(d2.getDate() + date - 1);
            dout = [d2.getFullYear(), d2.getMonth() + 1, d2.getDate()];
            dow = d2.getDay();
            if (date < 60)
              dow = (dow + 6) % 7;
            if (b22)
              dow = SSF_fix_hijri(d2, dout);
          }
          out.y = dout[0];
          out.m = dout[1];
          out.d = dout[2];
          out.S = time % 60;
          time = Math.floor(time / 60);
          out.M = time % 60;
          time = Math.floor(time / 60);
          out.H = time;
          out.q = dow;
          return out;
        }
        function SSF_strip_decimal(o6) {
          return o6.indexOf(".") == -1 ? o6 : o6.replace(/(?:\.0*|(\.\d*[1-9])0+)$/, "$1");
        }
        function SSF_normalize_exp(o6) {
          if (o6.indexOf("E") == -1)
            return o6;
          return o6.replace(/(?:\.0*|(\.\d*[1-9])0+)[Ee]/, "$1E").replace(/(E[+-])(\d)$/, "$10$2");
        }
        function SSF_small_exp(v4) {
          var w3 = v4 < 0 ? 12 : 11;
          var o6 = SSF_strip_decimal(v4.toFixed(12));
          if (o6.length <= w3)
            return o6;
          o6 = v4.toPrecision(10);
          if (o6.length <= w3)
            return o6;
          return v4.toExponential(5);
        }
        function SSF_large_exp(v4) {
          var o6 = SSF_strip_decimal(v4.toFixed(11));
          return o6.length > (v4 < 0 ? 12 : 11) || o6 === "0" || o6 === "-0" ? v4.toPrecision(6) : o6;
        }
        function SSF_general_num(v4) {
          if (!isFinite(v4))
            return isNaN(v4) ? "#NUM!" : "#DIV/0!";
          var V3 = Math.floor(Math.log(Math.abs(v4)) * Math.LOG10E), o6;
          if (V3 >= -4 && V3 <= -1)
            o6 = v4.toPrecision(10 + V3);
          else if (Math.abs(V3) <= 9)
            o6 = SSF_small_exp(v4);
          else if (V3 === 10)
            o6 = v4.toFixed(10).substr(0, 12);
          else
            o6 = SSF_large_exp(v4);
          return SSF_strip_decimal(SSF_normalize_exp(o6.toUpperCase()));
        }
        function SSF_general(v4, opts) {
          switch (typeof v4) {
            case "string":
              return v4;
            case "boolean":
              return v4 ? "TRUE" : "FALSE";
            case "number":
              return (v4 | 0) === v4 ? v4.toString(10) : SSF_general_num(v4);
            case "undefined":
              return "";
            case "object":
              if (v4 == null)
                return "";
              if (v4 instanceof Date)
                return SSF_format(14, datenum(v4, opts && opts.date1904), opts);
          }
          throw new Error("unsupported value in General format: " + v4);
        }
        function SSF_fix_hijri(date, o6) {
          o6[0] -= 581;
          var dow = date.getDay();
          if (date < 60)
            dow = (dow + 6) % 7;
          return dow;
        }
        function SSF_write_date(type, fmt, val2, ss0) {
          var o6 = "", ss = 0, tt2 = 0, y4 = val2.y, out, outl = 0;
          switch (type) {
            case 98:
              y4 = val2.y + 543;
            case 121:
              switch (fmt.length) {
                case 1:
                case 2:
                  out = y4 % 100;
                  outl = 2;
                  break;
                default:
                  out = y4 % 1e4;
                  outl = 4;
                  break;
              }
              break;
            case 109:
              switch (fmt.length) {
                case 1:
                case 2:
                  out = val2.m;
                  outl = fmt.length;
                  break;
                case 3:
                  return months[val2.m - 1][1];
                case 5:
                  return months[val2.m - 1][0];
                default:
                  return months[val2.m - 1][2];
              }
              break;
            case 100:
              switch (fmt.length) {
                case 1:
                case 2:
                  out = val2.d;
                  outl = fmt.length;
                  break;
                case 3:
                  return days2[val2.q][0];
                default:
                  return days2[val2.q][1];
              }
              break;
            case 104:
              switch (fmt.length) {
                case 1:
                case 2:
                  out = 1 + (val2.H + 11) % 12;
                  outl = fmt.length;
                  break;
                default:
                  throw "bad hour format: " + fmt;
              }
              break;
            case 72:
              switch (fmt.length) {
                case 1:
                case 2:
                  out = val2.H;
                  outl = fmt.length;
                  break;
                default:
                  throw "bad hour format: " + fmt;
              }
              break;
            case 77:
              switch (fmt.length) {
                case 1:
                case 2:
                  out = val2.M;
                  outl = fmt.length;
                  break;
                default:
                  throw "bad minute format: " + fmt;
              }
              break;
            case 115:
              if (fmt != "s" && fmt != "ss" && fmt != ".0" && fmt != ".00" && fmt != ".000")
                throw "bad second format: " + fmt;
              if (val2.u === 0 && (fmt == "s" || fmt == "ss"))
                return pad0(val2.S, fmt.length);
              if (ss0 >= 2)
                tt2 = ss0 === 3 ? 1e3 : 100;
              else
                tt2 = ss0 === 1 ? 10 : 1;
              ss = Math.round(tt2 * (val2.S + val2.u));
              if (ss >= 60 * tt2)
                ss = 0;
              if (fmt === "s")
                return ss === 0 ? "0" : "" + ss / tt2;
              o6 = pad0(ss, 2 + ss0);
              if (fmt === "ss")
                return o6.substr(0, 2);
              return "." + o6.substr(2, fmt.length - 1);
            case 90:
              switch (fmt) {
                case "[h]":
                case "[hh]":
                  out = val2.D * 24 + val2.H;
                  break;
                case "[m]":
                case "[mm]":
                  out = (val2.D * 24 + val2.H) * 60 + val2.M;
                  break;
                case "[s]":
                case "[ss]":
                  out = ((val2.D * 24 + val2.H) * 60 + val2.M) * 60 + (ss0 == 0 ? Math.round(val2.S + val2.u) : val2.S);
                  break;
                default:
                  throw "bad abstime format: " + fmt;
              }
              outl = fmt.length === 3 ? 1 : 2;
              break;
            case 101:
              out = y4;
              outl = 1;
              break;
          }
          var outstr = outl > 0 ? pad0(out, outl) : "";
          return outstr;
        }
        function commaify(s3) {
          var w3 = 3;
          if (s3.length <= w3)
            return s3;
          var j3 = s3.length % w3, o6 = s3.substr(0, j3);
          for (; j3 != s3.length; j3 += w3)
            o6 += (o6.length > 0 ? "," : "") + s3.substr(j3, w3);
          return o6;
        }
        var pct1 = /%/g;
        function write_num_pct(type, fmt, val2) {
          var sfmt = fmt.replace(pct1, ""), mul = fmt.length - sfmt.length;
          return write_num(type, sfmt, val2 * Math.pow(10, 2 * mul)) + fill("%", mul);
        }
        function write_num_cm(type, fmt, val2) {
          var idx = fmt.length - 1;
          while (fmt.charCodeAt(idx - 1) === 44)
            --idx;
          return write_num(type, fmt.substr(0, idx), val2 / Math.pow(10, 3 * (fmt.length - idx)));
        }
        function write_num_exp(fmt, val2) {
          var o6;
          var idx = fmt.indexOf("E") - fmt.indexOf(".") - 1;
          if (fmt.match(/^#+0.0E\+0$/)) {
            if (val2 == 0)
              return "0.0E+0";
            else if (val2 < 0)
              return "-" + write_num_exp(fmt, -val2);
            var period = fmt.indexOf(".");
            if (period === -1)
              period = fmt.indexOf("E");
            var ee2 = Math.floor(Math.log(val2) * Math.LOG10E) % period;
            if (ee2 < 0)
              ee2 += period;
            o6 = (val2 / Math.pow(10, ee2)).toPrecision(idx + 1 + (period + ee2) % period);
            if (o6.indexOf("e") === -1) {
              var fakee = Math.floor(Math.log(val2) * Math.LOG10E);
              if (o6.indexOf(".") === -1)
                o6 = o6.charAt(0) + "." + o6.substr(1) + "E+" + (fakee - o6.length + ee2);
              else
                o6 += "E+" + (fakee - ee2);
              while (o6.substr(0, 2) === "0.") {
                o6 = o6.charAt(0) + o6.substr(2, period) + "." + o6.substr(2 + period);
                o6 = o6.replace(/^0+([1-9])/, "$1").replace(/^0+\./, "0.");
              }
              o6 = o6.replace(/\+-/, "-");
            }
            o6 = o6.replace(/^([+-]?)(\d*)\.(\d*)[Ee]/, function($$, $1, $22, $3) {
              return $1 + $22 + $3.substr(0, (period + ee2) % period) + "." + $3.substr(ee2) + "E";
            });
          } else
            o6 = val2.toExponential(idx);
          if (fmt.match(/E\+00$/) && o6.match(/e[+-]\d$/))
            o6 = o6.substr(0, o6.length - 1) + "0" + o6.charAt(o6.length - 1);
          if (fmt.match(/E\-/) && o6.match(/e\+/))
            o6 = o6.replace(/e\+/, "e");
          return o6.replace("e", "E");
        }
        var frac1 = /# (\?+)( ?)\/( ?)(\d+)/;
        function write_num_f1(r6, aval, sign3) {
          var den = parseInt(r6[4], 10), rr = Math.round(aval * den), base = Math.floor(rr / den);
          var myn = rr - base * den, myd = den;
          return sign3 + (base === 0 ? "" : "" + base) + " " + (myn === 0 ? fill(" ", r6[1].length + 1 + r6[4].length) : pad_(myn, r6[1].length) + r6[2] + "/" + r6[3] + pad0(myd, r6[4].length));
        }
        function write_num_f2(r6, aval, sign3) {
          return sign3 + (aval === 0 ? "" : "" + aval) + fill(" ", r6[1].length + 2 + r6[4].length);
        }
        var dec1 = /^#*0*\.([0#]+)/;
        var closeparen = /\)[^)]*[0#]/;
        var phone = /\(###\) ###\\?-####/;
        function hashq(str) {
          var o6 = "", cc2;
          for (var i6 = 0; i6 != str.length; ++i6)
            switch (cc2 = str.charCodeAt(i6)) {
              case 35:
                break;
              case 63:
                o6 += " ";
                break;
              case 48:
                o6 += "0";
                break;
              default:
                o6 += String.fromCharCode(cc2);
            }
          return o6;
        }
        function rnd(val2, d2) {
          var dd = Math.pow(10, d2);
          return "" + Math.round(val2 * dd) / dd;
        }
        function dec(val2, d2) {
          var _frac = val2 - Math.floor(val2), dd = Math.pow(10, d2);
          if (d2 < ("" + Math.round(_frac * dd)).length)
            return 0;
          return Math.round(_frac * dd);
        }
        function carry(val2, d2) {
          if (d2 < ("" + Math.round((val2 - Math.floor(val2)) * Math.pow(10, d2))).length) {
            return 1;
          }
          return 0;
        }
        function flr(val2) {
          if (val2 < 2147483647 && val2 > -2147483648)
            return "" + (val2 >= 0 ? val2 | 0 : val2 - 1 | 0);
          return "" + Math.floor(val2);
        }
        function write_num_flt(type, fmt, val2) {
          if (type.charCodeAt(0) === 40 && !fmt.match(closeparen)) {
            var ffmt = fmt.replace(/\( */, "").replace(/ \)/, "").replace(/\)/, "");
            if (val2 >= 0)
              return write_num_flt("n", ffmt, val2);
            return "(" + write_num_flt("n", ffmt, -val2) + ")";
          }
          if (fmt.charCodeAt(fmt.length - 1) === 44)
            return write_num_cm(type, fmt, val2);
          if (fmt.indexOf("%") !== -1)
            return write_num_pct(type, fmt, val2);
          if (fmt.indexOf("E") !== -1)
            return write_num_exp(fmt, val2);
          if (fmt.charCodeAt(0) === 36)
            return "$" + write_num_flt(type, fmt.substr(fmt.charAt(1) == " " ? 2 : 1), val2);
          var o6;
          var r6, ri, ff, aval = Math.abs(val2), sign3 = val2 < 0 ? "-" : "";
          if (fmt.match(/^00+$/))
            return sign3 + pad0r(aval, fmt.length);
          if (fmt.match(/^[#?]+$/)) {
            o6 = pad0r(val2, 0);
            if (o6 === "0")
              o6 = "";
            return o6.length > fmt.length ? o6 : hashq(fmt.substr(0, fmt.length - o6.length)) + o6;
          }
          if (r6 = fmt.match(frac1))
            return write_num_f1(r6, aval, sign3);
          if (fmt.match(/^#+0+$/))
            return sign3 + pad0r(aval, fmt.length - fmt.indexOf("0"));
          if (r6 = fmt.match(dec1)) {
            o6 = rnd(val2, r6[1].length).replace(/^([^\.]+)$/, "$1." + hashq(r6[1])).replace(/\.$/, "." + hashq(r6[1])).replace(/\.(\d*)$/, function($$, $1) {
              return "." + $1 + fill("0", hashq(r6[1]).length - $1.length);
            });
            return fmt.indexOf("0.") !== -1 ? o6 : o6.replace(/^0\./, ".");
          }
          fmt = fmt.replace(/^#+([0.])/, "$1");
          if (r6 = fmt.match(/^(0*)\.(#*)$/)) {
            return sign3 + rnd(aval, r6[2].length).replace(/\.(\d*[1-9])0*$/, ".$1").replace(/^(-?\d*)$/, "$1.").replace(/^0\./, r6[1].length ? "0." : ".");
          }
          if (r6 = fmt.match(/^#{1,3},##0(\.?)$/))
            return sign3 + commaify(pad0r(aval, 0));
          if (r6 = fmt.match(/^#,##0\.([#0]*0)$/)) {
            return val2 < 0 ? "-" + write_num_flt(type, fmt, -val2) : commaify("" + (Math.floor(val2) + carry(val2, r6[1].length))) + "." + pad0(dec(val2, r6[1].length), r6[1].length);
          }
          if (r6 = fmt.match(/^#,#*,#0/))
            return write_num_flt(type, fmt.replace(/^#,#*,/, ""), val2);
          if (r6 = fmt.match(/^([0#]+)(\\?-([0#]+))+$/)) {
            o6 = _strrev(write_num_flt(type, fmt.replace(/[\\-]/g, ""), val2));
            ri = 0;
            return _strrev(_strrev(fmt.replace(/\\/g, "")).replace(/[0#]/g, function(x4) {
              return ri < o6.length ? o6.charAt(ri++) : x4 === "0" ? "0" : "";
            }));
          }
          if (fmt.match(phone)) {
            o6 = write_num_flt(type, "##########", val2);
            return "(" + o6.substr(0, 3) + ") " + o6.substr(3, 3) + "-" + o6.substr(6);
          }
          var oa = "";
          if (r6 = fmt.match(/^([#0?]+)( ?)\/( ?)([#0?]+)/)) {
            ri = Math.min(r6[4].length, 7);
            ff = SSF_frac(aval, Math.pow(10, ri) - 1, false);
            o6 = "" + sign3;
            oa = write_num("n", r6[1], ff[1]);
            if (oa.charAt(oa.length - 1) == " ")
              oa = oa.substr(0, oa.length - 1) + "0";
            o6 += oa + r6[2] + "/" + r6[3];
            oa = rpad_(ff[2], ri);
            if (oa.length < r6[4].length)
              oa = hashq(r6[4].substr(r6[4].length - oa.length)) + oa;
            o6 += oa;
            return o6;
          }
          if (r6 = fmt.match(/^# ([#0?]+)( ?)\/( ?)([#0?]+)/)) {
            ri = Math.min(Math.max(r6[1].length, r6[4].length), 7);
            ff = SSF_frac(aval, Math.pow(10, ri) - 1, true);
            return sign3 + (ff[0] || (ff[1] ? "" : "0")) + " " + (ff[1] ? pad_(ff[1], ri) + r6[2] + "/" + r6[3] + rpad_(ff[2], ri) : fill(" ", 2 * ri + 1 + r6[2].length + r6[3].length));
          }
          if (r6 = fmt.match(/^[#0?]+$/)) {
            o6 = pad0r(val2, 0);
            if (fmt.length <= o6.length)
              return o6;
            return hashq(fmt.substr(0, fmt.length - o6.length)) + o6;
          }
          if (r6 = fmt.match(/^([#0?]+)\.([#0]+)$/)) {
            o6 = "" + val2.toFixed(Math.min(r6[2].length, 10)).replace(/([^0])0+$/, "$1");
            ri = o6.indexOf(".");
            var lres = fmt.indexOf(".") - ri, rres = fmt.length - o6.length - lres;
            return hashq(fmt.substr(0, lres) + o6 + fmt.substr(fmt.length - rres));
          }
          if (r6 = fmt.match(/^00,000\.([#0]*0)$/)) {
            ri = dec(val2, r6[1].length);
            return val2 < 0 ? "-" + write_num_flt(type, fmt, -val2) : commaify(flr(val2)).replace(/^\d,\d{3}$/, "0$&").replace(/^\d*$/, function($$) {
              return "00," + ($$.length < 3 ? pad0(0, 3 - $$.length) : "") + $$;
            }) + "." + pad0(ri, r6[1].length);
          }
          switch (fmt) {
            case "###,##0.00":
              return write_num_flt(type, "#,##0.00", val2);
            case "###,###":
            case "##,###":
            case "#,###":
              var x3 = commaify(pad0r(aval, 0));
              return x3 !== "0" ? sign3 + x3 : "";
            case "###,###.00":
              return write_num_flt(type, "###,##0.00", val2).replace(/^0\./, ".");
            case "#,###.00":
              return write_num_flt(type, "#,##0.00", val2).replace(/^0\./, ".");
            default:
          }
          throw new Error("unsupported format |" + fmt + "|");
        }
        function write_num_cm2(type, fmt, val2) {
          var idx = fmt.length - 1;
          while (fmt.charCodeAt(idx - 1) === 44)
            --idx;
          return write_num(type, fmt.substr(0, idx), val2 / Math.pow(10, 3 * (fmt.length - idx)));
        }
        function write_num_pct2(type, fmt, val2) {
          var sfmt = fmt.replace(pct1, ""), mul = fmt.length - sfmt.length;
          return write_num(type, sfmt, val2 * Math.pow(10, 2 * mul)) + fill("%", mul);
        }
        function write_num_exp2(fmt, val2) {
          var o6;
          var idx = fmt.indexOf("E") - fmt.indexOf(".") - 1;
          if (fmt.match(/^#+0.0E\+0$/)) {
            if (val2 == 0)
              return "0.0E+0";
            else if (val2 < 0)
              return "-" + write_num_exp2(fmt, -val2);
            var period = fmt.indexOf(".");
            if (period === -1)
              period = fmt.indexOf("E");
            var ee2 = Math.floor(Math.log(val2) * Math.LOG10E) % period;
            if (ee2 < 0)
              ee2 += period;
            o6 = (val2 / Math.pow(10, ee2)).toPrecision(idx + 1 + (period + ee2) % period);
            if (!o6.match(/[Ee]/)) {
              var fakee = Math.floor(Math.log(val2) * Math.LOG10E);
              if (o6.indexOf(".") === -1)
                o6 = o6.charAt(0) + "." + o6.substr(1) + "E+" + (fakee - o6.length + ee2);
              else
                o6 += "E+" + (fakee - ee2);
              o6 = o6.replace(/\+-/, "-");
            }
            o6 = o6.replace(/^([+-]?)(\d*)\.(\d*)[Ee]/, function($$, $1, $22, $3) {
              return $1 + $22 + $3.substr(0, (period + ee2) % period) + "." + $3.substr(ee2) + "E";
            });
          } else
            o6 = val2.toExponential(idx);
          if (fmt.match(/E\+00$/) && o6.match(/e[+-]\d$/))
            o6 = o6.substr(0, o6.length - 1) + "0" + o6.charAt(o6.length - 1);
          if (fmt.match(/E\-/) && o6.match(/e\+/))
            o6 = o6.replace(/e\+/, "e");
          return o6.replace("e", "E");
        }
        function write_num_int(type, fmt, val2) {
          if (type.charCodeAt(0) === 40 && !fmt.match(closeparen)) {
            var ffmt = fmt.replace(/\( */, "").replace(/ \)/, "").replace(/\)/, "");
            if (val2 >= 0)
              return write_num_int("n", ffmt, val2);
            return "(" + write_num_int("n", ffmt, -val2) + ")";
          }
          if (fmt.charCodeAt(fmt.length - 1) === 44)
            return write_num_cm2(type, fmt, val2);
          if (fmt.indexOf("%") !== -1)
            return write_num_pct2(type, fmt, val2);
          if (fmt.indexOf("E") !== -1)
            return write_num_exp2(fmt, val2);
          if (fmt.charCodeAt(0) === 36)
            return "$" + write_num_int(type, fmt.substr(fmt.charAt(1) == " " ? 2 : 1), val2);
          var o6;
          var r6, ri, ff, aval = Math.abs(val2), sign3 = val2 < 0 ? "-" : "";
          if (fmt.match(/^00+$/))
            return sign3 + pad0(aval, fmt.length);
          if (fmt.match(/^[#?]+$/)) {
            o6 = "" + val2;
            if (val2 === 0)
              o6 = "";
            return o6.length > fmt.length ? o6 : hashq(fmt.substr(0, fmt.length - o6.length)) + o6;
          }
          if (r6 = fmt.match(frac1))
            return write_num_f2(r6, aval, sign3);
          if (fmt.match(/^#+0+$/))
            return sign3 + pad0(aval, fmt.length - fmt.indexOf("0"));
          if (r6 = fmt.match(dec1)) {
            o6 = ("" + val2).replace(/^([^\.]+)$/, "$1." + hashq(r6[1])).replace(/\.$/, "." + hashq(r6[1]));
            o6 = o6.replace(/\.(\d*)$/, function($$, $1) {
              return "." + $1 + fill("0", hashq(r6[1]).length - $1.length);
            });
            return fmt.indexOf("0.") !== -1 ? o6 : o6.replace(/^0\./, ".");
          }
          fmt = fmt.replace(/^#+([0.])/, "$1");
          if (r6 = fmt.match(/^(0*)\.(#*)$/)) {
            return sign3 + ("" + aval).replace(/\.(\d*[1-9])0*$/, ".$1").replace(/^(-?\d*)$/, "$1.").replace(/^0\./, r6[1].length ? "0." : ".");
          }
          if (r6 = fmt.match(/^#{1,3},##0(\.?)$/))
            return sign3 + commaify("" + aval);
          if (r6 = fmt.match(/^#,##0\.([#0]*0)$/)) {
            return val2 < 0 ? "-" + write_num_int(type, fmt, -val2) : commaify("" + val2) + "." + fill("0", r6[1].length);
          }
          if (r6 = fmt.match(/^#,#*,#0/))
            return write_num_int(type, fmt.replace(/^#,#*,/, ""), val2);
          if (r6 = fmt.match(/^([0#]+)(\\?-([0#]+))+$/)) {
            o6 = _strrev(write_num_int(type, fmt.replace(/[\\-]/g, ""), val2));
            ri = 0;
            return _strrev(_strrev(fmt.replace(/\\/g, "")).replace(/[0#]/g, function(x4) {
              return ri < o6.length ? o6.charAt(ri++) : x4 === "0" ? "0" : "";
            }));
          }
          if (fmt.match(phone)) {
            o6 = write_num_int(type, "##########", val2);
            return "(" + o6.substr(0, 3) + ") " + o6.substr(3, 3) + "-" + o6.substr(6);
          }
          var oa = "";
          if (r6 = fmt.match(/^([#0?]+)( ?)\/( ?)([#0?]+)/)) {
            ri = Math.min(r6[4].length, 7);
            ff = SSF_frac(aval, Math.pow(10, ri) - 1, false);
            o6 = "" + sign3;
            oa = write_num("n", r6[1], ff[1]);
            if (oa.charAt(oa.length - 1) == " ")
              oa = oa.substr(0, oa.length - 1) + "0";
            o6 += oa + r6[2] + "/" + r6[3];
            oa = rpad_(ff[2], ri);
            if (oa.length < r6[4].length)
              oa = hashq(r6[4].substr(r6[4].length - oa.length)) + oa;
            o6 += oa;
            return o6;
          }
          if (r6 = fmt.match(/^# ([#0?]+)( ?)\/( ?)([#0?]+)/)) {
            ri = Math.min(Math.max(r6[1].length, r6[4].length), 7);
            ff = SSF_frac(aval, Math.pow(10, ri) - 1, true);
            return sign3 + (ff[0] || (ff[1] ? "" : "0")) + " " + (ff[1] ? pad_(ff[1], ri) + r6[2] + "/" + r6[3] + rpad_(ff[2], ri) : fill(" ", 2 * ri + 1 + r6[2].length + r6[3].length));
          }
          if (r6 = fmt.match(/^[#0?]+$/)) {
            o6 = "" + val2;
            if (fmt.length <= o6.length)
              return o6;
            return hashq(fmt.substr(0, fmt.length - o6.length)) + o6;
          }
          if (r6 = fmt.match(/^([#0]+)\.([#0]+)$/)) {
            o6 = "" + val2.toFixed(Math.min(r6[2].length, 10)).replace(/([^0])0+$/, "$1");
            ri = o6.indexOf(".");
            var lres = fmt.indexOf(".") - ri, rres = fmt.length - o6.length - lres;
            return hashq(fmt.substr(0, lres) + o6 + fmt.substr(fmt.length - rres));
          }
          if (r6 = fmt.match(/^00,000\.([#0]*0)$/)) {
            return val2 < 0 ? "-" + write_num_int(type, fmt, -val2) : commaify("" + val2).replace(/^\d,\d{3}$/, "0$&").replace(/^\d*$/, function($$) {
              return "00," + ($$.length < 3 ? pad0(0, 3 - $$.length) : "") + $$;
            }) + "." + pad0(0, r6[1].length);
          }
          switch (fmt) {
            case "###,###":
            case "##,###":
            case "#,###":
              var x3 = commaify("" + aval);
              return x3 !== "0" ? sign3 + x3 : "";
            default:
              if (fmt.match(/\.[0#?]*$/))
                return write_num_int(type, fmt.slice(0, fmt.lastIndexOf(".")), val2) + hashq(fmt.slice(fmt.lastIndexOf(".")));
          }
          throw new Error("unsupported format |" + fmt + "|");
        }
        function write_num(type, fmt, val2) {
          return (val2 | 0) === val2 ? write_num_int(type, fmt, val2) : write_num_flt(type, fmt, val2);
        }
        function SSF_split_fmt(fmt) {
          var out = [];
          var in_str = false;
          for (var i6 = 0, j3 = 0; i6 < fmt.length; ++i6)
            switch (fmt.charCodeAt(i6)) {
              case 34:
                in_str = !in_str;
                break;
              case 95:
              case 42:
              case 92:
                ++i6;
                break;
              case 59:
                out[out.length] = fmt.substr(j3, i6 - j3);
                j3 = i6 + 1;
            }
          out[out.length] = fmt.substr(j3);
          if (in_str === true)
            throw new Error("Format |" + fmt + "| unterminated string ");
          return out;
        }
        var SSF_abstime = /\[[HhMmSs\u0E0A\u0E19\u0E17]*\]/;
        function fmt_is_date(fmt) {
          var i6 = 0, c8 = "", o6 = "";
          while (i6 < fmt.length) {
            switch (c8 = fmt.charAt(i6)) {
              case "G":
                if (SSF_isgeneral(fmt, i6))
                  i6 += 6;
                i6++;
                break;
              case '"':
                for (; fmt.charCodeAt(++i6) !== 34 && i6 < fmt.length; ) {
                }
                ++i6;
                break;
              case "\\":
                i6 += 2;
                break;
              case "_":
                i6 += 2;
                break;
              case "@":
                ++i6;
                break;
              case "B":
              case "b":
                if (fmt.charAt(i6 + 1) === "1" || fmt.charAt(i6 + 1) === "2")
                  return true;
              case "M":
              case "D":
              case "Y":
              case "H":
              case "S":
              case "E":
              case "m":
              case "d":
              case "y":
              case "h":
              case "s":
              case "e":
              case "g":
                return true;
              case "A":
              case "a":
              case "\u4E0A":
                if (fmt.substr(i6, 3).toUpperCase() === "A/P")
                  return true;
                if (fmt.substr(i6, 5).toUpperCase() === "AM/PM")
                  return true;
                if (fmt.substr(i6, 5).toUpperCase() === "\u4E0A\u5348/\u4E0B\u5348")
                  return true;
                ++i6;
                break;
              case "[":
                o6 = c8;
                while (fmt.charAt(i6++) !== "]" && i6 < fmt.length)
                  o6 += fmt.charAt(i6);
                if (o6.match(SSF_abstime))
                  return true;
                break;
              case ".":
              case "0":
              case "#":
                while (i6 < fmt.length && ("0#?.,E+-%".indexOf(c8 = fmt.charAt(++i6)) > -1 || c8 == "\\" && fmt.charAt(i6 + 1) == "-" && "0#".indexOf(fmt.charAt(i6 + 2)) > -1)) {
                }
                break;
              case "?":
                while (fmt.charAt(++i6) === c8) {
                }
                break;
              case "*":
                ++i6;
                if (fmt.charAt(i6) == " " || fmt.charAt(i6) == "*")
                  ++i6;
                break;
              case "(":
              case ")":
                ++i6;
                break;
              case "1":
              case "2":
              case "3":
              case "4":
              case "5":
              case "6":
              case "7":
              case "8":
              case "9":
                while (i6 < fmt.length && "0123456789".indexOf(fmt.charAt(++i6)) > -1) {
                }
                break;
              case " ":
                ++i6;
                break;
              default:
                ++i6;
                break;
            }
          }
          return false;
        }
        function eval_fmt(fmt, v4, opts, flen) {
          var out = [], o6 = "", i6 = 0, c8 = "", lst = "t", dt2, j3, cc2;
          var hr = "H";
          while (i6 < fmt.length) {
            switch (c8 = fmt.charAt(i6)) {
              case "G":
                if (!SSF_isgeneral(fmt, i6))
                  throw new Error("unrecognized character " + c8 + " in " + fmt);
                out[out.length] = { t: "G", v: "General" };
                i6 += 7;
                break;
              case '"':
                for (o6 = ""; (cc2 = fmt.charCodeAt(++i6)) !== 34 && i6 < fmt.length; )
                  o6 += String.fromCharCode(cc2);
                out[out.length] = { t: "t", v: o6 };
                ++i6;
                break;
              case "\\":
                var w3 = fmt.charAt(++i6), t5 = w3 === "(" || w3 === ")" ? w3 : "t";
                out[out.length] = { t: t5, v: w3 };
                ++i6;
                break;
              case "_":
                out[out.length] = { t: "t", v: " " };
                i6 += 2;
                break;
              case "@":
                out[out.length] = { t: "T", v: v4 };
                ++i6;
                break;
              case "B":
              case "b":
                if (fmt.charAt(i6 + 1) === "1" || fmt.charAt(i6 + 1) === "2") {
                  if (dt2 == null) {
                    dt2 = SSF_parse_date_code(v4, opts, fmt.charAt(i6 + 1) === "2");
                    if (dt2 == null)
                      return "";
                  }
                  out[out.length] = { t: "X", v: fmt.substr(i6, 2) };
                  lst = c8;
                  i6 += 2;
                  break;
                }
              case "M":
              case "D":
              case "Y":
              case "H":
              case "S":
              case "E":
                c8 = c8.toLowerCase();
              case "m":
              case "d":
              case "y":
              case "h":
              case "s":
              case "e":
              case "g":
                if (v4 < 0)
                  return "";
                if (dt2 == null) {
                  dt2 = SSF_parse_date_code(v4, opts);
                  if (dt2 == null)
                    return "";
                }
                o6 = c8;
                while (++i6 < fmt.length && fmt.charAt(i6).toLowerCase() === c8)
                  o6 += c8;
                if (c8 === "m" && lst.toLowerCase() === "h")
                  c8 = "M";
                if (c8 === "h")
                  c8 = hr;
                out[out.length] = { t: c8, v: o6 };
                lst = c8;
                break;
              case "A":
              case "a":
              case "\u4E0A":
                var q3 = { t: c8, v: c8 };
                if (dt2 == null)
                  dt2 = SSF_parse_date_code(v4, opts);
                if (fmt.substr(i6, 3).toUpperCase() === "A/P") {
                  if (dt2 != null)
                    q3.v = dt2.H >= 12 ? fmt.charAt(i6 + 2) : c8;
                  q3.t = "T";
                  hr = "h";
                  i6 += 3;
                } else if (fmt.substr(i6, 5).toUpperCase() === "AM/PM") {
                  if (dt2 != null)
                    q3.v = dt2.H >= 12 ? "PM" : "AM";
                  q3.t = "T";
                  i6 += 5;
                  hr = "h";
                } else if (fmt.substr(i6, 5).toUpperCase() === "\u4E0A\u5348/\u4E0B\u5348") {
                  if (dt2 != null)
                    q3.v = dt2.H >= 12 ? "\u4E0B\u5348" : "\u4E0A\u5348";
                  q3.t = "T";
                  i6 += 5;
                  hr = "h";
                } else {
                  q3.t = "t";
                  ++i6;
                }
                if (dt2 == null && q3.t === "T")
                  return "";
                out[out.length] = q3;
                lst = c8;
                break;
              case "[":
                o6 = c8;
                while (fmt.charAt(i6++) !== "]" && i6 < fmt.length)
                  o6 += fmt.charAt(i6);
                if (o6.slice(-1) !== "]")
                  throw 'unterminated "[" block: |' + o6 + "|";
                if (o6.match(SSF_abstime)) {
                  if (dt2 == null) {
                    dt2 = SSF_parse_date_code(v4, opts);
                    if (dt2 == null)
                      return "";
                  }
                  out[out.length] = { t: "Z", v: o6.toLowerCase() };
                  lst = o6.charAt(1);
                } else if (o6.indexOf("$") > -1) {
                  o6 = (o6.match(/\$([^-\[\]]*)/) || [])[1] || "$";
                  if (!fmt_is_date(fmt))
                    out[out.length] = { t: "t", v: o6 };
                }
                break;
              case ".":
                if (dt2 != null) {
                  o6 = c8;
                  while (++i6 < fmt.length && (c8 = fmt.charAt(i6)) === "0")
                    o6 += c8;
                  out[out.length] = { t: "s", v: o6 };
                  break;
                }
              case "0":
              case "#":
                o6 = c8;
                while (++i6 < fmt.length && "0#?.,E+-%".indexOf(c8 = fmt.charAt(i6)) > -1)
                  o6 += c8;
                out[out.length] = { t: "n", v: o6 };
                break;
              case "?":
                o6 = c8;
                while (fmt.charAt(++i6) === c8)
                  o6 += c8;
                out[out.length] = { t: c8, v: o6 };
                lst = c8;
                break;
              case "*":
                ++i6;
                if (fmt.charAt(i6) == " " || fmt.charAt(i6) == "*")
                  ++i6;
                break;
              case "(":
              case ")":
                out[out.length] = { t: flen === 1 ? "t" : c8, v: c8 };
                ++i6;
                break;
              case "1":
              case "2":
              case "3":
              case "4":
              case "5":
              case "6":
              case "7":
              case "8":
              case "9":
                o6 = c8;
                while (i6 < fmt.length && "0123456789".indexOf(fmt.charAt(++i6)) > -1)
                  o6 += fmt.charAt(i6);
                out[out.length] = { t: "D", v: o6 };
                break;
              case " ":
                out[out.length] = { t: c8, v: c8 };
                ++i6;
                break;
              case "$":
                out[out.length] = { t: "t", v: "$" };
                ++i6;
                break;
              default:
                if (",$-+/():!^&'~{}<>=\u20ACacfijklopqrtuvwxzP".indexOf(c8) === -1)
                  throw new Error("unrecognized character " + c8 + " in " + fmt);
                out[out.length] = { t: "t", v: c8 };
                ++i6;
                break;
            }
          }
          var bt = 0, ss0 = 0, ssm;
          for (i6 = out.length - 1, lst = "t"; i6 >= 0; --i6) {
            switch (out[i6].t) {
              case "h":
              case "H":
                out[i6].t = hr;
                lst = "h";
                if (bt < 1)
                  bt = 1;
                break;
              case "s":
                if (ssm = out[i6].v.match(/\.0+$/)) {
                  ss0 = Math.max(ss0, ssm[0].length - 1);
                  bt = 4;
                }
                if (bt < 3)
                  bt = 3;
              case "d":
              case "y":
              case "e":
                lst = out[i6].t;
                break;
              case "M":
                lst = out[i6].t;
                if (bt < 2)
                  bt = 2;
                break;
              case "m":
                if (lst === "s") {
                  out[i6].t = "M";
                  if (bt < 2)
                    bt = 2;
                }
                break;
              case "X":
                break;
              case "Z":
                if (bt < 1 && out[i6].v.match(/[Hh]/))
                  bt = 1;
                if (bt < 2 && out[i6].v.match(/[Mm]/))
                  bt = 2;
                if (bt < 3 && out[i6].v.match(/[Ss]/))
                  bt = 3;
            }
          }
          var _dt;
          switch (bt) {
            case 0:
              break;
            case 1:
            case 2:
            case 3:
              if (dt2.u >= 0.5) {
                dt2.u = 0;
                ++dt2.S;
              }
              if (dt2.S >= 60) {
                dt2.S = 0;
                ++dt2.M;
              }
              if (dt2.M >= 60) {
                dt2.M = 0;
                ++dt2.H;
              }
              if (dt2.H >= 24) {
                dt2.H = 0;
                ++dt2.D;
                _dt = SSF_parse_date_code(dt2.D);
                _dt.u = dt2.u;
                _dt.S = dt2.S;
                _dt.M = dt2.M;
                _dt.H = dt2.H;
                dt2 = _dt;
              }
              break;
            case 4:
              switch (ss0) {
                case 1:
                  dt2.u = Math.round(dt2.u * 10) / 10;
                  break;
                case 2:
                  dt2.u = Math.round(dt2.u * 100) / 100;
                  break;
                case 3:
                  dt2.u = Math.round(dt2.u * 1e3) / 1e3;
                  break;
              }
              if (dt2.u >= 1) {
                dt2.u = 0;
                ++dt2.S;
              }
              if (dt2.S >= 60) {
                dt2.S = 0;
                ++dt2.M;
              }
              if (dt2.M >= 60) {
                dt2.M = 0;
                ++dt2.H;
              }
              if (dt2.H >= 24) {
                dt2.H = 0;
                ++dt2.D;
                _dt = SSF_parse_date_code(dt2.D);
                _dt.u = dt2.u;
                _dt.S = dt2.S;
                _dt.M = dt2.M;
                _dt.H = dt2.H;
                dt2 = _dt;
              }
              break;
          }
          var nstr = "", jj;
          for (i6 = 0; i6 < out.length; ++i6) {
            switch (out[i6].t) {
              case "t":
              case "T":
              case " ":
              case "D":
                break;
              case "X":
                out[i6].v = "";
                out[i6].t = ";";
                break;
              case "d":
              case "m":
              case "y":
              case "h":
              case "H":
              case "M":
              case "s":
              case "e":
              case "b":
              case "Z":
                out[i6].v = SSF_write_date(out[i6].t.charCodeAt(0), out[i6].v, dt2, ss0);
                out[i6].t = "t";
                break;
              case "n":
              case "?":
                jj = i6 + 1;
                while (out[jj] != null && ((c8 = out[jj].t) === "?" || c8 === "D" || (c8 === " " || c8 === "t") && out[jj + 1] != null && (out[jj + 1].t === "?" || out[jj + 1].t === "t" && out[jj + 1].v === "/") || out[i6].t === "(" && (c8 === " " || c8 === "n" || c8 === ")") || c8 === "t" && (out[jj].v === "/" || out[jj].v === " " && out[jj + 1] != null && out[jj + 1].t == "?"))) {
                  out[i6].v += out[jj].v;
                  out[jj] = { v: "", t: ";" };
                  ++jj;
                }
                nstr += out[i6].v;
                i6 = jj - 1;
                break;
              case "G":
                out[i6].t = "t";
                out[i6].v = SSF_general(v4, opts);
                break;
            }
          }
          var vv = "", myv, ostr;
          if (nstr.length > 0) {
            if (nstr.charCodeAt(0) == 40) {
              myv = v4 < 0 && nstr.charCodeAt(0) === 45 ? -v4 : v4;
              ostr = write_num("n", nstr, myv);
            } else {
              myv = v4 < 0 && flen > 1 ? -v4 : v4;
              ostr = write_num("n", nstr, myv);
              if (myv < 0 && out[0] && out[0].t == "t") {
                ostr = ostr.substr(1);
                out[0].v = "-" + out[0].v;
              }
            }
            jj = ostr.length - 1;
            var decpt = out.length;
            for (i6 = 0; i6 < out.length; ++i6)
              if (out[i6] != null && out[i6].t != "t" && out[i6].v.indexOf(".") > -1) {
                decpt = i6;
                break;
              }
            var lasti = out.length;
            if (decpt === out.length && ostr.indexOf("E") === -1) {
              for (i6 = out.length - 1; i6 >= 0; --i6) {
                if (out[i6] == null || "n?".indexOf(out[i6].t) === -1)
                  continue;
                if (jj >= out[i6].v.length - 1) {
                  jj -= out[i6].v.length;
                  out[i6].v = ostr.substr(jj + 1, out[i6].v.length);
                } else if (jj < 0)
                  out[i6].v = "";
                else {
                  out[i6].v = ostr.substr(0, jj + 1);
                  jj = -1;
                }
                out[i6].t = "t";
                lasti = i6;
              }
              if (jj >= 0 && lasti < out.length)
                out[lasti].v = ostr.substr(0, jj + 1) + out[lasti].v;
            } else if (decpt !== out.length && ostr.indexOf("E") === -1) {
              jj = ostr.indexOf(".") - 1;
              for (i6 = decpt; i6 >= 0; --i6) {
                if (out[i6] == null || "n?".indexOf(out[i6].t) === -1)
                  continue;
                j3 = out[i6].v.indexOf(".") > -1 && i6 === decpt ? out[i6].v.indexOf(".") - 1 : out[i6].v.length - 1;
                vv = out[i6].v.substr(j3 + 1);
                for (; j3 >= 0; --j3) {
                  if (jj >= 0 && (out[i6].v.charAt(j3) === "0" || out[i6].v.charAt(j3) === "#"))
                    vv = ostr.charAt(jj--) + vv;
                }
                out[i6].v = vv;
                out[i6].t = "t";
                lasti = i6;
              }
              if (jj >= 0 && lasti < out.length)
                out[lasti].v = ostr.substr(0, jj + 1) + out[lasti].v;
              jj = ostr.indexOf(".") + 1;
              for (i6 = decpt; i6 < out.length; ++i6) {
                if (out[i6] == null || "n?(".indexOf(out[i6].t) === -1 && i6 !== decpt)
                  continue;
                j3 = out[i6].v.indexOf(".") > -1 && i6 === decpt ? out[i6].v.indexOf(".") + 1 : 0;
                vv = out[i6].v.substr(0, j3);
                for (; j3 < out[i6].v.length; ++j3) {
                  if (jj < ostr.length)
                    vv += ostr.charAt(jj++);
                }
                out[i6].v = vv;
                out[i6].t = "t";
                lasti = i6;
              }
            }
          }
          for (i6 = 0; i6 < out.length; ++i6)
            if (out[i6] != null && "n?".indexOf(out[i6].t) > -1) {
              myv = flen > 1 && v4 < 0 && i6 > 0 && out[i6 - 1].v === "-" ? -v4 : v4;
              out[i6].v = write_num(out[i6].t, out[i6].v, myv);
              out[i6].t = "t";
            }
          var retval = "";
          for (i6 = 0; i6 !== out.length; ++i6)
            if (out[i6] != null)
              retval += out[i6].v;
          return retval;
        }
        var cfregex2 = /\[(=|>[=]?|<[>=]?)(-?\d+(?:\.\d*)?)\]/;
        function chkcond(v4, rr) {
          if (rr == null)
            return false;
          var thresh = parseFloat(rr[2]);
          switch (rr[1]) {
            case "=":
              if (v4 == thresh)
                return true;
              break;
            case ">":
              if (v4 > thresh)
                return true;
              break;
            case "<":
              if (v4 < thresh)
                return true;
              break;
            case "<>":
              if (v4 != thresh)
                return true;
              break;
            case ">=":
              if (v4 >= thresh)
                return true;
              break;
            case "<=":
              if (v4 <= thresh)
                return true;
              break;
          }
          return false;
        }
        function choose_fmt(f2, v4) {
          var fmt = SSF_split_fmt(f2);
          var l5 = fmt.length, lat = fmt[l5 - 1].indexOf("@");
          if (l5 < 4 && lat > -1)
            --l5;
          if (fmt.length > 4)
            throw new Error("cannot find right format for |" + fmt.join("|") + "|");
          if (typeof v4 !== "number")
            return [4, fmt.length === 4 || lat > -1 ? fmt[fmt.length - 1] : "@"];
          if (typeof v4 === "number" && !isFinite(v4))
            v4 = 0;
          switch (fmt.length) {
            case 1:
              fmt = lat > -1 ? ["General", "General", "General", fmt[0]] : [fmt[0], fmt[0], fmt[0], "@"];
              break;
            case 2:
              fmt = lat > -1 ? [fmt[0], fmt[0], fmt[0], fmt[1]] : [fmt[0], fmt[1], fmt[0], "@"];
              break;
            case 3:
              fmt = lat > -1 ? [fmt[0], fmt[1], fmt[0], fmt[2]] : [fmt[0], fmt[1], fmt[2], "@"];
              break;
            case 4:
              break;
          }
          var ff = v4 > 0 ? fmt[0] : v4 < 0 ? fmt[1] : fmt[2];
          if (fmt[0].indexOf("[") === -1 && fmt[1].indexOf("[") === -1)
            return [l5, ff];
          if (fmt[0].match(/\[[=<>]/) != null || fmt[1].match(/\[[=<>]/) != null) {
            var m1 = fmt[0].match(cfregex2);
            var m22 = fmt[1].match(cfregex2);
            return chkcond(v4, m1) ? [l5, fmt[0]] : chkcond(v4, m22) ? [l5, fmt[1]] : [l5, fmt[m1 != null && m22 != null ? 2 : 1]];
          }
          return [l5, ff];
        }
        function SSF_format(fmt, v4, o6) {
          if (o6 == null)
            o6 = {};
          var sfmt = "";
          switch (typeof fmt) {
            case "string":
              if (fmt == "m/d/yy" && o6.dateNF)
                sfmt = o6.dateNF;
              else
                sfmt = fmt;
              break;
            case "number":
              if (fmt == 14 && o6.dateNF)
                sfmt = o6.dateNF;
              else
                sfmt = (o6.table != null ? o6.table : table_fmt)[fmt];
              if (sfmt == null)
                sfmt = o6.table && o6.table[SSF_default_map[fmt]] || table_fmt[SSF_default_map[fmt]];
              if (sfmt == null)
                sfmt = SSF_default_str[fmt] || "General";
              break;
          }
          if (SSF_isgeneral(sfmt, 0))
            return SSF_general(v4, o6);
          if (v4 instanceof Date)
            v4 = datenum(v4, o6.date1904);
          var f2 = choose_fmt(sfmt, v4);
          if (SSF_isgeneral(f2[1]))
            return SSF_general(v4, o6);
          if (v4 === true)
            v4 = "TRUE";
          else if (v4 === false)
            v4 = "FALSE";
          else if (v4 === "" || v4 == null)
            return "";
          else if (isNaN(v4) && f2[1].indexOf("0") > -1)
            return "#NUM!";
          else if (!isFinite(v4) && f2[1].indexOf("0") > -1)
            return "#DIV/0!";
          return eval_fmt(f2[1], v4, o6, f2[0]);
        }
        function SSF_load(fmt, idx) {
          if (typeof idx != "number") {
            idx = +idx || -1;
            for (var i6 = 0; i6 < 392; ++i6) {
              if (table_fmt[i6] == void 0) {
                if (idx < 0)
                  idx = i6;
                continue;
              }
              if (table_fmt[i6] == fmt) {
                idx = i6;
                break;
              }
            }
            if (idx < 0)
              idx = 391;
          }
          table_fmt[idx] = fmt;
          return idx;
        }
        function SSF_load_table(tbl) {
          for (var i6 = 0; i6 != 392; ++i6)
            if (tbl[i6] !== void 0)
              SSF_load(tbl[i6], i6);
        }
        function make_ssf() {
          table_fmt = SSF_init_table();
        }
        var SSF = {
          format: SSF_format,
          load: SSF_load,
          _table: table_fmt,
          load_table: SSF_load_table,
          parse_date_code: SSF_parse_date_code,
          is_date: fmt_is_date,
          get_table: function get_table() {
            return SSF._table = table_fmt;
          }
        };
        var SSFImplicit = {
          "5": '"$"#,##0_);\\("$"#,##0\\)',
          "6": '"$"#,##0_);[Red]\\("$"#,##0\\)',
          "7": '"$"#,##0.00_);\\("$"#,##0.00\\)',
          "8": '"$"#,##0.00_);[Red]\\("$"#,##0.00\\)',
          "23": "General",
          "24": "General",
          "25": "General",
          "26": "General",
          "27": "m/d/yy",
          "28": "m/d/yy",
          "29": "m/d/yy",
          "30": "m/d/yy",
          "31": "m/d/yy",
          "32": "h:mm:ss",
          "33": "h:mm:ss",
          "34": "h:mm:ss",
          "35": "h:mm:ss",
          "36": "m/d/yy",
          "41": '_(* #,##0_);_(* (#,##0);_(* "-"_);_(@_)',
          "42": '_("$"* #,##0_);_("$"* (#,##0);_("$"* "-"_);_(@_)',
          "43": '_(* #,##0.00_);_(* (#,##0.00);_(* "-"??_);_(@_)',
          "44": '_("$"* #,##0.00_);_("$"* (#,##0.00);_("$"* "-"??_);_(@_)',
          "50": "m/d/yy",
          "51": "m/d/yy",
          "52": "m/d/yy",
          "53": "m/d/yy",
          "54": "m/d/yy",
          "55": "m/d/yy",
          "56": "m/d/yy",
          "57": "m/d/yy",
          "58": "m/d/yy",
          "59": "0",
          "60": "0.00",
          "61": "#,##0",
          "62": "#,##0.00",
          "63": '"$"#,##0_);\\("$"#,##0\\)',
          "64": '"$"#,##0_);[Red]\\("$"#,##0\\)',
          "65": '"$"#,##0.00_);\\("$"#,##0.00\\)',
          "66": '"$"#,##0.00_);[Red]\\("$"#,##0.00\\)',
          "67": "0%",
          "68": "0.00%",
          "69": "# ?/?",
          "70": "# ??/??",
          "71": "m/d/yy",
          "72": "m/d/yy",
          "73": "d-mmm-yy",
          "74": "d-mmm",
          "75": "mmm-yy",
          "76": "h:mm",
          "77": "h:mm:ss",
          "78": "m/d/yy h:mm",
          "79": "mm:ss",
          "80": "[h]:mm:ss",
          "81": "mmss.0"
        };
        var dateNFregex = /[dD]+|[mM]+|[yYeE]+|[Hh]+|[Ss]+/g;
        function dateNF_regex(dateNF) {
          var fmt = typeof dateNF == "number" ? table_fmt[dateNF] : dateNF;
          fmt = fmt.replace(dateNFregex, "(\\d+)");
          dateNFregex.lastIndex = 0;
          return new RegExp("^" + fmt + "$");
        }
        function dateNF_fix(str, dateNF, match) {
          var Y2 = -1, m4 = -1, d2 = -1, H2 = -1, M3 = -1, S2 = -1;
          (dateNF.match(dateNFregex) || []).forEach(function(n6, i6) {
            var v4 = parseInt(match[i6 + 1], 10);
            switch (n6.toLowerCase().charAt(0)) {
              case "y":
                Y2 = v4;
                break;
              case "d":
                d2 = v4;
                break;
              case "h":
                H2 = v4;
                break;
              case "s":
                S2 = v4;
                break;
              case "m":
                if (H2 >= 0)
                  M3 = v4;
                else
                  m4 = v4;
                break;
            }
          });
          dateNFregex.lastIndex = 0;
          if (S2 >= 0 && M3 == -1 && m4 >= 0) {
            M3 = m4;
            m4 = -1;
          }
          var datestr = ("" + (Y2 >= 0 ? Y2 : new Date().getFullYear())).slice(-4) + "-" + ("00" + (m4 >= 1 ? m4 : 1)).slice(-2) + "-" + ("00" + (d2 >= 1 ? d2 : 1)).slice(-2);
          if (datestr.length == 7)
            datestr = "0" + datestr;
          if (datestr.length == 8)
            datestr = "20" + datestr;
          var timestr = ("00" + (H2 >= 0 ? H2 : 0)).slice(-2) + ":" + ("00" + (M3 >= 0 ? M3 : 0)).slice(-2) + ":" + ("00" + (S2 >= 0 ? S2 : 0)).slice(-2);
          if (H2 == -1 && M3 == -1 && S2 == -1)
            return datestr;
          if (Y2 == -1 && m4 == -1 && d2 == -1)
            return timestr;
          return datestr + "T" + timestr;
        }
        var bad_formats = {
          "d.m": "d\\.m"
        };
        function SSF__load(fmt, idx) {
          return SSF_load(bad_formats[fmt] || fmt, idx);
        }
        var CRC32 = function() {
          var CRC322 = {};
          CRC322.version = "1.2.0";
          function signed_crc_table() {
            var c8 = 0, table = new Array(256);
            for (var n6 = 0; n6 != 256; ++n6) {
              c8 = n6;
              c8 = c8 & 1 ? -306674912 ^ c8 >>> 1 : c8 >>> 1;
              c8 = c8 & 1 ? -306674912 ^ c8 >>> 1 : c8 >>> 1;
              c8 = c8 & 1 ? -306674912 ^ c8 >>> 1 : c8 >>> 1;
              c8 = c8 & 1 ? -306674912 ^ c8 >>> 1 : c8 >>> 1;
              c8 = c8 & 1 ? -306674912 ^ c8 >>> 1 : c8 >>> 1;
              c8 = c8 & 1 ? -306674912 ^ c8 >>> 1 : c8 >>> 1;
              c8 = c8 & 1 ? -306674912 ^ c8 >>> 1 : c8 >>> 1;
              c8 = c8 & 1 ? -306674912 ^ c8 >>> 1 : c8 >>> 1;
              table[n6] = c8;
            }
            return typeof Int32Array !== "undefined" ? new Int32Array(table) : table;
          }
          var T0 = signed_crc_table();
          function slice_by_16_tables(T10) {
            var c8 = 0, v4 = 0, n6 = 0, table = typeof Int32Array !== "undefined" ? new Int32Array(4096) : new Array(4096);
            for (n6 = 0; n6 != 256; ++n6)
              table[n6] = T10[n6];
            for (n6 = 0; n6 != 256; ++n6) {
              v4 = T10[n6];
              for (c8 = 256 + n6; c8 < 4096; c8 += 256)
                v4 = table[c8] = v4 >>> 8 ^ T10[v4 & 255];
            }
            var out = [];
            for (n6 = 1; n6 != 16; ++n6)
              out[n6 - 1] = typeof Int32Array !== "undefined" && typeof table.subarray == "function" ? table.subarray(n6 * 256, n6 * 256 + 256) : table.slice(n6 * 256, n6 * 256 + 256);
            return out;
          }
          var TT = slice_by_16_tables(T0);
          var T1 = TT[0], T22 = TT[1], T3 = TT[2], T4 = TT[3], T5 = TT[4];
          var T6 = TT[5], T7 = TT[6], T8 = TT[7], T9 = TT[8], Ta = TT[9];
          var Tb = TT[10], Tc = TT[11], Td = TT[12], Te3 = TT[13], Tf = TT[14];
          function crc32_bstr(bstr, seed) {
            var C6 = seed ^ -1;
            for (var i6 = 0, L2 = bstr.length; i6 < L2; )
              C6 = C6 >>> 8 ^ T0[(C6 ^ bstr.charCodeAt(i6++)) & 255];
            return ~C6;
          }
          function crc32_buf(B5, seed) {
            var C6 = seed ^ -1, L2 = B5.length - 15, i6 = 0;
            for (; i6 < L2; )
              C6 = Tf[B5[i6++] ^ C6 & 255] ^ Te3[B5[i6++] ^ C6 >> 8 & 255] ^ Td[B5[i6++] ^ C6 >> 16 & 255] ^ Tc[B5[i6++] ^ C6 >>> 24] ^ Tb[B5[i6++]] ^ Ta[B5[i6++]] ^ T9[B5[i6++]] ^ T8[B5[i6++]] ^ T7[B5[i6++]] ^ T6[B5[i6++]] ^ T5[B5[i6++]] ^ T4[B5[i6++]] ^ T3[B5[i6++]] ^ T22[B5[i6++]] ^ T1[B5[i6++]] ^ T0[B5[i6++]];
            L2 += 15;
            while (i6 < L2)
              C6 = C6 >>> 8 ^ T0[(C6 ^ B5[i6++]) & 255];
            return ~C6;
          }
          function crc32_str(str, seed) {
            var C6 = seed ^ -1;
            for (var i6 = 0, L2 = str.length, c8 = 0, d2 = 0; i6 < L2; ) {
              c8 = str.charCodeAt(i6++);
              if (c8 < 128) {
                C6 = C6 >>> 8 ^ T0[(C6 ^ c8) & 255];
              } else if (c8 < 2048) {
                C6 = C6 >>> 8 ^ T0[(C6 ^ (192 | c8 >> 6 & 31)) & 255];
                C6 = C6 >>> 8 ^ T0[(C6 ^ (128 | c8 & 63)) & 255];
              } else if (c8 >= 55296 && c8 < 57344) {
                c8 = (c8 & 1023) + 64;
                d2 = str.charCodeAt(i6++) & 1023;
                C6 = C6 >>> 8 ^ T0[(C6 ^ (240 | c8 >> 8 & 7)) & 255];
                C6 = C6 >>> 8 ^ T0[(C6 ^ (128 | c8 >> 2 & 63)) & 255];
                C6 = C6 >>> 8 ^ T0[(C6 ^ (128 | d2 >> 6 & 15 | (c8 & 3) << 4)) & 255];
                C6 = C6 >>> 8 ^ T0[(C6 ^ (128 | d2 & 63)) & 255];
              } else {
                C6 = C6 >>> 8 ^ T0[(C6 ^ (224 | c8 >> 12 & 15)) & 255];
                C6 = C6 >>> 8 ^ T0[(C6 ^ (128 | c8 >> 6 & 63)) & 255];
                C6 = C6 >>> 8 ^ T0[(C6 ^ (128 | c8 & 63)) & 255];
              }
            }
            return ~C6;
          }
          CRC322.table = T0;
          CRC322.bstr = crc32_bstr;
          CRC322.buf = crc32_buf;
          CRC322.str = crc32_str;
          return CRC322;
        }();
        var CFB = function _CFB() {
          var exports2 = {};
          exports2.version = "1.2.2";
          function namecmp(l5, r6) {
            var L2 = l5.split("/"), R2 = r6.split("/");
            for (var i7 = 0, c8 = 0, Z2 = Math.min(L2.length, R2.length); i7 < Z2; ++i7) {
              if (c8 = L2[i7].length - R2[i7].length)
                return c8;
              if (L2[i7] != R2[i7])
                return L2[i7] < R2[i7] ? -1 : 1;
            }
            return L2.length - R2.length;
          }
          function dirname(p2) {
            if (p2.charAt(p2.length - 1) == "/")
              return p2.slice(0, -1).indexOf("/") === -1 ? p2 : dirname(p2.slice(0, -1));
            var c8 = p2.lastIndexOf("/");
            return c8 === -1 ? p2 : p2.slice(0, c8 + 1);
          }
          function filename(p2) {
            if (p2.charAt(p2.length - 1) == "/")
              return filename(p2.slice(0, -1));
            var c8 = p2.lastIndexOf("/");
            return c8 === -1 ? p2 : p2.slice(c8 + 1);
          }
          function write_dos_date(buf, date) {
            if (typeof date === "string")
              date = new Date(date);
            var hms = date.getHours();
            hms = hms << 6 | date.getMinutes();
            hms = hms << 5 | date.getSeconds() >>> 1;
            buf.write_shift(2, hms);
            var ymd = date.getFullYear() - 1980;
            ymd = ymd << 4 | date.getMonth() + 1;
            ymd = ymd << 5 | date.getDate();
            buf.write_shift(2, ymd);
          }
          function parse_dos_date(buf) {
            var hms = buf.read_shift(2) & 65535;
            var ymd = buf.read_shift(2) & 65535;
            var val2 = new Date();
            var d2 = ymd & 31;
            ymd >>>= 5;
            var m4 = ymd & 15;
            ymd >>>= 4;
            val2.setMilliseconds(0);
            val2.setFullYear(ymd + 1980);
            val2.setMonth(m4 - 1);
            val2.setDate(d2);
            var S2 = hms & 31;
            hms >>>= 5;
            var M3 = hms & 63;
            hms >>>= 6;
            val2.setHours(hms);
            val2.setMinutes(M3);
            val2.setSeconds(S2 << 1);
            return val2;
          }
          function parse_extra_field(blob) {
            prep_blob(blob, 0);
            var o6 = {};
            var flags = 0;
            while (blob.l <= blob.length - 4) {
              var type = blob.read_shift(2);
              var sz = blob.read_shift(2), tgt = blob.l + sz;
              var p2 = {};
              switch (type) {
                case 21589:
                  {
                    flags = blob.read_shift(1);
                    if (flags & 1)
                      p2.mtime = blob.read_shift(4);
                    if (sz > 5) {
                      if (flags & 2)
                        p2.atime = blob.read_shift(4);
                      if (flags & 4)
                        p2.ctime = blob.read_shift(4);
                    }
                    if (p2.mtime)
                      p2.mt = new Date(p2.mtime * 1e3);
                  }
                  break;
                case 1:
                  {
                    var sz1 = blob.read_shift(4), sz2 = blob.read_shift(4);
                    p2.usz = sz2 * Math.pow(2, 32) + sz1;
                    sz1 = blob.read_shift(4);
                    sz2 = blob.read_shift(4);
                    p2.csz = sz2 * Math.pow(2, 32) + sz1;
                  }
                  break;
              }
              blob.l = tgt;
              o6[type] = p2;
            }
            return o6;
          }
          var fs;
          function get_fs() {
            return fs || (fs = _fs);
          }
          function parse2(file, options) {
            if (file[0] == 80 && file[1] == 75)
              return parse_zip2(file, options);
            if ((file[0] | 32) == 109 && (file[1] | 32) == 105)
              return parse_mad(file, options);
            if (file.length < 512)
              throw new Error("CFB file size " + file.length + " < 512");
            var mver = 3;
            var ssz = 512;
            var nmfs = 0;
            var difat_sec_cnt = 0;
            var dir_start = 0;
            var minifat_start = 0;
            var difat_start = 0;
            var fat_addrs = [];
            var blob = file.slice(0, 512);
            prep_blob(blob, 0);
            var mv = check_get_mver(blob);
            mver = mv[0];
            switch (mver) {
              case 3:
                ssz = 512;
                break;
              case 4:
                ssz = 4096;
                break;
              case 0:
                if (mv[1] == 0)
                  return parse_zip2(file, options);
              default:
                throw new Error("Major Version: Expected 3 or 4 saw " + mver);
            }
            if (ssz !== 512) {
              blob = file.slice(0, ssz);
              prep_blob(blob, 28);
            }
            var header = file.slice(0, ssz);
            check_shifts(blob, mver);
            var dir_cnt = blob.read_shift(4, "i");
            if (mver === 3 && dir_cnt !== 0)
              throw new Error("# Directory Sectors: Expected 0 saw " + dir_cnt);
            blob.l += 4;
            dir_start = blob.read_shift(4, "i");
            blob.l += 4;
            blob.chk("00100000", "Mini Stream Cutoff Size: ");
            minifat_start = blob.read_shift(4, "i");
            nmfs = blob.read_shift(4, "i");
            difat_start = blob.read_shift(4, "i");
            difat_sec_cnt = blob.read_shift(4, "i");
            for (var q4 = -1, j3 = 0; j3 < 109; ++j3) {
              q4 = blob.read_shift(4, "i");
              if (q4 < 0)
                break;
              fat_addrs[j3] = q4;
            }
            var sectors = sectorify(file, ssz);
            sleuth_fat(difat_start, difat_sec_cnt, sectors, ssz, fat_addrs);
            var sector_list = make_sector_list(sectors, dir_start, fat_addrs, ssz);
            if (dir_start < sector_list.length)
              sector_list[dir_start].name = "!Directory";
            if (nmfs > 0 && minifat_start !== ENDOFCHAIN)
              sector_list[minifat_start].name = "!MiniFAT";
            sector_list[fat_addrs[0]].name = "!FAT";
            sector_list.fat_addrs = fat_addrs;
            sector_list.ssz = ssz;
            var files = {}, Paths = [], FileIndex = [], FullPaths = [];
            read_directory(dir_start, sector_list, sectors, Paths, nmfs, files, FileIndex, minifat_start);
            build_full_paths(FileIndex, FullPaths, Paths);
            Paths.shift();
            var o6 = {
              FileIndex,
              FullPaths
            };
            if (options && options.raw)
              o6.raw = { header, sectors };
            return o6;
          }
          function check_get_mver(blob) {
            if (blob[blob.l] == 80 && blob[blob.l + 1] == 75)
              return [0, 0];
            blob.chk(HEADER_SIGNATURE, "Header Signature: ");
            blob.l += 16;
            var mver = blob.read_shift(2, "u");
            return [blob.read_shift(2, "u"), mver];
          }
          function check_shifts(blob, mver) {
            var shift = 9;
            blob.l += 2;
            switch (shift = blob.read_shift(2)) {
              case 9:
                if (mver != 3)
                  throw new Error("Sector Shift: Expected 9 saw " + shift);
                break;
              case 12:
                if (mver != 4)
                  throw new Error("Sector Shift: Expected 12 saw " + shift);
                break;
              default:
                throw new Error("Sector Shift: Expected 9 or 12 saw " + shift);
            }
            blob.chk("0600", "Mini Sector Shift: ");
            blob.chk("000000000000", "Reserved: ");
          }
          function sectorify(file, ssz) {
            var nsectors = Math.ceil(file.length / ssz) - 1;
            var sectors = [];
            for (var i7 = 1; i7 < nsectors; ++i7)
              sectors[i7 - 1] = file.slice(i7 * ssz, (i7 + 1) * ssz);
            sectors[nsectors - 1] = file.slice(nsectors * ssz);
            return sectors;
          }
          function build_full_paths(FI, FP, Paths) {
            var i7 = 0, L2 = 0, R2 = 0, C6 = 0, j3 = 0, pl = Paths.length;
            var dad = [], q4 = [];
            for (; i7 < pl; ++i7) {
              dad[i7] = q4[i7] = i7;
              FP[i7] = Paths[i7];
            }
            for (; j3 < q4.length; ++j3) {
              i7 = q4[j3];
              L2 = FI[i7].L;
              R2 = FI[i7].R;
              C6 = FI[i7].C;
              if (dad[i7] === i7) {
                if (L2 !== -1 && dad[L2] !== L2)
                  dad[i7] = dad[L2];
                if (R2 !== -1 && dad[R2] !== R2)
                  dad[i7] = dad[R2];
              }
              if (C6 !== -1)
                dad[C6] = i7;
              if (L2 !== -1 && i7 != dad[i7]) {
                dad[L2] = dad[i7];
                if (q4.lastIndexOf(L2) < j3)
                  q4.push(L2);
              }
              if (R2 !== -1 && i7 != dad[i7]) {
                dad[R2] = dad[i7];
                if (q4.lastIndexOf(R2) < j3)
                  q4.push(R2);
              }
            }
            for (i7 = 1; i7 < pl; ++i7)
              if (dad[i7] === i7) {
                if (R2 !== -1 && dad[R2] !== R2)
                  dad[i7] = dad[R2];
                else if (L2 !== -1 && dad[L2] !== L2)
                  dad[i7] = dad[L2];
              }
            for (i7 = 1; i7 < pl; ++i7) {
              if (FI[i7].type === 0)
                continue;
              j3 = i7;
              if (j3 != dad[j3])
                do {
                  j3 = dad[j3];
                  FP[i7] = FP[j3] + "/" + FP[i7];
                } while (j3 !== 0 && -1 !== dad[j3] && j3 != dad[j3]);
              dad[i7] = -1;
            }
            FP[0] += "/";
            for (i7 = 1; i7 < pl; ++i7) {
              if (FI[i7].type !== 2)
                FP[i7] += "/";
            }
          }
          function get_mfat_entry(entry, payload, mini) {
            var start2 = entry.start, size = entry.size;
            var o6 = [];
            var idx = start2;
            while (mini && size > 0 && idx >= 0) {
              o6.push(payload.slice(idx * MSSZ, idx * MSSZ + MSSZ));
              size -= MSSZ;
              idx = __readInt32LE(mini, idx * 4);
            }
            if (o6.length === 0)
              return new_buf(0);
            return bconcat(o6).slice(0, entry.size);
          }
          function sleuth_fat(idx, cnt, sectors, ssz, fat_addrs) {
            var q4 = ENDOFCHAIN;
            if (idx === ENDOFCHAIN) {
              if (cnt !== 0)
                throw new Error("DIFAT chain shorter than expected");
            } else if (idx !== -1) {
              var sector = sectors[idx], m4 = (ssz >>> 2) - 1;
              if (!sector)
                return;
              for (var i7 = 0; i7 < m4; ++i7) {
                if ((q4 = __readInt32LE(sector, i7 * 4)) === ENDOFCHAIN)
                  break;
                fat_addrs.push(q4);
              }
              if (cnt >= 1)
                sleuth_fat(__readInt32LE(sector, ssz - 4), cnt - 1, sectors, ssz, fat_addrs);
            }
          }
          function get_sector_list(sectors, start2, fat_addrs, ssz, chkd) {
            var buf = [], buf_chain = [];
            if (!chkd)
              chkd = [];
            var modulus = ssz - 1, j3 = 0, jj = 0;
            for (j3 = start2; j3 >= 0; ) {
              chkd[j3] = true;
              buf[buf.length] = j3;
              buf_chain.push(sectors[j3]);
              var addr = fat_addrs[Math.floor(j3 * 4 / ssz)];
              jj = j3 * 4 & modulus;
              if (ssz < 4 + jj)
                throw new Error("FAT boundary crossed: " + j3 + " 4 " + ssz);
              if (!sectors[addr])
                break;
              j3 = __readInt32LE(sectors[addr], jj);
            }
            return { nodes: buf, data: __toBuffer([buf_chain]) };
          }
          function make_sector_list(sectors, dir_start, fat_addrs, ssz) {
            var sl = sectors.length, sector_list = [];
            var chkd = [], buf = [], buf_chain = [];
            var modulus = ssz - 1, i7 = 0, j3 = 0, k2 = 0, jj = 0;
            for (i7 = 0; i7 < sl; ++i7) {
              buf = [];
              k2 = i7 + dir_start;
              if (k2 >= sl)
                k2 -= sl;
              if (chkd[k2])
                continue;
              buf_chain = [];
              var seen = [];
              for (j3 = k2; j3 >= 0; ) {
                seen[j3] = true;
                chkd[j3] = true;
                buf[buf.length] = j3;
                buf_chain.push(sectors[j3]);
                var addr = fat_addrs[Math.floor(j3 * 4 / ssz)];
                jj = j3 * 4 & modulus;
                if (ssz < 4 + jj)
                  throw new Error("FAT boundary crossed: " + j3 + " 4 " + ssz);
                if (!sectors[addr])
                  break;
                j3 = __readInt32LE(sectors[addr], jj);
                if (seen[j3])
                  break;
              }
              sector_list[k2] = { nodes: buf, data: __toBuffer([buf_chain]) };
            }
            return sector_list;
          }
          function read_directory(dir_start, sector_list, sectors, Paths, nmfs, files, FileIndex, mini) {
            var minifat_store = 0, pl = Paths.length ? 2 : 0;
            var sector = sector_list[dir_start].data;
            var i7 = 0, namelen = 0, name;
            for (; i7 < sector.length; i7 += 128) {
              var blob = sector.slice(i7, i7 + 128);
              prep_blob(blob, 64);
              namelen = blob.read_shift(2);
              name = __utf16le(blob, 0, namelen - pl);
              Paths.push(name);
              var o6 = {
                name,
                type: blob.read_shift(1),
                color: blob.read_shift(1),
                L: blob.read_shift(4, "i"),
                R: blob.read_shift(4, "i"),
                C: blob.read_shift(4, "i"),
                clsid: blob.read_shift(16),
                state: blob.read_shift(4, "i"),
                start: 0,
                size: 0
              };
              var ctime = blob.read_shift(2) + blob.read_shift(2) + blob.read_shift(2) + blob.read_shift(2);
              if (ctime !== 0)
                o6.ct = read_date(blob, blob.l - 8);
              var mtime = blob.read_shift(2) + blob.read_shift(2) + blob.read_shift(2) + blob.read_shift(2);
              if (mtime !== 0)
                o6.mt = read_date(blob, blob.l - 8);
              o6.start = blob.read_shift(4, "i");
              o6.size = blob.read_shift(4, "i");
              if (o6.size < 0 && o6.start < 0) {
                o6.size = o6.type = 0;
                o6.start = ENDOFCHAIN;
                o6.name = "";
              }
              if (o6.type === 5) {
                minifat_store = o6.start;
                if (nmfs > 0 && minifat_store !== ENDOFCHAIN)
                  sector_list[minifat_store].name = "!StreamData";
              } else if (o6.size >= 4096) {
                o6.storage = "fat";
                if (sector_list[o6.start] === void 0)
                  sector_list[o6.start] = get_sector_list(sectors, o6.start, sector_list.fat_addrs, sector_list.ssz);
                sector_list[o6.start].name = o6.name;
                o6.content = sector_list[o6.start].data.slice(0, o6.size);
              } else {
                o6.storage = "minifat";
                if (o6.size < 0)
                  o6.size = 0;
                else if (minifat_store !== ENDOFCHAIN && o6.start !== ENDOFCHAIN && sector_list[minifat_store]) {
                  o6.content = get_mfat_entry(o6, sector_list[minifat_store].data, (sector_list[mini] || {}).data);
                }
              }
              if (o6.content)
                prep_blob(o6.content, 0);
              files[name] = o6;
              FileIndex.push(o6);
            }
          }
          function read_date(blob, offset) {
            return new Date((__readUInt32LE(blob, offset + 4) / 1e7 * Math.pow(2, 32) + __readUInt32LE(blob, offset) / 1e7 - 11644473600) * 1e3);
          }
          function read_file(filename2, options) {
            get_fs();
            return parse2(fs.readFileSync(filename2), options);
          }
          function read(blob, options) {
            var type = options && options.type;
            if (!type) {
              if (has_buf && Buffer.isBuffer(blob))
                type = "buffer";
            }
            switch (type || "base64") {
              case "file":
                return read_file(blob, options);
              case "base64":
                return parse2(s2a(Base64_decode(blob)), options);
              case "binary":
                return parse2(s2a(blob), options);
            }
            return parse2(blob, options);
          }
          function init_cfb(cfb, opts) {
            var o6 = opts || {}, root = o6.root || "Root Entry";
            if (!cfb.FullPaths)
              cfb.FullPaths = [];
            if (!cfb.FileIndex)
              cfb.FileIndex = [];
            if (cfb.FullPaths.length !== cfb.FileIndex.length)
              throw new Error("inconsistent CFB structure");
            if (cfb.FullPaths.length === 0) {
              cfb.FullPaths[0] = root + "/";
              cfb.FileIndex[0] = { name: root, type: 5 };
            }
            if (o6.CLSID)
              cfb.FileIndex[0].clsid = o6.CLSID;
            seed_cfb(cfb);
          }
          function seed_cfb(cfb) {
            var nm = "Sh33tJ5";
            if (CFB.find(cfb, "/" + nm))
              return;
            var p2 = new_buf(4);
            p2[0] = 55;
            p2[1] = p2[3] = 50;
            p2[2] = 54;
            cfb.FileIndex.push({ name: nm, type: 2, content: p2, size: 4, L: 69, R: 69, C: 69 });
            cfb.FullPaths.push(cfb.FullPaths[0] + nm);
            rebuild_cfb(cfb);
          }
          function rebuild_cfb(cfb, f2) {
            init_cfb(cfb);
            var gc = false, s3 = false;
            for (var i7 = cfb.FullPaths.length - 1; i7 >= 0; --i7) {
              var _file = cfb.FileIndex[i7];
              switch (_file.type) {
                case 0:
                  if (s3)
                    gc = true;
                  else {
                    cfb.FileIndex.pop();
                    cfb.FullPaths.pop();
                  }
                  break;
                case 1:
                case 2:
                case 5:
                  s3 = true;
                  if (isNaN(_file.R * _file.L * _file.C))
                    gc = true;
                  if (_file.R > -1 && _file.L > -1 && _file.R == _file.L)
                    gc = true;
                  break;
                default:
                  gc = true;
                  break;
              }
            }
            if (!gc && !f2)
              return;
            var now = new Date(1987, 1, 19), j3 = 0;
            var fullPaths = Object.create ? /* @__PURE__ */ Object.create(null) : {};
            var data = [];
            for (i7 = 0; i7 < cfb.FullPaths.length; ++i7) {
              fullPaths[cfb.FullPaths[i7]] = true;
              if (cfb.FileIndex[i7].type === 0)
                continue;
              data.push([cfb.FullPaths[i7], cfb.FileIndex[i7]]);
            }
            for (i7 = 0; i7 < data.length; ++i7) {
              var dad = dirname(data[i7][0]);
              s3 = fullPaths[dad];
              while (!s3) {
                while (dirname(dad) && !fullPaths[dirname(dad)])
                  dad = dirname(dad);
                data.push([dad, {
                  name: filename(dad).replace("/", ""),
                  type: 1,
                  clsid: HEADER_CLSID,
                  ct: now,
                  mt: now,
                  content: null
                }]);
                fullPaths[dad] = true;
                dad = dirname(data[i7][0]);
                s3 = fullPaths[dad];
              }
            }
            data.sort(function(x3, y4) {
              return namecmp(x3[0], y4[0]);
            });
            cfb.FullPaths = [];
            cfb.FileIndex = [];
            for (i7 = 0; i7 < data.length; ++i7) {
              cfb.FullPaths[i7] = data[i7][0];
              cfb.FileIndex[i7] = data[i7][1];
            }
            for (i7 = 0; i7 < data.length; ++i7) {
              var elt = cfb.FileIndex[i7];
              var nm = cfb.FullPaths[i7];
              elt.name = filename(nm).replace("/", "");
              elt.L = elt.R = elt.C = -(elt.color = 1);
              elt.size = elt.content ? elt.content.length : 0;
              elt.start = 0;
              elt.clsid = elt.clsid || HEADER_CLSID;
              if (i7 === 0) {
                elt.C = data.length > 1 ? 1 : -1;
                elt.size = 0;
                elt.type = 5;
              } else if (nm.slice(-1) == "/") {
                for (j3 = i7 + 1; j3 < data.length; ++j3)
                  if (dirname(cfb.FullPaths[j3]) == nm)
                    break;
                elt.C = j3 >= data.length ? -1 : j3;
                for (j3 = i7 + 1; j3 < data.length; ++j3)
                  if (dirname(cfb.FullPaths[j3]) == dirname(nm))
                    break;
                elt.R = j3 >= data.length ? -1 : j3;
                elt.type = 1;
              } else {
                if (dirname(cfb.FullPaths[i7 + 1] || "") == dirname(nm))
                  elt.R = i7 + 1;
                elt.type = 2;
              }
            }
          }
          function _write(cfb, options) {
            var _opts = options || {};
            if (_opts.fileType == "mad")
              return write_mad(cfb, _opts);
            rebuild_cfb(cfb);
            switch (_opts.fileType) {
              case "zip":
                return write_zip2(cfb, _opts);
            }
            var L2 = function(cfb2) {
              var mini_size = 0, fat_size = 0;
              for (var i8 = 0; i8 < cfb2.FileIndex.length; ++i8) {
                var file2 = cfb2.FileIndex[i8];
                if (!file2.content)
                  continue;
                var flen2 = file2.content.length;
                if (flen2 > 0) {
                  if (flen2 < 4096)
                    mini_size += flen2 + 63 >> 6;
                  else
                    fat_size += flen2 + 511 >> 9;
                }
              }
              var dir_cnt = cfb2.FullPaths.length + 3 >> 2;
              var mini_cnt = mini_size + 7 >> 3;
              var mfat_cnt = mini_size + 127 >> 7;
              var fat_base = mini_cnt + fat_size + dir_cnt + mfat_cnt;
              var fat_cnt = fat_base + 127 >> 7;
              var difat_cnt = fat_cnt <= 109 ? 0 : Math.ceil((fat_cnt - 109) / 127);
              while (fat_base + fat_cnt + difat_cnt + 127 >> 7 > fat_cnt)
                difat_cnt = ++fat_cnt <= 109 ? 0 : Math.ceil((fat_cnt - 109) / 127);
              var L3 = [1, difat_cnt, fat_cnt, mfat_cnt, dir_cnt, fat_size, mini_size, 0];
              cfb2.FileIndex[0].size = mini_size << 6;
              L3[7] = (cfb2.FileIndex[0].start = L3[0] + L3[1] + L3[2] + L3[3] + L3[4] + L3[5]) + (L3[6] + 7 >> 3);
              return L3;
            }(cfb);
            var o6 = new_buf(L2[7] << 9);
            var i7 = 0, T3 = 0;
            {
              for (i7 = 0; i7 < 8; ++i7)
                o6.write_shift(1, HEADER_SIG[i7]);
              for (i7 = 0; i7 < 8; ++i7)
                o6.write_shift(2, 0);
              o6.write_shift(2, 62);
              o6.write_shift(2, 3);
              o6.write_shift(2, 65534);
              o6.write_shift(2, 9);
              o6.write_shift(2, 6);
              for (i7 = 0; i7 < 3; ++i7)
                o6.write_shift(2, 0);
              o6.write_shift(4, 0);
              o6.write_shift(4, L2[2]);
              o6.write_shift(4, L2[0] + L2[1] + L2[2] + L2[3] - 1);
              o6.write_shift(4, 0);
              o6.write_shift(4, 1 << 12);
              o6.write_shift(4, L2[3] ? L2[0] + L2[1] + L2[2] - 1 : ENDOFCHAIN);
              o6.write_shift(4, L2[3]);
              o6.write_shift(-4, L2[1] ? L2[0] - 1 : ENDOFCHAIN);
              o6.write_shift(4, L2[1]);
              for (i7 = 0; i7 < 109; ++i7)
                o6.write_shift(-4, i7 < L2[2] ? L2[1] + i7 : -1);
            }
            if (L2[1]) {
              for (T3 = 0; T3 < L2[1]; ++T3) {
                for (; i7 < 236 + T3 * 127; ++i7)
                  o6.write_shift(-4, i7 < L2[2] ? L2[1] + i7 : -1);
                o6.write_shift(-4, T3 === L2[1] - 1 ? ENDOFCHAIN : T3 + 1);
              }
            }
            var chainit = function(w3) {
              for (T3 += w3; i7 < T3 - 1; ++i7)
                o6.write_shift(-4, i7 + 1);
              if (w3) {
                ++i7;
                o6.write_shift(-4, ENDOFCHAIN);
              }
            };
            T3 = i7 = 0;
            for (T3 += L2[1]; i7 < T3; ++i7)
              o6.write_shift(-4, consts.DIFSECT);
            for (T3 += L2[2]; i7 < T3; ++i7)
              o6.write_shift(-4, consts.FATSECT);
            chainit(L2[3]);
            chainit(L2[4]);
            var j3 = 0, flen = 0;
            var file = cfb.FileIndex[0];
            for (; j3 < cfb.FileIndex.length; ++j3) {
              file = cfb.FileIndex[j3];
              if (!file.content)
                continue;
              flen = file.content.length;
              if (flen < 4096)
                continue;
              file.start = T3;
              chainit(flen + 511 >> 9);
            }
            chainit(L2[6] + 7 >> 3);
            while (o6.l & 511)
              o6.write_shift(-4, consts.ENDOFCHAIN);
            T3 = i7 = 0;
            for (j3 = 0; j3 < cfb.FileIndex.length; ++j3) {
              file = cfb.FileIndex[j3];
              if (!file.content)
                continue;
              flen = file.content.length;
              if (!flen || flen >= 4096)
                continue;
              file.start = T3;
              chainit(flen + 63 >> 6);
            }
            while (o6.l & 511)
              o6.write_shift(-4, consts.ENDOFCHAIN);
            for (i7 = 0; i7 < L2[4] << 2; ++i7) {
              var nm = cfb.FullPaths[i7];
              if (!nm || nm.length === 0) {
                for (j3 = 0; j3 < 17; ++j3)
                  o6.write_shift(4, 0);
                for (j3 = 0; j3 < 3; ++j3)
                  o6.write_shift(4, -1);
                for (j3 = 0; j3 < 12; ++j3)
                  o6.write_shift(4, 0);
                continue;
              }
              file = cfb.FileIndex[i7];
              if (i7 === 0)
                file.start = file.size ? file.start - 1 : ENDOFCHAIN;
              var _nm = i7 === 0 && _opts.root || file.name;
              if (_nm.length > 31) {
                console.error("Name " + _nm + " will be truncated to " + _nm.slice(0, 31));
                _nm = _nm.slice(0, 31);
              }
              flen = 2 * (_nm.length + 1);
              o6.write_shift(64, _nm, "utf16le");
              o6.write_shift(2, flen);
              o6.write_shift(1, file.type);
              o6.write_shift(1, file.color);
              o6.write_shift(-4, file.L);
              o6.write_shift(-4, file.R);
              o6.write_shift(-4, file.C);
              if (!file.clsid)
                for (j3 = 0; j3 < 4; ++j3)
                  o6.write_shift(4, 0);
              else
                o6.write_shift(16, file.clsid, "hex");
              o6.write_shift(4, file.state || 0);
              o6.write_shift(4, 0);
              o6.write_shift(4, 0);
              o6.write_shift(4, 0);
              o6.write_shift(4, 0);
              o6.write_shift(4, file.start);
              o6.write_shift(4, file.size);
              o6.write_shift(4, 0);
            }
            for (i7 = 1; i7 < cfb.FileIndex.length; ++i7) {
              file = cfb.FileIndex[i7];
              if (file.size >= 4096) {
                o6.l = file.start + 1 << 9;
                if (has_buf && Buffer.isBuffer(file.content)) {
                  file.content.copy(o6, o6.l, 0, file.size);
                  o6.l += file.size + 511 & -512;
                } else {
                  for (j3 = 0; j3 < file.size; ++j3)
                    o6.write_shift(1, file.content[j3]);
                  for (; j3 & 511; ++j3)
                    o6.write_shift(1, 0);
                }
              }
            }
            for (i7 = 1; i7 < cfb.FileIndex.length; ++i7) {
              file = cfb.FileIndex[i7];
              if (file.size > 0 && file.size < 4096) {
                if (has_buf && Buffer.isBuffer(file.content)) {
                  file.content.copy(o6, o6.l, 0, file.size);
                  o6.l += file.size + 63 & -64;
                } else {
                  for (j3 = 0; j3 < file.size; ++j3)
                    o6.write_shift(1, file.content[j3]);
                  for (; j3 & 63; ++j3)
                    o6.write_shift(1, 0);
                }
              }
            }
            if (has_buf) {
              o6.l = o6.length;
            } else {
              while (o6.l < o6.length)
                o6.write_shift(1, 0);
            }
            return o6;
          }
          function find(cfb, path2) {
            var UCFullPaths = cfb.FullPaths.map(function(x3) {
              return x3.toUpperCase();
            });
            var UCPaths = UCFullPaths.map(function(x3) {
              var y4 = x3.split("/");
              return y4[y4.length - (x3.slice(-1) == "/" ? 2 : 1)];
            });
            var k2 = false;
            if (path2.charCodeAt(0) === 47) {
              k2 = true;
              path2 = UCFullPaths[0].slice(0, -1) + path2;
            } else
              k2 = path2.indexOf("/") !== -1;
            var UCPath = path2.toUpperCase();
            var w3 = k2 === true ? UCFullPaths.indexOf(UCPath) : UCPaths.indexOf(UCPath);
            if (w3 !== -1)
              return cfb.FileIndex[w3];
            var m4 = !UCPath.match(chr1);
            UCPath = UCPath.replace(chr0, "");
            if (m4)
              UCPath = UCPath.replace(chr1, "!");
            for (w3 = 0; w3 < UCFullPaths.length; ++w3) {
              if ((m4 ? UCFullPaths[w3].replace(chr1, "!") : UCFullPaths[w3]).replace(chr0, "") == UCPath)
                return cfb.FileIndex[w3];
              if ((m4 ? UCPaths[w3].replace(chr1, "!") : UCPaths[w3]).replace(chr0, "") == UCPath)
                return cfb.FileIndex[w3];
            }
            return null;
          }
          var MSSZ = 64;
          var ENDOFCHAIN = -2;
          var HEADER_SIGNATURE = "d0cf11e0a1b11ae1";
          var HEADER_SIG = [208, 207, 17, 224, 161, 177, 26, 225];
          var HEADER_CLSID = "00000000000000000000000000000000";
          var consts = {
            MAXREGSECT: -6,
            DIFSECT: -4,
            FATSECT: -3,
            ENDOFCHAIN,
            FREESECT: -1,
            HEADER_SIGNATURE,
            HEADER_MINOR_VERSION: "3e00",
            MAXREGSID: -6,
            NOSTREAM: -1,
            HEADER_CLSID,
            EntryTypes: ["unknown", "storage", "stream", "lockbytes", "property", "root"]
          };
          function write_file(cfb, filename2, options) {
            get_fs();
            var o6 = _write(cfb, options);
            fs.writeFileSync(filename2, o6);
          }
          function a2s2(o6) {
            var out = new Array(o6.length);
            for (var i7 = 0; i7 < o6.length; ++i7)
              out[i7] = String.fromCharCode(o6[i7]);
            return out.join("");
          }
          function write(cfb, options) {
            var o6 = _write(cfb, options);
            switch (options && options.type || "buffer") {
              case "file":
                get_fs();
                fs.writeFileSync(options.filename, o6);
                return o6;
              case "binary":
                return typeof o6 == "string" ? o6 : a2s2(o6);
              case "base64":
                return Base64_encode(typeof o6 == "string" ? o6 : a2s2(o6));
              case "buffer":
                if (has_buf)
                  return Buffer.isBuffer(o6) ? o6 : Buffer_from(o6);
              case "array":
                return typeof o6 == "string" ? s2a(o6) : o6;
            }
            return o6;
          }
          var _zlib;
          function use_zlib(zlib) {
            try {
              var InflateRaw = zlib.InflateRaw;
              var InflRaw = new InflateRaw();
              InflRaw._processChunk(new Uint8Array([3, 0]), InflRaw._finishFlushFlag);
              if (InflRaw.bytesRead)
                _zlib = zlib;
              else
                throw new Error("zlib does not expose bytesRead");
            } catch (e7) {
              console.error("cannot use native zlib: " + (e7.message || e7));
            }
          }
          function _inflateRawSync(payload, usz) {
            if (!_zlib)
              return _inflate(payload, usz);
            var InflateRaw = _zlib.InflateRaw;
            var InflRaw = new InflateRaw();
            var out = InflRaw._processChunk(payload.slice(payload.l), InflRaw._finishFlushFlag);
            payload.l += InflRaw.bytesRead;
            return out;
          }
          function _deflateRawSync(payload) {
            return _zlib ? _zlib.deflateRawSync(payload) : _deflate(payload);
          }
          var CLEN_ORDER = [16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15];
          var LEN_LN = [3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 17, 19, 23, 27, 31, 35, 43, 51, 59, 67, 83, 99, 115, 131, 163, 195, 227, 258];
          var DST_LN = [1, 2, 3, 4, 5, 7, 9, 13, 17, 25, 33, 49, 65, 97, 129, 193, 257, 385, 513, 769, 1025, 1537, 2049, 3073, 4097, 6145, 8193, 12289, 16385, 24577];
          function bit_swap_8(n6) {
            var t5 = (n6 << 1 | n6 << 11) & 139536 | (n6 << 5 | n6 << 15) & 558144;
            return (t5 >> 16 | t5 >> 8 | t5) & 255;
          }
          var use_typed_arrays = typeof Uint8Array !== "undefined";
          var bitswap8 = use_typed_arrays ? new Uint8Array(1 << 8) : [];
          for (var q3 = 0; q3 < 1 << 8; ++q3)
            bitswap8[q3] = bit_swap_8(q3);
          function bit_swap_n(n6, b3) {
            var rev = bitswap8[n6 & 255];
            if (b3 <= 8)
              return rev >>> 8 - b3;
            rev = rev << 8 | bitswap8[n6 >> 8 & 255];
            if (b3 <= 16)
              return rev >>> 16 - b3;
            rev = rev << 8 | bitswap8[n6 >> 16 & 255];
            return rev >>> 24 - b3;
          }
          function read_bits_2(buf, bl) {
            var w3 = bl & 7, h = bl >>> 3;
            return (buf[h] | (w3 <= 6 ? 0 : buf[h + 1] << 8)) >>> w3 & 3;
          }
          function read_bits_3(buf, bl) {
            var w3 = bl & 7, h = bl >>> 3;
            return (buf[h] | (w3 <= 5 ? 0 : buf[h + 1] << 8)) >>> w3 & 7;
          }
          function read_bits_4(buf, bl) {
            var w3 = bl & 7, h = bl >>> 3;
            return (buf[h] | (w3 <= 4 ? 0 : buf[h + 1] << 8)) >>> w3 & 15;
          }
          function read_bits_5(buf, bl) {
            var w3 = bl & 7, h = bl >>> 3;
            return (buf[h] | (w3 <= 3 ? 0 : buf[h + 1] << 8)) >>> w3 & 31;
          }
          function read_bits_7(buf, bl) {
            var w3 = bl & 7, h = bl >>> 3;
            return (buf[h] | (w3 <= 1 ? 0 : buf[h + 1] << 8)) >>> w3 & 127;
          }
          function read_bits_n(buf, bl, n6) {
            var w3 = bl & 7, h = bl >>> 3, f2 = (1 << n6) - 1;
            var v4 = buf[h] >>> w3;
            if (n6 < 8 - w3)
              return v4 & f2;
            v4 |= buf[h + 1] << 8 - w3;
            if (n6 < 16 - w3)
              return v4 & f2;
            v4 |= buf[h + 2] << 16 - w3;
            if (n6 < 24 - w3)
              return v4 & f2;
            v4 |= buf[h + 3] << 24 - w3;
            return v4 & f2;
          }
          function write_bits_3(buf, bl, v4) {
            var w3 = bl & 7, h = bl >>> 3;
            if (w3 <= 5)
              buf[h] |= (v4 & 7) << w3;
            else {
              buf[h] |= v4 << w3 & 255;
              buf[h + 1] = (v4 & 7) >> 8 - w3;
            }
            return bl + 3;
          }
          function write_bits_1(buf, bl, v4) {
            var w3 = bl & 7, h = bl >>> 3;
            v4 = (v4 & 1) << w3;
            buf[h] |= v4;
            return bl + 1;
          }
          function write_bits_8(buf, bl, v4) {
            var w3 = bl & 7, h = bl >>> 3;
            v4 <<= w3;
            buf[h] |= v4 & 255;
            v4 >>>= 8;
            buf[h + 1] = v4;
            return bl + 8;
          }
          function write_bits_16(buf, bl, v4) {
            var w3 = bl & 7, h = bl >>> 3;
            v4 <<= w3;
            buf[h] |= v4 & 255;
            v4 >>>= 8;
            buf[h + 1] = v4 & 255;
            buf[h + 2] = v4 >>> 8;
            return bl + 16;
          }
          function realloc(b3, sz) {
            var L2 = b3.length, M3 = 2 * L2 > sz ? 2 * L2 : sz + 5, i7 = 0;
            if (L2 >= sz)
              return b3;
            if (has_buf) {
              var o6 = new_unsafe_buf(M3);
              if (b3.copy)
                b3.copy(o6);
              else
                for (; i7 < b3.length; ++i7)
                  o6[i7] = b3[i7];
              return o6;
            } else if (use_typed_arrays) {
              var a2 = new Uint8Array(M3);
              if (a2.set)
                a2.set(b3);
              else
                for (; i7 < L2; ++i7)
                  a2[i7] = b3[i7];
              return a2;
            }
            b3.length = M3;
            return b3;
          }
          function zero_fill_array(n6) {
            var o6 = new Array(n6);
            for (var i7 = 0; i7 < n6; ++i7)
              o6[i7] = 0;
            return o6;
          }
          function build_tree(clens, cmap, MAX) {
            var maxlen = 1, w3 = 0, i7 = 0, j3 = 0, ccode = 0, L2 = clens.length;
            var bl_count = use_typed_arrays ? new Uint16Array(32) : zero_fill_array(32);
            for (i7 = 0; i7 < 32; ++i7)
              bl_count[i7] = 0;
            for (i7 = L2; i7 < MAX; ++i7)
              clens[i7] = 0;
            L2 = clens.length;
            var ctree = use_typed_arrays ? new Uint16Array(L2) : zero_fill_array(L2);
            for (i7 = 0; i7 < L2; ++i7) {
              bl_count[w3 = clens[i7]]++;
              if (maxlen < w3)
                maxlen = w3;
              ctree[i7] = 0;
            }
            bl_count[0] = 0;
            for (i7 = 1; i7 <= maxlen; ++i7)
              bl_count[i7 + 16] = ccode = ccode + bl_count[i7 - 1] << 1;
            for (i7 = 0; i7 < L2; ++i7) {
              ccode = clens[i7];
              if (ccode != 0)
                ctree[i7] = bl_count[ccode + 16]++;
            }
            var cleni = 0;
            for (i7 = 0; i7 < L2; ++i7) {
              cleni = clens[i7];
              if (cleni != 0) {
                ccode = bit_swap_n(ctree[i7], maxlen) >> maxlen - cleni;
                for (j3 = (1 << maxlen + 4 - cleni) - 1; j3 >= 0; --j3)
                  cmap[ccode | j3 << cleni] = cleni & 15 | i7 << 4;
              }
            }
            return maxlen;
          }
          var fix_lmap = use_typed_arrays ? new Uint16Array(512) : zero_fill_array(512);
          var fix_dmap = use_typed_arrays ? new Uint16Array(32) : zero_fill_array(32);
          if (!use_typed_arrays) {
            for (var i6 = 0; i6 < 512; ++i6)
              fix_lmap[i6] = 0;
            for (i6 = 0; i6 < 32; ++i6)
              fix_dmap[i6] = 0;
          }
          (function() {
            var dlens = [];
            var i7 = 0;
            for (; i7 < 32; i7++)
              dlens.push(5);
            build_tree(dlens, fix_dmap, 32);
            var clens = [];
            i7 = 0;
            for (; i7 <= 143; i7++)
              clens.push(8);
            for (; i7 <= 255; i7++)
              clens.push(9);
            for (; i7 <= 279; i7++)
              clens.push(7);
            for (; i7 <= 287; i7++)
              clens.push(8);
            build_tree(clens, fix_lmap, 288);
          })();
          var _deflateRaw = function _deflateRawIIFE() {
            var DST_LN_RE = use_typed_arrays ? new Uint8Array(32768) : [];
            var j3 = 0, k2 = 0;
            for (; j3 < DST_LN.length - 1; ++j3) {
              for (; k2 < DST_LN[j3 + 1]; ++k2)
                DST_LN_RE[k2] = j3;
            }
            for (; k2 < 32768; ++k2)
              DST_LN_RE[k2] = 29;
            var LEN_LN_RE = use_typed_arrays ? new Uint8Array(259) : [];
            for (j3 = 0, k2 = 0; j3 < LEN_LN.length - 1; ++j3) {
              for (; k2 < LEN_LN[j3 + 1]; ++k2)
                LEN_LN_RE[k2] = j3;
            }
            function write_stored(data, out) {
              var boff = 0;
              while (boff < data.length) {
                var L2 = Math.min(65535, data.length - boff);
                var h = boff + L2 == data.length;
                out.write_shift(1, +h);
                out.write_shift(2, L2);
                out.write_shift(2, ~L2 & 65535);
                while (L2-- > 0)
                  out[out.l++] = data[boff++];
              }
              return out.l;
            }
            function write_huff_fixed(data, out) {
              var bl = 0;
              var boff = 0;
              var addrs = use_typed_arrays ? new Uint16Array(32768) : [];
              while (boff < data.length) {
                var L2 = Math.min(65535, data.length - boff);
                if (L2 < 10) {
                  bl = write_bits_3(out, bl, +!!(boff + L2 == data.length));
                  if (bl & 7)
                    bl += 8 - (bl & 7);
                  out.l = bl / 8 | 0;
                  out.write_shift(2, L2);
                  out.write_shift(2, ~L2 & 65535);
                  while (L2-- > 0)
                    out[out.l++] = data[boff++];
                  bl = out.l * 8;
                  continue;
                }
                bl = write_bits_3(out, bl, +!!(boff + L2 == data.length) + 2);
                var hash = 0;
                while (L2-- > 0) {
                  var d2 = data[boff];
                  hash = (hash << 5 ^ d2) & 32767;
                  var match = -1, mlen = 0;
                  if (match = addrs[hash]) {
                    match |= boff & ~32767;
                    if (match > boff)
                      match -= 32768;
                    if (match < boff)
                      while (data[match + mlen] == data[boff + mlen] && mlen < 250)
                        ++mlen;
                  }
                  if (mlen > 2) {
                    d2 = LEN_LN_RE[mlen];
                    if (d2 <= 22)
                      bl = write_bits_8(out, bl, bitswap8[d2 + 1] >> 1) - 1;
                    else {
                      write_bits_8(out, bl, 3);
                      bl += 5;
                      write_bits_8(out, bl, bitswap8[d2 - 23] >> 5);
                      bl += 3;
                    }
                    var len_eb = d2 < 8 ? 0 : d2 - 4 >> 2;
                    if (len_eb > 0) {
                      write_bits_16(out, bl, mlen - LEN_LN[d2]);
                      bl += len_eb;
                    }
                    d2 = DST_LN_RE[boff - match];
                    bl = write_bits_8(out, bl, bitswap8[d2] >> 3);
                    bl -= 3;
                    var dst_eb = d2 < 4 ? 0 : d2 - 2 >> 1;
                    if (dst_eb > 0) {
                      write_bits_16(out, bl, boff - match - DST_LN[d2]);
                      bl += dst_eb;
                    }
                    for (var q4 = 0; q4 < mlen; ++q4) {
                      addrs[hash] = boff & 32767;
                      hash = (hash << 5 ^ data[boff]) & 32767;
                      ++boff;
                    }
                    L2 -= mlen - 1;
                  } else {
                    if (d2 <= 143)
                      d2 = d2 + 48;
                    else
                      bl = write_bits_1(out, bl, 1);
                    bl = write_bits_8(out, bl, bitswap8[d2]);
                    addrs[hash] = boff & 32767;
                    ++boff;
                  }
                }
                bl = write_bits_8(out, bl, 0) - 1;
              }
              out.l = (bl + 7) / 8 | 0;
              return out.l;
            }
            return function _deflateRaw2(data, out) {
              if (data.length < 8)
                return write_stored(data, out);
              return write_huff_fixed(data, out);
            };
          }();
          function _deflate(data) {
            var buf = new_buf(50 + Math.floor(data.length * 1.1));
            var off = _deflateRaw(data, buf);
            return buf.slice(0, off);
          }
          var dyn_lmap = use_typed_arrays ? new Uint16Array(32768) : zero_fill_array(32768);
          var dyn_dmap = use_typed_arrays ? new Uint16Array(32768) : zero_fill_array(32768);
          var dyn_cmap = use_typed_arrays ? new Uint16Array(128) : zero_fill_array(128);
          var dyn_len_1 = 1, dyn_len_2 = 1;
          function dyn(data, boff) {
            var _HLIT = read_bits_5(data, boff) + 257;
            boff += 5;
            var _HDIST = read_bits_5(data, boff) + 1;
            boff += 5;
            var _HCLEN = read_bits_4(data, boff) + 4;
            boff += 4;
            var w3 = 0;
            var clens = use_typed_arrays ? new Uint8Array(19) : zero_fill_array(19);
            var ctree = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
            var maxlen = 1;
            var bl_count = use_typed_arrays ? new Uint8Array(8) : zero_fill_array(8);
            var next_code = use_typed_arrays ? new Uint8Array(8) : zero_fill_array(8);
            var L2 = clens.length;
            for (var i7 = 0; i7 < _HCLEN; ++i7) {
              clens[CLEN_ORDER[i7]] = w3 = read_bits_3(data, boff);
              if (maxlen < w3)
                maxlen = w3;
              bl_count[w3]++;
              boff += 3;
            }
            var ccode = 0;
            bl_count[0] = 0;
            for (i7 = 1; i7 <= maxlen; ++i7)
              next_code[i7] = ccode = ccode + bl_count[i7 - 1] << 1;
            for (i7 = 0; i7 < L2; ++i7)
              if ((ccode = clens[i7]) != 0)
                ctree[i7] = next_code[ccode]++;
            var cleni = 0;
            for (i7 = 0; i7 < L2; ++i7) {
              cleni = clens[i7];
              if (cleni != 0) {
                ccode = bitswap8[ctree[i7]] >> 8 - cleni;
                for (var j3 = (1 << 7 - cleni) - 1; j3 >= 0; --j3)
                  dyn_cmap[ccode | j3 << cleni] = cleni & 7 | i7 << 3;
              }
            }
            var hcodes = [];
            maxlen = 1;
            for (; hcodes.length < _HLIT + _HDIST; ) {
              ccode = dyn_cmap[read_bits_7(data, boff)];
              boff += ccode & 7;
              switch (ccode >>>= 3) {
                case 16:
                  w3 = 3 + read_bits_2(data, boff);
                  boff += 2;
                  ccode = hcodes[hcodes.length - 1];
                  while (w3-- > 0)
                    hcodes.push(ccode);
                  break;
                case 17:
                  w3 = 3 + read_bits_3(data, boff);
                  boff += 3;
                  while (w3-- > 0)
                    hcodes.push(0);
                  break;
                case 18:
                  w3 = 11 + read_bits_7(data, boff);
                  boff += 7;
                  while (w3-- > 0)
                    hcodes.push(0);
                  break;
                default:
                  hcodes.push(ccode);
                  if (maxlen < ccode)
                    maxlen = ccode;
                  break;
              }
            }
            var h12 = hcodes.slice(0, _HLIT), h22 = hcodes.slice(_HLIT);
            for (i7 = _HLIT; i7 < 286; ++i7)
              h12[i7] = 0;
            for (i7 = _HDIST; i7 < 30; ++i7)
              h22[i7] = 0;
            dyn_len_1 = build_tree(h12, dyn_lmap, 286);
            dyn_len_2 = build_tree(h22, dyn_dmap, 30);
            return boff;
          }
          function inflate(data, usz) {
            if (data[0] == 3 && !(data[1] & 3)) {
              return [new_raw_buf(usz), 2];
            }
            var boff = 0;
            var header = 0;
            var outbuf = new_unsafe_buf(usz ? usz : 1 << 18);
            var woff = 0;
            var OL = outbuf.length >>> 0;
            var max_len_1 = 0, max_len_2 = 0;
            while ((header & 1) == 0) {
              header = read_bits_3(data, boff);
              boff += 3;
              if (header >>> 1 == 0) {
                if (boff & 7)
                  boff += 8 - (boff & 7);
                var sz = data[boff >>> 3] | data[(boff >>> 3) + 1] << 8;
                boff += 32;
                if (sz > 0) {
                  if (!usz && OL < woff + sz) {
                    outbuf = realloc(outbuf, woff + sz);
                    OL = outbuf.length;
                  }
                  while (sz-- > 0) {
                    outbuf[woff++] = data[boff >>> 3];
                    boff += 8;
                  }
                }
                continue;
              } else if (header >> 1 == 1) {
                max_len_1 = 9;
                max_len_2 = 5;
              } else {
                boff = dyn(data, boff);
                max_len_1 = dyn_len_1;
                max_len_2 = dyn_len_2;
              }
              for (; ; ) {
                if (!usz && OL < woff + 32767) {
                  outbuf = realloc(outbuf, woff + 32767);
                  OL = outbuf.length;
                }
                var bits = read_bits_n(data, boff, max_len_1);
                var code = header >>> 1 == 1 ? fix_lmap[bits] : dyn_lmap[bits];
                boff += code & 15;
                code >>>= 4;
                if ((code >>> 8 & 255) === 0)
                  outbuf[woff++] = code;
                else if (code == 256)
                  break;
                else {
                  code -= 257;
                  var len_eb = code < 8 ? 0 : code - 4 >> 2;
                  if (len_eb > 5)
                    len_eb = 0;
                  var tgt = woff + LEN_LN[code];
                  if (len_eb > 0) {
                    tgt += read_bits_n(data, boff, len_eb);
                    boff += len_eb;
                  }
                  bits = read_bits_n(data, boff, max_len_2);
                  code = header >>> 1 == 1 ? fix_dmap[bits] : dyn_dmap[bits];
                  boff += code & 15;
                  code >>>= 4;
                  var dst_eb = code < 4 ? 0 : code - 2 >> 1;
                  var dst = DST_LN[code];
                  if (dst_eb > 0) {
                    dst += read_bits_n(data, boff, dst_eb);
                    boff += dst_eb;
                  }
                  if (!usz && OL < tgt) {
                    outbuf = realloc(outbuf, tgt + 100);
                    OL = outbuf.length;
                  }
                  while (woff < tgt) {
                    outbuf[woff] = outbuf[woff - dst];
                    ++woff;
                  }
                }
              }
            }
            if (usz)
              return [outbuf, boff + 7 >>> 3];
            return [outbuf.slice(0, woff), boff + 7 >>> 3];
          }
          function _inflate(payload, usz) {
            var data = payload.slice(payload.l || 0);
            var out = inflate(data, usz);
            payload.l += out[1];
            return out[0];
          }
          function warn_or_throw(wrn, msg) {
            if (wrn) {
              if (typeof console !== "undefined")
                console.error(msg);
            } else
              throw new Error(msg);
          }
          function parse_zip2(file, options) {
            var blob = file;
            prep_blob(blob, 0);
            var FileIndex = [], FullPaths = [];
            var o6 = {
              FileIndex,
              FullPaths
            };
            init_cfb(o6, { root: options.root });
            var i7 = blob.length - 4;
            while ((blob[i7] != 80 || blob[i7 + 1] != 75 || blob[i7 + 2] != 5 || blob[i7 + 3] != 6) && i7 >= 0)
              --i7;
            blob.l = i7 + 4;
            blob.l += 4;
            var fcnt = blob.read_shift(2);
            blob.l += 6;
            var start_cd = blob.read_shift(4);
            blob.l = start_cd;
            for (i7 = 0; i7 < fcnt; ++i7) {
              blob.l += 20;
              var csz = blob.read_shift(4);
              var usz = blob.read_shift(4);
              var namelen = blob.read_shift(2);
              var efsz = blob.read_shift(2);
              var fcsz = blob.read_shift(2);
              blob.l += 8;
              var offset = blob.read_shift(4);
              var EF = parse_extra_field(blob.slice(blob.l + namelen, blob.l + namelen + efsz));
              blob.l += namelen + efsz + fcsz;
              var L2 = blob.l;
              blob.l = offset + 4;
              if (EF && EF[1]) {
                if ((EF[1] || {}).usz)
                  usz = EF[1].usz;
                if ((EF[1] || {}).csz)
                  csz = EF[1].csz;
              }
              parse_local_file(blob, csz, usz, o6, EF);
              blob.l = L2;
            }
            return o6;
          }
          function parse_local_file(blob, csz, usz, o6, EF) {
            blob.l += 2;
            var flags = blob.read_shift(2);
            var meth = blob.read_shift(2);
            var date = parse_dos_date(blob);
            if (flags & 8257)
              throw new Error("Unsupported ZIP encryption");
            var crc32 = blob.read_shift(4);
            var _csz = blob.read_shift(4);
            var _usz = blob.read_shift(4);
            var namelen = blob.read_shift(2);
            var efsz = blob.read_shift(2);
            var name = "";
            for (var i7 = 0; i7 < namelen; ++i7)
              name += String.fromCharCode(blob[blob.l++]);
            if (efsz) {
              var ef = parse_extra_field(blob.slice(blob.l, blob.l + efsz));
              if ((ef[21589] || {}).mt)
                date = ef[21589].mt;
              if ((ef[1] || {}).usz)
                _usz = ef[1].usz;
              if ((ef[1] || {}).csz)
                _csz = ef[1].csz;
              if (EF) {
                if ((EF[21589] || {}).mt)
                  date = EF[21589].mt;
                if ((EF[1] || {}).usz)
                  _usz = EF[1].usz;
                if ((EF[1] || {}).csz)
                  _csz = EF[1].csz;
              }
            }
            blob.l += efsz;
            var data = blob.slice(blob.l, blob.l + _csz);
            switch (meth) {
              case 8:
                data = _inflateRawSync(blob, _usz);
                break;
              case 0:
                blob.l += _csz;
                break;
              default:
                throw new Error("Unsupported ZIP Compression method " + meth);
            }
            var wrn = false;
            if (flags & 8) {
              crc32 = blob.read_shift(4);
              if (crc32 == 134695760) {
                crc32 = blob.read_shift(4);
                wrn = true;
              }
              _csz = blob.read_shift(4);
              _usz = blob.read_shift(4);
            }
            if (_csz != csz)
              warn_or_throw(wrn, "Bad compressed size: " + csz + " != " + _csz);
            if (_usz != usz)
              warn_or_throw(wrn, "Bad uncompressed size: " + usz + " != " + _usz);
            cfb_add(o6, name, data, { unsafe: true, mt: date });
          }
          function write_zip2(cfb, options) {
            var _opts = options || {};
            var out = [], cdirs = [];
            var o6 = new_buf(1);
            var method = _opts.compression ? 8 : 0, flags = 0;
            var desc = false;
            if (desc)
              flags |= 8;
            var i7 = 0, j3 = 0;
            var start_cd = 0, fcnt = 0;
            var root = cfb.FullPaths[0], fp = root, fi = cfb.FileIndex[0];
            var crcs = [];
            var sz_cd = 0;
            for (i7 = 1; i7 < cfb.FullPaths.length; ++i7) {
              fp = cfb.FullPaths[i7].slice(root.length);
              fi = cfb.FileIndex[i7];
              if (!fi.size || !fi.content || Array.isArray(fi.content) && fi.content.length == 0 || fp == "Sh33tJ5")
                continue;
              var start2 = start_cd;
              var namebuf = new_buf(fp.length);
              for (j3 = 0; j3 < fp.length; ++j3)
                namebuf.write_shift(1, fp.charCodeAt(j3) & 127);
              namebuf = namebuf.slice(0, namebuf.l);
              crcs[fcnt] = typeof fi.content == "string" ? CRC32.bstr(fi.content, 0) : CRC32.buf(fi.content, 0);
              var outbuf = typeof fi.content == "string" ? s2a(fi.content) : fi.content;
              if (method == 8)
                outbuf = _deflateRawSync(outbuf);
              o6 = new_buf(30);
              o6.write_shift(4, 67324752);
              o6.write_shift(2, 20);
              o6.write_shift(2, flags);
              o6.write_shift(2, method);
              if (fi.mt)
                write_dos_date(o6, fi.mt);
              else
                o6.write_shift(4, 0);
              o6.write_shift(-4, flags & 8 ? 0 : crcs[fcnt]);
              o6.write_shift(4, flags & 8 ? 0 : outbuf.length);
              o6.write_shift(4, flags & 8 ? 0 : fi.content.length);
              o6.write_shift(2, namebuf.length);
              o6.write_shift(2, 0);
              start_cd += o6.length;
              out.push(o6);
              start_cd += namebuf.length;
              out.push(namebuf);
              start_cd += outbuf.length;
              out.push(outbuf);
              if (flags & 8) {
                o6 = new_buf(12);
                o6.write_shift(-4, crcs[fcnt]);
                o6.write_shift(4, outbuf.length);
                o6.write_shift(4, fi.content.length);
                start_cd += o6.l;
                out.push(o6);
              }
              o6 = new_buf(46);
              o6.write_shift(4, 33639248);
              o6.write_shift(2, 0);
              o6.write_shift(2, 20);
              o6.write_shift(2, flags);
              o6.write_shift(2, method);
              o6.write_shift(4, 0);
              o6.write_shift(-4, crcs[fcnt]);
              o6.write_shift(4, outbuf.length);
              o6.write_shift(4, fi.content.length);
              o6.write_shift(2, namebuf.length);
              o6.write_shift(2, 0);
              o6.write_shift(2, 0);
              o6.write_shift(2, 0);
              o6.write_shift(2, 0);
              o6.write_shift(4, 0);
              o6.write_shift(4, start2);
              sz_cd += o6.l;
              cdirs.push(o6);
              sz_cd += namebuf.length;
              cdirs.push(namebuf);
              ++fcnt;
            }
            o6 = new_buf(22);
            o6.write_shift(4, 101010256);
            o6.write_shift(2, 0);
            o6.write_shift(2, 0);
            o6.write_shift(2, fcnt);
            o6.write_shift(2, fcnt);
            o6.write_shift(4, sz_cd);
            o6.write_shift(4, start_cd);
            o6.write_shift(2, 0);
            return bconcat([bconcat(out), bconcat(cdirs), o6]);
          }
          var ContentTypeMap = {
            "htm": "text/html",
            "xml": "text/xml",
            "gif": "image/gif",
            "jpg": "image/jpeg",
            "png": "image/png",
            "mso": "application/x-mso",
            "thmx": "application/vnd.ms-officetheme",
            "sh33tj5": "application/octet-stream"
          };
          function get_content_type(fi, fp) {
            if (fi.ctype)
              return fi.ctype;
            var ext = fi.name || "", m4 = ext.match(/\.([^\.]+)$/);
            if (m4 && ContentTypeMap[m4[1]])
              return ContentTypeMap[m4[1]];
            if (fp) {
              m4 = (ext = fp).match(/[\.\\]([^\.\\])+$/);
              if (m4 && ContentTypeMap[m4[1]])
                return ContentTypeMap[m4[1]];
            }
            return "application/octet-stream";
          }
          function write_base64_76(bstr) {
            var data = Base64_encode(bstr);
            var o6 = [];
            for (var i7 = 0; i7 < data.length; i7 += 76)
              o6.push(data.slice(i7, i7 + 76));
            return o6.join("\r\n") + "\r\n";
          }
          function write_quoted_printable(text) {
            var encoded = text.replace(/[\x00-\x08\x0B\x0C\x0E-\x1F\x7E-\xFF=]/g, function(c8) {
              var w3 = c8.charCodeAt(0).toString(16).toUpperCase();
              return "=" + (w3.length == 1 ? "0" + w3 : w3);
            });
            encoded = encoded.replace(/ $/mg, "=20").replace(/\t$/mg, "=09");
            if (encoded.charAt(0) == "\n")
              encoded = "=0D" + encoded.slice(1);
            encoded = encoded.replace(/\r(?!\n)/mg, "=0D").replace(/\n\n/mg, "\n=0A").replace(/([^\r\n])\n/mg, "$1=0A");
            var o6 = [], split = encoded.split("\r\n");
            for (var si = 0; si < split.length; ++si) {
              var str = split[si];
              if (str.length == 0) {
                o6.push("");
                continue;
              }
              for (var i7 = 0; i7 < str.length; ) {
                var end = 76;
                var tmp = str.slice(i7, i7 + end);
                if (tmp.charAt(end - 1) == "=")
                  end--;
                else if (tmp.charAt(end - 2) == "=")
                  end -= 2;
                else if (tmp.charAt(end - 3) == "=")
                  end -= 3;
                tmp = str.slice(i7, i7 + end);
                i7 += end;
                if (i7 < str.length)
                  tmp += "=";
                o6.push(tmp);
              }
            }
            return o6.join("\r\n");
          }
          function parse_quoted_printable(data) {
            var o6 = [];
            for (var di = 0; di < data.length; ++di) {
              var line = data[di];
              while (di <= data.length && line.charAt(line.length - 1) == "=")
                line = line.slice(0, line.length - 1) + data[++di];
              o6.push(line);
            }
            for (var oi = 0; oi < o6.length; ++oi)
              o6[oi] = o6[oi].replace(/[=][0-9A-Fa-f]{2}/g, function($$) {
                return String.fromCharCode(parseInt($$.slice(1), 16));
              });
            return s2a(o6.join("\r\n"));
          }
          function parse_mime(cfb, data, root) {
            var fname = "", cte = "", ctype = "", fdata;
            var di = 0;
            for (; di < 10; ++di) {
              var line = data[di];
              if (!line || line.match(/^\s*$/))
                break;
              var m4 = line.match(/^([^:]*?):\s*([^\s].*)$/);
              if (m4)
                switch (m4[1].toLowerCase()) {
                  case "content-location":
                    fname = m4[2].trim();
                    break;
                  case "content-type":
                    ctype = m4[2].trim();
                    break;
                  case "content-transfer-encoding":
                    cte = m4[2].trim();
                    break;
                }
            }
            ++di;
            switch (cte.toLowerCase()) {
              case "base64":
                fdata = s2a(Base64_decode(data.slice(di).join("")));
                break;
              case "quoted-printable":
                fdata = parse_quoted_printable(data.slice(di));
                break;
              default:
                throw new Error("Unsupported Content-Transfer-Encoding " + cte);
            }
            var file = cfb_add(cfb, fname.slice(root.length), fdata, { unsafe: true });
            if (ctype)
              file.ctype = ctype;
          }
          function parse_mad(file, options) {
            if (a2s2(file.slice(0, 13)).toLowerCase() != "mime-version:")
              throw new Error("Unsupported MAD header");
            var root = options && options.root || "";
            var data = (has_buf && Buffer.isBuffer(file) ? file.toString("binary") : a2s2(file)).split("\r\n");
            var di = 0, row = "";
            for (di = 0; di < data.length; ++di) {
              row = data[di];
              if (!/^Content-Location:/i.test(row))
                continue;
              row = row.slice(row.indexOf("file"));
              if (!root)
                root = row.slice(0, row.lastIndexOf("/") + 1);
              if (row.slice(0, root.length) == root)
                continue;
              while (root.length > 0) {
                root = root.slice(0, root.length - 1);
                root = root.slice(0, root.lastIndexOf("/") + 1);
                if (row.slice(0, root.length) == root)
                  break;
              }
            }
            var mboundary = (data[1] || "").match(/boundary="(.*?)"/);
            if (!mboundary)
              throw new Error("MAD cannot find boundary");
            var boundary = "--" + (mboundary[1] || "");
            var FileIndex = [], FullPaths = [];
            var o6 = {
              FileIndex,
              FullPaths
            };
            init_cfb(o6);
            var start_di, fcnt = 0;
            for (di = 0; di < data.length; ++di) {
              var line = data[di];
              if (line !== boundary && line !== boundary + "--")
                continue;
              if (fcnt++)
                parse_mime(o6, data.slice(start_di, di), root);
              start_di = di;
            }
            return o6;
          }
          function write_mad(cfb, options) {
            var opts = options || {};
            var boundary = opts.boundary || "SheetJS";
            boundary = "------=" + boundary;
            var out = [
              "MIME-Version: 1.0",
              'Content-Type: multipart/related; boundary="' + boundary.slice(2) + '"',
              "",
              "",
              ""
            ];
            var root = cfb.FullPaths[0], fp = root, fi = cfb.FileIndex[0];
            for (var i7 = 1; i7 < cfb.FullPaths.length; ++i7) {
              fp = cfb.FullPaths[i7].slice(root.length);
              fi = cfb.FileIndex[i7];
              if (!fi.size || !fi.content || fp == "Sh33tJ5")
                continue;
              fp = fp.replace(/[\x00-\x08\x0B\x0C\x0E-\x1F\x7E-\xFF]/g, function(c8) {
                return "_x" + c8.charCodeAt(0).toString(16) + "_";
              }).replace(/[\u0080-\uFFFF]/g, function(u5) {
                return "_u" + u5.charCodeAt(0).toString(16) + "_";
              });
              var ca3 = fi.content;
              var cstr = has_buf && Buffer.isBuffer(ca3) ? ca3.toString("binary") : a2s2(ca3);
              var dispcnt = 0, L2 = Math.min(1024, cstr.length), cc2 = 0;
              for (var csl = 0; csl <= L2; ++csl)
                if ((cc2 = cstr.charCodeAt(csl)) >= 32 && cc2 < 128)
                  ++dispcnt;
              var qp = dispcnt >= L2 * 4 / 5;
              out.push(boundary);
              out.push("Content-Location: " + (opts.root || "file:///C:/SheetJS/") + fp);
              out.push("Content-Transfer-Encoding: " + (qp ? "quoted-printable" : "base64"));
              out.push("Content-Type: " + get_content_type(fi, fp));
              out.push("");
              out.push(qp ? write_quoted_printable(cstr) : write_base64_76(cstr));
            }
            out.push(boundary + "--\r\n");
            return out.join("\r\n");
          }
          function cfb_new(opts) {
            var o6 = {};
            init_cfb(o6, opts);
            return o6;
          }
          function cfb_add(cfb, name, content2, opts) {
            var unsafe = opts && opts.unsafe;
            if (!unsafe)
              init_cfb(cfb);
            var file = !unsafe && CFB.find(cfb, name);
            if (!file) {
              var fpath = cfb.FullPaths[0];
              if (name.slice(0, fpath.length) == fpath)
                fpath = name;
              else {
                if (fpath.slice(-1) != "/")
                  fpath += "/";
                fpath = (fpath + name).replace("//", "/");
              }
              file = { name: filename(name), type: 2 };
              cfb.FileIndex.push(file);
              cfb.FullPaths.push(fpath);
              if (!unsafe)
                CFB.utils.cfb_gc(cfb);
            }
            file.content = content2;
            file.size = content2 ? content2.length : 0;
            if (opts) {
              if (opts.CLSID)
                file.clsid = opts.CLSID;
              if (opts.mt)
                file.mt = opts.mt;
              if (opts.ct)
                file.ct = opts.ct;
            }
            return file;
          }
          function cfb_del(cfb, name) {
            init_cfb(cfb);
            var file = CFB.find(cfb, name);
            if (file) {
              for (var j3 = 0; j3 < cfb.FileIndex.length; ++j3)
                if (cfb.FileIndex[j3] == file) {
                  cfb.FileIndex.splice(j3, 1);
                  cfb.FullPaths.splice(j3, 1);
                  return true;
                }
            }
            return false;
          }
          function cfb_mov(cfb, old_name, new_name) {
            init_cfb(cfb);
            var file = CFB.find(cfb, old_name);
            if (file) {
              for (var j3 = 0; j3 < cfb.FileIndex.length; ++j3)
                if (cfb.FileIndex[j3] == file) {
                  cfb.FileIndex[j3].name = filename(new_name);
                  cfb.FullPaths[j3] = new_name;
                  return true;
                }
            }
            return false;
          }
          function cfb_gc(cfb) {
            rebuild_cfb(cfb, true);
          }
          exports2.find = find;
          exports2.read = read;
          exports2.parse = parse2;
          exports2.write = write;
          exports2.writeFile = write_file;
          exports2.utils = {
            cfb_new,
            cfb_add,
            cfb_del,
            cfb_mov,
            cfb_gc,
            ReadShift,
            CheckField,
            prep_blob,
            bconcat,
            use_zlib,
            _deflateRaw: _deflate,
            _inflateRaw: _inflate,
            consts
          };
          return exports2;
        }();
        var _fs;
        function set_fs(fs) {
          _fs = fs;
        }
        function blobify(data) {
          if (typeof data === "string")
            return s2ab(data);
          if (Array.isArray(data))
            return a2u(data);
          return data;
        }
        function write_dl(fname, payload, enc) {
          if (typeof _fs !== "undefined" && _fs.writeFileSync)
            return enc ? _fs.writeFileSync(fname, payload, enc) : _fs.writeFileSync(fname, payload);
          if (typeof Deno !== "undefined") {
            if (enc && typeof payload == "string")
              switch (enc) {
                case "utf8":
                  payload = new TextEncoder(enc).encode(payload);
                  break;
                case "binary":
                  payload = s2ab(payload);
                  break;
                default:
                  throw new Error("Unsupported encoding " + enc);
              }
            return Deno.writeFileSync(fname, payload);
          }
          var data = enc == "utf8" ? utf8write(payload) : payload;
          if (typeof IE_SaveFile !== "undefined")
            return IE_SaveFile(data, fname);
          if (typeof Blob !== "undefined") {
            var blob = new Blob([blobify(data)], { type: "application/octet-stream" });
            if (typeof navigator !== "undefined" && navigator.msSaveBlob)
              return navigator.msSaveBlob(blob, fname);
            if (typeof saveAs !== "undefined")
              return saveAs(blob, fname);
            if (typeof URL !== "undefined" && typeof document !== "undefined" && document.createElement && URL.createObjectURL) {
              var url = URL.createObjectURL(blob);
              if (typeof chrome === "object" && typeof (chrome.downloads || {}).download == "function") {
                if (URL.revokeObjectURL && typeof setTimeout !== "undefined")
                  setTimeout(function() {
                    URL.revokeObjectURL(url);
                  }, 6e4);
                return chrome.downloads.download({ url, filename: fname, saveAs: true });
              }
              var a2 = document.createElement("a");
              if (a2.download != null) {
                a2.download = fname;
                a2.href = url;
                document.body.appendChild(a2);
                a2.click();
                document.body.removeChild(a2);
                if (URL.revokeObjectURL && typeof setTimeout !== "undefined")
                  setTimeout(function() {
                    URL.revokeObjectURL(url);
                  }, 6e4);
                return url;
              }
            } else if (typeof URL !== "undefined" && !URL.createObjectURL && typeof chrome === "object") {
              var b64 = "data:application/octet-stream;base64," + Base64_encode_arr(new Uint8Array(blobify(data)));
              return chrome.downloads.download({ url: b64, filename: fname, saveAs: true });
            }
          }
          if (typeof $ !== "undefined" && typeof File !== "undefined" && typeof Folder !== "undefined")
            try {
              var out = File(fname);
              out.open("w");
              out.encoding = "binary";
              if (Array.isArray(payload))
                payload = a2s(payload);
              out.write(payload);
              out.close();
              return payload;
            } catch (e7) {
              if (!e7.message || e7.message.indexOf("onstruct") == -1)
                throw e7;
            }
          throw new Error("cannot save file " + fname);
        }
        function read_binary(path2) {
          if (typeof _fs !== "undefined")
            return _fs.readFileSync(path2);
          if (typeof Deno !== "undefined")
            return Deno.readFileSync(path2);
          if (typeof $ !== "undefined" && typeof File !== "undefined" && typeof Folder !== "undefined")
            try {
              var infile = File(path2);
              infile.open("r");
              infile.encoding = "binary";
              var data = infile.read();
              infile.close();
              return data;
            } catch (e7) {
              if (!e7.message || e7.message.indexOf("onstruct") == -1)
                throw e7;
            }
          throw new Error("Cannot access file " + path2);
        }
        function keys(o6) {
          var ks = Object.keys(o6), o22 = [];
          for (var i6 = 0; i6 < ks.length; ++i6)
            if (Object.prototype.hasOwnProperty.call(o6, ks[i6]))
              o22.push(ks[i6]);
          return o22;
        }
        function evert_key(obj, key) {
          var o6 = [], K2 = keys(obj);
          for (var i6 = 0; i6 !== K2.length; ++i6)
            if (o6[obj[K2[i6]][key]] == null)
              o6[obj[K2[i6]][key]] = K2[i6];
          return o6;
        }
        function evert(obj) {
          var o6 = [], K2 = keys(obj);
          for (var i6 = 0; i6 !== K2.length; ++i6)
            o6[obj[K2[i6]]] = K2[i6];
          return o6;
        }
        function evert_num(obj) {
          var o6 = [], K2 = keys(obj);
          for (var i6 = 0; i6 !== K2.length; ++i6)
            o6[obj[K2[i6]]] = parseInt(K2[i6], 10);
          return o6;
        }
        function evert_arr(obj) {
          var o6 = [], K2 = keys(obj);
          for (var i6 = 0; i6 !== K2.length; ++i6) {
            if (o6[obj[K2[i6]]] == null)
              o6[obj[K2[i6]]] = [];
            o6[obj[K2[i6]]].push(K2[i6]);
          }
          return o6;
        }
        var dnthresh = Date.UTC(1899, 11, 30, 0, 0, 0);
        var dnthresh1 = Date.UTC(1899, 11, 31, 0, 0, 0);
        var dnthresh2 = Date.UTC(1904, 0, 1, 0, 0, 0);
        function datenum(v4, date1904) {
          var epoch = v4.getTime();
          var res = (epoch - dnthresh) / (24 * 60 * 60 * 1e3);
          if (date1904) {
            res -= 1462;
            return res < -1402 ? res - 1 : res;
          }
          return res < 60 ? res - 1 : res;
        }
        function numdate(v4) {
          if (v4 >= 60 && v4 < 61)
            return v4;
          var out = new Date();
          out.setTime((v4 > 60 ? v4 : v4 + 1) * 24 * 60 * 60 * 1e3 + dnthresh);
          return out;
        }
        function parse_isodur(s3) {
          var sec = 0, mt = 0, time = false;
          var m4 = s3.match(/P([0-9\.]+Y)?([0-9\.]+M)?([0-9\.]+D)?T([0-9\.]+H)?([0-9\.]+M)?([0-9\.]+S)?/);
          if (!m4)
            throw new Error("|" + s3 + "| is not an ISO8601 Duration");
          for (var i6 = 1; i6 != m4.length; ++i6) {
            if (!m4[i6])
              continue;
            mt = 1;
            if (i6 > 3)
              time = true;
            switch (m4[i6].slice(m4[i6].length - 1)) {
              case "Y":
                throw new Error("Unsupported ISO Duration Field: " + m4[i6].slice(m4[i6].length - 1));
              case "D":
                mt *= 24;
              case "H":
                mt *= 60;
              case "M":
                if (!time)
                  throw new Error("Unsupported ISO Duration Field: M");
                else
                  mt *= 60;
              case "S":
                break;
            }
            sec += mt * parseInt(m4[i6], 10);
          }
          return sec;
        }
        var pdre1 = /^(\d+):(\d+)(:\d+)?(\.\d+)?$/;
        var pdre2 = /^(\d+)-(\d+)-(\d+)$/;
        var pdre3 = /^(\d+)-(\d+)-(\d+)[T ](\d+):(\d+)(:\d+)?(\.\d+)?$/;
        function parseDate(str, date1904) {
          if (str instanceof Date)
            return str;
          var m4 = str.match(pdre1);
          if (m4)
            return new Date((date1904 ? dnthresh2 : dnthresh1) + ((parseInt(m4[1], 10) * 60 + parseInt(m4[2], 10)) * 60 + (m4[3] ? parseInt(m4[3].slice(1), 10) : 0)) * 1e3 + (m4[4] ? parseInt((m4[4] + "000").slice(1, 4), 10) : 0));
          m4 = str.match(pdre2);
          if (m4)
            return new Date(Date.UTC(+m4[1], +m4[2] - 1, +m4[3], 0, 0, 0, 0));
          m4 = str.match(pdre3);
          if (m4)
            return new Date(Date.UTC(+m4[1], +m4[2] - 1, +m4[3], +m4[4], +m4[5], m4[6] && parseInt(m4[6].slice(1), 10) || 0, m4[7] && parseInt((m4[7] + "0000").slice(1, 4), 10) || 0));
          var d2 = new Date(str);
          return d2;
        }
        function cc2str(arr, debomit) {
          if (has_buf && Buffer.isBuffer(arr)) {
            if (debomit && buf_utf16le) {
              if (arr[0] == 255 && arr[1] == 254)
                return utf8write(arr.slice(2).toString("utf16le"));
              if (arr[1] == 254 && arr[2] == 255)
                return utf8write(utf16beread(arr.slice(2).toString("binary")));
            }
            return arr.toString("binary");
          }
          if (typeof TextDecoder !== "undefined")
            try {
              if (debomit) {
                if (arr[0] == 255 && arr[1] == 254)
                  return utf8write(new TextDecoder("utf-16le").decode(arr.slice(2)));
                if (arr[0] == 254 && arr[1] == 255)
                  return utf8write(new TextDecoder("utf-16be").decode(arr.slice(2)));
              }
              var rev = {
                "\u20AC": "\x80",
                "\u201A": "\x82",
                "\u0192": "\x83",
                "\u201E": "\x84",
                "\u2026": "\x85",
                "\u2020": "\x86",
                "\u2021": "\x87",
                "\u02C6": "\x88",
                "\u2030": "\x89",
                "\u0160": "\x8A",
                "\u2039": "\x8B",
                "\u0152": "\x8C",
                "\u017D": "\x8E",
                "\u2018": "\x91",
                "\u2019": "\x92",
                "\u201C": "\x93",
                "\u201D": "\x94",
                "\u2022": "\x95",
                "\u2013": "\x96",
                "\u2014": "\x97",
                "\u02DC": "\x98",
                "\u2122": "\x99",
                "\u0161": "\x9A",
                "\u203A": "\x9B",
                "\u0153": "\x9C",
                "\u017E": "\x9E",
                "\u0178": "\x9F"
              };
              if (Array.isArray(arr))
                arr = new Uint8Array(arr);
              return new TextDecoder("latin1").decode(arr).replace(/[€‚ƒ„…†‡ˆ‰Š‹ŒŽ‘’“”•–—˜™š›œžŸ]/g, function(c8) {
                return rev[c8] || c8;
              });
            } catch (e7) {
            }
          var o6 = [], i6 = 0;
          try {
            for (i6 = 0; i6 < arr.length - 65536; i6 += 65536)
              o6.push(String.fromCharCode.apply(0, arr.slice(i6, i6 + 65536)));
            o6.push(String.fromCharCode.apply(0, arr.slice(i6)));
          } catch (e7) {
            try {
              for (; i6 < arr.length - 16384; i6 += 16384)
                o6.push(String.fromCharCode.apply(0, arr.slice(i6, i6 + 16384)));
              o6.push(String.fromCharCode.apply(0, arr.slice(i6)));
            } catch (e8) {
              for (; i6 != arr.length; ++i6)
                o6.push(String.fromCharCode(arr[i6]));
            }
          }
          return o6.join("");
        }
        function dup(o6) {
          if (typeof JSON != "undefined" && !Array.isArray(o6))
            return JSON.parse(JSON.stringify(o6));
          if (typeof o6 != "object" || o6 == null)
            return o6;
          if (o6 instanceof Date)
            return new Date(o6.getTime());
          var out = {};
          for (var k2 in o6)
            if (Object.prototype.hasOwnProperty.call(o6, k2))
              out[k2] = dup(o6[k2]);
          return out;
        }
        function fill(c8, l5) {
          var o6 = "";
          while (o6.length < l5)
            o6 += c8;
          return o6;
        }
        function fuzzynum(s3) {
          var v4 = Number(s3);
          if (!isNaN(v4))
            return isFinite(v4) ? v4 : NaN;
          if (!/\d/.test(s3))
            return v4;
          var wt2 = 1;
          var ss = s3.replace(/([\d]),([\d])/g, "$1$2").replace(/[$]/g, "").replace(/[%]/g, function() {
            wt2 *= 100;
            return "";
          });
          if (!isNaN(v4 = Number(ss)))
            return v4 / wt2;
          ss = ss.replace(/[(]([^()]*)[)]/, function($$, $1) {
            wt2 = -wt2;
            return $1;
          });
          if (!isNaN(v4 = Number(ss)))
            return v4 / wt2;
          return v4;
        }
        var FDRE1 = /^(0?\d|1[0-2])(?:|:([0-5]?\d)(?:|(\.\d+)(?:|:([0-5]?\d))|:([0-5]?\d)(|\.\d+)))\s+([ap])m?$/;
        var FDRE2 = /^([01]?\d|2[0-3])(?:|:([0-5]?\d)(?:|(\.\d+)(?:|:([0-5]?\d))|:([0-5]?\d)(|\.\d+)))$/;
        var FDISO = /^(\d+)-(\d+)-(\d+)[T ](\d+):(\d+)(:\d+)(\.\d+)?[Z]?$/;
        var utc_append_works = new Date("6/9/69 00:00 UTC").valueOf() == -177984e5;
        function fuzzytime1(M3) {
          if (!M3[2])
            return new Date(Date.UTC(1899, 11, 31, +M3[1] % 12 + (M3[7] == "p" ? 12 : 0), 0, 0, 0));
          if (M3[3]) {
            if (M3[4])
              return new Date(Date.UTC(1899, 11, 31, +M3[1] % 12 + (M3[7] == "p" ? 12 : 0), +M3[2], +M3[4], parseFloat(M3[3]) * 1e3));
            else
              return new Date(Date.UTC(1899, 11, 31, M3[7] == "p" ? 12 : 0, +M3[1], +M3[2], parseFloat(M3[3]) * 1e3));
          } else if (M3[5])
            return new Date(Date.UTC(1899, 11, 31, +M3[1] % 12 + (M3[7] == "p" ? 12 : 0), +M3[2], +M3[5], M3[6] ? parseFloat(M3[6]) * 1e3 : 0));
          else
            return new Date(Date.UTC(1899, 11, 31, +M3[1] % 12 + (M3[7] == "p" ? 12 : 0), +M3[2], 0, 0));
        }
        function fuzzytime2(M3) {
          if (!M3[2])
            return new Date(Date.UTC(1899, 11, 31, +M3[1], 0, 0, 0));
          if (M3[3]) {
            if (M3[4])
              return new Date(Date.UTC(1899, 11, 31, +M3[1], +M3[2], +M3[4], parseFloat(M3[3]) * 1e3));
            else
              return new Date(Date.UTC(1899, 11, 31, 0, +M3[1], +M3[2], parseFloat(M3[3]) * 1e3));
          } else if (M3[5])
            return new Date(Date.UTC(1899, 11, 31, +M3[1], +M3[2], +M3[5], M3[6] ? parseFloat(M3[6]) * 1e3 : 0));
          else
            return new Date(Date.UTC(1899, 11, 31, +M3[1], +M3[2], 0, 0));
        }
        var lower_months = ["january", "february", "march", "april", "may", "june", "july", "august", "september", "october", "november", "december"];
        function fuzzydate(s3) {
          if (FDISO.test(s3))
            return s3.indexOf("Z") == -1 ? local_to_utc(new Date(s3)) : new Date(s3);
          var lower = s3.toLowerCase();
          var lnos = lower.replace(/\s+/g, " ").trim();
          var M3 = lnos.match(FDRE1);
          if (M3)
            return fuzzytime1(M3);
          M3 = lnos.match(FDRE2);
          if (M3)
            return fuzzytime2(M3);
          M3 = lnos.match(pdre3);
          if (M3)
            return new Date(Date.UTC(+M3[1], +M3[2] - 1, +M3[3], +M3[4], +M3[5], M3[6] && parseInt(M3[6].slice(1), 10) || 0, M3[7] && parseInt((M3[7] + "0000").slice(1, 4), 10) || 0));
          var o6 = new Date(utc_append_works && s3.indexOf("UTC") == -1 ? s3 + " UTC" : s3), n6 = new Date(NaN);
          var y4 = o6.getYear(), m4 = o6.getMonth(), d2 = o6.getDate();
          if (isNaN(d2))
            return n6;
          if (lower.match(/jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec/)) {
            lower = lower.replace(/[^a-z]/g, "").replace(/([^a-z]|^)[ap]m?([^a-z]|$)/, "");
            if (lower.length > 3 && lower_months.indexOf(lower) == -1)
              return n6;
          } else if (lower.replace(/[ap]m?/, "").match(/[a-z]/))
            return n6;
          if (y4 < 0 || y4 > 8099 || s3.match(/[^-0-9:,\/\\\ ]/))
            return n6;
          return o6;
        }
        var split_regex = function() {
          var safe_split_regex = "abacaba".split(/(:?b)/i).length == 5;
          return function split_regex2(str, re3, def) {
            if (safe_split_regex || typeof re3 == "string")
              return str.split(re3);
            var p2 = str.split(re3), o6 = [p2[0]];
            for (var i6 = 1; i6 < p2.length; ++i6) {
              o6.push(def);
              o6.push(p2[i6]);
            }
            return o6;
          };
        }();
        function utc_to_local(utc) {
          return new Date(utc.getUTCFullYear(), utc.getUTCMonth(), utc.getUTCDate(), utc.getUTCHours(), utc.getUTCMinutes(), utc.getUTCSeconds(), utc.getUTCMilliseconds());
        }
        function local_to_utc(local) {
          return new Date(Date.UTC(local.getFullYear(), local.getMonth(), local.getDate(), local.getHours(), local.getMinutes(), local.getSeconds(), local.getMilliseconds()));
        }
        function remove_doctype(str) {
          var preamble = str.slice(0, 1024);
          var si = preamble.indexOf("<!DOCTYPE");
          if (si == -1)
            return str;
          var m4 = str.match(/<[\w]/);
          if (!m4)
            return str;
          return str.slice(0, si) + str.slice(m4.index);
        }
        function str_match_ng(str, s3, e7) {
          var out = [];
          var si = str.indexOf(s3);
          while (si > -1) {
            var ei = str.indexOf(e7, si + s3.length);
            if (ei == -1)
              break;
            out.push(str.slice(si, ei + e7.length));
            si = str.indexOf(s3, ei + e7.length);
          }
          return out.length > 0 ? out : null;
        }
        function str_remove_ng(str, s3, e7) {
          var out = [], last = 0;
          var si = str.indexOf(s3);
          if (si == -1)
            return str;
          while (si > -1) {
            out.push(str.slice(last, si));
            var ei = str.indexOf(e7, si + s3.length);
            if (ei == -1)
              break;
            if ((si = str.indexOf(s3, last = ei + e7.length)) == -1)
              out.push(str.slice(last));
          }
          return out.join("");
        }
        var xml_boundary = { " ": 1, "	": 1, "\r": 1, "\n": 1, ">": 1 };
        function str_match_xml(str, tag) {
          var si = str.indexOf("<" + tag), w3 = tag.length + 1, L2 = str.length;
          while (si >= 0 && si <= L2 - w3 && !xml_boundary[str.charAt(si + w3)])
            si = str.indexOf("<" + tag, si + 1);
          if (si === -1)
            return null;
          var sf = str.indexOf(">", si + tag.length);
          if (sf === -1)
            return null;
          var et2 = "</" + tag + ">";
          var ei = str.indexOf(et2, sf);
          if (ei == -1)
            return null;
          return [str.slice(si, ei + et2.length), str.slice(sf + 1, ei)];
        }
        var str_match_xml_ns = function() {
          var str_match_xml_ns_cache = {};
          return function str_match_xml_ns2(str, tag) {
            var res = str_match_xml_ns_cache[tag];
            if (!res)
              str_match_xml_ns_cache[tag] = res = [
                new RegExp("<(?:\\w+:)?" + tag + "\\b[^<>]*>", "g"),
                new RegExp("</(?:\\w+:)?" + tag + ">", "g")
              ];
            res[0].lastIndex = res[1].lastIndex = 0;
            var m4 = res[0].exec(str);
            if (!m4)
              return null;
            var si = m4.index;
            var sf = res[0].lastIndex;
            res[1].lastIndex = res[0].lastIndex;
            m4 = res[1].exec(str);
            if (!m4)
              return null;
            var ei = m4.index;
            var ef = res[1].lastIndex;
            return [str.slice(si, ef), str.slice(sf, ei)];
          };
        }();
        var str_match_xml_ns_g = function() {
          var str_match_xml_ns_cache = {};
          return function str_match_xml_ns2(str, tag) {
            var out = [];
            var res = str_match_xml_ns_cache[tag];
            if (!res)
              str_match_xml_ns_cache[tag] = res = [
                new RegExp("<(?:\\w+:)?" + tag + "\\b[^<>]*>", "g"),
                new RegExp("</(?:\\w+:)?" + tag + ">", "g")
              ];
            res[0].lastIndex = res[1].lastIndex = 0;
            var m4;
            while (m4 = res[0].exec(str)) {
              var si = m4.index;
              res[1].lastIndex = res[0].lastIndex;
              m4 = res[1].exec(str);
              if (!m4)
                return null;
              var ef = res[1].lastIndex;
              out.push(str.slice(si, ef));
              res[0].lastIndex = res[1].lastIndex;
            }
            return out.length == 0 ? null : out;
          };
        }();
        var str_remove_xml_ns_g = function() {
          var str_remove_xml_ns_cache = {};
          return function str_remove_xml_ns_g2(str, tag) {
            var out = [];
            var res = str_remove_xml_ns_cache[tag];
            if (!res)
              str_remove_xml_ns_cache[tag] = res = [
                new RegExp("<(?:\\w+:)?" + tag + "\\b[^<>]*>", "g"),
                new RegExp("</(?:\\w+:)?" + tag + ">", "g")
              ];
            res[0].lastIndex = res[1].lastIndex = 0;
            var m4;
            var si = 0, ef = 0;
            while (m4 = res[0].exec(str)) {
              si = m4.index;
              out.push(str.slice(ef, si));
              ef = si;
              res[1].lastIndex = res[0].lastIndex;
              m4 = res[1].exec(str);
              if (!m4)
                return null;
              ef = res[1].lastIndex;
              res[0].lastIndex = res[1].lastIndex;
            }
            out.push(str.slice(ef));
            return out.length == 0 ? "" : out.join("");
          };
        }();
        var str_match_xml_ig = function() {
          var str_match_xml_ns_cache = {};
          return function str_match_xml_ns2(str, tag) {
            var out = [];
            var res = str_match_xml_ns_cache[tag];
            if (!res)
              str_match_xml_ns_cache[tag] = res = [
                new RegExp("<" + tag + "\\b[^<>]*>", "ig"),
                new RegExp("</" + tag + ">", "ig")
              ];
            res[0].lastIndex = res[1].lastIndex = 0;
            var m4;
            while (m4 = res[0].exec(str)) {
              var si = m4.index;
              res[1].lastIndex = res[0].lastIndex;
              m4 = res[1].exec(str);
              if (!m4)
                return null;
              var ef = res[1].lastIndex;
              out.push(str.slice(si, ef));
              res[0].lastIndex = res[1].lastIndex;
            }
            return out.length == 0 ? null : out;
          };
        }();
        function getdatastr(data) {
          if (!data)
            return null;
          if (data.content && data.type)
            return cc2str(data.content, true);
          if (data.data)
            return debom(data.data);
          if (data.asNodeBuffer && has_buf)
            return debom(data.asNodeBuffer().toString("binary"));
          if (data.asBinary)
            return debom(data.asBinary());
          if (data._data && data._data.getContent)
            return debom(cc2str(Array.prototype.slice.call(data._data.getContent(), 0)));
          return null;
        }
        function getdatabin(data) {
          if (!data)
            return null;
          if (data.data)
            return char_codes(data.data);
          if (data.asNodeBuffer && has_buf)
            return data.asNodeBuffer();
          if (data._data && data._data.getContent) {
            var o6 = data._data.getContent();
            if (typeof o6 == "string")
              return char_codes(o6);
            return Array.prototype.slice.call(o6);
          }
          if (data.content && data.type)
            return data.content;
          return null;
        }
        function getdata(data) {
          return data && data.name.slice(-4) === ".bin" ? getdatabin(data) : getdatastr(data);
        }
        function safegetzipfile(zip, file) {
          var k2 = zip.FullPaths || keys(zip.files);
          var f2 = file.toLowerCase().replace(/[\/]/g, "\\"), g2 = f2.replace(/\\/g, "/");
          for (var i6 = 0; i6 < k2.length; ++i6) {
            var n6 = k2[i6].replace(/^Root Entry[\/]/, "").toLowerCase();
            if (f2 == n6 || g2 == n6)
              return zip.files ? zip.files[k2[i6]] : zip.FileIndex[i6];
          }
          return null;
        }
        function getzipfile(zip, file) {
          var o6 = safegetzipfile(zip, file);
          if (o6 == null)
            throw new Error("Cannot find file " + file + " in zip");
          return o6;
        }
        function getzipdata(zip, file, safe) {
          if (!safe)
            return getdata(getzipfile(zip, file));
          if (!file)
            return null;
          try {
            return getzipdata(zip, file);
          } catch (e7) {
            return null;
          }
        }
        function getzipstr(zip, file, safe) {
          if (!safe)
            return getdatastr(getzipfile(zip, file));
          if (!file)
            return null;
          try {
            return getzipstr(zip, file);
          } catch (e7) {
            return null;
          }
        }
        function getzipbin(zip, file, safe) {
          if (!safe)
            return getdatabin(getzipfile(zip, file));
          if (!file)
            return null;
          try {
            return getzipbin(zip, file);
          } catch (e7) {
            return null;
          }
        }
        function zipentries(zip) {
          var k2 = zip.FullPaths || keys(zip.files), o6 = [];
          for (var i6 = 0; i6 < k2.length; ++i6)
            if (k2[i6].slice(-1) != "/")
              o6.push(k2[i6].replace(/^Root Entry[\/]/, ""));
          return o6.sort();
        }
        function zip_add_file(zip, path2, content2) {
          if (zip.FullPaths) {
            if (Array.isArray(content2) && typeof content2[0] == "string") {
              content2 = content2.join("");
            }
            if (typeof content2 == "string") {
              var res;
              if (has_buf)
                res = Buffer_from(content2);
              else
                res = utf8decode(content2);
              return CFB.utils.cfb_add(zip, path2, res);
            }
            CFB.utils.cfb_add(zip, path2, content2);
          } else
            zip.file(path2, content2);
        }
        function zip_new() {
          return CFB.utils.cfb_new();
        }
        function zip_read(d2, o6) {
          switch (o6.type) {
            case "base64":
              return CFB.read(d2, { type: "base64" });
            case "binary":
              return CFB.read(d2, { type: "binary" });
            case "buffer":
            case "array":
              return CFB.read(d2, { type: "buffer" });
          }
          throw new Error("Unrecognized type " + o6.type);
        }
        function resolve_path(path2, base) {
          if (path2.charAt(0) == "/")
            return path2.slice(1);
          var result = base.split("/");
          if (base.slice(-1) != "/")
            result.pop();
          var target = path2.split("/");
          while (target.length !== 0) {
            var step = target.shift();
            if (step === "..")
              result.pop();
            else if (step !== ".")
              result.push(step);
          }
          return result.join("/");
        }
        var XML_HEADER = '<?xml version="1.0" encoding="UTF-8" standalone="yes"?>\r\n';
        var attregexg = /\s([^"\s?>\/]+)\s*=\s*((?:")([^"]*)(?:")|(?:')([^']*)(?:')|([^'">\s]+))/g;
        var tagregex1 = /<[\/\?]?[a-zA-Z0-9:_-]+(?:\s+[^"\s?<>\/]+\s*=\s*(?:"[^"]*"|'[^']*'|[^'"<>\s=]+))*\s*[\/\?]?>/mg, tagregex2 = /<[^<>]*>/g;
        var tagregex = XML_HEADER.match(tagregex1) ? tagregex1 : tagregex2;
        var nsregex = /<\w*:/, nsregex2 = /<(\/?)\w+:/;
        function parsexmltag(tag, skip_root, skip_LC) {
          var z3 = {};
          var eq2 = 0, c8 = 0;
          for (; eq2 !== tag.length; ++eq2)
            if ((c8 = tag.charCodeAt(eq2)) === 32 || c8 === 10 || c8 === 13)
              break;
          if (!skip_root)
            z3[0] = tag.slice(0, eq2);
          if (eq2 === tag.length)
            return z3;
          var m4 = tag.match(attregexg), j3 = 0, v4 = "", i6 = 0, q3 = "", cc2 = "", quot = 1;
          if (m4)
            for (i6 = 0; i6 != m4.length; ++i6) {
              cc2 = m4[i6].slice(1);
              for (c8 = 0; c8 != cc2.length; ++c8)
                if (cc2.charCodeAt(c8) === 61)
                  break;
              q3 = cc2.slice(0, c8).trim();
              while (cc2.charCodeAt(c8 + 1) == 32)
                ++c8;
              quot = (eq2 = cc2.charCodeAt(c8 + 1)) == 34 || eq2 == 39 ? 1 : 0;
              v4 = cc2.slice(c8 + 1 + quot, cc2.length - quot);
              for (j3 = 0; j3 != q3.length; ++j3)
                if (q3.charCodeAt(j3) === 58)
                  break;
              if (j3 === q3.length) {
                if (q3.indexOf("_") > 0)
                  q3 = q3.slice(0, q3.indexOf("_"));
                z3[q3] = v4;
                if (!skip_LC)
                  z3[q3.toLowerCase()] = v4;
              } else {
                var k2 = (j3 === 5 && q3.slice(0, 5) === "xmlns" ? "xmlns" : "") + q3.slice(j3 + 1);
                if (z3[k2] && q3.slice(j3 - 3, j3) == "ext")
                  continue;
                z3[k2] = v4;
                if (!skip_LC)
                  z3[k2.toLowerCase()] = v4;
              }
            }
          return z3;
        }
        function parsexmltagraw(tag, skip_root, skip_LC) {
          var z3 = {};
          var eq2 = 0, c8 = 0;
          for (; eq2 !== tag.length; ++eq2)
            if ((c8 = tag.charCodeAt(eq2)) === 32 || c8 === 10 || c8 === 13)
              break;
          if (!skip_root)
            z3[0] = tag.slice(0, eq2);
          if (eq2 === tag.length)
            return z3;
          var m4 = tag.match(attregexg), j3 = 0, v4 = "", i6 = 0, q3 = "", cc2 = "", quot = 1;
          if (m4)
            for (i6 = 0; i6 != m4.length; ++i6) {
              cc2 = m4[i6].slice(1);
              for (c8 = 0; c8 != cc2.length; ++c8)
                if (cc2.charCodeAt(c8) === 61)
                  break;
              q3 = cc2.slice(0, c8).trim();
              while (cc2.charCodeAt(c8 + 1) == 32)
                ++c8;
              quot = (eq2 = cc2.charCodeAt(c8 + 1)) == 34 || eq2 == 39 ? 1 : 0;
              v4 = cc2.slice(c8 + 1 + quot, cc2.length - quot);
              if (q3.indexOf("_") > 0)
                q3 = q3.slice(0, q3.indexOf("_"));
              z3[q3] = v4;
              if (!skip_LC)
                z3[q3.toLowerCase()] = v4;
            }
          return z3;
        }
        function strip_ns(x3) {
          return x3.replace(nsregex2, "<$1");
        }
        var encodings = {
          "&quot;": '"',
          "&apos;": "'",
          "&gt;": ">",
          "&lt;": "<",
          "&amp;": "&"
        };
        var rencoding = evert(encodings);
        var unescapexml = function() {
          var encregex = /&(?:quot|apos|gt|lt|amp|#x?([\da-fA-F]+));/ig, coderegex = /_x([\da-fA-F]{4})_/ig;
          function raw_unescapexml(text) {
            var s3 = text + "", i6 = s3.indexOf("<![CDATA[");
            if (i6 == -1)
              return s3.replace(encregex, function($$, $1) {
                return encodings[$$] || String.fromCharCode(parseInt($1, $$.indexOf("x") > -1 ? 16 : 10)) || $$;
              }).replace(coderegex, function(m4, c8) {
                return String.fromCharCode(parseInt(c8, 16));
              });
            var j3 = s3.indexOf("]]>");
            return raw_unescapexml(s3.slice(0, i6)) + s3.slice(i6 + 9, j3) + raw_unescapexml(s3.slice(j3 + 3));
          }
          return function unescapexml2(text, xlsx2) {
            var out = raw_unescapexml(text);
            return xlsx2 ? out.replace(/\r\n/g, "\n") : out;
          };
        }();
        var decregex = /[&<>'"]/g, charegex = /[\u0000-\u0008\u000b-\u001f\uFFFE-\uFFFF]/g;
        function escapexml(text) {
          var s3 = text + "";
          return s3.replace(decregex, function(y4) {
            return rencoding[y4];
          }).replace(charegex, function(s4) {
            return "_x" + ("000" + s4.charCodeAt(0).toString(16)).slice(-4) + "_";
          });
        }
        function escapexmltag(text) {
          return escapexml(text).replace(/ /g, "_x0020_");
        }
        var htmlcharegex = /[\u0000-\u001f]/g;
        function escapehtml(text) {
          var s3 = text + "";
          return s3.replace(decregex, function(y4) {
            return rencoding[y4];
          }).replace(/\n/g, "<br/>").replace(htmlcharegex, function(s4) {
            return "&#x" + ("000" + s4.charCodeAt(0).toString(16)).slice(-4) + ";";
          });
        }
        function escapexlml(text) {
          var s3 = text + "";
          return s3.replace(decregex, function(y4) {
            return rencoding[y4];
          }).replace(htmlcharegex, function(s4) {
            return "&#x" + s4.charCodeAt(0).toString(16).toUpperCase() + ";";
          });
        }
        var xlml_fixstr = function() {
          var entregex = /&#(\d+);/g;
          function entrepl($$, $1) {
            return String.fromCharCode(parseInt($1, 10));
          }
          return function xlml_fixstr2(str) {
            return str.replace(entregex, entrepl);
          };
        }();
        function xlml_unfixstr(str) {
          return str.replace(/(\r\n|[\r\n])/g, "&#10;");
        }
        function parsexmlbool(value) {
          switch (value) {
            case 1:
            case true:
            case "1":
            case "true":
              return true;
            case 0:
            case false:
            case "0":
            case "false":
              return false;
          }
          return false;
        }
        function utf8reada(orig) {
          var out = "", i6 = 0, c8 = 0, d2 = 0, e7 = 0, f2 = 0, w3 = 0;
          while (i6 < orig.length) {
            c8 = orig.charCodeAt(i6++);
            if (c8 < 128) {
              out += String.fromCharCode(c8);
              continue;
            }
            d2 = orig.charCodeAt(i6++);
            if (c8 > 191 && c8 < 224) {
              f2 = (c8 & 31) << 6;
              f2 |= d2 & 63;
              out += String.fromCharCode(f2);
              continue;
            }
            e7 = orig.charCodeAt(i6++);
            if (c8 < 240) {
              out += String.fromCharCode((c8 & 15) << 12 | (d2 & 63) << 6 | e7 & 63);
              continue;
            }
            f2 = orig.charCodeAt(i6++);
            w3 = ((c8 & 7) << 18 | (d2 & 63) << 12 | (e7 & 63) << 6 | f2 & 63) - 65536;
            out += String.fromCharCode(55296 + (w3 >>> 10 & 1023));
            out += String.fromCharCode(56320 + (w3 & 1023));
          }
          return out;
        }
        function utf8readb(data) {
          var out = new_raw_buf(2 * data.length), w3, i6, j3 = 1, k2 = 0, ww = 0, c8;
          for (i6 = 0; i6 < data.length; i6 += j3) {
            j3 = 1;
            if ((c8 = data.charCodeAt(i6)) < 128)
              w3 = c8;
            else if (c8 < 224) {
              w3 = (c8 & 31) * 64 + (data.charCodeAt(i6 + 1) & 63);
              j3 = 2;
            } else if (c8 < 240) {
              w3 = (c8 & 15) * 4096 + (data.charCodeAt(i6 + 1) & 63) * 64 + (data.charCodeAt(i6 + 2) & 63);
              j3 = 3;
            } else {
              j3 = 4;
              w3 = (c8 & 7) * 262144 + (data.charCodeAt(i6 + 1) & 63) * 4096 + (data.charCodeAt(i6 + 2) & 63) * 64 + (data.charCodeAt(i6 + 3) & 63);
              w3 -= 65536;
              ww = 55296 + (w3 >>> 10 & 1023);
              w3 = 56320 + (w3 & 1023);
            }
            if (ww !== 0) {
              out[k2++] = ww & 255;
              out[k2++] = ww >>> 8;
              ww = 0;
            }
            out[k2++] = w3 % 256;
            out[k2++] = w3 >>> 8;
          }
          return out.slice(0, k2).toString("ucs2");
        }
        function utf8readc(data) {
          return Buffer_from(data, "binary").toString("utf8");
        }
        var utf8corpus = "foo bar baz\xE2\x98\x83\xF0\x9F\x8D\xA3";
        var utf8read = has_buf && (utf8readc(utf8corpus) == utf8reada(utf8corpus) && utf8readc || utf8readb(utf8corpus) == utf8reada(utf8corpus) && utf8readb) || utf8reada;
        var utf8write = has_buf ? function(data) {
          return Buffer_from(data, "utf8").toString("binary");
        } : function(orig) {
          var out = [], i6 = 0, c8 = 0, d2 = 0;
          while (i6 < orig.length) {
            c8 = orig.charCodeAt(i6++);
            switch (true) {
              case c8 < 128:
                out.push(String.fromCharCode(c8));
                break;
              case c8 < 2048:
                out.push(String.fromCharCode(192 + (c8 >> 6)));
                out.push(String.fromCharCode(128 + (c8 & 63)));
                break;
              case (c8 >= 55296 && c8 < 57344):
                c8 -= 55296;
                d2 = orig.charCodeAt(i6++) - 56320 + (c8 << 10);
                out.push(String.fromCharCode(240 + (d2 >> 18 & 7)));
                out.push(String.fromCharCode(144 + (d2 >> 12 & 63)));
                out.push(String.fromCharCode(128 + (d2 >> 6 & 63)));
                out.push(String.fromCharCode(128 + (d2 & 63)));
                break;
              default:
                out.push(String.fromCharCode(224 + (c8 >> 12)));
                out.push(String.fromCharCode(128 + (c8 >> 6 & 63)));
                out.push(String.fromCharCode(128 + (c8 & 63)));
            }
          }
          return out.join("");
        };
        var htmldecode = function() {
          var entities = [
            ["nbsp", " "],
            ["middot", "\xB7"],
            ["quot", '"'],
            ["apos", "'"],
            ["gt", ">"],
            ["lt", "<"],
            ["amp", "&"]
          ].map(function(x3) {
            return [new RegExp("&" + x3[0] + ";", "ig"), x3[1]];
          });
          return function htmldecode2(str) {
            var o6 = str.replace(/^[\t\n\r ]+/, "").replace(/(^|[^\t\n\r ])[\t\n\r ]+$/, "$1").replace(/>\s+/g, ">").replace(/\b\s+</g, "<").replace(/[\t\n\r ]+/g, " ").replace(/<\s*[bB][rR]\s*\/?>/g, "\n").replace(/<[^<>]*>/g, "");
            for (var i6 = 0; i6 < entities.length; ++i6)
              o6 = o6.replace(entities[i6][0], entities[i6][1]);
            return o6;
          };
        }();
        var vtvregex = /<\/?(?:vt:)?variant>/g, vtmregex = /<(?:vt:)([^<"'>]*)>([\s\S]*)</;
        function parseVector(data, opts) {
          var h = parsexmltag(data);
          var matches = str_match_xml_ns_g(data, h.baseType) || [];
          var res = [];
          if (matches.length != h.size) {
            if (opts.WTF)
              throw new Error("unexpected vector length " + matches.length + " != " + h.size);
            return res;
          }
          matches.forEach(function(x3) {
            var v4 = x3.replace(vtvregex, "").match(vtmregex);
            if (v4)
              res.push({ v: utf8read(v4[2]), t: v4[1] });
          });
          return res;
        }
        var wtregex = /(^\s|\s$|\n)/;
        function writetag(f2, g2) {
          return "<" + f2 + (g2.match(wtregex) ? ' xml:space="preserve"' : "") + ">" + g2 + "</" + f2 + ">";
        }
        function wxt_helper(h) {
          return keys(h).map(function(k2) {
            return " " + k2 + '="' + h[k2] + '"';
          }).join("");
        }
        function writextag(f2, g2, h) {
          return "<" + f2 + (h != null ? wxt_helper(h) : "") + (g2 != null ? (g2.match(wtregex) ? ' xml:space="preserve"' : "") + ">" + g2 + "</" + f2 : "/") + ">";
        }
        function write_w3cdtf(d2, t5) {
          try {
            return d2.toISOString().replace(/\.\d*/, "");
          } catch (e7) {
            if (t5)
              throw e7;
          }
          return "";
        }
        function write_vt(s3, xlsx2) {
          switch (typeof s3) {
            case "string":
              var o6 = writextag("vt:lpwstr", escapexml(s3));
              if (xlsx2)
                o6 = o6.replace(/&quot;/g, "_x0022_");
              return o6;
            case "number":
              return writextag((s3 | 0) == s3 ? "vt:i4" : "vt:r8", escapexml(String(s3)));
            case "boolean":
              return writextag("vt:bool", s3 ? "true" : "false");
          }
          if (s3 instanceof Date)
            return writextag("vt:filetime", write_w3cdtf(s3));
          throw new Error("Unable to serialize " + s3);
        }
        function xlml_normalize(d2) {
          if (has_buf && Buffer.isBuffer(d2))
            return d2.toString("utf8");
          if (typeof d2 === "string")
            return d2;
          if (typeof Uint8Array !== "undefined" && d2 instanceof Uint8Array)
            return utf8read(a2s(ab2a(d2)));
          throw new Error("Bad input format: expected Buffer or string");
        }
        var xlmlregex = /<([\/]?)([^\s?><!\/:"]*:|)([^\s?<>:\/"]+)(?:\s+[^<>=?"'\s]+="[^"]*?")*\s*[\/]?>/mg;
        var XMLNS = {
          CORE_PROPS: "http://schemas.openxmlformats.org/package/2006/metadata/core-properties",
          CUST_PROPS: "http://schemas.openxmlformats.org/officeDocument/2006/custom-properties",
          EXT_PROPS: "http://schemas.openxmlformats.org/officeDocument/2006/extended-properties",
          CT: "http://schemas.openxmlformats.org/package/2006/content-types",
          RELS: "http://schemas.openxmlformats.org/package/2006/relationships",
          TCMNT: "http://schemas.microsoft.com/office/spreadsheetml/2018/threadedcomments",
          "dc": "http://purl.org/dc/elements/1.1/",
          "dcterms": "http://purl.org/dc/terms/",
          "dcmitype": "http://purl.org/dc/dcmitype/",
          "mx": "http://schemas.microsoft.com/office/mac/excel/2008/main",
          "r": "http://schemas.openxmlformats.org/officeDocument/2006/relationships",
          "sjs": "http://schemas.openxmlformats.org/package/2006/sheetjs/core-properties",
          "vt": "http://schemas.openxmlformats.org/officeDocument/2006/docPropsVTypes",
          "xsi": "http://www.w3.org/2001/XMLSchema-instance",
          "xsd": "http://www.w3.org/2001/XMLSchema"
        };
        var XMLNS_main = [
          "http://schemas.openxmlformats.org/spreadsheetml/2006/main",
          "http://purl.oclc.org/ooxml/spreadsheetml/main",
          "http://schemas.microsoft.com/office/excel/2006/main",
          "http://schemas.microsoft.com/office/excel/2006/2"
        ];
        var XLMLNS = {
          "o": "urn:schemas-microsoft-com:office:office",
          "x": "urn:schemas-microsoft-com:office:excel",
          "ss": "urn:schemas-microsoft-com:office:spreadsheet",
          "dt": "uuid:C2F41010-65B3-11d1-A29F-00AA00C14882",
          "mv": "http://macVmlSchemaUri",
          "v": "urn:schemas-microsoft-com:vml",
          "html": "http://www.w3.org/TR/REC-html40"
        };
        function read_double_le(b3, idx) {
          var s3 = 1 - 2 * (b3[idx + 7] >>> 7);
          var e7 = ((b3[idx + 7] & 127) << 4) + (b3[idx + 6] >>> 4 & 15);
          var m4 = b3[idx + 6] & 15;
          for (var i6 = 5; i6 >= 0; --i6)
            m4 = m4 * 256 + b3[idx + i6];
          if (e7 == 2047)
            return m4 == 0 ? s3 * Infinity : NaN;
          if (e7 == 0)
            e7 = -1022;
          else {
            e7 -= 1023;
            m4 += Math.pow(2, 52);
          }
          return s3 * Math.pow(2, e7 - 52) * m4;
        }
        function write_double_le(b3, v4, idx) {
          var bs = (v4 < 0 || 1 / v4 == -Infinity ? 1 : 0) << 7, e7 = 0, m4 = 0;
          var av = bs ? -v4 : v4;
          if (!isFinite(av)) {
            e7 = 2047;
            m4 = isNaN(v4) ? 26985 : 0;
          } else if (av == 0)
            e7 = m4 = 0;
          else {
            e7 = Math.floor(Math.log(av) / Math.LN2);
            m4 = av * Math.pow(2, 52 - e7);
            if (e7 <= -1023 && (!isFinite(m4) || m4 < Math.pow(2, 52))) {
              e7 = -1022;
            } else {
              m4 -= Math.pow(2, 52);
              e7 += 1023;
            }
          }
          for (var i6 = 0; i6 <= 5; ++i6, m4 /= 256)
            b3[idx + i6] = m4 & 255;
          b3[idx + 6] = (e7 & 15) << 4 | m4 & 15;
          b3[idx + 7] = e7 >> 4 | bs;
        }
        var ___toBuffer = function(bufs) {
          var x3 = [], w3 = 10240;
          for (var i6 = 0; i6 < bufs[0].length; ++i6)
            if (bufs[0][i6])
              for (var j3 = 0, L2 = bufs[0][i6].length; j3 < L2; j3 += w3)
                x3.push.apply(x3, bufs[0][i6].slice(j3, j3 + w3));
          return x3;
        };
        var __toBuffer = has_buf ? function(bufs) {
          return bufs[0].length > 0 && Buffer.isBuffer(bufs[0][0]) ? Buffer.concat(bufs[0].map(function(x3) {
            return Buffer.isBuffer(x3) ? x3 : Buffer_from(x3);
          })) : ___toBuffer(bufs);
        } : ___toBuffer;
        var ___utf16le = function(b3, s3, e7) {
          var ss = [];
          for (var i6 = s3; i6 < e7; i6 += 2)
            ss.push(String.fromCharCode(__readUInt16LE(b3, i6)));
          return ss.join("").replace(chr0, "");
        };
        var __utf16le = has_buf ? function(b3, s3, e7) {
          if (!Buffer.isBuffer(b3) || !buf_utf16le)
            return ___utf16le(b3, s3, e7);
          return b3.toString("utf16le", s3, e7).replace(chr0, "");
        } : ___utf16le;
        var ___hexlify = function(b3, s3, l5) {
          var ss = [];
          for (var i6 = s3; i6 < s3 + l5; ++i6)
            ss.push(("0" + b3[i6].toString(16)).slice(-2));
          return ss.join("");
        };
        var __hexlify = has_buf ? function(b3, s3, l5) {
          return Buffer.isBuffer(b3) ? b3.toString("hex", s3, s3 + l5) : ___hexlify(b3, s3, l5);
        } : ___hexlify;
        var ___utf8 = function(b3, s3, e7) {
          var ss = [];
          for (var i6 = s3; i6 < e7; i6++)
            ss.push(String.fromCharCode(__readUInt8(b3, i6)));
          return ss.join("");
        };
        var __utf8 = has_buf ? function utf8_b(b3, s3, e7) {
          return Buffer.isBuffer(b3) ? b3.toString("utf8", s3, e7) : ___utf8(b3, s3, e7);
        } : ___utf8;
        var ___lpstr = function(b3, i6) {
          var len = __readUInt32LE(b3, i6);
          return len > 0 ? __utf8(b3, i6 + 4, i6 + 4 + len - 1) : "";
        };
        var __lpstr = ___lpstr;
        var ___cpstr = function(b3, i6) {
          var len = __readUInt32LE(b3, i6);
          return len > 0 ? __utf8(b3, i6 + 4, i6 + 4 + len - 1) : "";
        };
        var __cpstr = ___cpstr;
        var ___lpwstr = function(b3, i6) {
          var len = 2 * __readUInt32LE(b3, i6);
          return len > 0 ? __utf8(b3, i6 + 4, i6 + 4 + len - 1) : "";
        };
        var __lpwstr = ___lpwstr;
        var ___lpp4 = function lpp4_(b3, i6) {
          var len = __readUInt32LE(b3, i6);
          return len > 0 ? __utf16le(b3, i6 + 4, i6 + 4 + len) : "";
        };
        var __lpp4 = ___lpp4;
        var ___8lpp4 = function(b3, i6) {
          var len = __readUInt32LE(b3, i6);
          return len > 0 ? __utf8(b3, i6 + 4, i6 + 4 + len) : "";
        };
        var __8lpp4 = ___8lpp4;
        var ___double = function(b3, idx) {
          return read_double_le(b3, idx);
        };
        var __double = ___double;
        var is_buf = function is_buf_a(a2) {
          return Array.isArray(a2) || typeof Uint8Array !== "undefined" && a2 instanceof Uint8Array;
        };
        if (has_buf) {
          __lpstr = function lpstr_b(b3, i6) {
            if (!Buffer.isBuffer(b3))
              return ___lpstr(b3, i6);
            var len = b3.readUInt32LE(i6);
            return len > 0 ? b3.toString("utf8", i6 + 4, i6 + 4 + len - 1) : "";
          };
          __cpstr = function cpstr_b(b3, i6) {
            if (!Buffer.isBuffer(b3))
              return ___cpstr(b3, i6);
            var len = b3.readUInt32LE(i6);
            return len > 0 ? b3.toString("utf8", i6 + 4, i6 + 4 + len - 1) : "";
          };
          __lpwstr = function lpwstr_b(b3, i6) {
            if (!Buffer.isBuffer(b3) || !buf_utf16le)
              return ___lpwstr(b3, i6);
            var len = 2 * b3.readUInt32LE(i6);
            return b3.toString("utf16le", i6 + 4, i6 + 4 + len - 1);
          };
          __lpp4 = function lpp4_b(b3, i6) {
            if (!Buffer.isBuffer(b3) || !buf_utf16le)
              return ___lpp4(b3, i6);
            var len = b3.readUInt32LE(i6);
            return b3.toString("utf16le", i6 + 4, i6 + 4 + len);
          };
          __8lpp4 = function lpp4_8b(b3, i6) {
            if (!Buffer.isBuffer(b3))
              return ___8lpp4(b3, i6);
            var len = b3.readUInt32LE(i6);
            return b3.toString("utf8", i6 + 4, i6 + 4 + len);
          };
          __double = function double_(b3, i6) {
            if (Buffer.isBuffer(b3))
              return b3.readDoubleLE(i6);
            return ___double(b3, i6);
          };
          is_buf = function is_buf_b(a2) {
            return Buffer.isBuffer(a2) || Array.isArray(a2) || typeof Uint8Array !== "undefined" && a2 instanceof Uint8Array;
          };
        }
        function cpdoit() {
          __utf16le = function(b3, s3, e7) {
            return $cptable.utils.decode(1200, b3.slice(s3, e7)).replace(chr0, "");
          };
          __utf8 = function(b3, s3, e7) {
            return $cptable.utils.decode(65001, b3.slice(s3, e7));
          };
          __lpstr = function(b3, i6) {
            var len = __readUInt32LE(b3, i6);
            return len > 0 ? $cptable.utils.decode(current_ansi, b3.slice(i6 + 4, i6 + 4 + len - 1)) : "";
          };
          __cpstr = function(b3, i6) {
            var len = __readUInt32LE(b3, i6);
            return len > 0 ? $cptable.utils.decode(current_codepage, b3.slice(i6 + 4, i6 + 4 + len - 1)) : "";
          };
          __lpwstr = function(b3, i6) {
            var len = 2 * __readUInt32LE(b3, i6);
            return len > 0 ? $cptable.utils.decode(1200, b3.slice(i6 + 4, i6 + 4 + len - 1)) : "";
          };
          __lpp4 = function(b3, i6) {
            var len = __readUInt32LE(b3, i6);
            return len > 0 ? $cptable.utils.decode(1200, b3.slice(i6 + 4, i6 + 4 + len)) : "";
          };
          __8lpp4 = function(b3, i6) {
            var len = __readUInt32LE(b3, i6);
            return len > 0 ? $cptable.utils.decode(65001, b3.slice(i6 + 4, i6 + 4 + len)) : "";
          };
        }
        if (typeof $cptable !== "undefined")
          cpdoit();
        var __readUInt8 = function(b3, idx) {
          return b3[idx];
        };
        var __readUInt16LE = function(b3, idx) {
          return b3[idx + 1] * (1 << 8) + b3[idx];
        };
        var __readInt16LE = function(b3, idx) {
          var u5 = b3[idx + 1] * (1 << 8) + b3[idx];
          return u5 < 32768 ? u5 : (65535 - u5 + 1) * -1;
        };
        var __readUInt32LE = function(b3, idx) {
          return b3[idx + 3] * (1 << 24) + (b3[idx + 2] << 16) + (b3[idx + 1] << 8) + b3[idx];
        };
        var __readInt32LE = function(b3, idx) {
          return b3[idx + 3] << 24 | b3[idx + 2] << 16 | b3[idx + 1] << 8 | b3[idx];
        };
        var __readInt32BE = function(b3, idx) {
          return b3[idx] << 24 | b3[idx + 1] << 16 | b3[idx + 2] << 8 | b3[idx + 3];
        };
        function ReadShift(size, t5) {
          var o6 = "", oI, oR, oo = [], w3, vv, i6, loc;
          switch (t5) {
            case "dbcs":
              loc = this.l;
              if (has_buf && Buffer.isBuffer(this) && buf_utf16le)
                o6 = this.slice(this.l, this.l + 2 * size).toString("utf16le");
              else
                for (i6 = 0; i6 < size; ++i6) {
                  o6 += String.fromCharCode(__readUInt16LE(this, loc));
                  loc += 2;
                }
              size *= 2;
              break;
            case "utf8":
              o6 = __utf8(this, this.l, this.l + size);
              break;
            case "utf16le":
              size *= 2;
              o6 = __utf16le(this, this.l, this.l + size);
              break;
            case "wstr":
              if (typeof $cptable !== "undefined")
                o6 = $cptable.utils.decode(current_codepage, this.slice(this.l, this.l + 2 * size));
              else
                return ReadShift.call(this, size, "dbcs");
              size = 2 * size;
              break;
            case "lpstr-ansi":
              o6 = __lpstr(this, this.l);
              size = 4 + __readUInt32LE(this, this.l);
              break;
            case "lpstr-cp":
              o6 = __cpstr(this, this.l);
              size = 4 + __readUInt32LE(this, this.l);
              break;
            case "lpwstr":
              o6 = __lpwstr(this, this.l);
              size = 4 + 2 * __readUInt32LE(this, this.l);
              break;
            case "lpp4":
              size = 4 + __readUInt32LE(this, this.l);
              o6 = __lpp4(this, this.l);
              if (size & 2)
                size += 2;
              break;
            case "8lpp4":
              size = 4 + __readUInt32LE(this, this.l);
              o6 = __8lpp4(this, this.l);
              if (size & 3)
                size += 4 - (size & 3);
              break;
            case "cstr":
              size = 0;
              o6 = "";
              while ((w3 = __readUInt8(this, this.l + size++)) !== 0)
                oo.push(_getchar(w3));
              o6 = oo.join("");
              break;
            case "_wstr":
              size = 0;
              o6 = "";
              while ((w3 = __readUInt16LE(this, this.l + size)) !== 0) {
                oo.push(_getchar(w3));
                size += 2;
              }
              size += 2;
              o6 = oo.join("");
              break;
            case "dbcs-cont":
              o6 = "";
              loc = this.l;
              for (i6 = 0; i6 < size; ++i6) {
                if (this.lens && this.lens.indexOf(loc) !== -1) {
                  w3 = __readUInt8(this, loc);
                  this.l = loc + 1;
                  vv = ReadShift.call(this, size - i6, w3 ? "dbcs-cont" : "sbcs-cont");
                  return oo.join("") + vv;
                }
                oo.push(_getchar(__readUInt16LE(this, loc)));
                loc += 2;
              }
              o6 = oo.join("");
              size *= 2;
              break;
            case "cpstr":
              if (typeof $cptable !== "undefined") {
                o6 = $cptable.utils.decode(current_codepage, this.slice(this.l, this.l + size));
                break;
              }
            case "sbcs-cont":
              o6 = "";
              loc = this.l;
              for (i6 = 0; i6 != size; ++i6) {
                if (this.lens && this.lens.indexOf(loc) !== -1) {
                  w3 = __readUInt8(this, loc);
                  this.l = loc + 1;
                  vv = ReadShift.call(this, size - i6, w3 ? "dbcs-cont" : "sbcs-cont");
                  return oo.join("") + vv;
                }
                oo.push(_getchar(__readUInt8(this, loc)));
                loc += 1;
              }
              o6 = oo.join("");
              break;
            default:
              switch (size) {
                case 1:
                  oI = __readUInt8(this, this.l);
                  this.l++;
                  return oI;
                case 2:
                  oI = (t5 === "i" ? __readInt16LE : __readUInt16LE)(this, this.l);
                  this.l += 2;
                  return oI;
                case 4:
                case -4:
                  if (t5 === "i" || (this[this.l + 3] & 128) === 0) {
                    oI = (size > 0 ? __readInt32LE : __readInt32BE)(this, this.l);
                    this.l += 4;
                    return oI;
                  } else {
                    oR = __readUInt32LE(this, this.l);
                    this.l += 4;
                  }
                  return oR;
                case 8:
                case -8:
                  if (t5 === "f") {
                    if (size == 8)
                      oR = __double(this, this.l);
                    else
                      oR = __double([this[this.l + 7], this[this.l + 6], this[this.l + 5], this[this.l + 4], this[this.l + 3], this[this.l + 2], this[this.l + 1], this[this.l + 0]], 0);
                    this.l += 8;
                    return oR;
                  } else
                    size = 8;
                case 16:
                  o6 = __hexlify(this, this.l, size);
                  break;
              }
          }
          this.l += size;
          return o6;
        }
        var __writeUInt32LE = function(b3, val2, idx) {
          b3[idx] = val2 & 255;
          b3[idx + 1] = val2 >>> 8 & 255;
          b3[idx + 2] = val2 >>> 16 & 255;
          b3[idx + 3] = val2 >>> 24 & 255;
        };
        var __writeInt32LE = function(b3, val2, idx) {
          b3[idx] = val2 & 255;
          b3[idx + 1] = val2 >> 8 & 255;
          b3[idx + 2] = val2 >> 16 & 255;
          b3[idx + 3] = val2 >> 24 & 255;
        };
        var __writeUInt16LE = function(b3, val2, idx) {
          b3[idx] = val2 & 255;
          b3[idx + 1] = val2 >>> 8 & 255;
        };
        function WriteShift(t5, val2, f2) {
          var size = 0, i6 = 0;
          if (f2 === "dbcs") {
            for (i6 = 0; i6 != val2.length; ++i6)
              __writeUInt16LE(this, val2.charCodeAt(i6), this.l + 2 * i6);
            size = 2 * val2.length;
          } else if (f2 === "sbcs" || f2 == "cpstr") {
            if (typeof $cptable !== "undefined" && current_ansi == 874) {
              for (i6 = 0; i6 != val2.length; ++i6) {
                var cpp = $cptable.utils.encode(current_ansi, val2.charAt(i6));
                this[this.l + i6] = cpp[0];
              }
              size = val2.length;
            } else if (typeof $cptable !== "undefined" && f2 == "cpstr") {
              cpp = $cptable.utils.encode(current_codepage, val2);
              if (cpp.length == val2.length) {
                for (i6 = 0; i6 < val2.length; ++i6)
                  if (cpp[i6] == 0 && val2.charCodeAt(i6) != 0)
                    cpp[i6] = 95;
              }
              if (cpp.length == 2 * val2.length) {
                for (i6 = 0; i6 < val2.length; ++i6)
                  if (cpp[2 * i6] == 0 && cpp[2 * i6 + 1] == 0 && val2.charCodeAt(i6) != 0)
                    cpp[2 * i6] = 95;
              }
              for (i6 = 0; i6 < cpp.length; ++i6)
                this[this.l + i6] = cpp[i6];
              size = cpp.length;
            } else {
              val2 = val2.replace(/[^\x00-\x7F]/g, "_");
              for (i6 = 0; i6 != val2.length; ++i6)
                this[this.l + i6] = val2.charCodeAt(i6) & 255;
              size = val2.length;
            }
          } else if (f2 === "hex") {
            for (; i6 < t5; ++i6) {
              this[this.l++] = parseInt(val2.slice(2 * i6, 2 * i6 + 2), 16) || 0;
            }
            return this;
          } else if (f2 === "utf16le") {
            var end = Math.min(this.l + t5, this.length);
            for (i6 = 0; i6 < Math.min(val2.length, t5); ++i6) {
              var cc2 = val2.charCodeAt(i6);
              this[this.l++] = cc2 & 255;
              this[this.l++] = cc2 >> 8;
            }
            while (this.l < end)
              this[this.l++] = 0;
            return this;
          } else
            switch (t5) {
              case 1:
                size = 1;
                this[this.l] = val2 & 255;
                break;
              case 2:
                size = 2;
                this[this.l] = val2 & 255;
                val2 >>>= 8;
                this[this.l + 1] = val2 & 255;
                break;
              case 3:
                size = 3;
                this[this.l] = val2 & 255;
                val2 >>>= 8;
                this[this.l + 1] = val2 & 255;
                val2 >>>= 8;
                this[this.l + 2] = val2 & 255;
                break;
              case 4:
                size = 4;
                __writeUInt32LE(this, val2, this.l);
                break;
              case 8:
                size = 8;
                if (f2 === "f") {
                  write_double_le(this, val2, this.l);
                  break;
                }
              case 16:
                break;
              case -4:
                size = 4;
                __writeInt32LE(this, val2, this.l);
                break;
            }
          this.l += size;
          return this;
        }
        function CheckField(hexstr, fld) {
          var m4 = __hexlify(this, this.l, hexstr.length >> 1);
          if (m4 !== hexstr)
            throw new Error(fld + "Expected " + hexstr + " saw " + m4);
          this.l += hexstr.length >> 1;
        }
        function prep_blob(blob, pos) {
          blob.l = pos;
          blob.read_shift = ReadShift;
          blob.chk = CheckField;
          blob.write_shift = WriteShift;
        }
        function parsenoop(blob, length) {
          blob.l += length;
        }
        function new_buf(sz) {
          var o6 = new_raw_buf(sz);
          prep_blob(o6, 0);
          return o6;
        }
        function recordhopper(data, cb, opts) {
          if (!data)
            return;
          var tmpbyte, cntbyte, length;
          prep_blob(data, data.l || 0);
          var L2 = data.length, RT = 0, tgt = 0;
          while (data.l < L2) {
            RT = data.read_shift(1);
            if (RT & 128)
              RT = (RT & 127) + ((data.read_shift(1) & 127) << 7);
            var R2 = XLSBRecordEnum[RT] || XLSBRecordEnum[65535];
            tmpbyte = data.read_shift(1);
            length = tmpbyte & 127;
            for (cntbyte = 1; cntbyte < 4 && tmpbyte & 128; ++cntbyte)
              length += ((tmpbyte = data.read_shift(1)) & 127) << 7 * cntbyte;
            tgt = data.l + length;
            var d2 = R2.f && R2.f(data, length, opts);
            data.l = tgt;
            if (cb(d2, R2, RT))
              return;
          }
        }
        function buf_array() {
          var bufs = [], blksz = has_buf ? 16384 : 2048;
          var has_buf_copy = has_buf && typeof new_buf(blksz).copy == "function";
          var newblk = function ba_newblk(sz) {
            var o6 = new_buf(sz);
            prep_blob(o6, 0);
            return o6;
          };
          var curbuf = newblk(blksz);
          var endbuf = function ba_endbuf() {
            if (!curbuf)
              return;
            if (curbuf.l) {
              if (curbuf.length > curbuf.l) {
                curbuf = curbuf.slice(0, curbuf.l);
                curbuf.l = curbuf.length;
              }
              if (curbuf.length > 0)
                bufs.push(curbuf);
            }
            curbuf = null;
          };
          var next = function ba_next(sz) {
            if (curbuf && sz < curbuf.length - curbuf.l)
              return curbuf;
            endbuf();
            return curbuf = newblk(Math.max(sz + 1, blksz));
          };
          var end = function ba_end() {
            endbuf();
            return bconcat(bufs);
          };
          var end2 = function() {
            endbuf();
            return bufs;
          };
          var push = function ba_push(buf) {
            endbuf();
            curbuf = buf;
            if (curbuf.l == null)
              curbuf.l = curbuf.length;
            next(blksz);
          };
          return { next, push, end, _bufs: bufs, end2 };
        }
        function write_record(ba, type, payload, length) {
          var t5 = +type, l5;
          if (isNaN(t5))
            return;
          if (!length)
            length = XLSBRecordEnum[t5].p || (payload || []).length || 0;
          l5 = 1 + (t5 >= 128 ? 1 : 0) + 1;
          if (length >= 128)
            ++l5;
          if (length >= 16384)
            ++l5;
          if (length >= 2097152)
            ++l5;
          var o6 = ba.next(l5);
          if (t5 <= 127)
            o6.write_shift(1, t5);
          else {
            o6.write_shift(1, (t5 & 127) + 128);
            o6.write_shift(1, t5 >> 7);
          }
          for (var i6 = 0; i6 != 4; ++i6) {
            if (length >= 128) {
              o6.write_shift(1, (length & 127) + 128);
              length >>= 7;
            } else {
              o6.write_shift(1, length);
              break;
            }
          }
          if (length > 0 && is_buf(payload))
            ba.push(payload);
        }
        function shift_cell_xls(cell, tgt, opts) {
          var out = dup(cell);
          if (tgt.s) {
            if (out.cRel)
              out.c += tgt.s.c;
            if (out.rRel)
              out.r += tgt.s.r;
          } else {
            if (out.cRel)
              out.c += tgt.c;
            if (out.rRel)
              out.r += tgt.r;
          }
          if (!opts || opts.biff < 12) {
            while (out.c >= 256)
              out.c -= 256;
            while (out.r >= 65536)
              out.r -= 65536;
          }
          return out;
        }
        function shift_range_xls(cell, range, opts) {
          var out = dup(cell);
          out.s = shift_cell_xls(out.s, range.s, opts);
          out.e = shift_cell_xls(out.e, range.s, opts);
          return out;
        }
        function encode_cell_xls(c8, biff) {
          if (c8.cRel && c8.c < 0) {
            c8 = dup(c8);
            while (c8.c < 0)
              c8.c += biff > 8 ? 16384 : 256;
          }
          if (c8.rRel && c8.r < 0) {
            c8 = dup(c8);
            while (c8.r < 0)
              c8.r += biff > 8 ? 1048576 : biff > 5 ? 65536 : 16384;
          }
          var s3 = encode_cell(c8);
          if (!c8.cRel && c8.cRel != null)
            s3 = fix_col(s3);
          if (!c8.rRel && c8.rRel != null)
            s3 = fix_row(s3);
          return s3;
        }
        function encode_range_xls(r6, opts) {
          if (r6.s.r == 0 && !r6.s.rRel) {
            if (r6.e.r == (opts.biff >= 12 ? 1048575 : opts.biff >= 8 ? 65536 : 16384) && !r6.e.rRel) {
              return (r6.s.cRel ? "" : "$") + encode_col(r6.s.c) + ":" + (r6.e.cRel ? "" : "$") + encode_col(r6.e.c);
            }
          }
          if (r6.s.c == 0 && !r6.s.cRel) {
            if (r6.e.c == (opts.biff >= 12 ? 16383 : 255) && !r6.e.cRel) {
              return (r6.s.rRel ? "" : "$") + encode_row(r6.s.r) + ":" + (r6.e.rRel ? "" : "$") + encode_row(r6.e.r);
            }
          }
          return encode_cell_xls(r6.s, opts.biff) + ":" + encode_cell_xls(r6.e, opts.biff);
        }
        if (typeof cptable !== "undefined")
          set_cptable(cptable);
        else if (typeof module !== "undefined" && typeof __require !== "undefined") {
          set_cptable(require_cpexcel());
        }
        function decode_row(rowstr) {
          return parseInt(unfix_row(rowstr), 10) - 1;
        }
        function encode_row(row) {
          return "" + (row + 1);
        }
        function fix_row(cstr) {
          return cstr.replace(/([A-Z]|^)(\d+)$/, "$1$$$2");
        }
        function unfix_row(cstr) {
          return cstr.replace(/\$(\d+)$/, "$1");
        }
        function decode_col(colstr) {
          var c8 = unfix_col(colstr), d2 = 0, i6 = 0;
          for (; i6 !== c8.length; ++i6)
            d2 = 26 * d2 + c8.charCodeAt(i6) - 64;
          return d2 - 1;
        }
        function encode_col(col) {
          if (col < 0)
            throw new Error("invalid column " + col);
          var s3 = "";
          for (++col; col; col = Math.floor((col - 1) / 26))
            s3 = String.fromCharCode((col - 1) % 26 + 65) + s3;
          return s3;
        }
        function fix_col(cstr) {
          return cstr.replace(/^([A-Z])/, "$$$1");
        }
        function unfix_col(cstr) {
          return cstr.replace(/^\$([A-Z])/, "$1");
        }
        function split_cell(cstr) {
          return cstr.replace(/(\$?[A-Z]*)(\$?\d*)/, "$1,$2").split(",");
        }
        function decode_cell(cstr) {
          var R2 = 0, C6 = 0;
          for (var i6 = 0; i6 < cstr.length; ++i6) {
            var cc2 = cstr.charCodeAt(i6);
            if (cc2 >= 48 && cc2 <= 57)
              R2 = 10 * R2 + (cc2 - 48);
            else if (cc2 >= 65 && cc2 <= 90)
              C6 = 26 * C6 + (cc2 - 64);
          }
          return { c: C6 - 1, r: R2 - 1 };
        }
        function encode_cell(cell) {
          var col = cell.c + 1;
          var s3 = "";
          for (; col; col = (col - 1) / 26 | 0)
            s3 = String.fromCharCode((col - 1) % 26 + 65) + s3;
          return s3 + (cell.r + 1);
        }
        function decode_range(range) {
          var idx = range.indexOf(":");
          if (idx == -1)
            return { s: decode_cell(range), e: decode_cell(range) };
          return { s: decode_cell(range.slice(0, idx)), e: decode_cell(range.slice(idx + 1)) };
        }
        function encode_range(cs, ce3) {
          if (typeof ce3 === "undefined" || typeof ce3 === "number") {
            return encode_range(cs.s, cs.e);
          }
          if (typeof cs !== "string")
            cs = encode_cell(cs);
          if (typeof ce3 !== "string")
            ce3 = encode_cell(ce3);
          return cs == ce3 ? cs : cs + ":" + ce3;
        }
        function fix_range(a1) {
          var s3 = decode_range(a1);
          return "$" + encode_col(s3.s.c) + "$" + encode_row(s3.s.r) + ":$" + encode_col(s3.e.c) + "$" + encode_row(s3.e.r);
        }
        function formula_quote_sheet_name(sname, opts) {
          if (!sname && !(opts && opts.biff <= 5 && opts.biff >= 2))
            throw new Error("empty sheet name");
          if (/[^\w\u4E00-\u9FFF\u3040-\u30FF]/.test(sname))
            return "'" + sname.replace(/'/g, "''") + "'";
          return sname;
        }
        function safe_decode_range(range) {
          var o6 = { s: { c: 0, r: 0 }, e: { c: 0, r: 0 } };
          var idx = 0, i6 = 0, cc2 = 0;
          var len = range.length;
          for (idx = 0; i6 < len; ++i6) {
            if ((cc2 = range.charCodeAt(i6) - 64) < 1 || cc2 > 26)
              break;
            idx = 26 * idx + cc2;
          }
          o6.s.c = --idx;
          for (idx = 0; i6 < len; ++i6) {
            if ((cc2 = range.charCodeAt(i6) - 48) < 0 || cc2 > 9)
              break;
            idx = 10 * idx + cc2;
          }
          o6.s.r = --idx;
          if (i6 === len || cc2 != 10) {
            o6.e.c = o6.s.c;
            o6.e.r = o6.s.r;
            return o6;
          }
          ++i6;
          for (idx = 0; i6 != len; ++i6) {
            if ((cc2 = range.charCodeAt(i6) - 64) < 1 || cc2 > 26)
              break;
            idx = 26 * idx + cc2;
          }
          o6.e.c = --idx;
          for (idx = 0; i6 != len; ++i6) {
            if ((cc2 = range.charCodeAt(i6) - 48) < 0 || cc2 > 9)
              break;
            idx = 10 * idx + cc2;
          }
          o6.e.r = --idx;
          return o6;
        }
        function safe_format_cell(cell, v4) {
          var q3 = cell.t == "d" && v4 instanceof Date;
          if (cell.z != null)
            try {
              return cell.w = SSF_format(cell.z, q3 ? datenum(v4) : v4);
            } catch (e7) {
            }
          try {
            return cell.w = SSF_format((cell.XF || {}).numFmtId || (q3 ? 14 : 0), q3 ? datenum(v4) : v4);
          } catch (e7) {
            return "" + v4;
          }
        }
        function format_cell(cell, v4, o6) {
          if (cell == null || cell.t == null || cell.t == "z")
            return "";
          if (cell.w !== void 0)
            return cell.w;
          if (cell.t == "d" && !cell.z && o6 && o6.dateNF)
            cell.z = o6.dateNF;
          if (cell.t == "e")
            return BErr[cell.v] || cell.v;
          if (v4 == void 0)
            return safe_format_cell(cell, cell.v);
          return safe_format_cell(cell, v4);
        }
        function sheet_to_workbook(sheet, opts) {
          var n6 = opts && opts.sheet ? opts.sheet : "Sheet1";
          var sheets = {};
          sheets[n6] = sheet;
          return { SheetNames: [n6], Sheets: sheets };
        }
        function sheet_new(opts) {
          var out = {};
          var o6 = opts || {};
          if (o6.dense)
            out["!data"] = [];
          return out;
        }
        function sheet_add_aoa(_ws, data, opts) {
          var o6 = opts || {};
          var dense = _ws ? _ws["!data"] != null : o6.dense;
          if (DENSE != null && dense == null)
            dense = DENSE;
          var ws = _ws || (dense ? { "!data": [] } : {});
          if (dense && !ws["!data"])
            ws["!data"] = [];
          var _R = 0, _C = 0;
          if (ws && o6.origin != null) {
            if (typeof o6.origin == "number")
              _R = o6.origin;
            else {
              var _origin = typeof o6.origin == "string" ? decode_cell(o6.origin) : o6.origin;
              _R = _origin.r;
              _C = _origin.c;
            }
          }
          var range = { s: { c: 1e7, r: 1e7 }, e: { c: 0, r: 0 } };
          if (ws["!ref"]) {
            var _range = safe_decode_range(ws["!ref"]);
            range.s.c = _range.s.c;
            range.s.r = _range.s.r;
            range.e.c = Math.max(range.e.c, _range.e.c);
            range.e.r = Math.max(range.e.r, _range.e.r);
            if (_R == -1)
              range.e.r = _R = ws["!ref"] ? _range.e.r + 1 : 0;
          } else {
            range.s.c = range.e.c = range.s.r = range.e.r = 0;
          }
          var row = [], seen = false;
          for (var R2 = 0; R2 != data.length; ++R2) {
            if (!data[R2])
              continue;
            if (!Array.isArray(data[R2]))
              throw new Error("aoa_to_sheet expects an array of arrays");
            var __R = _R + R2;
            if (dense) {
              if (!ws["!data"][__R])
                ws["!data"][__R] = [];
              row = ws["!data"][__R];
            }
            var data_R = data[R2];
            for (var C6 = 0; C6 != data_R.length; ++C6) {
              if (typeof data_R[C6] === "undefined")
                continue;
              var cell = { v: data_R[C6], t: "" };
              var __C = _C + C6;
              if (range.s.r > __R)
                range.s.r = __R;
              if (range.s.c > __C)
                range.s.c = __C;
              if (range.e.r < __R)
                range.e.r = __R;
              if (range.e.c < __C)
                range.e.c = __C;
              seen = true;
              if (data_R[C6] && typeof data_R[C6] === "object" && !Array.isArray(data_R[C6]) && !(data_R[C6] instanceof Date))
                cell = data_R[C6];
              else {
                if (Array.isArray(cell.v)) {
                  cell.f = data_R[C6][1];
                  cell.v = cell.v[0];
                }
                if (cell.v === null) {
                  if (cell.f)
                    cell.t = "n";
                  else if (o6.nullError) {
                    cell.t = "e";
                    cell.v = 0;
                  } else if (!o6.sheetStubs)
                    continue;
                  else
                    cell.t = "z";
                } else if (typeof cell.v === "number") {
                  if (isFinite(cell.v))
                    cell.t = "n";
                  else if (isNaN(cell.v)) {
                    cell.t = "e";
                    cell.v = 15;
                  } else {
                    cell.t = "e";
                    cell.v = 7;
                  }
                } else if (typeof cell.v === "boolean")
                  cell.t = "b";
                else if (cell.v instanceof Date) {
                  cell.z = o6.dateNF || table_fmt[14];
                  if (!o6.UTC)
                    cell.v = local_to_utc(cell.v);
                  if (o6.cellDates) {
                    cell.t = "d";
                    cell.w = SSF_format(cell.z, datenum(cell.v, o6.date1904));
                  } else {
                    cell.t = "n";
                    cell.v = datenum(cell.v, o6.date1904);
                    cell.w = SSF_format(cell.z, cell.v);
                  }
                } else
                  cell.t = "s";
              }
              if (dense) {
                if (row[__C] && row[__C].z)
                  cell.z = row[__C].z;
                row[__C] = cell;
              } else {
                var cell_ref = encode_col(__C) + (__R + 1);
                if (ws[cell_ref] && ws[cell_ref].z)
                  cell.z = ws[cell_ref].z;
                ws[cell_ref] = cell;
              }
            }
          }
          if (seen && range.s.c < 104e5)
            ws["!ref"] = encode_range(range);
          return ws;
        }
        function aoa_to_sheet(data, opts) {
          return sheet_add_aoa(null, data, opts);
        }
        function parse_Int32LE(data) {
          return data.read_shift(4, "i");
        }
        function write_UInt32LE(x3, o6) {
          if (!o6)
            o6 = new_buf(4);
          o6.write_shift(4, x3);
          return o6;
        }
        function parse_XLWideString(data) {
          var cchCharacters = data.read_shift(4);
          return cchCharacters === 0 ? "" : data.read_shift(cchCharacters, "dbcs");
        }
        function write_XLWideString(data, o6) {
          var _null = false;
          if (o6 == null) {
            _null = true;
            o6 = new_buf(4 + 2 * data.length);
          }
          o6.write_shift(4, data.length);
          if (data.length > 0)
            o6.write_shift(0, data, "dbcs");
          return _null ? o6.slice(0, o6.l) : o6;
        }
        function parse_StrRun(data) {
          return { ich: data.read_shift(2), ifnt: data.read_shift(2) };
        }
        function write_StrRun(run, o6) {
          if (!o6)
            o6 = new_buf(4);
          o6.write_shift(2, run.ich || 0);
          o6.write_shift(2, run.ifnt || 0);
          return o6;
        }
        function parse_RichStr(data, length) {
          var start2 = data.l;
          var flags = data.read_shift(1);
          var str = parse_XLWideString(data);
          var rgsStrRun = [];
          var z3 = { t: str, h: str };
          if ((flags & 1) !== 0) {
            var dwSizeStrRun = data.read_shift(4);
            for (var i6 = 0; i6 != dwSizeStrRun; ++i6)
              rgsStrRun.push(parse_StrRun(data));
            z3.r = rgsStrRun;
          } else
            z3.r = [{ ich: 0, ifnt: 0 }];
          data.l = start2 + length;
          return z3;
        }
        function write_RichStr(str, o6) {
          var _null = false;
          if (o6 == null) {
            _null = true;
            o6 = new_buf(15 + 4 * str.t.length);
          }
          o6.write_shift(1, 0);
          write_XLWideString(str.t, o6);
          return _null ? o6.slice(0, o6.l) : o6;
        }
        var parse_BrtCommentText = parse_RichStr;
        function write_BrtCommentText(str, o6) {
          var _null = false;
          if (o6 == null) {
            _null = true;
            o6 = new_buf(23 + 4 * str.t.length);
          }
          o6.write_shift(1, 1);
          write_XLWideString(str.t, o6);
          o6.write_shift(4, 1);
          write_StrRun({ ich: 0, ifnt: 0 }, o6);
          return _null ? o6.slice(0, o6.l) : o6;
        }
        function parse_XLSBCell(data) {
          var col = data.read_shift(4);
          var iStyleRef = data.read_shift(2);
          iStyleRef += data.read_shift(1) << 16;
          data.l++;
          return { c: col, iStyleRef };
        }
        function write_XLSBCell(cell, o6) {
          if (o6 == null)
            o6 = new_buf(8);
          o6.write_shift(-4, cell.c);
          o6.write_shift(3, cell.iStyleRef || cell.s);
          o6.write_shift(1, 0);
          return o6;
        }
        function parse_XLSBShortCell(data) {
          var iStyleRef = data.read_shift(2);
          iStyleRef += data.read_shift(1) << 16;
          data.l++;
          return { c: -1, iStyleRef };
        }
        function write_XLSBShortCell(cell, o6) {
          if (o6 == null)
            o6 = new_buf(4);
          o6.write_shift(3, cell.iStyleRef || cell.s);
          o6.write_shift(1, 0);
          return o6;
        }
        var parse_XLSBCodeName = parse_XLWideString;
        var write_XLSBCodeName = write_XLWideString;
        function parse_XLNullableWideString(data) {
          var cchCharacters = data.read_shift(4);
          return cchCharacters === 0 || cchCharacters === 4294967295 ? "" : data.read_shift(cchCharacters, "dbcs");
        }
        function write_XLNullableWideString(data, o6) {
          var _null = false;
          if (o6 == null) {
            _null = true;
            o6 = new_buf(127);
          }
          o6.write_shift(4, data.length > 0 ? data.length : 4294967295);
          if (data.length > 0)
            o6.write_shift(0, data, "dbcs");
          return _null ? o6.slice(0, o6.l) : o6;
        }
        var parse_XLNameWideString = parse_XLWideString;
        var parse_RelID = parse_XLNullableWideString;
        var write_RelID = write_XLNullableWideString;
        function parse_RkNumber(data) {
          var b3 = data.slice(data.l, data.l + 4);
          var fX100 = b3[0] & 1, fInt = b3[0] & 2;
          data.l += 4;
          var RK = fInt === 0 ? __double([0, 0, 0, 0, b3[0] & 252, b3[1], b3[2], b3[3]], 0) : __readInt32LE(b3, 0) >> 2;
          return fX100 ? RK / 100 : RK;
        }
        function write_RkNumber(data, o6) {
          if (o6 == null)
            o6 = new_buf(4);
          var fX100 = 0, fInt = 0, d100 = data * 100;
          if (data == (data | 0) && data >= -(1 << 29) && data < 1 << 29) {
            fInt = 1;
          } else if (d100 == (d100 | 0) && d100 >= -(1 << 29) && d100 < 1 << 29) {
            fInt = 1;
            fX100 = 1;
          }
          if (fInt)
            o6.write_shift(-4, ((fX100 ? d100 : data) << 2) + (fX100 + 2));
          else
            throw new Error("unsupported RkNumber " + data);
        }
        function parse_RfX(data) {
          var cell = { s: {}, e: {} };
          cell.s.r = data.read_shift(4);
          cell.e.r = data.read_shift(4);
          cell.s.c = data.read_shift(4);
          cell.e.c = data.read_shift(4);
          return cell;
        }
        function write_RfX(r6, o6) {
          if (!o6)
            o6 = new_buf(16);
          o6.write_shift(4, r6.s.r);
          o6.write_shift(4, r6.e.r);
          o6.write_shift(4, r6.s.c);
          o6.write_shift(4, r6.e.c);
          return o6;
        }
        var parse_UncheckedRfX = parse_RfX;
        var write_UncheckedRfX = write_RfX;
        function parse_Xnum(data) {
          if (data.length - data.l < 8)
            throw "XLS Xnum Buffer underflow";
          return data.read_shift(8, "f");
        }
        function write_Xnum(data, o6) {
          return (o6 || new_buf(8)).write_shift(8, data, "f");
        }
        function parse_BrtColor(data) {
          var out = {};
          var d2 = data.read_shift(1);
          var xColorType = d2 >>> 1;
          var index = data.read_shift(1);
          var nTS = data.read_shift(2, "i");
          var bR = data.read_shift(1);
          var bG = data.read_shift(1);
          var bB = data.read_shift(1);
          data.l++;
          switch (xColorType) {
            case 0:
              out.auto = 1;
              break;
            case 1:
              out.index = index;
              var icv = XLSIcv[index];
              if (icv)
                out.rgb = rgb2Hex(icv);
              break;
            case 2:
              out.rgb = rgb2Hex([bR, bG, bB]);
              break;
            case 3:
              out.theme = index;
              break;
          }
          if (nTS != 0)
            out.tint = nTS > 0 ? nTS / 32767 : nTS / 32768;
          return out;
        }
        function write_BrtColor(color5, o6) {
          if (!o6)
            o6 = new_buf(8);
          if (!color5 || color5.auto) {
            o6.write_shift(4, 0);
            o6.write_shift(4, 0);
            return o6;
          }
          if (color5.index != null) {
            o6.write_shift(1, 2);
            o6.write_shift(1, color5.index);
          } else if (color5.theme != null) {
            o6.write_shift(1, 6);
            o6.write_shift(1, color5.theme);
          } else {
            o6.write_shift(1, 5);
            o6.write_shift(1, 0);
          }
          var nTS = color5.tint || 0;
          if (nTS > 0)
            nTS *= 32767;
          else if (nTS < 0)
            nTS *= 32768;
          o6.write_shift(2, nTS);
          if (!color5.rgb || color5.theme != null) {
            o6.write_shift(2, 0);
            o6.write_shift(1, 0);
            o6.write_shift(1, 0);
          } else {
            var rgb5 = color5.rgb || "FFFFFF";
            if (typeof rgb5 == "number")
              rgb5 = ("000000" + rgb5.toString(16)).slice(-6);
            o6.write_shift(1, parseInt(rgb5.slice(0, 2), 16));
            o6.write_shift(1, parseInt(rgb5.slice(2, 4), 16));
            o6.write_shift(1, parseInt(rgb5.slice(4, 6), 16));
            o6.write_shift(1, 255);
          }
          return o6;
        }
        function parse_FontFlags(data) {
          var d2 = data.read_shift(1);
          data.l++;
          var out = {
            fBold: d2 & 1,
            fItalic: d2 & 2,
            fUnderline: d2 & 4,
            fStrikeout: d2 & 8,
            fOutline: d2 & 16,
            fShadow: d2 & 32,
            fCondense: d2 & 64,
            fExtend: d2 & 128
          };
          return out;
        }
        function write_FontFlags(font, o6) {
          if (!o6)
            o6 = new_buf(2);
          var grbit = (font.italic ? 2 : 0) | (font.strike ? 8 : 0) | (font.outline ? 16 : 0) | (font.shadow ? 32 : 0) | (font.condense ? 64 : 0) | (font.extend ? 128 : 0);
          o6.write_shift(1, grbit);
          o6.write_shift(1, 0);
          return o6;
        }
        function parse_ClipboardFormatOrString(o6, w3) {
          var ClipFmt = { 2: "BITMAP", 3: "METAFILEPICT", 8: "DIB", 14: "ENHMETAFILE" };
          var m4 = o6.read_shift(4);
          switch (m4) {
            case 0:
              return "";
            case 4294967295:
            case 4294967294:
              return ClipFmt[o6.read_shift(4)] || "";
          }
          if (m4 > 400)
            throw new Error("Unsupported Clipboard: " + m4.toString(16));
          o6.l -= 4;
          return o6.read_shift(0, w3 == 1 ? "lpstr" : "lpwstr");
        }
        function parse_ClipboardFormatOrAnsiString(o6) {
          return parse_ClipboardFormatOrString(o6, 1);
        }
        function parse_ClipboardFormatOrUnicodeString(o6) {
          return parse_ClipboardFormatOrString(o6, 2);
        }
        var VT_I2 = 2;
        var VT_I4 = 3;
        var VT_BOOL = 11;
        var VT_VARIANT = 12;
        var VT_UI4 = 19;
        var VT_FILETIME = 64;
        var VT_BLOB = 65;
        var VT_CF = 71;
        var VT_VECTOR_VARIANT = 4108;
        var VT_VECTOR_LPSTR = 4126;
        var VT_STRING = 80;
        var VT_USTR = 81;
        var VT_CUSTOM = [VT_STRING, VT_USTR];
        var DocSummaryPIDDSI = {
          1: { n: "CodePage", t: VT_I2 },
          2: { n: "Category", t: VT_STRING },
          3: { n: "PresentationFormat", t: VT_STRING },
          4: { n: "ByteCount", t: VT_I4 },
          5: { n: "LineCount", t: VT_I4 },
          6: { n: "ParagraphCount", t: VT_I4 },
          7: { n: "SlideCount", t: VT_I4 },
          8: { n: "NoteCount", t: VT_I4 },
          9: { n: "HiddenCount", t: VT_I4 },
          10: { n: "MultimediaClipCount", t: VT_I4 },
          11: { n: "ScaleCrop", t: VT_BOOL },
          12: { n: "HeadingPairs", t: VT_VECTOR_VARIANT },
          13: { n: "TitlesOfParts", t: VT_VECTOR_LPSTR },
          14: { n: "Manager", t: VT_STRING },
          15: { n: "Company", t: VT_STRING },
          16: { n: "LinksUpToDate", t: VT_BOOL },
          17: { n: "CharacterCount", t: VT_I4 },
          19: { n: "SharedDoc", t: VT_BOOL },
          22: { n: "HyperlinksChanged", t: VT_BOOL },
          23: { n: "AppVersion", t: VT_I4, p: "version" },
          24: { n: "DigSig", t: VT_BLOB },
          26: { n: "ContentType", t: VT_STRING },
          27: { n: "ContentStatus", t: VT_STRING },
          28: { n: "Language", t: VT_STRING },
          29: { n: "Version", t: VT_STRING },
          255: {},
          2147483648: { n: "Locale", t: VT_UI4 },
          2147483651: { n: "Behavior", t: VT_UI4 },
          1919054434: {}
        };
        var SummaryPIDSI = {
          1: { n: "CodePage", t: VT_I2 },
          2: { n: "Title", t: VT_STRING },
          3: { n: "Subject", t: VT_STRING },
          4: { n: "Author", t: VT_STRING },
          5: { n: "Keywords", t: VT_STRING },
          6: { n: "Comments", t: VT_STRING },
          7: { n: "Template", t: VT_STRING },
          8: { n: "LastAuthor", t: VT_STRING },
          9: { n: "RevNumber", t: VT_STRING },
          10: { n: "EditTime", t: VT_FILETIME },
          11: { n: "LastPrinted", t: VT_FILETIME },
          12: { n: "CreatedDate", t: VT_FILETIME },
          13: { n: "ModifiedDate", t: VT_FILETIME },
          14: { n: "PageCount", t: VT_I4 },
          15: { n: "WordCount", t: VT_I4 },
          16: { n: "CharCount", t: VT_I4 },
          17: { n: "Thumbnail", t: VT_CF },
          18: { n: "Application", t: VT_STRING },
          19: { n: "DocSecurity", t: VT_I4 },
          255: {},
          2147483648: { n: "Locale", t: VT_UI4 },
          2147483651: { n: "Behavior", t: VT_UI4 },
          1919054434: {}
        };
        var CountryEnum = {
          1: "US",
          2: "CA",
          3: "",
          7: "RU",
          20: "EG",
          30: "GR",
          31: "NL",
          32: "BE",
          33: "FR",
          34: "ES",
          36: "HU",
          39: "IT",
          41: "CH",
          43: "AT",
          44: "GB",
          45: "DK",
          46: "SE",
          47: "NO",
          48: "PL",
          49: "DE",
          52: "MX",
          55: "BR",
          61: "AU",
          64: "NZ",
          66: "TH",
          81: "JP",
          82: "KR",
          84: "VN",
          86: "CN",
          90: "TR",
          105: "JS",
          213: "DZ",
          216: "MA",
          218: "LY",
          351: "PT",
          354: "IS",
          358: "FI",
          420: "CZ",
          886: "TW",
          961: "LB",
          962: "JO",
          963: "SY",
          964: "IQ",
          965: "KW",
          966: "SA",
          971: "AE",
          972: "IL",
          974: "QA",
          981: "IR",
          65535: "US"
        };
        var XLSFillPattern = [
          null,
          "solid",
          "mediumGray",
          "darkGray",
          "lightGray",
          "darkHorizontal",
          "darkVertical",
          "darkDown",
          "darkUp",
          "darkGrid",
          "darkTrellis",
          "lightHorizontal",
          "lightVertical",
          "lightDown",
          "lightUp",
          "lightGrid",
          "lightTrellis",
          "gray125",
          "gray0625"
        ];
        function rgbify(arr) {
          return arr.map(function(x3) {
            return [x3 >> 16 & 255, x3 >> 8 & 255, x3 & 255];
          });
        }
        var _XLSIcv = rgbify([
          0,
          16777215,
          16711680,
          65280,
          255,
          16776960,
          16711935,
          65535,
          0,
          16777215,
          16711680,
          65280,
          255,
          16776960,
          16711935,
          65535,
          8388608,
          32768,
          128,
          8421376,
          8388736,
          32896,
          12632256,
          8421504,
          10066431,
          10040166,
          16777164,
          13434879,
          6684774,
          16744576,
          26316,
          13421823,
          128,
          16711935,
          16776960,
          65535,
          8388736,
          8388608,
          32896,
          255,
          52479,
          13434879,
          13434828,
          16777113,
          10079487,
          16751052,
          13408767,
          16764057,
          3368703,
          3394764,
          10079232,
          16763904,
          16750848,
          16737792,
          6710937,
          9868950,
          13158,
          3381606,
          13056,
          3355392,
          10040064,
          10040166,
          3355545,
          3355443,
          0,
          16777215,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ]);
        var XLSIcv = dup(_XLSIcv);
        var BErr = {
          0: "#NULL!",
          7: "#DIV/0!",
          15: "#VALUE!",
          23: "#REF!",
          29: "#NAME?",
          36: "#NUM!",
          42: "#N/A",
          43: "#GETTING_DATA",
          255: "#WTF?"
        };
        var RBErr = {
          "#NULL!": 0,
          "#DIV/0!": 7,
          "#VALUE!": 15,
          "#REF!": 23,
          "#NAME?": 29,
          "#NUM!": 36,
          "#N/A": 42,
          "#GETTING_DATA": 43,
          "#WTF?": 255
        };
        var XLSLblBuiltIn = [
          "_xlnm.Consolidate_Area",
          "_xlnm.Auto_Open",
          "_xlnm.Auto_Close",
          "_xlnm.Extract",
          "_xlnm.Database",
          "_xlnm.Criteria",
          "_xlnm.Print_Area",
          "_xlnm.Print_Titles",
          "_xlnm.Recorder",
          "_xlnm.Data_Form",
          "_xlnm.Auto_Activate",
          "_xlnm.Auto_Deactivate",
          "_xlnm.Sheet_Title",
          "_xlnm._FilterDatabase"
        ];
        var ct2type = {
          "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet.main+xml": "workbooks",
          "application/vnd.ms-excel.sheet.macroEnabled.main+xml": "workbooks",
          "application/vnd.ms-excel.sheet.binary.macroEnabled.main": "workbooks",
          "application/vnd.ms-excel.addin.macroEnabled.main+xml": "workbooks",
          "application/vnd.openxmlformats-officedocument.spreadsheetml.template.main+xml": "workbooks",
          "application/vnd.openxmlformats-officedocument.spreadsheetml.worksheet+xml": "sheets",
          "application/vnd.ms-excel.worksheet": "sheets",
          "application/vnd.ms-excel.binIndexWs": "TODO",
          "application/vnd.openxmlformats-officedocument.spreadsheetml.chartsheet+xml": "charts",
          "application/vnd.ms-excel.chartsheet": "charts",
          "application/vnd.ms-excel.macrosheet+xml": "macros",
          "application/vnd.ms-excel.macrosheet": "macros",
          "application/vnd.ms-excel.intlmacrosheet": "TODO",
          "application/vnd.ms-excel.binIndexMs": "TODO",
          "application/vnd.openxmlformats-officedocument.spreadsheetml.dialogsheet+xml": "dialogs",
          "application/vnd.ms-excel.dialogsheet": "dialogs",
          "application/vnd.openxmlformats-officedocument.spreadsheetml.sharedStrings+xml": "strs",
          "application/vnd.ms-excel.sharedStrings": "strs",
          "application/vnd.openxmlformats-officedocument.spreadsheetml.styles+xml": "styles",
          "application/vnd.ms-excel.styles": "styles",
          "application/vnd.openxmlformats-package.core-properties+xml": "coreprops",
          "application/vnd.openxmlformats-officedocument.custom-properties+xml": "custprops",
          "application/vnd.openxmlformats-officedocument.extended-properties+xml": "extprops",
          "application/vnd.openxmlformats-officedocument.customXmlProperties+xml": "TODO",
          "application/vnd.openxmlformats-officedocument.spreadsheetml.customProperty": "TODO",
          "application/vnd.openxmlformats-officedocument.spreadsheetml.comments+xml": "comments",
          "application/vnd.ms-excel.comments": "comments",
          "application/vnd.ms-excel.threadedcomments+xml": "threadedcomments",
          "application/vnd.ms-excel.person+xml": "people",
          "application/vnd.openxmlformats-officedocument.spreadsheetml.sheetMetadata+xml": "metadata",
          "application/vnd.ms-excel.sheetMetadata": "metadata",
          "application/vnd.ms-excel.pivotTable": "TODO",
          "application/vnd.openxmlformats-officedocument.spreadsheetml.pivotTable+xml": "TODO",
          "application/vnd.openxmlformats-officedocument.drawingml.chart+xml": "TODO",
          "application/vnd.ms-office.chartcolorstyle+xml": "TODO",
          "application/vnd.ms-office.chartstyle+xml": "TODO",
          "application/vnd.ms-office.chartex+xml": "TODO",
          "application/vnd.ms-excel.calcChain": "calcchains",
          "application/vnd.openxmlformats-officedocument.spreadsheetml.calcChain+xml": "calcchains",
          "application/vnd.openxmlformats-officedocument.spreadsheetml.printerSettings": "TODO",
          "application/vnd.ms-office.activeX": "TODO",
          "application/vnd.ms-office.activeX+xml": "TODO",
          "application/vnd.ms-excel.attachedToolbars": "TODO",
          "application/vnd.ms-excel.connections": "TODO",
          "application/vnd.openxmlformats-officedocument.spreadsheetml.connections+xml": "TODO",
          "application/vnd.ms-excel.externalLink": "links",
          "application/vnd.openxmlformats-officedocument.spreadsheetml.externalLink+xml": "links",
          "application/vnd.ms-excel.pivotCacheDefinition": "TODO",
          "application/vnd.ms-excel.pivotCacheRecords": "TODO",
          "application/vnd.openxmlformats-officedocument.spreadsheetml.pivotCacheDefinition+xml": "TODO",
          "application/vnd.openxmlformats-officedocument.spreadsheetml.pivotCacheRecords+xml": "TODO",
          "application/vnd.ms-excel.queryTable": "TODO",
          "application/vnd.openxmlformats-officedocument.spreadsheetml.queryTable+xml": "TODO",
          "application/vnd.ms-excel.userNames": "TODO",
          "application/vnd.ms-excel.revisionHeaders": "TODO",
          "application/vnd.ms-excel.revisionLog": "TODO",
          "application/vnd.openxmlformats-officedocument.spreadsheetml.revisionHeaders+xml": "TODO",
          "application/vnd.openxmlformats-officedocument.spreadsheetml.revisionLog+xml": "TODO",
          "application/vnd.openxmlformats-officedocument.spreadsheetml.userNames+xml": "TODO",
          "application/vnd.ms-excel.tableSingleCells": "TODO",
          "application/vnd.openxmlformats-officedocument.spreadsheetml.tableSingleCells+xml": "TODO",
          "application/vnd.ms-excel.slicer": "TODO",
          "application/vnd.ms-excel.slicerCache": "TODO",
          "application/vnd.ms-excel.slicer+xml": "TODO",
          "application/vnd.ms-excel.slicerCache+xml": "TODO",
          "application/vnd.ms-excel.wsSortMap": "TODO",
          "application/vnd.ms-excel.table": "TODO",
          "application/vnd.openxmlformats-officedocument.spreadsheetml.table+xml": "TODO",
          "application/vnd.openxmlformats-officedocument.theme+xml": "themes",
          "application/vnd.openxmlformats-officedocument.themeOverride+xml": "TODO",
          "application/vnd.ms-excel.Timeline+xml": "TODO",
          "application/vnd.ms-excel.TimelineCache+xml": "TODO",
          "application/vnd.ms-office.vbaProject": "vba",
          "application/vnd.ms-office.vbaProjectSignature": "TODO",
          "application/vnd.ms-office.volatileDependencies": "TODO",
          "application/vnd.openxmlformats-officedocument.spreadsheetml.volatileDependencies+xml": "TODO",
          "application/vnd.ms-excel.controlproperties+xml": "TODO",
          "application/vnd.openxmlformats-officedocument.model+data": "TODO",
          "application/vnd.ms-excel.Survey+xml": "TODO",
          "application/vnd.openxmlformats-officedocument.drawing+xml": "drawings",
          "application/vnd.openxmlformats-officedocument.drawingml.chartshapes+xml": "TODO",
          "application/vnd.openxmlformats-officedocument.drawingml.diagramColors+xml": "TODO",
          "application/vnd.openxmlformats-officedocument.drawingml.diagramData+xml": "TODO",
          "application/vnd.openxmlformats-officedocument.drawingml.diagramLayout+xml": "TODO",
          "application/vnd.openxmlformats-officedocument.drawingml.diagramStyle+xml": "TODO",
          "application/vnd.openxmlformats-officedocument.vmlDrawing": "TODO",
          "application/vnd.openxmlformats-package.relationships+xml": "rels",
          "application/vnd.openxmlformats-officedocument.oleObject": "TODO",
          "image/png": "TODO",
          "sheet": "js"
        };
        var CT_LIST = {
          workbooks: {
            xlsx: "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet.main+xml",
            xlsm: "application/vnd.ms-excel.sheet.macroEnabled.main+xml",
            xlsb: "application/vnd.ms-excel.sheet.binary.macroEnabled.main",
            xlam: "application/vnd.ms-excel.addin.macroEnabled.main+xml",
            xltx: "application/vnd.openxmlformats-officedocument.spreadsheetml.template.main+xml"
          },
          strs: {
            xlsx: "application/vnd.openxmlformats-officedocument.spreadsheetml.sharedStrings+xml",
            xlsb: "application/vnd.ms-excel.sharedStrings"
          },
          comments: {
            xlsx: "application/vnd.openxmlformats-officedocument.spreadsheetml.comments+xml",
            xlsb: "application/vnd.ms-excel.comments"
          },
          sheets: {
            xlsx: "application/vnd.openxmlformats-officedocument.spreadsheetml.worksheet+xml",
            xlsb: "application/vnd.ms-excel.worksheet"
          },
          charts: {
            xlsx: "application/vnd.openxmlformats-officedocument.spreadsheetml.chartsheet+xml",
            xlsb: "application/vnd.ms-excel.chartsheet"
          },
          dialogs: {
            xlsx: "application/vnd.openxmlformats-officedocument.spreadsheetml.dialogsheet+xml",
            xlsb: "application/vnd.ms-excel.dialogsheet"
          },
          macros: {
            xlsx: "application/vnd.ms-excel.macrosheet+xml",
            xlsb: "application/vnd.ms-excel.macrosheet"
          },
          metadata: {
            xlsx: "application/vnd.openxmlformats-officedocument.spreadsheetml.sheetMetadata+xml",
            xlsb: "application/vnd.ms-excel.sheetMetadata"
          },
          styles: {
            xlsx: "application/vnd.openxmlformats-officedocument.spreadsheetml.styles+xml",
            xlsb: "application/vnd.ms-excel.styles"
          }
        };
        function new_ct() {
          return {
            workbooks: [],
            sheets: [],
            charts: [],
            dialogs: [],
            macros: [],
            rels: [],
            strs: [],
            comments: [],
            threadedcomments: [],
            links: [],
            coreprops: [],
            extprops: [],
            custprops: [],
            themes: [],
            styles: [],
            calcchains: [],
            vba: [],
            drawings: [],
            metadata: [],
            people: [],
            TODO: [],
            xmlns: ""
          };
        }
        function parse_ct(data) {
          var ct2 = new_ct();
          if (!data || !data.match)
            return ct2;
          var ctext = {};
          (data.match(tagregex) || []).forEach(function(x3) {
            var y4 = parsexmltag(x3);
            switch (y4[0].replace(nsregex, "<")) {
              case "<?xml":
                break;
              case "<Types":
                ct2.xmlns = y4["xmlns" + (y4[0].match(/<(\w+):/) || ["", ""])[1]];
                break;
              case "<Default":
                ctext[y4.Extension.toLowerCase()] = y4.ContentType;
                break;
              case "<Override":
                if (ct2[ct2type[y4.ContentType]] !== void 0)
                  ct2[ct2type[y4.ContentType]].push(y4.PartName);
                break;
            }
          });
          if (ct2.xmlns !== XMLNS.CT)
            throw new Error("Unknown Namespace: " + ct2.xmlns);
          ct2.calcchain = ct2.calcchains.length > 0 ? ct2.calcchains[0] : "";
          ct2.sst = ct2.strs.length > 0 ? ct2.strs[0] : "";
          ct2.style = ct2.styles.length > 0 ? ct2.styles[0] : "";
          ct2.defaults = ctext;
          delete ct2.calcchains;
          return ct2;
        }
        function write_ct(ct2, opts, raw) {
          var type2ct = evert_arr(ct2type);
          var o6 = [], v4;
          if (!raw) {
            o6[o6.length] = XML_HEADER;
            o6[o6.length] = writextag("Types", null, {
              "xmlns": XMLNS.CT,
              "xmlns:xsd": XMLNS.xsd,
              "xmlns:xsi": XMLNS.xsi
            });
            o6 = o6.concat([
              ["xml", "application/xml"],
              ["bin", "application/vnd.ms-excel.sheet.binary.macroEnabled.main"],
              ["vml", "application/vnd.openxmlformats-officedocument.vmlDrawing"],
              ["data", "application/vnd.openxmlformats-officedocument.model+data"],
              ["bmp", "image/bmp"],
              ["png", "image/png"],
              ["gif", "image/gif"],
              ["emf", "image/x-emf"],
              ["wmf", "image/x-wmf"],
              ["jpg", "image/jpeg"],
              ["jpeg", "image/jpeg"],
              ["tif", "image/tiff"],
              ["tiff", "image/tiff"],
              ["pdf", "application/pdf"],
              ["rels", "application/vnd.openxmlformats-package.relationships+xml"]
            ].map(function(x3) {
              return writextag("Default", null, { "Extension": x3[0], "ContentType": x3[1] });
            }));
          }
          var f1 = function(w3) {
            if (ct2[w3] && ct2[w3].length > 0) {
              v4 = ct2[w3][0];
              o6[o6.length] = writextag("Override", null, {
                "PartName": (v4[0] == "/" ? "" : "/") + v4,
                "ContentType": CT_LIST[w3][opts.bookType] || CT_LIST[w3]["xlsx"]
              });
            }
          };
          var f2 = function(w3) {
            (ct2[w3] || []).forEach(function(v5) {
              o6[o6.length] = writextag("Override", null, {
                "PartName": (v5[0] == "/" ? "" : "/") + v5,
                "ContentType": CT_LIST[w3][opts.bookType] || CT_LIST[w3]["xlsx"]
              });
            });
          };
          var f3 = function(t5) {
            (ct2[t5] || []).forEach(function(v5) {
              o6[o6.length] = writextag("Override", null, {
                "PartName": (v5[0] == "/" ? "" : "/") + v5,
                "ContentType": type2ct[t5][0]
              });
            });
          };
          f1("workbooks");
          f2("sheets");
          f2("charts");
          f3("themes");
          ["strs", "styles"].forEach(f1);
          ["coreprops", "extprops", "custprops"].forEach(f3);
          f3("vba");
          f3("comments");
          f3("threadedcomments");
          f3("drawings");
          f2("metadata");
          f3("people");
          if (!raw && o6.length > 2) {
            o6[o6.length] = "</Types>";
            o6[1] = o6[1].replace("/>", ">");
          }
          return o6.join("");
        }
        var RELS = {
          WB: "http://schemas.openxmlformats.org/officeDocument/2006/relationships/officeDocument",
          SHEET: "http://sheetjs.openxmlformats.org/officeDocument/2006/relationships/officeDocument",
          HLINK: "http://schemas.openxmlformats.org/officeDocument/2006/relationships/hyperlink",
          VML: "http://schemas.openxmlformats.org/officeDocument/2006/relationships/vmlDrawing",
          XPATH: "http://schemas.openxmlformats.org/officeDocument/2006/relationships/externalLinkPath",
          XMISS: "http://schemas.microsoft.com/office/2006/relationships/xlExternalLinkPath/xlPathMissing",
          XLINK: "http://schemas.openxmlformats.org/officeDocument/2006/relationships/externalLink",
          CXML: "http://schemas.openxmlformats.org/officeDocument/2006/relationships/customXml",
          CXMLP: "http://schemas.openxmlformats.org/officeDocument/2006/relationships/customXmlProps",
          CMNT: "http://schemas.openxmlformats.org/officeDocument/2006/relationships/comments",
          CORE_PROPS: "http://schemas.openxmlformats.org/package/2006/relationships/metadata/core-properties",
          EXT_PROPS: "http://schemas.openxmlformats.org/officeDocument/2006/relationships/extended-properties",
          CUST_PROPS: "http://schemas.openxmlformats.org/officeDocument/2006/relationships/custom-properties",
          SST: "http://schemas.openxmlformats.org/officeDocument/2006/relationships/sharedStrings",
          STY: "http://schemas.openxmlformats.org/officeDocument/2006/relationships/styles",
          THEME: "http://schemas.openxmlformats.org/officeDocument/2006/relationships/theme",
          CHART: "http://schemas.openxmlformats.org/officeDocument/2006/relationships/chart",
          CHARTEX: "http://schemas.microsoft.com/office/2014/relationships/chartEx",
          CS: "http://schemas.openxmlformats.org/officeDocument/2006/relationships/chartsheet",
          WS: [
            "http://schemas.openxmlformats.org/officeDocument/2006/relationships/worksheet",
            "http://purl.oclc.org/ooxml/officeDocument/relationships/worksheet"
          ],
          DS: "http://schemas.openxmlformats.org/officeDocument/2006/relationships/dialogsheet",
          MS: "http://schemas.microsoft.com/office/2006/relationships/xlMacrosheet",
          IMG: "http://schemas.openxmlformats.org/officeDocument/2006/relationships/image",
          DRAW: "http://schemas.openxmlformats.org/officeDocument/2006/relationships/drawing",
          XLMETA: "http://schemas.openxmlformats.org/officeDocument/2006/relationships/sheetMetadata",
          TCMNT: "http://schemas.microsoft.com/office/2017/10/relationships/threadedComment",
          PEOPLE: "http://schemas.microsoft.com/office/2017/10/relationships/person",
          CONN: "http://schemas.openxmlformats.org/officeDocument/2006/relationships/connections",
          VBA: "http://schemas.microsoft.com/office/2006/relationships/vbaProject"
        };
        function get_rels_path(file) {
          var n6 = file.lastIndexOf("/");
          return file.slice(0, n6 + 1) + "_rels/" + file.slice(n6 + 1) + ".rels";
        }
        function parse_rels(data, currentFilePath) {
          var rels = { "!id": {} };
          if (!data)
            return rels;
          if (currentFilePath.charAt(0) !== "/") {
            currentFilePath = "/" + currentFilePath;
          }
          var hash = {};
          (data.match(tagregex) || []).forEach(function(x3) {
            var y4 = parsexmltag(x3);
            if (y4[0] === "<Relationship") {
              var rel = {};
              rel.Type = y4.Type;
              rel.Target = unescapexml(y4.Target);
              rel.Id = y4.Id;
              if (y4.TargetMode)
                rel.TargetMode = y4.TargetMode;
              var canonictarget = y4.TargetMode === "External" ? y4.Target : resolve_path(y4.Target, currentFilePath);
              rels[canonictarget] = rel;
              hash[y4.Id] = rel;
            }
          });
          rels["!id"] = hash;
          return rels;
        }
        function write_rels(rels) {
          var o6 = [XML_HEADER, writextag("Relationships", null, {
            "xmlns": XMLNS.RELS
          })];
          keys(rels["!id"]).forEach(function(rid) {
            o6[o6.length] = writextag("Relationship", null, rels["!id"][rid]);
          });
          if (o6.length > 2) {
            o6[o6.length] = "</Relationships>";
            o6[1] = o6[1].replace("/>", ">");
          }
          return o6.join("");
        }
        function add_rels(rels, rId, f2, type, relobj, targetmode) {
          if (!relobj)
            relobj = {};
          if (!rels["!id"])
            rels["!id"] = {};
          if (!rels["!idx"])
            rels["!idx"] = 1;
          if (rId < 0)
            for (rId = rels["!idx"]; rels["!id"]["rId" + rId]; ++rId) {
            }
          rels["!idx"] = rId + 1;
          relobj.Id = "rId" + rId;
          relobj.Type = type;
          relobj.Target = f2;
          if (targetmode)
            relobj.TargetMode = targetmode;
          else if ([RELS.HLINK, RELS.XPATH, RELS.XMISS].indexOf(relobj.Type) > -1)
            relobj.TargetMode = "External";
          if (rels["!id"][relobj.Id])
            throw new Error("Cannot rewrite rId " + rId);
          rels["!id"][relobj.Id] = relobj;
          rels[("/" + relobj.Target).replace("//", "/")] = relobj;
          return rId;
        }
        var CT_ODS = "application/vnd.oasis.opendocument.spreadsheet";
        function parse_manifest(d2, opts) {
          var str = xlml_normalize(d2);
          var Rn2;
          var FEtag;
          while (Rn2 = xlmlregex.exec(str))
            switch (Rn2[3]) {
              case "manifest":
                break;
              case "file-entry":
                FEtag = parsexmltag(Rn2[0], false);
                if (FEtag.path == "/" && FEtag.type !== CT_ODS)
                  throw new Error("This OpenDocument is not a spreadsheet");
                break;
              case "encryption-data":
              case "algorithm":
              case "start-key-generation":
              case "key-derivation":
                throw new Error("Unsupported ODS Encryption");
              default:
                if (opts && opts.WTF)
                  throw Rn2;
            }
        }
        function write_manifest(manifest) {
          var o6 = [XML_HEADER];
          o6.push('<manifest:manifest xmlns:manifest="urn:oasis:names:tc:opendocument:xmlns:manifest:1.0" manifest:version="1.2">\n');
          o6.push('  <manifest:file-entry manifest:full-path="/" manifest:version="1.2" manifest:media-type="application/vnd.oasis.opendocument.spreadsheet"/>\n');
          for (var i6 = 0; i6 < manifest.length; ++i6)
            o6.push('  <manifest:file-entry manifest:full-path="' + manifest[i6][0] + '" manifest:media-type="' + manifest[i6][1] + '"/>\n');
          o6.push("</manifest:manifest>");
          return o6.join("");
        }
        function write_rdf_type(file, res, tag) {
          return [
            '  <rdf:Description rdf:about="' + file + '">\n',
            '    <rdf:type rdf:resource="http://docs.oasis-open.org/ns/office/1.2/meta/' + (tag || "odf") + "#" + res + '"/>\n',
            "  </rdf:Description>\n"
          ].join("");
        }
        function write_rdf_has(base, file) {
          return [
            '  <rdf:Description rdf:about="' + base + '">\n',
            '    <ns0:hasPart xmlns:ns0="http://docs.oasis-open.org/ns/office/1.2/meta/pkg#" rdf:resource="' + file + '"/>\n',
            "  </rdf:Description>\n"
          ].join("");
        }
        function write_rdf(rdf) {
          var o6 = [XML_HEADER];
          o6.push('<rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">\n');
          for (var i6 = 0; i6 != rdf.length; ++i6) {
            o6.push(write_rdf_type(rdf[i6][0], rdf[i6][1]));
            o6.push(write_rdf_has("", rdf[i6][0]));
          }
          o6.push(write_rdf_type("", "Document", "pkg"));
          o6.push("</rdf:RDF>");
          return o6.join("");
        }
        function write_meta_ods(wb, opts) {
          return '<office:document-meta xmlns:office="urn:oasis:names:tc:opendocument:xmlns:office:1.0" xmlns:meta="urn:oasis:names:tc:opendocument:xmlns:meta:1.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:xlink="http://www.w3.org/1999/xlink" office:version="1.2"><office:meta><meta:generator>SheetJS ' + XLSX2.version + "</meta:generator></office:meta></office:document-meta>";
        }
        var CORE_PROPS = [
          ["cp:category", "Category"],
          ["cp:contentStatus", "ContentStatus"],
          ["cp:keywords", "Keywords"],
          ["cp:lastModifiedBy", "LastAuthor"],
          ["cp:lastPrinted", "LastPrinted"],
          ["cp:revision", "RevNumber"],
          ["cp:version", "Version"],
          ["dc:creator", "Author"],
          ["dc:description", "Comments"],
          ["dc:identifier", "Identifier"],
          ["dc:language", "Language"],
          ["dc:subject", "Subject"],
          ["dc:title", "Title"],
          ["dcterms:created", "CreatedDate", "date"],
          ["dcterms:modified", "ModifiedDate", "date"]
        ];
        function parse_core_props(data) {
          var p2 = {};
          data = utf8read(data);
          for (var i6 = 0; i6 < CORE_PROPS.length; ++i6) {
            var f2 = CORE_PROPS[i6], cur = str_match_xml(data, f2[0]);
            if (cur != null && cur.length > 0)
              p2[f2[1]] = unescapexml(cur[1]);
            if (f2[2] === "date" && p2[f2[1]])
              p2[f2[1]] = parseDate(p2[f2[1]]);
          }
          return p2;
        }
        function cp_doit(f2, g2, h, o6, p2) {
          if (p2[f2] != null || g2 == null || g2 === "")
            return;
          p2[f2] = g2;
          g2 = escapexml(g2);
          o6[o6.length] = h ? writextag(f2, g2, h) : writetag(f2, g2);
        }
        function write_core_props(cp, _opts) {
          var opts = _opts || {};
          var o6 = [XML_HEADER, writextag("cp:coreProperties", null, {
            "xmlns:cp": XMLNS.CORE_PROPS,
            "xmlns:dc": XMLNS.dc,
            "xmlns:dcterms": XMLNS.dcterms,
            "xmlns:dcmitype": XMLNS.dcmitype,
            "xmlns:xsi": XMLNS.xsi
          })], p2 = {};
          if (!cp && !opts.Props)
            return o6.join("");
          if (cp) {
            if (cp.CreatedDate != null)
              cp_doit("dcterms:created", typeof cp.CreatedDate === "string" ? cp.CreatedDate : write_w3cdtf(cp.CreatedDate, opts.WTF), { "xsi:type": "dcterms:W3CDTF" }, o6, p2);
            if (cp.ModifiedDate != null)
              cp_doit("dcterms:modified", typeof cp.ModifiedDate === "string" ? cp.ModifiedDate : write_w3cdtf(cp.ModifiedDate, opts.WTF), { "xsi:type": "dcterms:W3CDTF" }, o6, p2);
          }
          for (var i6 = 0; i6 != CORE_PROPS.length; ++i6) {
            var f2 = CORE_PROPS[i6];
            var v4 = opts.Props && opts.Props[f2[1]] != null ? opts.Props[f2[1]] : cp ? cp[f2[1]] : null;
            if (v4 === true)
              v4 = "1";
            else if (v4 === false)
              v4 = "0";
            else if (typeof v4 == "number")
              v4 = String(v4);
            if (v4 != null)
              cp_doit(f2[0], v4, null, o6, p2);
          }
          if (o6.length > 2) {
            o6[o6.length] = "</cp:coreProperties>";
            o6[1] = o6[1].replace("/>", ">");
          }
          return o6.join("");
        }
        var EXT_PROPS = [
          ["Application", "Application", "string"],
          ["AppVersion", "AppVersion", "string"],
          ["Company", "Company", "string"],
          ["DocSecurity", "DocSecurity", "string"],
          ["Manager", "Manager", "string"],
          ["HyperlinksChanged", "HyperlinksChanged", "bool"],
          ["SharedDoc", "SharedDoc", "bool"],
          ["LinksUpToDate", "LinksUpToDate", "bool"],
          ["ScaleCrop", "ScaleCrop", "bool"],
          ["HeadingPairs", "HeadingPairs", "raw"],
          ["TitlesOfParts", "TitlesOfParts", "raw"]
        ];
        var PseudoPropsPairs = [
          "Worksheets",
          "SheetNames",
          "NamedRanges",
          "DefinedNames",
          "Chartsheets",
          "ChartNames"
        ];
        function load_props_pairs(HP, TOP, props, opts) {
          var v4 = [];
          if (typeof HP == "string")
            v4 = parseVector(HP, opts);
          else
            for (var j3 = 0; j3 < HP.length; ++j3)
              v4 = v4.concat(HP[j3].map(function(hp) {
                return { v: hp };
              }));
          var parts = typeof TOP == "string" ? parseVector(TOP, opts).map(function(x3) {
            return x3.v;
          }) : TOP;
          var idx = 0, len = 0;
          if (parts.length > 0)
            for (var i6 = 0; i6 !== v4.length; i6 += 2) {
              len = +v4[i6 + 1].v;
              switch (v4[i6].v) {
                case "Worksheets":
                case "\u5DE5\u4F5C\u8868":
                case "\u041B\u0438\u0441\u0442\u044B":
                case "\u0623\u0648\u0631\u0627\u0642 \u0627\u0644\u0639\u0645\u0644":
                case "\u30EF\u30FC\u30AF\u30B7\u30FC\u30C8":
                case "\u05D2\u05DC\u05D9\u05D5\u05E0\u05D5\u05EA \u05E2\u05D1\u05D5\u05D3\u05D4":
                case "Arbeitsbl\xE4tter":
                case "\xC7al\u0131\u015Fma Sayfalar\u0131":
                case "Feuilles de calcul":
                case "Fogli di lavoro":
                case "Folhas de c\xE1lculo":
                case "Planilhas":
                case "Regneark":
                case "Hojas de c\xE1lculo":
                case "Werkbladen":
                  props.Worksheets = len;
                  props.SheetNames = parts.slice(idx, idx + len);
                  break;
                case "Named Ranges":
                case "Rangos con nombre":
                case "\u540D\u524D\u4ED8\u304D\u4E00\u89A7":
                case "Benannte Bereiche":
                case "Navngivne omr\xE5der":
                  props.NamedRanges = len;
                  props.DefinedNames = parts.slice(idx, idx + len);
                  break;
                case "Charts":
                case "Diagramme":
                  props.Chartsheets = len;
                  props.ChartNames = parts.slice(idx, idx + len);
                  break;
              }
              idx += len;
            }
        }
        function parse_ext_props(data, p2, opts) {
          var q3 = {};
          if (!p2)
            p2 = {};
          data = utf8read(data);
          EXT_PROPS.forEach(function(f2) {
            var xml = (str_match_xml_ns(data, f2[0]) || [])[1];
            switch (f2[2]) {
              case "string":
                if (xml)
                  p2[f2[1]] = unescapexml(xml);
                break;
              case "bool":
                p2[f2[1]] = xml === "true";
                break;
              case "raw":
                var cur = str_match_xml(data, f2[0]);
                if (cur && cur.length > 0)
                  q3[f2[1]] = cur[1];
                break;
            }
          });
          if (q3.HeadingPairs && q3.TitlesOfParts)
            load_props_pairs(q3.HeadingPairs, q3.TitlesOfParts, p2, opts);
          return p2;
        }
        function write_ext_props(cp) {
          var o6 = [], W3 = writextag;
          if (!cp)
            cp = {};
          cp.Application = "SheetJS";
          o6[o6.length] = XML_HEADER;
          o6[o6.length] = writextag("Properties", null, {
            "xmlns": XMLNS.EXT_PROPS,
            "xmlns:vt": XMLNS.vt
          });
          EXT_PROPS.forEach(function(f2) {
            if (cp[f2[1]] === void 0)
              return;
            var v4;
            switch (f2[2]) {
              case "string":
                v4 = escapexml(String(cp[f2[1]]));
                break;
              case "bool":
                v4 = cp[f2[1]] ? "true" : "false";
                break;
            }
            if (v4 !== void 0)
              o6[o6.length] = W3(f2[0], v4);
          });
          o6[o6.length] = W3("HeadingPairs", W3("vt:vector", W3("vt:variant", "<vt:lpstr>Worksheets</vt:lpstr>") + W3("vt:variant", W3("vt:i4", String(cp.Worksheets))), { size: 2, baseType: "variant" }));
          o6[o6.length] = W3("TitlesOfParts", W3("vt:vector", cp.SheetNames.map(function(s3) {
            return "<vt:lpstr>" + escapexml(s3) + "</vt:lpstr>";
          }).join(""), { size: cp.Worksheets, baseType: "lpstr" }));
          if (o6.length > 2) {
            o6[o6.length] = "</Properties>";
            o6[1] = o6[1].replace("/>", ">");
          }
          return o6.join("");
        }
        var custregex = /<[^<>]+>[^<]*/g;
        function parse_cust_props(data, opts) {
          var p2 = {}, name = "";
          var m4 = data.match(custregex);
          if (m4)
            for (var i6 = 0; i6 != m4.length; ++i6) {
              var x3 = m4[i6], y4 = parsexmltag(x3);
              switch (strip_ns(y4[0])) {
                case "<?xml":
                  break;
                case "<Properties":
                  break;
                case "<property":
                  name = unescapexml(y4.name);
                  break;
                case "</property>":
                  name = null;
                  break;
                default:
                  if (x3.indexOf("<vt:") === 0) {
                    var toks = x3.split(">");
                    var type = toks[0].slice(4), text = toks[1];
                    switch (type) {
                      case "lpstr":
                      case "bstr":
                      case "lpwstr":
                        p2[name] = unescapexml(text);
                        break;
                      case "bool":
                        p2[name] = parsexmlbool(text);
                        break;
                      case "i1":
                      case "i2":
                      case "i4":
                      case "i8":
                      case "int":
                      case "uint":
                        p2[name] = parseInt(text, 10);
                        break;
                      case "r4":
                      case "r8":
                      case "decimal":
                        p2[name] = parseFloat(text);
                        break;
                      case "filetime":
                      case "date":
                        p2[name] = parseDate(text);
                        break;
                      case "cy":
                      case "error":
                        p2[name] = unescapexml(text);
                        break;
                      default:
                        if (type.slice(-1) == "/")
                          break;
                        if (opts.WTF && typeof console !== "undefined")
                          console.warn("Unexpected", x3, type, toks);
                    }
                  } else if (x3.slice(0, 2) === "</") {
                  } else if (opts.WTF)
                    throw new Error(x3);
              }
            }
          return p2;
        }
        function write_cust_props(cp) {
          var o6 = [XML_HEADER, writextag("Properties", null, {
            "xmlns": XMLNS.CUST_PROPS,
            "xmlns:vt": XMLNS.vt
          })];
          if (!cp)
            return o6.join("");
          var pid = 1;
          keys(cp).forEach(function custprop(k2) {
            ++pid;
            o6[o6.length] = writextag("property", write_vt(cp[k2], true), {
              "fmtid": "{D5CDD505-2E9C-101B-9397-08002B2CF9AE}",
              "pid": pid,
              "name": escapexml(k2)
            });
          });
          if (o6.length > 2) {
            o6[o6.length] = "</Properties>";
            o6[1] = o6[1].replace("/>", ">");
          }
          return o6.join("");
        }
        var XLMLDocPropsMap = {
          Title: "Title",
          Subject: "Subject",
          Author: "Author",
          Keywords: "Keywords",
          Comments: "Description",
          LastAuthor: "LastAuthor",
          RevNumber: "Revision",
          Application: "AppName",
          LastPrinted: "LastPrinted",
          CreatedDate: "Created",
          ModifiedDate: "LastSaved",
          Category: "Category",
          Manager: "Manager",
          Company: "Company",
          AppVersion: "Version",
          ContentStatus: "ContentStatus",
          Identifier: "Identifier",
          Language: "Language"
        };
        var evert_XLMLDPM;
        function xlml_set_prop(Props, tag, val2) {
          if (!evert_XLMLDPM)
            evert_XLMLDPM = evert(XLMLDocPropsMap);
          tag = evert_XLMLDPM[tag] || tag;
          Props[tag] = val2;
        }
        function xlml_write_docprops(Props, opts) {
          var o6 = [];
          keys(XLMLDocPropsMap).map(function(m4) {
            for (var i6 = 0; i6 < CORE_PROPS.length; ++i6)
              if (CORE_PROPS[i6][1] == m4)
                return CORE_PROPS[i6];
            for (i6 = 0; i6 < EXT_PROPS.length; ++i6)
              if (EXT_PROPS[i6][1] == m4)
                return EXT_PROPS[i6];
            throw m4;
          }).forEach(function(p2) {
            if (Props[p2[1]] == null)
              return;
            var m4 = opts && opts.Props && opts.Props[p2[1]] != null ? opts.Props[p2[1]] : Props[p2[1]];
            switch (p2[2]) {
              case "date":
                m4 = new Date(m4).toISOString().replace(/\.\d*Z/, "Z");
                break;
            }
            if (typeof m4 == "number")
              m4 = String(m4);
            else if (m4 === true || m4 === false) {
              m4 = m4 ? "1" : "0";
            } else if (m4 instanceof Date)
              m4 = new Date(m4).toISOString().replace(/\.\d*Z/, "");
            o6.push(writetag(XLMLDocPropsMap[p2[1]] || p2[1], m4));
          });
          return writextag("DocumentProperties", o6.join(""), { xmlns: XLMLNS.o });
        }
        function xlml_write_custprops(Props, Custprops) {
          var BLACKLIST = ["Worksheets", "SheetNames"];
          var T3 = "CustomDocumentProperties";
          var o6 = [];
          if (Props)
            keys(Props).forEach(function(k2) {
              if (!Object.prototype.hasOwnProperty.call(Props, k2))
                return;
              for (var i6 = 0; i6 < CORE_PROPS.length; ++i6)
                if (k2 == CORE_PROPS[i6][1])
                  return;
              for (i6 = 0; i6 < EXT_PROPS.length; ++i6)
                if (k2 == EXT_PROPS[i6][1])
                  return;
              for (i6 = 0; i6 < BLACKLIST.length; ++i6)
                if (k2 == BLACKLIST[i6])
                  return;
              var m4 = Props[k2];
              var t5 = "string";
              if (typeof m4 == "number") {
                t5 = "float";
                m4 = String(m4);
              } else if (m4 === true || m4 === false) {
                t5 = "boolean";
                m4 = m4 ? "1" : "0";
              } else
                m4 = String(m4);
              o6.push(writextag(escapexmltag(k2), m4, { "dt:dt": t5 }));
            });
          if (Custprops)
            keys(Custprops).forEach(function(k2) {
              if (!Object.prototype.hasOwnProperty.call(Custprops, k2))
                return;
              if (Props && Object.prototype.hasOwnProperty.call(Props, k2))
                return;
              var m4 = Custprops[k2];
              var t5 = "string";
              if (typeof m4 == "number") {
                t5 = "float";
                m4 = String(m4);
              } else if (m4 === true || m4 === false) {
                t5 = "boolean";
                m4 = m4 ? "1" : "0";
              } else if (m4 instanceof Date) {
                t5 = "dateTime.tz";
                m4 = m4.toISOString();
              } else
                m4 = String(m4);
              o6.push(writextag(escapexmltag(k2), m4, { "dt:dt": t5 }));
            });
          return "<" + T3 + ' xmlns="' + XLMLNS.o + '">' + o6.join("") + "</" + T3 + ">";
        }
        function parse_FILETIME(blob) {
          var dwLowDateTime = blob.read_shift(4), dwHighDateTime = blob.read_shift(4);
          return new Date((dwHighDateTime / 1e7 * Math.pow(2, 32) + dwLowDateTime / 1e7 - 11644473600) * 1e3).toISOString().replace(/\.000/, "");
        }
        function write_FILETIME(time) {
          var date = typeof time == "string" ? new Date(Date.parse(time)) : time;
          var t5 = date.getTime() / 1e3 + 11644473600;
          var l5 = t5 % Math.pow(2, 32), h = (t5 - l5) / Math.pow(2, 32);
          l5 *= 1e7;
          h *= 1e7;
          var w3 = l5 / Math.pow(2, 32) | 0;
          if (w3 > 0) {
            l5 = l5 % Math.pow(2, 32);
            h += w3;
          }
          var o6 = new_buf(8);
          o6.write_shift(4, l5);
          o6.write_shift(4, h);
          return o6;
        }
        function parse_lpstr(blob, type, pad2) {
          var start2 = blob.l;
          var str = blob.read_shift(0, "lpstr-cp");
          if (pad2)
            while (blob.l - start2 & 3)
              ++blob.l;
          return str;
        }
        function parse_lpwstr(blob, type, pad2) {
          var str = blob.read_shift(0, "lpwstr");
          if (pad2)
            blob.l += 4 - (str.length + 1 & 3) & 3;
          return str;
        }
        function parse_VtStringBase(blob, stringType, pad2) {
          if (stringType === 31)
            return parse_lpwstr(blob);
          return parse_lpstr(blob, stringType, pad2);
        }
        function parse_VtString(blob, t5, pad2) {
          return parse_VtStringBase(blob, t5, pad2 === false ? 0 : 4);
        }
        function parse_VtUnalignedString(blob, t5) {
          if (!t5)
            throw new Error("VtUnalignedString must have positive length");
          return parse_VtStringBase(blob, t5, 0);
        }
        function parse_VtVecLpwstrValue(blob) {
          var length = blob.read_shift(4);
          var ret = [];
          for (var i6 = 0; i6 != length; ++i6) {
            var start2 = blob.l;
            ret[i6] = blob.read_shift(0, "lpwstr").replace(chr0, "");
            if (blob.l - start2 & 2)
              blob.l += 2;
          }
          return ret;
        }
        function parse_VtVecUnalignedLpstrValue(blob) {
          var length = blob.read_shift(4);
          var ret = [];
          for (var i6 = 0; i6 != length; ++i6)
            ret[i6] = blob.read_shift(0, "lpstr-cp").replace(chr0, "");
          return ret;
        }
        function parse_VtHeadingPair(blob) {
          var start2 = blob.l;
          var headingString = parse_TypedPropertyValue(blob, VT_USTR);
          if (blob[blob.l] == 0 && blob[blob.l + 1] == 0 && blob.l - start2 & 2)
            blob.l += 2;
          var headerParts = parse_TypedPropertyValue(blob, VT_I4);
          return [headingString, headerParts];
        }
        function parse_VtVecHeadingPairValue(blob) {
          var cElements = blob.read_shift(4);
          var out = [];
          for (var i6 = 0; i6 < cElements / 2; ++i6)
            out.push(parse_VtHeadingPair(blob));
          return out;
        }
        function parse_dictionary(blob, CodePage) {
          var cnt = blob.read_shift(4);
          var dict = {};
          for (var j3 = 0; j3 != cnt; ++j3) {
            var pid = blob.read_shift(4);
            var len = blob.read_shift(4);
            dict[pid] = blob.read_shift(len, CodePage === 1200 ? "utf16le" : "utf8").replace(chr0, "").replace(chr1, "!");
            if (CodePage === 1200 && len % 2)
              blob.l += 2;
          }
          if (blob.l & 3)
            blob.l = blob.l >> 2 + 1 << 2;
          return dict;
        }
        function parse_BLOB(blob) {
          var size = blob.read_shift(4);
          var bytes = blob.slice(blob.l, blob.l + size);
          blob.l += size;
          if ((size & 3) > 0)
            blob.l += 4 - (size & 3) & 3;
          return bytes;
        }
        function parse_ClipboardData(blob) {
          var o6 = {};
          o6.Size = blob.read_shift(4);
          blob.l += o6.Size + 3 - (o6.Size - 1) % 4;
          return o6;
        }
        function parse_TypedPropertyValue(blob, type, _opts) {
          var t5 = blob.read_shift(2), ret, opts = _opts || {};
          blob.l += 2;
          if (type !== VT_VARIANT) {
            if (t5 !== type && VT_CUSTOM.indexOf(type) === -1 && !((type & 65534) == 4126 && (t5 & 65534) == 4126))
              throw new Error("Expected type " + type + " saw " + t5);
          }
          switch (type === VT_VARIANT ? t5 : type) {
            case 2:
              ret = blob.read_shift(2, "i");
              if (!opts.raw)
                blob.l += 2;
              return ret;
            case 3:
              ret = blob.read_shift(4, "i");
              return ret;
            case 11:
              return blob.read_shift(4) !== 0;
            case 19:
              ret = blob.read_shift(4);
              return ret;
            case 30:
              blob.l += 4;
              val = parse_VtString(blob, blob[blob.l - 4]).replace(/(^|[^\u0000])\u0000+$/, "$1");
              break;
            case 31:
              blob.l += 4;
              val = parse_VtString(blob, blob[blob.l - 4]).replace(/(^|[^\u0000])\u0000+$/, "$1");
              break;
            case 64:
              return parse_FILETIME(blob);
            case 65:
              return parse_BLOB(blob);
            case 71:
              return parse_ClipboardData(blob);
            case 80:
              return parse_VtString(blob, t5, !opts.raw).replace(chr0, "");
            case 81:
              return parse_VtUnalignedString(blob, t5).replace(chr0, "");
            case 4108:
              return parse_VtVecHeadingPairValue(blob);
            case 4126:
            case 4127:
              return t5 == 4127 ? parse_VtVecLpwstrValue(blob) : parse_VtVecUnalignedLpstrValue(blob);
            default:
              throw new Error("TypedPropertyValue unrecognized type " + type + " " + t5);
          }
        }
        function write_TypedPropertyValue(type, value) {
          var o6 = new_buf(4), p2 = new_buf(4);
          o6.write_shift(4, type == 80 ? 31 : type);
          switch (type) {
            case 3:
              p2.write_shift(-4, value);
              break;
            case 5:
              p2 = new_buf(8);
              p2.write_shift(8, value, "f");
              break;
            case 11:
              p2.write_shift(4, value ? 1 : 0);
              break;
            case 64:
              p2 = write_FILETIME(value);
              break;
            case 31:
            case 80:
              p2 = new_buf(4 + 2 * (value.length + 1) + (value.length % 2 ? 0 : 2));
              p2.write_shift(4, value.length + 1);
              p2.write_shift(0, value, "dbcs");
              while (p2.l != p2.length)
                p2.write_shift(1, 0);
              break;
            default:
              throw new Error("TypedPropertyValue unrecognized type " + type + " " + value);
          }
          return bconcat([o6, p2]);
        }
        function parse_PropertySet(blob, PIDSI) {
          var start_addr = blob.l;
          var size = blob.read_shift(4);
          var NumProps = blob.read_shift(4);
          var Props = [], i6 = 0;
          var CodePage = 0;
          var Dictionary = -1, DictObj = {};
          for (i6 = 0; i6 != NumProps; ++i6) {
            var PropID = blob.read_shift(4);
            var Offset = blob.read_shift(4);
            Props[i6] = [PropID, Offset + start_addr];
          }
          Props.sort(function(x3, y4) {
            return x3[1] - y4[1];
          });
          var PropH = {};
          for (i6 = 0; i6 != NumProps; ++i6) {
            if (blob.l !== Props[i6][1]) {
              var fail = true;
              if (i6 > 0 && PIDSI)
                switch (PIDSI[Props[i6 - 1][0]].t) {
                  case 2:
                    if (blob.l + 2 === Props[i6][1]) {
                      blob.l += 2;
                      fail = false;
                    }
                    break;
                  case 80:
                    if (blob.l <= Props[i6][1]) {
                      blob.l = Props[i6][1];
                      fail = false;
                    }
                    break;
                  case 4108:
                    if (blob.l <= Props[i6][1]) {
                      blob.l = Props[i6][1];
                      fail = false;
                    }
                    break;
                }
              if ((!PIDSI || i6 == 0) && blob.l <= Props[i6][1]) {
                fail = false;
                blob.l = Props[i6][1];
              }
              if (fail)
                throw new Error("Read Error: Expected address " + Props[i6][1] + " at " + blob.l + " :" + i6);
            }
            if (PIDSI) {
              if (Props[i6][0] == 0 && Props.length > i6 + 1 && Props[i6][1] == Props[i6 + 1][1])
                continue;
              var piddsi = PIDSI[Props[i6][0]];
              PropH[piddsi.n] = parse_TypedPropertyValue(blob, piddsi.t, { raw: true });
              if (piddsi.p === "version")
                PropH[piddsi.n] = String(PropH[piddsi.n] >> 16) + "." + ("0000" + String(PropH[piddsi.n] & 65535)).slice(-4);
              if (piddsi.n == "CodePage")
                switch (PropH[piddsi.n]) {
                  case 0:
                    PropH[piddsi.n] = 1252;
                  case 874:
                  case 932:
                  case 936:
                  case 949:
                  case 950:
                  case 1250:
                  case 1251:
                  case 1253:
                  case 1254:
                  case 1255:
                  case 1256:
                  case 1257:
                  case 1258:
                  case 1e4:
                  case 1200:
                  case 1201:
                  case 1252:
                  case 65e3:
                  case -536:
                  case 65001:
                  case -535:
                    set_cp(CodePage = PropH[piddsi.n] >>> 0 & 65535);
                    break;
                  default:
                    throw new Error("Unsupported CodePage: " + PropH[piddsi.n]);
                }
            } else {
              if (Props[i6][0] === 1) {
                CodePage = PropH.CodePage = parse_TypedPropertyValue(blob, VT_I2);
                set_cp(CodePage);
                if (Dictionary !== -1) {
                  var oldpos = blob.l;
                  blob.l = Props[Dictionary][1];
                  DictObj = parse_dictionary(blob, CodePage);
                  blob.l = oldpos;
                }
              } else if (Props[i6][0] === 0) {
                if (CodePage === 0) {
                  Dictionary = i6;
                  blob.l = Props[i6 + 1][1];
                  continue;
                }
                DictObj = parse_dictionary(blob, CodePage);
              } else {
                var name = DictObj[Props[i6][0]];
                var val2;
                switch (blob[blob.l]) {
                  case 65:
                    blob.l += 4;
                    val2 = parse_BLOB(blob);
                    break;
                  case 30:
                    blob.l += 4;
                    val2 = parse_VtString(blob, blob[blob.l - 4]).replace(/(^|[^\u0000])\u0000+$/, "$1");
                    break;
                  case 31:
                    blob.l += 4;
                    val2 = parse_VtString(blob, blob[blob.l - 4]).replace(/(^|[^\u0000])\u0000+$/, "$1");
                    break;
                  case 3:
                    blob.l += 4;
                    val2 = blob.read_shift(4, "i");
                    break;
                  case 19:
                    blob.l += 4;
                    val2 = blob.read_shift(4);
                    break;
                  case 5:
                    blob.l += 4;
                    val2 = blob.read_shift(8, "f");
                    break;
                  case 11:
                    blob.l += 4;
                    val2 = parsebool(blob, 4);
                    break;
                  case 64:
                    blob.l += 4;
                    val2 = parseDate(parse_FILETIME(blob));
                    break;
                  default:
                    throw new Error("unparsed value: " + blob[blob.l]);
                }
                PropH[name] = val2;
              }
            }
          }
          blob.l = start_addr + size;
          return PropH;
        }
        var XLSPSSkip = ["CodePage", "Thumbnail", "_PID_LINKBASE", "_PID_HLINKS", "SystemIdentifier", "FMTID"];
        function guess_property_type(val2) {
          switch (typeof val2) {
            case "boolean":
              return 11;
            case "number":
              return (val2 | 0) == val2 ? 3 : 5;
            case "string":
              return 31;
            case "object":
              if (val2 instanceof Date)
                return 64;
              break;
          }
          return -1;
        }
        function write_PropertySet(entries, RE, PIDSI) {
          var hdr = new_buf(8), piao = [], prop = [];
          var sz = 8, i6 = 0;
          var pr2 = new_buf(8), pio = new_buf(8);
          pr2.write_shift(4, 2);
          pr2.write_shift(4, 1200);
          pio.write_shift(4, 1);
          prop.push(pr2);
          piao.push(pio);
          sz += 8 + pr2.length;
          if (!RE) {
            pio = new_buf(8);
            pio.write_shift(4, 0);
            piao.unshift(pio);
            var bufs = [new_buf(4)];
            bufs[0].write_shift(4, entries.length);
            for (i6 = 0; i6 < entries.length; ++i6) {
              var value = entries[i6][0];
              pr2 = new_buf(4 + 4 + 2 * (value.length + 1) + (value.length % 2 ? 0 : 2));
              pr2.write_shift(4, i6 + 2);
              pr2.write_shift(4, value.length + 1);
              pr2.write_shift(0, value, "dbcs");
              while (pr2.l != pr2.length)
                pr2.write_shift(1, 0);
              bufs.push(pr2);
            }
            pr2 = bconcat(bufs);
            prop.unshift(pr2);
            sz += 8 + pr2.length;
          }
          for (i6 = 0; i6 < entries.length; ++i6) {
            if (RE && !RE[entries[i6][0]])
              continue;
            if (XLSPSSkip.indexOf(entries[i6][0]) > -1 || PseudoPropsPairs.indexOf(entries[i6][0]) > -1)
              continue;
            if (entries[i6][1] == null)
              continue;
            var val2 = entries[i6][1], idx = 0;
            if (RE) {
              idx = +RE[entries[i6][0]];
              var pinfo = PIDSI[idx];
              if (pinfo.p == "version" && typeof val2 == "string") {
                var arr = val2.split(".");
                val2 = (+arr[0] << 16) + (+arr[1] || 0);
              }
              pr2 = write_TypedPropertyValue(pinfo.t, val2);
            } else {
              var T3 = guess_property_type(val2);
              if (T3 == -1) {
                T3 = 31;
                val2 = String(val2);
              }
              pr2 = write_TypedPropertyValue(T3, val2);
            }
            prop.push(pr2);
            pio = new_buf(8);
            pio.write_shift(4, !RE ? 2 + i6 : idx);
            piao.push(pio);
            sz += 8 + pr2.length;
          }
          var w3 = 8 * (prop.length + 1);
          for (i6 = 0; i6 < prop.length; ++i6) {
            piao[i6].write_shift(4, w3);
            w3 += prop[i6].length;
          }
          hdr.write_shift(4, sz);
          hdr.write_shift(4, prop.length);
          return bconcat([hdr].concat(piao).concat(prop));
        }
        function parse_PropertySetStream(file, PIDSI, clsid) {
          var blob = file.content;
          if (!blob)
            return {};
          prep_blob(blob, 0);
          var NumSets, FMTID0, FMTID1, Offset0, Offset1 = 0;
          blob.chk("feff", "Byte Order: ");
          blob.read_shift(2);
          var SystemIdentifier = blob.read_shift(4);
          var CLSID = blob.read_shift(16);
          if (CLSID !== CFB.utils.consts.HEADER_CLSID && CLSID !== clsid)
            throw new Error("Bad PropertySet CLSID " + CLSID);
          NumSets = blob.read_shift(4);
          if (NumSets !== 1 && NumSets !== 2)
            throw new Error("Unrecognized #Sets: " + NumSets);
          FMTID0 = blob.read_shift(16);
          Offset0 = blob.read_shift(4);
          if (NumSets === 1 && Offset0 !== blob.l)
            throw new Error("Length mismatch: " + Offset0 + " !== " + blob.l);
          else if (NumSets === 2) {
            FMTID1 = blob.read_shift(16);
            Offset1 = blob.read_shift(4);
          }
          var PSet0 = parse_PropertySet(blob, PIDSI);
          var rval = { SystemIdentifier };
          for (var y4 in PSet0)
            rval[y4] = PSet0[y4];
          rval.FMTID = FMTID0;
          if (NumSets === 1)
            return rval;
          if (Offset1 - blob.l == 2)
            blob.l += 2;
          if (blob.l !== Offset1)
            throw new Error("Length mismatch 2: " + blob.l + " !== " + Offset1);
          var PSet1;
          try {
            PSet1 = parse_PropertySet(blob, null);
          } catch (e7) {
          }
          for (y4 in PSet1)
            rval[y4] = PSet1[y4];
          rval.FMTID = [FMTID0, FMTID1];
          return rval;
        }
        function write_PropertySetStream(entries, clsid, RE, PIDSI, entries2, clsid2) {
          var hdr = new_buf(entries2 ? 68 : 48);
          var bufs = [hdr];
          hdr.write_shift(2, 65534);
          hdr.write_shift(2, 0);
          hdr.write_shift(4, 842412599);
          hdr.write_shift(16, CFB.utils.consts.HEADER_CLSID, "hex");
          hdr.write_shift(4, entries2 ? 2 : 1);
          hdr.write_shift(16, clsid, "hex");
          hdr.write_shift(4, entries2 ? 68 : 48);
          var ps0 = write_PropertySet(entries, RE, PIDSI);
          bufs.push(ps0);
          if (entries2) {
            var ps1 = write_PropertySet(entries2, null, null);
            hdr.write_shift(16, clsid2, "hex");
            hdr.write_shift(4, 68 + ps0.length);
            bufs.push(ps1);
          }
          return bconcat(bufs);
        }
        function parsenoop2(blob, length) {
          blob.read_shift(length);
          return null;
        }
        function writezeroes(n6, o6) {
          if (!o6)
            o6 = new_buf(n6);
          for (var j3 = 0; j3 < n6; ++j3)
            o6.write_shift(1, 0);
          return o6;
        }
        function parslurp(blob, length, cb) {
          var arr = [], target = blob.l + length;
          while (blob.l < target)
            arr.push(cb(blob, target - blob.l));
          if (target !== blob.l)
            throw new Error("Slurp error");
          return arr;
        }
        function parsebool(blob, length) {
          return blob.read_shift(length) === 1;
        }
        function writebool(v4, o6) {
          if (!o6)
            o6 = new_buf(2);
          o6.write_shift(2, +!!v4);
          return o6;
        }
        function parseuint16(blob) {
          return blob.read_shift(2, "u");
        }
        function writeuint16(v4, o6) {
          if (!o6)
            o6 = new_buf(2);
          o6.write_shift(2, v4);
          return o6;
        }
        function parseuint16a(blob, length) {
          return parslurp(blob, length, parseuint16);
        }
        function parse_Bes(blob) {
          var v4 = blob.read_shift(1), t5 = blob.read_shift(1);
          return t5 === 1 ? v4 : v4 === 1;
        }
        function write_Bes(v4, t5, o6) {
          if (!o6)
            o6 = new_buf(2);
          o6.write_shift(1, t5 == "e" ? +v4 : +!!v4);
          o6.write_shift(1, t5 == "e" ? 1 : 0);
          return o6;
        }
        function parse_ShortXLUnicodeString(blob, length, opts) {
          var cch = blob.read_shift(opts && opts.biff >= 12 ? 2 : 1);
          var encoding = "sbcs-cont";
          var cp = current_codepage;
          if (opts && opts.biff >= 8)
            current_codepage = 1200;
          if (!opts || opts.biff == 8) {
            var fHighByte = blob.read_shift(1);
            if (fHighByte) {
              encoding = "dbcs-cont";
            }
          } else if (opts.biff == 12) {
            encoding = "wstr";
          }
          if (opts.biff >= 2 && opts.biff <= 5)
            encoding = "cpstr";
          var o6 = cch ? blob.read_shift(cch, encoding) : "";
          current_codepage = cp;
          return o6;
        }
        function parse_XLUnicodeRichExtendedString(blob) {
          var cp = current_codepage;
          current_codepage = 1200;
          var cch = blob.read_shift(2), flags = blob.read_shift(1);
          var fExtSt = flags & 4, fRichSt = flags & 8;
          var width = 1 + (flags & 1);
          var cRun = 0, cbExtRst;
          var z3 = {};
          if (fRichSt)
            cRun = blob.read_shift(2);
          if (fExtSt)
            cbExtRst = blob.read_shift(4);
          var encoding = width == 2 ? "dbcs-cont" : "sbcs-cont";
          var msg = cch === 0 ? "" : blob.read_shift(cch, encoding);
          if (fRichSt)
            blob.l += 4 * cRun;
          if (fExtSt)
            blob.l += cbExtRst;
          z3.t = msg;
          if (!fRichSt) {
            z3.raw = "<t>" + z3.t + "</t>";
            z3.r = z3.t;
          }
          current_codepage = cp;
          return z3;
        }
        function write_XLUnicodeRichExtendedString(xlstr) {
          var str = xlstr.t || "", nfmts = 1;
          var hdr = new_buf(3 + (nfmts > 1 ? 2 : 0));
          hdr.write_shift(2, str.length);
          hdr.write_shift(1, (nfmts > 1 ? 8 : 0) | 1);
          if (nfmts > 1)
            hdr.write_shift(2, nfmts);
          var otext = new_buf(2 * str.length);
          otext.write_shift(2 * str.length, str, "utf16le");
          var out = [hdr, otext];
          return bconcat(out);
        }
        function parse_XLUnicodeStringNoCch(blob, cch, opts) {
          var retval;
          if (opts) {
            if (opts.biff >= 2 && opts.biff <= 5)
              return blob.read_shift(cch, "cpstr");
            if (opts.biff >= 12)
              return blob.read_shift(cch, "dbcs-cont");
          }
          var fHighByte = blob.read_shift(1);
          if (fHighByte === 0) {
            retval = blob.read_shift(cch, "sbcs-cont");
          } else {
            retval = blob.read_shift(cch, "dbcs-cont");
          }
          return retval;
        }
        function parse_XLUnicodeString(blob, length, opts) {
          var cch = blob.read_shift(opts && opts.biff == 2 ? 1 : 2);
          if (cch === 0) {
            blob.l++;
            return "";
          }
          return parse_XLUnicodeStringNoCch(blob, cch, opts);
        }
        function parse_XLUnicodeString2(blob, length, opts) {
          if (opts.biff > 5)
            return parse_XLUnicodeString(blob, length, opts);
          var cch = blob.read_shift(1);
          if (cch === 0) {
            blob.l++;
            return "";
          }
          return blob.read_shift(cch, opts.biff <= 4 || !blob.lens ? "cpstr" : "sbcs-cont");
        }
        function write_XLUnicodeString(str, opts, o6) {
          if (!o6)
            o6 = new_buf(3 + 2 * str.length);
          o6.write_shift(2, str.length);
          o6.write_shift(1, 1);
          o6.write_shift(31, str, "utf16le");
          return o6;
        }
        function parse_ControlInfo(blob) {
          var flags = blob.read_shift(1);
          blob.l++;
          var accel = blob.read_shift(2);
          blob.l += 2;
          return [flags, accel];
        }
        function parse_URLMoniker(blob) {
          var len = blob.read_shift(4), start2 = blob.l;
          var extra = false;
          if (len > 24) {
            blob.l += len - 24;
            if (blob.read_shift(16) === "795881f43b1d7f48af2c825dc4852763")
              extra = true;
            blob.l = start2;
          }
          var url = blob.read_shift((extra ? len - 24 : len) >> 1, "utf16le").replace(chr0, "");
          if (extra)
            blob.l += 24;
          return url;
        }
        function parse_FileMoniker(blob) {
          var cAnti = blob.read_shift(2);
          var preamble = "";
          while (cAnti-- > 0)
            preamble += "../";
          var ansiPath = blob.read_shift(0, "lpstr-ansi");
          blob.l += 2;
          if (blob.read_shift(2) != 57005)
            throw new Error("Bad FileMoniker");
          var sz = blob.read_shift(4);
          if (sz === 0)
            return preamble + ansiPath.replace(/\\/g, "/");
          var bytes = blob.read_shift(4);
          if (blob.read_shift(2) != 3)
            throw new Error("Bad FileMoniker");
          var unicodePath = blob.read_shift(bytes >> 1, "utf16le").replace(chr0, "");
          return preamble + unicodePath;
        }
        function parse_HyperlinkMoniker(blob, length) {
          var clsid = blob.read_shift(16);
          length -= 16;
          switch (clsid) {
            case "e0c9ea79f9bace118c8200aa004ba90b":
              return parse_URLMoniker(blob, length);
            case "0303000000000000c000000000000046":
              return parse_FileMoniker(blob, length);
            default:
              throw new Error("Unsupported Moniker " + clsid);
          }
        }
        function parse_HyperlinkString(blob) {
          var len = blob.read_shift(4);
          var o6 = len > 0 ? blob.read_shift(len, "utf16le").replace(chr0, "") : "";
          return o6;
        }
        function write_HyperlinkString(str, o6) {
          if (!o6)
            o6 = new_buf(6 + str.length * 2);
          o6.write_shift(4, 1 + str.length);
          for (var i6 = 0; i6 < str.length; ++i6)
            o6.write_shift(2, str.charCodeAt(i6));
          o6.write_shift(2, 0);
          return o6;
        }
        function parse_Hyperlink(blob, length) {
          var end = blob.l + length;
          var sVer = blob.read_shift(4);
          if (sVer !== 2)
            throw new Error("Unrecognized streamVersion: " + sVer);
          var flags = blob.read_shift(2);
          blob.l += 2;
          var displayName, targetFrameName, moniker, oleMoniker, Loc = "", guid, fileTime;
          if (flags & 16)
            displayName = parse_HyperlinkString(blob, end - blob.l);
          if (flags & 128)
            targetFrameName = parse_HyperlinkString(blob, end - blob.l);
          if ((flags & 257) === 257)
            moniker = parse_HyperlinkString(blob, end - blob.l);
          if ((flags & 257) === 1)
            oleMoniker = parse_HyperlinkMoniker(blob, end - blob.l);
          if (flags & 8)
            Loc = parse_HyperlinkString(blob, end - blob.l);
          if (flags & 32)
            guid = blob.read_shift(16);
          if (flags & 64)
            fileTime = parse_FILETIME(blob);
          blob.l = end;
          var target = targetFrameName || moniker || oleMoniker || "";
          if (target && Loc)
            target += "#" + Loc;
          if (!target)
            target = "#" + Loc;
          if (flags & 2 && target.charAt(0) == "/" && target.charAt(1) != "/")
            target = "file://" + target;
          var out = { Target: target };
          if (guid)
            out.guid = guid;
          if (fileTime)
            out.time = fileTime;
          if (displayName)
            out.Tooltip = displayName;
          return out;
        }
        function write_Hyperlink(hl) {
          var out = new_buf(512), i6 = 0;
          var Target = hl.Target;
          if (Target.slice(0, 7) == "file://")
            Target = Target.slice(7);
          var hashidx = Target.indexOf("#");
          var F3 = hashidx > -1 ? 31 : 23;
          switch (Target.charAt(0)) {
            case "#":
              F3 = 28;
              break;
            case ".":
              F3 &= ~2;
              break;
          }
          out.write_shift(4, 2);
          out.write_shift(4, F3);
          var data = [8, 6815827, 6619237, 4849780, 83];
          for (i6 = 0; i6 < data.length; ++i6)
            out.write_shift(4, data[i6]);
          if (F3 == 28) {
            Target = Target.slice(1);
            write_HyperlinkString(Target, out);
          } else if (F3 & 2) {
            data = "e0 c9 ea 79 f9 ba ce 11 8c 82 00 aa 00 4b a9 0b".split(" ");
            for (i6 = 0; i6 < data.length; ++i6)
              out.write_shift(1, parseInt(data[i6], 16));
            var Pretarget = hashidx > -1 ? Target.slice(0, hashidx) : Target;
            out.write_shift(4, 2 * (Pretarget.length + 1));
            for (i6 = 0; i6 < Pretarget.length; ++i6)
              out.write_shift(2, Pretarget.charCodeAt(i6));
            out.write_shift(2, 0);
            if (F3 & 8)
              write_HyperlinkString(hashidx > -1 ? Target.slice(hashidx + 1) : "", out);
          } else {
            data = "03 03 00 00 00 00 00 00 c0 00 00 00 00 00 00 46".split(" ");
            for (i6 = 0; i6 < data.length; ++i6)
              out.write_shift(1, parseInt(data[i6], 16));
            var P3 = 0;
            while (Target.slice(P3 * 3, P3 * 3 + 3) == "../" || Target.slice(P3 * 3, P3 * 3 + 3) == "..\\")
              ++P3;
            out.write_shift(2, P3);
            out.write_shift(4, Target.length - 3 * P3 + 1);
            for (i6 = 0; i6 < Target.length - 3 * P3; ++i6)
              out.write_shift(1, Target.charCodeAt(i6 + 3 * P3) & 255);
            out.write_shift(1, 0);
            out.write_shift(2, 65535);
            out.write_shift(2, 57005);
            for (i6 = 0; i6 < 6; ++i6)
              out.write_shift(4, 0);
          }
          return out.slice(0, out.l);
        }
        function parse_LongRGBA(blob) {
          var r6 = blob.read_shift(1), g2 = blob.read_shift(1), b3 = blob.read_shift(1), a2 = blob.read_shift(1);
          return [r6, g2, b3, a2];
        }
        function parse_LongRGB(blob, length) {
          var x3 = parse_LongRGBA(blob, length);
          x3[3] = 0;
          return x3;
        }
        function parse_XLSCell(blob, length, opts) {
          var rw = blob.read_shift(2);
          var col = blob.read_shift(2);
          var ret = { r: rw, c: col, ixfe: 0 };
          if (opts && opts.biff == 2 || length == 7) {
            var flags = blob.read_shift(1);
            ret.ixfe = flags & 63;
            blob.l += 2;
          } else
            ret.ixfe = blob.read_shift(2);
          return ret;
        }
        function write_XLSCell(R2, C6, ixfe, o6) {
          if (!o6)
            o6 = new_buf(6);
          o6.write_shift(2, R2);
          o6.write_shift(2, C6);
          o6.write_shift(2, ixfe || 0);
          return o6;
        }
        function parse_frtHeader(blob) {
          var rt2 = blob.read_shift(2);
          var flags = blob.read_shift(2);
          blob.l += 8;
          return { type: rt2, flags };
        }
        function parse_OptXLUnicodeString(blob, length, opts) {
          return length === 0 ? "" : parse_XLUnicodeString2(blob, length, opts);
        }
        function parse_XTI(blob, length, opts) {
          var w3 = opts.biff > 8 ? 4 : 2;
          var iSupBook = blob.read_shift(w3), itabFirst = blob.read_shift(w3, "i"), itabLast = blob.read_shift(w3, "i");
          return [iSupBook, itabFirst, itabLast];
        }
        function parse_RkRec(blob) {
          var ixfe = blob.read_shift(2);
          var RK = parse_RkNumber(blob);
          return [ixfe, RK];
        }
        function parse_AddinUdf(blob, length, opts) {
          blob.l += 4;
          length -= 4;
          var l5 = blob.l + length;
          var udfName = parse_ShortXLUnicodeString(blob, length, opts);
          var cb = blob.read_shift(2);
          l5 -= blob.l;
          if (cb !== l5)
            throw new Error("Malformed AddinUdf: padding = " + l5 + " != " + cb);
          blob.l += cb;
          return udfName;
        }
        function parse_Ref8U(blob) {
          var rwFirst = blob.read_shift(2);
          var rwLast = blob.read_shift(2);
          var colFirst = blob.read_shift(2);
          var colLast = blob.read_shift(2);
          return { s: { c: colFirst, r: rwFirst }, e: { c: colLast, r: rwLast } };
        }
        function write_Ref8U(r6, o6) {
          if (!o6)
            o6 = new_buf(8);
          o6.write_shift(2, r6.s.r);
          o6.write_shift(2, r6.e.r);
          o6.write_shift(2, r6.s.c);
          o6.write_shift(2, r6.e.c);
          return o6;
        }
        function parse_RefU(blob) {
          var rwFirst = blob.read_shift(2);
          var rwLast = blob.read_shift(2);
          var colFirst = blob.read_shift(1);
          var colLast = blob.read_shift(1);
          return { s: { c: colFirst, r: rwFirst }, e: { c: colLast, r: rwLast } };
        }
        var parse_Ref = parse_RefU;
        function parse_FtCmo(blob) {
          blob.l += 4;
          var ot2 = blob.read_shift(2);
          var id = blob.read_shift(2);
          var flags = blob.read_shift(2);
          blob.l += 12;
          return [id, ot2, flags];
        }
        function parse_FtNts(blob) {
          var out = {};
          blob.l += 4;
          blob.l += 16;
          out.fSharedNote = blob.read_shift(2);
          blob.l += 4;
          return out;
        }
        function parse_FtCf(blob) {
          var out = {};
          blob.l += 4;
          blob.cf = blob.read_shift(2);
          return out;
        }
        function parse_FtSkip(blob) {
          blob.l += 2;
          blob.l += blob.read_shift(2);
        }
        var FtTab = {
          0: parse_FtSkip,
          4: parse_FtSkip,
          5: parse_FtSkip,
          6: parse_FtSkip,
          7: parse_FtCf,
          8: parse_FtSkip,
          9: parse_FtSkip,
          10: parse_FtSkip,
          11: parse_FtSkip,
          12: parse_FtSkip,
          13: parse_FtNts,
          14: parse_FtSkip,
          15: parse_FtSkip,
          16: parse_FtSkip,
          17: parse_FtSkip,
          18: parse_FtSkip,
          19: parse_FtSkip,
          20: parse_FtSkip,
          21: parse_FtCmo
        };
        function parse_FtArray(blob, length) {
          var tgt = blob.l + length;
          var fts = [];
          while (blob.l < tgt) {
            var ft = blob.read_shift(2);
            blob.l -= 2;
            try {
              fts[ft] = FtTab[ft](blob, tgt - blob.l);
            } catch (e7) {
              blob.l = tgt;
              return fts;
            }
          }
          if (blob.l != tgt)
            blob.l = tgt;
          return fts;
        }
        function parse_BOF(blob, length) {
          var o6 = { BIFFVer: 0, dt: 0 };
          o6.BIFFVer = blob.read_shift(2);
          length -= 2;
          if (length >= 2) {
            o6.dt = blob.read_shift(2);
            blob.l -= 2;
          }
          switch (o6.BIFFVer) {
            case 1536:
            case 1280:
            case 1024:
            case 768:
            case 512:
            case 2:
            case 7:
              break;
            default:
              if (length > 6)
                throw new Error("Unexpected BIFF Ver " + o6.BIFFVer);
          }
          blob.read_shift(length);
          return o6;
        }
        function write_BOF(wb, t5, o6) {
          var h = 1536, w3 = 16;
          switch (o6.bookType) {
            case "biff8":
              break;
            case "biff5":
              h = 1280;
              w3 = 8;
              break;
            case "biff4":
              h = 4;
              w3 = 6;
              break;
            case "biff3":
              h = 3;
              w3 = 6;
              break;
            case "biff2":
              h = 2;
              w3 = 4;
              break;
            case "xla":
              break;
            default:
              throw new Error("unsupported BIFF version");
          }
          var out = new_buf(w3);
          out.write_shift(2, h);
          out.write_shift(2, t5);
          if (w3 > 4)
            out.write_shift(2, 29282);
          if (w3 > 6)
            out.write_shift(2, 1997);
          if (w3 > 8) {
            out.write_shift(2, 49161);
            out.write_shift(2, 1);
            out.write_shift(2, 1798);
            out.write_shift(2, 0);
          }
          return out;
        }
        function parse_InterfaceHdr(blob, length) {
          if (length === 0)
            return 1200;
          if (blob.read_shift(2) !== 1200) {
          }
          return 1200;
        }
        function parse_WriteAccess(blob, length, opts) {
          if (opts.enc) {
            blob.l += length;
            return "";
          }
          var l5 = blob.l;
          var UserName = parse_XLUnicodeString2(blob, 0, opts);
          blob.read_shift(length + l5 - blob.l);
          return UserName;
        }
        function write_WriteAccess(s3, opts) {
          var b8 = !opts || opts.biff == 8;
          var o6 = new_buf(b8 ? 112 : 54);
          o6.write_shift(opts.biff == 8 ? 2 : 1, 7);
          if (b8)
            o6.write_shift(1, 0);
          o6.write_shift(4, 859007059);
          o6.write_shift(4, 5458548 | (b8 ? 0 : 536870912));
          while (o6.l < o6.length)
            o6.write_shift(1, b8 ? 0 : 32);
          return o6;
        }
        function parse_WsBool(blob, length, opts) {
          var flags = opts && opts.biff == 8 || length == 2 ? blob.read_shift(2) : (blob.l += length, 0);
          return { fDialog: flags & 16, fBelow: flags & 64, fRight: flags & 128 };
        }
        function parse_BoundSheet8(blob, length, opts) {
          var name = "";
          if (opts.biff == 4) {
            name = parse_ShortXLUnicodeString(blob, 0, opts);
            if (name.length === 0)
              name = "Sheet1";
            return { name };
          }
          var pos = blob.read_shift(4);
          var hidden = blob.read_shift(1) & 3;
          var dt2 = blob.read_shift(1);
          switch (dt2) {
            case 0:
              dt2 = "Worksheet";
              break;
            case 1:
              dt2 = "Macrosheet";
              break;
            case 2:
              dt2 = "Chartsheet";
              break;
            case 6:
              dt2 = "VBAModule";
              break;
          }
          name = parse_ShortXLUnicodeString(blob, 0, opts);
          if (name.length === 0)
            name = "Sheet1";
          return { pos, hs: hidden, dt: dt2, name };
        }
        function write_BoundSheet8(data, opts) {
          var w3 = !opts || opts.biff >= 8 ? 2 : 1;
          var o6 = new_buf(8 + w3 * data.name.length);
          o6.write_shift(4, data.pos);
          o6.write_shift(1, data.hs || 0);
          o6.write_shift(1, data.dt);
          o6.write_shift(1, data.name.length);
          if (opts.biff >= 8)
            o6.write_shift(1, 1);
          o6.write_shift(w3 * data.name.length, data.name, opts.biff < 8 ? "sbcs" : "utf16le");
          var out = o6.slice(0, o6.l);
          out.l = o6.l;
          return out;
        }
        function parse_SST(blob, length) {
          var end = blob.l + length;
          var cnt = blob.read_shift(4);
          var ucnt = blob.read_shift(4);
          var strs2 = [];
          for (var i6 = 0; i6 != ucnt && blob.l < end; ++i6) {
            strs2.push(parse_XLUnicodeRichExtendedString(blob));
          }
          strs2.Count = cnt;
          strs2.Unique = ucnt;
          return strs2;
        }
        function write_SST(sst, opts) {
          var header = new_buf(8);
          header.write_shift(4, sst.Count);
          header.write_shift(4, sst.Unique);
          var strs2 = [];
          for (var j3 = 0; j3 < sst.length; ++j3)
            strs2[j3] = write_XLUnicodeRichExtendedString(sst[j3], opts);
          var o6 = bconcat([header].concat(strs2));
          o6.parts = [header.length].concat(strs2.map(function(str) {
            return str.length;
          }));
          return o6;
        }
        function parse_ExtSST(blob, length) {
          var extsst = {};
          extsst.dsst = blob.read_shift(2);
          blob.l += length - 2;
          return extsst;
        }
        function parse_Row(blob) {
          var z3 = {};
          z3.r = blob.read_shift(2);
          z3.c = blob.read_shift(2);
          z3.cnt = blob.read_shift(2) - z3.c;
          var miyRw = blob.read_shift(2);
          blob.l += 4;
          var flags = blob.read_shift(1);
          blob.l += 3;
          if (flags & 7)
            z3.level = flags & 7;
          if (flags & 32)
            z3.hidden = true;
          if (flags & 64)
            z3.hpt = miyRw / 20;
          return z3;
        }
        function parse_ForceFullCalculation(blob) {
          var header = parse_frtHeader(blob);
          if (header.type != 2211)
            throw new Error("Invalid Future Record " + header.type);
          var fullcalc = blob.read_shift(4);
          return fullcalc !== 0;
        }
        function parse_RecalcId(blob) {
          blob.read_shift(2);
          return blob.read_shift(4);
        }
        function parse_DefaultRowHeight(blob, length, opts) {
          var f2 = 0;
          if (!(opts && opts.biff == 2)) {
            f2 = blob.read_shift(2);
          }
          var miyRw = blob.read_shift(2);
          if (opts && opts.biff == 2) {
            f2 = 1 - (miyRw >> 15);
            miyRw &= 32767;
          }
          var fl = { Unsynced: f2 & 1, DyZero: (f2 & 2) >> 1, ExAsc: (f2 & 4) >> 2, ExDsc: (f2 & 8) >> 3 };
          return [fl, miyRw];
        }
        function parse_Window1(blob) {
          var xWn = blob.read_shift(2), yWn = blob.read_shift(2), dxWn = blob.read_shift(2), dyWn = blob.read_shift(2);
          var flags = blob.read_shift(2), iTabCur = blob.read_shift(2), iTabFirst = blob.read_shift(2);
          var ctabSel = blob.read_shift(2), wTabRatio = blob.read_shift(2);
          return {
            Pos: [xWn, yWn],
            Dim: [dxWn, dyWn],
            Flags: flags,
            CurTab: iTabCur,
            FirstTab: iTabFirst,
            Selected: ctabSel,
            TabRatio: wTabRatio
          };
        }
        function write_Window1() {
          var o6 = new_buf(18);
          o6.write_shift(2, 0);
          o6.write_shift(2, 0);
          o6.write_shift(2, 29280);
          o6.write_shift(2, 17600);
          o6.write_shift(2, 56);
          o6.write_shift(2, 0);
          o6.write_shift(2, 0);
          o6.write_shift(2, 1);
          o6.write_shift(2, 500);
          return o6;
        }
        function parse_Window2(blob, length, opts) {
          if (opts && opts.biff >= 2 && opts.biff < 5)
            return {};
          var f2 = blob.read_shift(2);
          return { RTL: f2 & 64 };
        }
        function write_Window2(view) {
          var o6 = new_buf(18), f2 = 1718;
          if (view && view.RTL)
            f2 |= 64;
          o6.write_shift(2, f2);
          o6.write_shift(4, 0);
          o6.write_shift(4, 64);
          o6.write_shift(4, 0);
          o6.write_shift(4, 0);
          return o6;
        }
        function parse_Pane() {
        }
        function parse_Font(blob, length, opts) {
          var o6 = {
            dyHeight: blob.read_shift(2),
            fl: blob.read_shift(2)
          };
          switch (opts && opts.biff || 8) {
            case 2:
              break;
            case 3:
            case 4:
              blob.l += 2;
              break;
            default:
              blob.l += 10;
              break;
          }
          o6.name = parse_ShortXLUnicodeString(blob, 0, opts);
          return o6;
        }
        function write_Font(data, opts) {
          var name = data.name || "Arial";
          var b5 = opts && opts.biff == 5, w3 = b5 ? 15 + name.length : 16 + 2 * name.length;
          var o6 = new_buf(w3);
          o6.write_shift(2, (data.sz || 12) * 20);
          o6.write_shift(4, 0);
          o6.write_shift(2, 400);
          o6.write_shift(4, 0);
          o6.write_shift(2, 0);
          o6.write_shift(1, name.length);
          if (!b5)
            o6.write_shift(1, 1);
          o6.write_shift((b5 ? 1 : 2) * name.length, name, b5 ? "sbcs" : "utf16le");
          return o6;
        }
        function parse_LabelSst(blob, length, opts) {
          var cell = parse_XLSCell(blob, length, opts);
          cell.isst = blob.read_shift(4);
          return cell;
        }
        function write_LabelSst(R2, C6, v4, os) {
          var o6 = new_buf(10);
          write_XLSCell(R2, C6, os, o6);
          o6.write_shift(4, v4);
          return o6;
        }
        function parse_Label(blob, length, opts) {
          if (opts.biffguess && opts.biff == 2)
            opts.biff = 5;
          var target = blob.l + length;
          var cell = parse_XLSCell(blob, length, opts);
          var str = parse_XLUnicodeString(blob, target - blob.l, opts);
          cell.val = str;
          return cell;
        }
        function write_Label(R2, C6, v4, os, opts) {
          var b8 = !opts || opts.biff == 8;
          var o6 = new_buf(6 + 2 + +b8 + (1 + b8) * v4.length);
          write_XLSCell(R2, C6, os, o6);
          o6.write_shift(2, v4.length);
          if (b8)
            o6.write_shift(1, 1);
          o6.write_shift((1 + b8) * v4.length, v4, b8 ? "utf16le" : "sbcs");
          return o6;
        }
        function parse_Format(blob, length, opts) {
          var numFmtId = blob.read_shift(2);
          var fmtstr = parse_XLUnicodeString2(blob, 0, opts);
          return [numFmtId, fmtstr];
        }
        function write_Format(i6, f2, opts, o6) {
          var b5 = opts && opts.biff == 5;
          if (!o6)
            o6 = new_buf(b5 ? 3 + f2.length : 5 + 2 * f2.length);
          o6.write_shift(2, i6);
          o6.write_shift(b5 ? 1 : 2, f2.length);
          if (!b5)
            o6.write_shift(1, 1);
          o6.write_shift((b5 ? 1 : 2) * f2.length, f2, b5 ? "sbcs" : "utf16le");
          var out = o6.length > o6.l ? o6.slice(0, o6.l) : o6;
          if (out.l == null)
            out.l = out.length;
          return out;
        }
        var parse_BIFF2Format = parse_XLUnicodeString2;
        function write_BIFF2Format(f2) {
          var o6 = new_buf(1 + f2.length);
          o6.write_shift(1, f2.length);
          o6.write_shift(f2.length, f2, "sbcs");
          return o6;
        }
        function write_BIFF4Format(f2) {
          var o6 = new_buf(3 + f2.length);
          o6.l += 2;
          o6.write_shift(1, f2.length);
          o6.write_shift(f2.length, f2, "sbcs");
          return o6;
        }
        function parse_Dimensions(blob, length, opts) {
          var end = blob.l + length;
          var w3 = opts.biff == 8 || !opts.biff ? 4 : 2;
          var r6 = blob.read_shift(w3), R2 = blob.read_shift(w3);
          var c8 = blob.read_shift(2), C6 = blob.read_shift(2);
          blob.l = end;
          return { s: { r: r6, c: c8 }, e: { r: R2, c: C6 } };
        }
        function write_Dimensions(range, opts) {
          var w3 = opts.biff == 8 || !opts.biff ? 4 : 2;
          var o6 = new_buf(2 * w3 + 6);
          o6.write_shift(w3, range.s.r);
          o6.write_shift(w3, range.e.r + 1);
          o6.write_shift(2, range.s.c);
          o6.write_shift(2, range.e.c + 1);
          o6.write_shift(2, 0);
          return o6;
        }
        function parse_RK(blob) {
          var rw = blob.read_shift(2), col = blob.read_shift(2);
          var rkrec = parse_RkRec(blob);
          return { r: rw, c: col, ixfe: rkrec[0], rknum: rkrec[1] };
        }
        function parse_MulRk(blob, length) {
          var target = blob.l + length - 2;
          var rw = blob.read_shift(2), col = blob.read_shift(2);
          var rkrecs = [];
          while (blob.l < target)
            rkrecs.push(parse_RkRec(blob));
          if (blob.l !== target)
            throw new Error("MulRK read error");
          var lastcol = blob.read_shift(2);
          if (rkrecs.length != lastcol - col + 1)
            throw new Error("MulRK length mismatch");
          return { r: rw, c: col, C: lastcol, rkrec: rkrecs };
        }
        function parse_MulBlank(blob, length) {
          var target = blob.l + length - 2;
          var rw = blob.read_shift(2), col = blob.read_shift(2);
          var ixfes = [];
          while (blob.l < target)
            ixfes.push(blob.read_shift(2));
          if (blob.l !== target)
            throw new Error("MulBlank read error");
          var lastcol = blob.read_shift(2);
          if (ixfes.length != lastcol - col + 1)
            throw new Error("MulBlank length mismatch");
          return { r: rw, c: col, C: lastcol, ixfe: ixfes };
        }
        function parse_CellStyleXF(blob, length, style, opts) {
          var o6 = {};
          var a2 = blob.read_shift(4), b3 = blob.read_shift(4);
          var c8 = blob.read_shift(4), d2 = blob.read_shift(2);
          o6.patternType = XLSFillPattern[c8 >> 26];
          if (!opts.cellStyles)
            return o6;
          o6.alc = a2 & 7;
          o6.fWrap = a2 >> 3 & 1;
          o6.alcV = a2 >> 4 & 7;
          o6.fJustLast = a2 >> 7 & 1;
          o6.trot = a2 >> 8 & 255;
          o6.cIndent = a2 >> 16 & 15;
          o6.fShrinkToFit = a2 >> 20 & 1;
          o6.iReadOrder = a2 >> 22 & 2;
          o6.fAtrNum = a2 >> 26 & 1;
          o6.fAtrFnt = a2 >> 27 & 1;
          o6.fAtrAlc = a2 >> 28 & 1;
          o6.fAtrBdr = a2 >> 29 & 1;
          o6.fAtrPat = a2 >> 30 & 1;
          o6.fAtrProt = a2 >> 31 & 1;
          o6.dgLeft = b3 & 15;
          o6.dgRight = b3 >> 4 & 15;
          o6.dgTop = b3 >> 8 & 15;
          o6.dgBottom = b3 >> 12 & 15;
          o6.icvLeft = b3 >> 16 & 127;
          o6.icvRight = b3 >> 23 & 127;
          o6.grbitDiag = b3 >> 30 & 3;
          o6.icvTop = c8 & 127;
          o6.icvBottom = c8 >> 7 & 127;
          o6.icvDiag = c8 >> 14 & 127;
          o6.dgDiag = c8 >> 21 & 15;
          o6.icvFore = d2 & 127;
          o6.icvBack = d2 >> 7 & 127;
          o6.fsxButton = d2 >> 14 & 1;
          return o6;
        }
        function parse_XF(blob, length, opts) {
          var o6 = {};
          o6.ifnt = blob.read_shift(2);
          o6.numFmtId = blob.read_shift(2);
          o6.flags = blob.read_shift(2);
          o6.fStyle = o6.flags >> 2 & 1;
          length -= 6;
          o6.data = parse_CellStyleXF(blob, length, o6.fStyle, opts);
          return o6;
        }
        function write_XF(data, ixfeP, opts, o6) {
          var b5 = opts && opts.biff == 5;
          if (!o6)
            o6 = new_buf(b5 ? 16 : 20);
          o6.write_shift(2, 0);
          if (data.style) {
            o6.write_shift(2, data.numFmtId || 0);
            o6.write_shift(2, 65524);
          } else {
            o6.write_shift(2, data.numFmtId || 0);
            o6.write_shift(2, ixfeP << 4);
          }
          var f2 = 0;
          if (data.numFmtId > 0 && b5)
            f2 |= 1024;
          o6.write_shift(4, f2);
          o6.write_shift(4, 0);
          if (!b5)
            o6.write_shift(4, 0);
          o6.write_shift(2, 0);
          return o6;
        }
        function parse_BIFF2XF(blob) {
          var o6 = {};
          o6.ifnt = blob.read_shift(1);
          blob.l++;
          o6.flags = blob.read_shift(1);
          o6.numFmtId = o6.flags & 63;
          o6.flags >>= 6;
          o6.fStyle = 0;
          o6.data = {};
          return o6;
        }
        function write_BIFF2XF(xf) {
          var o6 = new_buf(4);
          o6.l += 2;
          o6.write_shift(1, xf.numFmtId);
          o6.l++;
          return o6;
        }
        function write_BIFF3XF(xf) {
          var o6 = new_buf(12);
          o6.l++;
          o6.write_shift(1, xf.numFmtId);
          o6.l += 10;
          return o6;
        }
        var write_BIFF4XF = write_BIFF3XF;
        function parse_BIFF3XF(blob) {
          var o6 = {};
          o6.ifnt = blob.read_shift(1);
          o6.numFmtId = blob.read_shift(1);
          o6.flags = blob.read_shift(2);
          o6.fStyle = o6.flags >> 2 & 1;
          o6.data = {};
          return o6;
        }
        function parse_BIFF4XF(blob) {
          var o6 = {};
          o6.ifnt = blob.read_shift(1);
          o6.numFmtId = blob.read_shift(1);
          o6.flags = blob.read_shift(2);
          o6.fStyle = o6.flags >> 2 & 1;
          o6.data = {};
          return o6;
        }
        function parse_Guts(blob) {
          blob.l += 4;
          var out = [blob.read_shift(2), blob.read_shift(2)];
          if (out[0] !== 0)
            out[0]--;
          if (out[1] !== 0)
            out[1]--;
          if (out[0] > 7 || out[1] > 7)
            throw new Error("Bad Gutters: " + out.join("|"));
          return out;
        }
        function write_Guts(guts) {
          var o6 = new_buf(8);
          o6.write_shift(4, 0);
          o6.write_shift(2, guts[0] ? guts[0] + 1 : 0);
          o6.write_shift(2, guts[1] ? guts[1] + 1 : 0);
          return o6;
        }
        function parse_BoolErr(blob, length, opts) {
          var cell = parse_XLSCell(blob, 6, opts);
          var val2 = parse_Bes(blob, 2);
          cell.val = val2;
          cell.t = val2 === true || val2 === false ? "b" : "e";
          return cell;
        }
        function write_BoolErr(R2, C6, v4, os, opts, t5) {
          var o6 = new_buf(8);
          write_XLSCell(R2, C6, os, o6);
          write_Bes(v4, t5, o6);
          return o6;
        }
        function parse_Number(blob, length, opts) {
          if (opts.biffguess && opts.biff == 2)
            opts.biff = 5;
          var cell = parse_XLSCell(blob, 6, opts);
          var xnum = parse_Xnum(blob, 8);
          cell.val = xnum;
          return cell;
        }
        function write_Number(R2, C6, v4, os) {
          var o6 = new_buf(14);
          write_XLSCell(R2, C6, os, o6);
          write_Xnum(v4, o6);
          return o6;
        }
        var parse_XLHeaderFooter = parse_OptXLUnicodeString;
        function parse_SupBook(blob, length, opts) {
          var end = blob.l + length;
          var ctab = blob.read_shift(2);
          var cch = blob.read_shift(2);
          opts.sbcch = cch;
          if (cch == 1025 || cch == 14849)
            return [cch, ctab];
          if (cch < 1 || cch > 255)
            throw new Error("Unexpected SupBook type: " + cch);
          var virtPath = parse_XLUnicodeStringNoCch(blob, cch);
          var rgst = [];
          while (end > blob.l)
            rgst.push(parse_XLUnicodeString(blob));
          return [cch, ctab, virtPath, rgst];
        }
        function parse_ExternName(blob, length, opts) {
          var flags = blob.read_shift(2);
          var body;
          var o6 = {
            fBuiltIn: flags & 1,
            fWantAdvise: flags >>> 1 & 1,
            fWantPict: flags >>> 2 & 1,
            fOle: flags >>> 3 & 1,
            fOleLink: flags >>> 4 & 1,
            cf: flags >>> 5 & 1023,
            fIcon: flags >>> 15 & 1
          };
          if (opts.sbcch === 14849)
            body = parse_AddinUdf(blob, length - 2, opts);
          o6.body = body || blob.read_shift(length - 2);
          if (typeof body === "string")
            o6.Name = body;
          return o6;
        }
        function parse_Lbl(blob, length, opts) {
          var target = blob.l + length;
          var flags = blob.read_shift(2);
          var chKey = blob.read_shift(1);
          var cch = blob.read_shift(1);
          var cce = blob.read_shift(opts && opts.biff == 2 ? 1 : 2);
          var itab = 0;
          if (!opts || opts.biff >= 5) {
            if (opts.biff != 5)
              blob.l += 2;
            itab = blob.read_shift(2);
            if (opts.biff == 5)
              blob.l += 2;
            blob.l += 4;
          }
          var name = parse_XLUnicodeStringNoCch(blob, cch, opts);
          if (flags & 32)
            name = XLSLblBuiltIn[name.charCodeAt(0)];
          var npflen = target - blob.l;
          if (opts && opts.biff == 2)
            --npflen;
          var rgce = target == blob.l || cce === 0 || !(npflen > 0) ? [] : parse_NameParsedFormula(blob, npflen, opts, cce);
          return {
            chKey,
            Name: name,
            itab,
            rgce
          };
        }
        function parse_ExternSheet(blob, length, opts) {
          if (opts.biff < 8)
            return parse_BIFF5ExternSheet(blob, length, opts);
          if (!(opts.biff > 8) && length == blob[blob.l] + (blob[blob.l + 1] == 3 ? 1 : 0) + 1)
            return parse_BIFF5ExternSheet(blob, length, opts);
          var o6 = [], target = blob.l + length, len = blob.read_shift(opts.biff > 8 ? 4 : 2);
          while (len-- !== 0)
            o6.push(parse_XTI(blob, opts.biff > 8 ? 12 : 6, opts));
          if (blob.l != target)
            throw new Error("Bad ExternSheet: " + blob.l + " != " + target);
          return o6;
        }
        function parse_BIFF5ExternSheet(blob, length, opts) {
          if (blob[blob.l + 1] == 3)
            blob[blob.l]++;
          var o6 = parse_ShortXLUnicodeString(blob, length, opts);
          return o6.charCodeAt(0) == 3 ? o6.slice(1) : o6;
        }
        function parse_NameCmt(blob, length, opts) {
          if (opts.biff < 8) {
            blob.l += length;
            return;
          }
          var cchName = blob.read_shift(2);
          var cchComment = blob.read_shift(2);
          var name = parse_XLUnicodeStringNoCch(blob, cchName, opts);
          var comment = parse_XLUnicodeStringNoCch(blob, cchComment, opts);
          return [name, comment];
        }
        function parse_ShrFmla(blob, length, opts) {
          var ref = parse_RefU(blob, 6);
          blob.l++;
          var cUse = blob.read_shift(1);
          length -= 8;
          return [parse_SharedParsedFormula(blob, length, opts), cUse, ref];
        }
        function parse_Array(blob, length, opts) {
          var ref = parse_Ref(blob, 6);
          switch (opts.biff) {
            case 2:
              blob.l++;
              length -= 7;
              break;
            case 3:
            case 4:
              blob.l += 2;
              length -= 8;
              break;
            default:
              blob.l += 6;
              length -= 12;
          }
          return [ref, parse_ArrayParsedFormula(blob, length, opts, ref)];
        }
        function parse_MTRSettings(blob) {
          var fMTREnabled = blob.read_shift(4) !== 0;
          var fUserSetThreadCount = blob.read_shift(4) !== 0;
          var cUserThreadCount = blob.read_shift(4);
          return [fMTREnabled, fUserSetThreadCount, cUserThreadCount];
        }
        function parse_NoteSh(blob, length, opts) {
          var row = blob.read_shift(2), col = blob.read_shift(2);
          var flags = blob.read_shift(2), idObj = blob.read_shift(2);
          var stAuthor = parse_XLUnicodeString2(blob, 0, opts);
          return [{ r: row, c: col }, stAuthor, idObj, flags];
        }
        function parse_Note(blob, length, opts) {
          if (opts && opts.biff < 8) {
            var row = blob.read_shift(2), col = blob.read_shift(2);
            if (row == 65535 || row == -1)
              return;
            var cch = blob.read_shift(2);
            var cmnt = blob.read_shift(Math.min(cch, 2048), "cpstr");
            return [{ r: row, c: col }, cmnt];
          }
          return parse_NoteSh(blob, length, opts);
        }
        function write_NOTE_BIFF2(text, R2, C6, len) {
          var o6 = new_buf(6 + (len || text.length));
          o6.write_shift(2, R2);
          o6.write_shift(2, C6);
          o6.write_shift(2, len || text.length);
          o6.write_shift(text.length, text, "sbcs");
          return o6;
        }
        function parse_MergeCells(blob, length) {
          var merges = [];
          var cmcs = blob.read_shift(2);
          while (cmcs--)
            merges.push(parse_Ref8U(blob, length));
          return merges;
        }
        function write_MergeCells(merges) {
          var o6 = new_buf(2 + merges.length * 8);
          o6.write_shift(2, merges.length);
          for (var i6 = 0; i6 < merges.length; ++i6)
            write_Ref8U(merges[i6], o6);
          return o6;
        }
        function parse_Obj(blob, length, opts) {
          if (opts && opts.biff < 8)
            return parse_BIFF5Obj(blob, length, opts);
          var cmo = parse_FtCmo(blob, 22);
          var fts = parse_FtArray(blob, length - 22, cmo[1]);
          return { cmo, ft: fts };
        }
        var parse_BIFF5OT = {
          8: function(blob, length) {
            var tgt = blob.l + length;
            blob.l += 10;
            var cf = blob.read_shift(2);
            blob.l += 4;
            blob.l += 2;
            blob.l += 2;
            blob.l += 2;
            blob.l += 4;
            var cchName = blob.read_shift(1);
            blob.l += cchName;
            blob.l = tgt;
            return { fmt: cf };
          }
        };
        function parse_BIFF5Obj(blob, length, opts) {
          blob.l += 4;
          var ot2 = blob.read_shift(2);
          var id = blob.read_shift(2);
          var grbit = blob.read_shift(2);
          blob.l += 2;
          blob.l += 2;
          blob.l += 2;
          blob.l += 2;
          blob.l += 2;
          blob.l += 2;
          blob.l += 2;
          blob.l += 2;
          blob.l += 2;
          blob.l += 6;
          length -= 36;
          var fts = [];
          fts.push((parse_BIFF5OT[ot2] || parsenoop)(blob, length, opts));
          return { cmo: [id, ot2, grbit], ft: fts };
        }
        function parse_TxO(blob, length, opts) {
          var s3 = blob.l;
          var texts = "";
          try {
            blob.l += 4;
            var ot2 = (opts.lastobj || { cmo: [0, 0] }).cmo[1];
            var controlInfo;
            if ([0, 5, 7, 11, 12, 14].indexOf(ot2) == -1)
              blob.l += 6;
            else
              controlInfo = parse_ControlInfo(blob, 6, opts);
            var cchText = blob.read_shift(2);
            blob.read_shift(2);
            parseuint16(blob, 2);
            var len = blob.read_shift(2);
            blob.l += len;
            for (var i6 = 1; i6 < blob.lens.length - 1; ++i6) {
              if (blob.l - s3 != blob.lens[i6])
                throw new Error("TxO: bad continue record");
              var hdr = blob[blob.l];
              var t5 = parse_XLUnicodeStringNoCch(blob, blob.lens[i6 + 1] - blob.lens[i6] - 1);
              texts += t5;
              if (texts.length >= (hdr ? cchText : 2 * cchText))
                break;
            }
            if (texts.length !== cchText && texts.length !== cchText * 2) {
              throw new Error("cchText: " + cchText + " != " + texts.length);
            }
            blob.l = s3 + length;
            return { t: texts };
          } catch (e7) {
            blob.l = s3 + length;
            return { t: texts };
          }
        }
        function parse_HLink(blob, length) {
          var ref = parse_Ref8U(blob, 8);
          blob.l += 16;
          var hlink = parse_Hyperlink(blob, length - 24);
          return [ref, hlink];
        }
        function write_HLink(hl) {
          var O3 = new_buf(24);
          var ref = decode_cell(hl[0]);
          O3.write_shift(2, ref.r);
          O3.write_shift(2, ref.r);
          O3.write_shift(2, ref.c);
          O3.write_shift(2, ref.c);
          var clsid = "d0 c9 ea 79 f9 ba ce 11 8c 82 00 aa 00 4b a9 0b".split(" ");
          for (var i6 = 0; i6 < 16; ++i6)
            O3.write_shift(1, parseInt(clsid[i6], 16));
          return bconcat([O3, write_Hyperlink(hl[1])]);
        }
        function parse_HLinkTooltip(blob, length) {
          blob.read_shift(2);
          var ref = parse_Ref8U(blob, 8);
          var wzTooltip = blob.read_shift((length - 10) / 2, "dbcs-cont");
          wzTooltip = wzTooltip.replace(chr0, "");
          return [ref, wzTooltip];
        }
        function write_HLinkTooltip(hl) {
          var TT = hl[1].Tooltip;
          var O3 = new_buf(10 + 2 * (TT.length + 1));
          O3.write_shift(2, 2048);
          var ref = decode_cell(hl[0]);
          O3.write_shift(2, ref.r);
          O3.write_shift(2, ref.r);
          O3.write_shift(2, ref.c);
          O3.write_shift(2, ref.c);
          for (var i6 = 0; i6 < TT.length; ++i6)
            O3.write_shift(2, TT.charCodeAt(i6));
          O3.write_shift(2, 0);
          return O3;
        }
        function parse_Country(blob) {
          var o6 = [0, 0], d2;
          d2 = blob.read_shift(2);
          o6[0] = CountryEnum[d2] || d2;
          d2 = blob.read_shift(2);
          o6[1] = CountryEnum[d2] || d2;
          return o6;
        }
        function write_Country(o6) {
          if (!o6)
            o6 = new_buf(4);
          o6.write_shift(2, 1);
          o6.write_shift(2, 1);
          return o6;
        }
        function parse_ClrtClient(blob) {
          var ccv = blob.read_shift(2);
          var o6 = [];
          while (ccv-- > 0)
            o6.push(parse_LongRGB(blob, 8));
          return o6;
        }
        function parse_Palette(blob) {
          var ccv = blob.read_shift(2);
          var o6 = [];
          while (ccv-- > 0)
            o6.push(parse_LongRGB(blob, 8));
          return o6;
        }
        function parse_XFCRC(blob) {
          blob.l += 2;
          var o6 = { cxfs: 0, crc: 0 };
          o6.cxfs = blob.read_shift(2);
          o6.crc = blob.read_shift(4);
          return o6;
        }
        function parse_ColInfo(blob, length, opts) {
          if (!opts.cellStyles)
            return parsenoop(blob, length);
          var w3 = opts && opts.biff >= 12 ? 4 : 2;
          var colFirst = blob.read_shift(w3);
          var colLast = blob.read_shift(w3);
          var coldx = blob.read_shift(w3);
          var ixfe = blob.read_shift(w3);
          var flags = blob.read_shift(2);
          if (w3 == 2)
            blob.l += 2;
          var o6 = { s: colFirst, e: colLast, w: coldx, ixfe, flags };
          if (opts.biff >= 5 || !opts.biff)
            o6.level = flags >> 8 & 7;
          return o6;
        }
        function write_ColInfo(col, idx) {
          var o6 = new_buf(12);
          o6.write_shift(2, idx);
          o6.write_shift(2, idx);
          o6.write_shift(2, col.width * 256);
          o6.write_shift(2, 0);
          var f2 = 0;
          if (col.hidden)
            f2 |= 1;
          o6.write_shift(1, f2);
          f2 = col.level || 0;
          o6.write_shift(1, f2);
          o6.write_shift(2, 0);
          return o6;
        }
        function parse_Setup(blob, length) {
          var o6 = {};
          if (length < 32)
            return o6;
          blob.l += 16;
          o6.header = parse_Xnum(blob, 8);
          o6.footer = parse_Xnum(blob, 8);
          blob.l += 2;
          return o6;
        }
        function parse_ShtProps(blob, length, opts) {
          var def = { area: false };
          if (opts.biff != 5) {
            blob.l += length;
            return def;
          }
          var d2 = blob.read_shift(1);
          blob.l += 3;
          if (d2 & 16)
            def.area = true;
          return def;
        }
        function write_RRTabId(n6) {
          var out = new_buf(2 * n6);
          for (var i6 = 0; i6 < n6; ++i6)
            out.write_shift(2, i6 + 1);
          return out;
        }
        var parse_Blank = parse_XLSCell;
        var parse_Scl = parseuint16a;
        var parse_String = parse_XLUnicodeString;
        function parse_ImData(blob) {
          var cf = blob.read_shift(2);
          var env = blob.read_shift(2);
          var lcb = blob.read_shift(4);
          var o6 = { fmt: cf, env, len: lcb, data: blob.slice(blob.l, blob.l + lcb) };
          blob.l += lcb;
          return o6;
        }
        function write_BIFF2Cell(out, r6, c8, ixfe, ifmt) {
          if (!out)
            out = new_buf(7);
          out.write_shift(2, r6);
          out.write_shift(2, c8);
          out.write_shift(1, ixfe || 0);
          out.write_shift(1, ifmt || 0);
          out.write_shift(1, 0);
          return out;
        }
        function parse_BIFF2STR(blob, length, opts) {
          if (opts.biffguess && opts.biff == 5)
            opts.biff = 2;
          var cell = parse_XLSCell(blob, 7, opts);
          var str = parse_XLUnicodeString2(blob, length - 7, opts);
          cell.t = "str";
          cell.val = str;
          return cell;
        }
        function parse_BIFF2NUM(blob, length, opts) {
          var cell = parse_XLSCell(blob, 7, opts);
          var num = parse_Xnum(blob, 8);
          cell.t = "n";
          cell.val = num;
          return cell;
        }
        function write_BIFF2NUM(r6, c8, val2, ixfe, ifmt) {
          var out = new_buf(15);
          write_BIFF2Cell(out, r6, c8, ixfe || 0, ifmt || 0);
          out.write_shift(8, val2, "f");
          return out;
        }
        function parse_BIFF2INT(blob, length, opts) {
          var cell = parse_XLSCell(blob, 7, opts);
          var num = blob.read_shift(2);
          cell.t = "n";
          cell.val = num;
          return cell;
        }
        function write_BIFF2INT(r6, c8, val2, ixfe, ifmt) {
          var out = new_buf(9);
          write_BIFF2Cell(out, r6, c8, ixfe || 0, ifmt || 0);
          out.write_shift(2, val2);
          return out;
        }
        function parse_BIFF2STRING(blob) {
          var cch = blob.read_shift(1);
          if (cch === 0) {
            blob.l++;
            return "";
          }
          return blob.read_shift(cch, "sbcs-cont");
        }
        function parse_BIFF2BOOLERR(blob, length, opts) {
          var bestart = blob.l + 7;
          var cell = parse_XLSCell(blob, 6, opts);
          blob.l = bestart;
          var val2 = parse_Bes(blob, 2);
          cell.val = val2;
          cell.t = val2 === true || val2 === false ? "b" : "e";
          return cell;
        }
        function parse_BIFF2FONTXTRA(blob, length) {
          blob.l += 6;
          blob.l += 2;
          blob.l += 1;
          blob.l += 3;
          blob.l += 1;
          blob.l += length - 13;
        }
        function parse_RString(blob, length, opts) {
          var end = blob.l + length;
          var cell = parse_XLSCell(blob, 6, opts);
          var cch = blob.read_shift(2);
          var str = parse_XLUnicodeStringNoCch(blob, cch, opts);
          blob.l = end;
          cell.t = "str";
          cell.val = str;
          return cell;
        }
        function parse_BIFF4SheetInfo(blob) {
          var flags = blob.read_shift(4);
          var cch = blob.read_shift(1), name = blob.read_shift(cch, "sbcs");
          if (name.length === 0)
            name = "Sheet1";
          return { flags, name };
        }
        var DBF_SUPPORTED_VERSIONS = [2, 3, 48, 49, 131, 139, 140, 245];
        var DBF = function() {
          var dbf_codepage_map = {
            1: 437,
            2: 850,
            3: 1252,
            4: 1e4,
            100: 852,
            101: 866,
            102: 865,
            103: 861,
            104: 895,
            105: 620,
            106: 737,
            107: 857,
            120: 950,
            121: 949,
            122: 936,
            123: 932,
            124: 874,
            125: 1255,
            126: 1256,
            150: 10007,
            151: 10029,
            152: 10006,
            200: 1250,
            201: 1251,
            202: 1254,
            203: 1253,
            0: 20127,
            8: 865,
            9: 437,
            10: 850,
            11: 437,
            13: 437,
            14: 850,
            15: 437,
            16: 850,
            17: 437,
            18: 850,
            19: 932,
            20: 850,
            21: 437,
            22: 850,
            23: 865,
            24: 437,
            25: 437,
            26: 850,
            27: 437,
            28: 863,
            29: 850,
            31: 852,
            34: 852,
            35: 852,
            36: 860,
            37: 850,
            38: 866,
            55: 850,
            64: 852,
            77: 936,
            78: 949,
            79: 950,
            80: 874,
            87: 1252,
            88: 1252,
            89: 1252,
            108: 863,
            134: 737,
            135: 852,
            136: 857,
            204: 1257,
            255: 16969
          };
          var dbf_reverse_map = evert({
            1: 437,
            2: 850,
            3: 1252,
            4: 1e4,
            100: 852,
            101: 866,
            102: 865,
            103: 861,
            104: 895,
            105: 620,
            106: 737,
            107: 857,
            120: 950,
            121: 949,
            122: 936,
            123: 932,
            124: 874,
            125: 1255,
            126: 1256,
            150: 10007,
            151: 10029,
            152: 10006,
            200: 1250,
            201: 1251,
            202: 1254,
            203: 1253,
            0: 20127
          });
          function dbf_to_aoa(buf, opts) {
            var out = [];
            var d2 = new_raw_buf(1);
            switch (opts.type) {
              case "base64":
                d2 = s2a(Base64_decode(buf));
                break;
              case "binary":
                d2 = s2a(buf);
                break;
              case "buffer":
              case "array":
                d2 = buf;
                break;
            }
            prep_blob(d2, 0);
            var ft = d2.read_shift(1);
            var memo3 = !!(ft & 136);
            var vfp = false, l7 = false;
            switch (ft) {
              case 2:
                break;
              case 3:
                break;
              case 48:
                vfp = true;
                memo3 = true;
                break;
              case 49:
                vfp = true;
                memo3 = true;
                break;
              case 131:
                break;
              case 139:
                break;
              case 140:
                l7 = true;
                break;
              case 245:
                break;
              default:
                throw new Error("DBF Unsupported Version: " + ft.toString(16));
            }
            var nrow = 0, fpos = 521;
            if (ft == 2)
              nrow = d2.read_shift(2);
            d2.l += 3;
            if (ft != 2)
              nrow = d2.read_shift(4);
            if (nrow > 1048576)
              nrow = 1e6;
            if (ft != 2)
              fpos = d2.read_shift(2);
            var rlen = d2.read_shift(2);
            var current_cp = opts.codepage || 1252;
            if (ft != 2) {
              d2.l += 16;
              d2.read_shift(1);
              if (d2[d2.l] !== 0)
                current_cp = dbf_codepage_map[d2[d2.l]];
              d2.l += 1;
              d2.l += 2;
            }
            if (l7)
              d2.l += 36;
            var fields = [], field = {};
            var hend = Math.min(d2.length, ft == 2 ? 521 : fpos - 10 - (vfp ? 264 : 0));
            var ww = l7 ? 32 : 11;
            while (d2.l < hend && d2[d2.l] != 13) {
              field = {};
              field.name = (typeof $cptable !== "undefined" ? $cptable.utils.decode(current_cp, d2.slice(d2.l, d2.l + ww)) : a2s(d2.slice(d2.l, d2.l + ww))).replace(/[\u0000\r\n][\S\s]*$/g, "");
              d2.l += ww;
              field.type = String.fromCharCode(d2.read_shift(1));
              if (ft != 2 && !l7)
                field.offset = d2.read_shift(4);
              field.len = d2.read_shift(1);
              if (ft == 2)
                field.offset = d2.read_shift(2);
              field.dec = d2.read_shift(1);
              if (field.name.length)
                fields.push(field);
              if (ft != 2)
                d2.l += l7 ? 13 : 14;
              switch (field.type) {
                case "B":
                  if ((!vfp || field.len != 8) && opts.WTF)
                    console.log("Skipping " + field.name + ":" + field.type);
                  break;
                case "G":
                case "P":
                  if (opts.WTF)
                    console.log("Skipping " + field.name + ":" + field.type);
                  break;
                case "+":
                case "0":
                case "@":
                case "C":
                case "D":
                case "F":
                case "I":
                case "L":
                case "M":
                case "N":
                case "O":
                case "T":
                case "Y":
                  break;
                default:
                  throw new Error("Unknown Field Type: " + field.type);
              }
            }
            if (d2[d2.l] !== 13)
              d2.l = fpos - 1;
            if (d2.read_shift(1) !== 13)
              throw new Error("DBF Terminator not found " + d2.l + " " + d2[d2.l]);
            d2.l = fpos;
            var R2 = 0, C6 = 0;
            out[0] = [];
            for (C6 = 0; C6 != fields.length; ++C6)
              out[0][C6] = fields[C6].name;
            while (nrow-- > 0) {
              if (d2[d2.l] === 42) {
                d2.l += rlen;
                continue;
              }
              ++d2.l;
              out[++R2] = [];
              C6 = 0;
              for (C6 = 0; C6 != fields.length; ++C6) {
                var dd = d2.slice(d2.l, d2.l + fields[C6].len);
                d2.l += fields[C6].len;
                prep_blob(dd, 0);
                var s3 = typeof $cptable !== "undefined" ? $cptable.utils.decode(current_cp, dd) : a2s(dd);
                switch (fields[C6].type) {
                  case "C":
                    if (s3.trim().length)
                      out[R2][C6] = s3.replace(/([^\s])\s+$/, "$1");
                    break;
                  case "D":
                    if (s3.length === 8) {
                      out[R2][C6] = new Date(Date.UTC(+s3.slice(0, 4), +s3.slice(4, 6) - 1, +s3.slice(6, 8), 0, 0, 0, 0));
                      if (!(opts && opts.UTC)) {
                        out[R2][C6] = utc_to_local(out[R2][C6]);
                      }
                    } else
                      out[R2][C6] = s3;
                    break;
                  case "F":
                    out[R2][C6] = parseFloat(s3.trim());
                    break;
                  case "+":
                  case "I":
                    out[R2][C6] = l7 ? dd.read_shift(-4, "i") ^ 2147483648 : dd.read_shift(4, "i");
                    break;
                  case "L":
                    switch (s3.trim().toUpperCase()) {
                      case "Y":
                      case "T":
                        out[R2][C6] = true;
                        break;
                      case "N":
                      case "F":
                        out[R2][C6] = false;
                        break;
                      case "":
                      case "\0":
                      case "?":
                        break;
                      default:
                        throw new Error("DBF Unrecognized L:|" + s3 + "|");
                    }
                    break;
                  case "M":
                    if (!memo3)
                      throw new Error("DBF Unexpected MEMO for type " + ft.toString(16));
                    out[R2][C6] = "##MEMO##" + (l7 ? parseInt(s3.trim(), 10) : dd.read_shift(4));
                    break;
                  case "N":
                    s3 = s3.replace(/\u0000/g, "").trim();
                    if (s3 && s3 != ".")
                      out[R2][C6] = +s3 || 0;
                    break;
                  case "@":
                    out[R2][C6] = new Date(dd.read_shift(-8, "f") - 621356832e5);
                    break;
                  case "T":
                    {
                      var hi = dd.read_shift(4), lo = dd.read_shift(4);
                      if (hi == 0 && lo == 0)
                        break;
                      out[R2][C6] = new Date((hi - 2440588) * 864e5 + lo);
                      if (!(opts && opts.UTC))
                        out[R2][C6] = utc_to_local(out[R2][C6]);
                    }
                    break;
                  case "Y":
                    out[R2][C6] = dd.read_shift(4, "i") / 1e4 + dd.read_shift(4, "i") / 1e4 * Math.pow(2, 32);
                    break;
                  case "O":
                    out[R2][C6] = -dd.read_shift(-8, "f");
                    break;
                  case "B":
                    if (vfp && fields[C6].len == 8) {
                      out[R2][C6] = dd.read_shift(8, "f");
                      break;
                    }
                  case "G":
                  case "P":
                    dd.l += fields[C6].len;
                    break;
                  case "0":
                    if (fields[C6].name === "_NullFlags")
                      break;
                  default:
                    throw new Error("DBF Unsupported data type " + fields[C6].type);
                }
              }
            }
            if (ft != 2) {
              if (d2.l < d2.length && d2[d2.l++] != 26)
                throw new Error("DBF EOF Marker missing " + (d2.l - 1) + " of " + d2.length + " " + d2[d2.l - 1].toString(16));
            }
            if (opts && opts.sheetRows)
              out = out.slice(0, opts.sheetRows);
            opts.DBF = fields;
            return out;
          }
          function dbf_to_sheet(buf, opts) {
            var o6 = opts || {};
            if (!o6.dateNF)
              o6.dateNF = "yyyymmdd";
            var ws = aoa_to_sheet(dbf_to_aoa(buf, o6), o6);
            ws["!cols"] = o6.DBF.map(function(field) {
              return {
                wch: field.len,
                DBF: field
              };
            });
            delete o6.DBF;
            return ws;
          }
          function dbf_to_workbook(buf, opts) {
            try {
              var o6 = sheet_to_workbook(dbf_to_sheet(buf, opts), opts);
              o6.bookType = "dbf";
              return o6;
            } catch (e7) {
              if (opts && opts.WTF)
                throw e7;
            }
            return { SheetNames: [], Sheets: {} };
          }
          var _RLEN = { "B": 8, "C": 250, "L": 1, "D": 8, "?": 0, "": 0 };
          function sheet_to_dbf(ws, opts) {
            if (!ws["!ref"])
              throw new Error("Cannot export empty sheet to DBF");
            var o6 = opts || {};
            var old_cp = current_codepage;
            if (+o6.codepage >= 0)
              set_cp(+o6.codepage);
            if (o6.type == "string")
              throw new Error("Cannot write DBF to JS string");
            var ba = buf_array();
            var aoa = sheet_to_json(ws, { header: 1, raw: true, cellDates: true });
            var headers = aoa[0], data = aoa.slice(1), cols = ws["!cols"] || [];
            var i6 = 0, j3 = 0, hcnt = 0, rlen = 1;
            for (i6 = 0; i6 < headers.length; ++i6) {
              if (((cols[i6] || {}).DBF || {}).name) {
                headers[i6] = cols[i6].DBF.name;
                ++hcnt;
                continue;
              }
              if (headers[i6] == null)
                continue;
              ++hcnt;
              if (typeof headers[i6] === "number")
                headers[i6] = headers[i6].toString(10);
              if (typeof headers[i6] !== "string")
                throw new Error("DBF Invalid column name " + headers[i6] + " |" + typeof headers[i6] + "|");
              if (headers.indexOf(headers[i6]) !== i6) {
                for (j3 = 0; j3 < 1024; ++j3)
                  if (headers.indexOf(headers[i6] + "_" + j3) == -1) {
                    headers[i6] += "_" + j3;
                    break;
                  }
              }
            }
            var range = safe_decode_range(ws["!ref"]);
            var coltypes = [];
            var colwidths = [];
            var coldecimals = [];
            for (i6 = 0; i6 <= range.e.c - range.s.c; ++i6) {
              var guess = "", _guess = "", maxlen = 0;
              var col = [];
              for (j3 = 0; j3 < data.length; ++j3) {
                if (data[j3][i6] != null)
                  col.push(data[j3][i6]);
              }
              if (col.length == 0 || headers[i6] == null) {
                coltypes[i6] = "?";
                continue;
              }
              for (j3 = 0; j3 < col.length; ++j3) {
                switch (typeof col[j3]) {
                  case "number":
                    _guess = "B";
                    break;
                  case "string":
                    _guess = "C";
                    break;
                  case "boolean":
                    _guess = "L";
                    break;
                  case "object":
                    _guess = col[j3] instanceof Date ? "D" : "C";
                    break;
                  default:
                    _guess = "C";
                }
                maxlen = Math.max(maxlen, (typeof $cptable !== "undefined" && typeof col[j3] == "string" ? $cptable.utils.encode(current_ansi, col[j3]) : String(col[j3])).length);
                guess = guess && guess != _guess ? "C" : _guess;
              }
              if (maxlen > 250)
                maxlen = 250;
              _guess = ((cols[i6] || {}).DBF || {}).type;
              if (_guess == "C") {
                if (cols[i6].DBF.len > maxlen)
                  maxlen = cols[i6].DBF.len;
              }
              if (guess == "B" && _guess == "N") {
                guess = "N";
                coldecimals[i6] = cols[i6].DBF.dec;
                maxlen = cols[i6].DBF.len;
              }
              colwidths[i6] = guess == "C" || _guess == "N" ? maxlen : _RLEN[guess] || 0;
              rlen += colwidths[i6];
              coltypes[i6] = guess;
            }
            var h = ba.next(32);
            h.write_shift(4, 318902576);
            h.write_shift(4, data.length);
            h.write_shift(2, 296 + 32 * hcnt);
            h.write_shift(2, rlen);
            for (i6 = 0; i6 < 4; ++i6)
              h.write_shift(4, 0);
            var cp = +dbf_reverse_map[current_codepage] || 3;
            h.write_shift(4, 0 | cp << 8);
            if (dbf_codepage_map[cp] != +o6.codepage) {
              if (o6.codepage)
                console.error("DBF Unsupported codepage " + current_codepage + ", using 1252");
              current_codepage = 1252;
            }
            for (i6 = 0, j3 = 0; i6 < headers.length; ++i6) {
              if (headers[i6] == null)
                continue;
              var hf = ba.next(32);
              var _f = (headers[i6].slice(-10) + "\0\0\0\0\0\0\0\0\0\0\0").slice(0, 11);
              hf.write_shift(1, _f, "sbcs");
              hf.write_shift(1, coltypes[i6] == "?" ? "C" : coltypes[i6], "sbcs");
              hf.write_shift(4, j3);
              hf.write_shift(1, colwidths[i6] || _RLEN[coltypes[i6]] || 0);
              hf.write_shift(1, coldecimals[i6] || 0);
              hf.write_shift(1, 2);
              hf.write_shift(4, 0);
              hf.write_shift(1, 0);
              hf.write_shift(4, 0);
              hf.write_shift(4, 0);
              j3 += colwidths[i6] || _RLEN[coltypes[i6]] || 0;
            }
            var hb = ba.next(264);
            hb.write_shift(4, 13);
            for (i6 = 0; i6 < 65; ++i6)
              hb.write_shift(4, 0);
            for (i6 = 0; i6 < data.length; ++i6) {
              var rout = ba.next(rlen);
              rout.write_shift(1, 0);
              for (j3 = 0; j3 < headers.length; ++j3) {
                if (headers[j3] == null)
                  continue;
                switch (coltypes[j3]) {
                  case "L":
                    rout.write_shift(1, data[i6][j3] == null ? 63 : data[i6][j3] ? 84 : 70);
                    break;
                  case "B":
                    rout.write_shift(8, data[i6][j3] || 0, "f");
                    break;
                  case "N":
                    var _n2 = "0";
                    if (typeof data[i6][j3] == "number")
                      _n2 = data[i6][j3].toFixed(coldecimals[j3] || 0);
                    if (_n2.length > colwidths[j3])
                      _n2 = _n2.slice(0, colwidths[j3]);
                    for (hcnt = 0; hcnt < colwidths[j3] - _n2.length; ++hcnt)
                      rout.write_shift(1, 32);
                    rout.write_shift(1, _n2, "sbcs");
                    break;
                  case "D":
                    if (!data[i6][j3])
                      rout.write_shift(8, "00000000", "sbcs");
                    else {
                      rout.write_shift(4, ("0000" + data[i6][j3].getFullYear()).slice(-4), "sbcs");
                      rout.write_shift(2, ("00" + (data[i6][j3].getMonth() + 1)).slice(-2), "sbcs");
                      rout.write_shift(2, ("00" + data[i6][j3].getDate()).slice(-2), "sbcs");
                    }
                    break;
                  case "C":
                    var _l = rout.l;
                    var _s = String(data[i6][j3] != null ? data[i6][j3] : "").slice(0, colwidths[j3]);
                    rout.write_shift(1, _s, "cpstr");
                    _l += colwidths[j3] - rout.l;
                    for (hcnt = 0; hcnt < _l; ++hcnt)
                      rout.write_shift(1, 32);
                    break;
                }
              }
            }
            current_codepage = old_cp;
            ba.next(1).write_shift(1, 26);
            return ba.end();
          }
          return {
            to_workbook: dbf_to_workbook,
            to_sheet: dbf_to_sheet,
            from_sheet: sheet_to_dbf
          };
        }();
        var SYLK = function() {
          var sylk_escapes = {
            AA: "\xC0",
            BA: "\xC1",
            CA: "\xC2",
            DA: 195,
            HA: "\xC4",
            JA: 197,
            AE: "\xC8",
            BE: "\xC9",
            CE: "\xCA",
            HE: "\xCB",
            AI: "\xCC",
            BI: "\xCD",
            CI: "\xCE",
            HI: "\xCF",
            AO: "\xD2",
            BO: "\xD3",
            CO: "\xD4",
            DO: 213,
            HO: "\xD6",
            AU: "\xD9",
            BU: "\xDA",
            CU: "\xDB",
            HU: "\xDC",
            Aa: "\xE0",
            Ba: "\xE1",
            Ca: "\xE2",
            Da: 227,
            Ha: "\xE4",
            Ja: 229,
            Ae: "\xE8",
            Be: "\xE9",
            Ce: "\xEA",
            He: "\xEB",
            Ai: "\xEC",
            Bi: "\xED",
            Ci: "\xEE",
            Hi: "\xEF",
            Ao: "\xF2",
            Bo: "\xF3",
            Co: "\xF4",
            Do: 245,
            Ho: "\xF6",
            Au: "\xF9",
            Bu: "\xFA",
            Cu: "\xFB",
            Hu: "\xFC",
            KC: "\xC7",
            Kc: "\xE7",
            q: "\xE6",
            z: "\u0153",
            a: "\xC6",
            j: "\u0152",
            DN: 209,
            Dn: 241,
            Hy: 255,
            S: 169,
            c: 170,
            R: 174,
            "B ": 180,
            0: 176,
            1: 177,
            2: 178,
            3: 179,
            5: 181,
            6: 182,
            7: 183,
            Q: 185,
            k: 186,
            b: 208,
            i: 216,
            l: 222,
            s: 240,
            y: 248,
            "!": 161,
            '"': 162,
            "#": 163,
            "(": 164,
            "%": 165,
            "'": 167,
            "H ": 168,
            "+": 171,
            ";": 187,
            "<": 188,
            "=": 189,
            ">": 190,
            "?": 191,
            "{": 223
          };
          var sylk_char_regex = new RegExp("\x1BN(" + keys(sylk_escapes).join("|").replace(/\|\|\|/, "|\\||").replace(/([?()+])/g, "\\$1").replace("{", "\\{") + "|\\|)", "gm");
          try {
            sylk_char_regex = new RegExp("\x1BN(" + keys(sylk_escapes).join("|").replace(/\|\|\|/, "|\\||").replace(/([?()+])/g, "\\$1") + "|\\|)", "gm");
          } catch (e7) {
          }
          var sylk_char_fn = function(_2, $1) {
            var o6 = sylk_escapes[$1];
            return typeof o6 == "number" ? _getansi(o6) : o6;
          };
          var decode_sylk_char = function($$, $1, $22) {
            var newcc = $1.charCodeAt(0) - 32 << 4 | $22.charCodeAt(0) - 48;
            return newcc == 59 ? $$ : _getansi(newcc);
          };
          sylk_escapes["|"] = 254;
          var encode_sylk_str = function($$) {
            return $$.replace(/\n/g, "\x1B :").replace(/\r/g, "\x1B =");
          };
          function sylk_to_aoa(d2, opts) {
            switch (opts.type) {
              case "base64":
                return sylk_to_aoa_str(Base64_decode(d2), opts);
              case "binary":
                return sylk_to_aoa_str(d2, opts);
              case "buffer":
                return sylk_to_aoa_str(has_buf && Buffer.isBuffer(d2) ? d2.toString("binary") : a2s(d2), opts);
              case "array":
                return sylk_to_aoa_str(cc2str(d2), opts);
            }
            throw new Error("Unrecognized type " + opts.type);
          }
          function sylk_to_aoa_str(str, opts) {
            var records = str.split(/[\n\r]+/), R2 = -1, C6 = -1, ri = 0, rj = 0, arr = [];
            var formats = [];
            var next_cell_format = null;
            var sht = {}, rowinfo = [], colinfo = [], cw = [];
            var Mval = 0, j3;
            var wb = { Workbook: { WBProps: {}, Names: [] } };
            if (+opts.codepage >= 0)
              set_cp(+opts.codepage);
            for (; ri !== records.length; ++ri) {
              Mval = 0;
              var rstr = records[ri].trim().replace(/\x1B([\x20-\x2F])([\x30-\x3F])/g, decode_sylk_char).replace(sylk_char_regex, sylk_char_fn);
              var record = rstr.replace(/;;/g, "\0").split(";").map(function(x3) {
                return x3.replace(/\u0000/g, ";");
              });
              var RT = record[0], val2;
              if (rstr.length > 0)
                switch (RT) {
                  case "ID":
                    break;
                  case "E":
                    break;
                  case "B":
                    break;
                  case "O":
                    for (rj = 1; rj < record.length; ++rj)
                      switch (record[rj].charAt(0)) {
                        case "V":
                          {
                            var d1904 = parseInt(record[rj].slice(1), 10);
                            if (d1904 >= 1 && d1904 <= 4)
                              wb.Workbook.WBProps.date1904 = true;
                          }
                          break;
                      }
                    break;
                  case "W":
                    break;
                  case "P":
                    switch (record[1].charAt(0)) {
                      case "P":
                        formats.push(rstr.slice(3).replace(/;;/g, ";"));
                        break;
                    }
                    break;
                  case "NN":
                    {
                      var nn2 = { Sheet: 0 };
                      for (rj = 1; rj < record.length; ++rj)
                        switch (record[rj].charAt(0)) {
                          case "N":
                            nn2.Name = record[rj].slice(1);
                            break;
                          case "E":
                            nn2.Ref = (opts && opts.sheet || "Sheet1") + "!" + rc_to_a1(record[rj].slice(1));
                            break;
                        }
                      wb.Workbook.Names.push(nn2);
                    }
                    break;
                  case "C":
                    var C_seen_K = false, C_seen_X = false, C_seen_S = false, C_seen_E = false, _R = -1, _C = -1, formula = "", cell_t = "z";
                    var cmnt = "";
                    for (rj = 1; rj < record.length; ++rj)
                      switch (record[rj].charAt(0)) {
                        case "A":
                          cmnt = record[rj].slice(1);
                          break;
                        case "X":
                          C6 = parseInt(record[rj].slice(1), 10) - 1;
                          C_seen_X = true;
                          break;
                        case "Y":
                          R2 = parseInt(record[rj].slice(1), 10) - 1;
                          if (!C_seen_X)
                            C6 = 0;
                          for (j3 = arr.length; j3 <= R2; ++j3)
                            arr[j3] = [];
                          break;
                        case "K":
                          val2 = record[rj].slice(1);
                          if (val2.charAt(0) === '"') {
                            val2 = val2.slice(1, val2.length - 1);
                            cell_t = "s";
                          } else if (val2 === "TRUE" || val2 === "FALSE") {
                            val2 = val2 === "TRUE";
                            cell_t = "b";
                          } else if (val2.charAt(0) == "#" && RBErr[val2] != null) {
                            cell_t = "e";
                            val2 = RBErr[val2];
                          } else if (!isNaN(fuzzynum(val2))) {
                            val2 = fuzzynum(val2);
                            cell_t = "n";
                            if (next_cell_format !== null && fmt_is_date(next_cell_format) && opts.cellDates) {
                              val2 = numdate(wb.Workbook.WBProps.date1904 ? val2 + 1462 : val2);
                              cell_t = typeof val2 == "number" ? "n" : "d";
                            }
                          }
                          if (typeof $cptable !== "undefined" && typeof val2 == "string" && (opts || {}).type != "string" && (opts || {}).codepage)
                            val2 = $cptable.utils.decode(opts.codepage, val2);
                          C_seen_K = true;
                          break;
                        case "E":
                          C_seen_E = true;
                          formula = rc_to_a1(record[rj].slice(1), { r: R2, c: C6 });
                          break;
                        case "S":
                          C_seen_S = true;
                          break;
                        case "G":
                          break;
                        case "R":
                          _R = parseInt(record[rj].slice(1), 10) - 1;
                          break;
                        case "C":
                          _C = parseInt(record[rj].slice(1), 10) - 1;
                          break;
                        default:
                          if (opts && opts.WTF)
                            throw new Error("SYLK bad record " + rstr);
                      }
                    if (C_seen_K) {
                      if (!arr[R2][C6])
                        arr[R2][C6] = { t: cell_t, v: val2 };
                      else {
                        arr[R2][C6].t = cell_t;
                        arr[R2][C6].v = val2;
                      }
                      if (next_cell_format)
                        arr[R2][C6].z = next_cell_format;
                      if (opts.cellText !== false && next_cell_format)
                        arr[R2][C6].w = SSF_format(arr[R2][C6].z, arr[R2][C6].v, { date1904: wb.Workbook.WBProps.date1904 });
                      next_cell_format = null;
                    }
                    if (C_seen_S) {
                      if (C_seen_E)
                        throw new Error("SYLK shared formula cannot have own formula");
                      var shrbase = _R > -1 && arr[_R][_C];
                      if (!shrbase || !shrbase[1])
                        throw new Error("SYLK shared formula cannot find base");
                      formula = shift_formula_str(shrbase[1], { r: R2 - _R, c: C6 - _C });
                    }
                    if (formula) {
                      if (!arr[R2][C6])
                        arr[R2][C6] = { t: "n", f: formula };
                      else
                        arr[R2][C6].f = formula;
                    }
                    if (cmnt) {
                      if (!arr[R2][C6])
                        arr[R2][C6] = { t: "z" };
                      arr[R2][C6].c = [{ a: "SheetJSYLK", t: cmnt }];
                    }
                    break;
                  case "F":
                    var F_seen = 0;
                    for (rj = 1; rj < record.length; ++rj)
                      switch (record[rj].charAt(0)) {
                        case "X":
                          C6 = parseInt(record[rj].slice(1), 10) - 1;
                          ++F_seen;
                          break;
                        case "Y":
                          R2 = parseInt(record[rj].slice(1), 10) - 1;
                          for (j3 = arr.length; j3 <= R2; ++j3)
                            arr[j3] = [];
                          break;
                        case "M":
                          Mval = parseInt(record[rj].slice(1), 10) / 20;
                          break;
                        case "F":
                          break;
                        case "G":
                          break;
                        case "P":
                          next_cell_format = formats[parseInt(record[rj].slice(1), 10)];
                          break;
                        case "S":
                          break;
                        case "D":
                          break;
                        case "N":
                          break;
                        case "W":
                          cw = record[rj].slice(1).split(" ");
                          for (j3 = parseInt(cw[0], 10); j3 <= parseInt(cw[1], 10); ++j3) {
                            Mval = parseInt(cw[2], 10);
                            colinfo[j3 - 1] = Mval === 0 ? { hidden: true } : { wch: Mval };
                          }
                          break;
                        case "C":
                          C6 = parseInt(record[rj].slice(1), 10) - 1;
                          if (!colinfo[C6])
                            colinfo[C6] = {};
                          break;
                        case "R":
                          R2 = parseInt(record[rj].slice(1), 10) - 1;
                          if (!rowinfo[R2])
                            rowinfo[R2] = {};
                          if (Mval > 0) {
                            rowinfo[R2].hpt = Mval;
                            rowinfo[R2].hpx = pt2px(Mval);
                          } else if (Mval === 0)
                            rowinfo[R2].hidden = true;
                          break;
                        default:
                          if (opts && opts.WTF)
                            throw new Error("SYLK bad record " + rstr);
                      }
                    if (F_seen < 1)
                      next_cell_format = null;
                    break;
                  default:
                    if (opts && opts.WTF)
                      throw new Error("SYLK bad record " + rstr);
                }
            }
            if (rowinfo.length > 0)
              sht["!rows"] = rowinfo;
            if (colinfo.length > 0)
              sht["!cols"] = colinfo;
            colinfo.forEach(function(col) {
              process_col(col);
            });
            if (opts && opts.sheetRows)
              arr = arr.slice(0, opts.sheetRows);
            return [arr, sht, wb];
          }
          function sylk_to_workbook(d2, opts) {
            var aoasht = sylk_to_aoa(d2, opts);
            var aoa = aoasht[0], ws = aoasht[1], wb = aoasht[2];
            var _opts = dup(opts);
            _opts.date1904 = (((wb || {}).Workbook || {}).WBProps || {}).date1904;
            var o6 = aoa_to_sheet(aoa, _opts);
            keys(ws).forEach(function(k2) {
              o6[k2] = ws[k2];
            });
            var outwb = sheet_to_workbook(o6, opts);
            keys(wb).forEach(function(k2) {
              outwb[k2] = wb[k2];
            });
            outwb.bookType = "sylk";
            return outwb;
          }
          function write_ws_cell_sylk(cell, ws, R2, C6, opts, date1904) {
            var o6 = "C;Y" + (R2 + 1) + ";X" + (C6 + 1) + ";K";
            switch (cell.t) {
              case "n":
                o6 += isFinite(cell.v) ? cell.v || 0 : BErr[isNaN(cell.v) ? 36 : 7];
                if (cell.f && !cell.F)
                  o6 += ";E" + a1_to_rc(cell.f, { r: R2, c: C6 });
                break;
              case "b":
                o6 += cell.v ? "TRUE" : "FALSE";
                break;
              case "e":
                o6 += cell.w || BErr[cell.v] || cell.v;
                break;
              case "d":
                o6 += datenum(parseDate(cell.v, date1904), date1904);
                break;
              case "s":
                o6 += '"' + (cell.v == null ? "" : String(cell.v)).replace(/"/g, "").replace(/;/g, ";;") + '"';
                break;
            }
            return o6;
          }
          function write_ws_cmnt_sylk(cmnt, R2, C6) {
            var o6 = "C;Y" + (R2 + 1) + ";X" + (C6 + 1) + ";A";
            o6 += encode_sylk_str(cmnt.map(function(c8) {
              return c8.t;
            }).join(""));
            return o6;
          }
          function write_ws_cols_sylk(out, cols) {
            cols.forEach(function(col, i6) {
              var rec = "F;W" + (i6 + 1) + " " + (i6 + 1) + " ";
              if (col.hidden)
                rec += "0";
              else {
                if (typeof col.width == "number" && !col.wpx)
                  col.wpx = width2px(col.width);
                if (typeof col.wpx == "number" && !col.wch)
                  col.wch = px2char(col.wpx);
                if (typeof col.wch == "number")
                  rec += Math.round(col.wch);
              }
              if (rec.charAt(rec.length - 1) != " ")
                out.push(rec);
            });
          }
          function write_ws_rows_sylk(out, rows) {
            rows.forEach(function(row, i6) {
              var rec = "F;";
              if (row.hidden)
                rec += "M0;";
              else if (row.hpt)
                rec += "M" + 20 * row.hpt + ";";
              else if (row.hpx)
                rec += "M" + 20 * px2pt(row.hpx) + ";";
              if (rec.length > 2)
                out.push(rec + "R" + (i6 + 1));
            });
          }
          function sheet_to_sylk(ws, opts, wb) {
            if (!opts)
              opts = {};
            opts._formats = ["General"];
            var preamble = ["ID;PSheetJS;N;E"], o6 = [];
            var r6 = safe_decode_range(ws["!ref"] || "A1"), cell;
            var dense = ws["!data"] != null;
            var RS = "\r\n";
            var d1904 = (((wb || {}).Workbook || {}).WBProps || {}).date1904;
            var _lastfmt = "General";
            preamble.push("P;PGeneral");
            var R2 = r6.s.r, C6 = r6.s.c, p2 = [];
            if (ws["!ref"])
              for (R2 = r6.s.r; R2 <= r6.e.r; ++R2) {
                if (dense && !ws["!data"][R2])
                  continue;
                p2 = [];
                for (C6 = r6.s.c; C6 <= r6.e.c; ++C6) {
                  cell = dense ? ws["!data"][R2][C6] : ws[encode_col(C6) + encode_row(R2)];
                  if (!cell || !cell.c)
                    continue;
                  p2.push(write_ws_cmnt_sylk(cell.c, R2, C6));
                }
                if (p2.length)
                  o6.push(p2.join(RS));
              }
            if (ws["!ref"])
              for (R2 = r6.s.r; R2 <= r6.e.r; ++R2) {
                if (dense && !ws["!data"][R2])
                  continue;
                p2 = [];
                for (C6 = r6.s.c; C6 <= r6.e.c; ++C6) {
                  cell = dense ? ws["!data"][R2][C6] : ws[encode_col(C6) + encode_row(R2)];
                  if (!cell || cell.v == null && (!cell.f || cell.F))
                    continue;
                  if ((cell.z || (cell.t == "d" ? table_fmt[14] : "General")) != _lastfmt) {
                    var ifmt = opts._formats.indexOf(cell.z);
                    if (ifmt == -1) {
                      opts._formats.push(cell.z);
                      ifmt = opts._formats.length - 1;
                      preamble.push("P;P" + cell.z.replace(/;/g, ";;"));
                    }
                    p2.push("F;P" + ifmt + ";Y" + (R2 + 1) + ";X" + (C6 + 1));
                  }
                  p2.push(write_ws_cell_sylk(cell, ws, R2, C6, opts, d1904));
                }
                o6.push(p2.join(RS));
              }
            preamble.push("F;P0;DG0G8;M255");
            if (ws["!cols"])
              write_ws_cols_sylk(preamble, ws["!cols"]);
            if (ws["!rows"])
              write_ws_rows_sylk(preamble, ws["!rows"]);
            if (ws["!ref"])
              preamble.push("B;Y" + (r6.e.r - r6.s.r + 1) + ";X" + (r6.e.c - r6.s.c + 1) + ";D" + [r6.s.c, r6.s.r, r6.e.c, r6.e.r].join(" "));
            preamble.push("O;L;D;B" + (d1904 ? ";V4" : "") + ";K47;G100 0.001");
            delete opts._formats;
            return preamble.join(RS) + RS + o6.join(RS) + RS + "E" + RS;
          }
          return {
            to_workbook: sylk_to_workbook,
            from_sheet: sheet_to_sylk
          };
        }();
        var DIF = function() {
          function dif_to_aoa(d2, opts) {
            switch (opts.type) {
              case "base64":
                return dif_to_aoa_str(Base64_decode(d2), opts);
              case "binary":
                return dif_to_aoa_str(d2, opts);
              case "buffer":
                return dif_to_aoa_str(has_buf && Buffer.isBuffer(d2) ? d2.toString("binary") : a2s(d2), opts);
              case "array":
                return dif_to_aoa_str(cc2str(d2), opts);
            }
            throw new Error("Unrecognized type " + opts.type);
          }
          function dif_to_aoa_str(str, opts) {
            var records = str.split("\n"), R2 = -1, C6 = -1, ri = 0, arr = [];
            for (; ri !== records.length; ++ri) {
              if (records[ri].trim() === "BOT") {
                arr[++R2] = [];
                C6 = 0;
                continue;
              }
              if (R2 < 0)
                continue;
              var metadata = records[ri].trim().split(",");
              var type = metadata[0], value = metadata[1];
              ++ri;
              var data = records[ri] || "";
              while ((data.match(/["]/g) || []).length & 1 && ri < records.length - 1)
                data += "\n" + records[++ri];
              data = data.trim();
              switch (+type) {
                case -1:
                  if (data === "BOT") {
                    arr[++R2] = [];
                    C6 = 0;
                    continue;
                  } else if (data !== "EOD")
                    throw new Error("Unrecognized DIF special command " + data);
                  break;
                case 0:
                  if (data === "TRUE")
                    arr[R2][C6] = true;
                  else if (data === "FALSE")
                    arr[R2][C6] = false;
                  else if (!isNaN(fuzzynum(value)))
                    arr[R2][C6] = fuzzynum(value);
                  else if (!isNaN(fuzzydate(value).getDate())) {
                    arr[R2][C6] = parseDate(value);
                    if (!(opts && opts.UTC)) {
                      arr[R2][C6] = utc_to_local(arr[R2][C6]);
                    }
                  } else
                    arr[R2][C6] = value;
                  ++C6;
                  break;
                case 1:
                  data = data.slice(1, data.length - 1);
                  data = data.replace(/""/g, '"');
                  if (DIF_XL && data && data.match(/^=".*"$/))
                    data = data.slice(2, -1);
                  arr[R2][C6++] = data !== "" ? data : null;
                  break;
              }
              if (data === "EOD")
                break;
            }
            if (opts && opts.sheetRows)
              arr = arr.slice(0, opts.sheetRows);
            return arr;
          }
          function dif_to_sheet(str, opts) {
            return aoa_to_sheet(dif_to_aoa(str, opts), opts);
          }
          function dif_to_workbook(str, opts) {
            var o6 = sheet_to_workbook(dif_to_sheet(str, opts), opts);
            o6.bookType = "dif";
            return o6;
          }
          function make_value(v4, s3) {
            return "0," + String(v4) + "\r\n" + s3;
          }
          function make_value_str(s3) {
            return '1,0\r\n"' + s3.replace(/"/g, '""') + '"';
          }
          function sheet_to_dif(ws) {
            var _DIF_XL = DIF_XL;
            if (!ws["!ref"])
              throw new Error("Cannot export empty sheet to DIF");
            var r6 = safe_decode_range(ws["!ref"]);
            var dense = ws["!data"] != null;
            var o6 = [
              'TABLE\r\n0,1\r\n"sheetjs"\r\n',
              "VECTORS\r\n0," + (r6.e.r - r6.s.r + 1) + '\r\n""\r\n',
              "TUPLES\r\n0," + (r6.e.c - r6.s.c + 1) + '\r\n""\r\n',
              'DATA\r\n0,0\r\n""\r\n'
            ];
            for (var R2 = r6.s.r; R2 <= r6.e.r; ++R2) {
              var row = dense ? ws["!data"][R2] : [];
              var p2 = "-1,0\r\nBOT\r\n";
              for (var C6 = r6.s.c; C6 <= r6.e.c; ++C6) {
                var cell = dense ? row && row[C6] : ws[encode_cell({ r: R2, c: C6 })];
                if (cell == null) {
                  p2 += '1,0\r\n""\r\n';
                  continue;
                }
                switch (cell.t) {
                  case "n":
                    if (_DIF_XL) {
                      if (cell.w != null)
                        p2 += "0," + cell.w + "\r\nV";
                      else if (cell.v != null)
                        p2 += make_value(cell.v, "V");
                      else if (cell.f != null && !cell.F)
                        p2 += make_value_str("=" + cell.f);
                      else
                        p2 += '1,0\r\n""';
                    } else {
                      if (cell.v == null)
                        p2 += '1,0\r\n""';
                      else
                        p2 += make_value(cell.v, "V");
                    }
                    break;
                  case "b":
                    p2 += cell.v ? make_value(1, "TRUE") : make_value(0, "FALSE");
                    break;
                  case "s":
                    p2 += make_value_str(!_DIF_XL || isNaN(+cell.v) ? cell.v : '="' + cell.v + '"');
                    break;
                  case "d":
                    if (!cell.w)
                      cell.w = SSF_format(cell.z || table_fmt[14], datenum(parseDate(cell.v)));
                    if (_DIF_XL)
                      p2 += make_value(cell.w, "V");
                    else
                      p2 += make_value_str(cell.w);
                    break;
                  default:
                    p2 += '1,0\r\n""';
                }
                p2 += "\r\n";
              }
              o6.push(p2);
            }
            return o6.join("") + "-1,0\r\nEOD";
          }
          return {
            to_workbook: dif_to_workbook,
            to_sheet: dif_to_sheet,
            from_sheet: sheet_to_dif
          };
        }();
        var ETH = function() {
          function decode(s3) {
            return s3.replace(/\\b/g, "\\").replace(/\\c/g, ":").replace(/\\n/g, "\n");
          }
          function encode(s3) {
            return s3.replace(/\\/g, "\\b").replace(/:/g, "\\c").replace(/\n/g, "\\n");
          }
          function eth_to_aoa(str, opts) {
            var records = str.split("\n"), R2 = -1, C6 = -1, ri = 0, arr = [];
            for (; ri !== records.length; ++ri) {
              var record = records[ri].trim().split(":");
              if (record[0] !== "cell")
                continue;
              var addr = decode_cell(record[1]);
              if (arr.length <= addr.r) {
                for (R2 = arr.length; R2 <= addr.r; ++R2)
                  if (!arr[R2])
                    arr[R2] = [];
              }
              R2 = addr.r;
              C6 = addr.c;
              switch (record[2]) {
                case "t":
                  arr[R2][C6] = decode(record[3]);
                  break;
                case "v":
                  arr[R2][C6] = +record[3];
                  break;
                case "vtf":
                  var _f = record[record.length - 1];
                case "vtc":
                  switch (record[3]) {
                    case "nl":
                      arr[R2][C6] = +record[4] ? true : false;
                      break;
                    default:
                      arr[R2][C6] = record[record.length - 1].charAt(0) == "#" ? { t: "e", v: RBErr[record[record.length - 1]] } : +record[4];
                      break;
                  }
                  if (record[2] == "vtf")
                    arr[R2][C6] = [arr[R2][C6], _f];
              }
            }
            if (opts && opts.sheetRows)
              arr = arr.slice(0, opts.sheetRows);
            return arr;
          }
          function eth_to_sheet(d2, opts) {
            return aoa_to_sheet(eth_to_aoa(d2, opts), opts);
          }
          function eth_to_workbook(d2, opts) {
            return sheet_to_workbook(eth_to_sheet(d2, opts), opts);
          }
          var header = [
            "socialcalc:version:1.5",
            "MIME-Version: 1.0",
            "Content-Type: multipart/mixed; boundary=SocialCalcSpreadsheetControlSave"
          ].join("\n");
          var sep = [
            "--SocialCalcSpreadsheetControlSave",
            "Content-type: text/plain; charset=UTF-8"
          ].join("\n") + "\n";
          var meta = [
            "# SocialCalc Spreadsheet Control Save",
            "part:sheet"
          ].join("\n");
          var end = "--SocialCalcSpreadsheetControlSave--";
          function sheet_to_eth_data(ws) {
            if (!ws || !ws["!ref"])
              return "";
            var o6 = [], oo = [], cell, coord = "";
            var r6 = decode_range(ws["!ref"]);
            var dense = ws["!data"] != null;
            for (var R2 = r6.s.r; R2 <= r6.e.r; ++R2) {
              for (var C6 = r6.s.c; C6 <= r6.e.c; ++C6) {
                coord = encode_cell({ r: R2, c: C6 });
                cell = dense ? (ws["!data"][R2] || [])[C6] : ws[coord];
                if (!cell || cell.v == null || cell.t === "z")
                  continue;
                oo = ["cell", coord, "t"];
                switch (cell.t) {
                  case "s":
                    oo.push(encode(cell.v));
                    break;
                  case "b":
                    oo[2] = "vt" + (cell.f ? "f" : "c");
                    oo[3] = "nl";
                    oo[4] = cell.v ? "1" : "0";
                    oo[5] = encode(cell.f || (cell.v ? "TRUE" : "FALSE"));
                    break;
                  case "d":
                    var t5 = datenum(parseDate(cell.v));
                    oo[2] = "vtc";
                    oo[3] = "nd";
                    oo[4] = "" + t5;
                    oo[5] = cell.w || SSF_format(cell.z || table_fmt[14], t5);
                    break;
                  case "n":
                    if (isFinite(cell.v)) {
                      if (!cell.f) {
                        oo[2] = "v";
                        oo[3] = cell.v;
                      } else {
                        oo[2] = "vtf";
                        oo[3] = "n";
                        oo[4] = cell.v;
                        oo[5] = encode(cell.f);
                      }
                    } else {
                      oo[2] = "vt" + (cell.f ? "f" : "c");
                      oo[3] = "e" + BErr[isNaN(cell.v) ? 36 : 7];
                      oo[4] = "0";
                      oo[5] = cell.f || oo[3].slice(1);
                      oo[6] = "e";
                      oo[7] = oo[3].slice(1);
                    }
                    break;
                  case "e":
                    continue;
                }
                o6.push(oo.join(":"));
              }
            }
            o6.push("sheet:c:" + (r6.e.c - r6.s.c + 1) + ":r:" + (r6.e.r - r6.s.r + 1) + ":tvf:1");
            o6.push("valueformat:1:text-wiki");
            return o6.join("\n");
          }
          function sheet_to_eth(ws) {
            return [header, sep, meta, sep, sheet_to_eth_data(ws), end].join("\n");
          }
          return {
            to_workbook: eth_to_workbook,
            to_sheet: eth_to_sheet,
            from_sheet: sheet_to_eth
          };
        }();
        var PRN = function() {
          function set_text_arr(data, arr, R2, C6, o6) {
            if (o6.raw)
              arr[R2][C6] = data;
            else if (data === "") {
            } else if (data === "TRUE")
              arr[R2][C6] = true;
            else if (data === "FALSE")
              arr[R2][C6] = false;
            else if (!isNaN(fuzzynum(data)))
              arr[R2][C6] = fuzzynum(data);
            else if (!isNaN(fuzzydate(data).getDate()))
              arr[R2][C6] = parseDate(data);
            else if (data.charCodeAt(0) == 35 && RBErr[data] != null)
              arr[R2][C6] = { t: "e", v: RBErr[data], w: data };
            else
              arr[R2][C6] = data;
          }
          function prn_to_aoa_str(f2, opts) {
            var o6 = opts || {};
            var arr = [];
            if (!f2 || f2.length === 0)
              return arr;
            var lines = f2.split(/[\r\n]/);
            var L2 = lines.length - 1;
            while (L2 >= 0 && lines[L2].length === 0)
              --L2;
            var start2 = 10, idx = 0;
            var R2 = 0;
            for (; R2 <= L2; ++R2) {
              idx = lines[R2].indexOf(" ");
              if (idx == -1)
                idx = lines[R2].length;
              else
                idx++;
              start2 = Math.max(start2, idx);
            }
            for (R2 = 0; R2 <= L2; ++R2) {
              arr[R2] = [];
              var C6 = 0;
              set_text_arr(lines[R2].slice(0, start2).trim(), arr, R2, C6, o6);
              for (C6 = 1; C6 <= (lines[R2].length - start2) / 10 + 1; ++C6)
                set_text_arr(lines[R2].slice(start2 + (C6 - 1) * 10, start2 + C6 * 10).trim(), arr, R2, C6, o6);
            }
            if (o6.sheetRows)
              arr = arr.slice(0, o6.sheetRows);
            return arr;
          }
          var guess_seps = {
            44: ",",
            9: "	",
            59: ";",
            124: "|"
          };
          var guess_sep_weights = {
            44: 3,
            9: 2,
            59: 1,
            124: 0
          };
          function guess_sep(str) {
            var cnt = {}, instr = false, end = 0, cc2 = 0;
            for (; end < str.length; ++end) {
              if ((cc2 = str.charCodeAt(end)) == 34)
                instr = !instr;
              else if (!instr && cc2 in guess_seps)
                cnt[cc2] = (cnt[cc2] || 0) + 1;
            }
            cc2 = [];
            for (end in cnt)
              if (Object.prototype.hasOwnProperty.call(cnt, end)) {
                cc2.push([cnt[end], end]);
              }
            if (!cc2.length) {
              cnt = guess_sep_weights;
              for (end in cnt)
                if (Object.prototype.hasOwnProperty.call(cnt, end)) {
                  cc2.push([cnt[end], end]);
                }
            }
            cc2.sort(function(a2, b3) {
              return a2[0] - b3[0] || guess_sep_weights[a2[1]] - guess_sep_weights[b3[1]];
            });
            return guess_seps[cc2.pop()[1]] || 44;
          }
          function dsv_to_sheet_str(str, opts) {
            var o6 = opts || {};
            var sep = "";
            if (DENSE != null && o6.dense == null)
              o6.dense = DENSE;
            var ws = {};
            if (o6.dense)
              ws["!data"] = [];
            var range = { s: { c: 0, r: 0 }, e: { c: 0, r: 0 } };
            if (str.slice(0, 4) == "sep=") {
              if (str.charCodeAt(5) == 13 && str.charCodeAt(6) == 10) {
                sep = str.charAt(4);
                str = str.slice(7);
              } else if (str.charCodeAt(5) == 13 || str.charCodeAt(5) == 10) {
                sep = str.charAt(4);
                str = str.slice(6);
              } else
                sep = guess_sep(str.slice(0, 1024));
            } else if (o6 && o6.FS)
              sep = o6.FS;
            else
              sep = guess_sep(str.slice(0, 1024));
            var R2 = 0, C6 = 0, v4 = 0;
            var start2 = 0, end = 0, sepcc = sep.charCodeAt(0), instr = false, cc2 = 0, startcc = str.charCodeAt(0);
            var _re = o6.dateNF != null ? dateNF_regex(o6.dateNF) : null;
            function finish_cell() {
              var s3 = str.slice(start2, end);
              if (s3.slice(-1) == "\r")
                s3 = s3.slice(0, -1);
              var cell = {};
              if (s3.charAt(0) == '"' && s3.charAt(s3.length - 1) == '"')
                s3 = s3.slice(1, -1).replace(/""/g, '"');
              if (o6.cellText !== false)
                cell.w = s3;
              if (s3.length === 0)
                cell.t = "z";
              else if (o6.raw) {
                cell.t = "s";
                cell.v = s3;
              } else if (s3.trim().length === 0) {
                cell.t = "s";
                cell.v = s3;
              } else if (s3.charCodeAt(0) == 61) {
                if (s3.charCodeAt(1) == 34 && s3.charCodeAt(s3.length - 1) == 34) {
                  cell.t = "s";
                  cell.v = s3.slice(2, -1).replace(/""/g, '"');
                } else if (fuzzyfmla(s3)) {
                  cell.t = "s";
                  cell.f = s3.slice(1);
                  cell.v = s3;
                } else {
                  cell.t = "s";
                  cell.v = s3;
                }
              } else if (s3 == "TRUE") {
                cell.t = "b";
                cell.v = true;
              } else if (s3 == "FALSE") {
                cell.t = "b";
                cell.v = false;
              } else if (!isNaN(v4 = fuzzynum(s3))) {
                cell.t = "n";
                cell.v = v4;
              } else if (!isNaN((v4 = fuzzydate(s3)).getDate()) || _re && s3.match(_re)) {
                cell.z = o6.dateNF || table_fmt[14];
                if (_re && s3.match(_re)) {
                  var news = dateNF_fix(s3, o6.dateNF, s3.match(_re) || []);
                  v4 = parseDate(news);
                  if (o6 && o6.UTC === false)
                    v4 = utc_to_local(v4);
                } else if (o6 && o6.UTC === false)
                  v4 = utc_to_local(v4);
                else if (o6.cellText !== false && o6.dateNF)
                  cell.w = SSF_format(cell.z, v4);
                if (o6.cellDates) {
                  cell.t = "d";
                  cell.v = v4;
                } else {
                  cell.t = "n";
                  cell.v = datenum(v4);
                }
                if (!o6.cellNF)
                  delete cell.z;
              } else if (s3.charCodeAt(0) == 35 && RBErr[s3] != null) {
                cell.t = "e";
                cell.w = s3;
                cell.v = RBErr[s3];
              } else {
                cell.t = "s";
                cell.v = s3;
              }
              if (cell.t == "z") {
              } else if (o6.dense) {
                if (!ws["!data"][R2])
                  ws["!data"][R2] = [];
                ws["!data"][R2][C6] = cell;
              } else
                ws[encode_cell({ c: C6, r: R2 })] = cell;
              start2 = end + 1;
              startcc = str.charCodeAt(start2);
              if (range.e.c < C6)
                range.e.c = C6;
              if (range.e.r < R2)
                range.e.r = R2;
              if (cc2 == sepcc)
                ++C6;
              else {
                C6 = 0;
                ++R2;
                if (o6.sheetRows && o6.sheetRows <= R2)
                  return true;
              }
            }
            outer:
              for (; end < str.length; ++end)
                switch (cc2 = str.charCodeAt(end)) {
                  case 34:
                    if (startcc === 34)
                      instr = !instr;
                    break;
                  case 13:
                    if (instr)
                      break;
                    if (str.charCodeAt(end + 1) == 10)
                      ++end;
                  case sepcc:
                  case 10:
                    if (!instr && finish_cell())
                      break outer;
                    break;
                  default:
                    break;
                }
            if (end - start2 > 0)
              finish_cell();
            ws["!ref"] = encode_range(range);
            return ws;
          }
          function prn_to_sheet_str(str, opts) {
            if (!(opts && opts.PRN))
              return dsv_to_sheet_str(str, opts);
            if (opts.FS)
              return dsv_to_sheet_str(str, opts);
            if (str.slice(0, 4) == "sep=")
              return dsv_to_sheet_str(str, opts);
            if (str.indexOf("	") >= 0 || str.indexOf(",") >= 0 || str.indexOf(";") >= 0)
              return dsv_to_sheet_str(str, opts);
            return aoa_to_sheet(prn_to_aoa_str(str, opts), opts);
          }
          function prn_to_sheet(d2, opts) {
            var str = "", bytes = opts.type == "string" ? [0, 0, 0, 0] : firstbyte(d2, opts);
            switch (opts.type) {
              case "base64":
                str = Base64_decode(d2);
                break;
              case "binary":
                str = d2;
                break;
              case "buffer":
                if (opts.codepage == 65001)
                  str = d2.toString("utf8");
                else if (opts.codepage && typeof $cptable !== "undefined")
                  str = $cptable.utils.decode(opts.codepage, d2);
                else
                  str = has_buf && Buffer.isBuffer(d2) ? d2.toString("binary") : a2s(d2);
                break;
              case "array":
                str = cc2str(d2);
                break;
              case "string":
                str = d2;
                break;
              default:
                throw new Error("Unrecognized type " + opts.type);
            }
            if (bytes[0] == 239 && bytes[1] == 187 && bytes[2] == 191)
              str = utf8read(str.slice(3));
            else if (opts.type != "string" && opts.type != "buffer" && opts.codepage == 65001)
              str = utf8read(str);
            else if (opts.type == "binary" && typeof $cptable !== "undefined" && opts.codepage)
              str = $cptable.utils.decode(opts.codepage, $cptable.utils.encode(28591, str));
            if (str.slice(0, 19) == "socialcalc:version:")
              return ETH.to_sheet(opts.type == "string" ? str : utf8read(str), opts);
            return prn_to_sheet_str(str, opts);
          }
          function prn_to_workbook(d2, opts) {
            return sheet_to_workbook(prn_to_sheet(d2, opts), opts);
          }
          function sheet_to_prn(ws) {
            var o6 = [];
            if (!ws["!ref"])
              return "";
            var r6 = safe_decode_range(ws["!ref"]), cell;
            var dense = ws["!data"] != null;
            for (var R2 = r6.s.r; R2 <= r6.e.r; ++R2) {
              var oo = [];
              for (var C6 = r6.s.c; C6 <= r6.e.c; ++C6) {
                var coord = encode_cell({ r: R2, c: C6 });
                cell = dense ? (ws["!data"][R2] || [])[C6] : ws[coord];
                if (!cell || cell.v == null) {
                  oo.push("          ");
                  continue;
                }
                var w3 = (cell.w || (format_cell(cell), cell.w) || "").slice(0, 10);
                while (w3.length < 10)
                  w3 += " ";
                oo.push(w3 + (C6 === 0 ? " " : ""));
              }
              o6.push(oo.join(""));
            }
            return o6.join("\n");
          }
          return {
            to_workbook: prn_to_workbook,
            to_sheet: prn_to_sheet,
            from_sheet: sheet_to_prn
          };
        }();
        function read_wb_ID(d2, opts) {
          var o6 = opts || {}, OLD_WTF = !!o6.WTF;
          o6.WTF = true;
          try {
            var out = SYLK.to_workbook(d2, o6);
            o6.WTF = OLD_WTF;
            return out;
          } catch (e7) {
            o6.WTF = OLD_WTF;
            if (e7.message.indexOf("SYLK bad record ID") == -1 && OLD_WTF)
              throw e7;
            return PRN.to_workbook(d2, opts);
          }
        }
        var WK_ = function() {
          function lotushopper(data, cb, opts) {
            if (!data)
              return;
            prep_blob(data, data.l || 0);
            var Enum = opts.Enum || WK1Enum;
            while (data.l < data.length) {
              var RT = data.read_shift(2);
              var R2 = Enum[RT] || Enum[65535];
              var length = data.read_shift(2);
              var tgt = data.l + length;
              var d2 = R2.f && R2.f(data, length, opts);
              data.l = tgt;
              if (cb(d2, R2, RT))
                return;
            }
          }
          function lotus_to_workbook(d2, opts) {
            switch (opts.type) {
              case "base64":
                return lotus_to_workbook_buf(s2a(Base64_decode(d2)), opts);
              case "binary":
                return lotus_to_workbook_buf(s2a(d2), opts);
              case "buffer":
              case "array":
                return lotus_to_workbook_buf(d2, opts);
            }
            throw "Unsupported type " + opts.type;
          }
          var LOTUS_DATE_FMTS = [
            "mmmm",
            "dd-mmm-yyyy",
            "dd-mmm",
            "mmm-yyyy",
            "@",
            "mm/dd",
            "hh:mm:ss AM/PM",
            "hh:mm AM/PM",
            "mm/dd/yyyy",
            "mm/dd",
            "hh:mm:ss",
            "hh:mm"
          ];
          function lotus_to_workbook_buf(d2, opts) {
            if (!d2)
              return d2;
            var o6 = opts || {};
            if (DENSE != null && o6.dense == null)
              o6.dense = DENSE;
            var s3 = {}, n6 = "Sheet1", next_n = "", sidx = 0;
            var sheets = {}, snames = [], realnames = [], sdata = [];
            if (o6.dense)
              sdata = s3["!data"] = [];
            var refguess = { s: { r: 0, c: 0 }, e: { r: 0, c: 0 } };
            var sheetRows = o6.sheetRows || 0;
            var lastcell = {};
            if (d2[4] == 81 && d2[5] == 80 && d2[6] == 87)
              return qpw_to_workbook_buf(d2, opts);
            if (d2[2] == 0) {
              if (d2[3] == 8 || d2[3] == 9) {
                if (d2.length >= 16 && d2[14] == 5 && d2[15] === 108)
                  throw new Error("Unsupported Works 3 for Mac file");
              }
            }
            if (d2[2] == 2) {
              o6.Enum = WK1Enum;
              lotushopper(d2, function(val2, R2, RT) {
                switch (RT) {
                  case 0:
                    o6.vers = val2;
                    if (val2 >= 4096)
                      o6.qpro = true;
                    break;
                  case 255:
                    o6.vers = val2;
                    o6.works = true;
                    break;
                  case 6:
                    refguess = val2;
                    break;
                  case 204:
                    if (val2)
                      next_n = val2;
                    break;
                  case 222:
                    next_n = val2;
                    break;
                  case 15:
                  case 51:
                    if ((!o6.qpro && !o6.works || RT == 51) && val2[1].v.charCodeAt(0) < 48)
                      val2[1].v = val2[1].v.slice(1);
                    if (o6.works || o6.works2)
                      val2[1].v = val2[1].v.replace(/\r\n/g, "\n");
                  case 13:
                  case 14:
                  case 16:
                    if ((val2[2] & 112) == 112 && (val2[2] & 15) > 1 && (val2[2] & 15) < 15) {
                      val2[1].z = o6.dateNF || LOTUS_DATE_FMTS[(val2[2] & 15) - 1] || table_fmt[14];
                      if (o6.cellDates) {
                        val2[1].v = numdate(val2[1].v);
                        val2[1].t = typeof val2[1].v == "number" ? "n" : "d";
                      }
                    }
                    if (o6.qpro) {
                      if (val2[3] > sidx) {
                        s3["!ref"] = encode_range(refguess);
                        sheets[n6] = s3;
                        snames.push(n6);
                        s3 = {};
                        if (o6.dense)
                          sdata = s3["!data"] = [];
                        refguess = { s: { r: 0, c: 0 }, e: { r: 0, c: 0 } };
                        sidx = val2[3];
                        n6 = next_n || "Sheet" + (sidx + 1);
                        next_n = "";
                      }
                    }
                    var tmpcell = o6.dense ? (sdata[val2[0].r] || [])[val2[0].c] : s3[encode_cell(val2[0])];
                    if (tmpcell) {
                      tmpcell.t = val2[1].t;
                      tmpcell.v = val2[1].v;
                      if (val2[1].z != null)
                        tmpcell.z = val2[1].z;
                      if (val2[1].f != null)
                        tmpcell.f = val2[1].f;
                      lastcell = tmpcell;
                      break;
                    }
                    if (o6.dense) {
                      if (!sdata[val2[0].r])
                        sdata[val2[0].r] = [];
                      sdata[val2[0].r][val2[0].c] = val2[1];
                    } else
                      s3[encode_cell(val2[0])] = val2[1];
                    lastcell = val2[1];
                    break;
                  case 21509:
                    o6.works2 = true;
                    break;
                  case 21506:
                    {
                      if (val2 == 5281) {
                        lastcell.z = "hh:mm:ss";
                        if (o6.cellDates && lastcell.t == "n") {
                          lastcell.v = numdate(lastcell.v);
                          lastcell.t = typeof lastcell.v == "number" ? "n" : "d";
                        }
                      }
                    }
                    break;
                }
              }, o6);
            } else if (d2[2] == 26 || d2[2] == 14) {
              o6.Enum = WK3Enum;
              if (d2[2] == 14) {
                o6.qpro = true;
                d2.l = 0;
              }
              lotushopper(d2, function(val2, R2, RT) {
                switch (RT) {
                  case 204:
                    n6 = val2;
                    break;
                  case 22:
                    if (val2[1].v.charCodeAt(0) < 48)
                      val2[1].v = val2[1].v.slice(1);
                    val2[1].v = val2[1].v.replace(/\x0F./g, function($$) {
                      return String.fromCharCode($$.charCodeAt(1) - 32);
                    }).replace(/\r\n/g, "\n");
                  case 23:
                  case 24:
                  case 25:
                  case 37:
                  case 39:
                  case 40:
                    if (val2[3] > sidx) {
                      s3["!ref"] = encode_range(refguess);
                      sheets[n6] = s3;
                      snames.push(n6);
                      s3 = {};
                      if (o6.dense)
                        sdata = s3["!data"] = [];
                      refguess = { s: { r: 0, c: 0 }, e: { r: 0, c: 0 } };
                      sidx = val2[3];
                      n6 = "Sheet" + (sidx + 1);
                    }
                    if (sheetRows > 0 && val2[0].r >= sheetRows)
                      break;
                    if (o6.dense) {
                      if (!sdata[val2[0].r])
                        sdata[val2[0].r] = [];
                      sdata[val2[0].r][val2[0].c] = val2[1];
                    } else
                      s3[encode_cell(val2[0])] = val2[1];
                    if (refguess.e.c < val2[0].c)
                      refguess.e.c = val2[0].c;
                    if (refguess.e.r < val2[0].r)
                      refguess.e.r = val2[0].r;
                    break;
                  case 27:
                    if (val2[14e3])
                      realnames[val2[14e3][0]] = val2[14e3][1];
                    break;
                  case 1537:
                    realnames[val2[0]] = val2[1];
                    if (val2[0] == sidx)
                      n6 = val2[1];
                    break;
                  default:
                    break;
                }
              }, o6);
            } else
              throw new Error("Unrecognized LOTUS BOF " + d2[2]);
            s3["!ref"] = encode_range(refguess);
            sheets[next_n || n6] = s3;
            snames.push(next_n || n6);
            if (!realnames.length)
              return { SheetNames: snames, Sheets: sheets };
            var osheets = {}, rnames = [];
            for (var i6 = 0; i6 < realnames.length; ++i6)
              if (sheets[snames[i6]]) {
                rnames.push(realnames[i6] || snames[i6]);
                osheets[realnames[i6]] = sheets[realnames[i6]] || sheets[snames[i6]];
              } else {
                rnames.push(realnames[i6]);
                osheets[realnames[i6]] = { "!ref": "A1" };
              }
            return { SheetNames: rnames, Sheets: osheets };
          }
          function sheet_to_wk1(ws, opts) {
            var o6 = opts || {};
            if (+o6.codepage >= 0)
              set_cp(+o6.codepage);
            if (o6.type == "string")
              throw new Error("Cannot write WK1 to JS string");
            var ba = buf_array();
            if (!ws["!ref"])
              throw new Error("Cannot export empty sheet to WK1");
            var range = safe_decode_range(ws["!ref"]);
            var dense = ws["!data"] != null;
            var cols = [];
            write_biff_rec(ba, 0, write_BOF_WK1(1030));
            write_biff_rec(ba, 6, write_RANGE(range));
            var max_R = Math.min(range.e.r, 8191);
            for (var C6 = range.s.c; C6 <= range.e.c; ++C6)
              cols[C6] = encode_col(C6);
            for (var R2 = range.s.r; R2 <= max_R; ++R2) {
              var rr = encode_row(R2);
              for (C6 = range.s.c; C6 <= range.e.c; ++C6) {
                var cell = dense ? (ws["!data"][R2] || [])[C6] : ws[cols[C6] + rr];
                if (!cell || cell.t == "z")
                  continue;
                switch (cell.t) {
                  case "n":
                    if ((cell.v | 0) == cell.v && cell.v >= -32768 && cell.v <= 32767)
                      write_biff_rec(ba, 13, write_INTEGER(R2, C6, cell));
                    else
                      write_biff_rec(ba, 14, write_NUMBER(R2, C6, cell));
                    break;
                  case "d":
                    var dc = datenum(cell.v);
                    if ((dc | 0) == dc && dc >= -32768 && dc <= 32767)
                      write_biff_rec(ba, 13, write_INTEGER(R2, C6, { t: "n", v: dc, z: cell.z || table_fmt[14] }));
                    else
                      write_biff_rec(ba, 14, write_NUMBER(R2, C6, { t: "n", v: dc, z: cell.z || table_fmt[14] }));
                    break;
                  default:
                    var str = format_cell(cell);
                    write_biff_rec(ba, 15, write_LABEL(R2, C6, str.slice(0, 239)));
                }
              }
            }
            write_biff_rec(ba, 1);
            return ba.end();
          }
          function book_to_wk3(wb, opts) {
            var o6 = opts || {};
            if (+o6.codepage >= 0)
              set_cp(+o6.codepage);
            if (o6.type == "string")
              throw new Error("Cannot write WK3 to JS string");
            var ba = buf_array();
            write_biff_rec(ba, 0, write_BOF_WK3(wb));
            for (var i6 = 0, cnt = 0; i6 < wb.SheetNames.length; ++i6)
              if ((wb.Sheets[wb.SheetNames[i6]] || {})["!ref"])
                write_biff_rec(ba, 27, write_XFORMAT_SHEETNAME(wb.SheetNames[i6], cnt++));
            var wsidx = 0;
            for (i6 = 0; i6 < wb.SheetNames.length; ++i6) {
              var ws = wb.Sheets[wb.SheetNames[i6]];
              if (!ws || !ws["!ref"])
                continue;
              var range = safe_decode_range(ws["!ref"]);
              var dense = ws["!data"] != null;
              var cols = [];
              var max_R = Math.min(range.e.r, 8191);
              for (var R2 = range.s.r; R2 <= max_R; ++R2) {
                var rr = encode_row(R2);
                for (var C6 = range.s.c; C6 <= range.e.c; ++C6) {
                  if (R2 === range.s.r)
                    cols[C6] = encode_col(C6);
                  var ref = cols[C6] + rr;
                  var cell = dense ? (ws["!data"][R2] || [])[C6] : ws[ref];
                  if (!cell || cell.t == "z")
                    continue;
                  if (cell.t == "n") {
                    write_biff_rec(ba, 23, write_NUMBER_17(R2, C6, wsidx, cell.v));
                  } else {
                    var str = format_cell(cell);
                    write_biff_rec(ba, 22, write_LABEL_16(R2, C6, wsidx, str.slice(0, 239)));
                  }
                }
              }
              ++wsidx;
            }
            write_biff_rec(ba, 1);
            return ba.end();
          }
          function write_BOF_WK1(v4) {
            var out = new_buf(2);
            out.write_shift(2, v4);
            return out;
          }
          function write_BOF_WK3(wb) {
            var out = new_buf(26);
            out.write_shift(2, 4096);
            out.write_shift(2, 4);
            out.write_shift(4, 0);
            var rows = 0, cols = 0, wscnt = 0;
            for (var i6 = 0; i6 < wb.SheetNames.length; ++i6) {
              var name = wb.SheetNames[i6];
              var ws = wb.Sheets[name];
              if (!ws || !ws["!ref"])
                continue;
              ++wscnt;
              var range = decode_range(ws["!ref"]);
              if (rows < range.e.r)
                rows = range.e.r;
              if (cols < range.e.c)
                cols = range.e.c;
            }
            if (rows > 8191)
              rows = 8191;
            out.write_shift(2, rows);
            out.write_shift(1, wscnt);
            out.write_shift(1, cols);
            out.write_shift(2, 0);
            out.write_shift(2, 0);
            out.write_shift(1, 1);
            out.write_shift(1, 2);
            out.write_shift(4, 0);
            out.write_shift(4, 0);
            return out;
          }
          function parse_RANGE(blob, length, opts) {
            var o6 = { s: { c: 0, r: 0 }, e: { c: 0, r: 0 } };
            if (length == 8 && opts.qpro) {
              o6.s.c = blob.read_shift(1);
              blob.l++;
              o6.s.r = blob.read_shift(2);
              o6.e.c = blob.read_shift(1);
              blob.l++;
              o6.e.r = blob.read_shift(2);
              return o6;
            }
            o6.s.c = blob.read_shift(2);
            o6.s.r = blob.read_shift(2);
            if (length == 12 && opts.qpro)
              blob.l += 2;
            o6.e.c = blob.read_shift(2);
            o6.e.r = blob.read_shift(2);
            if (length == 12 && opts.qpro)
              blob.l += 2;
            if (o6.s.c == 65535)
              o6.s.c = o6.e.c = o6.s.r = o6.e.r = 0;
            return o6;
          }
          function write_RANGE(range) {
            var out = new_buf(8);
            out.write_shift(2, range.s.c);
            out.write_shift(2, range.s.r);
            out.write_shift(2, range.e.c);
            out.write_shift(2, range.e.r);
            return out;
          }
          function parse_cell(blob, length, opts) {
            var o6 = [{ c: 0, r: 0 }, { t: "n", v: 0 }, 0, 0];
            if (opts.qpro && opts.vers != 20768) {
              o6[0].c = blob.read_shift(1);
              o6[3] = blob.read_shift(1);
              o6[0].r = blob.read_shift(2);
              blob.l += 2;
            } else if (opts.works) {
              o6[0].c = blob.read_shift(2);
              o6[0].r = blob.read_shift(2);
              o6[2] = blob.read_shift(2);
            } else {
              o6[2] = blob.read_shift(1);
              o6[0].c = blob.read_shift(2);
              o6[0].r = blob.read_shift(2);
            }
            return o6;
          }
          function get_wk1_fmt(cell) {
            if (cell.z && fmt_is_date(cell.z)) {
              return 240 | (LOTUS_DATE_FMTS.indexOf(cell.z) + 1 || 2);
            }
            return 255;
          }
          function parse_LABEL(blob, length, opts) {
            var tgt = blob.l + length;
            var o6 = parse_cell(blob, length, opts);
            o6[1].t = "s";
            if ((opts.vers & 65534) == 20768) {
              blob.l++;
              var len = blob.read_shift(1);
              o6[1].v = blob.read_shift(len, "utf8");
              return o6;
            }
            if (opts.qpro)
              blob.l++;
            o6[1].v = blob.read_shift(tgt - blob.l, "cstr");
            return o6;
          }
          function write_LABEL(R2, C6, s3) {
            var o6 = new_buf(7 + s3.length);
            o6.write_shift(1, 255);
            o6.write_shift(2, C6);
            o6.write_shift(2, R2);
            o6.write_shift(1, 39);
            for (var i6 = 0; i6 < o6.length; ++i6) {
              var cc2 = s3.charCodeAt(i6);
              o6.write_shift(1, cc2 >= 128 ? 95 : cc2);
            }
            o6.write_shift(1, 0);
            return o6;
          }
          function parse_STRING(blob, length, opts) {
            var tgt = blob.l + length;
            var o6 = parse_cell(blob, length, opts);
            o6[1].t = "s";
            if (opts.vers == 20768) {
              var len = blob.read_shift(1);
              o6[1].v = blob.read_shift(len, "utf8");
              return o6;
            }
            o6[1].v = blob.read_shift(tgt - blob.l, "cstr");
            return o6;
          }
          function parse_INTEGER(blob, length, opts) {
            var o6 = parse_cell(blob, length, opts);
            o6[1].v = blob.read_shift(2, "i");
            return o6;
          }
          function write_INTEGER(R2, C6, cell) {
            var o6 = new_buf(7);
            o6.write_shift(1, get_wk1_fmt(cell));
            o6.write_shift(2, C6);
            o6.write_shift(2, R2);
            o6.write_shift(2, cell.v, "i");
            return o6;
          }
          function parse_NUMBER(blob, length, opts) {
            var o6 = parse_cell(blob, length, opts);
            o6[1].v = blob.read_shift(8, "f");
            return o6;
          }
          function write_NUMBER(R2, C6, cell) {
            var o6 = new_buf(13);
            o6.write_shift(1, get_wk1_fmt(cell));
            o6.write_shift(2, C6);
            o6.write_shift(2, R2);
            o6.write_shift(8, cell.v, "f");
            return o6;
          }
          function parse_FORMULA(blob, length, opts) {
            var tgt = blob.l + length;
            var o6 = parse_cell(blob, length, opts);
            o6[1].v = blob.read_shift(8, "f");
            if (opts.qpro)
              blob.l = tgt;
            else {
              var flen = blob.read_shift(2);
              wk1_fmla_to_csf(blob.slice(blob.l, blob.l + flen), o6);
              blob.l += flen;
            }
            return o6;
          }
          function wk1_parse_rc(B5, V3, col) {
            var rel = V3 & 32768;
            V3 &= ~32768;
            V3 = (rel ? B5 : 0) + (V3 >= 8192 ? V3 - 16384 : V3);
            return (rel ? "" : "$") + (col ? encode_col(V3) : encode_row(V3));
          }
          var FuncTab = {
            31: ["NA", 0],
            33: ["ABS", 1],
            34: ["TRUNC", 1],
            35: ["SQRT", 1],
            36: ["LOG", 1],
            37: ["LN", 1],
            38: ["PI", 0],
            39: ["SIN", 1],
            40: ["COS", 1],
            41: ["TAN", 1],
            42: ["ATAN2", 2],
            43: ["ATAN", 1],
            44: ["ASIN", 1],
            45: ["ACOS", 1],
            46: ["EXP", 1],
            47: ["MOD", 2],
            49: ["ISNA", 1],
            50: ["ISERR", 1],
            51: ["FALSE", 0],
            52: ["TRUE", 0],
            53: ["RAND", 0],
            54: ["DATE", 3],
            63: ["ROUND", 2],
            64: ["TIME", 3],
            68: ["ISNUMBER", 1],
            69: ["ISTEXT", 1],
            70: ["LEN", 1],
            71: ["VALUE", 1],
            73: ["MID", 3],
            74: ["CHAR", 1],
            80: ["SUM", 69],
            81: ["AVERAGEA", 69],
            82: ["COUNTA", 69],
            83: ["MINA", 69],
            84: ["MAXA", 69],
            102: ["UPPER", 1],
            103: ["LOWER", 1],
            107: ["PROPER", 1],
            109: ["TRIM", 1],
            111: ["T", 1]
          };
          var BinOpTab = [
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "+",
            "-",
            "*",
            "/",
            "^",
            "=",
            "<>",
            "<=",
            ">=",
            "<",
            ">",
            "",
            "",
            "",
            "",
            "&",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
          ];
          function wk1_fmla_to_csf(blob, o6) {
            prep_blob(blob, 0);
            var out = [], argc = 0, R2 = "", C6 = "", argL = "", argR = "";
            while (blob.l < blob.length) {
              var cc2 = blob[blob.l++];
              switch (cc2) {
                case 0:
                  out.push(blob.read_shift(8, "f"));
                  break;
                case 1:
                  {
                    C6 = wk1_parse_rc(o6[0].c, blob.read_shift(2), true);
                    R2 = wk1_parse_rc(o6[0].r, blob.read_shift(2), false);
                    out.push(C6 + R2);
                  }
                  break;
                case 2:
                  {
                    var c8 = wk1_parse_rc(o6[0].c, blob.read_shift(2), true);
                    var r6 = wk1_parse_rc(o6[0].r, blob.read_shift(2), false);
                    C6 = wk1_parse_rc(o6[0].c, blob.read_shift(2), true);
                    R2 = wk1_parse_rc(o6[0].r, blob.read_shift(2), false);
                    out.push(c8 + r6 + ":" + C6 + R2);
                  }
                  break;
                case 3:
                  if (blob.l < blob.length) {
                    console.error("WK1 premature formula end");
                    return;
                  }
                  break;
                case 4:
                  out.push("(" + out.pop() + ")");
                  break;
                case 5:
                  out.push(blob.read_shift(2));
                  break;
                case 6:
                  {
                    var Z2 = "";
                    while (cc2 = blob[blob.l++])
                      Z2 += String.fromCharCode(cc2);
                    out.push('"' + Z2.replace(/"/g, '""') + '"');
                  }
                  break;
                case 8:
                  out.push("-" + out.pop());
                  break;
                case 23:
                  out.push("+" + out.pop());
                  break;
                case 22:
                  out.push("NOT(" + out.pop() + ")");
                  break;
                case 20:
                case 21:
                  {
                    argR = out.pop();
                    argL = out.pop();
                    out.push(["AND", "OR"][cc2 - 20] + "(" + argL + "," + argR + ")");
                  }
                  break;
                default:
                  if (cc2 < 32 && BinOpTab[cc2]) {
                    argR = out.pop();
                    argL = out.pop();
                    out.push(argL + BinOpTab[cc2] + argR);
                  } else if (FuncTab[cc2]) {
                    argc = FuncTab[cc2][1];
                    if (argc == 69)
                      argc = blob[blob.l++];
                    if (argc > out.length) {
                      console.error("WK1 bad formula parse 0x" + cc2.toString(16) + ":|" + out.join("|") + "|");
                      return;
                    }
                    var args = out.slice(-argc);
                    out.length -= argc;
                    out.push(FuncTab[cc2][0] + "(" + args.join(",") + ")");
                  } else if (cc2 <= 7)
                    return console.error("WK1 invalid opcode " + cc2.toString(16));
                  else if (cc2 <= 24)
                    return console.error("WK1 unsupported op " + cc2.toString(16));
                  else if (cc2 <= 30)
                    return console.error("WK1 invalid opcode " + cc2.toString(16));
                  else if (cc2 <= 115)
                    return console.error("WK1 unsupported function opcode " + cc2.toString(16));
                  else
                    return console.error("WK1 unrecognized opcode " + cc2.toString(16));
              }
            }
            if (out.length == 1)
              o6[1].f = "" + out[0];
            else
              console.error("WK1 bad formula parse |" + out.join("|") + "|");
          }
          function parse_cell_3(blob) {
            var o6 = [{ c: 0, r: 0 }, { t: "n", v: 0 }, 0];
            o6[0].r = blob.read_shift(2);
            o6[3] = blob[blob.l++];
            o6[0].c = blob[blob.l++];
            return o6;
          }
          function parse_LABEL_16(blob, length) {
            var o6 = parse_cell_3(blob, length);
            o6[1].t = "s";
            o6[1].v = blob.read_shift(length - 4, "cstr");
            return o6;
          }
          function write_LABEL_16(R2, C6, wsidx, s3) {
            var o6 = new_buf(6 + s3.length);
            o6.write_shift(2, R2);
            o6.write_shift(1, wsidx);
            o6.write_shift(1, C6);
            o6.write_shift(1, 39);
            for (var i6 = 0; i6 < s3.length; ++i6) {
              var cc2 = s3.charCodeAt(i6);
              o6.write_shift(1, cc2 >= 128 ? 95 : cc2);
            }
            o6.write_shift(1, 0);
            return o6;
          }
          function parse_NUMBER_18(blob, length) {
            var o6 = parse_cell_3(blob, length);
            o6[1].v = blob.read_shift(2);
            var v4 = o6[1].v >> 1;
            if (o6[1].v & 1) {
              switch (v4 & 7) {
                case 0:
                  v4 = (v4 >> 3) * 5e3;
                  break;
                case 1:
                  v4 = (v4 >> 3) * 500;
                  break;
                case 2:
                  v4 = (v4 >> 3) / 20;
                  break;
                case 3:
                  v4 = (v4 >> 3) / 200;
                  break;
                case 4:
                  v4 = (v4 >> 3) / 2e3;
                  break;
                case 5:
                  v4 = (v4 >> 3) / 2e4;
                  break;
                case 6:
                  v4 = (v4 >> 3) / 16;
                  break;
                case 7:
                  v4 = (v4 >> 3) / 64;
                  break;
              }
            }
            o6[1].v = v4;
            return o6;
          }
          function parse_NUMBER_17(blob, length) {
            var o6 = parse_cell_3(blob, length);
            var v1 = blob.read_shift(4);
            var v22 = blob.read_shift(4);
            var e7 = blob.read_shift(2);
            if (e7 == 65535) {
              if (v1 === 0 && v22 === 3221225472) {
                o6[1].t = "e";
                o6[1].v = 15;
              } else if (v1 === 0 && v22 === 3489660928) {
                o6[1].t = "e";
                o6[1].v = 42;
              } else
                o6[1].v = 0;
              return o6;
            }
            var s3 = e7 & 32768;
            e7 = (e7 & 32767) - 16446;
            o6[1].v = (1 - s3 * 2) * (v22 * Math.pow(2, e7 + 32) + v1 * Math.pow(2, e7));
            return o6;
          }
          function write_NUMBER_17(R2, C6, wsidx, v4) {
            var o6 = new_buf(14);
            o6.write_shift(2, R2);
            o6.write_shift(1, wsidx);
            o6.write_shift(1, C6);
            if (v4 == 0) {
              o6.write_shift(4, 0);
              o6.write_shift(4, 0);
              o6.write_shift(2, 65535);
              return o6;
            }
            var s3 = 0, e7 = 0, v1 = 0, v22 = 0;
            if (v4 < 0) {
              s3 = 1;
              v4 = -v4;
            }
            e7 = Math.log2(v4) | 0;
            v4 /= Math.pow(2, e7 - 31);
            v22 = v4 >>> 0;
            if ((v22 & 2147483648) == 0) {
              v4 /= 2;
              ++e7;
              v22 = v4 >>> 0;
            }
            v4 -= v22;
            v22 |= 2147483648;
            v22 >>>= 0;
            v4 *= Math.pow(2, 32);
            v1 = v4 >>> 0;
            o6.write_shift(4, v1);
            o6.write_shift(4, v22);
            e7 += 16383 + (s3 ? 32768 : 0);
            o6.write_shift(2, e7);
            return o6;
          }
          function parse_FORMULA_19(blob, length) {
            var o6 = parse_NUMBER_17(blob, 14);
            blob.l += length - 14;
            return o6;
          }
          function parse_NUMBER_25(blob, length) {
            var o6 = parse_cell_3(blob, length);
            var v1 = blob.read_shift(4);
            o6[1].v = v1 >> 6;
            return o6;
          }
          function parse_NUMBER_27(blob, length) {
            var o6 = parse_cell_3(blob, length);
            var v1 = blob.read_shift(8, "f");
            o6[1].v = v1;
            return o6;
          }
          function parse_FORMULA_28(blob, length) {
            var o6 = parse_NUMBER_27(blob, 12);
            blob.l += length - 12;
            return o6;
          }
          function parse_SHEETNAMECS(blob, length) {
            return blob[blob.l + length - 1] == 0 ? blob.read_shift(length, "cstr") : "";
          }
          function parse_SHEETNAMELP(blob, length) {
            var len = blob[blob.l++];
            if (len > length - 1)
              len = length - 1;
            var o6 = "";
            while (o6.length < len)
              o6 += String.fromCharCode(blob[blob.l++]);
            return o6;
          }
          function parse_SHEETINFOQP(blob, length, opts) {
            if (!opts.qpro || length < 21)
              return;
            var id = blob.read_shift(1);
            blob.l += 17;
            blob.l += 1;
            blob.l += 2;
            var nm = blob.read_shift(length - 21, "cstr");
            return [id, nm];
          }
          function parse_XFORMAT(blob, length) {
            var o6 = {}, tgt = blob.l + length;
            while (blob.l < tgt) {
              var dt2 = blob.read_shift(2);
              if (dt2 == 14e3) {
                o6[dt2] = [0, ""];
                o6[dt2][0] = blob.read_shift(2);
                while (blob[blob.l]) {
                  o6[dt2][1] += String.fromCharCode(blob[blob.l]);
                  blob.l++;
                }
                blob.l++;
              }
            }
            return o6;
          }
          function write_XFORMAT_SHEETNAME(name, wsidx) {
            var out = new_buf(5 + name.length);
            out.write_shift(2, 14e3);
            out.write_shift(2, wsidx);
            for (var i6 = 0; i6 < name.length; ++i6) {
              var cc2 = name.charCodeAt(i6);
              out[out.l++] = cc2 > 127 ? 95 : cc2;
            }
            out[out.l++] = 0;
            return out;
          }
          var WK1Enum = {
            0: { n: "BOF", f: parseuint16 },
            1: { n: "EOF" },
            2: { n: "CALCMODE" },
            3: { n: "CALCORDER" },
            4: { n: "SPLIT" },
            5: { n: "SYNC" },
            6: { n: "RANGE", f: parse_RANGE },
            7: { n: "WINDOW1" },
            8: { n: "COLW1" },
            9: { n: "WINTWO" },
            10: { n: "COLW2" },
            11: { n: "NAME" },
            12: { n: "BLANK" },
            13: { n: "INTEGER", f: parse_INTEGER },
            14: { n: "NUMBER", f: parse_NUMBER },
            15: { n: "LABEL", f: parse_LABEL },
            16: { n: "FORMULA", f: parse_FORMULA },
            24: { n: "TABLE" },
            25: { n: "ORANGE" },
            26: { n: "PRANGE" },
            27: { n: "SRANGE" },
            28: { n: "FRANGE" },
            29: { n: "KRANGE1" },
            32: { n: "HRANGE" },
            35: { n: "KRANGE2" },
            36: { n: "PROTEC" },
            37: { n: "FOOTER" },
            38: { n: "HEADER" },
            39: { n: "SETUP" },
            40: { n: "MARGINS" },
            41: { n: "LABELFMT" },
            42: { n: "TITLES" },
            43: { n: "SHEETJS" },
            45: { n: "GRAPH" },
            46: { n: "NGRAPH" },
            47: { n: "CALCCOUNT" },
            48: { n: "UNFORMATTED" },
            49: { n: "CURSORW12" },
            50: { n: "WINDOW" },
            51: { n: "STRING", f: parse_STRING },
            55: { n: "PASSWORD" },
            56: { n: "LOCKED" },
            60: { n: "QUERY" },
            61: { n: "QUERYNAME" },
            62: { n: "PRINT" },
            63: { n: "PRINTNAME" },
            64: { n: "GRAPH2" },
            65: { n: "GRAPHNAME" },
            66: { n: "ZOOM" },
            67: { n: "SYMSPLIT" },
            68: { n: "NSROWS" },
            69: { n: "NSCOLS" },
            70: { n: "RULER" },
            71: { n: "NNAME" },
            72: { n: "ACOMM" },
            73: { n: "AMACRO" },
            74: { n: "PARSE" },
            102: { n: "PRANGES??" },
            103: { n: "RRANGES??" },
            104: { n: "FNAME??" },
            105: { n: "MRANGES??" },
            204: { n: "SHEETNAMECS", f: parse_SHEETNAMECS },
            222: { n: "SHEETNAMELP", f: parse_SHEETNAMELP },
            255: { n: "BOF", f: parseuint16 },
            21506: { n: "WKSNF", f: parseuint16 },
            65535: { n: "" }
          };
          var WK3Enum = {
            0: { n: "BOF" },
            1: { n: "EOF" },
            2: { n: "PASSWORD" },
            3: { n: "CALCSET" },
            4: { n: "WINDOWSET" },
            5: { n: "SHEETCELLPTR" },
            6: { n: "SHEETLAYOUT" },
            7: { n: "COLUMNWIDTH" },
            8: { n: "HIDDENCOLUMN" },
            9: { n: "USERRANGE" },
            10: { n: "SYSTEMRANGE" },
            11: { n: "ZEROFORCE" },
            12: { n: "SORTKEYDIR" },
            13: { n: "FILESEAL" },
            14: { n: "DATAFILLNUMS" },
            15: { n: "PRINTMAIN" },
            16: { n: "PRINTSTRING" },
            17: { n: "GRAPHMAIN" },
            18: { n: "GRAPHSTRING" },
            19: { n: "??" },
            20: { n: "ERRCELL" },
            21: { n: "NACELL" },
            22: { n: "LABEL16", f: parse_LABEL_16 },
            23: { n: "NUMBER17", f: parse_NUMBER_17 },
            24: { n: "NUMBER18", f: parse_NUMBER_18 },
            25: { n: "FORMULA19", f: parse_FORMULA_19 },
            26: { n: "FORMULA1A" },
            27: { n: "XFORMAT", f: parse_XFORMAT },
            28: { n: "DTLABELMISC" },
            29: { n: "DTLABELCELL" },
            30: { n: "GRAPHWINDOW" },
            31: { n: "CPA" },
            32: { n: "LPLAUTO" },
            33: { n: "QUERY" },
            34: { n: "HIDDENSHEET" },
            35: { n: "??" },
            37: { n: "NUMBER25", f: parse_NUMBER_25 },
            38: { n: "??" },
            39: { n: "NUMBER27", f: parse_NUMBER_27 },
            40: { n: "FORMULA28", f: parse_FORMULA_28 },
            142: { n: "??" },
            147: { n: "??" },
            150: { n: "??" },
            151: { n: "??" },
            152: { n: "??" },
            153: { n: "??" },
            154: { n: "??" },
            155: { n: "??" },
            156: { n: "??" },
            163: { n: "??" },
            174: { n: "??" },
            175: { n: "??" },
            176: { n: "??" },
            177: { n: "??" },
            184: { n: "??" },
            185: { n: "??" },
            186: { n: "??" },
            187: { n: "??" },
            188: { n: "??" },
            195: { n: "??" },
            201: { n: "??" },
            204: { n: "SHEETNAMECS", f: parse_SHEETNAMECS },
            205: { n: "??" },
            206: { n: "??" },
            207: { n: "??" },
            208: { n: "??" },
            256: { n: "??" },
            259: { n: "??" },
            260: { n: "??" },
            261: { n: "??" },
            262: { n: "??" },
            263: { n: "??" },
            265: { n: "??" },
            266: { n: "??" },
            267: { n: "??" },
            268: { n: "??" },
            270: { n: "??" },
            271: { n: "??" },
            384: { n: "??" },
            389: { n: "??" },
            390: { n: "??" },
            393: { n: "??" },
            396: { n: "??" },
            512: { n: "??" },
            514: { n: "??" },
            513: { n: "??" },
            516: { n: "??" },
            517: { n: "??" },
            640: { n: "??" },
            641: { n: "??" },
            642: { n: "??" },
            643: { n: "??" },
            644: { n: "??" },
            645: { n: "??" },
            646: { n: "??" },
            647: { n: "??" },
            648: { n: "??" },
            658: { n: "??" },
            659: { n: "??" },
            660: { n: "??" },
            661: { n: "??" },
            662: { n: "??" },
            665: { n: "??" },
            666: { n: "??" },
            768: { n: "??" },
            772: { n: "??" },
            1537: { n: "SHEETINFOQP", f: parse_SHEETINFOQP },
            1600: { n: "??" },
            1602: { n: "??" },
            1793: { n: "??" },
            1794: { n: "??" },
            1795: { n: "??" },
            1796: { n: "??" },
            1920: { n: "??" },
            2048: { n: "??" },
            2049: { n: "??" },
            2052: { n: "??" },
            2688: { n: "??" },
            10998: { n: "??" },
            12849: { n: "??" },
            28233: { n: "??" },
            28484: { n: "??" },
            65535: { n: "" }
          };
          var QPWNFTable = {
            5: "dd-mmm-yy",
            6: "dd-mmm",
            7: "mmm-yy",
            8: "mm/dd/yy",
            10: "hh:mm:ss AM/PM",
            11: "hh:mm AM/PM",
            14: "dd-mmm-yyyy",
            15: "mmm-yyyy",
            34: "0.00",
            50: "0.00;[Red]0.00",
            66: "0.00;(0.00)",
            82: "0.00;[Red](0.00)",
            162: '"$"#,##0.00;\\("$"#,##0.00\\)',
            288: "0%",
            304: "0E+00",
            320: "# ?/?"
          };
          function parse_qpw_str(p2) {
            var cch = p2.read_shift(2);
            var flags = p2.read_shift(1);
            if (flags != 0)
              throw "unsupported QPW string type " + flags.toString(16);
            return p2.read_shift(cch, "sbcs-cont");
          }
          function qpw_to_workbook_buf(d2, opts) {
            prep_blob(d2, 0);
            var o6 = opts || {};
            if (DENSE != null && o6.dense == null)
              o6.dense = DENSE;
            var s3 = {};
            if (o6.dense)
              s3["!data"] = [];
            var SST = [], sname = "", formulae = [];
            var range = { s: { r: -1, c: -1 }, e: { r: -1, c: -1 } };
            var cnt = 0, type = 0, C6 = 0, R2 = 0;
            var wb = { SheetNames: [], Sheets: {} };
            var FMTS = [];
            outer:
              while (d2.l < d2.length) {
                var RT = d2.read_shift(2), length = d2.read_shift(2);
                var p2 = d2.slice(d2.l, d2.l + length);
                prep_blob(p2, 0);
                switch (RT) {
                  case 1:
                    if (p2.read_shift(4) != 962023505)
                      throw "Bad QPW9 BOF!";
                    break;
                  case 2:
                    break outer;
                  case 8:
                    break;
                  case 10:
                    {
                      var fcnt = p2.read_shift(4);
                      var step = (p2.length - p2.l) / fcnt | 0;
                      for (var ifmt = 0; ifmt < fcnt; ++ifmt) {
                        var end = p2.l + step;
                        var fmt = {};
                        p2.l += 2;
                        fmt.numFmtId = p2.read_shift(2);
                        if (QPWNFTable[fmt.numFmtId])
                          fmt.z = QPWNFTable[fmt.numFmtId];
                        p2.l = end;
                        FMTS.push(fmt);
                      }
                    }
                    break;
                  case 1025:
                    break;
                  case 1026:
                    break;
                  case 1031:
                    {
                      p2.l += 12;
                      while (p2.l < p2.length) {
                        cnt = p2.read_shift(2);
                        type = p2.read_shift(1);
                        SST.push(p2.read_shift(cnt, "cstr"));
                      }
                    }
                    break;
                  case 1032:
                    {
                    }
                    break;
                  case 1537:
                    {
                      var sidx = p2.read_shift(2);
                      s3 = {};
                      if (o6.dense)
                        s3["!data"] = [];
                      range.s.c = p2.read_shift(2);
                      range.e.c = p2.read_shift(2);
                      range.s.r = p2.read_shift(4);
                      range.e.r = p2.read_shift(4);
                      p2.l += 4;
                      if (p2.l + 2 < p2.length) {
                        cnt = p2.read_shift(2);
                        type = p2.read_shift(1);
                        sname = cnt == 0 ? "" : p2.read_shift(cnt, "cstr");
                      }
                      if (!sname)
                        sname = encode_col(sidx);
                    }
                    break;
                  case 1538:
                    {
                      if (range.s.c > 255 || range.s.r > 999999)
                        break;
                      if (range.e.c < range.s.c)
                        range.e.c = range.s.c;
                      if (range.e.r < range.s.r)
                        range.e.r = range.s.r;
                      s3["!ref"] = encode_range(range);
                      book_append_sheet(wb, s3, sname);
                    }
                    break;
                  case 2561:
                    {
                      C6 = p2.read_shift(2);
                      if (range.e.c < C6)
                        range.e.c = C6;
                      if (range.s.c > C6)
                        range.s.c = C6;
                      R2 = p2.read_shift(4);
                      if (range.s.r > R2)
                        range.s.r = R2;
                      R2 = p2.read_shift(4);
                      if (range.e.r < R2)
                        range.e.r = R2;
                    }
                    break;
                  case 3073:
                    {
                      R2 = p2.read_shift(4), cnt = p2.read_shift(4);
                      if (range.s.r > R2)
                        range.s.r = R2;
                      if (range.e.r < R2 + cnt - 1)
                        range.e.r = R2 + cnt - 1;
                      var CC = encode_col(C6);
                      while (p2.l < p2.length) {
                        var cell = { t: "z" };
                        var flags = p2.read_shift(1), fmtidx = -1;
                        if (flags & 128)
                          fmtidx = p2.read_shift(2);
                        var mul = flags & 64 ? p2.read_shift(2) - 1 : 0;
                        switch (flags & 31) {
                          case 0:
                            break;
                          case 1:
                            break;
                          case 2:
                            cell = { t: "n", v: p2.read_shift(2) };
                            break;
                          case 3:
                            cell = { t: "n", v: p2.read_shift(2, "i") };
                            break;
                          case 4:
                            cell = { t: "n", v: parse_RkNumber(p2) };
                            break;
                          case 5:
                            cell = { t: "n", v: p2.read_shift(8, "f") };
                            break;
                          case 7:
                            cell = { t: "s", v: SST[type = p2.read_shift(4) - 1] };
                            break;
                          case 8:
                            cell = { t: "n", v: p2.read_shift(8, "f") };
                            p2.l += 2;
                            p2.l += 4;
                            if (isNaN(cell.v))
                              cell = { t: "e", v: 15 };
                            break;
                          default:
                            throw "Unrecognized QPW cell type " + (flags & 31);
                        }
                        if (fmtidx != -1 && (FMTS[fmtidx - 1] || {}).z)
                          cell.z = FMTS[fmtidx - 1].z;
                        var delta = 0;
                        if (flags & 32)
                          switch (flags & 31) {
                            case 2:
                              delta = p2.read_shift(2);
                              break;
                            case 3:
                              delta = p2.read_shift(2, "i");
                              break;
                            case 7:
                              delta = p2.read_shift(2);
                              break;
                            default:
                              throw "Unsupported delta for QPW cell type " + (flags & 31);
                          }
                        if (!(!o6.sheetStubs && cell.t == "z")) {
                          var newcell = dup(cell);
                          if (cell.t == "n" && cell.z && fmt_is_date(cell.z) && o6.cellDates) {
                            newcell.v = numdate(cell.v);
                            newcell.t = typeof newcell.v == "number" ? "n" : "d";
                          }
                          if (s3["!data"] != null) {
                            if (!s3["!data"][R2])
                              s3["!data"][R2] = [];
                            s3["!data"][R2][C6] = newcell;
                          } else
                            s3[CC + encode_row(R2)] = newcell;
                        }
                        ++R2;
                        --cnt;
                        while (mul-- > 0 && cnt >= 0) {
                          if (flags & 32)
                            switch (flags & 31) {
                              case 2:
                                cell = { t: "n", v: cell.v + delta & 65535 };
                                break;
                              case 3:
                                cell = { t: "n", v: cell.v + delta & 65535 };
                                if (cell.v > 32767)
                                  cell.v -= 65536;
                                break;
                              case 7:
                                cell = { t: "s", v: SST[type = type + delta >>> 0] };
                                break;
                              default:
                                throw "Cannot apply delta for QPW cell type " + (flags & 31);
                            }
                          else
                            switch (flags & 31) {
                              case 1:
                                cell = { t: "z" };
                                break;
                              case 2:
                                cell = { t: "n", v: p2.read_shift(2) };
                                break;
                              case 7:
                                cell = { t: "s", v: SST[type = p2.read_shift(4) - 1] };
                                break;
                              default:
                                throw "Cannot apply repeat for QPW cell type " + (flags & 31);
                            }
                          if (fmtidx != -1)
                            ;
                          if (!(!o6.sheetStubs && cell.t == "z")) {
                            if (s3["!data"] != null) {
                              if (!s3["!data"][R2])
                                s3["!data"][R2] = [];
                              s3["!data"][R2][C6] = cell;
                            } else
                              s3[CC + encode_row(R2)] = cell;
                          }
                          ++R2;
                          --cnt;
                        }
                      }
                    }
                    break;
                  case 3074:
                    {
                      C6 = p2.read_shift(2);
                      R2 = p2.read_shift(4);
                      var str = parse_qpw_str(p2);
                      if (s3["!data"] != null) {
                        if (!s3["!data"][R2])
                          s3["!data"][R2] = [];
                        s3["!data"][R2][C6] = { t: "s", v: str };
                      } else
                        s3[encode_col(C6) + encode_row(R2)] = { t: "s", v: str };
                    }
                    break;
                  default:
                    break;
                }
                d2.l += length;
              }
            return wb;
          }
          return {
            sheet_to_wk1,
            book_to_wk3,
            to_workbook: lotus_to_workbook
          };
        }();
        function parse_rpr(rpr) {
          var font = {}, m4 = rpr.match(tagregex), i6 = 0;
          var pass = false;
          if (m4)
            for (; i6 != m4.length; ++i6) {
              var y4 = parsexmltag(m4[i6]);
              switch (y4[0].replace(/<\w*:/g, "<")) {
                case "<condense":
                  break;
                case "<extend":
                  break;
                case "<shadow":
                  if (!y4.val)
                    break;
                case "<shadow>":
                case "<shadow/>":
                  font.shadow = 1;
                  break;
                case "</shadow>":
                  break;
                case "<charset":
                  if (y4.val == "1")
                    break;
                  font.cp = CS2CP[parseInt(y4.val, 10)];
                  break;
                case "<outline":
                  if (!y4.val)
                    break;
                case "<outline>":
                case "<outline/>":
                  font.outline = 1;
                  break;
                case "</outline>":
                  break;
                case "<rFont":
                  font.name = y4.val;
                  break;
                case "<sz":
                  font.sz = y4.val;
                  break;
                case "<strike":
                  if (!y4.val)
                    break;
                case "<strike>":
                case "<strike/>":
                  font.strike = 1;
                  break;
                case "</strike>":
                  break;
                case "<u":
                  if (!y4.val)
                    break;
                  switch (y4.val) {
                    case "double":
                      font.uval = "double";
                      break;
                    case "singleAccounting":
                      font.uval = "single-accounting";
                      break;
                    case "doubleAccounting":
                      font.uval = "double-accounting";
                      break;
                  }
                case "<u>":
                case "<u/>":
                  font.u = 1;
                  break;
                case "</u>":
                  break;
                case "<b":
                  if (y4.val == "0")
                    break;
                case "<b>":
                case "<b/>":
                  font.b = 1;
                  break;
                case "</b>":
                  break;
                case "<i":
                  if (y4.val == "0")
                    break;
                case "<i>":
                case "<i/>":
                  font.i = 1;
                  break;
                case "</i>":
                  break;
                case "<color":
                  if (y4.rgb)
                    font.color = y4.rgb.slice(2, 8);
                  break;
                case "<color>":
                case "<color/>":
                case "</color>":
                  break;
                case "<family":
                  font.family = y4.val;
                  break;
                case "<family>":
                case "<family/>":
                case "</family>":
                  break;
                case "<vertAlign":
                  font.valign = y4.val;
                  break;
                case "<vertAlign>":
                case "<vertAlign/>":
                case "</vertAlign>":
                  break;
                case "<scheme":
                  break;
                case "<scheme>":
                case "<scheme/>":
                case "</scheme>":
                  break;
                case "<extLst":
                case "<extLst>":
                case "</extLst>":
                  break;
                case "<ext":
                  pass = true;
                  break;
                case "</ext>":
                  pass = false;
                  break;
                default:
                  if (y4[0].charCodeAt(1) !== 47 && !pass)
                    throw new Error("Unrecognized rich format " + y4[0]);
              }
            }
          return font;
        }
        var parse_rs = function() {
          function parse_r(r6) {
            var t5 = str_match_xml_ns(r6, "t");
            if (!t5)
              return { t: "s", v: "" };
            var o6 = { t: "s", v: unescapexml(t5[1]) };
            var rpr = str_match_xml_ns(r6, "rPr");
            if (rpr)
              o6.s = parse_rpr(rpr[1]);
            return o6;
          }
          var rregex = /<(?:\w+:)?r>/g, rend = /<\/(?:\w+:)?r>/;
          return function parse_rs2(rs) {
            return rs.replace(rregex, "").split(rend).map(parse_r).filter(function(r6) {
              return r6.v;
            });
          };
        }();
        var rs_to_html = function parse_rs_factory() {
          var nlregex = /(\r\n|\n)/g;
          function parse_rpr2(font, intro, outro) {
            var style = [];
            if (font.u)
              style.push("text-decoration: underline;");
            if (font.uval)
              style.push("text-underline-style:" + font.uval + ";");
            if (font.sz)
              style.push("font-size:" + font.sz + "pt;");
            if (font.outline)
              style.push("text-effect: outline;");
            if (font.shadow)
              style.push("text-shadow: auto;");
            intro.push('<span style="' + style.join("") + '">');
            if (font.b) {
              intro.push("<b>");
              outro.push("</b>");
            }
            if (font.i) {
              intro.push("<i>");
              outro.push("</i>");
            }
            if (font.strike) {
              intro.push("<s>");
              outro.push("</s>");
            }
            var align = font.valign || "";
            if (align == "superscript" || align == "super")
              align = "sup";
            else if (align == "subscript")
              align = "sub";
            if (align != "") {
              intro.push("<" + align + ">");
              outro.push("</" + align + ">");
            }
            outro.push("</span>");
            return font;
          }
          function r_to_html(r6) {
            var terms = [[], r6.v, []];
            if (!r6.v)
              return "";
            if (r6.s)
              parse_rpr2(r6.s, terms[0], terms[2]);
            return terms[0].join("") + terms[1].replace(nlregex, "<br/>") + terms[2].join("");
          }
          return function parse_rs2(rs) {
            return rs.map(r_to_html).join("");
          };
        }();
        var sitregex = /<(?:\w+:)?t\b[^<>]*>([^<]*)<\/(?:\w+:)?t>/g, sirregex = /<(?:\w+:)?r\b[^<>]*>/;
        function parse_si(x3, opts) {
          var html = opts ? opts.cellHTML : true;
          var z3 = {};
          if (!x3)
            return { t: "" };
          if (x3.match(/^\s*<(?:\w+:)?t[^>]*>/)) {
            z3.t = unescapexml(utf8read(x3.slice(x3.indexOf(">") + 1).split(/<\/(?:\w+:)?t>/)[0] || ""), true);
            z3.r = utf8read(x3);
            if (html)
              z3.h = escapehtml(z3.t);
          } else if (x3.match(sirregex)) {
            z3.r = utf8read(x3);
            z3.t = unescapexml(utf8read((str_remove_xml_ns_g(x3, "rPh").match(sitregex) || []).join("").replace(tagregex, "")), true);
            if (html)
              z3.h = rs_to_html(parse_rs(z3.r));
          }
          return z3;
        }
        var sstr1 = /<(?:\w+:)?(?:si|sstItem)>/g;
        var sstr2 = /<\/(?:\w+:)?(?:si|sstItem)>/;
        function parse_sst_xml(data, opts) {
          var s3 = [], ss = "";
          if (!data)
            return s3;
          var sst = str_match_xml_ns(data, "sst");
          if (sst) {
            ss = sst[1].replace(sstr1, "").split(sstr2);
            for (var i6 = 0; i6 != ss.length; ++i6) {
              var o6 = parse_si(ss[i6].trim(), opts);
              if (o6 != null)
                s3[s3.length] = o6;
            }
            sst = parsexmltag(sst[0].slice(0, sst[0].indexOf(">")));
            s3.Count = sst.count;
            s3.Unique = sst.uniqueCount;
          }
          return s3;
        }
        var straywsregex = /^\s|\s$|[\t\n\r]/;
        function write_sst_xml(sst, opts) {
          if (!opts.bookSST)
            return "";
          var o6 = [XML_HEADER];
          o6[o6.length] = writextag("sst", null, {
            xmlns: XMLNS_main[0],
            count: sst.Count,
            uniqueCount: sst.Unique
          });
          for (var i6 = 0; i6 != sst.length; ++i6) {
            if (sst[i6] == null)
              continue;
            var s3 = sst[i6];
            var sitag = "<si>";
            if (s3.r)
              sitag += s3.r;
            else {
              sitag += "<t";
              if (!s3.t)
                s3.t = "";
              if (typeof s3.t !== "string")
                s3.t = String(s3.t);
              if (s3.t.match(straywsregex))
                sitag += ' xml:space="preserve"';
              sitag += ">" + escapexml(s3.t) + "</t>";
            }
            sitag += "</si>";
            o6[o6.length] = sitag;
          }
          if (o6.length > 2) {
            o6[o6.length] = "</sst>";
            o6[1] = o6[1].replace("/>", ">");
          }
          return o6.join("");
        }
        function parse_BrtBeginSst(data) {
          return [data.read_shift(4), data.read_shift(4)];
        }
        function parse_sst_bin(data, opts) {
          var s3 = [];
          var pass = false;
          recordhopper(data, function hopper_sst(val2, R2, RT) {
            switch (RT) {
              case 159:
                s3.Count = val2[0];
                s3.Unique = val2[1];
                break;
              case 19:
                s3.push(val2);
                break;
              case 160:
                return true;
              case 35:
                pass = true;
                break;
              case 36:
                pass = false;
                break;
              default:
                if (R2.T) {
                }
                if (!pass || opts.WTF)
                  throw new Error("Unexpected record 0x" + RT.toString(16));
            }
          });
          return s3;
        }
        function write_BrtBeginSst(sst, o6) {
          if (!o6)
            o6 = new_buf(8);
          o6.write_shift(4, sst.Count);
          o6.write_shift(4, sst.Unique);
          return o6;
        }
        var write_BrtSSTItem = write_RichStr;
        function write_sst_bin(sst) {
          var ba = buf_array();
          write_record(ba, 159, write_BrtBeginSst(sst));
          for (var i6 = 0; i6 < sst.length; ++i6)
            write_record(ba, 19, write_BrtSSTItem(sst[i6]));
          write_record(ba, 160);
          return ba.end();
        }
        function _JS2ANSI(str) {
          if (typeof $cptable !== "undefined")
            return $cptable.utils.encode(current_ansi, str);
          var o6 = [], oo = str.split("");
          for (var i6 = 0; i6 < oo.length; ++i6)
            o6[i6] = oo[i6].charCodeAt(0);
          return o6;
        }
        function parse_CRYPTOVersion(blob, length) {
          var o6 = {};
          o6.Major = blob.read_shift(2);
          o6.Minor = blob.read_shift(2);
          if (length >= 4)
            blob.l += length - 4;
          return o6;
        }
        function parse_DataSpaceVersionInfo(blob) {
          var o6 = {};
          o6.id = blob.read_shift(0, "lpp4");
          o6.R = parse_CRYPTOVersion(blob, 4);
          o6.U = parse_CRYPTOVersion(blob, 4);
          o6.W = parse_CRYPTOVersion(blob, 4);
          return o6;
        }
        function parse_DataSpaceMapEntry(blob) {
          var len = blob.read_shift(4);
          var end = blob.l + len - 4;
          var o6 = {};
          var cnt = blob.read_shift(4);
          var comps = [];
          while (cnt-- > 0)
            comps.push({ t: blob.read_shift(4), v: blob.read_shift(0, "lpp4") });
          o6.name = blob.read_shift(0, "lpp4");
          o6.comps = comps;
          if (blob.l != end)
            throw new Error("Bad DataSpaceMapEntry: " + blob.l + " != " + end);
          return o6;
        }
        function parse_DataSpaceMap(blob) {
          var o6 = [];
          blob.l += 4;
          var cnt = blob.read_shift(4);
          while (cnt-- > 0)
            o6.push(parse_DataSpaceMapEntry(blob));
          return o6;
        }
        function parse_DataSpaceDefinition(blob) {
          var o6 = [];
          blob.l += 4;
          var cnt = blob.read_shift(4);
          while (cnt-- > 0)
            o6.push(blob.read_shift(0, "lpp4"));
          return o6;
        }
        function parse_TransformInfoHeader(blob) {
          var o6 = {};
          blob.read_shift(4);
          blob.l += 4;
          o6.id = blob.read_shift(0, "lpp4");
          o6.name = blob.read_shift(0, "lpp4");
          o6.R = parse_CRYPTOVersion(blob, 4);
          o6.U = parse_CRYPTOVersion(blob, 4);
          o6.W = parse_CRYPTOVersion(blob, 4);
          return o6;
        }
        function parse_Primary(blob) {
          var hdr = parse_TransformInfoHeader(blob);
          hdr.ename = blob.read_shift(0, "8lpp4");
          hdr.blksz = blob.read_shift(4);
          hdr.cmode = blob.read_shift(4);
          if (blob.read_shift(4) != 4)
            throw new Error("Bad !Primary record");
          return hdr;
        }
        function parse_EncryptionHeader(blob, length) {
          var tgt = blob.l + length;
          var o6 = {};
          o6.Flags = blob.read_shift(4) & 63;
          blob.l += 4;
          o6.AlgID = blob.read_shift(4);
          var valid = false;
          switch (o6.AlgID) {
            case 26126:
            case 26127:
            case 26128:
              valid = o6.Flags == 36;
              break;
            case 26625:
              valid = o6.Flags == 4;
              break;
            case 0:
              valid = o6.Flags == 16 || o6.Flags == 4 || o6.Flags == 36;
              break;
            default:
              throw "Unrecognized encryption algorithm: " + o6.AlgID;
          }
          if (!valid)
            throw new Error("Encryption Flags/AlgID mismatch");
          o6.AlgIDHash = blob.read_shift(4);
          o6.KeySize = blob.read_shift(4);
          o6.ProviderType = blob.read_shift(4);
          blob.l += 8;
          o6.CSPName = blob.read_shift(tgt - blob.l >> 1, "utf16le");
          blob.l = tgt;
          return o6;
        }
        function parse_EncryptionVerifier(blob, length) {
          var o6 = {}, tgt = blob.l + length;
          blob.l += 4;
          o6.Salt = blob.slice(blob.l, blob.l + 16);
          blob.l += 16;
          o6.Verifier = blob.slice(blob.l, blob.l + 16);
          blob.l += 16;
          blob.read_shift(4);
          o6.VerifierHash = blob.slice(blob.l, tgt);
          blob.l = tgt;
          return o6;
        }
        function parse_EncryptionInfo(blob) {
          var vers = parse_CRYPTOVersion(blob);
          switch (vers.Minor) {
            case 2:
              return [vers.Minor, parse_EncInfoStd(blob, vers)];
            case 3:
              return [vers.Minor, parse_EncInfoExt(blob, vers)];
            case 4:
              return [vers.Minor, parse_EncInfoAgl(blob, vers)];
          }
          throw new Error("ECMA-376 Encrypted file unrecognized Version: " + vers.Minor);
        }
        function parse_EncInfoStd(blob) {
          var flags = blob.read_shift(4);
          if ((flags & 63) != 36)
            throw new Error("EncryptionInfo mismatch");
          var sz = blob.read_shift(4);
          var hdr = parse_EncryptionHeader(blob, sz);
          var verifier = parse_EncryptionVerifier(blob, blob.length - blob.l);
          return { t: "Std", h: hdr, v: verifier };
        }
        function parse_EncInfoExt() {
          throw new Error("File is password-protected: ECMA-376 Extensible");
        }
        function parse_EncInfoAgl(blob) {
          var KeyData = ["saltSize", "blockSize", "keyBits", "hashSize", "cipherAlgorithm", "cipherChaining", "hashAlgorithm", "saltValue"];
          blob.l += 4;
          var xml = blob.read_shift(blob.length - blob.l, "utf8");
          var o6 = {};
          xml.replace(tagregex, function xml_agile(x3) {
            var y4 = parsexmltag(x3);
            switch (strip_ns(y4[0])) {
              case "<?xml":
                break;
              case "<encryption":
              case "</encryption>":
                break;
              case "<keyData":
                KeyData.forEach(function(k2) {
                  o6[k2] = y4[k2];
                });
                break;
              case "<dataIntegrity":
                o6.encryptedHmacKey = y4.encryptedHmacKey;
                o6.encryptedHmacValue = y4.encryptedHmacValue;
                break;
              case "<keyEncryptors>":
              case "<keyEncryptors":
                o6.encs = [];
                break;
              case "</keyEncryptors>":
                break;
              case "<keyEncryptor":
                o6.uri = y4.uri;
                break;
              case "</keyEncryptor>":
                break;
              case "<encryptedKey":
                o6.encs.push(y4);
                break;
              default:
                throw y4[0];
            }
          });
          return o6;
        }
        function parse_RC4CryptoHeader(blob, length) {
          var o6 = {};
          var vers = o6.EncryptionVersionInfo = parse_CRYPTOVersion(blob, 4);
          length -= 4;
          if (vers.Minor != 2)
            throw new Error("unrecognized minor version code: " + vers.Minor);
          if (vers.Major > 4 || vers.Major < 2)
            throw new Error("unrecognized major version code: " + vers.Major);
          o6.Flags = blob.read_shift(4);
          length -= 4;
          var sz = blob.read_shift(4);
          length -= 4;
          o6.EncryptionHeader = parse_EncryptionHeader(blob, sz);
          length -= sz;
          o6.EncryptionVerifier = parse_EncryptionVerifier(blob, length);
          return o6;
        }
        function parse_RC4Header(blob) {
          var o6 = {};
          var vers = o6.EncryptionVersionInfo = parse_CRYPTOVersion(blob, 4);
          if (vers.Major != 1 || vers.Minor != 1)
            throw "unrecognized version code " + vers.Major + " : " + vers.Minor;
          o6.Salt = blob.read_shift(16);
          o6.EncryptedVerifier = blob.read_shift(16);
          o6.EncryptedVerifierHash = blob.read_shift(16);
          return o6;
        }
        function crypto_CreatePasswordVerifier_Method1(Password) {
          var Verifier = 0, PasswordArray;
          var PasswordDecoded = _JS2ANSI(Password);
          var len = PasswordDecoded.length + 1, i6, PasswordByte;
          var Intermediate1, Intermediate2, Intermediate3;
          PasswordArray = new_raw_buf(len);
          PasswordArray[0] = PasswordDecoded.length;
          for (i6 = 1; i6 != len; ++i6)
            PasswordArray[i6] = PasswordDecoded[i6 - 1];
          for (i6 = len - 1; i6 >= 0; --i6) {
            PasswordByte = PasswordArray[i6];
            Intermediate1 = (Verifier & 16384) === 0 ? 0 : 1;
            Intermediate2 = Verifier << 1 & 32767;
            Intermediate3 = Intermediate1 | Intermediate2;
            Verifier = Intermediate3 ^ PasswordByte;
          }
          return Verifier ^ 52811;
        }
        var crypto_CreateXorArray_Method1 = function() {
          var PadArray = [187, 255, 255, 186, 255, 255, 185, 128, 0, 190, 15, 0, 191, 15, 0];
          var InitialCode = [57840, 7439, 52380, 33984, 4364, 3600, 61902, 12606, 6258, 57657, 54287, 34041, 10252, 43370, 20163];
          var XorMatrix = [44796, 19929, 39858, 10053, 20106, 40212, 10761, 31585, 63170, 64933, 60267, 50935, 40399, 11199, 17763, 35526, 1453, 2906, 5812, 11624, 23248, 885, 1770, 3540, 7080, 14160, 28320, 56640, 55369, 41139, 20807, 41614, 21821, 43642, 17621, 28485, 56970, 44341, 19019, 38038, 14605, 29210, 60195, 50791, 40175, 10751, 21502, 43004, 24537, 18387, 36774, 3949, 7898, 15796, 31592, 63184, 47201, 24803, 49606, 37805, 14203, 28406, 56812, 17824, 35648, 1697, 3394, 6788, 13576, 27152, 43601, 17539, 35078, 557, 1114, 2228, 4456, 30388, 60776, 51953, 34243, 7079, 14158, 28316, 14128, 28256, 56512, 43425, 17251, 34502, 7597, 13105, 26210, 52420, 35241, 883, 1766, 3532, 4129, 8258, 16516, 33032, 4657, 9314, 18628];
          var Ror = function(Byte) {
            return (Byte / 2 | Byte * 128) & 255;
          };
          var XorRor = function(byte1, byte2) {
            return Ror(byte1 ^ byte2);
          };
          var CreateXorKey_Method1 = function(Password) {
            var XorKey = InitialCode[Password.length - 1];
            var CurrentElement = 104;
            for (var i6 = Password.length - 1; i6 >= 0; --i6) {
              var Char = Password[i6];
              for (var j3 = 0; j3 != 7; ++j3) {
                if (Char & 64)
                  XorKey ^= XorMatrix[CurrentElement];
                Char *= 2;
                --CurrentElement;
              }
            }
            return XorKey;
          };
          return function(password) {
            var Password = _JS2ANSI(password);
            var XorKey = CreateXorKey_Method1(Password);
            var Index = Password.length;
            var ObfuscationArray = new_raw_buf(16);
            for (var i6 = 0; i6 != 16; ++i6)
              ObfuscationArray[i6] = 0;
            var Temp, PasswordLastChar, PadIndex;
            if ((Index & 1) === 1) {
              Temp = XorKey >> 8;
              ObfuscationArray[Index] = XorRor(PadArray[0], Temp);
              --Index;
              Temp = XorKey & 255;
              PasswordLastChar = Password[Password.length - 1];
              ObfuscationArray[Index] = XorRor(PasswordLastChar, Temp);
            }
            while (Index > 0) {
              --Index;
              Temp = XorKey >> 8;
              ObfuscationArray[Index] = XorRor(Password[Index], Temp);
              --Index;
              Temp = XorKey & 255;
              ObfuscationArray[Index] = XorRor(Password[Index], Temp);
            }
            Index = 15;
            PadIndex = 15 - Password.length;
            while (PadIndex > 0) {
              Temp = XorKey >> 8;
              ObfuscationArray[Index] = XorRor(PadArray[PadIndex], Temp);
              --Index;
              --PadIndex;
              Temp = XorKey & 255;
              ObfuscationArray[Index] = XorRor(Password[Index], Temp);
              --Index;
              --PadIndex;
            }
            return ObfuscationArray;
          };
        }();
        var crypto_DecryptData_Method1 = function(password, Data, XorArrayIndex, XorArray, O3) {
          if (!O3)
            O3 = Data;
          if (!XorArray)
            XorArray = crypto_CreateXorArray_Method1(password);
          var Index, Value;
          for (Index = 0; Index != Data.length; ++Index) {
            Value = Data[Index];
            Value ^= XorArray[XorArrayIndex];
            Value = (Value >> 5 | Value << 3) & 255;
            O3[Index] = Value;
            ++XorArrayIndex;
          }
          return [O3, XorArrayIndex, XorArray];
        };
        var crypto_MakeXorDecryptor = function(password) {
          var XorArrayIndex = 0, XorArray = crypto_CreateXorArray_Method1(password);
          return function(Data) {
            var O3 = crypto_DecryptData_Method1("", Data, XorArrayIndex, XorArray);
            XorArrayIndex = O3[1];
            return O3[0];
          };
        };
        function parse_XORObfuscation(blob, length, opts, out) {
          var o6 = { key: parseuint16(blob), verificationBytes: parseuint16(blob) };
          if (opts.password)
            o6.verifier = crypto_CreatePasswordVerifier_Method1(opts.password);
          out.valid = o6.verificationBytes === o6.verifier;
          if (out.valid)
            out.insitu = crypto_MakeXorDecryptor(opts.password);
          return o6;
        }
        function parse_FilePassHeader(blob, length, oo) {
          var o6 = oo || {};
          o6.Info = blob.read_shift(2);
          blob.l -= 2;
          if (o6.Info === 1)
            o6.Data = parse_RC4Header(blob, length);
          else
            o6.Data = parse_RC4CryptoHeader(blob, length);
          return o6;
        }
        function parse_FilePass(blob, length, opts) {
          var o6 = { Type: opts.biff >= 8 ? blob.read_shift(2) : 0 };
          if (o6.Type)
            parse_FilePassHeader(blob, length - 2, o6);
          else
            parse_XORObfuscation(blob, opts.biff >= 8 ? length : length - 2, opts, o6);
          return o6;
        }
        function rtf_to_sheet(d2, opts) {
          switch (opts.type) {
            case "base64":
              return rtf_to_sheet_str(Base64_decode(d2), opts);
            case "binary":
              return rtf_to_sheet_str(d2, opts);
            case "buffer":
              return rtf_to_sheet_str(has_buf && Buffer.isBuffer(d2) ? d2.toString("binary") : a2s(d2), opts);
            case "array":
              return rtf_to_sheet_str(cc2str(d2), opts);
          }
          throw new Error("Unrecognized type " + opts.type);
        }
        function rtf_to_sheet_str(str, opts) {
          var o6 = opts || {};
          var ws = {};
          var dense = o6.dense;
          if (dense)
            ws["!data"] = [];
          var rows = str_match_ng(str, "\\trowd", "\\row");
          if (!rows)
            throw new Error("RTF missing table");
          var range = { s: { c: 0, r: 0 }, e: { c: 0, r: rows.length - 1 } };
          var row = [];
          rows.forEach(function(rowtf, R2) {
            if (dense)
              row = ws["!data"][R2] = [];
            var rtfre = /\\[\w\-]+\b/g;
            var last_index = 0;
            var res;
            var C6 = -1;
            var payload = [];
            while ((res = rtfre.exec(rowtf)) != null) {
              var data = rowtf.slice(last_index, rtfre.lastIndex - res[0].length);
              if (data.charCodeAt(0) == 32)
                data = data.slice(1);
              if (data.length)
                payload.push(data);
              switch (res[0]) {
                case "\\cell":
                  ++C6;
                  if (payload.length) {
                    var cell = { v: payload.join(""), t: "s" };
                    if (cell.v == "TRUE" || cell.v == "FALSE") {
                      cell.v = cell.v == "TRUE";
                      cell.t = "b";
                    } else if (!isNaN(fuzzynum(cell.v))) {
                      cell.t = "n";
                      if (o6.cellText !== false)
                        cell.w = cell.v;
                      cell.v = fuzzynum(cell.v);
                    } else if (RBErr[cell.v] != null) {
                      cell.t = "e";
                      cell.w = cell.v;
                      cell.v = RBErr[cell.v];
                    }
                    if (dense)
                      row[C6] = cell;
                    else
                      ws[encode_cell({ r: R2, c: C6 })] = cell;
                  }
                  payload = [];
                  break;
                case "\\par":
                  payload.push("\n");
                  break;
              }
              last_index = rtfre.lastIndex;
            }
            if (C6 > range.e.c)
              range.e.c = C6;
          });
          ws["!ref"] = encode_range(range);
          return ws;
        }
        function rtf_to_workbook(d2, opts) {
          var wb = sheet_to_workbook(rtf_to_sheet(d2, opts), opts);
          wb.bookType = "rtf";
          return wb;
        }
        function sheet_to_rtf(ws, opts) {
          var o6 = ["{\\rtf1\\ansi"];
          if (!ws["!ref"])
            return o6[0] + "}";
          var r6 = safe_decode_range(ws["!ref"]), cell;
          var dense = ws["!data"] != null, row = [];
          for (var R2 = r6.s.r; R2 <= r6.e.r; ++R2) {
            o6.push("\\trowd\\trautofit1");
            for (var C6 = r6.s.c; C6 <= r6.e.c; ++C6)
              o6.push("\\cellx" + (C6 + 1));
            o6.push("\\pard\\intbl");
            if (dense)
              row = ws["!data"][R2] || [];
            for (C6 = r6.s.c; C6 <= r6.e.c; ++C6) {
              var coord = encode_cell({ r: R2, c: C6 });
              cell = dense ? row[C6] : ws[coord];
              if (!cell || cell.v == null && (!cell.f || cell.F)) {
                o6.push(" \\cell");
                continue;
              }
              o6.push(" " + (cell.w || (format_cell(cell), cell.w) || "").replace(/[\r\n]/g, "\\par "));
              o6.push("\\cell");
            }
            o6.push("\\pard\\intbl\\row");
          }
          return o6.join("") + "}";
        }
        function hex2RGB(h) {
          var o6 = h.slice(h[0] === "#" ? 1 : 0).slice(0, 6);
          return [parseInt(o6.slice(0, 2), 16), parseInt(o6.slice(2, 4), 16), parseInt(o6.slice(4, 6), 16)];
        }
        function rgb2Hex(rgb5) {
          for (var i6 = 0, o6 = 1; i6 != 3; ++i6)
            o6 = o6 * 256 + (rgb5[i6] > 255 ? 255 : rgb5[i6] < 0 ? 0 : rgb5[i6]);
          return o6.toString(16).toUpperCase().slice(1);
        }
        function rgb2HSL(rgb5) {
          var R2 = rgb5[0] / 255, G = rgb5[1] / 255, B5 = rgb5[2] / 255;
          var M3 = Math.max(R2, G, B5), m4 = Math.min(R2, G, B5), C6 = M3 - m4;
          if (C6 === 0)
            return [0, 0, R2];
          var H6 = 0, S2 = 0, L2 = M3 + m4;
          S2 = C6 / (L2 > 1 ? 2 - L2 : L2);
          switch (M3) {
            case R2:
              H6 = ((G - B5) / C6 + 6) % 6;
              break;
            case G:
              H6 = (B5 - R2) / C6 + 2;
              break;
            case B5:
              H6 = (R2 - G) / C6 + 4;
              break;
          }
          return [H6 / 6, S2, L2 / 2];
        }
        function hsl2RGB(hsl5) {
          var H2 = hsl5[0], S2 = hsl5[1], L2 = hsl5[2];
          var C6 = S2 * 2 * (L2 < 0.5 ? L2 : 1 - L2), m4 = L2 - C6 / 2;
          var rgb5 = [m4, m4, m4], h6 = 6 * H2;
          var X2;
          if (S2 !== 0)
            switch (h6 | 0) {
              case 0:
              case 6:
                X2 = C6 * h6;
                rgb5[0] += C6;
                rgb5[1] += X2;
                break;
              case 1:
                X2 = C6 * (2 - h6);
                rgb5[0] += X2;
                rgb5[1] += C6;
                break;
              case 2:
                X2 = C6 * (h6 - 2);
                rgb5[1] += C6;
                rgb5[2] += X2;
                break;
              case 3:
                X2 = C6 * (4 - h6);
                rgb5[1] += X2;
                rgb5[2] += C6;
                break;
              case 4:
                X2 = C6 * (h6 - 4);
                rgb5[2] += C6;
                rgb5[0] += X2;
                break;
              case 5:
                X2 = C6 * (6 - h6);
                rgb5[2] += X2;
                rgb5[0] += C6;
                break;
            }
          for (var i6 = 0; i6 != 3; ++i6)
            rgb5[i6] = Math.round(rgb5[i6] * 255);
          return rgb5;
        }
        function rgb_tint(hex9, tint) {
          if (tint === 0)
            return hex9;
          var hsl5 = rgb2HSL(hex2RGB(hex9));
          if (tint < 0)
            hsl5[2] = hsl5[2] * (1 + tint);
          else
            hsl5[2] = 1 - (1 - hsl5[2]) * (1 - tint);
          return rgb2Hex(hsl2RGB(hsl5));
        }
        var DEF_MDW = 6, MAX_MDW = 15, MIN_MDW = 1, MDW = DEF_MDW;
        function width2px(width) {
          return Math.floor((width + Math.round(128 / MDW) / 256) * MDW);
        }
        function px2char(px) {
          return Math.floor((px - 5) / MDW * 100 + 0.5) / 100;
        }
        function char2width(chr) {
          return Math.round((chr * MDW + 5) / MDW * 256) / 256;
        }
        function cycle_width(collw) {
          return char2width(px2char(width2px(collw)));
        }
        function find_mdw_colw(collw) {
          var delta = Math.abs(collw - cycle_width(collw)), _MDW = MDW;
          if (delta > 5e-3) {
            for (MDW = MIN_MDW; MDW < MAX_MDW; ++MDW)
              if (Math.abs(collw - cycle_width(collw)) <= delta) {
                delta = Math.abs(collw - cycle_width(collw));
                _MDW = MDW;
              }
          }
          MDW = _MDW;
        }
        function process_col(coll) {
          if (coll.width) {
            coll.wpx = width2px(coll.width);
            coll.wch = px2char(coll.wpx);
            coll.MDW = MDW;
          } else if (coll.wpx) {
            coll.wch = px2char(coll.wpx);
            coll.width = char2width(coll.wch);
            coll.MDW = MDW;
          } else if (typeof coll.wch == "number") {
            coll.width = char2width(coll.wch);
            coll.wpx = width2px(coll.width);
            coll.MDW = MDW;
          }
          if (coll.customWidth)
            delete coll.customWidth;
        }
        var DEF_PPI = 96, PPI = DEF_PPI;
        function px2pt(px) {
          return px * 96 / PPI;
        }
        function pt2px(pt2) {
          return pt2 * PPI / 96;
        }
        var XLMLPatternTypeMap = {
          "None": "none",
          "Solid": "solid",
          "Gray50": "mediumGray",
          "Gray75": "darkGray",
          "Gray25": "lightGray",
          "HorzStripe": "darkHorizontal",
          "VertStripe": "darkVertical",
          "ReverseDiagStripe": "darkDown",
          "DiagStripe": "darkUp",
          "DiagCross": "darkGrid",
          "ThickDiagCross": "darkTrellis",
          "ThinHorzStripe": "lightHorizontal",
          "ThinVertStripe": "lightVertical",
          "ThinReverseDiagStripe": "lightDown",
          "ThinHorzCross": "lightGrid"
        };
        function parse_borders(t5, styles, themes, opts) {
          styles.Borders = [];
          var border = {};
          var pass = false;
          (t5.match(tagregex) || []).forEach(function(x3) {
            var y4 = parsexmltag(x3);
            switch (strip_ns(y4[0])) {
              case "<borders":
              case "<borders>":
              case "</borders>":
                break;
              case "<border":
              case "<border>":
              case "<border/>":
                border = {};
                if (y4.diagonalUp)
                  border.diagonalUp = parsexmlbool(y4.diagonalUp);
                if (y4.diagonalDown)
                  border.diagonalDown = parsexmlbool(y4.diagonalDown);
                styles.Borders.push(border);
                break;
              case "</border>":
                break;
              case "<left/>":
                break;
              case "<left":
              case "<left>":
                break;
              case "</left>":
                break;
              case "<right/>":
                break;
              case "<right":
              case "<right>":
                break;
              case "</right>":
                break;
              case "<top/>":
                break;
              case "<top":
              case "<top>":
                break;
              case "</top>":
                break;
              case "<bottom/>":
                break;
              case "<bottom":
              case "<bottom>":
                break;
              case "</bottom>":
                break;
              case "<diagonal":
              case "<diagonal>":
              case "<diagonal/>":
                break;
              case "</diagonal>":
                break;
              case "<horizontal":
              case "<horizontal>":
              case "<horizontal/>":
                break;
              case "</horizontal>":
                break;
              case "<vertical":
              case "<vertical>":
              case "<vertical/>":
                break;
              case "</vertical>":
                break;
              case "<start":
              case "<start>":
              case "<start/>":
                break;
              case "</start>":
                break;
              case "<end":
              case "<end>":
              case "<end/>":
                break;
              case "</end>":
                break;
              case "<color":
              case "<color>":
                break;
              case "<color/>":
              case "</color>":
                break;
              case "<extLst":
              case "<extLst>":
              case "</extLst>":
                break;
              case "<ext":
                pass = true;
                break;
              case "</ext>":
                pass = false;
                break;
              default:
                if (opts && opts.WTF) {
                  if (!pass)
                    throw new Error("unrecognized " + y4[0] + " in borders");
                }
            }
          });
        }
        function parse_fills(t5, styles, themes, opts) {
          styles.Fills = [];
          var fill2 = {};
          var pass = false;
          (t5.match(tagregex) || []).forEach(function(x3) {
            var y4 = parsexmltag(x3);
            switch (strip_ns(y4[0])) {
              case "<fills":
              case "<fills>":
              case "</fills>":
                break;
              case "<fill>":
              case "<fill":
              case "<fill/>":
                fill2 = {};
                styles.Fills.push(fill2);
                break;
              case "</fill>":
                break;
              case "<gradientFill>":
                break;
              case "<gradientFill":
              case "</gradientFill>":
                styles.Fills.push(fill2);
                fill2 = {};
                break;
              case "<patternFill":
              case "<patternFill>":
                if (y4.patternType)
                  fill2.patternType = y4.patternType;
                break;
              case "<patternFill/>":
              case "</patternFill>":
                break;
              case "<bgColor":
                if (!fill2.bgColor)
                  fill2.bgColor = {};
                if (y4.indexed)
                  fill2.bgColor.indexed = parseInt(y4.indexed, 10);
                if (y4.theme)
                  fill2.bgColor.theme = parseInt(y4.theme, 10);
                if (y4.tint)
                  fill2.bgColor.tint = parseFloat(y4.tint);
                if (y4.rgb)
                  fill2.bgColor.rgb = y4.rgb.slice(-6);
                break;
              case "<bgColor/>":
              case "</bgColor>":
                break;
              case "<fgColor":
                if (!fill2.fgColor)
                  fill2.fgColor = {};
                if (y4.theme)
                  fill2.fgColor.theme = parseInt(y4.theme, 10);
                if (y4.tint)
                  fill2.fgColor.tint = parseFloat(y4.tint);
                if (y4.rgb != null)
                  fill2.fgColor.rgb = y4.rgb.slice(-6);
                break;
              case "<fgColor/>":
              case "</fgColor>":
                break;
              case "<stop":
              case "<stop/>":
                break;
              case "</stop>":
                break;
              case "<color":
              case "<color/>":
                break;
              case "</color>":
                break;
              case "<extLst":
              case "<extLst>":
              case "</extLst>":
                break;
              case "<ext":
                pass = true;
                break;
              case "</ext>":
                pass = false;
                break;
              default:
                if (opts && opts.WTF) {
                  if (!pass)
                    throw new Error("unrecognized " + y4[0] + " in fills");
                }
            }
          });
        }
        function parse_fonts(t5, styles, themes, opts) {
          styles.Fonts = [];
          var font = {};
          var pass = false;
          (t5.match(tagregex) || []).forEach(function(x3) {
            var y4 = parsexmltag(x3);
            switch (strip_ns(y4[0])) {
              case "<fonts":
              case "<fonts>":
              case "</fonts>":
                break;
              case "<font":
              case "<font>":
                break;
              case "</font>":
              case "<font/>":
                styles.Fonts.push(font);
                font = {};
                break;
              case "<name":
                if (y4.val)
                  font.name = utf8read(y4.val);
                break;
              case "<name/>":
              case "</name>":
                break;
              case "<b":
                font.bold = y4.val ? parsexmlbool(y4.val) : 1;
                break;
              case "<b/>":
                font.bold = 1;
                break;
              case "</b>":
              case "</b":
                break;
              case "<i":
                font.italic = y4.val ? parsexmlbool(y4.val) : 1;
                break;
              case "<i/>":
                font.italic = 1;
                break;
              case "</i>":
              case "</i":
                break;
              case "<u":
                switch (y4.val) {
                  case "none":
                    font.underline = 0;
                    break;
                  case "single":
                    font.underline = 1;
                    break;
                  case "double":
                    font.underline = 2;
                    break;
                  case "singleAccounting":
                    font.underline = 33;
                    break;
                  case "doubleAccounting":
                    font.underline = 34;
                    break;
                }
                break;
              case "<u/>":
                font.underline = 1;
                break;
              case "</u>":
              case "</u":
                break;
              case "<strike":
                font.strike = y4.val ? parsexmlbool(y4.val) : 1;
                break;
              case "<strike/>":
                font.strike = 1;
                break;
              case "</strike>":
              case "</strike":
                break;
              case "<outline":
                font.outline = y4.val ? parsexmlbool(y4.val) : 1;
                break;
              case "<outline/>":
                font.outline = 1;
                break;
              case "</outline>":
              case "</outline":
                break;
              case "<shadow":
                font.shadow = y4.val ? parsexmlbool(y4.val) : 1;
                break;
              case "<shadow/>":
                font.shadow = 1;
                break;
              case "</shadow>":
              case "</shadow":
                break;
              case "<condense":
                font.condense = y4.val ? parsexmlbool(y4.val) : 1;
                break;
              case "<condense/>":
                font.condense = 1;
                break;
              case "</condense>":
              case "</condense":
                break;
              case "<extend":
                font.extend = y4.val ? parsexmlbool(y4.val) : 1;
                break;
              case "<extend/>":
                font.extend = 1;
                break;
              case "</extend>":
              case "</extend":
                break;
              case "<sz":
                if (y4.val)
                  font.sz = +y4.val;
                break;
              case "<sz/>":
              case "</sz>":
              case "</sz":
                break;
              case "<vertAlign":
                if (y4.val)
                  font.vertAlign = y4.val;
                break;
              case "<vertAlign/>":
              case "</vertAlign>":
              case "</vertAlign":
                break;
              case "<family":
                if (y4.val)
                  font.family = parseInt(y4.val, 10);
                break;
              case "<family/>":
              case "</family>":
              case "</family":
                break;
              case "<scheme":
                if (y4.val)
                  font.scheme = y4.val;
                break;
              case "<scheme/>":
              case "</scheme>":
              case "</scheme":
                break;
              case "<charset":
                if (y4.val == "1")
                  break;
                y4.codepage = CS2CP[parseInt(y4.val, 10)];
                break;
              case "<charset/>":
              case "</charset>":
              case "</charset":
                break;
              case "<color":
                if (!font.color)
                  font.color = {};
                if (y4.auto)
                  font.color.auto = parsexmlbool(y4.auto);
                if (y4.rgb)
                  font.color.rgb = y4.rgb.slice(-6);
                else if (y4.indexed) {
                  font.color.index = parseInt(y4.indexed, 10);
                  var icv = XLSIcv[font.color.index];
                  if (font.color.index == 81)
                    icv = XLSIcv[1];
                  if (!icv)
                    icv = XLSIcv[1];
                  font.color.rgb = icv[0].toString(16) + icv[1].toString(16) + icv[2].toString(16);
                } else if (y4.theme) {
                  font.color.theme = parseInt(y4.theme, 10);
                  if (y4.tint)
                    font.color.tint = parseFloat(y4.tint);
                  if (y4.theme && themes.themeElements && themes.themeElements.clrScheme) {
                    font.color.rgb = rgb_tint(themes.themeElements.clrScheme[font.color.theme].rgb, font.color.tint || 0);
                  }
                }
                break;
              case "<color/>":
              case "</color>":
              case "</color":
                break;
              case "<AlternateContent":
                pass = true;
                break;
              case "</AlternateContent>":
              case "</AlternateContent":
                pass = false;
                break;
              case "<extLst":
              case "<extLst>":
              case "</extLst>":
                break;
              case "<ext":
                pass = true;
                break;
              case "</ext>":
                pass = false;
                break;
              default:
                if (opts && opts.WTF) {
                  if (!pass)
                    throw new Error("unrecognized " + y4[0] + " in fonts");
                }
            }
          });
        }
        function parse_numFmts(t5, styles, opts) {
          styles.NumberFmt = [];
          var k2 = keys(table_fmt);
          for (var i6 = 0; i6 < k2.length; ++i6)
            styles.NumberFmt[k2[i6]] = table_fmt[k2[i6]];
          var m4 = t5.match(tagregex);
          if (!m4)
            return;
          for (i6 = 0; i6 < m4.length; ++i6) {
            var y4 = parsexmltag(m4[i6]);
            switch (strip_ns(y4[0])) {
              case "<numFmts":
              case "</numFmts>":
              case "<numFmts/>":
              case "<numFmts>":
                break;
              case "<numFmt":
                {
                  var f2 = unescapexml(utf8read(y4.formatCode)), j3 = parseInt(y4.numFmtId, 10);
                  styles.NumberFmt[j3] = f2;
                  if (j3 > 0) {
                    if (j3 > 392) {
                      for (j3 = 392; j3 > 60; --j3)
                        if (styles.NumberFmt[j3] == null)
                          break;
                      styles.NumberFmt[j3] = f2;
                    }
                    SSF__load(f2, j3);
                  }
                }
                break;
              case "</numFmt>":
                break;
              default:
                if (opts.WTF)
                  throw new Error("unrecognized " + y4[0] + " in numFmts");
            }
          }
        }
        function write_numFmts(NF) {
          var o6 = ["<numFmts>"];
          [[5, 8], [23, 26], [41, 44], [50, 392]].forEach(function(r6) {
            for (var i6 = r6[0]; i6 <= r6[1]; ++i6)
              if (NF[i6] != null)
                o6[o6.length] = writextag("numFmt", null, { numFmtId: i6, formatCode: escapexml(NF[i6]) });
          });
          if (o6.length === 1)
            return "";
          o6[o6.length] = "</numFmts>";
          o6[0] = writextag("numFmts", null, { count: o6.length - 2 }).replace("/>", ">");
          return o6.join("");
        }
        var cellXF_uint = ["numFmtId", "fillId", "fontId", "borderId", "xfId"];
        var cellXF_bool = ["applyAlignment", "applyBorder", "applyFill", "applyFont", "applyNumberFormat", "applyProtection", "pivotButton", "quotePrefix"];
        function parse_cellXfs(t5, styles, opts) {
          styles.CellXf = [];
          var xf;
          var pass = false;
          (t5.match(tagregex) || []).forEach(function(x3) {
            var y4 = parsexmltag(x3), i6 = 0;
            switch (strip_ns(y4[0])) {
              case "<cellXfs":
              case "<cellXfs>":
              case "<cellXfs/>":
              case "</cellXfs>":
                break;
              case "<xf":
              case "<xf/>":
              case "<xf>":
                xf = y4;
                delete xf[0];
                for (i6 = 0; i6 < cellXF_uint.length; ++i6)
                  if (xf[cellXF_uint[i6]])
                    xf[cellXF_uint[i6]] = parseInt(xf[cellXF_uint[i6]], 10);
                for (i6 = 0; i6 < cellXF_bool.length; ++i6)
                  if (xf[cellXF_bool[i6]])
                    xf[cellXF_bool[i6]] = parsexmlbool(xf[cellXF_bool[i6]]);
                if (styles.NumberFmt && xf.numFmtId > 392) {
                  for (i6 = 392; i6 > 60; --i6)
                    if (styles.NumberFmt[xf.numFmtId] == styles.NumberFmt[i6]) {
                      xf.numFmtId = i6;
                      break;
                    }
                }
                styles.CellXf.push(xf);
                break;
              case "</xf>":
                break;
              case "<alignment":
              case "<alignment/>":
              case "<alignment>":
                var alignment = {};
                if (y4.vertical)
                  alignment.vertical = y4.vertical;
                if (y4.horizontal)
                  alignment.horizontal = y4.horizontal;
                if (y4.textRotation != null)
                  alignment.textRotation = y4.textRotation;
                if (y4.indent)
                  alignment.indent = y4.indent;
                if (y4.wrapText)
                  alignment.wrapText = parsexmlbool(y4.wrapText);
                xf.alignment = alignment;
                break;
              case "</alignment>":
                break;
              case "<protection":
              case "<protection>":
                break;
              case "</protection>":
              case "<protection/>":
                break;
              case "<AlternateContent":
              case "<AlternateContent>":
                pass = true;
                break;
              case "</AlternateContent>":
                pass = false;
                break;
              case "<extLst":
              case "<extLst>":
              case "</extLst>":
                break;
              case "<ext":
                pass = true;
                break;
              case "</ext>":
                pass = false;
                break;
              default:
                if (opts && opts.WTF) {
                  if (!pass)
                    throw new Error("unrecognized " + y4[0] + " in cellXfs");
                }
            }
          });
        }
        function write_cellXfs(cellXfs) {
          var o6 = [];
          o6[o6.length] = writextag("cellXfs", null);
          cellXfs.forEach(function(c8) {
            o6[o6.length] = writextag("xf", null, c8);
          });
          o6[o6.length] = "</cellXfs>";
          if (o6.length === 2)
            return "";
          o6[0] = writextag("cellXfs", null, { count: o6.length - 2 }).replace("/>", ">");
          return o6.join("");
        }
        var parse_sty_xml = function make_pstyx() {
          return function parse_sty_xml2(data, themes, opts) {
            var styles = {};
            if (!data)
              return styles;
            data = remove_doctype(str_remove_ng(data, "<!--", "-->"));
            var t5;
            if (t5 = str_match_xml_ns(data, "numFmts"))
              parse_numFmts(t5[0], styles, opts);
            if (t5 = str_match_xml_ns(data, "fonts"))
              parse_fonts(t5[0], styles, themes, opts);
            if (t5 = str_match_xml_ns(data, "fills"))
              parse_fills(t5[0], styles, themes, opts);
            if (t5 = str_match_xml_ns(data, "borders"))
              parse_borders(t5[0], styles, themes, opts);
            if (t5 = str_match_xml_ns(data, "cellXfs"))
              parse_cellXfs(t5[0], styles, opts);
            return styles;
          };
        }();
        function write_sty_xml(wb, opts) {
          var o6 = [XML_HEADER, writextag("styleSheet", null, {
            "xmlns": XMLNS_main[0],
            "xmlns:vt": XMLNS.vt
          })], w3;
          if (wb.SSF && (w3 = write_numFmts(wb.SSF)) != null)
            o6[o6.length] = w3;
          o6[o6.length] = '<fonts count="1"><font><sz val="12"/><color theme="1"/><name val="Calibri"/><family val="2"/><scheme val="minor"/></font></fonts>';
          o6[o6.length] = '<fills count="2"><fill><patternFill patternType="none"/></fill><fill><patternFill patternType="gray125"/></fill></fills>';
          o6[o6.length] = '<borders count="1"><border><left/><right/><top/><bottom/><diagonal/></border></borders>';
          o6[o6.length] = '<cellStyleXfs count="1"><xf numFmtId="0" fontId="0" fillId="0" borderId="0"/></cellStyleXfs>';
          if (w3 = write_cellXfs(opts.cellXfs))
            o6[o6.length] = w3;
          o6[o6.length] = '<cellStyles count="1"><cellStyle name="Normal" xfId="0" builtinId="0"/></cellStyles>';
          o6[o6.length] = '<dxfs count="0"/>';
          o6[o6.length] = '<tableStyles count="0" defaultTableStyle="TableStyleMedium9" defaultPivotStyle="PivotStyleMedium4"/>';
          if (o6.length > 2) {
            o6[o6.length] = "</styleSheet>";
            o6[1] = o6[1].replace("/>", ">");
          }
          return o6.join("");
        }
        function parse_BrtFmt(data, length) {
          var numFmtId = data.read_shift(2);
          var stFmtCode = parse_XLWideString(data, length - 2);
          return [numFmtId, stFmtCode];
        }
        function write_BrtFmt(i6, f2, o6) {
          if (!o6)
            o6 = new_buf(6 + 4 * f2.length);
          o6.write_shift(2, i6);
          write_XLWideString(f2, o6);
          var out = o6.length > o6.l ? o6.slice(0, o6.l) : o6;
          if (o6.l == null)
            o6.l = o6.length;
          return out;
        }
        function parse_BrtFont(data, length, opts) {
          var out = {};
          out.sz = data.read_shift(2) / 20;
          var grbit = parse_FontFlags(data, 2, opts);
          if (grbit.fItalic)
            out.italic = 1;
          if (grbit.fCondense)
            out.condense = 1;
          if (grbit.fExtend)
            out.extend = 1;
          if (grbit.fShadow)
            out.shadow = 1;
          if (grbit.fOutline)
            out.outline = 1;
          if (grbit.fStrikeout)
            out.strike = 1;
          var bls = data.read_shift(2);
          if (bls === 700)
            out.bold = 1;
          switch (data.read_shift(2)) {
            case 1:
              out.vertAlign = "superscript";
              break;
            case 2:
              out.vertAlign = "subscript";
              break;
          }
          var underline = data.read_shift(1);
          if (underline != 0)
            out.underline = underline;
          var family = data.read_shift(1);
          if (family > 0)
            out.family = family;
          var bCharSet = data.read_shift(1);
          if (bCharSet > 0)
            out.charset = bCharSet;
          data.l++;
          out.color = parse_BrtColor(data, 8);
          switch (data.read_shift(1)) {
            case 1:
              out.scheme = "major";
              break;
            case 2:
              out.scheme = "minor";
              break;
          }
          out.name = parse_XLWideString(data, length - 21);
          return out;
        }
        function write_BrtFont(font, o6) {
          if (!o6)
            o6 = new_buf(25 + 4 * 32);
          o6.write_shift(2, font.sz * 20);
          write_FontFlags(font, o6);
          o6.write_shift(2, font.bold ? 700 : 400);
          var sss = 0;
          if (font.vertAlign == "superscript")
            sss = 1;
          else if (font.vertAlign == "subscript")
            sss = 2;
          o6.write_shift(2, sss);
          o6.write_shift(1, font.underline || 0);
          o6.write_shift(1, font.family || 0);
          o6.write_shift(1, font.charset || 0);
          o6.write_shift(1, 0);
          write_BrtColor(font.color, o6);
          var scheme55 = 0;
          if (font.scheme == "major")
            scheme55 = 1;
          if (font.scheme == "minor")
            scheme55 = 2;
          o6.write_shift(1, scheme55);
          write_XLWideString(font.name, o6);
          return o6.length > o6.l ? o6.slice(0, o6.l) : o6;
        }
        var XLSBFillPTNames = [
          "none",
          "solid",
          "mediumGray",
          "darkGray",
          "lightGray",
          "darkHorizontal",
          "darkVertical",
          "darkDown",
          "darkUp",
          "darkGrid",
          "darkTrellis",
          "lightHorizontal",
          "lightVertical",
          "lightDown",
          "lightUp",
          "lightGrid",
          "lightTrellis",
          "gray125",
          "gray0625"
        ];
        var rev_XLSBFillPTNames;
        var parse_BrtFill = parsenoop;
        function write_BrtFill(fill2, o6) {
          if (!o6)
            o6 = new_buf(4 * 3 + 8 * 7 + 16 * 1);
          if (!rev_XLSBFillPTNames)
            rev_XLSBFillPTNames = evert(XLSBFillPTNames);
          var fls = rev_XLSBFillPTNames[fill2.patternType];
          if (fls == null)
            fls = 40;
          o6.write_shift(4, fls);
          var j3 = 0;
          if (fls != 40) {
            write_BrtColor({ auto: 1 }, o6);
            write_BrtColor({ auto: 1 }, o6);
            for (; j3 < 12; ++j3)
              o6.write_shift(4, 0);
          } else {
            for (; j3 < 4; ++j3)
              o6.write_shift(4, 0);
            for (; j3 < 12; ++j3)
              o6.write_shift(4, 0);
          }
          return o6.length > o6.l ? o6.slice(0, o6.l) : o6;
        }
        function parse_BrtXF(data, length) {
          var tgt = data.l + length;
          var ixfeParent = data.read_shift(2);
          var ifmt = data.read_shift(2);
          data.l = tgt;
          return { ixfe: ixfeParent, numFmtId: ifmt };
        }
        function write_BrtXF(data, ixfeP, o6) {
          if (!o6)
            o6 = new_buf(16);
          o6.write_shift(2, ixfeP || 0);
          o6.write_shift(2, data.numFmtId || 0);
          o6.write_shift(2, 0);
          o6.write_shift(2, 0);
          o6.write_shift(2, 0);
          o6.write_shift(1, 0);
          o6.write_shift(1, 0);
          var flow = 0;
          o6.write_shift(1, flow);
          o6.write_shift(1, 0);
          o6.write_shift(1, 0);
          o6.write_shift(1, 0);
          return o6;
        }
        function write_Blxf(data, o6) {
          if (!o6)
            o6 = new_buf(10);
          o6.write_shift(1, 0);
          o6.write_shift(1, 0);
          o6.write_shift(4, 0);
          o6.write_shift(4, 0);
          return o6;
        }
        var parse_BrtBorder = parsenoop;
        function write_BrtBorder(border, o6) {
          if (!o6)
            o6 = new_buf(51);
          o6.write_shift(1, 0);
          write_Blxf(null, o6);
          write_Blxf(null, o6);
          write_Blxf(null, o6);
          write_Blxf(null, o6);
          write_Blxf(null, o6);
          return o6.length > o6.l ? o6.slice(0, o6.l) : o6;
        }
        function write_BrtStyle(style, o6) {
          if (!o6)
            o6 = new_buf(12 + 4 * 10);
          o6.write_shift(4, style.xfId);
          o6.write_shift(2, 1);
          o6.write_shift(1, +style.builtinId);
          o6.write_shift(1, 0);
          write_XLNullableWideString(style.name || "", o6);
          return o6.length > o6.l ? o6.slice(0, o6.l) : o6;
        }
        function write_BrtBeginTableStyles(cnt, defTableStyle, defPivotStyle) {
          var o6 = new_buf(4 + 256 * 2 * 4);
          o6.write_shift(4, cnt);
          write_XLNullableWideString(defTableStyle, o6);
          write_XLNullableWideString(defPivotStyle, o6);
          return o6.length > o6.l ? o6.slice(0, o6.l) : o6;
        }
        function parse_sty_bin(data, themes, opts) {
          var styles = {};
          styles.NumberFmt = [];
          for (var y4 in table_fmt)
            styles.NumberFmt[y4] = table_fmt[y4];
          styles.CellXf = [];
          styles.Fonts = [];
          var state = [];
          var pass = false;
          recordhopper(data, function hopper_sty(val2, R2, RT) {
            switch (RT) {
              case 44:
                styles.NumberFmt[val2[0]] = val2[1];
                SSF__load(val2[1], val2[0]);
                break;
              case 43:
                styles.Fonts.push(val2);
                if (val2.color.theme != null && themes && themes.themeElements && themes.themeElements.clrScheme) {
                  val2.color.rgb = rgb_tint(themes.themeElements.clrScheme[val2.color.theme].rgb, val2.color.tint || 0);
                }
                break;
              case 1025:
                break;
              case 45:
                break;
              case 46:
                break;
              case 47:
                if (state[state.length - 1] == 617) {
                  styles.CellXf.push(val2);
                }
                break;
              case 48:
              case 507:
              case 572:
              case 475:
                break;
              case 1171:
              case 2102:
              case 1130:
              case 512:
              case 2095:
              case 3072:
                break;
              case 35:
                pass = true;
                break;
              case 36:
                pass = false;
                break;
              case 37:
                state.push(RT);
                pass = true;
                break;
              case 38:
                state.pop();
                pass = false;
                break;
              default:
                if (R2.T > 0)
                  state.push(RT);
                else if (R2.T < 0)
                  state.pop();
                else if (!pass || opts.WTF && state[state.length - 1] != 37)
                  throw new Error("Unexpected record 0x" + RT.toString(16));
            }
          });
          return styles;
        }
        function write_FMTS_bin(ba, NF) {
          if (!NF)
            return;
          var cnt = 0;
          [[5, 8], [23, 26], [41, 44], [50, 392]].forEach(function(r6) {
            for (var i6 = r6[0]; i6 <= r6[1]; ++i6)
              if (NF[i6] != null)
                ++cnt;
          });
          if (cnt == 0)
            return;
          write_record(ba, 615, write_UInt32LE(cnt));
          [[5, 8], [23, 26], [41, 44], [50, 392]].forEach(function(r6) {
            for (var i6 = r6[0]; i6 <= r6[1]; ++i6)
              if (NF[i6] != null)
                write_record(ba, 44, write_BrtFmt(i6, NF[i6]));
          });
          write_record(ba, 616);
        }
        function write_FONTS_bin(ba) {
          var cnt = 1;
          if (cnt == 0)
            return;
          write_record(ba, 611, write_UInt32LE(cnt));
          write_record(ba, 43, write_BrtFont({
            sz: 12,
            color: { theme: 1 },
            name: "Calibri",
            family: 2,
            scheme: "minor"
          }));
          write_record(ba, 612);
        }
        function write_FILLS_bin(ba) {
          var cnt = 2;
          if (cnt == 0)
            return;
          write_record(ba, 603, write_UInt32LE(cnt));
          write_record(ba, 45, write_BrtFill({ patternType: "none" }));
          write_record(ba, 45, write_BrtFill({ patternType: "gray125" }));
          write_record(ba, 604);
        }
        function write_BORDERS_bin(ba) {
          var cnt = 1;
          if (cnt == 0)
            return;
          write_record(ba, 613, write_UInt32LE(cnt));
          write_record(ba, 46, write_BrtBorder({}));
          write_record(ba, 614);
        }
        function write_CELLSTYLEXFS_bin(ba) {
          var cnt = 1;
          write_record(ba, 626, write_UInt32LE(cnt));
          write_record(ba, 47, write_BrtXF({
            numFmtId: 0,
            fontId: 0,
            fillId: 0,
            borderId: 0
          }, 65535));
          write_record(ba, 627);
        }
        function write_CELLXFS_bin(ba, data) {
          write_record(ba, 617, write_UInt32LE(data.length));
          data.forEach(function(c8) {
            write_record(ba, 47, write_BrtXF(c8, 0));
          });
          write_record(ba, 618);
        }
        function write_STYLES_bin(ba) {
          var cnt = 1;
          write_record(ba, 619, write_UInt32LE(cnt));
          write_record(ba, 48, write_BrtStyle({
            xfId: 0,
            builtinId: 0,
            name: "Normal"
          }));
          write_record(ba, 620);
        }
        function write_DXFS_bin(ba) {
          var cnt = 0;
          write_record(ba, 505, write_UInt32LE(cnt));
          write_record(ba, 506);
        }
        function write_TABLESTYLES_bin(ba) {
          var cnt = 0;
          write_record(ba, 508, write_BrtBeginTableStyles(cnt, "TableStyleMedium9", "PivotStyleMedium4"));
          write_record(ba, 509);
        }
        function write_COLORPALETTE_bin() {
          return;
        }
        function write_sty_bin(wb, opts) {
          var ba = buf_array();
          write_record(ba, 278);
          write_FMTS_bin(ba, wb.SSF);
          write_FONTS_bin(ba, wb);
          write_FILLS_bin(ba, wb);
          write_BORDERS_bin(ba, wb);
          write_CELLSTYLEXFS_bin(ba, wb);
          write_CELLXFS_bin(ba, opts.cellXfs);
          write_STYLES_bin(ba, wb);
          write_DXFS_bin(ba, wb);
          write_TABLESTYLES_bin(ba, wb);
          write_COLORPALETTE_bin(ba, wb);
          write_record(ba, 279);
          return ba.end();
        }
        var XLSXThemeClrScheme = [
          "</a:lt1>",
          "</a:dk1>",
          "</a:lt2>",
          "</a:dk2>",
          "</a:accent1>",
          "</a:accent2>",
          "</a:accent3>",
          "</a:accent4>",
          "</a:accent5>",
          "</a:accent6>",
          "</a:hlink>",
          "</a:folHlink>"
        ];
        function parse_clrScheme(t5, themes, opts) {
          themes.themeElements.clrScheme = [];
          var color5 = {};
          (t5[0].match(tagregex) || []).forEach(function(x3) {
            var y4 = parsexmltag(x3);
            switch (y4[0]) {
              case "<a:clrScheme":
              case "</a:clrScheme>":
                break;
              case "<a:srgbClr":
                color5.rgb = y4.val;
                break;
              case "</a:srgbClr>":
                break;
              case "<a:sysClr":
                color5.rgb = y4.lastClr;
                break;
              case "</a:sysClr>":
                break;
              case "</a:dk1>":
              case "</a:lt1>":
              case "<a:dk1>":
              case "<a:lt1>":
              case "<a:dk2>":
              case "</a:dk2>":
              case "<a:lt2>":
              case "</a:lt2>":
              case "<a:accent1>":
              case "</a:accent1>":
              case "<a:accent2>":
              case "</a:accent2>":
              case "<a:accent3>":
              case "</a:accent3>":
              case "<a:accent4>":
              case "</a:accent4>":
              case "<a:accent5>":
              case "</a:accent5>":
              case "<a:accent6>":
              case "</a:accent6>":
              case "<a:hlink>":
              case "</a:hlink>":
              case "<a:folHlink>":
              case "</a:folHlink>":
                if (y4[0].charAt(1) === "/") {
                  themes.themeElements.clrScheme[XLSXThemeClrScheme.indexOf(y4[0])] = color5;
                  color5 = {};
                } else {
                  color5.name = y4[0].slice(3, y4[0].length - 1);
                }
                break;
              default:
                if (opts && opts.WTF)
                  throw new Error("Unrecognized " + y4[0] + " in clrScheme");
            }
          });
        }
        function parse_fontScheme() {
        }
        function parse_fmtScheme() {
        }
        function parse_themeElements(data, themes, opts) {
          themes.themeElements = {};
          var t5;
          if (!(t5 = str_match_xml(data, "a:clrScheme")))
            throw new Error("clrScheme not found in themeElements");
          parse_clrScheme(t5, themes, opts);
          if (!(t5 = str_match_xml(data, "a:fontScheme")))
            throw new Error("fontScheme not found in themeElements");
          parse_fontScheme(t5, themes, opts);
          if (!(t5 = str_match_xml(data, "a:fmtScheme")))
            throw new Error("fmtScheme not found in themeElements");
          parse_fmtScheme(t5, themes, opts);
        }
        function parse_theme_xml(data, opts) {
          if (!data || data.length === 0)
            data = write_theme();
          var t5;
          var themes = {};
          if (!(t5 = str_match_xml(data, "a:themeElements")))
            throw new Error("themeElements not found in theme");
          parse_themeElements(t5[0], themes, opts);
          themes.raw = data;
          return themes;
        }
        function write_theme(Themes, opts) {
          if (opts && opts.themeXLSX)
            return opts.themeXLSX;
          if (Themes && typeof Themes.raw == "string")
            return Themes.raw;
          var o6 = [XML_HEADER];
          o6[o6.length] = '<a:theme xmlns:a="http://schemas.openxmlformats.org/drawingml/2006/main" name="Office Theme">';
          o6[o6.length] = "<a:themeElements>";
          o6[o6.length] = '<a:clrScheme name="Office">';
          o6[o6.length] = '<a:dk1><a:sysClr val="windowText" lastClr="000000"/></a:dk1>';
          o6[o6.length] = '<a:lt1><a:sysClr val="window" lastClr="FFFFFF"/></a:lt1>';
          o6[o6.length] = '<a:dk2><a:srgbClr val="1F497D"/></a:dk2>';
          o6[o6.length] = '<a:lt2><a:srgbClr val="EEECE1"/></a:lt2>';
          o6[o6.length] = '<a:accent1><a:srgbClr val="4F81BD"/></a:accent1>';
          o6[o6.length] = '<a:accent2><a:srgbClr val="C0504D"/></a:accent2>';
          o6[o6.length] = '<a:accent3><a:srgbClr val="9BBB59"/></a:accent3>';
          o6[o6.length] = '<a:accent4><a:srgbClr val="8064A2"/></a:accent4>';
          o6[o6.length] = '<a:accent5><a:srgbClr val="4BACC6"/></a:accent5>';
          o6[o6.length] = '<a:accent6><a:srgbClr val="F79646"/></a:accent6>';
          o6[o6.length] = '<a:hlink><a:srgbClr val="0000FF"/></a:hlink>';
          o6[o6.length] = '<a:folHlink><a:srgbClr val="800080"/></a:folHlink>';
          o6[o6.length] = "</a:clrScheme>";
          o6[o6.length] = '<a:fontScheme name="Office">';
          o6[o6.length] = "<a:majorFont>";
          o6[o6.length] = '<a:latin typeface="Cambria"/>';
          o6[o6.length] = '<a:ea typeface=""/>';
          o6[o6.length] = '<a:cs typeface=""/>';
          o6[o6.length] = '<a:font script="Jpan" typeface="\uFF2D\uFF33 \uFF30\u30B4\u30B7\u30C3\u30AF"/>';
          o6[o6.length] = '<a:font script="Hang" typeface="\uB9D1\uC740 \uACE0\uB515"/>';
          o6[o6.length] = '<a:font script="Hans" typeface="\u5B8B\u4F53"/>';
          o6[o6.length] = '<a:font script="Hant" typeface="\u65B0\u7D30\u660E\u9AD4"/>';
          o6[o6.length] = '<a:font script="Arab" typeface="Times New Roman"/>';
          o6[o6.length] = '<a:font script="Hebr" typeface="Times New Roman"/>';
          o6[o6.length] = '<a:font script="Thai" typeface="Tahoma"/>';
          o6[o6.length] = '<a:font script="Ethi" typeface="Nyala"/>';
          o6[o6.length] = '<a:font script="Beng" typeface="Vrinda"/>';
          o6[o6.length] = '<a:font script="Gujr" typeface="Shruti"/>';
          o6[o6.length] = '<a:font script="Khmr" typeface="MoolBoran"/>';
          o6[o6.length] = '<a:font script="Knda" typeface="Tunga"/>';
          o6[o6.length] = '<a:font script="Guru" typeface="Raavi"/>';
          o6[o6.length] = '<a:font script="Cans" typeface="Euphemia"/>';
          o6[o6.length] = '<a:font script="Cher" typeface="Plantagenet Cherokee"/>';
          o6[o6.length] = '<a:font script="Yiii" typeface="Microsoft Yi Baiti"/>';
          o6[o6.length] = '<a:font script="Tibt" typeface="Microsoft Himalaya"/>';
          o6[o6.length] = '<a:font script="Thaa" typeface="MV Boli"/>';
          o6[o6.length] = '<a:font script="Deva" typeface="Mangal"/>';
          o6[o6.length] = '<a:font script="Telu" typeface="Gautami"/>';
          o6[o6.length] = '<a:font script="Taml" typeface="Latha"/>';
          o6[o6.length] = '<a:font script="Syrc" typeface="Estrangelo Edessa"/>';
          o6[o6.length] = '<a:font script="Orya" typeface="Kalinga"/>';
          o6[o6.length] = '<a:font script="Mlym" typeface="Kartika"/>';
          o6[o6.length] = '<a:font script="Laoo" typeface="DokChampa"/>';
          o6[o6.length] = '<a:font script="Sinh" typeface="Iskoola Pota"/>';
          o6[o6.length] = '<a:font script="Mong" typeface="Mongolian Baiti"/>';
          o6[o6.length] = '<a:font script="Viet" typeface="Times New Roman"/>';
          o6[o6.length] = '<a:font script="Uigh" typeface="Microsoft Uighur"/>';
          o6[o6.length] = '<a:font script="Geor" typeface="Sylfaen"/>';
          o6[o6.length] = "</a:majorFont>";
          o6[o6.length] = "<a:minorFont>";
          o6[o6.length] = '<a:latin typeface="Calibri"/>';
          o6[o6.length] = '<a:ea typeface=""/>';
          o6[o6.length] = '<a:cs typeface=""/>';
          o6[o6.length] = '<a:font script="Jpan" typeface="\uFF2D\uFF33 \uFF30\u30B4\u30B7\u30C3\u30AF"/>';
          o6[o6.length] = '<a:font script="Hang" typeface="\uB9D1\uC740 \uACE0\uB515"/>';
          o6[o6.length] = '<a:font script="Hans" typeface="\u5B8B\u4F53"/>';
          o6[o6.length] = '<a:font script="Hant" typeface="\u65B0\u7D30\u660E\u9AD4"/>';
          o6[o6.length] = '<a:font script="Arab" typeface="Arial"/>';
          o6[o6.length] = '<a:font script="Hebr" typeface="Arial"/>';
          o6[o6.length] = '<a:font script="Thai" typeface="Tahoma"/>';
          o6[o6.length] = '<a:font script="Ethi" typeface="Nyala"/>';
          o6[o6.length] = '<a:font script="Beng" typeface="Vrinda"/>';
          o6[o6.length] = '<a:font script="Gujr" typeface="Shruti"/>';
          o6[o6.length] = '<a:font script="Khmr" typeface="DaunPenh"/>';
          o6[o6.length] = '<a:font script="Knda" typeface="Tunga"/>';
          o6[o6.length] = '<a:font script="Guru" typeface="Raavi"/>';
          o6[o6.length] = '<a:font script="Cans" typeface="Euphemia"/>';
          o6[o6.length] = '<a:font script="Cher" typeface="Plantagenet Cherokee"/>';
          o6[o6.length] = '<a:font script="Yiii" typeface="Microsoft Yi Baiti"/>';
          o6[o6.length] = '<a:font script="Tibt" typeface="Microsoft Himalaya"/>';
          o6[o6.length] = '<a:font script="Thaa" typeface="MV Boli"/>';
          o6[o6.length] = '<a:font script="Deva" typeface="Mangal"/>';
          o6[o6.length] = '<a:font script="Telu" typeface="Gautami"/>';
          o6[o6.length] = '<a:font script="Taml" typeface="Latha"/>';
          o6[o6.length] = '<a:font script="Syrc" typeface="Estrangelo Edessa"/>';
          o6[o6.length] = '<a:font script="Orya" typeface="Kalinga"/>';
          o6[o6.length] = '<a:font script="Mlym" typeface="Kartika"/>';
          o6[o6.length] = '<a:font script="Laoo" typeface="DokChampa"/>';
          o6[o6.length] = '<a:font script="Sinh" typeface="Iskoola Pota"/>';
          o6[o6.length] = '<a:font script="Mong" typeface="Mongolian Baiti"/>';
          o6[o6.length] = '<a:font script="Viet" typeface="Arial"/>';
          o6[o6.length] = '<a:font script="Uigh" typeface="Microsoft Uighur"/>';
          o6[o6.length] = '<a:font script="Geor" typeface="Sylfaen"/>';
          o6[o6.length] = "</a:minorFont>";
          o6[o6.length] = "</a:fontScheme>";
          o6[o6.length] = '<a:fmtScheme name="Office">';
          o6[o6.length] = "<a:fillStyleLst>";
          o6[o6.length] = '<a:solidFill><a:schemeClr val="phClr"/></a:solidFill>';
          o6[o6.length] = '<a:gradFill rotWithShape="1">';
          o6[o6.length] = "<a:gsLst>";
          o6[o6.length] = '<a:gs pos="0"><a:schemeClr val="phClr"><a:tint val="50000"/><a:satMod val="300000"/></a:schemeClr></a:gs>';
          o6[o6.length] = '<a:gs pos="35000"><a:schemeClr val="phClr"><a:tint val="37000"/><a:satMod val="300000"/></a:schemeClr></a:gs>';
          o6[o6.length] = '<a:gs pos="100000"><a:schemeClr val="phClr"><a:tint val="15000"/><a:satMod val="350000"/></a:schemeClr></a:gs>';
          o6[o6.length] = "</a:gsLst>";
          o6[o6.length] = '<a:lin ang="16200000" scaled="1"/>';
          o6[o6.length] = "</a:gradFill>";
          o6[o6.length] = '<a:gradFill rotWithShape="1">';
          o6[o6.length] = "<a:gsLst>";
          o6[o6.length] = '<a:gs pos="0"><a:schemeClr val="phClr"><a:tint val="100000"/><a:shade val="100000"/><a:satMod val="130000"/></a:schemeClr></a:gs>';
          o6[o6.length] = '<a:gs pos="100000"><a:schemeClr val="phClr"><a:tint val="50000"/><a:shade val="100000"/><a:satMod val="350000"/></a:schemeClr></a:gs>';
          o6[o6.length] = "</a:gsLst>";
          o6[o6.length] = '<a:lin ang="16200000" scaled="0"/>';
          o6[o6.length] = "</a:gradFill>";
          o6[o6.length] = "</a:fillStyleLst>";
          o6[o6.length] = "<a:lnStyleLst>";
          o6[o6.length] = '<a:ln w="9525" cap="flat" cmpd="sng" algn="ctr"><a:solidFill><a:schemeClr val="phClr"><a:shade val="95000"/><a:satMod val="105000"/></a:schemeClr></a:solidFill><a:prstDash val="solid"/></a:ln>';
          o6[o6.length] = '<a:ln w="25400" cap="flat" cmpd="sng" algn="ctr"><a:solidFill><a:schemeClr val="phClr"/></a:solidFill><a:prstDash val="solid"/></a:ln>';
          o6[o6.length] = '<a:ln w="38100" cap="flat" cmpd="sng" algn="ctr"><a:solidFill><a:schemeClr val="phClr"/></a:solidFill><a:prstDash val="solid"/></a:ln>';
          o6[o6.length] = "</a:lnStyleLst>";
          o6[o6.length] = "<a:effectStyleLst>";
          o6[o6.length] = "<a:effectStyle>";
          o6[o6.length] = "<a:effectLst>";
          o6[o6.length] = '<a:outerShdw blurRad="40000" dist="20000" dir="5400000" rotWithShape="0"><a:srgbClr val="000000"><a:alpha val="38000"/></a:srgbClr></a:outerShdw>';
          o6[o6.length] = "</a:effectLst>";
          o6[o6.length] = "</a:effectStyle>";
          o6[o6.length] = "<a:effectStyle>";
          o6[o6.length] = "<a:effectLst>";
          o6[o6.length] = '<a:outerShdw blurRad="40000" dist="23000" dir="5400000" rotWithShape="0"><a:srgbClr val="000000"><a:alpha val="35000"/></a:srgbClr></a:outerShdw>';
          o6[o6.length] = "</a:effectLst>";
          o6[o6.length] = "</a:effectStyle>";
          o6[o6.length] = "<a:effectStyle>";
          o6[o6.length] = "<a:effectLst>";
          o6[o6.length] = '<a:outerShdw blurRad="40000" dist="23000" dir="5400000" rotWithShape="0"><a:srgbClr val="000000"><a:alpha val="35000"/></a:srgbClr></a:outerShdw>';
          o6[o6.length] = "</a:effectLst>";
          o6[o6.length] = '<a:scene3d><a:camera prst="orthographicFront"><a:rot lat="0" lon="0" rev="0"/></a:camera><a:lightRig rig="threePt" dir="t"><a:rot lat="0" lon="0" rev="1200000"/></a:lightRig></a:scene3d>';
          o6[o6.length] = '<a:sp3d><a:bevelT w="63500" h="25400"/></a:sp3d>';
          o6[o6.length] = "</a:effectStyle>";
          o6[o6.length] = "</a:effectStyleLst>";
          o6[o6.length] = "<a:bgFillStyleLst>";
          o6[o6.length] = '<a:solidFill><a:schemeClr val="phClr"/></a:solidFill>';
          o6[o6.length] = '<a:gradFill rotWithShape="1">';
          o6[o6.length] = "<a:gsLst>";
          o6[o6.length] = '<a:gs pos="0"><a:schemeClr val="phClr"><a:tint val="40000"/><a:satMod val="350000"/></a:schemeClr></a:gs>';
          o6[o6.length] = '<a:gs pos="40000"><a:schemeClr val="phClr"><a:tint val="45000"/><a:shade val="99000"/><a:satMod val="350000"/></a:schemeClr></a:gs>';
          o6[o6.length] = '<a:gs pos="100000"><a:schemeClr val="phClr"><a:shade val="20000"/><a:satMod val="255000"/></a:schemeClr></a:gs>';
          o6[o6.length] = "</a:gsLst>";
          o6[o6.length] = '<a:path path="circle"><a:fillToRect l="50000" t="-80000" r="50000" b="180000"/></a:path>';
          o6[o6.length] = "</a:gradFill>";
          o6[o6.length] = '<a:gradFill rotWithShape="1">';
          o6[o6.length] = "<a:gsLst>";
          o6[o6.length] = '<a:gs pos="0"><a:schemeClr val="phClr"><a:tint val="80000"/><a:satMod val="300000"/></a:schemeClr></a:gs>';
          o6[o6.length] = '<a:gs pos="100000"><a:schemeClr val="phClr"><a:shade val="30000"/><a:satMod val="200000"/></a:schemeClr></a:gs>';
          o6[o6.length] = "</a:gsLst>";
          o6[o6.length] = '<a:path path="circle"><a:fillToRect l="50000" t="50000" r="50000" b="50000"/></a:path>';
          o6[o6.length] = "</a:gradFill>";
          o6[o6.length] = "</a:bgFillStyleLst>";
          o6[o6.length] = "</a:fmtScheme>";
          o6[o6.length] = "</a:themeElements>";
          o6[o6.length] = "<a:objectDefaults>";
          o6[o6.length] = "<a:spDef>";
          o6[o6.length] = '<a:spPr/><a:bodyPr/><a:lstStyle/><a:style><a:lnRef idx="1"><a:schemeClr val="accent1"/></a:lnRef><a:fillRef idx="3"><a:schemeClr val="accent1"/></a:fillRef><a:effectRef idx="2"><a:schemeClr val="accent1"/></a:effectRef><a:fontRef idx="minor"><a:schemeClr val="lt1"/></a:fontRef></a:style>';
          o6[o6.length] = "</a:spDef>";
          o6[o6.length] = "<a:lnDef>";
          o6[o6.length] = '<a:spPr/><a:bodyPr/><a:lstStyle/><a:style><a:lnRef idx="2"><a:schemeClr val="accent1"/></a:lnRef><a:fillRef idx="0"><a:schemeClr val="accent1"/></a:fillRef><a:effectRef idx="1"><a:schemeClr val="accent1"/></a:effectRef><a:fontRef idx="minor"><a:schemeClr val="tx1"/></a:fontRef></a:style>';
          o6[o6.length] = "</a:lnDef>";
          o6[o6.length] = "</a:objectDefaults>";
          o6[o6.length] = "<a:extraClrSchemeLst/>";
          o6[o6.length] = "</a:theme>";
          return o6.join("");
        }
        function parse_Theme(blob, length, opts) {
          var end = blob.l + length;
          var dwThemeVersion = blob.read_shift(4);
          if (dwThemeVersion === 124226)
            return;
          if (!opts.cellStyles) {
            blob.l = end;
            return;
          }
          var data = blob.slice(blob.l);
          blob.l = end;
          var zip;
          try {
            zip = zip_read(data, { type: "array" });
          } catch (e7) {
            return;
          }
          var themeXML = getzipstr(zip, "theme/theme/theme1.xml", true);
          if (!themeXML)
            return;
          return parse_theme_xml(themeXML, opts);
        }
        function parse_ColorTheme(blob) {
          return blob.read_shift(4);
        }
        function parse_FullColorExt(blob) {
          var o6 = {};
          o6.xclrType = blob.read_shift(2);
          o6.nTintShade = blob.read_shift(2);
          switch (o6.xclrType) {
            case 0:
              blob.l += 4;
              break;
            case 1:
              o6.xclrValue = parse_IcvXF(blob, 4);
              break;
            case 2:
              o6.xclrValue = parse_LongRGBA(blob, 4);
              break;
            case 3:
              o6.xclrValue = parse_ColorTheme(blob, 4);
              break;
            case 4:
              blob.l += 4;
              break;
          }
          blob.l += 8;
          return o6;
        }
        function parse_IcvXF(blob, length) {
          return parsenoop(blob, length);
        }
        function parse_XFExtGradient(blob, length) {
          return parsenoop(blob, length);
        }
        function parse_ExtProp(blob) {
          var extType = blob.read_shift(2);
          var cb = blob.read_shift(2) - 4;
          var o6 = [extType];
          switch (extType) {
            case 4:
            case 5:
            case 7:
            case 8:
            case 9:
            case 10:
            case 11:
            case 13:
              o6[1] = parse_FullColorExt(blob, cb);
              break;
            case 6:
              o6[1] = parse_XFExtGradient(blob, cb);
              break;
            case 14:
            case 15:
              o6[1] = blob.read_shift(cb === 1 ? 1 : 2);
              break;
            default:
              throw new Error("Unrecognized ExtProp type: " + extType + " " + cb);
          }
          return o6;
        }
        function parse_XFExt(blob, length) {
          var end = blob.l + length;
          blob.l += 2;
          var ixfe = blob.read_shift(2);
          blob.l += 2;
          var cexts = blob.read_shift(2);
          var ext = [];
          while (cexts-- > 0)
            ext.push(parse_ExtProp(blob, end - blob.l));
          return { ixfe, ext };
        }
        function update_xfext(xf, xfext) {
          xfext.forEach(function(xfe) {
            switch (xfe[0]) {
              case 4:
                break;
              case 5:
                break;
              case 6:
                break;
              case 7:
                break;
              case 8:
                break;
              case 9:
                break;
              case 10:
                break;
              case 11:
                break;
              case 13:
                break;
              case 14:
                break;
              case 15:
                break;
            }
          });
        }
        function parse_BrtMdtinfo(data, length) {
          return {
            flags: data.read_shift(4),
            version: data.read_shift(4),
            name: parse_XLWideString(data, length - 8)
          };
        }
        function write_BrtMdtinfo(data) {
          var o6 = new_buf(12 + 2 * data.name.length);
          o6.write_shift(4, data.flags);
          o6.write_shift(4, data.version);
          write_XLWideString(data.name, o6);
          return o6.slice(0, o6.l);
        }
        function parse_BrtMdb(data) {
          var out = [];
          var cnt = data.read_shift(4);
          while (cnt-- > 0)
            out.push([data.read_shift(4), data.read_shift(4)]);
          return out;
        }
        function write_BrtMdb(mdb) {
          var o6 = new_buf(4 + 8 * mdb.length);
          o6.write_shift(4, mdb.length);
          for (var i6 = 0; i6 < mdb.length; ++i6) {
            o6.write_shift(4, mdb[i6][0]);
            o6.write_shift(4, mdb[i6][1]);
          }
          return o6;
        }
        function write_BrtBeginEsfmd(cnt, name) {
          var o6 = new_buf(8 + 2 * name.length);
          o6.write_shift(4, cnt);
          write_XLWideString(name, o6);
          return o6.slice(0, o6.l);
        }
        function parse_BrtBeginEsmdb(data) {
          data.l += 4;
          return data.read_shift(4) != 0;
        }
        function write_BrtBeginEsmdb(cnt, cm) {
          var o6 = new_buf(8);
          o6.write_shift(4, cnt);
          o6.write_shift(4, cm ? 1 : 0);
          return o6;
        }
        function parse_xlmeta_bin(data, name, _opts) {
          var out = { Types: [], Cell: [], Value: [] };
          var opts = _opts || {};
          var state = [];
          var pass = false;
          var metatype = 2;
          recordhopper(data, function(val2, R2, RT) {
            switch (RT) {
              case 335:
                out.Types.push({ name: val2.name });
                break;
              case 51:
                val2.forEach(function(r6) {
                  if (metatype == 1)
                    out.Cell.push({ type: out.Types[r6[0] - 1].name, index: r6[1] });
                  else if (metatype == 0)
                    out.Value.push({ type: out.Types[r6[0] - 1].name, index: r6[1] });
                });
                break;
              case 337:
                metatype = val2 ? 1 : 0;
                break;
              case 338:
                metatype = 2;
                break;
              case 35:
                state.push(RT);
                pass = true;
                break;
              case 36:
                state.pop();
                pass = false;
                break;
              default:
                if (R2.T) {
                } else if (!pass || opts.WTF && state[state.length - 1] != 35)
                  throw new Error("Unexpected record 0x" + RT.toString(16));
            }
          });
          return out;
        }
        function write_xlmeta_bin() {
          var ba = buf_array();
          write_record(ba, 332);
          write_record(ba, 334, write_UInt32LE(1));
          write_record(ba, 335, write_BrtMdtinfo({
            name: "XLDAPR",
            version: 12e4,
            flags: 3496657072
          }));
          write_record(ba, 336);
          write_record(ba, 339, write_BrtBeginEsfmd(1, "XLDAPR"));
          write_record(ba, 52);
          write_record(ba, 35, write_UInt32LE(514));
          write_record(ba, 4096, write_UInt32LE(0));
          write_record(ba, 4097, writeuint16(1));
          write_record(ba, 36);
          write_record(ba, 53);
          write_record(ba, 340);
          write_record(ba, 337, write_BrtBeginEsmdb(1, true));
          write_record(ba, 51, write_BrtMdb([[1, 0]]));
          write_record(ba, 338);
          write_record(ba, 333);
          return ba.end();
        }
        function parse_xlmeta_xml(data, name, opts) {
          var out = { Types: [], Cell: [], Value: [] };
          if (!data)
            return out;
          var pass = false;
          var metatype = 2;
          var lastmeta;
          data.replace(tagregex, function(x3) {
            var y4 = parsexmltag(x3);
            switch (strip_ns(y4[0])) {
              case "<?xml":
                break;
              case "<metadata":
              case "</metadata>":
                break;
              case "<metadataTypes":
              case "</metadataTypes>":
                break;
              case "<metadataType":
                out.Types.push({ name: y4.name });
                break;
              case "</metadataType>":
                break;
              case "<futureMetadata":
                for (var j3 = 0; j3 < out.Types.length; ++j3)
                  if (out.Types[j3].name == y4.name)
                    lastmeta = out.Types[j3];
                break;
              case "</futureMetadata>":
                break;
              case "<bk>":
                break;
              case "</bk>":
                break;
              case "<rc":
                if (metatype == 1)
                  out.Cell.push({ type: out.Types[y4.t - 1].name, index: +y4.v });
                else if (metatype == 0)
                  out.Value.push({ type: out.Types[y4.t - 1].name, index: +y4.v });
                break;
              case "</rc>":
                break;
              case "<cellMetadata":
                metatype = 1;
                break;
              case "</cellMetadata>":
                metatype = 2;
                break;
              case "<valueMetadata":
                metatype = 0;
                break;
              case "</valueMetadata>":
                metatype = 2;
                break;
              case "<extLst":
              case "<extLst>":
              case "</extLst>":
              case "<extLst/>":
                break;
              case "<ext":
                pass = true;
                break;
              case "</ext>":
                pass = false;
                break;
              case "<rvb":
                if (!lastmeta)
                  break;
                if (!lastmeta.offsets)
                  lastmeta.offsets = [];
                lastmeta.offsets.push(+y4.i);
                break;
              default:
                if (!pass && (opts == null ? void 0 : opts.WTF))
                  throw new Error("unrecognized " + y4[0] + " in metadata");
            }
            return x3;
          });
          return out;
        }
        function write_xlmeta_xml() {
          var o6 = [XML_HEADER];
          o6.push('<metadata xmlns="http://schemas.openxmlformats.org/spreadsheetml/2006/main" xmlns:xlrd="http://schemas.microsoft.com/office/spreadsheetml/2017/richdata" xmlns:xda="http://schemas.microsoft.com/office/spreadsheetml/2017/dynamicarray">\n  <metadataTypes count="1">\n    <metadataType name="XLDAPR" minSupportedVersion="120000" copy="1" pasteAll="1" pasteValues="1" merge="1" splitFirst="1" rowColShift="1" clearFormats="1" clearComments="1" assign="1" coerce="1" cellMeta="1"/>\n  </metadataTypes>\n  <futureMetadata name="XLDAPR" count="1">\n    <bk>\n      <extLst>\n        <ext uri="{bdbb8cdc-fa1e-496e-a857-3c3f30c029c3}">\n          <xda:dynamicArrayProperties fDynamic="1" fCollapsed="0"/>\n        </ext>\n      </extLst>\n    </bk>\n  </futureMetadata>\n  <cellMetadata count="1">\n    <bk>\n      <rc t="1" v="0"/>\n    </bk>\n  </cellMetadata>\n</metadata>');
          return o6.join("");
        }
        function parse_cc_xml(data) {
          var d2 = [];
          if (!data)
            return d2;
          var i6 = 1;
          (data.match(tagregex) || []).forEach(function(x3) {
            var y4 = parsexmltag(x3);
            switch (y4[0]) {
              case "<?xml":
                break;
              case "<calcChain":
              case "<calcChain>":
              case "</calcChain>":
                break;
              case "<c":
                delete y4[0];
                if (y4.i)
                  i6 = y4.i;
                else
                  y4.i = i6;
                d2.push(y4);
                break;
            }
          });
          return d2;
        }
        function parse_BrtCalcChainItem$(data) {
          var out = {};
          out.i = data.read_shift(4);
          var cell = {};
          cell.r = data.read_shift(4);
          cell.c = data.read_shift(4);
          out.r = encode_cell(cell);
          var flags = data.read_shift(1);
          if (flags & 2)
            out.l = "1";
          if (flags & 8)
            out.a = "1";
          return out;
        }
        function parse_cc_bin(data, name, opts) {
          var out = [];
          var pass = false;
          recordhopper(data, function hopper_cc(val2, R2, RT) {
            switch (RT) {
              case 63:
                out.push(val2);
                break;
              default:
                if (R2.T) {
                } else if (!pass || opts.WTF)
                  throw new Error("Unexpected record 0x" + RT.toString(16));
            }
          });
          return out;
        }
        function parse_xlink_xml() {
        }
        function parse_xlink_bin(data, rel, name, _opts) {
          if (!data)
            return data;
          var opts = _opts || {};
          var pass = false, end = false;
          recordhopper(data, function xlink_parse(val2, R2, RT) {
            if (end)
              return;
            switch (RT) {
              case 359:
              case 363:
              case 364:
              case 366:
              case 367:
              case 368:
              case 369:
              case 370:
              case 371:
              case 472:
              case 577:
              case 578:
              case 579:
              case 580:
              case 581:
              case 582:
              case 583:
              case 584:
              case 585:
              case 586:
              case 587:
                break;
              case 35:
                pass = true;
                break;
              case 36:
                pass = false;
                break;
              default:
                if (R2.T) {
                } else if (!pass || opts.WTF)
                  throw new Error("Unexpected record 0x" + RT.toString(16));
            }
          }, opts);
        }
        function parse_drawing(data, rels) {
          if (!data)
            return "??";
          var id = (data.match(/<c:chart [^<>]*r:id="([^<>"]*)"/) || ["", ""])[1];
          return rels["!id"][id].Target;
        }
        function parse_vml(data, sheet, comments) {
          var cidx = 0;
          (str_match_xml_ns_g(data, "shape") || []).forEach(function(m4) {
            var type = "";
            var hidden = true;
            var aidx = -1;
            var R2 = -1, C6 = -1;
            m4.replace(tagregex, function(x3, idx) {
              var y4 = parsexmltag(x3);
              switch (strip_ns(y4[0])) {
                case "<ClientData":
                  if (y4.ObjectType)
                    type = y4.ObjectType;
                  break;
                case "<Visible":
                case "<Visible/>":
                  hidden = false;
                  break;
                case "<Row":
                case "<Row>":
                  aidx = idx + x3.length;
                  break;
                case "</Row>":
                  R2 = +m4.slice(aidx, idx).trim();
                  break;
                case "<Column":
                case "<Column>":
                  aidx = idx + x3.length;
                  break;
                case "</Column>":
                  C6 = +m4.slice(aidx, idx).trim();
                  break;
              }
              return "";
            });
            switch (type) {
              case "Note":
                var cell = ws_get_cell_stub(sheet, R2 >= 0 && C6 >= 0 ? encode_cell({ r: R2, c: C6 }) : comments[cidx].ref);
                if (cell.c) {
                  cell.c.hidden = hidden;
                }
                ++cidx;
                break;
            }
          });
        }
        function write_vml(rId, comments, ws) {
          var csize = [21600, 21600];
          var bbox = ["m0,0l0", csize[1], csize[0], csize[1], csize[0], "0xe"].join(",");
          var o6 = [
            writextag("xml", null, { "xmlns:v": XLMLNS.v, "xmlns:o": XLMLNS.o, "xmlns:x": XLMLNS.x, "xmlns:mv": XLMLNS.mv }).replace(/\/>/, ">"),
            writextag("o:shapelayout", writextag("o:idmap", null, { "v:ext": "edit", "data": rId }), { "v:ext": "edit" })
          ];
          var _shapeid = 65536 * rId;
          var _comments = comments || [];
          if (_comments.length > 0)
            o6.push(writextag("v:shapetype", [
              writextag("v:stroke", null, { joinstyle: "miter" }),
              writextag("v:path", null, { gradientshapeok: "t", "o:connecttype": "rect" })
            ].join(""), { id: "_x0000_t202", coordsize: csize.join(","), "o:spt": 202, path: bbox }));
          _comments.forEach(function(x3) {
            ++_shapeid;
            o6.push(write_vml_comment(x3, _shapeid));
          });
          o6.push("</xml>");
          return o6.join("");
        }
        function write_vml_comment(x3, _shapeid, ws) {
          var c8 = decode_cell(x3[0]);
          var fillopts = { "color2": "#BEFF82", "type": "gradient" };
          if (fillopts.type == "gradient")
            fillopts.angle = "-180";
          var fillparm = fillopts.type == "gradient" ? writextag("o:fill", null, { type: "gradientUnscaled", "v:ext": "view" }) : null;
          var fillxml = writextag("v:fill", fillparm, fillopts);
          var shadata = { on: "t", "obscured": "t" };
          return [
            "<v:shape" + wxt_helper({
              id: "_x0000_s" + _shapeid,
              type: "#_x0000_t202",
              style: "position:absolute; margin-left:80pt;margin-top:5pt;width:104pt;height:64pt;z-index:10" + (x3[1].hidden ? ";visibility:hidden" : ""),
              fillcolor: "#ECFAD4",
              strokecolor: "#edeaa1"
            }) + ">",
            fillxml,
            writextag("v:shadow", null, shadata),
            writextag("v:path", null, { "o:connecttype": "none" }),
            '<v:textbox><div style="text-align:left"></div></v:textbox>',
            '<x:ClientData ObjectType="Note">',
            "<x:MoveWithCells/>",
            "<x:SizeWithCells/>",
            writetag("x:Anchor", [c8.c + 1, 0, c8.r + 1, 0, c8.c + 3, 20, c8.r + 5, 20].join(",")),
            writetag("x:AutoFill", "False"),
            writetag("x:Row", String(c8.r)),
            writetag("x:Column", String(c8.c)),
            x3[1].hidden ? "" : "<x:Visible/>",
            "</x:ClientData>",
            "</v:shape>"
          ].join("");
        }
        function sheet_insert_comments(sheet, comments, threaded, people) {
          var dense = sheet["!data"] != null;
          var cell;
          comments.forEach(function(comment) {
            var r6 = decode_cell(comment.ref);
            if (r6.r < 0 || r6.c < 0)
              return;
            if (dense) {
              if (!sheet["!data"][r6.r])
                sheet["!data"][r6.r] = [];
              cell = sheet["!data"][r6.r][r6.c];
            } else
              cell = sheet[comment.ref];
            if (!cell) {
              cell = { t: "z" };
              if (dense)
                sheet["!data"][r6.r][r6.c] = cell;
              else
                sheet[comment.ref] = cell;
              var range = safe_decode_range(sheet["!ref"] || "BDWGO1000001:A1");
              if (range.s.r > r6.r)
                range.s.r = r6.r;
              if (range.e.r < r6.r)
                range.e.r = r6.r;
              if (range.s.c > r6.c)
                range.s.c = r6.c;
              if (range.e.c < r6.c)
                range.e.c = r6.c;
              var encoded = encode_range(range);
              sheet["!ref"] = encoded;
            }
            if (!cell.c)
              cell.c = [];
            var o6 = { a: comment.author, t: comment.t, r: comment.r, T: threaded };
            if (comment.h)
              o6.h = comment.h;
            for (var i6 = cell.c.length - 1; i6 >= 0; --i6) {
              if (!threaded && cell.c[i6].T)
                return;
              if (threaded && !cell.c[i6].T)
                cell.c.splice(i6, 1);
            }
            if (threaded && people)
              for (i6 = 0; i6 < people.length; ++i6) {
                if (o6.a == people[i6].id) {
                  o6.a = people[i6].name || o6.a;
                  break;
                }
              }
            cell.c.push(o6);
          });
        }
        function parse_comments_xml(data, opts) {
          if (data.match(/<(?:\w+:)?comments *\/>/))
            return [];
          var authors = [];
          var commentList = [];
          var authtag = str_match_xml_ns(data, "authors");
          if (authtag && authtag[1])
            authtag[1].split(/<\/\w*:?author>/).forEach(function(x3) {
              if (x3 === "" || x3.trim() === "")
                return;
              var a2 = x3.match(/<(?:\w+:)?author[^<>]*>(.*)/);
              if (a2)
                authors.push(a2[1]);
            });
          var cmnttag = str_match_xml_ns(data, "commentList");
          if (cmnttag && cmnttag[1])
            cmnttag[1].split(/<\/\w*:?comment>/).forEach(function(x3) {
              if (x3 === "" || x3.trim() === "")
                return;
              var cm = x3.match(/<(?:\w+:)?comment[^<>]*>/);
              if (!cm)
                return;
              var y4 = parsexmltag(cm[0]);
              var comment = { author: y4.authorId && authors[y4.authorId] || "sheetjsghost", ref: y4.ref, guid: y4.guid };
              var cell = decode_cell(y4.ref);
              if (opts.sheetRows && opts.sheetRows <= cell.r)
                return;
              var textMatch = str_match_xml_ns(x3, "text");
              var rt2 = !!textMatch && !!textMatch[1] && parse_si(textMatch[1]) || { r: "", t: "", h: "" };
              comment.r = rt2.r;
              if (rt2.r == "<t></t>")
                rt2.t = rt2.h = "";
              comment.t = (rt2.t || "").replace(/\r\n/g, "\n").replace(/\r/g, "\n");
              if (opts.cellHTML)
                comment.h = rt2.h;
              commentList.push(comment);
            });
          return commentList;
        }
        function write_comments_xml(data) {
          var o6 = [XML_HEADER, writextag("comments", null, { "xmlns": XMLNS_main[0] })];
          var iauthor = [];
          o6.push("<authors>");
          data.forEach(function(x3) {
            x3[1].forEach(function(w3) {
              var a2 = escapexml(w3.a);
              if (iauthor.indexOf(a2) == -1) {
                iauthor.push(a2);
                o6.push("<author>" + a2 + "</author>");
              }
              if (w3.T && w3.ID && iauthor.indexOf("tc=" + w3.ID) == -1) {
                iauthor.push("tc=" + w3.ID);
                o6.push("<author>tc=" + w3.ID + "</author>");
              }
            });
          });
          if (iauthor.length == 0) {
            iauthor.push("SheetJ5");
            o6.push("<author>SheetJ5</author>");
          }
          o6.push("</authors>");
          o6.push("<commentList>");
          data.forEach(function(d2) {
            var lastauthor = 0, ts2 = [], tcnt = 0;
            if (d2[1][0] && d2[1][0].T && d2[1][0].ID)
              lastauthor = iauthor.indexOf("tc=" + d2[1][0].ID);
            d2[1].forEach(function(c8) {
              if (c8.a)
                lastauthor = iauthor.indexOf(escapexml(c8.a));
              if (c8.T)
                ++tcnt;
              ts2.push(c8.t == null ? "" : escapexml(c8.t));
            });
            if (tcnt === 0) {
              d2[1].forEach(function(c8) {
                o6.push('<comment ref="' + d2[0] + '" authorId="' + iauthor.indexOf(escapexml(c8.a)) + '"><text>');
                o6.push(writetag("t", c8.t == null ? "" : escapexml(c8.t)));
                o6.push("</text></comment>");
              });
            } else {
              if (d2[1][0] && d2[1][0].T && d2[1][0].ID)
                lastauthor = iauthor.indexOf("tc=" + d2[1][0].ID);
              o6.push('<comment ref="' + d2[0] + '" authorId="' + lastauthor + '"><text>');
              var t5 = "Comment:\n    " + ts2[0] + "\n";
              for (var i6 = 1; i6 < ts2.length; ++i6)
                t5 += "Reply:\n    " + ts2[i6] + "\n";
              o6.push(writetag("t", escapexml(t5)));
              o6.push("</text></comment>");
            }
          });
          o6.push("</commentList>");
          if (o6.length > 2) {
            o6[o6.length] = "</comments>";
            o6[1] = o6[1].replace("/>", ">");
          }
          return o6.join("");
        }
        function parse_tcmnt_xml(data, opts) {
          var out = [];
          var pass = false, comment = {}, tidx = 0;
          data.replace(tagregex, function xml_tcmnt(x3, idx) {
            var y4 = parsexmltag(x3);
            switch (strip_ns(y4[0])) {
              case "<?xml":
                break;
              case "<ThreadedComments":
                break;
              case "</ThreadedComments>":
                break;
              case "<threadedComment":
                comment = { author: y4.personId, guid: y4.id, ref: y4.ref, T: 1 };
                break;
              case "</threadedComment>":
                if (comment.t != null)
                  out.push(comment);
                break;
              case "<text>":
              case "<text":
                tidx = idx + x3.length;
                break;
              case "</text>":
                comment.t = data.slice(tidx, idx).replace(/\r\n/g, "\n").replace(/\r/g, "\n");
                break;
              case "<mentions":
              case "<mentions>":
                pass = true;
                break;
              case "</mentions>":
                pass = false;
                break;
              case "<extLst":
              case "<extLst>":
              case "</extLst>":
              case "<extLst/>":
                break;
              case "<ext":
                pass = true;
                break;
              case "</ext>":
                pass = false;
                break;
              default:
                if (!pass && opts.WTF)
                  throw new Error("unrecognized " + y4[0] + " in threaded comments");
            }
            return x3;
          });
          return out;
        }
        function write_tcmnt_xml(comments, people, opts) {
          var o6 = [XML_HEADER, writextag("ThreadedComments", null, { "xmlns": XMLNS.TCMNT }).replace(/[\/]>/, ">")];
          comments.forEach(function(carr) {
            var rootid = "";
            (carr[1] || []).forEach(function(c8, idx) {
              if (!c8.T) {
                delete c8.ID;
                return;
              }
              if (c8.a && people.indexOf(c8.a) == -1)
                people.push(c8.a);
              var tcopts = {
                ref: carr[0],
                id: "{54EE7951-7262-4200-6969-" + ("000000000000" + opts.tcid++).slice(-12) + "}"
              };
              if (idx == 0)
                rootid = tcopts.id;
              else
                tcopts.parentId = rootid;
              c8.ID = tcopts.id;
              if (c8.a)
                tcopts.personId = "{54EE7950-7262-4200-6969-" + ("000000000000" + people.indexOf(c8.a)).slice(-12) + "}";
              o6.push(writextag("threadedComment", writetag("text", c8.t || ""), tcopts));
            });
          });
          o6.push("</ThreadedComments>");
          return o6.join("");
        }
        function parse_people_xml(data, opts) {
          var out = [];
          var pass = false;
          data.replace(tagregex, function xml_tcmnt(x3) {
            var y4 = parsexmltag(x3);
            switch (strip_ns(y4[0])) {
              case "<?xml":
                break;
              case "<personList":
                break;
              case "</personList>":
                break;
              case "<person":
                out.push({ name: y4.displayname, id: y4.id });
                break;
              case "</person>":
                break;
              case "<extLst":
              case "<extLst>":
              case "</extLst>":
              case "<extLst/>":
                break;
              case "<ext":
                pass = true;
                break;
              case "</ext>":
                pass = false;
                break;
              default:
                if (!pass && opts.WTF)
                  throw new Error("unrecognized " + y4[0] + " in threaded comments");
            }
            return x3;
          });
          return out;
        }
        function write_people_xml(people) {
          var o6 = [XML_HEADER, writextag("personList", null, {
            "xmlns": XMLNS.TCMNT,
            "xmlns:x": XMLNS_main[0]
          }).replace(/[\/]>/, ">")];
          people.forEach(function(person, idx) {
            o6.push(writextag("person", null, {
              displayName: person,
              id: "{54EE7950-7262-4200-6969-" + ("000000000000" + idx).slice(-12) + "}",
              userId: person,
              providerId: "None"
            }));
          });
          o6.push("</personList>");
          return o6.join("");
        }
        function parse_BrtBeginComment(data) {
          var out = {};
          out.iauthor = data.read_shift(4);
          var rfx = parse_UncheckedRfX(data, 16);
          out.rfx = rfx.s;
          out.ref = encode_cell(rfx.s);
          data.l += 16;
          return out;
        }
        function write_BrtBeginComment(data, o6) {
          if (o6 == null)
            o6 = new_buf(36);
          o6.write_shift(4, data[1].iauthor);
          write_UncheckedRfX(data[0], o6);
          o6.write_shift(4, 0);
          o6.write_shift(4, 0);
          o6.write_shift(4, 0);
          o6.write_shift(4, 0);
          return o6;
        }
        var parse_BrtCommentAuthor = parse_XLWideString;
        function write_BrtCommentAuthor(data) {
          return write_XLWideString(data.slice(0, 54));
        }
        function parse_comments_bin(data, opts) {
          var out = [];
          var authors = [];
          var c8 = {};
          var pass = false;
          recordhopper(data, function hopper_cmnt(val2, R2, RT) {
            switch (RT) {
              case 632:
                authors.push(val2);
                break;
              case 635:
                c8 = val2;
                break;
              case 637:
                c8.t = val2.t;
                c8.h = val2.h;
                c8.r = val2.r;
                break;
              case 636:
                c8.author = authors[c8.iauthor];
                delete c8.iauthor;
                if (opts.sheetRows && c8.rfx && opts.sheetRows <= c8.rfx.r)
                  break;
                if (!c8.t)
                  c8.t = "";
                delete c8.rfx;
                out.push(c8);
                break;
              case 3072:
                break;
              case 35:
                pass = true;
                break;
              case 36:
                pass = false;
                break;
              case 37:
                break;
              case 38:
                break;
              default:
                if (R2.T) {
                } else if (!pass || opts.WTF)
                  throw new Error("Unexpected record 0x" + RT.toString(16));
            }
          });
          return out;
        }
        function write_comments_bin(data) {
          var ba = buf_array();
          var iauthor = [];
          write_record(ba, 628);
          write_record(ba, 630);
          data.forEach(function(comment) {
            comment[1].forEach(function(c8) {
              if (iauthor.indexOf(c8.a) > -1)
                return;
              iauthor.push(c8.a.slice(0, 54));
              write_record(ba, 632, write_BrtCommentAuthor(c8.a));
              if (c8.T && c8.ID && iauthor.indexOf("tc=" + c8.ID) == -1) {
                iauthor.push("tc=" + c8.ID);
                write_record(ba, 632, write_BrtCommentAuthor("tc=" + c8.ID));
              }
            });
          });
          write_record(ba, 631);
          write_record(ba, 633);
          data.forEach(function(comment) {
            comment[1].forEach(function(c8) {
              var _ia = -1;
              if (c8.ID)
                _ia = iauthor.indexOf("tc=" + c8.ID);
              if (_ia == -1 && comment[1][0].T && comment[1][0].ID)
                _ia = iauthor.indexOf("tc=" + comment[1][0].ID);
              if (_ia == -1)
                _ia = iauthor.indexOf(c8.a);
              c8.iauthor = _ia;
              var range = { s: decode_cell(comment[0]), e: decode_cell(comment[0]) };
              write_record(ba, 635, write_BrtBeginComment([range, c8]));
              if (c8.t && c8.t.length > 0)
                write_record(ba, 637, write_BrtCommentText(c8));
              write_record(ba, 636);
              delete c8.iauthor;
            });
          });
          write_record(ba, 634);
          write_record(ba, 629);
          return ba.end();
        }
        var CT_VBA = "application/vnd.ms-office.vbaProject";
        function make_vba_xls(cfb) {
          var newcfb = CFB.utils.cfb_new({ root: "R" });
          cfb.FullPaths.forEach(function(p2, i6) {
            if (p2.slice(-1) === "/" || !p2.match(/_VBA_PROJECT_CUR/))
              return;
            var newpath = p2.replace(/^[^\/]*/, "R").replace(/\/_VBA_PROJECT_CUR\u0000*/, "");
            CFB.utils.cfb_add(newcfb, newpath, cfb.FileIndex[i6].content);
          });
          return CFB.write(newcfb);
        }
        function fill_vba_xls(cfb, vba) {
          vba.FullPaths.forEach(function(p2, i6) {
            if (i6 == 0)
              return;
            var newpath = p2.replace(/^[\/]*[^\/]*[\/]/, "/_VBA_PROJECT_CUR/");
            if (newpath.slice(-1) !== "/")
              CFB.utils.cfb_add(cfb, newpath, vba.FileIndex[i6].content);
          });
        }
        var VBAFMTS = ["xlsb", "xlsm", "xlam", "biff8", "xla"];
        function parse_ds_bin() {
          return { "!type": "dialog" };
        }
        function parse_ds_xml() {
          return { "!type": "dialog" };
        }
        function parse_ms_bin() {
          return { "!type": "macro" };
        }
        function parse_ms_xml() {
          return { "!type": "macro" };
        }
        var rc_to_a1 = function() {
          var rcregex = /(^|[^A-Za-z_])R(\[?-?\d+\]|[1-9]\d*|)C(\[?-?\d+\]|[1-9]\d*|)(?![A-Za-z0-9_])/g;
          var rcbase = { r: 0, c: 0 };
          function rcfunc($$, $1, $22, $3) {
            var cRel = false, rRel = false;
            if ($22.length == 0)
              rRel = true;
            else if ($22.charAt(0) == "[") {
              rRel = true;
              $22 = $22.slice(1, -1);
            }
            if ($3.length == 0)
              cRel = true;
            else if ($3.charAt(0) == "[") {
              cRel = true;
              $3 = $3.slice(1, -1);
            }
            var R2 = $22.length > 0 ? parseInt($22, 10) | 0 : 0, C6 = $3.length > 0 ? parseInt($3, 10) | 0 : 0;
            if (cRel)
              C6 += rcbase.c;
            else
              --C6;
            if (rRel)
              R2 += rcbase.r;
            else
              --R2;
            return $1 + (cRel ? "" : "$") + encode_col(C6) + (rRel ? "" : "$") + encode_row(R2);
          }
          return function rc_to_a12(fstr, base) {
            rcbase = base;
            return fstr.replace(rcregex, rcfunc);
          };
        }();
        var crefregex = /(^|[^._A-Z0-9])(\$?)([A-Z]{1,2}|[A-W][A-Z]{2}|X[A-E][A-Z]|XF[A-D])(\$?)(\d{1,7})(?![_.\(A-Za-z0-9])/g;
        try {
          crefregex = /(^|[^._A-Z0-9])([$]?)([A-Z]{1,2}|[A-W][A-Z]{2}|X[A-E][A-Z]|XF[A-D])([$]?)(10[0-3]\d{4}|104[0-7]\d{3}|1048[0-4]\d{2}|10485[0-6]\d|104857[0-6]|[1-9]\d{0,5})(?![_.\(A-Za-z0-9])/g;
        } catch (e7) {
        }
        var a1_to_rc = function() {
          return function a1_to_rc2(fstr, base) {
            return fstr.replace(crefregex, function($0, $1, $22, $3, $4, $5) {
              var c8 = decode_col($3) - ($22 ? 0 : base.c);
              var r6 = decode_row($5) - ($4 ? 0 : base.r);
              var R2 = $4 == "$" ? r6 + 1 : r6 == 0 ? "" : "[" + r6 + "]";
              var C6 = $22 == "$" ? c8 + 1 : c8 == 0 ? "" : "[" + c8 + "]";
              return $1 + "R" + R2 + "C" + C6;
            });
          };
        }();
        function shift_formula_str(f2, delta) {
          return f2.replace(crefregex, function($0, $1, $22, $3, $4, $5) {
            return $1 + ($22 == "$" ? $22 + $3 : encode_col(decode_col($3) + delta.c)) + ($4 == "$" ? $4 + $5 : encode_row(decode_row($5) + delta.r));
          });
        }
        function shift_formula_xlsx(f2, range, cell) {
          var r6 = decode_range(range), s3 = r6.s, c8 = decode_cell(cell);
          var delta = { r: c8.r - s3.r, c: c8.c - s3.c };
          return shift_formula_str(f2, delta);
        }
        function fuzzyfmla(f2) {
          if (f2.length == 1)
            return false;
          return true;
        }
        function _xlfn(f2) {
          return f2.replace(/_xlfn\./g, "");
        }
        function parseread1(blob) {
          blob.l += 1;
          return;
        }
        function parse_ColRelU(blob, length) {
          var c8 = blob.read_shift(length == 1 ? 1 : 2);
          return [c8 & 16383, c8 >> 14 & 1, c8 >> 15 & 1];
        }
        function parse_RgceArea(blob, length, opts) {
          var w3 = 2;
          if (opts) {
            if (opts.biff >= 2 && opts.biff <= 5)
              return parse_RgceArea_BIFF2(blob, length, opts);
            else if (opts.biff == 12)
              w3 = 4;
          }
          var r6 = blob.read_shift(w3), R2 = blob.read_shift(w3);
          var c8 = parse_ColRelU(blob, 2);
          var C6 = parse_ColRelU(blob, 2);
          return { s: { r: r6, c: c8[0], cRel: c8[1], rRel: c8[2] }, e: { r: R2, c: C6[0], cRel: C6[1], rRel: C6[2] } };
        }
        function parse_RgceArea_BIFF2(blob) {
          var r6 = parse_ColRelU(blob, 2), R2 = parse_ColRelU(blob, 2);
          var c8 = blob.read_shift(1);
          var C6 = blob.read_shift(1);
          return { s: { r: r6[0], c: c8, cRel: r6[1], rRel: r6[2] }, e: { r: R2[0], c: C6, cRel: R2[1], rRel: R2[2] } };
        }
        function parse_RgceAreaRel(blob, length, opts) {
          if (opts.biff < 8)
            return parse_RgceArea_BIFF2(blob, length, opts);
          var r6 = blob.read_shift(opts.biff == 12 ? 4 : 2), R2 = blob.read_shift(opts.biff == 12 ? 4 : 2);
          var c8 = parse_ColRelU(blob, 2);
          var C6 = parse_ColRelU(blob, 2);
          return { s: { r: r6, c: c8[0], cRel: c8[1], rRel: c8[2] }, e: { r: R2, c: C6[0], cRel: C6[1], rRel: C6[2] } };
        }
        function parse_RgceLoc(blob, length, opts) {
          if (opts && opts.biff >= 2 && opts.biff <= 5)
            return parse_RgceLoc_BIFF2(blob, length, opts);
          var r6 = blob.read_shift(opts && opts.biff == 12 ? 4 : 2);
          var c8 = parse_ColRelU(blob, 2);
          return { r: r6, c: c8[0], cRel: c8[1], rRel: c8[2] };
        }
        function parse_RgceLoc_BIFF2(blob) {
          var r6 = parse_ColRelU(blob, 2);
          var c8 = blob.read_shift(1);
          return { r: r6[0], c: c8, cRel: r6[1], rRel: r6[2] };
        }
        function parse_RgceElfLoc(blob) {
          var r6 = blob.read_shift(2);
          var c8 = blob.read_shift(2);
          return { r: r6, c: c8 & 255, fQuoted: !!(c8 & 16384), cRel: c8 >> 15, rRel: c8 >> 15 };
        }
        function parse_RgceLocRel(blob, length, opts) {
          var biff = opts && opts.biff ? opts.biff : 8;
          if (biff >= 2 && biff <= 5)
            return parse_RgceLocRel_BIFF2(blob, length, opts);
          var r6 = blob.read_shift(biff >= 12 ? 4 : 2);
          var cl = blob.read_shift(2);
          var cRel = (cl & 16384) >> 14, rRel = (cl & 32768) >> 15;
          cl &= 16383;
          if (rRel == 1)
            while (r6 > 524287)
              r6 -= 1048576;
          if (cRel == 1)
            while (cl > 8191)
              cl = cl - 16384;
          return { r: r6, c: cl, cRel, rRel };
        }
        function parse_RgceLocRel_BIFF2(blob) {
          var rl = blob.read_shift(2);
          var c8 = blob.read_shift(1);
          var rRel = (rl & 32768) >> 15, cRel = (rl & 16384) >> 14;
          rl &= 16383;
          if (rRel == 1 && rl >= 8192)
            rl = rl - 16384;
          if (cRel == 1 && c8 >= 128)
            c8 = c8 - 256;
          return { r: rl, c: c8, cRel, rRel };
        }
        function parse_PtgArea(blob, length, opts) {
          var type = (blob[blob.l++] & 96) >> 5;
          var area = parse_RgceArea(blob, opts.biff >= 2 && opts.biff <= 5 ? 6 : 8, opts);
          return [type, area];
        }
        function parse_PtgArea3d(blob, length, opts) {
          var type = (blob[blob.l++] & 96) >> 5;
          var ixti = blob.read_shift(2, "i");
          var w3 = 8;
          if (opts)
            switch (opts.biff) {
              case 5:
                blob.l += 12;
                w3 = 6;
                break;
              case 12:
                w3 = 12;
                break;
            }
          var area = parse_RgceArea(blob, w3, opts);
          return [type, ixti, area];
        }
        function parse_PtgAreaErr(blob, length, opts) {
          var type = (blob[blob.l++] & 96) >> 5;
          blob.l += opts && opts.biff > 8 ? 12 : opts.biff < 8 ? 6 : 8;
          return [type];
        }
        function parse_PtgAreaErr3d(blob, length, opts) {
          var type = (blob[blob.l++] & 96) >> 5;
          var ixti = blob.read_shift(2);
          var w3 = 8;
          if (opts)
            switch (opts.biff) {
              case 5:
                blob.l += 12;
                w3 = 6;
                break;
              case 12:
                w3 = 12;
                break;
            }
          blob.l += w3;
          return [type, ixti];
        }
        function parse_PtgAreaN(blob, length, opts) {
          var type = (blob[blob.l++] & 96) >> 5;
          var area = parse_RgceAreaRel(blob, length - 1, opts);
          return [type, area];
        }
        function parse_PtgArray(blob, length, opts) {
          var type = (blob[blob.l++] & 96) >> 5;
          blob.l += opts.biff == 2 ? 6 : opts.biff == 12 ? 14 : 7;
          return [type];
        }
        function parse_PtgAttrBaxcel(blob) {
          var bitSemi = blob[blob.l + 1] & 1;
          var bitBaxcel = 1;
          blob.l += 4;
          return [bitSemi, bitBaxcel];
        }
        function parse_PtgAttrChoose(blob, length, opts) {
          blob.l += 2;
          var offset = blob.read_shift(opts && opts.biff == 2 ? 1 : 2);
          var o6 = [];
          for (var i6 = 0; i6 <= offset; ++i6)
            o6.push(blob.read_shift(opts && opts.biff == 2 ? 1 : 2));
          return o6;
        }
        function parse_PtgAttrGoto(blob, length, opts) {
          var bitGoto = blob[blob.l + 1] & 255 ? 1 : 0;
          blob.l += 2;
          return [bitGoto, blob.read_shift(opts && opts.biff == 2 ? 1 : 2)];
        }
        function parse_PtgAttrIf(blob, length, opts) {
          var bitIf = blob[blob.l + 1] & 255 ? 1 : 0;
          blob.l += 2;
          return [bitIf, blob.read_shift(opts && opts.biff == 2 ? 1 : 2)];
        }
        function parse_PtgAttrIfError(blob) {
          var bitIf = blob[blob.l + 1] & 255 ? 1 : 0;
          blob.l += 2;
          return [bitIf, blob.read_shift(2)];
        }
        function parse_PtgAttrSemi(blob, length, opts) {
          var bitSemi = blob[blob.l + 1] & 255 ? 1 : 0;
          blob.l += opts && opts.biff == 2 ? 3 : 4;
          return [bitSemi];
        }
        function parse_PtgAttrSpaceType(blob) {
          var type = blob.read_shift(1), cch = blob.read_shift(1);
          return [type, cch];
        }
        function parse_PtgAttrSpace(blob) {
          blob.read_shift(2);
          return parse_PtgAttrSpaceType(blob, 2);
        }
        function parse_PtgAttrSpaceSemi(blob) {
          blob.read_shift(2);
          return parse_PtgAttrSpaceType(blob, 2);
        }
        function parse_PtgRef(blob, length, opts) {
          var type = (blob[blob.l] & 96) >> 5;
          blob.l += 1;
          var loc = parse_RgceLoc(blob, 0, opts);
          return [type, loc];
        }
        function parse_PtgRefN(blob, length, opts) {
          var type = (blob[blob.l] & 96) >> 5;
          blob.l += 1;
          var loc = parse_RgceLocRel(blob, 0, opts);
          return [type, loc];
        }
        function parse_PtgRef3d(blob, length, opts) {
          var type = (blob[blob.l] & 96) >> 5;
          blob.l += 1;
          var ixti = blob.read_shift(2);
          if (opts && opts.biff == 5)
            blob.l += 12;
          var loc = parse_RgceLoc(blob, 0, opts);
          return [type, ixti, loc];
        }
        function parse_PtgFunc(blob, length, opts) {
          var type = (blob[blob.l] & 96) >> 5;
          blob.l += 1;
          var iftab = blob.read_shift(opts && opts.biff <= 3 ? 1 : 2);
          return [FtabArgc[iftab], Ftab[iftab], type];
        }
        function parse_PtgFuncVar(blob, length, opts) {
          var type = blob[blob.l++];
          var cparams = blob.read_shift(1), tab = opts && opts.biff <= 3 ? [type == 88 ? -1 : 0, blob.read_shift(1)] : parsetab(blob);
          return [cparams, (tab[0] === 0 ? Ftab : Cetab)[tab[1]]];
        }
        function parsetab(blob) {
          return [blob[blob.l + 1] >> 7, blob.read_shift(2) & 32767];
        }
        function parse_PtgAttrSum(blob, length, opts) {
          blob.l += opts && opts.biff == 2 ? 3 : 4;
          return;
        }
        function parse_PtgExp(blob, length, opts) {
          blob.l++;
          if (opts && opts.biff == 12)
            return [blob.read_shift(4, "i"), 0];
          var row = blob.read_shift(2);
          var col = blob.read_shift(opts && opts.biff == 2 ? 1 : 2);
          return [row, col];
        }
        function parse_PtgErr(blob) {
          blob.l++;
          return BErr[blob.read_shift(1)];
        }
        function parse_PtgInt(blob) {
          blob.l++;
          return blob.read_shift(2);
        }
        function parse_PtgBool(blob) {
          blob.l++;
          return blob.read_shift(1) !== 0;
        }
        function parse_PtgNum(blob) {
          blob.l++;
          return parse_Xnum(blob, 8);
        }
        function parse_PtgStr(blob, length, opts) {
          blob.l++;
          return parse_ShortXLUnicodeString(blob, length - 1, opts);
        }
        function parse_SerAr(blob, biff) {
          var val2 = [blob.read_shift(1)];
          if (biff == 12)
            switch (val2[0]) {
              case 2:
                val2[0] = 4;
                break;
              case 4:
                val2[0] = 16;
                break;
              case 0:
                val2[0] = 1;
                break;
              case 1:
                val2[0] = 2;
                break;
            }
          switch (val2[0]) {
            case 4:
              val2[1] = parsebool(blob, 1) ? "TRUE" : "FALSE";
              if (biff != 12)
                blob.l += 7;
              break;
            case 37:
            case 16:
              val2[1] = BErr[blob[blob.l]];
              blob.l += biff == 12 ? 4 : 8;
              break;
            case 0:
              blob.l += 8;
              break;
            case 1:
              val2[1] = parse_Xnum(blob, 8);
              break;
            case 2:
              val2[1] = parse_XLUnicodeString2(blob, 0, { biff: biff > 0 && biff < 8 ? 2 : biff });
              break;
            default:
              throw new Error("Bad SerAr: " + val2[0]);
          }
          return val2;
        }
        function parse_PtgExtraMem(blob, cce, opts) {
          var count2 = blob.read_shift(opts.biff == 12 ? 4 : 2);
          var out = [];
          for (var i6 = 0; i6 != count2; ++i6)
            out.push((opts.biff == 12 ? parse_UncheckedRfX : parse_Ref8U)(blob, 8));
          return out;
        }
        function parse_PtgExtraArray(blob, length, opts) {
          var rows = 0, cols = 0;
          if (opts.biff == 12) {
            rows = blob.read_shift(4);
            cols = blob.read_shift(4);
          } else {
            cols = 1 + blob.read_shift(1);
            rows = 1 + blob.read_shift(2);
          }
          if (opts.biff >= 2 && opts.biff < 8) {
            --rows;
            if (--cols == 0)
              cols = 256;
          }
          for (var i6 = 0, o6 = []; i6 != rows && (o6[i6] = []); ++i6)
            for (var j3 = 0; j3 != cols; ++j3)
              o6[i6][j3] = parse_SerAr(blob, opts.biff);
          return o6;
        }
        function parse_PtgName(blob, length, opts) {
          var type = blob.read_shift(1) >>> 5 & 3;
          var w3 = !opts || opts.biff >= 8 ? 4 : 2;
          var nameindex = blob.read_shift(w3);
          switch (opts.biff) {
            case 2:
              blob.l += 5;
              break;
            case 3:
            case 4:
              blob.l += 8;
              break;
            case 5:
              blob.l += 12;
              break;
          }
          return [type, 0, nameindex];
        }
        function parse_PtgNameX(blob, length, opts) {
          if (opts.biff == 5)
            return parse_PtgNameX_BIFF5(blob, length, opts);
          var type = blob.read_shift(1) >>> 5 & 3;
          var ixti = blob.read_shift(2);
          var nameindex = blob.read_shift(4);
          return [type, ixti, nameindex];
        }
        function parse_PtgNameX_BIFF5(blob) {
          var type = blob.read_shift(1) >>> 5 & 3;
          var ixti = blob.read_shift(2, "i");
          blob.l += 8;
          var nameindex = blob.read_shift(2);
          blob.l += 12;
          return [type, ixti, nameindex];
        }
        function parse_PtgMemArea(blob, length, opts) {
          var type = blob.read_shift(1) >>> 5 & 3;
          blob.l += opts && opts.biff == 2 ? 3 : 4;
          var cce = blob.read_shift(opts && opts.biff == 2 ? 1 : 2);
          return [type, cce];
        }
        function parse_PtgMemFunc(blob, length, opts) {
          var type = blob.read_shift(1) >>> 5 & 3;
          var cce = blob.read_shift(opts && opts.biff == 2 ? 1 : 2);
          return [type, cce];
        }
        function parse_PtgRefErr(blob, length, opts) {
          var type = blob.read_shift(1) >>> 5 & 3;
          blob.l += 4;
          if (opts.biff < 8)
            blob.l--;
          if (opts.biff == 12)
            blob.l += 2;
          return [type];
        }
        function parse_PtgRefErr3d(blob, length, opts) {
          var type = (blob[blob.l++] & 96) >> 5;
          var ixti = blob.read_shift(2);
          var w3 = 4;
          if (opts)
            switch (opts.biff) {
              case 5:
                w3 = 15;
                break;
              case 12:
                w3 = 6;
                break;
            }
          blob.l += w3;
          return [type, ixti];
        }
        var parse_PtgMemErr = parsenoop;
        var parse_PtgMemNoMem = parsenoop;
        var parse_PtgTbl = parsenoop;
        function parse_PtgElfLoc(blob, length, opts) {
          blob.l += 2;
          return [parse_RgceElfLoc(blob, 4, opts)];
        }
        function parse_PtgElfNoop(blob) {
          blob.l += 6;
          return [];
        }
        var parse_PtgElfCol = parse_PtgElfLoc;
        var parse_PtgElfColS = parse_PtgElfNoop;
        var parse_PtgElfColSV = parse_PtgElfNoop;
        var parse_PtgElfColV = parse_PtgElfLoc;
        function parse_PtgElfLel(blob) {
          blob.l += 2;
          return [parseuint16(blob), blob.read_shift(2) & 1];
        }
        var parse_PtgElfRadical = parse_PtgElfLoc;
        var parse_PtgElfRadicalLel = parse_PtgElfLel;
        var parse_PtgElfRadicalS = parse_PtgElfNoop;
        var parse_PtgElfRw = parse_PtgElfLoc;
        var parse_PtgElfRwV = parse_PtgElfLoc;
        var PtgListRT = [
          "Data",
          "All",
          "Headers",
          "??",
          "?Data2",
          "??",
          "?DataHeaders",
          "??",
          "Totals",
          "??",
          "??",
          "??",
          "?DataTotals",
          "??",
          "??",
          "??",
          "?Current"
        ];
        function parse_PtgList(blob) {
          blob.l += 2;
          var ixti = blob.read_shift(2);
          var flags = blob.read_shift(2);
          var idx = blob.read_shift(4);
          var c8 = blob.read_shift(2);
          var C6 = blob.read_shift(2);
          var rt2 = PtgListRT[flags >> 2 & 31];
          return { ixti, coltype: flags & 3, rt: rt2, idx, c: c8, C: C6 };
        }
        function parse_PtgSxName(blob) {
          blob.l += 2;
          return [blob.read_shift(4)];
        }
        function parse_PtgSheet(blob, length, opts) {
          blob.l += 5;
          blob.l += 2;
          blob.l += opts.biff == 2 ? 1 : 4;
          return ["PTGSHEET"];
        }
        function parse_PtgEndSheet(blob, length, opts) {
          blob.l += opts.biff == 2 ? 4 : 5;
          return ["PTGENDSHEET"];
        }
        function parse_PtgMemAreaN(blob) {
          var type = blob.read_shift(1) >>> 5 & 3;
          var cce = blob.read_shift(2);
          return [type, cce];
        }
        function parse_PtgMemNoMemN(blob) {
          var type = blob.read_shift(1) >>> 5 & 3;
          var cce = blob.read_shift(2);
          return [type, cce];
        }
        function parse_PtgAttrNoop(blob) {
          blob.l += 4;
          return [0, 0];
        }
        var PtgTypes = {
          1: { n: "PtgExp", f: parse_PtgExp },
          2: { n: "PtgTbl", f: parse_PtgTbl },
          3: { n: "PtgAdd", f: parseread1 },
          4: { n: "PtgSub", f: parseread1 },
          5: { n: "PtgMul", f: parseread1 },
          6: { n: "PtgDiv", f: parseread1 },
          7: { n: "PtgPower", f: parseread1 },
          8: { n: "PtgConcat", f: parseread1 },
          9: { n: "PtgLt", f: parseread1 },
          10: { n: "PtgLe", f: parseread1 },
          11: { n: "PtgEq", f: parseread1 },
          12: { n: "PtgGe", f: parseread1 },
          13: { n: "PtgGt", f: parseread1 },
          14: { n: "PtgNe", f: parseread1 },
          15: { n: "PtgIsect", f: parseread1 },
          16: { n: "PtgUnion", f: parseread1 },
          17: { n: "PtgRange", f: parseread1 },
          18: { n: "PtgUplus", f: parseread1 },
          19: { n: "PtgUminus", f: parseread1 },
          20: { n: "PtgPercent", f: parseread1 },
          21: { n: "PtgParen", f: parseread1 },
          22: { n: "PtgMissArg", f: parseread1 },
          23: { n: "PtgStr", f: parse_PtgStr },
          26: { n: "PtgSheet", f: parse_PtgSheet },
          27: { n: "PtgEndSheet", f: parse_PtgEndSheet },
          28: { n: "PtgErr", f: parse_PtgErr },
          29: { n: "PtgBool", f: parse_PtgBool },
          30: { n: "PtgInt", f: parse_PtgInt },
          31: { n: "PtgNum", f: parse_PtgNum },
          32: { n: "PtgArray", f: parse_PtgArray },
          33: { n: "PtgFunc", f: parse_PtgFunc },
          34: { n: "PtgFuncVar", f: parse_PtgFuncVar },
          35: { n: "PtgName", f: parse_PtgName },
          36: { n: "PtgRef", f: parse_PtgRef },
          37: { n: "PtgArea", f: parse_PtgArea },
          38: { n: "PtgMemArea", f: parse_PtgMemArea },
          39: { n: "PtgMemErr", f: parse_PtgMemErr },
          40: { n: "PtgMemNoMem", f: parse_PtgMemNoMem },
          41: { n: "PtgMemFunc", f: parse_PtgMemFunc },
          42: { n: "PtgRefErr", f: parse_PtgRefErr },
          43: { n: "PtgAreaErr", f: parse_PtgAreaErr },
          44: { n: "PtgRefN", f: parse_PtgRefN },
          45: { n: "PtgAreaN", f: parse_PtgAreaN },
          46: { n: "PtgMemAreaN", f: parse_PtgMemAreaN },
          47: { n: "PtgMemNoMemN", f: parse_PtgMemNoMemN },
          57: { n: "PtgNameX", f: parse_PtgNameX },
          58: { n: "PtgRef3d", f: parse_PtgRef3d },
          59: { n: "PtgArea3d", f: parse_PtgArea3d },
          60: { n: "PtgRefErr3d", f: parse_PtgRefErr3d },
          61: { n: "PtgAreaErr3d", f: parse_PtgAreaErr3d },
          255: {}
        };
        var PtgDupes = {
          64: 32,
          96: 32,
          65: 33,
          97: 33,
          66: 34,
          98: 34,
          67: 35,
          99: 35,
          68: 36,
          100: 36,
          69: 37,
          101: 37,
          70: 38,
          102: 38,
          71: 39,
          103: 39,
          72: 40,
          104: 40,
          73: 41,
          105: 41,
          74: 42,
          106: 42,
          75: 43,
          107: 43,
          76: 44,
          108: 44,
          77: 45,
          109: 45,
          78: 46,
          110: 46,
          79: 47,
          111: 47,
          88: 34,
          120: 34,
          89: 57,
          121: 57,
          90: 58,
          122: 58,
          91: 59,
          123: 59,
          92: 60,
          124: 60,
          93: 61,
          125: 61
        };
        var Ptg18 = {
          1: { n: "PtgElfLel", f: parse_PtgElfLel },
          2: { n: "PtgElfRw", f: parse_PtgElfRw },
          3: { n: "PtgElfCol", f: parse_PtgElfCol },
          6: { n: "PtgElfRwV", f: parse_PtgElfRwV },
          7: { n: "PtgElfColV", f: parse_PtgElfColV },
          10: { n: "PtgElfRadical", f: parse_PtgElfRadical },
          11: { n: "PtgElfRadicalS", f: parse_PtgElfRadicalS },
          13: { n: "PtgElfColS", f: parse_PtgElfColS },
          15: { n: "PtgElfColSV", f: parse_PtgElfColSV },
          16: { n: "PtgElfRadicalLel", f: parse_PtgElfRadicalLel },
          25: { n: "PtgList", f: parse_PtgList },
          29: { n: "PtgSxName", f: parse_PtgSxName },
          255: {}
        };
        var Ptg19 = {
          0: { n: "PtgAttrNoop", f: parse_PtgAttrNoop },
          1: { n: "PtgAttrSemi", f: parse_PtgAttrSemi },
          2: { n: "PtgAttrIf", f: parse_PtgAttrIf },
          4: { n: "PtgAttrChoose", f: parse_PtgAttrChoose },
          8: { n: "PtgAttrGoto", f: parse_PtgAttrGoto },
          16: { n: "PtgAttrSum", f: parse_PtgAttrSum },
          32: { n: "PtgAttrBaxcel", f: parse_PtgAttrBaxcel },
          33: { n: "PtgAttrBaxcel", f: parse_PtgAttrBaxcel },
          64: { n: "PtgAttrSpace", f: parse_PtgAttrSpace },
          65: { n: "PtgAttrSpaceSemi", f: parse_PtgAttrSpaceSemi },
          128: { n: "PtgAttrIfError", f: parse_PtgAttrIfError },
          255: {}
        };
        function parse_RgbExtra(blob, length, rgce, opts) {
          if (opts.biff < 8)
            return parsenoop(blob, length);
          var target = blob.l + length;
          var o6 = [];
          for (var i6 = 0; i6 !== rgce.length; ++i6) {
            switch (rgce[i6][0]) {
              case "PtgArray":
                rgce[i6][1] = parse_PtgExtraArray(blob, 0, opts);
                o6.push(rgce[i6][1]);
                break;
              case "PtgMemArea":
                rgce[i6][2] = parse_PtgExtraMem(blob, rgce[i6][1], opts);
                o6.push(rgce[i6][2]);
                break;
              case "PtgExp":
                if (opts && opts.biff == 12) {
                  rgce[i6][1][1] = blob.read_shift(4);
                  o6.push(rgce[i6][1]);
                }
                break;
              case "PtgList":
              case "PtgElfRadicalS":
              case "PtgElfColS":
              case "PtgElfColSV":
                throw "Unsupported " + rgce[i6][0];
              default:
                break;
            }
          }
          length = target - blob.l;
          if (length !== 0)
            o6.push(parsenoop(blob, length));
          return o6;
        }
        function parse_Rgce(blob, length, opts) {
          var target = blob.l + length;
          var R2, id, ptgs = [];
          while (target != blob.l) {
            length = target - blob.l;
            id = blob[blob.l];
            R2 = PtgTypes[id] || PtgTypes[PtgDupes[id]];
            if (id === 24 || id === 25)
              R2 = (id === 24 ? Ptg18 : Ptg19)[blob[blob.l + 1]];
            if (!R2 || !R2.f) {
              parsenoop(blob, length);
            } else {
              ptgs.push([R2.n, R2.f(blob, length, opts)]);
            }
          }
          return ptgs;
        }
        function stringify_array(f2) {
          var o6 = [];
          for (var i6 = 0; i6 < f2.length; ++i6) {
            var x3 = f2[i6], r6 = [];
            for (var j3 = 0; j3 < x3.length; ++j3) {
              var y4 = x3[j3];
              if (y4)
                switch (y4[0]) {
                  case 2:
                    r6.push('"' + y4[1].replace(/"/g, '""') + '"');
                    break;
                  default:
                    r6.push(y4[1]);
                }
              else
                r6.push("");
            }
            o6.push(r6.join(","));
          }
          return o6.join(";");
        }
        var PtgBinOp = {
          PtgAdd: "+",
          PtgConcat: "&",
          PtgDiv: "/",
          PtgEq: "=",
          PtgGe: ">=",
          PtgGt: ">",
          PtgLe: "<=",
          PtgLt: "<",
          PtgMul: "*",
          PtgNe: "<>",
          PtgPower: "^",
          PtgSub: "-"
        };
        function make_3d_range(start2, end) {
          var s3 = start2.lastIndexOf("!"), e7 = end.lastIndexOf("!");
          if (s3 == -1 && e7 == -1)
            return start2 + ":" + end;
          if (s3 > 0 && e7 > 0 && start2.slice(0, s3).toLowerCase() == end.slice(0, e7).toLowerCase())
            return start2 + ":" + end.slice(e7 + 1);
          console.error("Cannot hydrate range", start2, end);
          return start2 + ":" + end;
        }
        function get_ixti_raw(supbooks, ixti, opts) {
          if (!supbooks)
            return "SH33TJSERR0";
          if (opts.biff > 8 && (!supbooks.XTI || !supbooks.XTI[ixti]))
            return supbooks.SheetNames[ixti];
          if (!supbooks.XTI)
            return "SH33TJSERR6";
          var XTI = supbooks.XTI[ixti];
          if (opts.biff < 8) {
            if (ixti > 1e4)
              ixti -= 65536;
            if (ixti < 0)
              ixti = -ixti;
            return ixti == 0 ? "" : supbooks.XTI[ixti - 1];
          }
          if (!XTI)
            return "SH33TJSERR1";
          var o6 = "";
          if (opts.biff > 8)
            switch (supbooks[XTI[0]][0]) {
              case 357:
                o6 = XTI[1] == -1 ? "#REF" : supbooks.SheetNames[XTI[1]];
                return XTI[1] == XTI[2] ? o6 : o6 + ":" + supbooks.SheetNames[XTI[2]];
              case 358:
                if (opts.SID != null)
                  return supbooks.SheetNames[opts.SID];
                return "SH33TJSSAME" + supbooks[XTI[0]][0];
              case 355:
              default:
                return "SH33TJSSRC" + supbooks[XTI[0]][0];
            }
          switch (supbooks[XTI[0]][0][0]) {
            case 1025:
              o6 = XTI[1] == -1 ? "#REF" : supbooks.SheetNames[XTI[1]] || "SH33TJSERR3";
              return XTI[1] == XTI[2] ? o6 : o6 + ":" + supbooks.SheetNames[XTI[2]];
            case 14849:
              return supbooks[XTI[0]].slice(1).map(function(name) {
                return name.Name;
              }).join(";;");
            default:
              if (!supbooks[XTI[0]][0][3])
                return "SH33TJSERR2";
              o6 = XTI[1] == -1 ? "#REF" : supbooks[XTI[0]][0][3][XTI[1]] || "SH33TJSERR4";
              return XTI[1] == XTI[2] ? o6 : o6 + ":" + supbooks[XTI[0]][0][3][XTI[2]];
          }
        }
        function get_ixti(supbooks, ixti, opts) {
          var ixtiraw = get_ixti_raw(supbooks, ixti, opts);
          return ixtiraw == "#REF" ? ixtiraw : formula_quote_sheet_name(ixtiraw, opts);
        }
        function stringify_formula(formula, range, cell, supbooks, opts) {
          var biff = opts && opts.biff || 8;
          var _range = { s: { c: 0, r: 0 }, e: { c: 0, r: 0 } };
          var stack = [], e1, e23, c8, ixti = 0, nameidx = 0, r6, sname = "";
          if (!formula[0] || !formula[0][0])
            return "";
          var last_sp = -1, sp = "";
          for (var ff = 0, fflen = formula[0].length; ff < fflen; ++ff) {
            var f2 = formula[0][ff];
            switch (f2[0]) {
              case "PtgUminus":
                stack.push("-" + stack.pop());
                break;
              case "PtgUplus":
                stack.push("+" + stack.pop());
                break;
              case "PtgPercent":
                stack.push(stack.pop() + "%");
                break;
              case "PtgAdd":
              case "PtgConcat":
              case "PtgDiv":
              case "PtgEq":
              case "PtgGe":
              case "PtgGt":
              case "PtgLe":
              case "PtgLt":
              case "PtgMul":
              case "PtgNe":
              case "PtgPower":
              case "PtgSub":
                e1 = stack.pop();
                e23 = stack.pop();
                if (last_sp >= 0) {
                  switch (formula[0][last_sp][1][0]) {
                    case 0:
                      sp = fill(" ", formula[0][last_sp][1][1]);
                      break;
                    case 1:
                      sp = fill("\r", formula[0][last_sp][1][1]);
                      break;
                    default:
                      sp = "";
                      if (opts.WTF)
                        throw new Error("Unexpected PtgAttrSpaceType " + formula[0][last_sp][1][0]);
                  }
                  e23 = e23 + sp;
                  last_sp = -1;
                }
                stack.push(e23 + PtgBinOp[f2[0]] + e1);
                break;
              case "PtgIsect":
                e1 = stack.pop();
                e23 = stack.pop();
                stack.push(e23 + " " + e1);
                break;
              case "PtgUnion":
                e1 = stack.pop();
                e23 = stack.pop();
                stack.push(e23 + "," + e1);
                break;
              case "PtgRange":
                e1 = stack.pop();
                e23 = stack.pop();
                stack.push(make_3d_range(e23, e1));
                break;
              case "PtgAttrChoose":
                break;
              case "PtgAttrGoto":
                break;
              case "PtgAttrIf":
                break;
              case "PtgAttrIfError":
                break;
              case "PtgRef":
                c8 = shift_cell_xls(f2[1][1], _range, opts);
                stack.push(encode_cell_xls(c8, biff));
                break;
              case "PtgRefN":
                c8 = cell ? shift_cell_xls(f2[1][1], cell, opts) : f2[1][1];
                stack.push(encode_cell_xls(c8, biff));
                break;
              case "PtgRef3d":
                ixti = f2[1][1];
                c8 = shift_cell_xls(f2[1][2], _range, opts);
                sname = get_ixti(supbooks, ixti, opts);
                var w3 = sname;
                stack.push(sname + "!" + encode_cell_xls(c8, biff));
                break;
              case "PtgFunc":
              case "PtgFuncVar":
                var argc = f2[1][0], func = f2[1][1];
                if (!argc)
                  argc = 0;
                argc &= 127;
                var args = argc == 0 ? [] : stack.slice(-argc);
                stack.length -= argc;
                if (func === "User")
                  func = args.shift();
                stack.push(func + "(" + args.join(",") + ")");
                break;
              case "PtgBool":
                stack.push(f2[1] ? "TRUE" : "FALSE");
                break;
              case "PtgInt":
                stack.push(f2[1]);
                break;
              case "PtgNum":
                stack.push(String(f2[1]));
                break;
              case "PtgStr":
                stack.push('"' + f2[1].replace(/"/g, '""') + '"');
                break;
              case "PtgErr":
                stack.push(f2[1]);
                break;
              case "PtgAreaN":
                r6 = shift_range_xls(f2[1][1], cell ? { s: cell } : _range, opts);
                stack.push(encode_range_xls(r6, opts));
                break;
              case "PtgArea":
                r6 = shift_range_xls(f2[1][1], _range, opts);
                stack.push(encode_range_xls(r6, opts));
                break;
              case "PtgArea3d":
                ixti = f2[1][1];
                r6 = f2[1][2];
                sname = get_ixti(supbooks, ixti, opts);
                stack.push(sname + "!" + encode_range_xls(r6, opts));
                break;
              case "PtgAttrSum":
                stack.push("SUM(" + stack.pop() + ")");
                break;
              case "PtgAttrBaxcel":
              case "PtgAttrSemi":
                break;
              case "PtgName":
                nameidx = f2[1][2];
                var lbl = (supbooks.names || [])[nameidx - 1] || (supbooks[0] || [])[nameidx];
                var name = lbl ? lbl.Name : "SH33TJSNAME" + String(nameidx);
                if (name && name.slice(0, 6) == "_xlfn." && !opts.xlfn)
                  name = name.slice(6);
                stack.push(name);
                break;
              case "PtgNameX":
                var bookidx = f2[1][1];
                nameidx = f2[1][2];
                var externbook;
                if (opts.biff <= 5) {
                  if (bookidx < 0)
                    bookidx = -bookidx;
                  if (supbooks[bookidx])
                    externbook = supbooks[bookidx][nameidx];
                } else {
                  var o6 = "";
                  if (((supbooks[bookidx] || [])[0] || [])[0] == 14849) {
                  } else if (((supbooks[bookidx] || [])[0] || [])[0] == 1025) {
                    if (supbooks[bookidx][nameidx] && supbooks[bookidx][nameidx].itab > 0) {
                      o6 = supbooks.SheetNames[supbooks[bookidx][nameidx].itab - 1] + "!";
                    }
                  } else
                    o6 = supbooks.SheetNames[nameidx - 1] + "!";
                  if (supbooks[bookidx] && supbooks[bookidx][nameidx])
                    o6 += supbooks[bookidx][nameidx].Name;
                  else if (supbooks[0] && supbooks[0][nameidx])
                    o6 += supbooks[0][nameidx].Name;
                  else {
                    var ixtidata = (get_ixti_raw(supbooks, bookidx, opts) || "").split(";;");
                    if (ixtidata[nameidx - 1])
                      o6 = ixtidata[nameidx - 1];
                    else
                      o6 += "SH33TJSERRX";
                  }
                  stack.push(o6);
                  break;
                }
                if (!externbook)
                  externbook = { Name: "SH33TJSERRY" };
                stack.push(externbook.Name);
                break;
              case "PtgParen":
                var lp = "(", rp = ")";
                if (last_sp >= 0) {
                  sp = "";
                  switch (formula[0][last_sp][1][0]) {
                    case 2:
                      lp = fill(" ", formula[0][last_sp][1][1]) + lp;
                      break;
                    case 3:
                      lp = fill("\r", formula[0][last_sp][1][1]) + lp;
                      break;
                    case 4:
                      rp = fill(" ", formula[0][last_sp][1][1]) + rp;
                      break;
                    case 5:
                      rp = fill("\r", formula[0][last_sp][1][1]) + rp;
                      break;
                    default:
                      if (opts.WTF)
                        throw new Error("Unexpected PtgAttrSpaceType " + formula[0][last_sp][1][0]);
                  }
                  last_sp = -1;
                }
                stack.push(lp + stack.pop() + rp);
                break;
              case "PtgRefErr":
                stack.push("#REF!");
                break;
              case "PtgRefErr3d":
                stack.push("#REF!");
                break;
              case "PtgExp":
                c8 = { c: f2[1][1], r: f2[1][0] };
                var q3 = { c: cell.c, r: cell.r };
                if (supbooks.sharedf[encode_cell(c8)]) {
                  var parsedf = supbooks.sharedf[encode_cell(c8)];
                  stack.push(stringify_formula(parsedf, _range, q3, supbooks, opts));
                } else {
                  var fnd = false;
                  for (e1 = 0; e1 != supbooks.arrayf.length; ++e1) {
                    e23 = supbooks.arrayf[e1];
                    if (c8.c < e23[0].s.c || c8.c > e23[0].e.c)
                      continue;
                    if (c8.r < e23[0].s.r || c8.r > e23[0].e.r)
                      continue;
                    stack.push(stringify_formula(e23[1], _range, q3, supbooks, opts));
                    fnd = true;
                    break;
                  }
                  if (!fnd)
                    stack.push(f2[1]);
                }
                break;
              case "PtgArray":
                stack.push("{" + stringify_array(f2[1]) + "}");
                break;
              case "PtgMemArea":
                break;
              case "PtgAttrSpace":
              case "PtgAttrSpaceSemi":
                last_sp = ff;
                break;
              case "PtgTbl":
                break;
              case "PtgMemErr":
                break;
              case "PtgMissArg":
                stack.push("");
                break;
              case "PtgAreaErr":
                stack.push("#REF!");
                break;
              case "PtgAreaErr3d":
                stack.push("#REF!");
                break;
              case "PtgList":
                stack.push("Table" + f2[1].idx + "[#" + f2[1].rt + "]");
                break;
              case "PtgMemAreaN":
              case "PtgMemNoMemN":
              case "PtgAttrNoop":
              case "PtgSheet":
              case "PtgEndSheet":
                break;
              case "PtgMemFunc":
                break;
              case "PtgMemNoMem":
                break;
              case "PtgElfCol":
              case "PtgElfColS":
              case "PtgElfColSV":
              case "PtgElfColV":
              case "PtgElfLel":
              case "PtgElfRadical":
              case "PtgElfRadicalLel":
              case "PtgElfRadicalS":
              case "PtgElfRw":
              case "PtgElfRwV":
                throw new Error("Unsupported ELFs");
              case "PtgSxName":
                throw new Error("Unrecognized Formula Token: " + String(f2));
              default:
                throw new Error("Unrecognized Formula Token: " + String(f2));
            }
            var PtgNonDisp = ["PtgAttrSpace", "PtgAttrSpaceSemi", "PtgAttrGoto"];
            if (opts.biff != 3) {
              if (last_sp >= 0 && PtgNonDisp.indexOf(formula[0][ff][0]) == -1) {
                f2 = formula[0][last_sp];
                var _left = true;
                switch (f2[1][0]) {
                  case 4:
                    _left = false;
                  case 0:
                    sp = fill(" ", f2[1][1]);
                    break;
                  case 5:
                    _left = false;
                  case 1:
                    sp = fill("\r", f2[1][1]);
                    break;
                  default:
                    sp = "";
                    if (opts.WTF)
                      throw new Error("Unexpected PtgAttrSpaceType " + f2[1][0]);
                }
                stack.push((_left ? sp : "") + stack.pop() + (_left ? "" : sp));
                last_sp = -1;
              }
            }
          }
          if (stack.length > 1 && opts.WTF)
            throw new Error("bad formula stack");
          if (stack[0] == "TRUE")
            return true;
          if (stack[0] == "FALSE")
            return false;
          return stack[0];
        }
        function parse_ArrayParsedFormula(blob, length, opts) {
          var target = blob.l + length, len = opts.biff == 2 ? 1 : 2;
          var rgcb, cce = blob.read_shift(len);
          if (cce == 65535)
            return [[], parsenoop(blob, length - 2)];
          var rgce = parse_Rgce(blob, cce, opts);
          if (length !== cce + len)
            rgcb = parse_RgbExtra(blob, length - cce - len, rgce, opts);
          blob.l = target;
          return [rgce, rgcb];
        }
        function parse_XLSCellParsedFormula(blob, length, opts) {
          var target = blob.l + length, len = opts.biff == 2 ? 1 : 2;
          var rgcb, cce = blob.read_shift(len);
          if (cce == 65535)
            return [[], parsenoop(blob, length - 2)];
          var rgce = parse_Rgce(blob, cce, opts);
          if (length !== cce + len)
            rgcb = parse_RgbExtra(blob, length - cce - len, rgce, opts);
          blob.l = target;
          return [rgce, rgcb];
        }
        function parse_NameParsedFormula(blob, length, opts, cce) {
          var target = blob.l + length;
          var rgce = parse_Rgce(blob, cce, opts);
          var rgcb;
          if (target !== blob.l)
            rgcb = parse_RgbExtra(blob, target - blob.l, rgce, opts);
          return [rgce, rgcb];
        }
        function parse_SharedParsedFormula(blob, length, opts) {
          var target = blob.l + length;
          var rgcb, cce = blob.read_shift(2);
          var rgce = parse_Rgce(blob, cce, opts);
          if (cce == 65535)
            return [[], parsenoop(blob, length - 2)];
          if (length !== cce + 2)
            rgcb = parse_RgbExtra(blob, target - cce - 2, rgce, opts);
          return [rgce, rgcb];
        }
        function parse_FormulaValue(blob) {
          var b3;
          if (__readUInt16LE(blob, blob.l + 6) !== 65535)
            return [parse_Xnum(blob), "n"];
          switch (blob[blob.l]) {
            case 0:
              blob.l += 8;
              return ["String", "s"];
            case 1:
              b3 = blob[blob.l + 2] === 1;
              blob.l += 8;
              return [b3, "b"];
            case 2:
              b3 = blob[blob.l + 2];
              blob.l += 8;
              return [b3, "e"];
            case 3:
              blob.l += 8;
              return ["", "s"];
          }
          return [];
        }
        function write_FormulaValue(value) {
          if (value == null) {
            var o6 = new_buf(8);
            o6.write_shift(1, 3);
            o6.write_shift(1, 0);
            o6.write_shift(2, 0);
            o6.write_shift(2, 0);
            o6.write_shift(2, 65535);
            return o6;
          } else if (typeof value == "number")
            return write_Xnum(value);
          return write_Xnum(0);
        }
        function parse_Formula(blob, length, opts) {
          var end = blob.l + length;
          var cell = parse_XLSCell(blob, 6, opts);
          var val2 = parse_FormulaValue(blob, 8);
          var flags = blob.read_shift(1);
          if (opts.biff != 2) {
            blob.read_shift(1);
            if (opts.biff >= 5) {
              blob.read_shift(4);
            }
          }
          var cbf = parse_XLSCellParsedFormula(blob, end - blob.l, opts);
          return { cell, val: val2[0], formula: cbf, shared: flags >> 3 & 1, tt: val2[1] };
        }
        function write_Formula(cell, R2, C6, opts, os) {
          var o1 = write_XLSCell(R2, C6, os);
          var o22 = write_FormulaValue(cell.v);
          var o32 = new_buf(6);
          var flags = 1 | 32;
          o32.write_shift(2, flags);
          o32.write_shift(4, 0);
          var bf = new_buf(cell.bf.length);
          for (var i6 = 0; i6 < cell.bf.length; ++i6)
            bf[i6] = cell.bf[i6];
          var out = bconcat([o1, o22, o32, bf]);
          return out;
        }
        function parse_XLSBParsedFormula(data, length, opts) {
          var cce = data.read_shift(4);
          var rgce = parse_Rgce(data, cce, opts);
          var cb = data.read_shift(4);
          var rgcb = cb > 0 ? parse_RgbExtra(data, cb, rgce, opts) : null;
          return [rgce, rgcb];
        }
        var parse_XLSBArrayParsedFormula = parse_XLSBParsedFormula;
        var parse_XLSBCellParsedFormula = parse_XLSBParsedFormula;
        var parse_XLSBNameParsedFormula = parse_XLSBParsedFormula;
        var parse_XLSBSharedParsedFormula = parse_XLSBParsedFormula;
        function write_XLSBFormulaNum(val2) {
          if ((val2 | 0) == val2 && val2 < Math.pow(2, 16) && val2 >= 0) {
            var oint = new_buf(11);
            oint.write_shift(4, 3);
            oint.write_shift(1, 30);
            oint.write_shift(2, val2);
            oint.write_shift(4, 0);
            return oint;
          }
          var num = new_buf(17);
          num.write_shift(4, 11);
          num.write_shift(1, 31);
          num.write_shift(8, val2);
          num.write_shift(4, 0);
          return num;
        }
        function write_XLSBFormulaErr(val2) {
          var oint = new_buf(10);
          oint.write_shift(4, 2);
          oint.write_shift(1, 28);
          oint.write_shift(1, val2);
          oint.write_shift(4, 0);
          return oint;
        }
        function write_XLSBFormulaBool(val2) {
          var oint = new_buf(10);
          oint.write_shift(4, 2);
          oint.write_shift(1, 29);
          oint.write_shift(1, val2 ? 1 : 0);
          oint.write_shift(4, 0);
          return oint;
        }
        function write_XLSBFormulaStr(val2) {
          var preamble = new_buf(7);
          preamble.write_shift(4, 3 + 2 * val2.length);
          preamble.write_shift(1, 23);
          preamble.write_shift(2, val2.length);
          var body = new_buf(2 * val2.length);
          body.write_shift(2 * val2.length, val2, "utf16le");
          var postamble = new_buf(4);
          postamble.write_shift(4, 0);
          return bconcat([preamble, body, postamble]);
        }
        function write_XLSBFormulaRef(str) {
          var cell = decode_cell(str);
          var out = new_buf(15);
          out.write_shift(4, 7);
          out.write_shift(1, 4 | 1 << 5);
          out.write_shift(4, cell.r);
          out.write_shift(2, cell.c | (str.charAt(0) == "$" ? 0 : 1) << 14 | (str.match(/\$\d/) ? 0 : 1) << 15);
          out.write_shift(4, 0);
          return out;
        }
        function write_XLSBFormulaRef3D(str, wb) {
          var lastbang = str.lastIndexOf("!");
          var sname = str.slice(0, lastbang);
          str = str.slice(lastbang + 1);
          var cell = decode_cell(str);
          if (sname.charAt(0) == "'")
            sname = sname.slice(1, -1).replace(/''/g, "'");
          var out = new_buf(17);
          out.write_shift(4, 9);
          out.write_shift(1, 26 | 1 << 5);
          out.write_shift(2, 2 + wb.SheetNames.map(function(n6) {
            return n6.toLowerCase();
          }).indexOf(sname.toLowerCase()));
          out.write_shift(4, cell.r);
          out.write_shift(2, cell.c | (str.charAt(0) == "$" ? 0 : 1) << 14 | (str.match(/\$\d/) ? 0 : 1) << 15);
          out.write_shift(4, 0);
          return out;
        }
        function write_XLSBFormulaRefErr3D(str, wb) {
          var lastbang = str.lastIndexOf("!");
          var sname = str.slice(0, lastbang);
          str = str.slice(lastbang + 1);
          if (sname.charAt(0) == "'")
            sname = sname.slice(1, -1).replace(/''/g, "'");
          var out = new_buf(17);
          out.write_shift(4, 9);
          out.write_shift(1, 28 | 1 << 5);
          out.write_shift(2, 2 + wb.SheetNames.map(function(n6) {
            return n6.toLowerCase();
          }).indexOf(sname.toLowerCase()));
          out.write_shift(4, 0);
          out.write_shift(2, 0);
          out.write_shift(4, 0);
          return out;
        }
        function write_XLSBFormulaRange(_str) {
          var parts = _str.split(":"), str = parts[0];
          var out = new_buf(23);
          out.write_shift(4, 15);
          str = parts[0];
          var cell = decode_cell(str);
          out.write_shift(1, 4 | 1 << 5);
          out.write_shift(4, cell.r);
          out.write_shift(2, cell.c | (str.charAt(0) == "$" ? 0 : 1) << 14 | (str.match(/\$\d/) ? 0 : 1) << 15);
          out.write_shift(4, 0);
          str = parts[1];
          cell = decode_cell(str);
          out.write_shift(1, 4 | 1 << 5);
          out.write_shift(4, cell.r);
          out.write_shift(2, cell.c | (str.charAt(0) == "$" ? 0 : 1) << 14 | (str.match(/\$\d/) ? 0 : 1) << 15);
          out.write_shift(4, 0);
          out.write_shift(1, 17);
          out.write_shift(4, 0);
          return out;
        }
        function write_XLSBFormulaRangeWS(_str, wb) {
          var lastbang = _str.lastIndexOf("!");
          var sname = _str.slice(0, lastbang);
          _str = _str.slice(lastbang + 1);
          if (sname.charAt(0) == "'")
            sname = sname.slice(1, -1).replace(/''/g, "'");
          var parts = _str.split(":");
          var out = new_buf(27);
          out.write_shift(4, 19);
          var str = parts[0], cell = decode_cell(str);
          out.write_shift(1, 26 | 1 << 5);
          out.write_shift(2, 2 + wb.SheetNames.map(function(n6) {
            return n6.toLowerCase();
          }).indexOf(sname.toLowerCase()));
          out.write_shift(4, cell.r);
          out.write_shift(2, cell.c | (str.charAt(0) == "$" ? 0 : 1) << 14 | (str.match(/\$\d/) ? 0 : 1) << 15);
          str = parts[1];
          cell = decode_cell(str);
          out.write_shift(1, 26 | 1 << 5);
          out.write_shift(2, 2 + wb.SheetNames.map(function(n6) {
            return n6.toLowerCase();
          }).indexOf(sname.toLowerCase()));
          out.write_shift(4, cell.r);
          out.write_shift(2, cell.c | (str.charAt(0) == "$" ? 0 : 1) << 14 | (str.match(/\$\d/) ? 0 : 1) << 15);
          out.write_shift(1, 17);
          out.write_shift(4, 0);
          return out;
        }
        function write_XLSBFormulaArea3D(_str, wb) {
          var lastbang = _str.lastIndexOf("!");
          var sname = _str.slice(0, lastbang);
          _str = _str.slice(lastbang + 1);
          if (sname.charAt(0) == "'")
            sname = sname.slice(1, -1).replace(/''/g, "'");
          var range = decode_range(_str);
          var out = new_buf(23);
          out.write_shift(4, 15);
          out.write_shift(1, 27 | 1 << 5);
          out.write_shift(2, 2 + wb.SheetNames.map(function(n6) {
            return n6.toLowerCase();
          }).indexOf(sname.toLowerCase()));
          out.write_shift(4, range.s.r);
          out.write_shift(4, range.e.r);
          out.write_shift(2, range.s.c);
          out.write_shift(2, range.e.c);
          out.write_shift(4, 0);
          return out;
        }
        function write_XLSBFormula(val2, wb) {
          if (typeof val2 == "number")
            return write_XLSBFormulaNum(val2);
          if (typeof val2 == "boolean")
            return write_XLSBFormulaBool(val2);
          if (/^#(DIV\/0!|GETTING_DATA|N\/A|NAME\?|NULL!|NUM!|REF!|VALUE!)$/.test(val2))
            return write_XLSBFormulaErr(+RBErr[val2]);
          if (val2.match(/^\$?(?:[A-W][A-Z]{2}|X[A-E][A-Z]|XF[A-D]|[A-Z]{1,2})\$?(?:10[0-3]\d{4}|104[0-7]\d{3}|1048[0-4]\d{2}|10485[0-6]\d|104857[0-6]|[1-9]\d{0,5})$/))
            return write_XLSBFormulaRef(val2);
          if (val2.match(/^\$?(?:[A-W][A-Z]{2}|X[A-E][A-Z]|XF[A-D]|[A-Z]{1,2})\$?(?:10[0-3]\d{4}|104[0-7]\d{3}|1048[0-4]\d{2}|10485[0-6]\d|104857[0-6]|[1-9]\d{0,5}):\$?(?:[A-W][A-Z]{2}|X[A-E][A-Z]|XF[A-D]|[A-Z]{1,2})\$?(?:10[0-3]\d{4}|104[0-7]\d{3}|1048[0-4]\d{2}|10485[0-6]\d|104857[0-6]|[1-9]\d{0,5})$/))
            return write_XLSBFormulaRange(val2);
          if (val2.match(/^#REF!\$?(?:[A-W][A-Z]{2}|X[A-E][A-Z]|XF[A-D]|[A-Z]{1,2})\$?(?:10[0-3]\d{4}|104[0-7]\d{3}|1048[0-4]\d{2}|10485[0-6]\d|104857[0-6]|[1-9]\d{0,5}):\$?(?:[A-W][A-Z]{2}|X[A-E][A-Z]|XF[A-D]|[A-Z]{1,2})\$?(?:10[0-3]\d{4}|104[0-7]\d{3}|1048[0-4]\d{2}|10485[0-6]\d|104857[0-6]|[1-9]\d{0,5})$/))
            return write_XLSBFormulaArea3D(val2, wb);
          if (val2.match(/^(?:'[^\\\/?*\[\]:]*'|[^'][^\\\/?*\[\]:'`~!@#$%^()\-=+{}|;,<.>]*)!\$?(?:[A-W][A-Z]{2}|X[A-E][A-Z]|XF[A-D]|[A-Z]{1,2})\$?(?:10[0-3]\d{4}|104[0-7]\d{3}|1048[0-4]\d{2}|10485[0-6]\d|104857[0-6]|[1-9]\d{0,5})$/))
            return write_XLSBFormulaRef3D(val2, wb);
          if (val2.match(/^(?:'[^\\\/?*\[\]:]*'|[^'][^\\\/?*\[\]:'`~!@#$%^()\-=+{}|;,<.>]*)!\$?(?:[A-W][A-Z]{2}|X[A-E][A-Z]|XF[A-D]|[A-Z]{1,2})\$?(?:10[0-3]\d{4}|104[0-7]\d{3}|1048[0-4]\d{2}|10485[0-6]\d|104857[0-6]|[1-9]\d{0,5}):\$?(?:[A-W][A-Z]{2}|X[A-E][A-Z]|XF[A-D]|[A-Z]{1,2})\$?(?:10[0-3]\d{4}|104[0-7]\d{3}|1048[0-4]\d{2}|10485[0-6]\d|104857[0-6]|[1-9]\d{0,5})$/))
            return write_XLSBFormulaRangeWS(val2, wb);
          if (/^(?:'[^\\\/?*\[\]:]*'|[^'][^\\\/?*\[\]:'`~!@#$%^()\-=+{}|;,<.>]*)!#REF!$/.test(val2))
            return write_XLSBFormulaRefErr3D(val2, wb);
          if (/^".*"$/.test(val2))
            return write_XLSBFormulaStr(val2);
          if (/^[+-]\d+$/.test(val2))
            return write_XLSBFormulaNum(parseInt(val2, 10));
          throw "Formula |" + val2 + "| not supported for XLSB";
        }
        var write_XLSBNameParsedFormula = write_XLSBFormula;
        var Cetab = {
          0: "BEEP",
          1: "OPEN",
          2: "OPEN.LINKS",
          3: "CLOSE.ALL",
          4: "SAVE",
          5: "SAVE.AS",
          6: "FILE.DELETE",
          7: "PAGE.SETUP",
          8: "PRINT",
          9: "PRINTER.SETUP",
          10: "QUIT",
          11: "NEW.WINDOW",
          12: "ARRANGE.ALL",
          13: "WINDOW.SIZE",
          14: "WINDOW.MOVE",
          15: "FULL",
          16: "CLOSE",
          17: "RUN",
          22: "SET.PRINT.AREA",
          23: "SET.PRINT.TITLES",
          24: "SET.PAGE.BREAK",
          25: "REMOVE.PAGE.BREAK",
          26: "FONT",
          27: "DISPLAY",
          28: "PROTECT.DOCUMENT",
          29: "PRECISION",
          30: "A1.R1C1",
          31: "CALCULATE.NOW",
          32: "CALCULATION",
          34: "DATA.FIND",
          35: "EXTRACT",
          36: "DATA.DELETE",
          37: "SET.DATABASE",
          38: "SET.CRITERIA",
          39: "SORT",
          40: "DATA.SERIES",
          41: "TABLE",
          42: "FORMAT.NUMBER",
          43: "ALIGNMENT",
          44: "STYLE",
          45: "BORDER",
          46: "CELL.PROTECTION",
          47: "COLUMN.WIDTH",
          48: "UNDO",
          49: "CUT",
          50: "COPY",
          51: "PASTE",
          52: "CLEAR",
          53: "PASTE.SPECIAL",
          54: "EDIT.DELETE",
          55: "INSERT",
          56: "FILL.RIGHT",
          57: "FILL.DOWN",
          61: "DEFINE.NAME",
          62: "CREATE.NAMES",
          63: "FORMULA.GOTO",
          64: "FORMULA.FIND",
          65: "SELECT.LAST.CELL",
          66: "SHOW.ACTIVE.CELL",
          67: "GALLERY.AREA",
          68: "GALLERY.BAR",
          69: "GALLERY.COLUMN",
          70: "GALLERY.LINE",
          71: "GALLERY.PIE",
          72: "GALLERY.SCATTER",
          73: "COMBINATION",
          74: "PREFERRED",
          75: "ADD.OVERLAY",
          76: "GRIDLINES",
          77: "SET.PREFERRED",
          78: "AXES",
          79: "LEGEND",
          80: "ATTACH.TEXT",
          81: "ADD.ARROW",
          82: "SELECT.CHART",
          83: "SELECT.PLOT.AREA",
          84: "PATTERNS",
          85: "MAIN.CHART",
          86: "OVERLAY",
          87: "SCALE",
          88: "FORMAT.LEGEND",
          89: "FORMAT.TEXT",
          90: "EDIT.REPEAT",
          91: "PARSE",
          92: "JUSTIFY",
          93: "HIDE",
          94: "UNHIDE",
          95: "WORKSPACE",
          96: "FORMULA",
          97: "FORMULA.FILL",
          98: "FORMULA.ARRAY",
          99: "DATA.FIND.NEXT",
          100: "DATA.FIND.PREV",
          101: "FORMULA.FIND.NEXT",
          102: "FORMULA.FIND.PREV",
          103: "ACTIVATE",
          104: "ACTIVATE.NEXT",
          105: "ACTIVATE.PREV",
          106: "UNLOCKED.NEXT",
          107: "UNLOCKED.PREV",
          108: "COPY.PICTURE",
          109: "SELECT",
          110: "DELETE.NAME",
          111: "DELETE.FORMAT",
          112: "VLINE",
          113: "HLINE",
          114: "VPAGE",
          115: "HPAGE",
          116: "VSCROLL",
          117: "HSCROLL",
          118: "ALERT",
          119: "NEW",
          120: "CANCEL.COPY",
          121: "SHOW.CLIPBOARD",
          122: "MESSAGE",
          124: "PASTE.LINK",
          125: "APP.ACTIVATE",
          126: "DELETE.ARROW",
          127: "ROW.HEIGHT",
          128: "FORMAT.MOVE",
          129: "FORMAT.SIZE",
          130: "FORMULA.REPLACE",
          131: "SEND.KEYS",
          132: "SELECT.SPECIAL",
          133: "APPLY.NAMES",
          134: "REPLACE.FONT",
          135: "FREEZE.PANES",
          136: "SHOW.INFO",
          137: "SPLIT",
          138: "ON.WINDOW",
          139: "ON.DATA",
          140: "DISABLE.INPUT",
          142: "OUTLINE",
          143: "LIST.NAMES",
          144: "FILE.CLOSE",
          145: "SAVE.WORKBOOK",
          146: "DATA.FORM",
          147: "COPY.CHART",
          148: "ON.TIME",
          149: "WAIT",
          150: "FORMAT.FONT",
          151: "FILL.UP",
          152: "FILL.LEFT",
          153: "DELETE.OVERLAY",
          155: "SHORT.MENUS",
          159: "SET.UPDATE.STATUS",
          161: "COLOR.PALETTE",
          162: "DELETE.STYLE",
          163: "WINDOW.RESTORE",
          164: "WINDOW.MAXIMIZE",
          166: "CHANGE.LINK",
          167: "CALCULATE.DOCUMENT",
          168: "ON.KEY",
          169: "APP.RESTORE",
          170: "APP.MOVE",
          171: "APP.SIZE",
          172: "APP.MINIMIZE",
          173: "APP.MAXIMIZE",
          174: "BRING.TO.FRONT",
          175: "SEND.TO.BACK",
          185: "MAIN.CHART.TYPE",
          186: "OVERLAY.CHART.TYPE",
          187: "SELECT.END",
          188: "OPEN.MAIL",
          189: "SEND.MAIL",
          190: "STANDARD.FONT",
          191: "CONSOLIDATE",
          192: "SORT.SPECIAL",
          193: "GALLERY.3D.AREA",
          194: "GALLERY.3D.COLUMN",
          195: "GALLERY.3D.LINE",
          196: "GALLERY.3D.PIE",
          197: "VIEW.3D",
          198: "GOAL.SEEK",
          199: "WORKGROUP",
          200: "FILL.GROUP",
          201: "UPDATE.LINK",
          202: "PROMOTE",
          203: "DEMOTE",
          204: "SHOW.DETAIL",
          206: "UNGROUP",
          207: "OBJECT.PROPERTIES",
          208: "SAVE.NEW.OBJECT",
          209: "SHARE",
          210: "SHARE.NAME",
          211: "DUPLICATE",
          212: "APPLY.STYLE",
          213: "ASSIGN.TO.OBJECT",
          214: "OBJECT.PROTECTION",
          215: "HIDE.OBJECT",
          216: "SET.EXTRACT",
          217: "CREATE.PUBLISHER",
          218: "SUBSCRIBE.TO",
          219: "ATTRIBUTES",
          220: "SHOW.TOOLBAR",
          222: "PRINT.PREVIEW",
          223: "EDIT.COLOR",
          224: "SHOW.LEVELS",
          225: "FORMAT.MAIN",
          226: "FORMAT.OVERLAY",
          227: "ON.RECALC",
          228: "EDIT.SERIES",
          229: "DEFINE.STYLE",
          240: "LINE.PRINT",
          243: "ENTER.DATA",
          249: "GALLERY.RADAR",
          250: "MERGE.STYLES",
          251: "EDITION.OPTIONS",
          252: "PASTE.PICTURE",
          253: "PASTE.PICTURE.LINK",
          254: "SPELLING",
          256: "ZOOM",
          259: "INSERT.OBJECT",
          260: "WINDOW.MINIMIZE",
          265: "SOUND.NOTE",
          266: "SOUND.PLAY",
          267: "FORMAT.SHAPE",
          268: "EXTEND.POLYGON",
          269: "FORMAT.AUTO",
          272: "GALLERY.3D.BAR",
          273: "GALLERY.3D.SURFACE",
          274: "FILL.AUTO",
          276: "CUSTOMIZE.TOOLBAR",
          277: "ADD.TOOL",
          278: "EDIT.OBJECT",
          279: "ON.DOUBLECLICK",
          280: "ON.ENTRY",
          281: "WORKBOOK.ADD",
          282: "WORKBOOK.MOVE",
          283: "WORKBOOK.COPY",
          284: "WORKBOOK.OPTIONS",
          285: "SAVE.WORKSPACE",
          288: "CHART.WIZARD",
          289: "DELETE.TOOL",
          290: "MOVE.TOOL",
          291: "WORKBOOK.SELECT",
          292: "WORKBOOK.ACTIVATE",
          293: "ASSIGN.TO.TOOL",
          295: "COPY.TOOL",
          296: "RESET.TOOL",
          297: "CONSTRAIN.NUMERIC",
          298: "PASTE.TOOL",
          302: "WORKBOOK.NEW",
          305: "SCENARIO.CELLS",
          306: "SCENARIO.DELETE",
          307: "SCENARIO.ADD",
          308: "SCENARIO.EDIT",
          309: "SCENARIO.SHOW",
          310: "SCENARIO.SHOW.NEXT",
          311: "SCENARIO.SUMMARY",
          312: "PIVOT.TABLE.WIZARD",
          313: "PIVOT.FIELD.PROPERTIES",
          314: "PIVOT.FIELD",
          315: "PIVOT.ITEM",
          316: "PIVOT.ADD.FIELDS",
          318: "OPTIONS.CALCULATION",
          319: "OPTIONS.EDIT",
          320: "OPTIONS.VIEW",
          321: "ADDIN.MANAGER",
          322: "MENU.EDITOR",
          323: "ATTACH.TOOLBARS",
          324: "VBAActivate",
          325: "OPTIONS.CHART",
          328: "VBA.INSERT.FILE",
          330: "VBA.PROCEDURE.DEFINITION",
          336: "ROUTING.SLIP",
          338: "ROUTE.DOCUMENT",
          339: "MAIL.LOGON",
          342: "INSERT.PICTURE",
          343: "EDIT.TOOL",
          344: "GALLERY.DOUGHNUT",
          350: "CHART.TREND",
          352: "PIVOT.ITEM.PROPERTIES",
          354: "WORKBOOK.INSERT",
          355: "OPTIONS.TRANSITION",
          356: "OPTIONS.GENERAL",
          370: "FILTER.ADVANCED",
          373: "MAIL.ADD.MAILER",
          374: "MAIL.DELETE.MAILER",
          375: "MAIL.REPLY",
          376: "MAIL.REPLY.ALL",
          377: "MAIL.FORWARD",
          378: "MAIL.NEXT.LETTER",
          379: "DATA.LABEL",
          380: "INSERT.TITLE",
          381: "FONT.PROPERTIES",
          382: "MACRO.OPTIONS",
          383: "WORKBOOK.HIDE",
          384: "WORKBOOK.UNHIDE",
          385: "WORKBOOK.DELETE",
          386: "WORKBOOK.NAME",
          388: "GALLERY.CUSTOM",
          390: "ADD.CHART.AUTOFORMAT",
          391: "DELETE.CHART.AUTOFORMAT",
          392: "CHART.ADD.DATA",
          393: "AUTO.OUTLINE",
          394: "TAB.ORDER",
          395: "SHOW.DIALOG",
          396: "SELECT.ALL",
          397: "UNGROUP.SHEETS",
          398: "SUBTOTAL.CREATE",
          399: "SUBTOTAL.REMOVE",
          400: "RENAME.OBJECT",
          412: "WORKBOOK.SCROLL",
          413: "WORKBOOK.NEXT",
          414: "WORKBOOK.PREV",
          415: "WORKBOOK.TAB.SPLIT",
          416: "FULL.SCREEN",
          417: "WORKBOOK.PROTECT",
          420: "SCROLLBAR.PROPERTIES",
          421: "PIVOT.SHOW.PAGES",
          422: "TEXT.TO.COLUMNS",
          423: "FORMAT.CHARTTYPE",
          424: "LINK.FORMAT",
          425: "TRACER.DISPLAY",
          430: "TRACER.NAVIGATE",
          431: "TRACER.CLEAR",
          432: "TRACER.ERROR",
          433: "PIVOT.FIELD.GROUP",
          434: "PIVOT.FIELD.UNGROUP",
          435: "CHECKBOX.PROPERTIES",
          436: "LABEL.PROPERTIES",
          437: "LISTBOX.PROPERTIES",
          438: "EDITBOX.PROPERTIES",
          439: "PIVOT.REFRESH",
          440: "LINK.COMBO",
          441: "OPEN.TEXT",
          442: "HIDE.DIALOG",
          443: "SET.DIALOG.FOCUS",
          444: "ENABLE.OBJECT",
          445: "PUSHBUTTON.PROPERTIES",
          446: "SET.DIALOG.DEFAULT",
          447: "FILTER",
          448: "FILTER.SHOW.ALL",
          449: "CLEAR.OUTLINE",
          450: "FUNCTION.WIZARD",
          451: "ADD.LIST.ITEM",
          452: "SET.LIST.ITEM",
          453: "REMOVE.LIST.ITEM",
          454: "SELECT.LIST.ITEM",
          455: "SET.CONTROL.VALUE",
          456: "SAVE.COPY.AS",
          458: "OPTIONS.LISTS.ADD",
          459: "OPTIONS.LISTS.DELETE",
          460: "SERIES.AXES",
          461: "SERIES.X",
          462: "SERIES.Y",
          463: "ERRORBAR.X",
          464: "ERRORBAR.Y",
          465: "FORMAT.CHART",
          466: "SERIES.ORDER",
          467: "MAIL.LOGOFF",
          468: "CLEAR.ROUTING.SLIP",
          469: "APP.ACTIVATE.MICROSOFT",
          470: "MAIL.EDIT.MAILER",
          471: "ON.SHEET",
          472: "STANDARD.WIDTH",
          473: "SCENARIO.MERGE",
          474: "SUMMARY.INFO",
          475: "FIND.FILE",
          476: "ACTIVE.CELL.FONT",
          477: "ENABLE.TIPWIZARD",
          478: "VBA.MAKE.ADDIN",
          480: "INSERTDATATABLE",
          481: "WORKGROUP.OPTIONS",
          482: "MAIL.SEND.MAILER",
          485: "AUTOCORRECT",
          489: "POST.DOCUMENT",
          491: "PICKLIST",
          493: "VIEW.SHOW",
          494: "VIEW.DEFINE",
          495: "VIEW.DELETE",
          509: "SHEET.BACKGROUND",
          510: "INSERT.MAP.OBJECT",
          511: "OPTIONS.MENONO",
          517: "MSOCHECKS",
          518: "NORMAL",
          519: "LAYOUT",
          520: "RM.PRINT.AREA",
          521: "CLEAR.PRINT.AREA",
          522: "ADD.PRINT.AREA",
          523: "MOVE.BRK",
          545: "HIDECURR.NOTE",
          546: "HIDEALL.NOTES",
          547: "DELETE.NOTE",
          548: "TRAVERSE.NOTES",
          549: "ACTIVATE.NOTES",
          620: "PROTECT.REVISIONS",
          621: "UNPROTECT.REVISIONS",
          647: "OPTIONS.ME",
          653: "WEB.PUBLISH",
          667: "NEWWEBQUERY",
          673: "PIVOT.TABLE.CHART",
          753: "OPTIONS.SAVE",
          755: "OPTIONS.SPELL",
          808: "HIDEALL.INKANNOTS"
        };
        var Ftab = {
          0: "COUNT",
          1: "IF",
          2: "ISNA",
          3: "ISERROR",
          4: "SUM",
          5: "AVERAGE",
          6: "MIN",
          7: "MAX",
          8: "ROW",
          9: "COLUMN",
          10: "NA",
          11: "NPV",
          12: "STDEV",
          13: "DOLLAR",
          14: "FIXED",
          15: "SIN",
          16: "COS",
          17: "TAN",
          18: "ATAN",
          19: "PI",
          20: "SQRT",
          21: "EXP",
          22: "LN",
          23: "LOG10",
          24: "ABS",
          25: "INT",
          26: "SIGN",
          27: "ROUND",
          28: "LOOKUP",
          29: "INDEX",
          30: "REPT",
          31: "MID",
          32: "LEN",
          33: "VALUE",
          34: "TRUE",
          35: "FALSE",
          36: "AND",
          37: "OR",
          38: "NOT",
          39: "MOD",
          40: "DCOUNT",
          41: "DSUM",
          42: "DAVERAGE",
          43: "DMIN",
          44: "DMAX",
          45: "DSTDEV",
          46: "VAR",
          47: "DVAR",
          48: "TEXT",
          49: "LINEST",
          50: "TREND",
          51: "LOGEST",
          52: "GROWTH",
          53: "GOTO",
          54: "HALT",
          55: "RETURN",
          56: "PV",
          57: "FV",
          58: "NPER",
          59: "PMT",
          60: "RATE",
          61: "MIRR",
          62: "IRR",
          63: "RAND",
          64: "MATCH",
          65: "DATE",
          66: "TIME",
          67: "DAY",
          68: "MONTH",
          69: "YEAR",
          70: "WEEKDAY",
          71: "HOUR",
          72: "MINUTE",
          73: "SECOND",
          74: "NOW",
          75: "AREAS",
          76: "ROWS",
          77: "COLUMNS",
          78: "OFFSET",
          79: "ABSREF",
          80: "RELREF",
          81: "ARGUMENT",
          82: "SEARCH",
          83: "TRANSPOSE",
          84: "ERROR",
          85: "STEP",
          86: "TYPE",
          87: "ECHO",
          88: "SET.NAME",
          89: "CALLER",
          90: "DEREF",
          91: "WINDOWS",
          92: "SERIES",
          93: "DOCUMENTS",
          94: "ACTIVE.CELL",
          95: "SELECTION",
          96: "RESULT",
          97: "ATAN2",
          98: "ASIN",
          99: "ACOS",
          100: "CHOOSE",
          101: "HLOOKUP",
          102: "VLOOKUP",
          103: "LINKS",
          104: "INPUT",
          105: "ISREF",
          106: "GET.FORMULA",
          107: "GET.NAME",
          108: "SET.VALUE",
          109: "LOG",
          110: "EXEC",
          111: "CHAR",
          112: "LOWER",
          113: "UPPER",
          114: "PROPER",
          115: "LEFT",
          116: "RIGHT",
          117: "EXACT",
          118: "TRIM",
          119: "REPLACE",
          120: "SUBSTITUTE",
          121: "CODE",
          122: "NAMES",
          123: "DIRECTORY",
          124: "FIND",
          125: "CELL",
          126: "ISERR",
          127: "ISTEXT",
          128: "ISNUMBER",
          129: "ISBLANK",
          130: "T",
          131: "N",
          132: "FOPEN",
          133: "FCLOSE",
          134: "FSIZE",
          135: "FREADLN",
          136: "FREAD",
          137: "FWRITELN",
          138: "FWRITE",
          139: "FPOS",
          140: "DATEVALUE",
          141: "TIMEVALUE",
          142: "SLN",
          143: "SYD",
          144: "DDB",
          145: "GET.DEF",
          146: "REFTEXT",
          147: "TEXTREF",
          148: "INDIRECT",
          149: "REGISTER",
          150: "CALL",
          151: "ADD.BAR",
          152: "ADD.MENU",
          153: "ADD.COMMAND",
          154: "ENABLE.COMMAND",
          155: "CHECK.COMMAND",
          156: "RENAME.COMMAND",
          157: "SHOW.BAR",
          158: "DELETE.MENU",
          159: "DELETE.COMMAND",
          160: "GET.CHART.ITEM",
          161: "DIALOG.BOX",
          162: "CLEAN",
          163: "MDETERM",
          164: "MINVERSE",
          165: "MMULT",
          166: "FILES",
          167: "IPMT",
          168: "PPMT",
          169: "COUNTA",
          170: "CANCEL.KEY",
          171: "FOR",
          172: "WHILE",
          173: "BREAK",
          174: "NEXT",
          175: "INITIATE",
          176: "REQUEST",
          177: "POKE",
          178: "EXECUTE",
          179: "TERMINATE",
          180: "RESTART",
          181: "HELP",
          182: "GET.BAR",
          183: "PRODUCT",
          184: "FACT",
          185: "GET.CELL",
          186: "GET.WORKSPACE",
          187: "GET.WINDOW",
          188: "GET.DOCUMENT",
          189: "DPRODUCT",
          190: "ISNONTEXT",
          191: "GET.NOTE",
          192: "NOTE",
          193: "STDEVP",
          194: "VARP",
          195: "DSTDEVP",
          196: "DVARP",
          197: "TRUNC",
          198: "ISLOGICAL",
          199: "DCOUNTA",
          200: "DELETE.BAR",
          201: "UNREGISTER",
          204: "USDOLLAR",
          205: "FINDB",
          206: "SEARCHB",
          207: "REPLACEB",
          208: "LEFTB",
          209: "RIGHTB",
          210: "MIDB",
          211: "LENB",
          212: "ROUNDUP",
          213: "ROUNDDOWN",
          214: "ASC",
          215: "DBCS",
          216: "RANK",
          219: "ADDRESS",
          220: "DAYS360",
          221: "TODAY",
          222: "VDB",
          223: "ELSE",
          224: "ELSE.IF",
          225: "END.IF",
          226: "FOR.CELL",
          227: "MEDIAN",
          228: "SUMPRODUCT",
          229: "SINH",
          230: "COSH",
          231: "TANH",
          232: "ASINH",
          233: "ACOSH",
          234: "ATANH",
          235: "DGET",
          236: "CREATE.OBJECT",
          237: "VOLATILE",
          238: "LAST.ERROR",
          239: "CUSTOM.UNDO",
          240: "CUSTOM.REPEAT",
          241: "FORMULA.CONVERT",
          242: "GET.LINK.INFO",
          243: "TEXT.BOX",
          244: "INFO",
          245: "GROUP",
          246: "GET.OBJECT",
          247: "DB",
          248: "PAUSE",
          251: "RESUME",
          252: "FREQUENCY",
          253: "ADD.TOOLBAR",
          254: "DELETE.TOOLBAR",
          255: "User",
          256: "RESET.TOOLBAR",
          257: "EVALUATE",
          258: "GET.TOOLBAR",
          259: "GET.TOOL",
          260: "SPELLING.CHECK",
          261: "ERROR.TYPE",
          262: "APP.TITLE",
          263: "WINDOW.TITLE",
          264: "SAVE.TOOLBAR",
          265: "ENABLE.TOOL",
          266: "PRESS.TOOL",
          267: "REGISTER.ID",
          268: "GET.WORKBOOK",
          269: "AVEDEV",
          270: "BETADIST",
          271: "GAMMALN",
          272: "BETAINV",
          273: "BINOMDIST",
          274: "CHIDIST",
          275: "CHIINV",
          276: "COMBIN",
          277: "CONFIDENCE",
          278: "CRITBINOM",
          279: "EVEN",
          280: "EXPONDIST",
          281: "FDIST",
          282: "FINV",
          283: "FISHER",
          284: "FISHERINV",
          285: "FLOOR",
          286: "GAMMADIST",
          287: "GAMMAINV",
          288: "CEILING",
          289: "HYPGEOMDIST",
          290: "LOGNORMDIST",
          291: "LOGINV",
          292: "NEGBINOMDIST",
          293: "NORMDIST",
          294: "NORMSDIST",
          295: "NORMINV",
          296: "NORMSINV",
          297: "STANDARDIZE",
          298: "ODD",
          299: "PERMUT",
          300: "POISSON",
          301: "TDIST",
          302: "WEIBULL",
          303: "SUMXMY2",
          304: "SUMX2MY2",
          305: "SUMX2PY2",
          306: "CHITEST",
          307: "CORREL",
          308: "COVAR",
          309: "FORECAST",
          310: "FTEST",
          311: "INTERCEPT",
          312: "PEARSON",
          313: "RSQ",
          314: "STEYX",
          315: "SLOPE",
          316: "TTEST",
          317: "PROB",
          318: "DEVSQ",
          319: "GEOMEAN",
          320: "HARMEAN",
          321: "SUMSQ",
          322: "KURT",
          323: "SKEW",
          324: "ZTEST",
          325: "LARGE",
          326: "SMALL",
          327: "QUARTILE",
          328: "PERCENTILE",
          329: "PERCENTRANK",
          330: "MODE",
          331: "TRIMMEAN",
          332: "TINV",
          334: "MOVIE.COMMAND",
          335: "GET.MOVIE",
          336: "CONCATENATE",
          337: "POWER",
          338: "PIVOT.ADD.DATA",
          339: "GET.PIVOT.TABLE",
          340: "GET.PIVOT.FIELD",
          341: "GET.PIVOT.ITEM",
          342: "RADIANS",
          343: "DEGREES",
          344: "SUBTOTAL",
          345: "SUMIF",
          346: "COUNTIF",
          347: "COUNTBLANK",
          348: "SCENARIO.GET",
          349: "OPTIONS.LISTS.GET",
          350: "ISPMT",
          351: "DATEDIF",
          352: "DATESTRING",
          353: "NUMBERSTRING",
          354: "ROMAN",
          355: "OPEN.DIALOG",
          356: "SAVE.DIALOG",
          357: "VIEW.GET",
          358: "GETPIVOTDATA",
          359: "HYPERLINK",
          360: "PHONETIC",
          361: "AVERAGEA",
          362: "MAXA",
          363: "MINA",
          364: "STDEVPA",
          365: "VARPA",
          366: "STDEVA",
          367: "VARA",
          368: "BAHTTEXT",
          369: "THAIDAYOFWEEK",
          370: "THAIDIGIT",
          371: "THAIMONTHOFYEAR",
          372: "THAINUMSOUND",
          373: "THAINUMSTRING",
          374: "THAISTRINGLENGTH",
          375: "ISTHAIDIGIT",
          376: "ROUNDBAHTDOWN",
          377: "ROUNDBAHTUP",
          378: "THAIYEAR",
          379: "RTD",
          380: "CUBEVALUE",
          381: "CUBEMEMBER",
          382: "CUBEMEMBERPROPERTY",
          383: "CUBERANKEDMEMBER",
          384: "HEX2BIN",
          385: "HEX2DEC",
          386: "HEX2OCT",
          387: "DEC2BIN",
          388: "DEC2HEX",
          389: "DEC2OCT",
          390: "OCT2BIN",
          391: "OCT2HEX",
          392: "OCT2DEC",
          393: "BIN2DEC",
          394: "BIN2OCT",
          395: "BIN2HEX",
          396: "IMSUB",
          397: "IMDIV",
          398: "IMPOWER",
          399: "IMABS",
          400: "IMSQRT",
          401: "IMLN",
          402: "IMLOG2",
          403: "IMLOG10",
          404: "IMSIN",
          405: "IMCOS",
          406: "IMEXP",
          407: "IMARGUMENT",
          408: "IMCONJUGATE",
          409: "IMAGINARY",
          410: "IMREAL",
          411: "COMPLEX",
          412: "IMSUM",
          413: "IMPRODUCT",
          414: "SERIESSUM",
          415: "FACTDOUBLE",
          416: "SQRTPI",
          417: "QUOTIENT",
          418: "DELTA",
          419: "GESTEP",
          420: "ISEVEN",
          421: "ISODD",
          422: "MROUND",
          423: "ERF",
          424: "ERFC",
          425: "BESSELJ",
          426: "BESSELK",
          427: "BESSELY",
          428: "BESSELI",
          429: "XIRR",
          430: "XNPV",
          431: "PRICEMAT",
          432: "YIELDMAT",
          433: "INTRATE",
          434: "RECEIVED",
          435: "DISC",
          436: "PRICEDISC",
          437: "YIELDDISC",
          438: "TBILLEQ",
          439: "TBILLPRICE",
          440: "TBILLYIELD",
          441: "PRICE",
          442: "YIELD",
          443: "DOLLARDE",
          444: "DOLLARFR",
          445: "NOMINAL",
          446: "EFFECT",
          447: "CUMPRINC",
          448: "CUMIPMT",
          449: "EDATE",
          450: "EOMONTH",
          451: "YEARFRAC",
          452: "COUPDAYBS",
          453: "COUPDAYS",
          454: "COUPDAYSNC",
          455: "COUPNCD",
          456: "COUPNUM",
          457: "COUPPCD",
          458: "DURATION",
          459: "MDURATION",
          460: "ODDLPRICE",
          461: "ODDLYIELD",
          462: "ODDFPRICE",
          463: "ODDFYIELD",
          464: "RANDBETWEEN",
          465: "WEEKNUM",
          466: "AMORDEGRC",
          467: "AMORLINC",
          468: "CONVERT",
          724: "SHEETJS",
          469: "ACCRINT",
          470: "ACCRINTM",
          471: "WORKDAY",
          472: "NETWORKDAYS",
          473: "GCD",
          474: "MULTINOMIAL",
          475: "LCM",
          476: "FVSCHEDULE",
          477: "CUBEKPIMEMBER",
          478: "CUBESET",
          479: "CUBESETCOUNT",
          480: "IFERROR",
          481: "COUNTIFS",
          482: "SUMIFS",
          483: "AVERAGEIF",
          484: "AVERAGEIFS"
        };
        var FtabArgc = {
          2: 1,
          3: 1,
          10: 0,
          15: 1,
          16: 1,
          17: 1,
          18: 1,
          19: 0,
          20: 1,
          21: 1,
          22: 1,
          23: 1,
          24: 1,
          25: 1,
          26: 1,
          27: 2,
          30: 2,
          31: 3,
          32: 1,
          33: 1,
          34: 0,
          35: 0,
          38: 1,
          39: 2,
          40: 3,
          41: 3,
          42: 3,
          43: 3,
          44: 3,
          45: 3,
          47: 3,
          48: 2,
          53: 1,
          61: 3,
          63: 0,
          65: 3,
          66: 3,
          67: 1,
          68: 1,
          69: 1,
          70: 1,
          71: 1,
          72: 1,
          73: 1,
          74: 0,
          75: 1,
          76: 1,
          77: 1,
          79: 2,
          80: 2,
          83: 1,
          85: 0,
          86: 1,
          89: 0,
          90: 1,
          94: 0,
          95: 0,
          97: 2,
          98: 1,
          99: 1,
          101: 3,
          102: 3,
          105: 1,
          106: 1,
          108: 2,
          111: 1,
          112: 1,
          113: 1,
          114: 1,
          117: 2,
          118: 1,
          119: 4,
          121: 1,
          126: 1,
          127: 1,
          128: 1,
          129: 1,
          130: 1,
          131: 1,
          133: 1,
          134: 1,
          135: 1,
          136: 2,
          137: 2,
          138: 2,
          140: 1,
          141: 1,
          142: 3,
          143: 4,
          144: 4,
          161: 1,
          162: 1,
          163: 1,
          164: 1,
          165: 2,
          172: 1,
          175: 2,
          176: 2,
          177: 3,
          178: 2,
          179: 1,
          184: 1,
          186: 1,
          189: 3,
          190: 1,
          195: 3,
          196: 3,
          197: 1,
          198: 1,
          199: 3,
          201: 1,
          207: 4,
          210: 3,
          211: 1,
          212: 2,
          213: 2,
          214: 1,
          215: 1,
          225: 0,
          229: 1,
          230: 1,
          231: 1,
          232: 1,
          233: 1,
          234: 1,
          235: 3,
          244: 1,
          247: 4,
          252: 2,
          257: 1,
          261: 1,
          271: 1,
          273: 4,
          274: 2,
          275: 2,
          276: 2,
          277: 3,
          278: 3,
          279: 1,
          280: 3,
          281: 3,
          282: 3,
          283: 1,
          284: 1,
          285: 2,
          286: 4,
          287: 3,
          288: 2,
          289: 4,
          290: 3,
          291: 3,
          292: 3,
          293: 4,
          294: 1,
          295: 3,
          296: 1,
          297: 3,
          298: 1,
          299: 2,
          300: 3,
          301: 3,
          302: 4,
          303: 2,
          304: 2,
          305: 2,
          306: 2,
          307: 2,
          308: 2,
          309: 3,
          310: 2,
          311: 2,
          312: 2,
          313: 2,
          314: 2,
          315: 2,
          316: 4,
          325: 2,
          326: 2,
          327: 2,
          328: 2,
          331: 2,
          332: 2,
          337: 2,
          342: 1,
          343: 1,
          346: 2,
          347: 1,
          350: 4,
          351: 3,
          352: 1,
          353: 2,
          360: 1,
          368: 1,
          369: 1,
          370: 1,
          371: 1,
          372: 1,
          373: 1,
          374: 1,
          375: 1,
          376: 1,
          377: 1,
          378: 1,
          382: 3,
          385: 1,
          392: 1,
          393: 1,
          396: 2,
          397: 2,
          398: 2,
          399: 1,
          400: 1,
          401: 1,
          402: 1,
          403: 1,
          404: 1,
          405: 1,
          406: 1,
          407: 1,
          408: 1,
          409: 1,
          410: 1,
          414: 4,
          415: 1,
          416: 1,
          417: 2,
          420: 1,
          421: 1,
          422: 2,
          424: 1,
          425: 2,
          426: 2,
          427: 2,
          428: 2,
          430: 3,
          438: 3,
          439: 3,
          440: 3,
          443: 2,
          444: 2,
          445: 2,
          446: 2,
          447: 6,
          448: 6,
          449: 2,
          450: 2,
          464: 2,
          468: 3,
          476: 2,
          479: 1,
          480: 2,
          65535: 0
        };
        function ods_to_csf_formula(f2) {
          if (f2.slice(0, 3) == "of:")
            f2 = f2.slice(3);
          if (f2.charCodeAt(0) == 61) {
            f2 = f2.slice(1);
            if (f2.charCodeAt(0) == 61)
              f2 = f2.slice(1);
          }
          f2 = f2.replace(/COM\.MICROSOFT\./g, "");
          f2 = f2.replace(/\[((?:\.[A-Z]+[0-9]+)(?::\.[A-Z]+[0-9]+)?)\]/g, function($$, $1) {
            return $1.replace(/\./g, "");
          });
          f2 = f2.replace(/\$'([^']|'')+'/g, function($$) {
            return $$.slice(1);
          });
          f2 = f2.replace(/\$([^\]\. #$]+)/g, function($$, $1) {
            return $1.match(/^([A-Z]{1,2}|[A-W][A-Z]{2}|X[A-E][A-Z]|XF[A-D])?(10[0-3]\d{4}|104[0-7]\d{3}|1048[0-4]\d{2}|10485[0-6]\d|104857[0-6]|[1-9]\d{0,5})?$/) ? $$ : $1;
          });
          f2 = f2.replace(/\[.(#[A-Z]*[?!])\]/g, "$1");
          return f2.replace(/[;~]/g, ",").replace(/\|/g, ";");
        }
        function csf_to_ods_formula(f2) {
          var o6 = "of:=" + f2.replace(crefregex, "$1[.$2$3$4$5]").replace(/\]:\[/g, ":");
          return o6.replace(/;/g, "|").replace(/,/g, ";");
        }
        function ods_to_csf_3D(r6) {
          r6 = r6.replace(/\$'([^']|'')+'/g, function($$) {
            return $$.slice(1);
          });
          r6 = r6.replace(/\$([^\]\. #$]+)/g, function($$, $1) {
            return $1.match(/^([A-Z]{1,2}|[A-W][A-Z]{2}|X[A-E][A-Z]|XF[A-D])?(10[0-3]\d{4}|104[0-7]\d{3}|1048[0-4]\d{2}|10485[0-6]\d|104857[0-6]|[1-9]\d{0,5})?$/) ? $$ : $1;
          });
          var a2 = r6.split(":");
          var s3 = a2[0].split(".")[0];
          return [s3, a2[0].split(".")[1] + (a2.length > 1 ? ":" + (a2[1].split(".")[1] || a2[1].split(".")[0]) : "")];
        }
        function csf_to_ods_3D(r6) {
          return r6.replace(/!/, ".").replace(/:/, ":.");
        }
        var strs = {};
        var _ssfopts = {};
        var browser_has_Map = typeof Map !== "undefined";
        function get_sst_id(sst, str, rev) {
          var i6 = 0, len = sst.length;
          if (rev) {
            if (browser_has_Map ? rev.has(str) : Object.prototype.hasOwnProperty.call(rev, str)) {
              var revarr = browser_has_Map ? rev.get(str) : rev[str];
              for (; i6 < revarr.length; ++i6) {
                if (sst[revarr[i6]].t === str) {
                  sst.Count++;
                  return revarr[i6];
                }
              }
            }
          } else
            for (; i6 < len; ++i6) {
              if (sst[i6].t === str) {
                sst.Count++;
                return i6;
              }
            }
          sst[len] = { t: str };
          sst.Count++;
          sst.Unique++;
          if (rev) {
            if (browser_has_Map) {
              if (!rev.has(str))
                rev.set(str, []);
              rev.get(str).push(len);
            } else {
              if (!Object.prototype.hasOwnProperty.call(rev, str))
                rev[str] = [];
              rev[str].push(len);
            }
          }
          return len;
        }
        function col_obj_w(C6, col) {
          var p2 = { min: C6 + 1, max: C6 + 1 };
          var wch = -1;
          if (col.MDW)
            MDW = col.MDW;
          if (col.width != null)
            p2.customWidth = 1;
          else if (col.wpx != null)
            wch = px2char(col.wpx);
          else if (col.wch != null)
            wch = col.wch;
          if (wch > -1) {
            p2.width = char2width(wch);
            p2.customWidth = 1;
          } else if (col.width != null)
            p2.width = col.width;
          if (col.hidden)
            p2.hidden = true;
          if (col.level != null) {
            p2.outlineLevel = p2.level = col.level;
          }
          return p2;
        }
        function default_margins(margins, mode) {
          if (!margins)
            return;
          var defs = [0.7, 0.7, 0.75, 0.75, 0.3, 0.3];
          if (mode == "xlml")
            defs = [1, 1, 1, 1, 0.5, 0.5];
          if (margins.left == null)
            margins.left = defs[0];
          if (margins.right == null)
            margins.right = defs[1];
          if (margins.top == null)
            margins.top = defs[2];
          if (margins.bottom == null)
            margins.bottom = defs[3];
          if (margins.header == null)
            margins.header = defs[4];
          if (margins.footer == null)
            margins.footer = defs[5];
        }
        function get_cell_style(styles, cell, opts) {
          var z3 = opts.revssf[cell.z != null ? cell.z : "General"];
          var i6 = 60, len = styles.length;
          if (z3 == null && opts.ssf) {
            for (; i6 < 392; ++i6)
              if (opts.ssf[i6] == null) {
                SSF__load(cell.z, i6);
                opts.ssf[i6] = cell.z;
                opts.revssf[cell.z] = z3 = i6;
                break;
              }
          }
          for (i6 = 0; i6 != len; ++i6)
            if (styles[i6].numFmtId === z3)
              return i6;
          styles[len] = {
            numFmtId: z3,
            fontId: 0,
            fillId: 0,
            borderId: 0,
            xfId: 0,
            applyNumberFormat: 1
          };
          return len;
        }
        function safe_format(p2, fmtid, fillid, opts, themes, styles, date1904) {
          try {
            if (opts.cellNF)
              p2.z = table_fmt[fmtid];
          } catch (e7) {
            if (opts.WTF)
              throw e7;
          }
          if (p2.t === "z" && !opts.cellStyles)
            return;
          if (p2.t === "d" && typeof p2.v === "string")
            p2.v = parseDate(p2.v);
          if ((!opts || opts.cellText !== false) && p2.t !== "z")
            try {
              if (table_fmt[fmtid] == null)
                SSF__load(SSFImplicit[fmtid] || "General", fmtid);
              if (p2.t === "e")
                p2.w = p2.w || BErr[p2.v];
              else if (fmtid === 0) {
                if (p2.t === "n") {
                  if ((p2.v | 0) === p2.v)
                    p2.w = p2.v.toString(10);
                  else
                    p2.w = SSF_general_num(p2.v);
                } else if (p2.t === "d") {
                  var dd = datenum(p2.v, !!date1904);
                  if ((dd | 0) === dd)
                    p2.w = dd.toString(10);
                  else
                    p2.w = SSF_general_num(dd);
                } else if (p2.v === void 0)
                  return "";
                else
                  p2.w = SSF_general(p2.v, _ssfopts);
              } else if (p2.t === "d")
                p2.w = SSF_format(fmtid, datenum(p2.v, !!date1904), _ssfopts);
              else
                p2.w = SSF_format(fmtid, p2.v, _ssfopts);
            } catch (e7) {
              if (opts.WTF)
                throw e7;
            }
          if (!opts.cellStyles)
            return;
          if (fillid != null)
            try {
              p2.s = styles.Fills[fillid];
              if (p2.s.fgColor && p2.s.fgColor.theme && !p2.s.fgColor.rgb) {
                p2.s.fgColor.rgb = rgb_tint(themes.themeElements.clrScheme[p2.s.fgColor.theme].rgb, p2.s.fgColor.tint || 0);
                if (opts.WTF)
                  p2.s.fgColor.raw_rgb = themes.themeElements.clrScheme[p2.s.fgColor.theme].rgb;
              }
              if (p2.s.bgColor && p2.s.bgColor.theme) {
                p2.s.bgColor.rgb = rgb_tint(themes.themeElements.clrScheme[p2.s.bgColor.theme].rgb, p2.s.bgColor.tint || 0);
                if (opts.WTF)
                  p2.s.bgColor.raw_rgb = themes.themeElements.clrScheme[p2.s.bgColor.theme].rgb;
              }
            } catch (e7) {
              if (opts.WTF && styles.Fills)
                throw e7;
            }
        }
        function check_ws(ws, sname, i6) {
          if (ws && ws["!ref"]) {
            var range = safe_decode_range(ws["!ref"]);
            if (range.e.c < range.s.c || range.e.r < range.s.r)
              throw new Error("Bad range (" + i6 + "): " + ws["!ref"]);
          }
        }
        function parse_ws_xml_dim(ws, s3) {
          var d2 = safe_decode_range(s3);
          if (d2.s.r <= d2.e.r && d2.s.c <= d2.e.c && d2.s.r >= 0 && d2.s.c >= 0)
            ws["!ref"] = encode_range(d2);
        }
        var mergecregex = /<(?:\w+:)?mergeCell ref=["'][A-Z0-9:]+['"]\s*[\/]?>/g;
        var hlinkregex = /<(?:\w+:)?hyperlink [^<>]*>/mg;
        var dimregex = /"(\w*:\w*)"/;
        var colregex = /<(?:\w+:)?col\b[^<>]*[\/]?>/g;
        var afregex = /<(?:\w+:)?autoFilter[^>]*/g;
        var marginregex = /<(?:\w+:)?pageMargins[^<>]*\/>/g;
        var sheetprregex = /<(?:\w+:)?sheetPr\b[^<>]*?\/>/;
        function parse_ws_xml(data, opts, idx, rels, wb, themes, styles) {
          if (!data)
            return data;
          if (!rels)
            rels = { "!id": {} };
          if (DENSE != null && opts.dense == null)
            opts.dense = DENSE;
          var s3 = {};
          if (opts.dense)
            s3["!data"] = [];
          var refguess = { s: { r: 2e6, c: 2e6 }, e: { r: 0, c: 0 } };
          var data1 = "", data2 = "";
          var mtch = str_match_xml_ns(data, "sheetData");
          if (mtch) {
            data1 = data.slice(0, mtch.index);
            data2 = data.slice(mtch.index + mtch[0].length);
          } else
            data1 = data2 = data;
          var sheetPr = data1.match(sheetprregex);
          if (sheetPr)
            parse_ws_xml_sheetpr(sheetPr[0], s3, wb, idx);
          else if (sheetPr = str_match_xml_ns(data1, "sheetPr"))
            parse_ws_xml_sheetpr2(sheetPr[0], sheetPr[1] || "", s3, wb, idx, styles, themes);
          var ridx = (data1.match(/<(?:\w*:)?dimension/) || { index: -1 }).index;
          if (ridx > 0) {
            var ref = data1.slice(ridx, ridx + 50).match(dimregex);
            if (ref && !(opts && opts.nodim))
              parse_ws_xml_dim(s3, ref[1]);
          }
          var svs = str_match_xml_ns(data1, "sheetViews");
          if (svs && svs[1])
            parse_ws_xml_sheetviews(svs[1], wb);
          var columns = [];
          if (opts.cellStyles) {
            var cols = data1.match(colregex);
            if (cols)
              parse_ws_xml_cols(columns, cols);
          }
          if (mtch)
            parse_ws_xml_data(mtch[1], s3, opts, refguess, themes, styles, wb);
          var afilter = data2.match(afregex);
          if (afilter)
            s3["!autofilter"] = parse_ws_xml_autofilter(afilter[0]);
          var merges = [];
          var _merge = data2.match(mergecregex);
          if (_merge)
            for (ridx = 0; ridx != _merge.length; ++ridx)
              merges[ridx] = safe_decode_range(_merge[ridx].slice(_merge[ridx].indexOf("=") + 2));
          var hlink = data2.match(hlinkregex);
          if (hlink)
            parse_ws_xml_hlinks(s3, hlink, rels);
          var margins = data2.match(marginregex);
          if (margins)
            s3["!margins"] = parse_ws_xml_margins(parsexmltag(margins[0]));
          var m4;
          if (m4 = data2.match(/legacyDrawing r:id="(.*?)"/))
            s3["!legrel"] = m4[1];
          if (opts && opts.nodim)
            refguess.s.c = refguess.s.r = 0;
          if (!s3["!ref"] && refguess.e.c >= refguess.s.c && refguess.e.r >= refguess.s.r)
            s3["!ref"] = encode_range(refguess);
          if (opts.sheetRows > 0 && s3["!ref"]) {
            var tmpref = safe_decode_range(s3["!ref"]);
            if (opts.sheetRows <= +tmpref.e.r) {
              tmpref.e.r = opts.sheetRows - 1;
              if (tmpref.e.r > refguess.e.r)
                tmpref.e.r = refguess.e.r;
              if (tmpref.e.r < tmpref.s.r)
                tmpref.s.r = tmpref.e.r;
              if (tmpref.e.c > refguess.e.c)
                tmpref.e.c = refguess.e.c;
              if (tmpref.e.c < tmpref.s.c)
                tmpref.s.c = tmpref.e.c;
              s3["!fullref"] = s3["!ref"];
              s3["!ref"] = encode_range(tmpref);
            }
          }
          if (columns.length > 0)
            s3["!cols"] = columns;
          if (merges.length > 0)
            s3["!merges"] = merges;
          if (rels["!id"][s3["!legrel"]])
            s3["!legdrawel"] = rels["!id"][s3["!legrel"]];
          return s3;
        }
        function write_ws_xml_merges(merges) {
          if (merges.length === 0)
            return "";
          var o6 = '<mergeCells count="' + merges.length + '">';
          for (var i6 = 0; i6 != merges.length; ++i6)
            o6 += '<mergeCell ref="' + encode_range(merges[i6]) + '"/>';
          return o6 + "</mergeCells>";
        }
        function parse_ws_xml_sheetpr(sheetPr, s3, wb, idx) {
          var data = parsexmltag(sheetPr);
          if (!wb.Sheets[idx])
            wb.Sheets[idx] = {};
          if (data.codeName)
            wb.Sheets[idx].CodeName = unescapexml(utf8read(data.codeName));
        }
        function parse_ws_xml_sheetpr2(sheetPr, body, s3, wb, idx) {
          parse_ws_xml_sheetpr(sheetPr.slice(0, sheetPr.indexOf(">")), s3, wb, idx);
        }
        function write_ws_xml_sheetpr(ws, wb, idx, opts, o6) {
          var needed = false;
          var props = {}, payload = null;
          if (opts.bookType !== "xlsx" && wb.vbaraw) {
            var cname = wb.SheetNames[idx];
            try {
              if (wb.Workbook)
                cname = wb.Workbook.Sheets[idx].CodeName || cname;
            } catch (e7) {
            }
            needed = true;
            props.codeName = utf8write(escapexml(cname));
          }
          if (ws && ws["!outline"]) {
            var outlineprops = { summaryBelow: 1, summaryRight: 1 };
            if (ws["!outline"].above)
              outlineprops.summaryBelow = 0;
            if (ws["!outline"].left)
              outlineprops.summaryRight = 0;
            payload = (payload || "") + writextag("outlinePr", null, outlineprops);
          }
          if (!needed && !payload)
            return;
          o6[o6.length] = writextag("sheetPr", payload, props);
        }
        var sheetprot_deffalse = ["objects", "scenarios", "selectLockedCells", "selectUnlockedCells"];
        var sheetprot_deftrue = [
          "formatColumns",
          "formatRows",
          "formatCells",
          "insertColumns",
          "insertRows",
          "insertHyperlinks",
          "deleteColumns",
          "deleteRows",
          "sort",
          "autoFilter",
          "pivotTables"
        ];
        function write_ws_xml_protection(sp) {
          var o6 = { sheet: 1 };
          sheetprot_deffalse.forEach(function(n6) {
            if (sp[n6] != null && sp[n6])
              o6[n6] = "1";
          });
          sheetprot_deftrue.forEach(function(n6) {
            if (sp[n6] != null && !sp[n6])
              o6[n6] = "0";
          });
          if (sp.password)
            o6.password = crypto_CreatePasswordVerifier_Method1(sp.password).toString(16).toUpperCase();
          return writextag("sheetProtection", null, o6);
        }
        function parse_ws_xml_hlinks(s3, data, rels) {
          var dense = s3["!data"] != null;
          for (var i6 = 0; i6 != data.length; ++i6) {
            var val2 = parsexmltag(utf8read(data[i6]), true);
            if (!val2.ref)
              return;
            var rel = ((rels || {})["!id"] || [])[val2.id];
            if (rel) {
              val2.Target = rel.Target;
              if (val2.location)
                val2.Target += "#" + unescapexml(val2.location);
            } else {
              val2.Target = "#" + unescapexml(val2.location);
              rel = { Target: val2.Target, TargetMode: "Internal" };
            }
            val2.Rel = rel;
            if (val2.tooltip) {
              val2.Tooltip = val2.tooltip;
              delete val2.tooltip;
            }
            var rng = safe_decode_range(val2.ref);
            for (var R2 = rng.s.r; R2 <= rng.e.r; ++R2)
              for (var C6 = rng.s.c; C6 <= rng.e.c; ++C6) {
                var addr = encode_col(C6) + encode_row(R2);
                if (dense) {
                  if (!s3["!data"][R2])
                    s3["!data"][R2] = [];
                  if (!s3["!data"][R2][C6])
                    s3["!data"][R2][C6] = { t: "z", v: void 0 };
                  s3["!data"][R2][C6].l = val2;
                } else {
                  if (!s3[addr])
                    s3[addr] = { t: "z", v: void 0 };
                  s3[addr].l = val2;
                }
              }
          }
        }
        function parse_ws_xml_margins(margin) {
          var o6 = {};
          ["left", "right", "top", "bottom", "header", "footer"].forEach(function(k2) {
            if (margin[k2])
              o6[k2] = parseFloat(margin[k2]);
          });
          return o6;
        }
        function write_ws_xml_margins(margin) {
          default_margins(margin);
          return writextag("pageMargins", null, margin);
        }
        function parse_ws_xml_cols(columns, cols) {
          var seencol = false;
          for (var coli = 0; coli != cols.length; ++coli) {
            var coll = parsexmltag(cols[coli], true);
            if (coll.hidden)
              coll.hidden = parsexmlbool(coll.hidden);
            var colm = parseInt(coll.min, 10) - 1, colM = parseInt(coll.max, 10) - 1;
            if (coll.outlineLevel)
              coll.level = +coll.outlineLevel || 0;
            delete coll.min;
            delete coll.max;
            coll.width = +coll.width;
            if (!seencol && coll.width) {
              seencol = true;
              find_mdw_colw(coll.width);
            }
            process_col(coll);
            while (colm <= colM)
              columns[colm++] = dup(coll);
          }
        }
        function write_ws_xml_cols(ws, cols) {
          var o6 = ["<cols>"], col;
          for (var i6 = 0; i6 != cols.length; ++i6) {
            if (!(col = cols[i6]))
              continue;
            o6[o6.length] = writextag("col", null, col_obj_w(i6, col));
          }
          o6[o6.length] = "</cols>";
          return o6.join("");
        }
        function parse_ws_xml_autofilter(data) {
          var o6 = { ref: (data.match(/ref="([^"]*)"/) || [])[1] };
          return o6;
        }
        function write_ws_xml_autofilter(data, ws, wb, idx) {
          var ref = typeof data.ref == "string" ? data.ref : encode_range(data.ref);
          if (!wb.Workbook)
            wb.Workbook = { Sheets: [] };
          if (!wb.Workbook.Names)
            wb.Workbook.Names = [];
          var names2 = wb.Workbook.Names;
          var range = decode_range(ref);
          if (range.s.r == range.e.r) {
            range.e.r = decode_range(ws["!ref"]).e.r;
            ref = encode_range(range);
          }
          for (var i6 = 0; i6 < names2.length; ++i6) {
            var name = names2[i6];
            if (name.Name != "_xlnm._FilterDatabase")
              continue;
            if (name.Sheet != idx)
              continue;
            name.Ref = formula_quote_sheet_name(wb.SheetNames[idx]) + "!" + fix_range(ref);
            break;
          }
          if (i6 == names2.length)
            names2.push({ Name: "_xlnm._FilterDatabase", Sheet: idx, Ref: "'" + wb.SheetNames[idx] + "'!" + ref });
          return writextag("autoFilter", null, { ref });
        }
        var sviewregex = /<(?:\w:)?sheetView(?:[^<>a-z][^<>]*)?\/?>/g;
        function parse_ws_xml_sheetviews(data, wb) {
          if (!wb.Views)
            wb.Views = [{}];
          (data.match(sviewregex) || []).forEach(function(r6, i6) {
            var tag = parsexmltag(r6);
            if (!wb.Views[i6])
              wb.Views[i6] = {};
            if (+tag.zoomScale)
              wb.Views[i6].zoom = +tag.zoomScale;
            if (tag.rightToLeft && parsexmlbool(tag.rightToLeft))
              wb.Views[i6].RTL = true;
          });
        }
        function write_ws_xml_sheetviews(ws, opts, idx, wb) {
          var sview = { workbookViewId: "0" };
          if ((((wb || {}).Workbook || {}).Views || [])[0])
            sview.rightToLeft = wb.Workbook.Views[0].RTL ? "1" : "0";
          return writextag("sheetViews", writextag("sheetView", null, sview), {});
        }
        function write_ws_xml_cell(cell, ref, ws, opts, idx, wb, date1904) {
          if (cell.c)
            ws["!comments"].push([ref, cell.c]);
          if ((cell.v === void 0 || cell.t === "z" && !(opts || {}).sheetStubs) && typeof cell.f !== "string" && typeof cell.z == "undefined")
            return "";
          var vv = "";
          var oldt = cell.t, oldv = cell.v;
          if (cell.t !== "z")
            switch (cell.t) {
              case "b":
                vv = cell.v ? "1" : "0";
                break;
              case "n":
                if (isNaN(cell.v)) {
                  cell.t = "e";
                  vv = BErr[cell.v = 36];
                } else if (!isFinite(cell.v)) {
                  cell.t = "e";
                  vv = BErr[cell.v = 7];
                } else
                  vv = "" + cell.v;
                break;
              case "e":
                vv = BErr[cell.v];
                break;
              case "d":
                if (opts && opts.cellDates) {
                  var _vv = parseDate(cell.v, date1904);
                  vv = _vv.toISOString();
                  if (_vv.getUTCFullYear() < 1900)
                    vv = vv.slice(vv.indexOf("T") + 1).replace("Z", "");
                } else {
                  cell = dup(cell);
                  cell.t = "n";
                  vv = "" + (cell.v = datenum(parseDate(cell.v, date1904), date1904));
                }
                if (typeof cell.z === "undefined")
                  cell.z = table_fmt[14];
                break;
              default:
                vv = cell.v;
                break;
            }
          var v4 = cell.t == "z" || cell.v == null ? "" : writetag("v", escapexml(vv)), o6 = { r: ref };
          var os = get_cell_style(opts.cellXfs, cell, opts);
          if (os !== 0)
            o6.s = os;
          switch (cell.t) {
            case "n":
              break;
            case "d":
              o6.t = "d";
              break;
            case "b":
              o6.t = "b";
              break;
            case "e":
              o6.t = "e";
              break;
            case "z":
              break;
            default:
              if (cell.v == null) {
                delete cell.t;
                break;
              }
              if (cell.v.length > 32767)
                throw new Error("Text length must not exceed 32767 characters");
              if (opts && opts.bookSST) {
                v4 = writetag("v", "" + get_sst_id(opts.Strings, cell.v, opts.revStrings));
                o6.t = "s";
                break;
              } else
                o6.t = "str";
              break;
          }
          if (cell.t != oldt) {
            cell.t = oldt;
            cell.v = oldv;
          }
          if (typeof cell.f == "string" && cell.f) {
            var ff = cell.F && cell.F.slice(0, ref.length) == ref ? { t: "array", ref: cell.F } : null;
            v4 = writextag("f", escapexml(cell.f), ff) + (cell.v != null ? v4 : "");
          }
          if (cell.l) {
            cell.l.display = escapexml(vv);
            ws["!links"].push([ref, cell.l]);
          }
          if (cell.D)
            o6.cm = 1;
          return writextag("c", v4, o6);
        }
        var parse_ws_xml_data = function() {
          var cellregex = /<(?:\w+:)?c[ \/>]/, rowregex = /<\/(?:\w+:)?row>/;
          var rregex = /r=["']([^"']*)["']/;
          var refregex = /ref=["']([^"']*)["']/;
          return function parse_ws_xml_data2(sdata, s3, opts, guess, themes, styles, wb) {
            var ri = 0, x3 = "", cells = [], cref = [], idx = 0, i6 = 0, cc2 = 0, d2 = "", p2;
            var tag, tagr = 0, tagc = 0;
            var sstr, ftag;
            var fmtid = 0, fillid = 0;
            var do_format = Array.isArray(styles.CellXf), cf;
            var arrayf = [];
            var sharedf = [];
            var dense = s3["!data"] != null;
            var rows = [], rowobj = {}, rowrite = false;
            var sheetStubs = !!opts.sheetStubs;
            var date1904 = !!((wb || {}).WBProps || {}).date1904;
            for (var marr = sdata.split(rowregex), mt = 0, marrlen = marr.length; mt != marrlen; ++mt) {
              x3 = marr[mt].trim();
              var xlen = x3.length;
              if (xlen === 0)
                continue;
              var rstarti = 0;
              outa:
                for (ri = 0; ri < xlen; ++ri)
                  switch (x3[ri]) {
                    case ">":
                      if (x3[ri - 1] != "/") {
                        ++ri;
                        break outa;
                      }
                      if (opts && opts.cellStyles) {
                        tag = parsexmltag(x3.slice(rstarti, ri), true);
                        tagr = tag.r != null ? parseInt(tag.r, 10) : tagr + 1;
                        tagc = -1;
                        if (opts.sheetRows && opts.sheetRows < tagr)
                          continue;
                        rowobj = {};
                        rowrite = false;
                        if (tag.ht) {
                          rowrite = true;
                          rowobj.hpt = parseFloat(tag.ht);
                          rowobj.hpx = pt2px(rowobj.hpt);
                        }
                        if (tag.hidden && parsexmlbool(tag.hidden)) {
                          rowrite = true;
                          rowobj.hidden = true;
                        }
                        if (tag.outlineLevel != null) {
                          rowrite = true;
                          rowobj.level = +tag.outlineLevel;
                        }
                        if (rowrite)
                          rows[tagr - 1] = rowobj;
                      }
                      break;
                    case "<":
                      rstarti = ri;
                      break;
                  }
              if (rstarti >= ri)
                break;
              tag = parsexmltag(x3.slice(rstarti, ri), true);
              tagr = tag.r != null ? parseInt(tag.r, 10) : tagr + 1;
              tagc = -1;
              if (opts.sheetRows && opts.sheetRows < tagr)
                continue;
              if (!opts.nodim) {
                if (guess.s.r > tagr - 1)
                  guess.s.r = tagr - 1;
                if (guess.e.r < tagr - 1)
                  guess.e.r = tagr - 1;
              }
              if (opts && opts.cellStyles) {
                rowobj = {};
                rowrite = false;
                if (tag.ht) {
                  rowrite = true;
                  rowobj.hpt = parseFloat(tag.ht);
                  rowobj.hpx = pt2px(rowobj.hpt);
                }
                if (tag.hidden && parsexmlbool(tag.hidden)) {
                  rowrite = true;
                  rowobj.hidden = true;
                }
                if (tag.outlineLevel != null) {
                  rowrite = true;
                  rowobj.level = +tag.outlineLevel;
                }
                if (rowrite)
                  rows[tagr - 1] = rowobj;
              }
              cells = x3.slice(ri).split(cellregex);
              for (var rslice = 0; rslice != cells.length; ++rslice)
                if (cells[rslice].trim().charAt(0) != "<")
                  break;
              cells = cells.slice(rslice);
              for (ri = 0; ri != cells.length; ++ri) {
                x3 = cells[ri].trim();
                if (x3.length === 0)
                  continue;
                cref = x3.match(rregex);
                idx = ri;
                i6 = 0;
                cc2 = 0;
                x3 = "<c " + (x3.slice(0, 1) == "<" ? ">" : "") + x3;
                if (cref != null && cref.length === 2) {
                  idx = 0;
                  d2 = cref[1];
                  for (i6 = 0; i6 != d2.length; ++i6) {
                    if ((cc2 = d2.charCodeAt(i6) - 64) < 1 || cc2 > 26)
                      break;
                    idx = 26 * idx + cc2;
                  }
                  --idx;
                  tagc = idx;
                } else
                  ++tagc;
                for (i6 = 0; i6 != x3.length; ++i6)
                  if (x3.charCodeAt(i6) === 62)
                    break;
                ++i6;
                tag = parsexmltag(x3.slice(0, i6), true);
                if (!tag.r)
                  tag.r = encode_cell({ r: tagr - 1, c: tagc });
                d2 = x3.slice(i6);
                p2 = { t: "" };
                if ((cref = str_match_xml_ns(d2, "v")) != null && cref[1] !== "")
                  p2.v = unescapexml(cref[1]);
                if (opts.cellFormula) {
                  if ((cref = str_match_xml_ns(d2, "f")) != null) {
                    if (cref[1] == "") {
                      if (cref[0].indexOf('t="shared"') > -1) {
                        ftag = parsexmltag(cref[0]);
                        if (sharedf[ftag.si])
                          p2.f = shift_formula_xlsx(sharedf[ftag.si][1], sharedf[ftag.si][2], tag.r);
                      }
                    } else {
                      p2.f = unescapexml(utf8read(cref[1]), true);
                      if (!opts.xlfn)
                        p2.f = _xlfn(p2.f);
                      if (cref[0].indexOf('t="array"') > -1) {
                        p2.F = (d2.match(refregex) || [])[1];
                        if (p2.F.indexOf(":") > -1)
                          arrayf.push([safe_decode_range(p2.F), p2.F]);
                      } else if (cref[0].indexOf('t="shared"') > -1) {
                        ftag = parsexmltag(cref[0]);
                        var ___f = unescapexml(utf8read(cref[1]));
                        if (!opts.xlfn)
                          ___f = _xlfn(___f);
                        sharedf[parseInt(ftag.si, 10)] = [ftag, ___f, tag.r];
                      }
                    }
                  } else if (cref = d2.match(/<f[^<>]*\/>/)) {
                    ftag = parsexmltag(cref[0]);
                    if (sharedf[ftag.si])
                      p2.f = shift_formula_xlsx(sharedf[ftag.si][1], sharedf[ftag.si][2], tag.r);
                  }
                  var _tag = decode_cell(tag.r);
                  for (i6 = 0; i6 < arrayf.length; ++i6)
                    if (_tag.r >= arrayf[i6][0].s.r && _tag.r <= arrayf[i6][0].e.r) {
                      if (_tag.c >= arrayf[i6][0].s.c && _tag.c <= arrayf[i6][0].e.c)
                        p2.F = arrayf[i6][1];
                    }
                }
                if (tag.t == null && p2.v === void 0) {
                  if (p2.f || p2.F) {
                    p2.v = 0;
                    p2.t = "n";
                  } else if (!sheetStubs)
                    continue;
                  else
                    p2.t = "z";
                } else
                  p2.t = tag.t || "n";
                if (guess.s.c > tagc)
                  guess.s.c = tagc;
                if (guess.e.c < tagc)
                  guess.e.c = tagc;
                switch (p2.t) {
                  case "n":
                    if (p2.v == "" || p2.v == null) {
                      if (!sheetStubs)
                        continue;
                      p2.t = "z";
                    } else
                      p2.v = parseFloat(p2.v);
                    break;
                  case "s":
                    if (typeof p2.v == "undefined") {
                      if (!sheetStubs)
                        continue;
                      p2.t = "z";
                    } else {
                      sstr = strs[parseInt(p2.v, 10)];
                      p2.v = sstr.t;
                      p2.r = sstr.r;
                      if (opts.cellHTML)
                        p2.h = sstr.h;
                    }
                    break;
                  case "str":
                    p2.t = "s";
                    p2.v = p2.v != null ? unescapexml(utf8read(p2.v), true) : "";
                    if (opts.cellHTML)
                      p2.h = escapehtml(p2.v);
                    break;
                  case "inlineStr":
                    cref = str_match_xml_ns(d2, "is");
                    p2.t = "s";
                    if (cref != null && (sstr = parse_si(cref[1]))) {
                      p2.v = sstr.t;
                      if (opts.cellHTML)
                        p2.h = sstr.h;
                    } else
                      p2.v = "";
                    break;
                  case "b":
                    p2.v = parsexmlbool(p2.v);
                    break;
                  case "d":
                    if (opts.cellDates)
                      p2.v = parseDate(p2.v, date1904);
                    else {
                      p2.v = datenum(parseDate(p2.v, date1904), date1904);
                      p2.t = "n";
                    }
                    break;
                  case "e":
                    if (!opts || opts.cellText !== false)
                      p2.w = p2.v;
                    p2.v = RBErr[p2.v];
                    break;
                }
                fmtid = fillid = 0;
                cf = null;
                if (do_format && tag.s !== void 0) {
                  cf = styles.CellXf[tag.s];
                  if (cf != null) {
                    if (cf.numFmtId != null)
                      fmtid = cf.numFmtId;
                    if (opts.cellStyles) {
                      if (cf.fillId != null)
                        fillid = cf.fillId;
                    }
                  }
                }
                safe_format(p2, fmtid, fillid, opts, themes, styles, date1904);
                if (opts.cellDates && do_format && p2.t == "n" && fmt_is_date(table_fmt[fmtid])) {
                  p2.v = numdate(p2.v + (date1904 ? 1462 : 0));
                  p2.t = typeof p2.v == "number" ? "n" : "d";
                }
                if (tag.cm && opts.xlmeta) {
                  var cm = (opts.xlmeta.Cell || [])[+tag.cm - 1];
                  if (cm && cm.type == "XLDAPR")
                    p2.D = true;
                }
                var _r;
                if (opts.nodim) {
                  _r = decode_cell(tag.r);
                  if (guess.s.r > _r.r)
                    guess.s.r = _r.r;
                  if (guess.e.r < _r.r)
                    guess.e.r = _r.r;
                }
                if (dense) {
                  _r = decode_cell(tag.r);
                  if (!s3["!data"][_r.r])
                    s3["!data"][_r.r] = [];
                  s3["!data"][_r.r][_r.c] = p2;
                } else
                  s3[tag.r] = p2;
              }
            }
            if (rows.length > 0)
              s3["!rows"] = rows;
          };
        }();
        function write_ws_xml_data(ws, opts, idx, wb) {
          var o6 = [], r6 = [], range = safe_decode_range(ws["!ref"]), cell = "", ref, rr = "", cols = [], R2 = 0, C6 = 0, rows = ws["!rows"];
          var dense = ws["!data"] != null, data = dense ? ws["!data"] : [];
          var params = { r: rr }, row, height = -1;
          var date1904 = (((wb || {}).Workbook || {}).WBProps || {}).date1904;
          for (C6 = range.s.c; C6 <= range.e.c; ++C6)
            cols[C6] = encode_col(C6);
          for (R2 = range.s.r; R2 <= range.e.r; ++R2) {
            r6 = [];
            rr = encode_row(R2);
            var data_R = dense ? data[R2] : [];
            for (C6 = range.s.c; C6 <= range.e.c; ++C6) {
              ref = cols[C6] + rr;
              var _cell = dense ? data_R[C6] : ws[ref];
              if (_cell === void 0)
                continue;
              if ((cell = write_ws_xml_cell(_cell, ref, ws, opts, idx, wb, date1904)) != null)
                r6.push(cell);
            }
            if (r6.length > 0 || rows && rows[R2]) {
              params = { r: rr };
              if (rows && rows[R2]) {
                row = rows[R2];
                if (row.hidden)
                  params.hidden = 1;
                height = -1;
                if (row.hpx)
                  height = px2pt(row.hpx);
                else if (row.hpt)
                  height = row.hpt;
                if (height > -1) {
                  params.ht = height;
                  params.customHeight = 1;
                }
                if (row.level) {
                  params.outlineLevel = row.level;
                }
              }
              o6[o6.length] = writextag("row", r6.join(""), params);
            }
          }
          if (rows)
            for (; R2 < rows.length; ++R2) {
              if (rows && rows[R2]) {
                params = { r: R2 + 1 };
                row = rows[R2];
                if (row.hidden)
                  params.hidden = 1;
                height = -1;
                if (row.hpx)
                  height = px2pt(row.hpx);
                else if (row.hpt)
                  height = row.hpt;
                if (height > -1) {
                  params.ht = height;
                  params.customHeight = 1;
                }
                if (row.level) {
                  params.outlineLevel = row.level;
                }
                o6[o6.length] = writextag("row", "", params);
              }
            }
          return o6.join("");
        }
        function write_ws_xml(idx, opts, wb, rels) {
          var o6 = [XML_HEADER, writextag("worksheet", null, {
            "xmlns": XMLNS_main[0],
            "xmlns:r": XMLNS.r
          })];
          var s3 = wb.SheetNames[idx], sidx = 0, rdata = "";
          var ws = wb.Sheets[s3];
          if (ws == null)
            ws = {};
          var ref = ws["!ref"] || "A1";
          var range = safe_decode_range(ref);
          if (range.e.c > 16383 || range.e.r > 1048575) {
            if (opts.WTF)
              throw new Error("Range " + ref + " exceeds format limit A1:XFD1048576");
            range.e.c = Math.min(range.e.c, 16383);
            range.e.r = Math.min(range.e.c, 1048575);
            ref = encode_range(range);
          }
          if (!rels)
            rels = {};
          ws["!comments"] = [];
          var _drawing = [];
          write_ws_xml_sheetpr(ws, wb, idx, opts, o6);
          o6[o6.length] = writextag("dimension", null, { "ref": ref });
          o6[o6.length] = write_ws_xml_sheetviews(ws, opts, idx, wb);
          if (opts.sheetFormat)
            o6[o6.length] = writextag("sheetFormatPr", null, {
              defaultRowHeight: opts.sheetFormat.defaultRowHeight || "16",
              baseColWidth: opts.sheetFormat.baseColWidth || "10",
              outlineLevelRow: opts.sheetFormat.outlineLevelRow || "7"
            });
          if (ws["!cols"] != null && ws["!cols"].length > 0)
            o6[o6.length] = write_ws_xml_cols(ws, ws["!cols"]);
          o6[sidx = o6.length] = "<sheetData/>";
          ws["!links"] = [];
          if (ws["!ref"] != null) {
            rdata = write_ws_xml_data(ws, opts, idx, wb, rels);
            if (rdata.length > 0)
              o6[o6.length] = rdata;
          }
          if (o6.length > sidx + 1) {
            o6[o6.length] = "</sheetData>";
            o6[sidx] = o6[sidx].replace("/>", ">");
          }
          if (ws["!protect"])
            o6[o6.length] = write_ws_xml_protection(ws["!protect"]);
          if (ws["!autofilter"] != null)
            o6[o6.length] = write_ws_xml_autofilter(ws["!autofilter"], ws, wb, idx);
          if (ws["!merges"] != null && ws["!merges"].length > 0)
            o6[o6.length] = write_ws_xml_merges(ws["!merges"]);
          var relc = -1, rel, rId = -1;
          if (ws["!links"].length > 0) {
            o6[o6.length] = "<hyperlinks>";
            ws["!links"].forEach(function(l5) {
              if (!l5[1].Target)
                return;
              rel = { "ref": l5[0] };
              if (l5[1].Target.charAt(0) != "#") {
                rId = add_rels(rels, -1, escapexml(l5[1].Target).replace(/#[\s\S]*$/, ""), RELS.HLINK);
                rel["r:id"] = "rId" + rId;
              }
              if ((relc = l5[1].Target.indexOf("#")) > -1)
                rel.location = escapexml(l5[1].Target.slice(relc + 1));
              if (l5[1].Tooltip)
                rel.tooltip = escapexml(l5[1].Tooltip);
              rel.display = l5[1].display;
              o6[o6.length] = writextag("hyperlink", null, rel);
            });
            o6[o6.length] = "</hyperlinks>";
          }
          delete ws["!links"];
          if (ws["!margins"] != null)
            o6[o6.length] = write_ws_xml_margins(ws["!margins"]);
          if (!opts || opts.ignoreEC || opts.ignoreEC == void 0)
            o6[o6.length] = writetag("ignoredErrors", writextag("ignoredError", null, { numberStoredAsText: 1, sqref: ref }));
          if (_drawing.length > 0) {
            rId = add_rels(rels, -1, "../drawings/drawing" + (idx + 1) + ".xml", RELS.DRAW);
            o6[o6.length] = writextag("drawing", null, { "r:id": "rId" + rId });
            ws["!drawing"] = _drawing;
          }
          if (ws["!comments"].length > 0) {
            rId = add_rels(rels, -1, "../drawings/vmlDrawing" + (idx + 1) + ".vml", RELS.VML);
            o6[o6.length] = writextag("legacyDrawing", null, { "r:id": "rId" + rId });
            ws["!legacy"] = rId;
          }
          if (o6.length > 1) {
            o6[o6.length] = "</worksheet>";
            o6[1] = o6[1].replace("/>", ">");
          }
          return o6.join("");
        }
        function parse_BrtRowHdr(data, length) {
          var z3 = {};
          var tgt = data.l + length;
          z3.r = data.read_shift(4);
          data.l += 4;
          var miyRw = data.read_shift(2);
          data.l += 1;
          var flags = data.read_shift(1);
          data.l = tgt;
          if (flags & 7)
            z3.level = flags & 7;
          if (flags & 16)
            z3.hidden = true;
          if (flags & 32)
            z3.hpt = miyRw / 20;
          return z3;
        }
        function write_BrtRowHdr(R2, range, ws) {
          var o6 = new_buf(17 + 8 * 16);
          var row = (ws["!rows"] || [])[R2] || {};
          o6.write_shift(4, R2);
          o6.write_shift(4, 0);
          var miyRw = 320;
          if (row.hpx)
            miyRw = px2pt(row.hpx) * 20;
          else if (row.hpt)
            miyRw = row.hpt * 20;
          o6.write_shift(2, miyRw);
          o6.write_shift(1, 0);
          var flags = 0;
          if (row.level)
            flags |= row.level;
          if (row.hidden)
            flags |= 16;
          if (row.hpx || row.hpt)
            flags |= 32;
          o6.write_shift(1, flags);
          o6.write_shift(1, 0);
          var ncolspan = 0, lcs = o6.l;
          o6.l += 4;
          var caddr = { r: R2, c: 0 };
          var dense = ws["!data"] != null;
          for (var i6 = 0; i6 < 16; ++i6) {
            if (range.s.c > i6 + 1 << 10 || range.e.c < i6 << 10)
              continue;
            var first = -1, last = -1;
            for (var j3 = i6 << 10; j3 < i6 + 1 << 10; ++j3) {
              caddr.c = j3;
              var cell = dense ? (ws["!data"][caddr.r] || [])[caddr.c] : ws[encode_cell(caddr)];
              if (cell) {
                if (first < 0)
                  first = j3;
                last = j3;
              }
            }
            if (first < 0)
              continue;
            ++ncolspan;
            o6.write_shift(4, first);
            o6.write_shift(4, last);
          }
          var l5 = o6.l;
          o6.l = lcs;
          o6.write_shift(4, ncolspan);
          o6.l = l5;
          return o6.length > o6.l ? o6.slice(0, o6.l) : o6;
        }
        function write_row_header(ba, ws, range, R2) {
          var o6 = write_BrtRowHdr(R2, range, ws);
          if (o6.length > 17 || (ws["!rows"] || [])[R2])
            write_record(ba, 0, o6);
        }
        var parse_BrtWsDim = parse_UncheckedRfX;
        var write_BrtWsDim = write_UncheckedRfX;
        function parse_BrtWsFmtInfo() {
        }
        function parse_BrtWsProp(data, length) {
          var z3 = {};
          var f2 = data[data.l];
          ++data.l;
          z3.above = !(f2 & 64);
          z3.left = !(f2 & 128);
          data.l += 18;
          z3.name = parse_XLSBCodeName(data, length - 19);
          return z3;
        }
        function write_BrtWsProp(str, outl, o6) {
          if (o6 == null)
            o6 = new_buf(84 + 4 * str.length);
          var f2 = 192;
          if (outl) {
            if (outl.above)
              f2 &= ~64;
            if (outl.left)
              f2 &= ~128;
          }
          o6.write_shift(1, f2);
          for (var i6 = 1; i6 < 3; ++i6)
            o6.write_shift(1, 0);
          write_BrtColor({ auto: 1 }, o6);
          o6.write_shift(-4, -1);
          o6.write_shift(-4, -1);
          write_XLSBCodeName(str, o6);
          return o6.slice(0, o6.l);
        }
        function parse_BrtCellBlank(data) {
          var cell = parse_XLSBCell(data);
          return [cell];
        }
        function write_BrtCellBlank(cell, ncell, o6) {
          if (o6 == null)
            o6 = new_buf(8);
          return write_XLSBCell(ncell, o6);
        }
        function parse_BrtShortBlank(data) {
          var cell = parse_XLSBShortCell(data);
          return [cell];
        }
        function write_BrtShortBlank(cell, ncell, o6) {
          if (o6 == null)
            o6 = new_buf(4);
          return write_XLSBShortCell(ncell, o6);
        }
        function parse_BrtCellBool(data) {
          var cell = parse_XLSBCell(data);
          var fBool = data.read_shift(1);
          return [cell, fBool, "b"];
        }
        function write_BrtCellBool(cell, ncell, o6) {
          if (o6 == null)
            o6 = new_buf(9);
          write_XLSBCell(ncell, o6);
          o6.write_shift(1, cell.v ? 1 : 0);
          return o6;
        }
        function parse_BrtShortBool(data) {
          var cell = parse_XLSBShortCell(data);
          var fBool = data.read_shift(1);
          return [cell, fBool, "b"];
        }
        function write_BrtShortBool(cell, ncell, o6) {
          if (o6 == null)
            o6 = new_buf(5);
          write_XLSBShortCell(ncell, o6);
          o6.write_shift(1, cell.v ? 1 : 0);
          return o6;
        }
        function parse_BrtCellError(data) {
          var cell = parse_XLSBCell(data);
          var bError = data.read_shift(1);
          return [cell, bError, "e"];
        }
        function write_BrtCellError(cell, ncell, o6) {
          if (o6 == null)
            o6 = new_buf(9);
          write_XLSBCell(ncell, o6);
          o6.write_shift(1, cell.v);
          return o6;
        }
        function parse_BrtShortError(data) {
          var cell = parse_XLSBShortCell(data);
          var bError = data.read_shift(1);
          return [cell, bError, "e"];
        }
        function write_BrtShortError(cell, ncell, o6) {
          if (o6 == null)
            o6 = new_buf(8);
          write_XLSBShortCell(ncell, o6);
          o6.write_shift(1, cell.v);
          o6.write_shift(2, 0);
          o6.write_shift(1, 0);
          return o6;
        }
        function parse_BrtCellIsst(data) {
          var cell = parse_XLSBCell(data);
          var isst = data.read_shift(4);
          return [cell, isst, "s"];
        }
        function write_BrtCellIsst(cell, ncell, o6) {
          if (o6 == null)
            o6 = new_buf(12);
          write_XLSBCell(ncell, o6);
          o6.write_shift(4, ncell.v);
          return o6;
        }
        function parse_BrtShortIsst(data) {
          var cell = parse_XLSBShortCell(data);
          var isst = data.read_shift(4);
          return [cell, isst, "s"];
        }
        function write_BrtShortIsst(cell, ncell, o6) {
          if (o6 == null)
            o6 = new_buf(8);
          write_XLSBShortCell(ncell, o6);
          o6.write_shift(4, ncell.v);
          return o6;
        }
        function parse_BrtCellReal(data) {
          var cell = parse_XLSBCell(data);
          var value = parse_Xnum(data);
          return [cell, value, "n"];
        }
        function write_BrtCellReal(cell, ncell, o6) {
          if (o6 == null)
            o6 = new_buf(16);
          write_XLSBCell(ncell, o6);
          write_Xnum(cell.v, o6);
          return o6;
        }
        function parse_BrtShortReal(data) {
          var cell = parse_XLSBShortCell(data);
          var value = parse_Xnum(data);
          return [cell, value, "n"];
        }
        function write_BrtShortReal(cell, ncell, o6) {
          if (o6 == null)
            o6 = new_buf(12);
          write_XLSBShortCell(ncell, o6);
          write_Xnum(cell.v, o6);
          return o6;
        }
        function parse_BrtCellRk(data) {
          var cell = parse_XLSBCell(data);
          var value = parse_RkNumber(data);
          return [cell, value, "n"];
        }
        function write_BrtCellRk(cell, ncell, o6) {
          if (o6 == null)
            o6 = new_buf(12);
          write_XLSBCell(ncell, o6);
          write_RkNumber(cell.v, o6);
          return o6;
        }
        function parse_BrtShortRk(data) {
          var cell = parse_XLSBShortCell(data);
          var value = parse_RkNumber(data);
          return [cell, value, "n"];
        }
        function write_BrtShortRk(cell, ncell, o6) {
          if (o6 == null)
            o6 = new_buf(8);
          write_XLSBShortCell(ncell, o6);
          write_RkNumber(cell.v, o6);
          return o6;
        }
        function parse_BrtCellRString(data) {
          var cell = parse_XLSBCell(data);
          var value = parse_RichStr(data);
          return [cell, value, "is"];
        }
        function parse_BrtCellSt(data) {
          var cell = parse_XLSBCell(data);
          var value = parse_XLWideString(data);
          return [cell, value, "str"];
        }
        function write_BrtCellSt(cell, ncell, o6) {
          var data = cell.v == null ? "" : String(cell.v);
          if (o6 == null)
            o6 = new_buf(12 + 4 * cell.v.length);
          write_XLSBCell(ncell, o6);
          write_XLWideString(data, o6);
          return o6.length > o6.l ? o6.slice(0, o6.l) : o6;
        }
        function parse_BrtShortSt(data) {
          var cell = parse_XLSBShortCell(data);
          var value = parse_XLWideString(data);
          return [cell, value, "str"];
        }
        function write_BrtShortSt(cell, ncell, o6) {
          var data = cell.v == null ? "" : String(cell.v);
          if (o6 == null)
            o6 = new_buf(8 + 4 * data.length);
          write_XLSBShortCell(ncell, o6);
          write_XLWideString(data, o6);
          return o6.length > o6.l ? o6.slice(0, o6.l) : o6;
        }
        function parse_BrtFmlaBool(data, length, opts) {
          var end = data.l + length;
          var cell = parse_XLSBCell(data);
          cell.r = opts["!row"];
          var value = data.read_shift(1);
          var o6 = [cell, value, "b"];
          if (opts.cellFormula) {
            data.l += 2;
            var formula = parse_XLSBCellParsedFormula(data, end - data.l, opts);
            o6[3] = stringify_formula(formula, null, cell, opts.supbooks, opts);
          } else
            data.l = end;
          return o6;
        }
        function parse_BrtFmlaError(data, length, opts) {
          var end = data.l + length;
          var cell = parse_XLSBCell(data);
          cell.r = opts["!row"];
          var value = data.read_shift(1);
          var o6 = [cell, value, "e"];
          if (opts.cellFormula) {
            data.l += 2;
            var formula = parse_XLSBCellParsedFormula(data, end - data.l, opts);
            o6[3] = stringify_formula(formula, null, cell, opts.supbooks, opts);
          } else
            data.l = end;
          return o6;
        }
        function parse_BrtFmlaNum(data, length, opts) {
          var end = data.l + length;
          var cell = parse_XLSBCell(data);
          cell.r = opts["!row"];
          var value = parse_Xnum(data);
          var o6 = [cell, value, "n"];
          if (opts.cellFormula) {
            data.l += 2;
            var formula = parse_XLSBCellParsedFormula(data, end - data.l, opts);
            o6[3] = stringify_formula(formula, null, cell, opts.supbooks, opts);
          } else
            data.l = end;
          return o6;
        }
        function parse_BrtFmlaString(data, length, opts) {
          var end = data.l + length;
          var cell = parse_XLSBCell(data);
          cell.r = opts["!row"];
          var value = parse_XLWideString(data);
          var o6 = [cell, value, "str"];
          if (opts.cellFormula) {
            data.l += 2;
            var formula = parse_XLSBCellParsedFormula(data, end - data.l, opts);
            o6[3] = stringify_formula(formula, null, cell, opts.supbooks, opts);
          } else
            data.l = end;
          return o6;
        }
        var parse_BrtMergeCell = parse_UncheckedRfX;
        var write_BrtMergeCell = write_UncheckedRfX;
        function write_BrtBeginMergeCells(cnt, o6) {
          if (o6 == null)
            o6 = new_buf(4);
          o6.write_shift(4, cnt);
          return o6;
        }
        function parse_BrtHLink(data, length) {
          var end = data.l + length;
          var rfx = parse_UncheckedRfX(data, 16);
          var relId = parse_XLNullableWideString(data);
          var loc = parse_XLWideString(data);
          var tooltip = parse_XLWideString(data);
          var display = parse_XLWideString(data);
          data.l = end;
          var o6 = { rfx, relId, loc, display };
          if (tooltip)
            o6.Tooltip = tooltip;
          return o6;
        }
        function write_BrtHLink(l5, rId) {
          var o6 = new_buf(50 + 4 * (l5[1].Target.length + (l5[1].Tooltip || "").length));
          write_UncheckedRfX({ s: decode_cell(l5[0]), e: decode_cell(l5[0]) }, o6);
          write_RelID("rId" + rId, o6);
          var locidx = l5[1].Target.indexOf("#");
          var loc = locidx == -1 ? "" : l5[1].Target.slice(locidx + 1);
          write_XLWideString(loc || "", o6);
          write_XLWideString(l5[1].Tooltip || "", o6);
          write_XLWideString("", o6);
          return o6.slice(0, o6.l);
        }
        function parse_BrtPane() {
        }
        function parse_BrtArrFmla(data, length, opts) {
          var end = data.l + length;
          var rfx = parse_RfX(data, 16);
          var fAlwaysCalc = data.read_shift(1);
          var o6 = [rfx];
          o6[2] = fAlwaysCalc;
          if (opts.cellFormula) {
            var formula = parse_XLSBArrayParsedFormula(data, end - data.l, opts);
            o6[1] = formula;
          } else
            data.l = end;
          return o6;
        }
        function parse_BrtShrFmla(data, length, opts) {
          var end = data.l + length;
          var rfx = parse_UncheckedRfX(data, 16);
          var o6 = [rfx];
          if (opts.cellFormula) {
            var formula = parse_XLSBSharedParsedFormula(data, end - data.l, opts);
            o6[1] = formula;
            data.l = end;
          } else
            data.l = end;
          return o6;
        }
        function write_BrtColInfo(C6, col, o6) {
          if (o6 == null)
            o6 = new_buf(18);
          var p2 = col_obj_w(C6, col);
          o6.write_shift(-4, C6);
          o6.write_shift(-4, C6);
          o6.write_shift(4, (p2.width || 10) * 256);
          o6.write_shift(4, 0);
          var flags = 0;
          if (col.hidden)
            flags |= 1;
          if (typeof p2.width == "number")
            flags |= 2;
          if (col.level)
            flags |= col.level << 8;
          o6.write_shift(2, flags);
          return o6;
        }
        var BrtMarginKeys = ["left", "right", "top", "bottom", "header", "footer"];
        function parse_BrtMargins(data) {
          var margins = {};
          BrtMarginKeys.forEach(function(k2) {
            margins[k2] = parse_Xnum(data, 8);
          });
          return margins;
        }
        function write_BrtMargins(margins, o6) {
          if (o6 == null)
            o6 = new_buf(6 * 8);
          default_margins(margins);
          BrtMarginKeys.forEach(function(k2) {
            write_Xnum(margins[k2], o6);
          });
          return o6;
        }
        function parse_BrtBeginWsView(data) {
          var f2 = data.read_shift(2);
          data.l += 28;
          return { RTL: f2 & 32 };
        }
        function write_BrtBeginWsView(ws, Workbook, o6) {
          if (o6 == null)
            o6 = new_buf(30);
          var f2 = 924;
          if ((((Workbook || {}).Views || [])[0] || {}).RTL)
            f2 |= 32;
          o6.write_shift(2, f2);
          o6.write_shift(4, 0);
          o6.write_shift(4, 0);
          o6.write_shift(4, 0);
          o6.write_shift(1, 0);
          o6.write_shift(1, 0);
          o6.write_shift(2, 0);
          o6.write_shift(2, 100);
          o6.write_shift(2, 0);
          o6.write_shift(2, 0);
          o6.write_shift(2, 0);
          o6.write_shift(4, 0);
          return o6;
        }
        function write_BrtCellIgnoreEC(ref) {
          var o6 = new_buf(24);
          o6.write_shift(4, 4);
          o6.write_shift(4, 1);
          write_UncheckedRfX(ref, o6);
          return o6;
        }
        function write_BrtSheetProtection(sp, o6) {
          if (o6 == null)
            o6 = new_buf(16 * 4 + 2);
          o6.write_shift(2, sp.password ? crypto_CreatePasswordVerifier_Method1(sp.password) : 0);
          o6.write_shift(4, 1);
          [
            ["objects", false],
            ["scenarios", false],
            ["formatCells", true],
            ["formatColumns", true],
            ["formatRows", true],
            ["insertColumns", true],
            ["insertRows", true],
            ["insertHyperlinks", true],
            ["deleteColumns", true],
            ["deleteRows", true],
            ["selectLockedCells", false],
            ["sort", true],
            ["autoFilter", true],
            ["pivotTables", true],
            ["selectUnlockedCells", false]
          ].forEach(function(n6) {
            if (n6[1])
              o6.write_shift(4, sp[n6[0]] != null && !sp[n6[0]] ? 1 : 0);
            else
              o6.write_shift(4, sp[n6[0]] != null && sp[n6[0]] ? 0 : 1);
          });
          return o6;
        }
        function parse_BrtDVal() {
        }
        function parse_BrtDVal14() {
        }
        function parse_ws_bin(data, _opts, idx, rels, wb, themes, styles) {
          if (!data)
            return data;
          var opts = _opts || {};
          if (!rels)
            rels = { "!id": {} };
          if (DENSE != null && opts.dense == null)
            opts.dense = DENSE;
          var s3 = {};
          if (opts.dense)
            s3["!data"] = [];
          var ref;
          var refguess = { s: { r: 2e6, c: 2e6 }, e: { r: 0, c: 0 } };
          var state = [];
          var pass = false, end = false;
          var row, p2, cf, R2, C6, addr, sstr, rr, cell;
          var merges = [];
          opts.biff = 12;
          opts["!row"] = 0;
          var ai = 0, af = false;
          var arrayf = [];
          var sharedf = {};
          var supbooks = opts.supbooks || wb.supbooks || [[]];
          supbooks.sharedf = sharedf;
          supbooks.arrayf = arrayf;
          supbooks.SheetNames = wb.SheetNames || wb.Sheets.map(function(x3) {
            return x3.name;
          });
          if (!opts.supbooks) {
            opts.supbooks = supbooks;
            if (wb.Names)
              for (var i6 = 0; i6 < wb.Names.length; ++i6)
                supbooks[0][i6 + 1] = wb.Names[i6];
          }
          var colinfo = [], rowinfo = [];
          var seencol = false;
          XLSBRecordEnum[16] = { n: "BrtShortReal", f: parse_BrtShortReal };
          var cm, vm;
          var date1904 = 1462 * +!!((wb || {}).WBProps || {}).date1904;
          recordhopper(data, function ws_parse(val2, RR, RT) {
            if (end)
              return;
            switch (RT) {
              case 148:
                ref = val2;
                break;
              case 0:
                row = val2;
                if (opts.sheetRows && opts.sheetRows <= row.r)
                  end = true;
                rr = encode_row(R2 = row.r);
                opts["!row"] = row.r;
                if (val2.hidden || val2.hpt || val2.level != null) {
                  if (val2.hpt)
                    val2.hpx = pt2px(val2.hpt);
                  rowinfo[val2.r] = val2;
                }
                break;
              case 2:
              case 3:
              case 4:
              case 5:
              case 6:
              case 7:
              case 8:
              case 9:
              case 10:
              case 11:
              case 13:
              case 14:
              case 15:
              case 16:
              case 17:
              case 18:
              case 62:
                p2 = { t: val2[2] };
                switch (val2[2]) {
                  case "n":
                    p2.v = val2[1];
                    break;
                  case "s":
                    sstr = strs[val2[1]];
                    p2.v = sstr.t;
                    p2.r = sstr.r;
                    break;
                  case "b":
                    p2.v = val2[1] ? true : false;
                    break;
                  case "e":
                    p2.v = val2[1];
                    if (opts.cellText !== false)
                      p2.w = BErr[p2.v];
                    break;
                  case "str":
                    p2.t = "s";
                    p2.v = val2[1];
                    break;
                  case "is":
                    p2.t = "s";
                    p2.v = val2[1].t;
                    break;
                }
                if (cf = styles.CellXf[val2[0].iStyleRef])
                  safe_format(p2, cf.numFmtId, null, opts, themes, styles, date1904 > 0);
                C6 = val2[0].c == -1 ? C6 + 1 : val2[0].c;
                if (opts.dense) {
                  if (!s3["!data"][R2])
                    s3["!data"][R2] = [];
                  s3["!data"][R2][C6] = p2;
                } else
                  s3[encode_col(C6) + rr] = p2;
                if (opts.cellFormula) {
                  af = false;
                  for (ai = 0; ai < arrayf.length; ++ai) {
                    var aii = arrayf[ai];
                    if (row.r >= aii[0].s.r && row.r <= aii[0].e.r) {
                      if (C6 >= aii[0].s.c && C6 <= aii[0].e.c) {
                        p2.F = encode_range(aii[0]);
                        af = true;
                      }
                    }
                  }
                  if (!af && val2.length > 3)
                    p2.f = val2[3];
                }
                if (refguess.s.r > row.r)
                  refguess.s.r = row.r;
                if (refguess.s.c > C6)
                  refguess.s.c = C6;
                if (refguess.e.r < row.r)
                  refguess.e.r = row.r;
                if (refguess.e.c < C6)
                  refguess.e.c = C6;
                if (opts.cellDates && cf && p2.t == "n" && fmt_is_date(table_fmt[cf.numFmtId])) {
                  var _d = SSF_parse_date_code(p2.v + date1904);
                  if (_d) {
                    p2.t = "d";
                    p2.v = new Date(Date.UTC(_d.y, _d.m - 1, _d.d, _d.H, _d.M, _d.S, _d.u));
                  }
                }
                if (cm) {
                  if (cm.type == "XLDAPR")
                    p2.D = true;
                  cm = void 0;
                }
                if (vm)
                  vm = void 0;
                break;
              case 1:
              case 12:
                if (!opts.sheetStubs || pass)
                  break;
                p2 = { t: "z", v: void 0 };
                C6 = val2[0].c == -1 ? C6 + 1 : val2[0].c;
                if (opts.dense) {
                  if (!s3["!data"][R2])
                    s3["!data"][R2] = [];
                  s3["!data"][R2][C6] = p2;
                } else
                  s3[encode_col(C6) + rr] = p2;
                if (refguess.s.r > row.r)
                  refguess.s.r = row.r;
                if (refguess.s.c > C6)
                  refguess.s.c = C6;
                if (refguess.e.r < row.r)
                  refguess.e.r = row.r;
                if (refguess.e.c < C6)
                  refguess.e.c = C6;
                if (cm) {
                  if (cm.type == "XLDAPR")
                    p2.D = true;
                  cm = void 0;
                }
                if (vm)
                  vm = void 0;
                break;
              case 176:
                merges.push(val2);
                break;
              case 49:
                {
                  cm = ((opts.xlmeta || {}).Cell || [])[val2 - 1];
                }
                break;
              case 494:
                var rel = rels["!id"][val2.relId];
                if (rel) {
                  val2.Target = rel.Target;
                  if (val2.loc)
                    val2.Target += "#" + val2.loc;
                  val2.Rel = rel;
                } else if (val2.relId == "") {
                  val2.Target = "#" + val2.loc;
                }
                for (R2 = val2.rfx.s.r; R2 <= val2.rfx.e.r; ++R2)
                  for (C6 = val2.rfx.s.c; C6 <= val2.rfx.e.c; ++C6) {
                    if (opts.dense) {
                      if (!s3["!data"][R2])
                        s3["!data"][R2] = [];
                      if (!s3["!data"][R2][C6])
                        s3["!data"][R2][C6] = { t: "z", v: void 0 };
                      s3["!data"][R2][C6].l = val2;
                    } else {
                      addr = encode_col(C6) + encode_row(R2);
                      if (!s3[addr])
                        s3[addr] = { t: "z", v: void 0 };
                      s3[addr].l = val2;
                    }
                  }
                break;
              case 426:
                if (!opts.cellFormula)
                  break;
                arrayf.push(val2);
                cell = opts.dense ? s3["!data"][R2][C6] : s3[encode_col(C6) + rr];
                cell.f = stringify_formula(val2[1], refguess, { r: row.r, c: C6 }, supbooks, opts);
                cell.F = encode_range(val2[0]);
                break;
              case 427:
                if (!opts.cellFormula)
                  break;
                sharedf[encode_cell(val2[0].s)] = val2[1];
                cell = opts.dense ? s3["!data"][R2][C6] : s3[encode_col(C6) + rr];
                cell.f = stringify_formula(val2[1], refguess, { r: row.r, c: C6 }, supbooks, opts);
                break;
              case 60:
                if (!opts.cellStyles)
                  break;
                while (val2.e >= val2.s) {
                  colinfo[val2.e--] = { width: val2.w / 256, hidden: !!(val2.flags & 1), level: val2.level };
                  if (!seencol) {
                    seencol = true;
                    find_mdw_colw(val2.w / 256);
                  }
                  process_col(colinfo[val2.e + 1]);
                }
                break;
              case 551:
                if (val2)
                  s3["!legrel"] = val2;
                break;
              case 161:
                s3["!autofilter"] = { ref: encode_range(val2) };
                break;
              case 476:
                s3["!margins"] = val2;
                break;
              case 147:
                if (!wb.Sheets[idx])
                  wb.Sheets[idx] = {};
                if (val2.name)
                  wb.Sheets[idx].CodeName = val2.name;
                if (val2.above || val2.left)
                  s3["!outline"] = { above: val2.above, left: val2.left };
                break;
              case 137:
                if (!wb.Views)
                  wb.Views = [{}];
                if (!wb.Views[0])
                  wb.Views[0] = {};
                if (val2.RTL)
                  wb.Views[0].RTL = true;
                break;
              case 485:
                break;
              case 64:
              case 1053:
                break;
              case 151:
                break;
              case 152:
              case 175:
              case 644:
              case 625:
              case 562:
              case 396:
              case 1112:
              case 1146:
              case 471:
              case 1050:
              case 649:
              case 1105:
              case 589:
              case 607:
              case 564:
              case 1055:
              case 168:
              case 174:
              case 1180:
              case 499:
              case 507:
              case 550:
              case 171:
              case 167:
              case 1177:
              case 169:
              case 1181:
              case 552:
              case 661:
              case 639:
              case 478:
              case 537:
              case 477:
              case 536:
              case 1103:
              case 680:
              case 1104:
              case 1024:
              case 663:
              case 535:
              case 678:
              case 504:
              case 1043:
              case 428:
              case 170:
              case 3072:
              case 50:
              case 2070:
              case 1045:
                break;
              case 35:
                pass = true;
                break;
              case 36:
                pass = false;
                break;
              case 37:
                state.push(RT);
                pass = true;
                break;
              case 38:
                state.pop();
                pass = false;
                break;
              default:
                if (RR.T) {
                } else if (!pass || opts.WTF)
                  throw new Error("Unexpected record 0x" + RT.toString(16));
            }
          }, opts);
          delete opts.supbooks;
          delete opts["!row"];
          if (!s3["!ref"] && (refguess.s.r < 2e6 || ref && (ref.e.r > 0 || ref.e.c > 0 || ref.s.r > 0 || ref.s.c > 0)))
            s3["!ref"] = encode_range(ref || refguess);
          if (opts.sheetRows && s3["!ref"]) {
            var tmpref = safe_decode_range(s3["!ref"]);
            if (opts.sheetRows <= +tmpref.e.r) {
              tmpref.e.r = opts.sheetRows - 1;
              if (tmpref.e.r > refguess.e.r)
                tmpref.e.r = refguess.e.r;
              if (tmpref.e.r < tmpref.s.r)
                tmpref.s.r = tmpref.e.r;
              if (tmpref.e.c > refguess.e.c)
                tmpref.e.c = refguess.e.c;
              if (tmpref.e.c < tmpref.s.c)
                tmpref.s.c = tmpref.e.c;
              s3["!fullref"] = s3["!ref"];
              s3["!ref"] = encode_range(tmpref);
            }
          }
          if (merges.length > 0)
            s3["!merges"] = merges;
          if (colinfo.length > 0)
            s3["!cols"] = colinfo;
          if (rowinfo.length > 0)
            s3["!rows"] = rowinfo;
          if (rels["!id"][s3["!legrel"]])
            s3["!legdrawel"] = rels["!id"][s3["!legrel"]];
          return s3;
        }
        function write_ws_bin_cell(ba, cell, R2, C6, opts, ws, last_seen, date1904) {
          var o6 = { r: R2, c: C6 };
          if (cell.c)
            ws["!comments"].push([encode_cell(o6), cell.c]);
          if (cell.v === void 0)
            return false;
          var vv = "";
          switch (cell.t) {
            case "b":
              vv = cell.v ? "1" : "0";
              break;
            case "d":
              cell = dup(cell);
              cell.z = cell.z || table_fmt[14];
              cell.v = datenum(parseDate(cell.v, date1904), date1904);
              cell.t = "n";
              break;
            case "n":
            case "e":
              vv = "" + cell.v;
              break;
            default:
              vv = cell.v;
              break;
          }
          o6.s = get_cell_style(opts.cellXfs, cell, opts);
          if (cell.l)
            ws["!links"].push([encode_cell(o6), cell.l]);
          switch (cell.t) {
            case "s":
            case "str":
              if (opts.bookSST) {
                vv = get_sst_id(opts.Strings, cell.v == null ? "" : String(cell.v), opts.revStrings);
                o6.t = "s";
                o6.v = vv;
                if (last_seen)
                  write_record(ba, 18, write_BrtShortIsst(cell, o6));
                else
                  write_record(ba, 7, write_BrtCellIsst(cell, o6));
              } else {
                o6.t = "str";
                if (last_seen)
                  write_record(ba, 17, write_BrtShortSt(cell, o6));
                else
                  write_record(ba, 6, write_BrtCellSt(cell, o6));
              }
              return true;
            case "n":
              if (cell.v == (cell.v | 0) && cell.v > -1e3 && cell.v < 1e3) {
                if (last_seen)
                  write_record(ba, 13, write_BrtShortRk(cell, o6));
                else
                  write_record(ba, 2, write_BrtCellRk(cell, o6));
              } else if (!isFinite(cell.v)) {
                o6.t = "e";
                if (isNaN(cell.v)) {
                  if (last_seen)
                    write_record(ba, 14, write_BrtShortError({ t: "e", v: 36 }, o6));
                  else
                    write_record(ba, 3, write_BrtCellError({ t: "e", v: 36 }, o6));
                } else {
                  if (last_seen)
                    write_record(ba, 14, write_BrtShortError({ t: "e", v: 7 }, o6));
                  else
                    write_record(ba, 3, write_BrtCellError({ t: "e", v: 7 }, o6));
                }
              } else {
                if (last_seen)
                  write_record(ba, 16, write_BrtShortReal(cell, o6));
                else
                  write_record(ba, 5, write_BrtCellReal(cell, o6));
              }
              return true;
            case "b":
              o6.t = "b";
              if (last_seen)
                write_record(ba, 15, write_BrtShortBool(cell, o6));
              else
                write_record(ba, 4, write_BrtCellBool(cell, o6));
              return true;
            case "e":
              o6.t = "e";
              if (last_seen)
                write_record(ba, 14, write_BrtShortError(cell, o6));
              else
                write_record(ba, 3, write_BrtCellError(cell, o6));
              return true;
          }
          if (last_seen)
            write_record(ba, 12, write_BrtShortBlank(cell, o6));
          else
            write_record(ba, 1, write_BrtCellBlank(cell, o6));
          return true;
        }
        function write_CELLTABLE(ba, ws, idx, opts, wb) {
          var range = safe_decode_range(ws["!ref"] || "A1"), rr = "", cols = [];
          var date1904 = (((wb || {}).Workbook || {}).WBProps || {}).date1904;
          write_record(ba, 145);
          var dense = ws["!data"] != null, row = dense ? ws["!data"][range.s.r] : [];
          var cap = range.e.r;
          if (ws["!rows"])
            cap = Math.max(range.e.r, ws["!rows"].length - 1);
          for (var R2 = range.s.r; R2 <= cap; ++R2) {
            rr = encode_row(R2);
            if (dense)
              row = ws["!data"][R2];
            write_row_header(ba, ws, range, R2);
            if (dense && !row)
              continue;
            var last_seen = false;
            if (R2 <= range.e.r)
              for (var C6 = range.s.c; C6 <= range.e.c; ++C6) {
                if (R2 === range.s.r)
                  cols[C6] = encode_col(C6);
                var cell = dense ? row[C6] : ws[cols[C6] + rr];
                if (!cell) {
                  last_seen = false;
                  continue;
                }
                last_seen = write_ws_bin_cell(ba, cell, R2, C6, opts, ws, last_seen, date1904);
              }
          }
          write_record(ba, 146);
        }
        function write_MERGECELLS(ba, ws) {
          if (!ws || !ws["!merges"])
            return;
          write_record(ba, 177, write_BrtBeginMergeCells(ws["!merges"].length));
          ws["!merges"].forEach(function(m4) {
            write_record(ba, 176, write_BrtMergeCell(m4));
          });
          write_record(ba, 178);
        }
        function write_COLINFOS(ba, ws) {
          if (!ws || !ws["!cols"])
            return;
          write_record(ba, 390);
          ws["!cols"].forEach(function(m4, i6) {
            if (m4)
              write_record(ba, 60, write_BrtColInfo(i6, m4));
          });
          write_record(ba, 391);
        }
        function write_IGNOREECS(ba, ws) {
          if (!ws || !ws["!ref"])
            return;
          write_record(ba, 648);
          write_record(ba, 649, write_BrtCellIgnoreEC(safe_decode_range(ws["!ref"])));
          write_record(ba, 650);
        }
        function write_HLINKS(ba, ws, rels) {
          ws["!links"].forEach(function(l5) {
            if (!l5[1].Target)
              return;
            var rId = add_rels(rels, -1, l5[1].Target.replace(/#[\s\S]*$/, ""), RELS.HLINK);
            write_record(ba, 494, write_BrtHLink(l5, rId));
          });
          delete ws["!links"];
        }
        function write_LEGACYDRAWING(ba, ws, idx, rels) {
          if (ws["!comments"].length > 0) {
            var rId = add_rels(rels, -1, "../drawings/vmlDrawing" + (idx + 1) + ".vml", RELS.VML);
            write_record(ba, 551, write_RelID("rId" + rId));
            ws["!legacy"] = rId;
          }
        }
        function write_AUTOFILTER(ba, ws, wb, idx) {
          if (!ws["!autofilter"])
            return;
          var data = ws["!autofilter"];
          var ref = typeof data.ref === "string" ? data.ref : encode_range(data.ref);
          if (!wb.Workbook)
            wb.Workbook = { Sheets: [] };
          if (!wb.Workbook.Names)
            wb.Workbook.Names = [];
          var names2 = wb.Workbook.Names;
          var range = decode_range(ref);
          if (range.s.r == range.e.r) {
            range.e.r = decode_range(ws["!ref"]).e.r;
            ref = encode_range(range);
          }
          for (var i6 = 0; i6 < names2.length; ++i6) {
            var name = names2[i6];
            if (name.Name != "_xlnm._FilterDatabase")
              continue;
            if (name.Sheet != idx)
              continue;
            name.Ref = formula_quote_sheet_name(wb.SheetNames[idx]) + "!" + fix_range(ref);
            break;
          }
          if (i6 == names2.length)
            names2.push({ Name: "_xlnm._FilterDatabase", Sheet: idx, Ref: formula_quote_sheet_name(wb.SheetNames[idx]) + "!" + fix_range(ref) });
          write_record(ba, 161, write_UncheckedRfX(safe_decode_range(ref)));
          write_record(ba, 162);
        }
        function write_WSVIEWS2(ba, ws, Workbook) {
          write_record(ba, 133);
          {
            write_record(ba, 137, write_BrtBeginWsView(ws, Workbook));
            write_record(ba, 138);
          }
          write_record(ba, 134);
        }
        function write_WSFMTINFO() {
        }
        function write_SHEETPROTECT(ba, ws) {
          if (!ws["!protect"])
            return;
          write_record(ba, 535, write_BrtSheetProtection(ws["!protect"]));
        }
        function write_ws_bin(idx, opts, wb, rels) {
          var ba = buf_array();
          var s3 = wb.SheetNames[idx], ws = wb.Sheets[s3] || {};
          var c8 = s3;
          try {
            if (wb && wb.Workbook)
              c8 = wb.Workbook.Sheets[idx].CodeName || c8;
          } catch (e7) {
          }
          var r6 = safe_decode_range(ws["!ref"] || "A1");
          if (r6.e.c > 16383 || r6.e.r > 1048575) {
            if (opts.WTF)
              throw new Error("Range " + (ws["!ref"] || "A1") + " exceeds format limit A1:XFD1048576");
            r6.e.c = Math.min(r6.e.c, 16383);
            r6.e.r = Math.min(r6.e.c, 1048575);
          }
          ws["!links"] = [];
          ws["!comments"] = [];
          write_record(ba, 129);
          if (wb.vbaraw || ws["!outline"])
            write_record(ba, 147, write_BrtWsProp(c8, ws["!outline"]));
          write_record(ba, 148, write_BrtWsDim(r6));
          write_WSVIEWS2(ba, ws, wb.Workbook);
          write_WSFMTINFO(ba, ws);
          write_COLINFOS(ba, ws, idx, opts, wb);
          write_CELLTABLE(ba, ws, idx, opts, wb);
          write_SHEETPROTECT(ba, ws);
          write_AUTOFILTER(ba, ws, wb, idx);
          write_MERGECELLS(ba, ws);
          write_HLINKS(ba, ws, rels);
          if (ws["!margins"])
            write_record(ba, 476, write_BrtMargins(ws["!margins"]));
          if (!opts || opts.ignoreEC || opts.ignoreEC == void 0)
            write_IGNOREECS(ba, ws);
          write_LEGACYDRAWING(ba, ws, idx, rels);
          write_record(ba, 130);
          return ba.end();
        }
        function parse_Cache(data) {
          var col = [];
          var num = data.match(/^<c:numCache>/);
          var f2;
          (data.match(/<c:pt idx="(\d*)"[^<>\/]*><c:v>([^<])<\/c:v><\/c:pt>/mg) || []).forEach(function(pt2) {
            var q3 = pt2.match(/<c:pt idx="(\d*)"[^<>\/]*><c:v>([^<]*)<\/c:v><\/c:pt>/);
            if (!q3)
              return;
            col[+q3[1]] = num ? +q3[2] : q3[2];
          });
          var nf = unescapexml((str_match_xml(data, "c:formatCode") || ["", "General"])[1]);
          (str_match_ng(data, "<c:f>", "</c:f>") || []).forEach(function(F3) {
            f2 = F3.replace(/<[^<>]*>/g, "");
          });
          return [col, nf, f2];
        }
        function parse_chart(data, name, opts, rels, wb, csheet) {
          var cs = csheet || { "!type": "chart" };
          if (!data)
            return csheet;
          var C6 = 0, R2 = 0, col = "A";
          var refguess = { s: { r: 2e6, c: 2e6 }, e: { r: 0, c: 0 } };
          (str_match_ng(data, "<c:numCache>", "</c:numCache>") || []).forEach(function(nc) {
            var cache = parse_Cache(nc);
            refguess.s.r = refguess.s.c = 0;
            refguess.e.c = C6;
            col = encode_col(C6);
            cache[0].forEach(function(n6, i6) {
              if (cs["!data"]) {
                if (!cs["!data"][i6])
                  cs["!data"][i6] = [];
                cs["!data"][i6][C6] = { t: "n", v: n6, z: cache[1] };
              } else
                cs[col + encode_row(i6)] = { t: "n", v: n6, z: cache[1] };
              R2 = i6;
            });
            if (refguess.e.r < R2)
              refguess.e.r = R2;
            ++C6;
          });
          if (C6 > 0)
            cs["!ref"] = encode_range(refguess);
          return cs;
        }
        function parse_cs_xml(data, opts, idx, rels, wb) {
          if (!data)
            return data;
          if (!rels)
            rels = { "!id": {} };
          var s3 = { "!type": "chart", "!drawel": null, "!rel": "" };
          var m4;
          var sheetPr = data.match(sheetprregex);
          if (sheetPr)
            parse_ws_xml_sheetpr(sheetPr[0], s3, wb, idx);
          if (m4 = data.match(/drawing r:id="(.*?)"/))
            s3["!rel"] = m4[1];
          if (rels["!id"][s3["!rel"]])
            s3["!drawel"] = rels["!id"][s3["!rel"]];
          return s3;
        }
        function parse_BrtCsProp(data, length) {
          data.l += 10;
          var name = parse_XLWideString(data, length - 10);
          return { name };
        }
        function parse_cs_bin(data, opts, idx, rels, wb) {
          if (!data)
            return data;
          if (!rels)
            rels = { "!id": {} };
          var s3 = { "!type": "chart", "!drawel": null, "!rel": "" };
          var state = [];
          var pass = false;
          recordhopper(data, function cs_parse(val2, R2, RT) {
            switch (RT) {
              case 550:
                s3["!rel"] = val2;
                break;
              case 651:
                if (!wb.Sheets[idx])
                  wb.Sheets[idx] = {};
                if (val2.name)
                  wb.Sheets[idx].CodeName = val2.name;
                break;
              case 562:
              case 652:
              case 669:
              case 679:
              case 551:
              case 552:
              case 476:
              case 3072:
                break;
              case 35:
                pass = true;
                break;
              case 36:
                pass = false;
                break;
              case 37:
                state.push(RT);
                break;
              case 38:
                state.pop();
                break;
              default:
                if (R2.T > 0)
                  state.push(RT);
                else if (R2.T < 0)
                  state.pop();
                else if (!pass || opts.WTF)
                  throw new Error("Unexpected record 0x" + RT.toString(16));
            }
          }, opts);
          if (rels["!id"][s3["!rel"]])
            s3["!drawel"] = rels["!id"][s3["!rel"]];
          return s3;
        }
        var WBPropsDef = [
          ["allowRefreshQuery", false, "bool"],
          ["autoCompressPictures", true, "bool"],
          ["backupFile", false, "bool"],
          ["checkCompatibility", false, "bool"],
          ["CodeName", ""],
          ["date1904", false, "bool"],
          ["defaultThemeVersion", 0, "int"],
          ["filterPrivacy", false, "bool"],
          ["hidePivotFieldList", false, "bool"],
          ["promptedSolutions", false, "bool"],
          ["publishItems", false, "bool"],
          ["refreshAllConnections", false, "bool"],
          ["saveExternalLinkValues", true, "bool"],
          ["showBorderUnselectedTables", true, "bool"],
          ["showInkAnnotation", true, "bool"],
          ["showObjects", "all"],
          ["showPivotChartFilter", false, "bool"],
          ["updateLinks", "userSet"]
        ];
        var WBViewDef = [
          ["activeTab", 0, "int"],
          ["autoFilterDateGrouping", true, "bool"],
          ["firstSheet", 0, "int"],
          ["minimized", false, "bool"],
          ["showHorizontalScroll", true, "bool"],
          ["showSheetTabs", true, "bool"],
          ["showVerticalScroll", true, "bool"],
          ["tabRatio", 600, "int"],
          ["visibility", "visible"]
        ];
        var SheetDef = [];
        var CalcPrDef = [
          ["calcCompleted", "true"],
          ["calcMode", "auto"],
          ["calcOnSave", "true"],
          ["concurrentCalc", "true"],
          ["fullCalcOnLoad", "false"],
          ["fullPrecision", "true"],
          ["iterate", "false"],
          ["iterateCount", "100"],
          ["iterateDelta", "0.001"],
          ["refMode", "A1"]
        ];
        function push_defaults_array(target, defaults4) {
          for (var j3 = 0; j3 != target.length; ++j3) {
            var w3 = target[j3];
            for (var i6 = 0; i6 != defaults4.length; ++i6) {
              var z3 = defaults4[i6];
              if (w3[z3[0]] == null)
                w3[z3[0]] = z3[1];
              else
                switch (z3[2]) {
                  case "bool":
                    if (typeof w3[z3[0]] == "string")
                      w3[z3[0]] = parsexmlbool(w3[z3[0]]);
                    break;
                  case "int":
                    if (typeof w3[z3[0]] == "string")
                      w3[z3[0]] = parseInt(w3[z3[0]], 10);
                    break;
                }
            }
          }
        }
        function push_defaults(target, defaults4) {
          for (var i6 = 0; i6 != defaults4.length; ++i6) {
            var z3 = defaults4[i6];
            if (target[z3[0]] == null)
              target[z3[0]] = z3[1];
            else
              switch (z3[2]) {
                case "bool":
                  if (typeof target[z3[0]] == "string")
                    target[z3[0]] = parsexmlbool(target[z3[0]]);
                  break;
                case "int":
                  if (typeof target[z3[0]] == "string")
                    target[z3[0]] = parseInt(target[z3[0]], 10);
                  break;
              }
          }
        }
        function parse_wb_defaults(wb) {
          push_defaults(wb.WBProps, WBPropsDef);
          push_defaults(wb.CalcPr, CalcPrDef);
          push_defaults_array(wb.WBView, WBViewDef);
          push_defaults_array(wb.Sheets, SheetDef);
          _ssfopts.date1904 = parsexmlbool(wb.WBProps.date1904);
        }
        function safe1904(wb) {
          if (!wb.Workbook)
            return "false";
          if (!wb.Workbook.WBProps)
            return "false";
          return parsexmlbool(wb.Workbook.WBProps.date1904) ? "true" : "false";
        }
        var badchars = ":][*?/\\".split("");
        function check_ws_name(n6, safe) {
          try {
            if (n6 == "")
              throw new Error("Sheet name cannot be blank");
            if (n6.length > 31)
              throw new Error("Sheet name cannot exceed 31 chars");
            if (n6.charCodeAt(0) == 39 || n6.charCodeAt(n6.length - 1) == 39)
              throw new Error("Sheet name cannot start or end with apostrophe (')");
            if (n6.toLowerCase() == "history")
              throw new Error("Sheet name cannot be 'History'");
            badchars.forEach(function(c8) {
              if (n6.indexOf(c8) == -1)
                return;
              throw new Error("Sheet name cannot contain : \\ / ? * [ ]");
            });
          } catch (e7) {
            if (safe)
              return false;
            throw e7;
          }
          return true;
        }
        function check_wb_names(N2, S2, codes) {
          N2.forEach(function(n6, i6) {
            check_ws_name(n6);
            for (var j3 = 0; j3 < i6; ++j3)
              if (n6 == N2[j3])
                throw new Error("Duplicate Sheet Name: " + n6);
            if (codes) {
              var cn2 = S2 && S2[i6] && S2[i6].CodeName || n6;
              if (cn2.charCodeAt(0) == 95 && cn2.length > 22)
                throw new Error("Bad Code Name: Worksheet" + cn2);
            }
          });
        }
        function check_wb(wb) {
          if (!wb || !wb.SheetNames || !wb.Sheets)
            throw new Error("Invalid Workbook");
          if (!wb.SheetNames.length)
            throw new Error("Workbook is empty");
          var Sheets = wb.Workbook && wb.Workbook.Sheets || [];
          check_wb_names(wb.SheetNames, Sheets, !!wb.vbaraw);
          for (var i6 = 0; i6 < wb.SheetNames.length; ++i6)
            check_ws(wb.Sheets[wb.SheetNames[i6]], wb.SheetNames[i6], i6);
          wb.SheetNames.forEach(function(n6, i7) {
            var ws = wb.Sheets[n6];
            if (!ws || !ws["!autofilter"])
              return;
            var DN;
            if (!wb.Workbook)
              wb.Workbook = {};
            if (!wb.Workbook.Names)
              wb.Workbook.Names = [];
            wb.Workbook.Names.forEach(function(dn2) {
              if (dn2.Name == "_xlnm._FilterDatabase" && dn2.Sheet == i7)
                DN = dn2;
            });
            var nn2 = formula_quote_sheet_name(n6) + "!" + fix_range(ws["!autofilter"].ref);
            if (DN)
              DN.Ref = nn2;
            else
              wb.Workbook.Names.push({ Name: "_xlnm._FilterDatabase", Sheet: i7, Ref: nn2 });
          });
        }
        var wbnsregex = /<\w+:workbook/;
        function parse_wb_xml(data, opts) {
          if (!data)
            throw new Error("Could not find file");
          var wb = { AppVersion: {}, WBProps: {}, WBView: [], Sheets: [], CalcPr: {}, Names: [], xmlns: "" };
          var pass = false, xmlns = "xmlns";
          var dname = {}, dnstart = 0;
          data.replace(tagregex, function xml_wb(x3, idx) {
            var y4 = parsexmltag(x3);
            switch (strip_ns(y4[0])) {
              case "<?xml":
                break;
              case "<workbook":
                if (x3.match(wbnsregex))
                  xmlns = "xmlns" + x3.match(/<(\w+):/)[1];
                wb.xmlns = y4[xmlns];
                break;
              case "</workbook>":
                break;
              case "<fileVersion":
                delete y4[0];
                wb.AppVersion = y4;
                break;
              case "<fileVersion/>":
              case "</fileVersion>":
                break;
              case "<fileSharing":
                break;
              case "<fileSharing/>":
                break;
              case "<workbookPr":
              case "<workbookPr/>":
                WBPropsDef.forEach(function(w3) {
                  if (y4[w3[0]] == null)
                    return;
                  switch (w3[2]) {
                    case "bool":
                      wb.WBProps[w3[0]] = parsexmlbool(y4[w3[0]]);
                      break;
                    case "int":
                      wb.WBProps[w3[0]] = parseInt(y4[w3[0]], 10);
                      break;
                    default:
                      wb.WBProps[w3[0]] = y4[w3[0]];
                  }
                });
                if (y4.codeName)
                  wb.WBProps.CodeName = utf8read(y4.codeName);
                break;
              case "</workbookPr>":
                break;
              case "<workbookProtection":
                break;
              case "<workbookProtection/>":
                break;
              case "<bookViews":
              case "<bookViews>":
              case "</bookViews>":
                break;
              case "<workbookView":
              case "<workbookView/>":
                delete y4[0];
                wb.WBView.push(y4);
                break;
              case "</workbookView>":
                break;
              case "<sheets":
              case "<sheets>":
              case "</sheets>":
                break;
              case "<sheet":
                switch (y4.state) {
                  case "hidden":
                    y4.Hidden = 1;
                    break;
                  case "veryHidden":
                    y4.Hidden = 2;
                    break;
                  default:
                    y4.Hidden = 0;
                }
                delete y4.state;
                y4.name = unescapexml(utf8read(y4.name));
                delete y4[0];
                wb.Sheets.push(y4);
                break;
              case "</sheet>":
                break;
              case "<functionGroups":
              case "<functionGroups/>":
                break;
              case "<functionGroup":
                break;
              case "<externalReferences":
              case "</externalReferences>":
              case "<externalReferences>":
                break;
              case "<externalReference":
                break;
              case "<definedNames/>":
                break;
              case "<definedNames>":
              case "<definedNames":
                pass = true;
                break;
              case "</definedNames>":
                pass = false;
                break;
              case "<definedName":
                {
                  dname = {};
                  dname.Name = utf8read(y4.name);
                  if (y4.comment)
                    dname.Comment = y4.comment;
                  if (y4.localSheetId)
                    dname.Sheet = +y4.localSheetId;
                  if (parsexmlbool(y4.hidden || "0"))
                    dname.Hidden = true;
                  dnstart = idx + x3.length;
                }
                break;
              case "</definedName>":
                {
                  dname.Ref = unescapexml(utf8read(data.slice(dnstart, idx)));
                  wb.Names.push(dname);
                }
                break;
              case "<definedName/>":
                break;
              case "<calcPr":
                delete y4[0];
                wb.CalcPr = y4;
                break;
              case "<calcPr/>":
                delete y4[0];
                wb.CalcPr = y4;
                break;
              case "</calcPr>":
                break;
              case "<oleSize":
                break;
              case "<customWorkbookViews>":
              case "</customWorkbookViews>":
              case "<customWorkbookViews":
                break;
              case "<customWorkbookView":
              case "</customWorkbookView>":
                break;
              case "<pivotCaches>":
              case "</pivotCaches>":
              case "<pivotCaches":
                break;
              case "<pivotCache":
                break;
              case "<smartTagPr":
              case "<smartTagPr/>":
                break;
              case "<smartTagTypes":
              case "<smartTagTypes>":
              case "</smartTagTypes>":
                break;
              case "<smartTagType":
                break;
              case "<webPublishing":
              case "<webPublishing/>":
                break;
              case "<fileRecoveryPr":
              case "<fileRecoveryPr/>":
                break;
              case "<webPublishObjects>":
              case "<webPublishObjects":
              case "</webPublishObjects>":
                break;
              case "<webPublishObject":
                break;
              case "<extLst":
              case "<extLst>":
              case "</extLst>":
              case "<extLst/>":
                break;
              case "<ext":
                pass = true;
                break;
              case "</ext>":
                pass = false;
                break;
              case "<ArchID":
                break;
              case "<AlternateContent":
              case "<AlternateContent>":
                pass = true;
                break;
              case "</AlternateContent>":
                pass = false;
                break;
              case "<revisionPtr":
                break;
              default:
                if (!pass && opts.WTF)
                  throw new Error("unrecognized " + y4[0] + " in workbook");
            }
            return x3;
          });
          if (XMLNS_main.indexOf(wb.xmlns) === -1)
            throw new Error("Unknown Namespace: " + wb.xmlns);
          parse_wb_defaults(wb);
          return wb;
        }
        function write_wb_xml(wb) {
          var o6 = [XML_HEADER];
          o6[o6.length] = writextag("workbook", null, {
            "xmlns": XMLNS_main[0],
            "xmlns:r": XMLNS.r
          });
          var write_names = wb.Workbook && (wb.Workbook.Names || []).length > 0;
          var workbookPr = { codeName: "ThisWorkbook" };
          if (wb.Workbook && wb.Workbook.WBProps) {
            WBPropsDef.forEach(function(x3) {
              if (wb.Workbook.WBProps[x3[0]] == null)
                return;
              if (wb.Workbook.WBProps[x3[0]] == x3[1])
                return;
              workbookPr[x3[0]] = wb.Workbook.WBProps[x3[0]];
            });
            if (wb.Workbook.WBProps.CodeName) {
              workbookPr.codeName = wb.Workbook.WBProps.CodeName;
              delete workbookPr.CodeName;
            }
          }
          o6[o6.length] = writextag("workbookPr", null, workbookPr);
          var sheets = wb.Workbook && wb.Workbook.Sheets || [];
          var i6 = 0;
          if (sheets && sheets[0] && !!sheets[0].Hidden) {
            o6[o6.length] = "<bookViews>";
            for (i6 = 0; i6 != wb.SheetNames.length; ++i6) {
              if (!sheets[i6])
                break;
              if (!sheets[i6].Hidden)
                break;
            }
            if (i6 == wb.SheetNames.length)
              i6 = 0;
            o6[o6.length] = '<workbookView firstSheet="' + i6 + '" activeTab="' + i6 + '"/>';
            o6[o6.length] = "</bookViews>";
          }
          o6[o6.length] = "<sheets>";
          for (i6 = 0; i6 != wb.SheetNames.length; ++i6) {
            var sht = { name: escapexml(wb.SheetNames[i6].slice(0, 31)) };
            sht.sheetId = "" + (i6 + 1);
            sht["r:id"] = "rId" + (i6 + 1);
            if (sheets[i6])
              switch (sheets[i6].Hidden) {
                case 1:
                  sht.state = "hidden";
                  break;
                case 2:
                  sht.state = "veryHidden";
                  break;
              }
            o6[o6.length] = writextag("sheet", null, sht);
          }
          o6[o6.length] = "</sheets>";
          if (write_names) {
            o6[o6.length] = "<definedNames>";
            if (wb.Workbook && wb.Workbook.Names)
              wb.Workbook.Names.forEach(function(n6) {
                var d2 = { name: n6.Name };
                if (n6.Comment)
                  d2.comment = n6.Comment;
                if (n6.Sheet != null)
                  d2.localSheetId = "" + n6.Sheet;
                if (n6.Hidden)
                  d2.hidden = "1";
                if (!n6.Ref)
                  return;
                o6[o6.length] = writextag("definedName", escapexml(n6.Ref), d2);
              });
            o6[o6.length] = "</definedNames>";
          }
          if (o6.length > 2) {
            o6[o6.length] = "</workbook>";
            o6[1] = o6[1].replace("/>", ">");
          }
          return o6.join("");
        }
        function parse_BrtBundleSh(data, length) {
          var z3 = {};
          z3.Hidden = data.read_shift(4);
          z3.iTabID = data.read_shift(4);
          z3.strRelID = parse_RelID(data, length - 8);
          z3.name = parse_XLWideString(data);
          return z3;
        }
        function write_BrtBundleSh(data, o6) {
          if (!o6)
            o6 = new_buf(127);
          o6.write_shift(4, data.Hidden);
          o6.write_shift(4, data.iTabID);
          write_RelID(data.strRelID, o6);
          write_XLWideString(data.name.slice(0, 31), o6);
          return o6.length > o6.l ? o6.slice(0, o6.l) : o6;
        }
        function parse_BrtWbProp(data, length) {
          var o6 = {};
          var flags = data.read_shift(4);
          o6.defaultThemeVersion = data.read_shift(4);
          var strName = length > 8 ? parse_XLWideString(data) : "";
          if (strName.length > 0)
            o6.CodeName = strName;
          o6.autoCompressPictures = !!(flags & 65536);
          o6.backupFile = !!(flags & 64);
          o6.checkCompatibility = !!(flags & 4096);
          o6.date1904 = !!(flags & 1);
          o6.filterPrivacy = !!(flags & 8);
          o6.hidePivotFieldList = !!(flags & 1024);
          o6.promptedSolutions = !!(flags & 16);
          o6.publishItems = !!(flags & 2048);
          o6.refreshAllConnections = !!(flags & 262144);
          o6.saveExternalLinkValues = !!(flags & 128);
          o6.showBorderUnselectedTables = !!(flags & 4);
          o6.showInkAnnotation = !!(flags & 32);
          o6.showObjects = ["all", "placeholders", "none"][flags >> 13 & 3];
          o6.showPivotChartFilter = !!(flags & 32768);
          o6.updateLinks = ["userSet", "never", "always"][flags >> 8 & 3];
          return o6;
        }
        function write_BrtWbProp(data, o6) {
          if (!o6)
            o6 = new_buf(72);
          var flags = 0;
          if (data) {
            if (data.date1904)
              flags |= 1;
            if (data.filterPrivacy)
              flags |= 8;
          }
          o6.write_shift(4, flags);
          o6.write_shift(4, 0);
          write_XLSBCodeName(data && data.CodeName || "ThisWorkbook", o6);
          return o6.slice(0, o6.l);
        }
        function parse_BrtFRTArchID$(data, length) {
          var o6 = {};
          data.read_shift(4);
          o6.ArchID = data.read_shift(4);
          data.l += length - 8;
          return o6;
        }
        function parse_BrtName(data, length, opts) {
          var end = data.l + length;
          var flags = data.read_shift(4);
          data.l += 1;
          var itab = data.read_shift(4);
          var name = parse_XLNameWideString(data);
          var formula;
          var comment = "";
          try {
            formula = parse_XLSBNameParsedFormula(data, 0, opts);
            try {
              comment = parse_XLNullableWideString(data);
            } catch (e7) {
            }
          } catch (e7) {
            console.error("Could not parse defined name " + name);
          }
          if (flags & 32)
            name = "_xlnm." + name;
          data.l = end;
          var out = { Name: name, Ptg: formula, Flags: flags };
          if (itab < 268435455)
            out.Sheet = itab;
          if (comment)
            out.Comment = comment;
          return out;
        }
        function write_BrtName(name, wb) {
          var o6 = new_buf(9);
          var flags = 0;
          var dname = name.Name;
          if (XLSLblBuiltIn.indexOf(dname) > -1) {
            flags |= 32;
            dname = dname.slice(6);
          }
          o6.write_shift(4, flags);
          o6.write_shift(1, 0);
          o6.write_shift(4, name.Sheet == null ? 4294967295 : name.Sheet);
          var arr = [
            o6,
            write_XLWideString(dname),
            write_XLSBNameParsedFormula(name.Ref, wb)
          ];
          if (name.Comment)
            arr.push(write_XLNullableWideString(name.Comment));
          else {
            var x3 = new_buf(4);
            x3.write_shift(4, 4294967295);
            arr.push(x3);
          }
          return bconcat(arr);
        }
        function parse_wb_bin(data, opts) {
          var wb = { AppVersion: {}, WBProps: {}, WBView: [], Sheets: [], CalcPr: {}, xmlns: "" };
          var state = [];
          var pass = false;
          if (!opts)
            opts = {};
          opts.biff = 12;
          var Names = [];
          var supbooks = [[]];
          supbooks.SheetNames = [];
          supbooks.XTI = [];
          XLSBRecordEnum[16] = { n: "BrtFRTArchID$", f: parse_BrtFRTArchID$ };
          recordhopper(data, function hopper_wb(val2, R2, RT) {
            switch (RT) {
              case 156:
                supbooks.SheetNames.push(val2.name);
                wb.Sheets.push(val2);
                break;
              case 153:
                wb.WBProps = val2;
                break;
              case 39:
                if (val2.Sheet != null)
                  opts.SID = val2.Sheet;
                val2.Ref = val2.Ptg ? stringify_formula(val2.Ptg, null, null, supbooks, opts) : "#REF!";
                delete opts.SID;
                delete val2.Ptg;
                Names.push(val2);
                break;
              case 1036:
                break;
              case 357:
              case 358:
              case 355:
              case 667:
                if (!supbooks[0].length)
                  supbooks[0] = [RT, val2];
                else
                  supbooks.push([RT, val2]);
                supbooks[supbooks.length - 1].XTI = [];
                break;
              case 362:
                if (supbooks.length === 0) {
                  supbooks[0] = [];
                  supbooks[0].XTI = [];
                }
                supbooks[supbooks.length - 1].XTI = supbooks[supbooks.length - 1].XTI.concat(val2);
                supbooks.XTI = supbooks.XTI.concat(val2);
                break;
              case 361:
                break;
              case 2071:
              case 158:
              case 143:
              case 664:
              case 353:
                break;
              case 3072:
              case 3073:
              case 534:
              case 677:
              case 157:
              case 610:
              case 2050:
              case 155:
              case 548:
              case 676:
              case 128:
              case 665:
              case 2128:
              case 2125:
              case 549:
              case 2053:
              case 596:
              case 2076:
              case 2075:
              case 2082:
              case 397:
              case 154:
              case 1117:
              case 553:
              case 2091:
                break;
              case 35:
                state.push(RT);
                pass = true;
                break;
              case 36:
                state.pop();
                pass = false;
                break;
              case 37:
                state.push(RT);
                pass = true;
                break;
              case 38:
                state.pop();
                pass = false;
                break;
              case 16:
                break;
              default:
                if (R2.T) {
                } else if (!pass || opts.WTF && state[state.length - 1] != 37 && state[state.length - 1] != 35)
                  throw new Error("Unexpected record 0x" + RT.toString(16));
            }
          }, opts);
          parse_wb_defaults(wb);
          wb.Names = Names;
          wb.supbooks = supbooks;
          return wb;
        }
        function write_BUNDLESHS(ba, wb) {
          write_record(ba, 143);
          for (var idx = 0; idx != wb.SheetNames.length; ++idx) {
            var viz = wb.Workbook && wb.Workbook.Sheets && wb.Workbook.Sheets[idx] && wb.Workbook.Sheets[idx].Hidden || 0;
            var d2 = { Hidden: viz, iTabID: idx + 1, strRelID: "rId" + (idx + 1), name: wb.SheetNames[idx] };
            write_record(ba, 156, write_BrtBundleSh(d2));
          }
          write_record(ba, 144);
        }
        function write_BrtFileVersion(data, o6) {
          if (!o6)
            o6 = new_buf(127);
          for (var i6 = 0; i6 != 4; ++i6)
            o6.write_shift(4, 0);
          write_XLWideString("SheetJS", o6);
          write_XLWideString(XLSX2.version, o6);
          write_XLWideString(XLSX2.version, o6);
          write_XLWideString("7262", o6);
          return o6.length > o6.l ? o6.slice(0, o6.l) : o6;
        }
        function write_BrtBookView(idx, o6) {
          if (!o6)
            o6 = new_buf(29);
          o6.write_shift(-4, 0);
          o6.write_shift(-4, 460);
          o6.write_shift(4, 28800);
          o6.write_shift(4, 17600);
          o6.write_shift(4, 500);
          o6.write_shift(4, idx);
          o6.write_shift(4, idx);
          var flags = 120;
          o6.write_shift(1, flags);
          return o6.length > o6.l ? o6.slice(0, o6.l) : o6;
        }
        function write_BOOKVIEWS(ba, wb) {
          if (!wb.Workbook || !wb.Workbook.Sheets)
            return;
          var sheets = wb.Workbook.Sheets;
          var i6 = 0, vistab = -1, hidden = -1;
          for (; i6 < sheets.length; ++i6) {
            if (!sheets[i6] || !sheets[i6].Hidden && vistab == -1)
              vistab = i6;
            else if (sheets[i6].Hidden == 1 && hidden == -1)
              hidden = i6;
          }
          if (hidden > vistab)
            return;
          write_record(ba, 135);
          write_record(ba, 158, write_BrtBookView(vistab));
          write_record(ba, 136);
        }
        function write_BRTNAMES(ba, wb) {
          if (!wb.Workbook || !wb.Workbook.Names)
            return;
          wb.Workbook.Names.forEach(function(name) {
            try {
              if (name.Flags & 14)
                return;
              write_record(ba, 39, write_BrtName(name, wb));
            } catch (e7) {
              console.error("Could not serialize defined name " + JSON.stringify(name));
            }
          });
        }
        function write_SELF_EXTERNS_xlsb(wb) {
          var L2 = wb.SheetNames.length;
          var o6 = new_buf(12 * L2 + 28);
          o6.write_shift(4, L2 + 2);
          o6.write_shift(4, 0);
          o6.write_shift(4, -2);
          o6.write_shift(4, -2);
          o6.write_shift(4, 0);
          o6.write_shift(4, -1);
          o6.write_shift(4, -1);
          for (var i6 = 0; i6 < L2; ++i6) {
            o6.write_shift(4, 0);
            o6.write_shift(4, i6);
            o6.write_shift(4, i6);
          }
          return o6;
        }
        function write_EXTERNALS_xlsb(ba, wb) {
          write_record(ba, 353);
          write_record(ba, 357);
          write_record(ba, 362, write_SELF_EXTERNS_xlsb(wb, 0));
          write_record(ba, 354);
        }
        function write_wb_bin(wb, opts) {
          var ba = buf_array();
          write_record(ba, 131);
          write_record(ba, 128, write_BrtFileVersion());
          write_record(ba, 153, write_BrtWbProp(wb.Workbook && wb.Workbook.WBProps || null));
          write_BOOKVIEWS(ba, wb, opts);
          write_BUNDLESHS(ba, wb, opts);
          write_EXTERNALS_xlsb(ba, wb);
          if ((wb.Workbook || {}).Names)
            write_BRTNAMES(ba, wb);
          write_record(ba, 132);
          return ba.end();
        }
        function parse_wb(data, name, opts) {
          if (name.slice(-4) === ".bin")
            return parse_wb_bin(data, opts);
          return parse_wb_xml(data, opts);
        }
        function parse_ws(data, name, idx, opts, rels, wb, themes, styles) {
          if (name.slice(-4) === ".bin")
            return parse_ws_bin(data, opts, idx, rels, wb, themes, styles);
          return parse_ws_xml(data, opts, idx, rels, wb, themes, styles);
        }
        function parse_cs(data, name, idx, opts, rels, wb, themes, styles) {
          if (name.slice(-4) === ".bin")
            return parse_cs_bin(data, opts, idx, rels, wb, themes, styles);
          return parse_cs_xml(data, opts, idx, rels, wb, themes, styles);
        }
        function parse_ms(data, name, idx, opts, rels, wb, themes, styles) {
          if (name.slice(-4) === ".bin")
            return parse_ms_bin(data, opts, idx, rels, wb, themes, styles);
          return parse_ms_xml(data, opts, idx, rels, wb, themes, styles);
        }
        function parse_ds(data, name, idx, opts, rels, wb, themes, styles) {
          if (name.slice(-4) === ".bin")
            return parse_ds_bin(data, opts, idx, rels, wb, themes, styles);
          return parse_ds_xml(data, opts, idx, rels, wb, themes, styles);
        }
        function parse_sty(data, name, themes, opts) {
          if (name.slice(-4) === ".bin")
            return parse_sty_bin(data, themes, opts);
          return parse_sty_xml(data, themes, opts);
        }
        function parse_sst(data, name, opts) {
          if (name.slice(-4) === ".bin")
            return parse_sst_bin(data, opts);
          return parse_sst_xml(data, opts);
        }
        function parse_cmnt(data, name, opts) {
          if (name.slice(-4) === ".bin")
            return parse_comments_bin(data, opts);
          return parse_comments_xml(data, opts);
        }
        function parse_cc(data, name, opts) {
          if (name.slice(-4) === ".bin")
            return parse_cc_bin(data, name, opts);
          return parse_cc_xml(data, name, opts);
        }
        function parse_xlink(data, rel, name, opts) {
          if (name.slice(-4) === ".bin")
            return parse_xlink_bin(data, rel, name, opts);
          return parse_xlink_xml(data, rel, name, opts);
        }
        function parse_xlmeta(data, name, opts) {
          if (name.slice(-4) === ".bin")
            return parse_xlmeta_bin(data, name, opts);
          return parse_xlmeta_xml(data, name, opts);
        }
        var attregexg2 = /\b((?:\w+:)?[\w]+)=((?:")([^"]*)(?:")|(?:')([^']*)(?:'))/g;
        var attregex2 = /\b((?:\w+:)?[\w]+)=((?:")(?:[^"]*)(?:")|(?:')(?:[^']*)(?:'))/;
        function xlml_parsexmltag(tag, skip_root) {
          var words = tag.split(/\s+/);
          var z3 = [];
          if (!skip_root)
            z3[0] = words[0];
          if (words.length === 1)
            return z3;
          var m4 = tag.match(attregexg2), y4, j3, w3, i6;
          if (m4)
            for (i6 = 0; i6 != m4.length; ++i6) {
              y4 = m4[i6].match(attregex2);
              if ((j3 = y4[1].indexOf(":")) === -1)
                z3[y4[1]] = y4[2].slice(1, y4[2].length - 1);
              else {
                if (y4[1].slice(0, 6) === "xmlns:")
                  w3 = "xmlns" + y4[1].slice(6);
                else
                  w3 = y4[1].slice(j3 + 1);
                z3[w3] = y4[2].slice(1, y4[2].length - 1);
              }
            }
          return z3;
        }
        function xlml_parsexmltagobj(tag) {
          var words = tag.split(/\s+/);
          var z3 = {};
          if (words.length === 1)
            return z3;
          var m4 = tag.match(attregexg2), y4, j3, w3, i6;
          if (m4)
            for (i6 = 0; i6 != m4.length; ++i6) {
              y4 = m4[i6].match(attregex2);
              if ((j3 = y4[1].indexOf(":")) === -1)
                z3[y4[1]] = y4[2].slice(1, y4[2].length - 1);
              else {
                if (y4[1].slice(0, 6) === "xmlns:")
                  w3 = "xmlns" + y4[1].slice(6);
                else
                  w3 = y4[1].slice(j3 + 1);
                z3[w3] = y4[2].slice(1, y4[2].length - 1);
              }
            }
          return z3;
        }
        var XLMLFormatMap;
        function xlml_format(format2, value, date1904) {
          var fmt = XLMLFormatMap[format2] || unescapexml(format2);
          if (fmt === "General")
            return SSF_general(value);
          return SSF_format(fmt, value, { date1904: !!date1904 });
        }
        function xlml_set_custprop(Custprops, key, cp, val2) {
          var oval = val2;
          switch ((cp[0].match(/dt:dt="([\w.]+)"/) || ["", ""])[1]) {
            case "boolean":
              oval = parsexmlbool(val2);
              break;
            case "i2":
            case "int":
              oval = parseInt(val2, 10);
              break;
            case "r4":
            case "float":
              oval = parseFloat(val2);
              break;
            case "date":
            case "dateTime.tz":
              oval = parseDate(val2);
              break;
            case "i8":
            case "string":
            case "fixed":
            case "uuid":
            case "bin.base64":
              break;
            default:
              throw new Error("bad custprop:" + cp[0]);
          }
          Custprops[unescapexml(key)] = oval;
        }
        function safe_format_xlml(cell, nf, o6, date1904) {
          if (cell.t === "z")
            return;
          if (!o6 || o6.cellText !== false)
            try {
              if (cell.t === "e") {
                cell.w = cell.w || BErr[cell.v];
              } else if (nf === "General") {
                if (cell.t === "n") {
                  if ((cell.v | 0) === cell.v)
                    cell.w = cell.v.toString(10);
                  else
                    cell.w = SSF_general_num(cell.v);
                } else
                  cell.w = SSF_general(cell.v);
              } else
                cell.w = xlml_format(nf || "General", cell.v, date1904);
            } catch (e7) {
              if (o6.WTF)
                throw e7;
            }
          try {
            var z3 = XLMLFormatMap[nf] || nf || "General";
            if (o6.cellNF)
              cell.z = z3;
            if (o6.cellDates && cell.t == "n" && fmt_is_date(z3)) {
              var _d = SSF_parse_date_code(cell.v + (date1904 ? 1462 : 0));
              if (_d) {
                cell.t = "d";
                cell.v = new Date(Date.UTC(_d.y, _d.m - 1, _d.d, _d.H, _d.M, _d.S, _d.u));
              }
            }
          } catch (e7) {
            if (o6.WTF)
              throw e7;
          }
        }
        function process_style_xlml(styles, stag, opts) {
          if (opts.cellStyles) {
            if (stag.Interior) {
              var I2 = stag.Interior;
              if (I2.Pattern)
                I2.patternType = XLMLPatternTypeMap[I2.Pattern] || I2.Pattern;
            }
          }
          styles[stag.ID] = stag;
        }
        function parse_xlml_data(xml, ss, data, cell, base, styles, csty, row, arrayf, o6, date1904) {
          var nf = "General", sid = cell.StyleID, S2 = {};
          o6 = o6 || {};
          var interiors = [];
          var i6 = 0;
          if (sid === void 0 && row)
            sid = row.StyleID;
          if (sid === void 0 && csty)
            sid = csty.StyleID;
          while (styles[sid] !== void 0) {
            var ssid = styles[sid];
            if (ssid.nf)
              nf = ssid.nf;
            if (ssid.Interior)
              interiors.push(ssid.Interior);
            if (!ssid.Parent)
              break;
            sid = ssid.Parent;
          }
          switch (data.Type) {
            case "Boolean":
              cell.t = "b";
              cell.v = parsexmlbool(xml);
              break;
            case "String":
              cell.t = "s";
              cell.r = xlml_fixstr(unescapexml(xml));
              cell.v = xml.indexOf("<") > -1 ? unescapexml(ss || xml).replace(/<[^<>]*>/g, "") : cell.r;
              break;
            case "DateTime":
              if (xml.slice(-1) != "Z")
                xml += "Z";
              cell.v = datenum(parseDate(xml, date1904), date1904);
              if (cell.v !== cell.v)
                cell.v = unescapexml(xml);
              if (!nf || nf == "General")
                nf = "yyyy-mm-dd";
            case "Number":
              if (cell.v === void 0)
                cell.v = +xml;
              if (!cell.t)
                cell.t = "n";
              break;
            case "Error":
              cell.t = "e";
              cell.v = RBErr[xml];
              if (o6.cellText !== false)
                cell.w = xml;
              break;
            default:
              if (xml == "" && ss == "") {
                cell.t = "z";
              } else {
                cell.t = "s";
                cell.v = xlml_fixstr(ss || xml);
              }
              break;
          }
          safe_format_xlml(cell, nf, o6, date1904);
          if (o6.cellFormula !== false) {
            if (cell.Formula) {
              var fstr = unescapexml(cell.Formula);
              if (fstr.charCodeAt(0) == 61)
                fstr = fstr.slice(1);
              cell.f = rc_to_a1(fstr, base);
              delete cell.Formula;
              if (cell.ArrayRange == "RC")
                cell.F = rc_to_a1("RC:RC", base);
              else if (cell.ArrayRange) {
                cell.F = rc_to_a1(cell.ArrayRange, base);
                arrayf.push([safe_decode_range(cell.F), cell.F]);
              }
            } else {
              for (i6 = 0; i6 < arrayf.length; ++i6)
                if (base.r >= arrayf[i6][0].s.r && base.r <= arrayf[i6][0].e.r) {
                  if (base.c >= arrayf[i6][0].s.c && base.c <= arrayf[i6][0].e.c)
                    cell.F = arrayf[i6][1];
                }
            }
          }
          if (o6.cellStyles) {
            interiors.forEach(function(x3) {
              if (!S2.patternType && x3.patternType)
                S2.patternType = x3.patternType;
            });
            cell.s = S2;
          }
          if (cell.StyleID !== void 0)
            cell.ixfe = cell.StyleID;
        }
        function xlml_prefix_dname(dname) {
          return XLSLblBuiltIn.indexOf("_xlnm." + dname) > -1 ? "_xlnm." + dname : dname;
        }
        function xlml_clean_comment(comment) {
          comment.t = comment.v || "";
          comment.t = comment.t.replace(/\r\n/g, "\n").replace(/\r/g, "\n");
          comment.v = comment.w = comment.ixfe = void 0;
        }
        function parse_xlml_xml(d2, _opts) {
          var opts = _opts || {};
          make_ssf();
          var str = debom(xlml_normalize(d2));
          if (opts.type == "binary" || opts.type == "array" || opts.type == "base64") {
            if (typeof $cptable !== "undefined")
              str = $cptable.utils.decode(65001, char_codes(str));
            else
              str = utf8read(str);
          }
          var opening = str.slice(0, 1024).toLowerCase(), ishtml = false;
          opening = opening.replace(/".*?"/g, "");
          if ((opening.indexOf(">") & 1023) > Math.min(opening.indexOf(",") & 1023, opening.indexOf(";") & 1023)) {
            var _o = dup(opts);
            _o.type = "string";
            return PRN.to_workbook(str, _o);
          }
          if (opening.indexOf("<?xml") == -1)
            ["html", "table", "head", "meta", "script", "style", "div"].forEach(function(tag) {
              if (opening.indexOf("<" + tag) >= 0)
                ishtml = true;
            });
          if (ishtml)
            return html_to_workbook(str, opts);
          XLMLFormatMap = {
            "General Number": "General",
            "General Date": table_fmt[22],
            "Long Date": "dddd, mmmm dd, yyyy",
            "Medium Date": table_fmt[15],
            "Short Date": table_fmt[14],
            "Long Time": table_fmt[19],
            "Medium Time": table_fmt[18],
            "Short Time": table_fmt[20],
            "Currency": '"$"#,##0.00_);[Red]\\("$"#,##0.00\\)',
            "Fixed": table_fmt[2],
            "Standard": table_fmt[4],
            "Percent": table_fmt[10],
            "Scientific": table_fmt[11],
            "Yes/No": '"Yes";"Yes";"No";@',
            "True/False": '"True";"True";"False";@',
            "On/Off": '"Yes";"Yes";"No";@'
          };
          var Rn2;
          var state = [], tmp;
          if (DENSE != null && opts.dense == null)
            opts.dense = DENSE;
          var sheets = {}, sheetnames = [], cursheet = {}, sheetname = "";
          if (opts.dense)
            cursheet["!data"] = [];
          var cell = {}, row = {};
          var dtag = xlml_parsexmltag('<Data ss:Type="String">'), didx = 0;
          var c8 = 0, r6 = 0;
          var refguess = { s: { r: 2e6, c: 2e6 }, e: { r: 0, c: 0 } };
          var styles = {}, stag = {};
          var ss = "", fidx = 0;
          var merges = [];
          var Props = {}, Custprops = {}, pidx = 0, cp = [];
          var comments = [], comment = {};
          var cstys = [], csty, seencol = false;
          var arrayf = [];
          var rowinfo = [], rowobj = {}, cc2 = 0, rr = 0;
          var Workbook = { Sheets: [], WBProps: { date1904: false } }, wsprops = {};
          xlmlregex.lastIndex = 0;
          str = str_remove_ng(str, "<!--", "-->");
          var raw_Rn3 = "";
          while (Rn2 = xlmlregex.exec(str))
            switch (Rn2[3] = (raw_Rn3 = Rn2[3]).toLowerCase()) {
              case "data":
                if (raw_Rn3 == "data") {
                  if (Rn2[1] === "/") {
                    if ((tmp = state.pop())[0] !== Rn2[3])
                      throw new Error("Bad state: " + tmp.join("|"));
                  } else if (Rn2[0].charAt(Rn2[0].length - 2) !== "/")
                    state.push([Rn2[3], true]);
                  break;
                }
                if (state[state.length - 1][1])
                  break;
                if (Rn2[1] === "/")
                  parse_xlml_data(str.slice(didx, Rn2.index), ss, dtag, state[state.length - 1][0] == "comment" ? comment : cell, { c: c8, r: r6 }, styles, cstys[c8], row, arrayf, opts, Workbook.WBProps.date1904);
                else {
                  ss = "";
                  dtag = xlml_parsexmltag(Rn2[0]);
                  didx = Rn2.index + Rn2[0].length;
                }
                break;
              case "cell":
                if (Rn2[1] === "/") {
                  if (comments.length > 0)
                    cell.c = comments;
                  if ((!opts.sheetRows || opts.sheetRows > r6) && cell.v !== void 0) {
                    if (opts.dense) {
                      if (!cursheet["!data"][r6])
                        cursheet["!data"][r6] = [];
                      cursheet["!data"][r6][c8] = cell;
                    } else
                      cursheet[encode_col(c8) + encode_row(r6)] = cell;
                  }
                  if (cell.HRef) {
                    cell.l = { Target: unescapexml(cell.HRef) };
                    if (cell.HRefScreenTip)
                      cell.l.Tooltip = cell.HRefScreenTip;
                    delete cell.HRef;
                    delete cell.HRefScreenTip;
                  }
                  if (cell.MergeAcross || cell.MergeDown) {
                    cc2 = c8 + (parseInt(cell.MergeAcross, 10) | 0);
                    rr = r6 + (parseInt(cell.MergeDown, 10) | 0);
                    if (cc2 > c8 || rr > r6)
                      merges.push({ s: { c: c8, r: r6 }, e: { c: cc2, r: rr } });
                  }
                  if (!opts.sheetStubs) {
                    if (cell.MergeAcross)
                      c8 = cc2 + 1;
                    else
                      ++c8;
                  } else if (cell.MergeAcross || cell.MergeDown) {
                    for (var cma = c8; cma <= cc2; ++cma) {
                      for (var cmd = r6; cmd <= rr; ++cmd) {
                        if (cma > c8 || cmd > r6) {
                          if (opts.dense) {
                            if (!cursheet["!data"][cmd])
                              cursheet["!data"][cmd] = [];
                            cursheet["!data"][cmd][cma] = { t: "z" };
                          } else
                            cursheet[encode_col(cma) + encode_row(cmd)] = { t: "z" };
                        }
                      }
                    }
                    c8 = cc2 + 1;
                  } else
                    ++c8;
                } else {
                  cell = xlml_parsexmltagobj(Rn2[0]);
                  if (cell.Index)
                    c8 = +cell.Index - 1;
                  if (c8 < refguess.s.c)
                    refguess.s.c = c8;
                  if (c8 > refguess.e.c)
                    refguess.e.c = c8;
                  if (Rn2[0].slice(-2) === "/>")
                    ++c8;
                  comments = [];
                }
                break;
              case "row":
                if (Rn2[1] === "/" || Rn2[0].slice(-2) === "/>") {
                  if (r6 < refguess.s.r)
                    refguess.s.r = r6;
                  if (r6 > refguess.e.r)
                    refguess.e.r = r6;
                  if (Rn2[0].slice(-2) === "/>") {
                    row = xlml_parsexmltag(Rn2[0]);
                    if (row.Index)
                      r6 = +row.Index - 1;
                  }
                  c8 = 0;
                  ++r6;
                } else {
                  row = xlml_parsexmltag(Rn2[0]);
                  if (row.Index)
                    r6 = +row.Index - 1;
                  rowobj = {};
                  if (row.AutoFitHeight == "0" || row.Height) {
                    rowobj.hpx = parseInt(row.Height, 10);
                    rowobj.hpt = px2pt(rowobj.hpx);
                    rowinfo[r6] = rowobj;
                  }
                  if (row.Hidden == "1") {
                    rowobj.hidden = true;
                    rowinfo[r6] = rowobj;
                  }
                }
                break;
              case "worksheet":
                if (Rn2[1] === "/") {
                  if ((tmp = state.pop())[0] !== Rn2[3])
                    throw new Error("Bad state: " + tmp.join("|"));
                  sheetnames.push(sheetname);
                  if (refguess.s.r <= refguess.e.r && refguess.s.c <= refguess.e.c) {
                    cursheet["!ref"] = encode_range(refguess);
                    if (opts.sheetRows && opts.sheetRows <= refguess.e.r) {
                      cursheet["!fullref"] = cursheet["!ref"];
                      refguess.e.r = opts.sheetRows - 1;
                      cursheet["!ref"] = encode_range(refguess);
                    }
                  }
                  if (merges.length)
                    cursheet["!merges"] = merges;
                  if (cstys.length > 0)
                    cursheet["!cols"] = cstys;
                  if (rowinfo.length > 0)
                    cursheet["!rows"] = rowinfo;
                  sheets[sheetname] = cursheet;
                } else {
                  refguess = { s: { r: 2e6, c: 2e6 }, e: { r: 0, c: 0 } };
                  r6 = c8 = 0;
                  state.push([Rn2[3], false]);
                  tmp = xlml_parsexmltag(Rn2[0]);
                  sheetname = unescapexml(tmp.Name);
                  cursheet = {};
                  if (opts.dense)
                    cursheet["!data"] = [];
                  merges = [];
                  arrayf = [];
                  rowinfo = [];
                  wsprops = { name: sheetname, Hidden: 0 };
                  Workbook.Sheets.push(wsprops);
                }
                break;
              case "table":
                if (Rn2[1] === "/") {
                  if ((tmp = state.pop())[0] !== Rn2[3])
                    throw new Error("Bad state: " + tmp.join("|"));
                } else if (Rn2[0].slice(-2) == "/>")
                  break;
                else {
                  state.push([Rn2[3], false]);
                  cstys = [];
                  seencol = false;
                }
                break;
              case "style":
                if (Rn2[1] === "/")
                  process_style_xlml(styles, stag, opts);
                else
                  stag = xlml_parsexmltag(Rn2[0]);
                break;
              case "numberformat":
                stag.nf = unescapexml(xlml_parsexmltag(Rn2[0]).Format || "General");
                if (XLMLFormatMap[stag.nf])
                  stag.nf = XLMLFormatMap[stag.nf];
                for (var ssfidx = 0; ssfidx != 392; ++ssfidx)
                  if (table_fmt[ssfidx] == stag.nf)
                    break;
                if (ssfidx == 392) {
                  for (ssfidx = 57; ssfidx != 392; ++ssfidx)
                    if (table_fmt[ssfidx] == null) {
                      SSF__load(stag.nf, ssfidx);
                      break;
                    }
                }
                break;
              case "column":
                if (state[state.length - 1][0] !== "table")
                  break;
                if (Rn2[1] === "/")
                  break;
                csty = xlml_parsexmltag(Rn2[0]);
                if (csty.Hidden) {
                  csty.hidden = true;
                  delete csty.Hidden;
                }
                if (csty.Width)
                  csty.wpx = parseInt(csty.Width, 10);
                if (!seencol && csty.wpx > 10) {
                  seencol = true;
                  MDW = DEF_MDW;
                  for (var _col = 0; _col < cstys.length; ++_col)
                    if (cstys[_col])
                      process_col(cstys[_col]);
                }
                if (seencol)
                  process_col(csty);
                cstys[csty.Index - 1 || cstys.length] = csty;
                for (var i6 = 0; i6 < +csty.Span; ++i6)
                  cstys[cstys.length] = dup(csty);
                break;
              case "namedrange":
                if (Rn2[1] === "/")
                  break;
                if (!Workbook.Names)
                  Workbook.Names = [];
                var _NamedRange = parsexmltag(Rn2[0]);
                var _DefinedName = {
                  Name: xlml_prefix_dname(_NamedRange.Name),
                  Ref: rc_to_a1(_NamedRange.RefersTo.slice(1), { r: 0, c: 0 })
                };
                if (Workbook.Sheets.length > 0)
                  _DefinedName.Sheet = Workbook.Sheets.length - 1;
                Workbook.Names.push(_DefinedName);
                break;
              case "namedcell":
                break;
              case "b":
                break;
              case "i":
                break;
              case "u":
                break;
              case "s":
                break;
              case "em":
                break;
              case "h2":
                break;
              case "h3":
                break;
              case "sub":
                break;
              case "sup":
                break;
              case "span":
                break;
              case "alignment":
                break;
              case "borders":
                break;
              case "border":
                break;
              case "font":
                if (Rn2[0].slice(-2) === "/>")
                  break;
                else if (Rn2[1] === "/")
                  ss += str.slice(fidx, Rn2.index);
                else
                  fidx = Rn2.index + Rn2[0].length;
                break;
              case "interior":
                if (!opts.cellStyles)
                  break;
                stag.Interior = xlml_parsexmltag(Rn2[0]);
                break;
              case "protection":
                break;
              case "author":
              case "title":
              case "description":
              case "created":
              case "keywords":
              case "subject":
              case "category":
              case "company":
              case "lastauthor":
              case "lastsaved":
              case "lastprinted":
              case "version":
              case "revision":
              case "totaltime":
              case "hyperlinkbase":
              case "manager":
              case "contentstatus":
              case "identifier":
              case "language":
              case "appname":
                if (Rn2[0].slice(-2) === "/>")
                  break;
                else if (Rn2[1] === "/")
                  xlml_set_prop(Props, raw_Rn3, str.slice(pidx, Rn2.index));
                else
                  pidx = Rn2.index + Rn2[0].length;
                break;
              case "paragraphs":
                break;
              case "styles":
              case "workbook":
                if (Rn2[1] === "/") {
                  if ((tmp = state.pop())[0] !== Rn2[3])
                    throw new Error("Bad state: " + tmp.join("|"));
                } else
                  state.push([Rn2[3], false]);
                break;
              case "comment":
                if (Rn2[1] === "/") {
                  if ((tmp = state.pop())[0] !== Rn2[3])
                    throw new Error("Bad state: " + tmp.join("|"));
                  xlml_clean_comment(comment);
                  comments.push(comment);
                } else {
                  state.push([Rn2[3], false]);
                  tmp = xlml_parsexmltag(Rn2[0]);
                  if (!parsexmlbool(tmp["ShowAlways"] || "0"))
                    comments.hidden = true;
                  comment = { a: tmp.Author };
                }
                break;
              case "autofilter":
                if (Rn2[1] === "/") {
                  if ((tmp = state.pop())[0] !== Rn2[3])
                    throw new Error("Bad state: " + tmp.join("|"));
                } else if (Rn2[0].charAt(Rn2[0].length - 2) !== "/") {
                  var AutoFilter = xlml_parsexmltag(Rn2[0]);
                  cursheet["!autofilter"] = { ref: rc_to_a1(AutoFilter.Range).replace(/\$/g, "") };
                  state.push([Rn2[3], true]);
                }
                break;
              case "name":
                break;
              case "datavalidation":
                if (Rn2[1] === "/") {
                  if ((tmp = state.pop())[0] !== Rn2[3])
                    throw new Error("Bad state: " + tmp.join("|"));
                } else {
                  if (Rn2[0].charAt(Rn2[0].length - 2) !== "/")
                    state.push([Rn2[3], true]);
                }
                break;
              case "pixelsperinch":
                break;
              case "componentoptions":
              case "documentproperties":
              case "customdocumentproperties":
              case "officedocumentsettings":
              case "pivottable":
              case "pivotcache":
              case "names":
              case "mapinfo":
              case "pagebreaks":
              case "querytable":
              case "sorting":
              case "schema":
              case "conditionalformatting":
              case "smarttagtype":
              case "smarttags":
              case "excelworkbook":
              case "workbookoptions":
              case "worksheetoptions":
                if (Rn2[1] === "/") {
                  if ((tmp = state.pop())[0] !== Rn2[3])
                    throw new Error("Bad state: " + tmp.join("|"));
                } else if (Rn2[0].charAt(Rn2[0].length - 2) !== "/")
                  state.push([Rn2[3], true]);
                break;
              case "null":
                break;
              default:
                if (state.length == 0 && Rn2[3] == "document")
                  return parse_fods(str, opts);
                if (state.length == 0 && Rn2[3] == "uof")
                  return parse_fods(str, opts);
                var seen = true;
                switch (state[state.length - 1][0]) {
                  case "officedocumentsettings":
                    switch (Rn2[3]) {
                      case "allowpng":
                        break;
                      case "removepersonalinformation":
                        break;
                      case "downloadcomponents":
                        break;
                      case "locationofcomponents":
                        break;
                      case "colors":
                        break;
                      case "color":
                        break;
                      case "index":
                        break;
                      case "rgb":
                        break;
                      case "targetscreensize":
                        break;
                      case "readonlyrecommended":
                        break;
                      default:
                        seen = false;
                    }
                    break;
                  case "componentoptions":
                    switch (Rn2[3]) {
                      case "toolbar":
                        break;
                      case "hideofficelogo":
                        break;
                      case "spreadsheetautofit":
                        break;
                      case "label":
                        break;
                      case "caption":
                        break;
                      case "maxheight":
                        break;
                      case "maxwidth":
                        break;
                      case "nextsheetnumber":
                        break;
                      default:
                        seen = false;
                    }
                    break;
                  case "excelworkbook":
                    switch (Rn2[3]) {
                      case "date1904":
                        Workbook.WBProps.date1904 = true;
                        break;
                      case "hidehorizontalscrollbar":
                        break;
                      case "hideverticalscrollbar":
                        break;
                      case "hideworkbooktabs":
                        break;
                      case "windowheight":
                        break;
                      case "windowwidth":
                        break;
                      case "windowtopx":
                        break;
                      case "windowtopy":
                        break;
                      case "tabratio":
                        break;
                      case "protectstructure":
                        break;
                      case "protectwindow":
                        break;
                      case "protectwindows":
                        break;
                      case "activesheet":
                        break;
                      case "displayinknotes":
                        break;
                      case "firstvisiblesheet":
                        break;
                      case "supbook":
                        break;
                      case "sheetname":
                        break;
                      case "sheetindex":
                        break;
                      case "sheetindexfirst":
                        break;
                      case "sheetindexlast":
                        break;
                      case "dll":
                        break;
                      case "acceptlabelsinformulas":
                        break;
                      case "donotsavelinkvalues":
                        break;
                      case "iteration":
                        break;
                      case "maxiterations":
                        break;
                      case "maxchange":
                        break;
                      case "path":
                        break;
                      case "xct":
                        break;
                      case "count":
                        break;
                      case "selectedsheets":
                        break;
                      case "calculation":
                        break;
                      case "uncalced":
                        break;
                      case "startupprompt":
                        break;
                      case "crn":
                        break;
                      case "externname":
                        break;
                      case "formula":
                        break;
                      case "colfirst":
                        break;
                      case "collast":
                        break;
                      case "wantadvise":
                        break;
                      case "boolean":
                        break;
                      case "error":
                        break;
                      case "text":
                        break;
                      case "ole":
                        break;
                      case "noautorecover":
                        break;
                      case "publishobjects":
                        break;
                      case "donotcalculatebeforesave":
                        break;
                      case "number":
                        break;
                      case "refmoder1c1":
                        break;
                      case "embedsavesmarttags":
                        break;
                      default:
                        seen = false;
                    }
                    break;
                  case "workbookoptions":
                    switch (Rn2[3]) {
                      case "owcversion":
                        break;
                      case "height":
                        break;
                      case "width":
                        break;
                      default:
                        seen = false;
                    }
                    break;
                  case "worksheetoptions":
                    switch (Rn2[3]) {
                      case "visible":
                        if (Rn2[0].slice(-2) === "/>") {
                        } else if (Rn2[1] === "/")
                          switch (str.slice(pidx, Rn2.index)) {
                            case "SheetHidden":
                              wsprops.Hidden = 1;
                              break;
                            case "SheetVeryHidden":
                              wsprops.Hidden = 2;
                              break;
                          }
                        else
                          pidx = Rn2.index + Rn2[0].length;
                        break;
                      case "header":
                        if (!cursheet["!margins"])
                          default_margins(cursheet["!margins"] = {}, "xlml");
                        if (!isNaN(+parsexmltag(Rn2[0]).Margin))
                          cursheet["!margins"].header = +parsexmltag(Rn2[0]).Margin;
                        break;
                      case "footer":
                        if (!cursheet["!margins"])
                          default_margins(cursheet["!margins"] = {}, "xlml");
                        if (!isNaN(+parsexmltag(Rn2[0]).Margin))
                          cursheet["!margins"].footer = +parsexmltag(Rn2[0]).Margin;
                        break;
                      case "pagemargins":
                        var pagemargins = parsexmltag(Rn2[0]);
                        if (!cursheet["!margins"])
                          default_margins(cursheet["!margins"] = {}, "xlml");
                        if (!isNaN(+pagemargins.Top))
                          cursheet["!margins"].top = +pagemargins.Top;
                        if (!isNaN(+pagemargins.Left))
                          cursheet["!margins"].left = +pagemargins.Left;
                        if (!isNaN(+pagemargins.Right))
                          cursheet["!margins"].right = +pagemargins.Right;
                        if (!isNaN(+pagemargins.Bottom))
                          cursheet["!margins"].bottom = +pagemargins.Bottom;
                        break;
                      case "displayrighttoleft":
                        if (!Workbook.Views)
                          Workbook.Views = [];
                        if (!Workbook.Views[0])
                          Workbook.Views[0] = {};
                        Workbook.Views[0].RTL = true;
                        break;
                      case "freezepanes":
                        break;
                      case "frozennosplit":
                        break;
                      case "splithorizontal":
                      case "splitvertical":
                        break;
                      case "donotdisplaygridlines":
                        break;
                      case "activerow":
                        break;
                      case "activecol":
                        break;
                      case "toprowbottompane":
                        break;
                      case "leftcolumnrightpane":
                        break;
                      case "unsynced":
                        break;
                      case "print":
                        break;
                      case "printerrors":
                        break;
                      case "panes":
                        break;
                      case "scale":
                        break;
                      case "pane":
                        break;
                      case "number":
                        break;
                      case "layout":
                        break;
                      case "pagesetup":
                        break;
                      case "selected":
                        break;
                      case "protectobjects":
                        break;
                      case "enableselection":
                        break;
                      case "protectscenarios":
                        break;
                      case "validprinterinfo":
                        break;
                      case "horizontalresolution":
                        break;
                      case "verticalresolution":
                        break;
                      case "numberofcopies":
                        break;
                      case "activepane":
                        break;
                      case "toprowvisible":
                        break;
                      case "leftcolumnvisible":
                        break;
                      case "fittopage":
                        break;
                      case "rangeselection":
                        break;
                      case "papersizeindex":
                        break;
                      case "pagelayoutzoom":
                        break;
                      case "pagebreakzoom":
                        break;
                      case "filteron":
                        break;
                      case "fitwidth":
                        break;
                      case "fitheight":
                        break;
                      case "commentslayout":
                        break;
                      case "zoom":
                        break;
                      case "lefttoright":
                        break;
                      case "gridlines":
                        break;
                      case "allowsort":
                        break;
                      case "allowfilter":
                        break;
                      case "allowinsertrows":
                        break;
                      case "allowdeleterows":
                        break;
                      case "allowinsertcols":
                        break;
                      case "allowdeletecols":
                        break;
                      case "allowinserthyperlinks":
                        break;
                      case "allowformatcells":
                        break;
                      case "allowsizecols":
                        break;
                      case "allowsizerows":
                        break;
                      case "nosummaryrowsbelowdetail":
                        if (!cursheet["!outline"])
                          cursheet["!outline"] = {};
                        cursheet["!outline"].above = true;
                        break;
                      case "tabcolorindex":
                        break;
                      case "donotdisplayheadings":
                        break;
                      case "showpagelayoutzoom":
                        break;
                      case "nosummarycolumnsrightdetail":
                        if (!cursheet["!outline"])
                          cursheet["!outline"] = {};
                        cursheet["!outline"].left = true;
                        break;
                      case "blackandwhite":
                        break;
                      case "donotdisplayzeros":
                        break;
                      case "displaypagebreak":
                        break;
                      case "rowcolheadings":
                        break;
                      case "donotdisplayoutline":
                        break;
                      case "noorientation":
                        break;
                      case "allowusepivottables":
                        break;
                      case "zeroheight":
                        break;
                      case "viewablerange":
                        break;
                      case "selection":
                        break;
                      case "protectcontents":
                        break;
                      default:
                        seen = false;
                    }
                    break;
                  case "pivottable":
                  case "pivotcache":
                    switch (Rn2[3]) {
                      case "immediateitemsondrop":
                        break;
                      case "showpagemultipleitemlabel":
                        break;
                      case "compactrowindent":
                        break;
                      case "location":
                        break;
                      case "pivotfield":
                        break;
                      case "orientation":
                        break;
                      case "layoutform":
                        break;
                      case "layoutsubtotallocation":
                        break;
                      case "layoutcompactrow":
                        break;
                      case "position":
                        break;
                      case "pivotitem":
                        break;
                      case "datatype":
                        break;
                      case "datafield":
                        break;
                      case "sourcename":
                        break;
                      case "parentfield":
                        break;
                      case "ptlineitems":
                        break;
                      case "ptlineitem":
                        break;
                      case "countofsameitems":
                        break;
                      case "item":
                        break;
                      case "itemtype":
                        break;
                      case "ptsource":
                        break;
                      case "cacheindex":
                        break;
                      case "consolidationreference":
                        break;
                      case "filename":
                        break;
                      case "reference":
                        break;
                      case "nocolumngrand":
                        break;
                      case "norowgrand":
                        break;
                      case "blanklineafteritems":
                        break;
                      case "hidden":
                        break;
                      case "subtotal":
                        break;
                      case "basefield":
                        break;
                      case "mapchilditems":
                        break;
                      case "function":
                        break;
                      case "refreshonfileopen":
                        break;
                      case "printsettitles":
                        break;
                      case "mergelabels":
                        break;
                      case "defaultversion":
                        break;
                      case "refreshname":
                        break;
                      case "refreshdate":
                        break;
                      case "refreshdatecopy":
                        break;
                      case "versionlastrefresh":
                        break;
                      case "versionlastupdate":
                        break;
                      case "versionupdateablemin":
                        break;
                      case "versionrefreshablemin":
                        break;
                      case "calculation":
                        break;
                      default:
                        seen = false;
                    }
                    break;
                  case "pagebreaks":
                    switch (Rn2[3]) {
                      case "colbreaks":
                        break;
                      case "colbreak":
                        break;
                      case "rowbreaks":
                        break;
                      case "rowbreak":
                        break;
                      case "colstart":
                        break;
                      case "colend":
                        break;
                      case "rowend":
                        break;
                      default:
                        seen = false;
                    }
                    break;
                  case "autofilter":
                    switch (Rn2[3]) {
                      case "autofiltercolumn":
                        break;
                      case "autofiltercondition":
                        break;
                      case "autofilterand":
                        break;
                      case "autofilteror":
                        break;
                      default:
                        seen = false;
                    }
                    break;
                  case "querytable":
                    switch (Rn2[3]) {
                      case "id":
                        break;
                      case "autoformatfont":
                        break;
                      case "autoformatpattern":
                        break;
                      case "querysource":
                        break;
                      case "querytype":
                        break;
                      case "enableredirections":
                        break;
                      case "refreshedinxl9":
                        break;
                      case "urlstring":
                        break;
                      case "htmltables":
                        break;
                      case "connection":
                        break;
                      case "commandtext":
                        break;
                      case "refreshinfo":
                        break;
                      case "notitles":
                        break;
                      case "nextid":
                        break;
                      case "columninfo":
                        break;
                      case "overwritecells":
                        break;
                      case "donotpromptforfile":
                        break;
                      case "textwizardsettings":
                        break;
                      case "source":
                        break;
                      case "number":
                        break;
                      case "decimal":
                        break;
                      case "thousandseparator":
                        break;
                      case "trailingminusnumbers":
                        break;
                      case "formatsettings":
                        break;
                      case "fieldtype":
                        break;
                      case "delimiters":
                        break;
                      case "tab":
                        break;
                      case "comma":
                        break;
                      case "autoformatname":
                        break;
                      case "versionlastedit":
                        break;
                      case "versionlastrefresh":
                        break;
                      default:
                        seen = false;
                    }
                    break;
                  case "datavalidation":
                    switch (Rn2[3]) {
                      case "range":
                        break;
                      case "type":
                        break;
                      case "min":
                        break;
                      case "max":
                        break;
                      case "sort":
                        break;
                      case "descending":
                        break;
                      case "order":
                        break;
                      case "casesensitive":
                        break;
                      case "value":
                        break;
                      case "errorstyle":
                        break;
                      case "errormessage":
                        break;
                      case "errortitle":
                        break;
                      case "inputmessage":
                        break;
                      case "inputtitle":
                        break;
                      case "combohide":
                        break;
                      case "inputhide":
                        break;
                      case "condition":
                        break;
                      case "qualifier":
                        break;
                      case "useblank":
                        break;
                      case "value1":
                        break;
                      case "value2":
                        break;
                      case "format":
                        break;
                      case "cellrangelist":
                        break;
                      default:
                        seen = false;
                    }
                    break;
                  case "sorting":
                  case "conditionalformatting":
                    switch (Rn2[3]) {
                      case "range":
                        break;
                      case "type":
                        break;
                      case "min":
                        break;
                      case "max":
                        break;
                      case "sort":
                        break;
                      case "descending":
                        break;
                      case "order":
                        break;
                      case "casesensitive":
                        break;
                      case "value":
                        break;
                      case "errorstyle":
                        break;
                      case "errormessage":
                        break;
                      case "errortitle":
                        break;
                      case "cellrangelist":
                        break;
                      case "inputmessage":
                        break;
                      case "inputtitle":
                        break;
                      case "combohide":
                        break;
                      case "inputhide":
                        break;
                      case "condition":
                        break;
                      case "qualifier":
                        break;
                      case "useblank":
                        break;
                      case "value1":
                        break;
                      case "value2":
                        break;
                      case "format":
                        break;
                      default:
                        seen = false;
                    }
                    break;
                  case "mapinfo":
                  case "schema":
                  case "data":
                    switch (Rn2[3]) {
                      case "map":
                        break;
                      case "entry":
                        break;
                      case "range":
                        break;
                      case "xpath":
                        break;
                      case "field":
                        break;
                      case "xsdtype":
                        break;
                      case "filteron":
                        break;
                      case "aggregate":
                        break;
                      case "elementtype":
                        break;
                      case "attributetype":
                        break;
                      case "schema":
                      case "element":
                      case "complextype":
                      case "datatype":
                      case "all":
                      case "attribute":
                      case "extends":
                        break;
                      case "row":
                        break;
                      default:
                        seen = false;
                    }
                    break;
                  case "smarttags":
                    break;
                  default:
                    seen = false;
                    break;
                }
                if (seen)
                  break;
                if (Rn2[3].match(/!\[CDATA/))
                  break;
                if (!state[state.length - 1][1])
                  throw "Unrecognized tag: " + Rn2[3] + "|" + state.join("|");
                if (state[state.length - 1][0] === "customdocumentproperties") {
                  if (Rn2[0].slice(-2) === "/>")
                    break;
                  else if (Rn2[1] === "/")
                    xlml_set_custprop(Custprops, raw_Rn3, cp, str.slice(pidx, Rn2.index));
                  else {
                    cp = Rn2;
                    pidx = Rn2.index + Rn2[0].length;
                  }
                  break;
                }
                if (opts.WTF)
                  throw "Unrecognized tag: " + Rn2[3] + "|" + state.join("|");
            }
          var out = {};
          if (!opts.bookSheets && !opts.bookProps)
            out.Sheets = sheets;
          out.SheetNames = sheetnames;
          out.Workbook = Workbook;
          out.SSF = dup(table_fmt);
          out.Props = Props;
          out.Custprops = Custprops;
          out.bookType = "xlml";
          return out;
        }
        function parse_xlml(data, opts) {
          fix_read_opts(opts = opts || {});
          switch (opts.type || "base64") {
            case "base64":
              return parse_xlml_xml(Base64_decode(data), opts);
            case "binary":
            case "buffer":
            case "file":
              return parse_xlml_xml(data, opts);
            case "array":
              return parse_xlml_xml(a2s(data), opts);
          }
        }
        function write_props_xlml(wb, opts) {
          var o6 = [];
          if (wb.Props)
            o6.push(xlml_write_docprops(wb.Props, opts));
          if (wb.Custprops)
            o6.push(xlml_write_custprops(wb.Props, wb.Custprops, opts));
          return o6.join("");
        }
        function write_wb_xlml(wb) {
          if ((((wb || {}).Workbook || {}).WBProps || {}).date1904)
            return '<ExcelWorkbook xmlns="urn:schemas-microsoft-com:office:excel"><Date1904/></ExcelWorkbook>';
          return "";
        }
        function write_sty_xlml(wb, opts) {
          var styles = ['<Style ss:ID="Default" ss:Name="Normal"><NumberFormat/></Style>'];
          opts.cellXfs.forEach(function(xf, id) {
            var payload = [];
            payload.push(writextag("NumberFormat", null, { "ss:Format": escapexml(table_fmt[xf.numFmtId]) }));
            var o6 = { "ss:ID": "s" + (21 + id) };
            styles.push(writextag("Style", payload.join(""), o6));
          });
          return writextag("Styles", styles.join(""));
        }
        function write_name_xlml(n6) {
          return writextag("NamedRange", null, { "ss:Name": n6.Name.slice(0, 6) == "_xlnm." ? n6.Name.slice(6) : n6.Name, "ss:RefersTo": "=" + a1_to_rc(n6.Ref, { r: 0, c: 0 }) });
        }
        function write_names_xlml(wb) {
          if (!((wb || {}).Workbook || {}).Names)
            return "";
          var names2 = wb.Workbook.Names;
          var out = [];
          for (var i6 = 0; i6 < names2.length; ++i6) {
            var n6 = names2[i6];
            if (n6.Sheet != null)
              continue;
            if (n6.Name.match(/^_xlfn\./))
              continue;
            out.push(write_name_xlml(n6));
          }
          return writextag("Names", out.join(""));
        }
        function write_ws_xlml_names(ws, opts, idx, wb) {
          if (!ws)
            return "";
          if (!((wb || {}).Workbook || {}).Names)
            return "";
          var names2 = wb.Workbook.Names;
          var out = [];
          for (var i6 = 0; i6 < names2.length; ++i6) {
            var n6 = names2[i6];
            if (n6.Sheet != idx)
              continue;
            if (n6.Name.match(/^_xlfn\./))
              continue;
            out.push(write_name_xlml(n6));
          }
          return out.join("");
        }
        function write_ws_xlml_wsopts(ws, opts, idx, wb) {
          if (!ws)
            return "";
          var o6 = [];
          if (ws["!margins"]) {
            o6.push("<PageSetup>");
            if (ws["!margins"].header)
              o6.push(writextag("Header", null, { "x:Margin": ws["!margins"].header }));
            if (ws["!margins"].footer)
              o6.push(writextag("Footer", null, { "x:Margin": ws["!margins"].footer }));
            o6.push(writextag("PageMargins", null, {
              "x:Bottom": ws["!margins"].bottom || "0.75",
              "x:Left": ws["!margins"].left || "0.7",
              "x:Right": ws["!margins"].right || "0.7",
              "x:Top": ws["!margins"].top || "0.75"
            }));
            o6.push("</PageSetup>");
          }
          if (wb && wb.Workbook && wb.Workbook.Sheets && wb.Workbook.Sheets[idx]) {
            if (wb.Workbook.Sheets[idx].Hidden)
              o6.push(writextag("Visible", wb.Workbook.Sheets[idx].Hidden == 1 ? "SheetHidden" : "SheetVeryHidden", {}));
            else {
              for (var i6 = 0; i6 < idx; ++i6)
                if (wb.Workbook.Sheets[i6] && !wb.Workbook.Sheets[i6].Hidden)
                  break;
              if (i6 == idx)
                o6.push("<Selected/>");
            }
          }
          if (((((wb || {}).Workbook || {}).Views || [])[0] || {}).RTL)
            o6.push("<DisplayRightToLeft/>");
          if (ws["!protect"]) {
            o6.push(writetag("ProtectContents", "True"));
            if (ws["!protect"].objects)
              o6.push(writetag("ProtectObjects", "True"));
            if (ws["!protect"].scenarios)
              o6.push(writetag("ProtectScenarios", "True"));
            if (ws["!protect"].selectLockedCells != null && !ws["!protect"].selectLockedCells)
              o6.push(writetag("EnableSelection", "NoSelection"));
            else if (ws["!protect"].selectUnlockedCells != null && !ws["!protect"].selectUnlockedCells)
              o6.push(writetag("EnableSelection", "UnlockedCells"));
            [
              ["formatCells", "AllowFormatCells"],
              ["formatColumns", "AllowSizeCols"],
              ["formatRows", "AllowSizeRows"],
              ["insertColumns", "AllowInsertCols"],
              ["insertRows", "AllowInsertRows"],
              ["insertHyperlinks", "AllowInsertHyperlinks"],
              ["deleteColumns", "AllowDeleteCols"],
              ["deleteRows", "AllowDeleteRows"],
              ["sort", "AllowSort"],
              ["autoFilter", "AllowFilter"],
              ["pivotTables", "AllowUsePivotTables"]
            ].forEach(function(x3) {
              if (ws["!protect"][x3[0]])
                o6.push("<" + x3[1] + "/>");
            });
          }
          if (o6.length == 0)
            return "";
          return writextag("WorksheetOptions", o6.join(""), { xmlns: XLMLNS.x });
        }
        function write_ws_xlml_comment(comments) {
          return comments.map(function(c8) {
            var t5 = xlml_unfixstr(c8.t || "");
            var d2 = writextag("ss:Data", t5, { "xmlns": "http://www.w3.org/TR/REC-html40" });
            var p2 = {};
            if (c8.a)
              p2["ss:Author"] = c8.a;
            if (!comments.hidden)
              p2["ss:ShowAlways"] = "1";
            return writextag("Comment", d2, p2);
          }).join("");
        }
        function write_ws_xlml_cell(cell, ref, ws, opts, idx, wb, addr) {
          if (!cell || cell.v == void 0 && cell.f == void 0)
            return "";
          var attr = {};
          if (cell.f)
            attr["ss:Formula"] = "=" + escapexml(a1_to_rc(cell.f, addr));
          if (cell.F && cell.F.slice(0, ref.length) == ref) {
            var end = decode_cell(cell.F.slice(ref.length + 1));
            attr["ss:ArrayRange"] = "RC:R" + (end.r == addr.r ? "" : "[" + (end.r - addr.r) + "]") + "C" + (end.c == addr.c ? "" : "[" + (end.c - addr.c) + "]");
          }
          if (cell.l && cell.l.Target) {
            attr["ss:HRef"] = escapexml(cell.l.Target);
            if (cell.l.Tooltip)
              attr["x:HRefScreenTip"] = escapexml(cell.l.Tooltip);
          }
          if (ws["!merges"]) {
            var marr = ws["!merges"];
            for (var mi = 0; mi != marr.length; ++mi) {
              if (marr[mi].s.c != addr.c || marr[mi].s.r != addr.r)
                continue;
              if (marr[mi].e.c > marr[mi].s.c)
                attr["ss:MergeAcross"] = marr[mi].e.c - marr[mi].s.c;
              if (marr[mi].e.r > marr[mi].s.r)
                attr["ss:MergeDown"] = marr[mi].e.r - marr[mi].s.r;
            }
          }
          var t5 = "", p2 = "";
          switch (cell.t) {
            case "z":
              if (!opts.sheetStubs)
                return "";
              break;
            case "n":
              {
                if (!isFinite(cell.v)) {
                  t5 = "Error";
                  p2 = BErr[isNaN(cell.v) ? 36 : 7];
                } else {
                  t5 = "Number";
                  p2 = String(cell.v);
                }
              }
              break;
            case "b":
              t5 = "Boolean";
              p2 = cell.v ? "1" : "0";
              break;
            case "e":
              t5 = "Error";
              p2 = BErr[cell.v];
              break;
            case "d":
              t5 = "DateTime";
              p2 = new Date(cell.v).toISOString();
              if (cell.z == null)
                cell.z = cell.z || table_fmt[14];
              break;
            case "s":
              t5 = "String";
              p2 = escapexlml(cell.v || "");
              break;
          }
          var os = get_cell_style(opts.cellXfs, cell, opts);
          attr["ss:StyleID"] = "s" + (21 + os);
          attr["ss:Index"] = addr.c + 1;
          var _v = cell.v != null ? p2 : "";
          var m4 = cell.t == "z" ? "" : '<Data ss:Type="' + t5 + '">' + _v + "</Data>";
          if ((cell.c || []).length > 0)
            m4 += write_ws_xlml_comment(cell.c);
          return writextag("Cell", m4, attr);
        }
        function write_ws_xlml_row(R2, row) {
          var o6 = '<Row ss:Index="' + (R2 + 1) + '"';
          if (row) {
            if (row.hpt && !row.hpx)
              row.hpx = pt2px(row.hpt);
            if (row.hpx)
              o6 += ' ss:AutoFitHeight="0" ss:Height="' + row.hpx + '"';
            if (row.hidden)
              o6 += ' ss:Hidden="1"';
          }
          return o6 + ">";
        }
        function write_ws_xlml_table(ws, opts, idx, wb) {
          if (!ws["!ref"])
            return "";
          var range = safe_decode_range(ws["!ref"]);
          var marr = ws["!merges"] || [], mi = 0;
          var o6 = [];
          if (ws["!cols"])
            ws["!cols"].forEach(function(n6, i6) {
              process_col(n6);
              var w3 = !!n6.width;
              var p2 = col_obj_w(i6, n6);
              var k2 = { "ss:Index": i6 + 1 };
              if (w3)
                k2["ss:Width"] = width2px(p2.width);
              if (n6.hidden)
                k2["ss:Hidden"] = "1";
              o6.push(writextag("Column", null, k2));
            });
          var dense = ws["!data"] != null;
          var addr = { r: 0, c: 0 };
          for (var R2 = range.s.r; R2 <= range.e.r; ++R2) {
            var row = [write_ws_xlml_row(R2, (ws["!rows"] || [])[R2])];
            addr.r = R2;
            for (var C6 = range.s.c; C6 <= range.e.c; ++C6) {
              addr.c = C6;
              var skip2 = false;
              for (mi = 0; mi != marr.length; ++mi) {
                if (marr[mi].s.c > C6)
                  continue;
                if (marr[mi].s.r > R2)
                  continue;
                if (marr[mi].e.c < C6)
                  continue;
                if (marr[mi].e.r < R2)
                  continue;
                if (marr[mi].s.c != C6 || marr[mi].s.r != R2)
                  skip2 = true;
                break;
              }
              if (skip2)
                continue;
              var ref = encode_col(C6) + encode_row(R2), cell = dense ? (ws["!data"][R2] || [])[C6] : ws[ref];
              row.push(write_ws_xlml_cell(cell, ref, ws, opts, idx, wb, addr));
            }
            row.push("</Row>");
            if (row.length > 2)
              o6.push(row.join(""));
          }
          return o6.join("");
        }
        function write_ws_xlml(idx, opts, wb) {
          var o6 = [];
          var s3 = wb.SheetNames[idx];
          var ws = wb.Sheets[s3];
          var t5 = ws ? write_ws_xlml_names(ws, opts, idx, wb) : "";
          if (t5.length > 0)
            o6.push("<Names>" + t5 + "</Names>");
          t5 = ws ? write_ws_xlml_table(ws, opts, idx, wb) : "";
          if (t5.length > 0)
            o6.push("<Table>" + t5 + "</Table>");
          o6.push(write_ws_xlml_wsopts(ws, opts, idx, wb));
          if (ws && ws["!autofilter"])
            o6.push('<AutoFilter x:Range="' + a1_to_rc(fix_range(ws["!autofilter"].ref), { r: 0, c: 0 }) + '" xmlns="urn:schemas-microsoft-com:office:excel"></AutoFilter>');
          return o6.join("");
        }
        function write_xlml(wb, opts) {
          if (!opts)
            opts = {};
          if (!wb.SSF)
            wb.SSF = dup(table_fmt);
          if (wb.SSF) {
            make_ssf();
            SSF_load_table(wb.SSF);
            opts.revssf = evert_num(wb.SSF);
            opts.revssf[wb.SSF[65535]] = 0;
            opts.ssf = wb.SSF;
            opts.cellXfs = [];
            get_cell_style(opts.cellXfs, {}, { revssf: { "General": 0 } });
          }
          var d2 = [];
          d2.push(write_props_xlml(wb, opts));
          d2.push(write_wb_xlml(wb, opts));
          d2.push("");
          d2.push(write_names_xlml(wb, opts));
          for (var i6 = 0; i6 < wb.SheetNames.length; ++i6)
            d2.push(writextag("Worksheet", write_ws_xlml(i6, opts, wb), { "ss:Name": escapexml(wb.SheetNames[i6]) }));
          d2[2] = write_sty_xlml(wb, opts);
          return XML_HEADER + writextag("Workbook", d2.join(""), {
            "xmlns": XLMLNS.ss,
            "xmlns:o": XLMLNS.o,
            "xmlns:x": XLMLNS.x,
            "xmlns:ss": XLMLNS.ss,
            "xmlns:dt": XLMLNS.dt,
            "xmlns:html": XLMLNS.html
          });
        }
        function parse_compobj(obj) {
          var v4 = {};
          var o6 = obj.content;
          o6.l = 28;
          v4.AnsiUserType = o6.read_shift(0, "lpstr-ansi");
          v4.AnsiClipboardFormat = parse_ClipboardFormatOrAnsiString(o6);
          if (o6.length - o6.l <= 4)
            return v4;
          var m4 = o6.read_shift(4);
          if (m4 == 0 || m4 > 40)
            return v4;
          o6.l -= 4;
          v4.Reserved1 = o6.read_shift(0, "lpstr-ansi");
          if (o6.length - o6.l <= 4)
            return v4;
          m4 = o6.read_shift(4);
          if (m4 !== 1907505652)
            return v4;
          v4.UnicodeClipboardFormat = parse_ClipboardFormatOrUnicodeString(o6);
          m4 = o6.read_shift(4);
          if (m4 == 0 || m4 > 40)
            return v4;
          o6.l -= 4;
          v4.Reserved2 = o6.read_shift(0, "lpwstr");
        }
        var CONTINUE_RT = [60, 1084, 2066, 2165, 2175];
        function slurp(RecordType, R2, blob, length, opts) {
          var l5 = length;
          var bufs = [];
          var d2 = blob.slice(blob.l, blob.l + l5);
          if (opts && opts.enc && opts.enc.insitu && d2.length > 0)
            switch (RecordType) {
              case 9:
              case 521:
              case 1033:
              case 2057:
              case 47:
              case 405:
              case 225:
              case 406:
              case 312:
              case 404:
              case 10:
                break;
              case 133:
                break;
              default:
                opts.enc.insitu(d2);
            }
          bufs.push(d2);
          blob.l += l5;
          var nextrt = __readUInt16LE(blob, blob.l), next = XLSRecordEnum[nextrt];
          var start2 = 0;
          while (next != null && CONTINUE_RT.indexOf(nextrt) > -1) {
            l5 = __readUInt16LE(blob, blob.l + 2);
            start2 = blob.l + 4;
            if (nextrt == 2066)
              start2 += 4;
            else if (nextrt == 2165 || nextrt == 2175) {
              start2 += 12;
            }
            d2 = blob.slice(start2, blob.l + 4 + l5);
            bufs.push(d2);
            blob.l += 4 + l5;
            next = XLSRecordEnum[nextrt = __readUInt16LE(blob, blob.l)];
          }
          var b3 = bconcat(bufs);
          prep_blob(b3, 0);
          var ll = 0;
          b3.lens = [];
          for (var j3 = 0; j3 < bufs.length; ++j3) {
            b3.lens.push(ll);
            ll += bufs[j3].length;
          }
          if (b3.length < length)
            throw "XLS Record 0x" + RecordType.toString(16) + " Truncated: " + b3.length + " < " + length;
          return R2.f(b3, b3.length, opts);
        }
        function safe_format_xf(p2, opts, date1904) {
          if (p2.t === "z")
            return;
          if (!p2.XF)
            return;
          var fmtid = 0;
          try {
            fmtid = p2.z || p2.XF.numFmtId || 0;
            if (opts.cellNF && p2.z == null)
              p2.z = table_fmt[fmtid];
          } catch (e7) {
            if (opts.WTF)
              throw e7;
          }
          if (!opts || opts.cellText !== false)
            try {
              if (p2.t === "e") {
                p2.w = p2.w || BErr[p2.v];
              } else if (fmtid === 0 || fmtid == "General") {
                if (p2.t === "n") {
                  if ((p2.v | 0) === p2.v)
                    p2.w = p2.v.toString(10);
                  else
                    p2.w = SSF_general_num(p2.v);
                } else
                  p2.w = SSF_general(p2.v);
              } else
                p2.w = SSF_format(fmtid, p2.v, { date1904: !!date1904, dateNF: opts && opts.dateNF });
            } catch (e7) {
              if (opts.WTF)
                throw e7;
            }
          if (opts.cellDates && fmtid && p2.t == "n" && fmt_is_date(table_fmt[fmtid] || String(fmtid))) {
            var _d = SSF_parse_date_code(p2.v + (date1904 ? 1462 : 0));
            if (_d) {
              p2.t = "d";
              p2.v = new Date(Date.UTC(_d.y, _d.m - 1, _d.d, _d.H, _d.M, _d.S, _d.u));
            }
          }
        }
        function make_cell(val2, ixfe, t5) {
          return { v: val2, ixfe, t: t5 };
        }
        function parse_workbook(blob, options) {
          var wb = { opts: {} };
          var Sheets = {};
          if (DENSE != null && options.dense == null)
            options.dense = DENSE;
          var out = {};
          if (options.dense)
            out["!data"] = [];
          var Directory = {};
          var range = {};
          var last_formula = null;
          var sst = [];
          var cur_sheet = "";
          var Preamble = {};
          var lastcell, last_cell = "", cc2, cmnt, rngC, rngR;
          var sharedf = {};
          var arrayf = [];
          var temp_val;
          var country;
          var XFs = [];
          var palette = [];
          var Workbook = { Sheets: [], WBProps: { date1904: false }, Views: [{}] }, wsprops = {};
          var biff4w = false;
          var get_rgb = function getrgb(icv) {
            if (icv < 8)
              return XLSIcv[icv];
            if (icv < 64)
              return palette[icv - 8] || XLSIcv[icv];
            return XLSIcv[icv];
          };
          var process_cell_style = function pcs(line, options2) {
            var xfd = line.XF.data;
            if (!xfd || !xfd.patternType || !options2 || !options2.cellStyles)
              return;
            line.s = {};
            line.s.patternType = xfd.patternType;
            var t5;
            if (t5 = rgb2Hex(get_rgb(xfd.icvFore))) {
              line.s.fgColor = { rgb: t5 };
            }
            if (t5 = rgb2Hex(get_rgb(xfd.icvBack))) {
              line.s.bgColor = { rgb: t5 };
            }
          };
          var addcell = function addcell2(cell, line, options2) {
            if (!biff4w && file_depth > 1)
              return;
            if (options2.sheetRows && cell.r >= options2.sheetRows)
              return;
            if (options2.cellStyles && line.XF && line.XF.data)
              process_cell_style(line, options2);
            delete line.ixfe;
            delete line.XF;
            lastcell = cell;
            last_cell = encode_cell(cell);
            if (!range || !range.s || !range.e)
              range = { s: { r: 0, c: 0 }, e: { r: 0, c: 0 } };
            if (cell.r < range.s.r)
              range.s.r = cell.r;
            if (cell.c < range.s.c)
              range.s.c = cell.c;
            if (cell.r + 1 > range.e.r)
              range.e.r = cell.r + 1;
            if (cell.c + 1 > range.e.c)
              range.e.c = cell.c + 1;
            if (options2.cellFormula && line.f) {
              for (var afi = 0; afi < arrayf.length; ++afi) {
                if (arrayf[afi][0].s.c > cell.c || arrayf[afi][0].s.r > cell.r)
                  continue;
                if (arrayf[afi][0].e.c < cell.c || arrayf[afi][0].e.r < cell.r)
                  continue;
                line.F = encode_range(arrayf[afi][0]);
                if (arrayf[afi][0].s.c != cell.c || arrayf[afi][0].s.r != cell.r)
                  delete line.f;
                if (line.f)
                  line.f = "" + stringify_formula(arrayf[afi][1], range, cell, supbooks, opts);
                break;
              }
            }
            {
              if (options2.dense) {
                if (!out["!data"][cell.r])
                  out["!data"][cell.r] = [];
                out["!data"][cell.r][cell.c] = line;
              } else
                out[last_cell] = line;
            }
          };
          var opts = {
            enc: false,
            sbcch: 0,
            snames: [],
            sharedf,
            arrayf,
            rrtabid: [],
            lastuser: "",
            biff: 8,
            codepage: 0,
            winlocked: 0,
            cellStyles: !!options && !!options.cellStyles,
            WTF: !!options && !!options.wtf
          };
          if (options.password)
            opts.password = options.password;
          var themes;
          var merges = [];
          var objects = [];
          var colinfo = [], rowinfo = [];
          var seencol = false;
          var supbooks = [];
          supbooks.SheetNames = opts.snames;
          supbooks.sharedf = opts.sharedf;
          supbooks.arrayf = opts.arrayf;
          supbooks.names = [];
          supbooks.XTI = [];
          var last_RT = 0;
          var file_depth = 0;
          var BIFF2Fmt = 0, BIFF2FmtTable = [];
          var FilterDatabases = [];
          var last_lbl;
          opts.codepage = 1200;
          set_cp(1200);
          var seen_codepage = false;
          while (blob.l < blob.length - 1) {
            var s3 = blob.l;
            var RecordType = blob.read_shift(2);
            if (RecordType === 0 && last_RT === 10)
              break;
            var length = blob.l === blob.length ? 0 : blob.read_shift(2);
            var R2 = XLSRecordEnum[RecordType];
            if (file_depth == 0 && [9, 521, 1033, 2057].indexOf(RecordType) == -1)
              break;
            if (R2 && R2.f) {
              if (options.bookSheets) {
                if (last_RT === 133 && RecordType !== 133)
                  break;
              }
              last_RT = RecordType;
              if (R2.r === 2 || R2.r == 12) {
                var rt2 = blob.read_shift(2);
                length -= 2;
                if (!opts.enc && rt2 !== RecordType && ((rt2 & 255) << 8 | rt2 >> 8) !== RecordType)
                  throw new Error("rt mismatch: " + rt2 + "!=" + RecordType);
                if (R2.r == 12) {
                  blob.l += 10;
                  length -= 10;
                }
              }
              var val2 = {};
              if (RecordType === 10)
                val2 = R2.f(blob, length, opts);
              else
                val2 = slurp(RecordType, R2, blob, length, opts);
              if (file_depth == 0 && [9, 521, 1033, 2057].indexOf(last_RT) === -1)
                continue;
              switch (RecordType) {
                case 34:
                  wb.opts.Date1904 = Workbook.WBProps.date1904 = val2;
                  break;
                case 134:
                  wb.opts.WriteProtect = true;
                  break;
                case 47:
                  if (!opts.enc)
                    blob.l = 0;
                  opts.enc = val2;
                  if (!options.password)
                    throw new Error("File is password-protected");
                  if (val2.valid == null)
                    throw new Error("Encryption scheme unsupported");
                  if (!val2.valid)
                    throw new Error("Password is incorrect");
                  break;
                case 92:
                  opts.lastuser = val2;
                  break;
                case 66:
                  var cpval = Number(val2);
                  switch (cpval) {
                    case 21010:
                      cpval = 1200;
                      break;
                    case 32768:
                      cpval = 1e4;
                      break;
                    case 32769:
                      cpval = 1252;
                      break;
                  }
                  set_cp(opts.codepage = cpval);
                  seen_codepage = true;
                  break;
                case 317:
                  opts.rrtabid = val2;
                  break;
                case 25:
                  opts.winlocked = val2;
                  break;
                case 439:
                  wb.opts["RefreshAll"] = val2;
                  break;
                case 12:
                  wb.opts["CalcCount"] = val2;
                  break;
                case 16:
                  wb.opts["CalcDelta"] = val2;
                  break;
                case 17:
                  wb.opts["CalcIter"] = val2;
                  break;
                case 13:
                  wb.opts["CalcMode"] = val2;
                  break;
                case 14:
                  wb.opts["CalcPrecision"] = val2;
                  break;
                case 95:
                  wb.opts["CalcSaveRecalc"] = val2;
                  break;
                case 15:
                  opts.CalcRefMode = val2;
                  break;
                case 2211:
                  wb.opts.FullCalc = val2;
                  break;
                case 129:
                  if (val2.fDialog)
                    out["!type"] = "dialog";
                  if (!val2.fBelow)
                    (out["!outline"] || (out["!outline"] = {})).above = true;
                  if (!val2.fRight)
                    (out["!outline"] || (out["!outline"] = {})).left = true;
                  break;
                case 67:
                case 579:
                case 1091:
                case 224:
                  XFs.push(val2);
                  break;
                case 430:
                  supbooks.push([val2]);
                  supbooks[supbooks.length - 1].XTI = [];
                  break;
                case 35:
                case 547:
                  supbooks[supbooks.length - 1].push(val2);
                  break;
                case 24:
                case 536:
                  last_lbl = {
                    Name: val2.Name,
                    Ref: stringify_formula(val2.rgce, range, null, supbooks, opts)
                  };
                  if (val2.itab > 0)
                    last_lbl.Sheet = val2.itab - 1;
                  supbooks.names.push(last_lbl);
                  if (!supbooks[0]) {
                    supbooks[0] = [];
                    supbooks[0].XTI = [];
                  }
                  supbooks[supbooks.length - 1].push(val2);
                  if (val2.Name == "_xlnm._FilterDatabase" && val2.itab > 0) {
                    if (val2.rgce && val2.rgce[0] && val2.rgce[0][0] && val2.rgce[0][0][0] == "PtgArea3d")
                      FilterDatabases[val2.itab - 1] = { ref: encode_range(val2.rgce[0][0][1][2]) };
                  }
                  break;
                case 22:
                  opts.ExternCount = val2;
                  break;
                case 23:
                  if (supbooks.length == 0) {
                    supbooks[0] = [];
                    supbooks[0].XTI = [];
                  }
                  supbooks[supbooks.length - 1].XTI = supbooks[supbooks.length - 1].XTI.concat(val2);
                  supbooks.XTI = supbooks.XTI.concat(val2);
                  break;
                case 2196:
                  if (opts.biff < 8)
                    break;
                  if (last_lbl != null)
                    last_lbl.Comment = val2[1];
                  break;
                case 18:
                  out["!protect"] = val2;
                  break;
                case 19:
                  if (val2 !== 0 && opts.WTF)
                    console.error("Password verifier: " + val2);
                  break;
                case 133:
                  {
                    Directory[opts.biff == 4 ? opts.snames.length : val2.pos] = val2;
                    opts.snames.push(val2.name);
                  }
                  break;
                case 10:
                  {
                    if (--file_depth ? !biff4w : biff4w)
                      break;
                    if (range.e) {
                      if (range.e.r > 0 && range.e.c > 0) {
                        range.e.r--;
                        range.e.c--;
                        out["!ref"] = encode_range(range);
                        if (options.sheetRows && options.sheetRows <= range.e.r) {
                          var tmpri = range.e.r;
                          range.e.r = options.sheetRows - 1;
                          out["!fullref"] = out["!ref"];
                          out["!ref"] = encode_range(range);
                          range.e.r = tmpri;
                        }
                        range.e.r++;
                        range.e.c++;
                      }
                      if (merges.length > 0)
                        out["!merges"] = merges;
                      if (objects.length > 0)
                        out["!objects"] = objects;
                      if (colinfo.length > 0)
                        out["!cols"] = colinfo;
                      if (rowinfo.length > 0)
                        out["!rows"] = rowinfo;
                      Workbook.Sheets.push(wsprops);
                    }
                    if (cur_sheet === "")
                      Preamble = out;
                    else
                      Sheets[cur_sheet] = out;
                    out = {};
                    if (options.dense)
                      out["!data"] = [];
                  }
                  break;
                case 9:
                case 521:
                case 1033:
                case 2057:
                  {
                    if (opts.biff === 8)
                      opts.biff = {
                        9: 2,
                        521: 3,
                        1033: 4
                      }[RecordType] || {
                        512: 2,
                        768: 3,
                        1024: 4,
                        1280: 5,
                        1536: 8,
                        2: 2,
                        7: 2
                      }[val2.BIFFVer] || 8;
                    opts.biffguess = val2.BIFFVer == 0;
                    if (val2.BIFFVer == 0 && val2.dt == 4096) {
                      opts.biff = 5;
                      seen_codepage = true;
                      set_cp(opts.codepage = 28591);
                    }
                    if (opts.biff == 4 && val2.dt & 256)
                      biff4w = true;
                    if (opts.biff == 8 && val2.BIFFVer == 0 && val2.dt == 16)
                      opts.biff = 2;
                    if (file_depth++ && !biff4w)
                      break;
                    out = {};
                    if (options.dense)
                      out["!data"] = [];
                    if (opts.biff < 8 && !seen_codepage) {
                      seen_codepage = true;
                      set_cp(opts.codepage = options.codepage || 1252);
                    }
                    if (opts.biff == 4 && biff4w) {
                      cur_sheet = (Directory[opts.snames.indexOf(cur_sheet) + 1] || { name: "" }).name;
                    } else if (opts.biff < 5 || val2.BIFFVer == 0 && val2.dt == 4096) {
                      if (cur_sheet === "")
                        cur_sheet = "Sheet1";
                      range = { s: { r: 0, c: 0 }, e: { r: 0, c: 0 } };
                      var fakebs8 = { pos: blob.l - length, name: cur_sheet };
                      Directory[fakebs8.pos] = fakebs8;
                      opts.snames.push(cur_sheet);
                    } else
                      cur_sheet = (Directory[s3] || { name: "" }).name;
                    if (val2.dt == 32)
                      out["!type"] = "chart";
                    if (val2.dt == 64)
                      out["!type"] = "macro";
                    merges = [];
                    objects = [];
                    opts.arrayf = arrayf = [];
                    colinfo = [];
                    rowinfo = [];
                    seencol = false;
                    wsprops = { Hidden: (Directory[s3] || { hs: 0 }).hs, name: cur_sheet };
                  }
                  break;
                case 515:
                case 3:
                case 2:
                  {
                    if (out["!type"] == "chart") {
                      if (options.dense ? (out["!data"][val2.r] || [])[val2.c] : out[encode_col(val2.c) + encode_row(val2.r)])
                        ++val2.c;
                    }
                    temp_val = { ixfe: val2.ixfe, XF: XFs[val2.ixfe] || {}, v: val2.val, t: "n" };
                    if (BIFF2Fmt > 0)
                      temp_val.z = temp_val.XF && temp_val.XF.numFmtId && BIFF2FmtTable[temp_val.XF.numFmtId] || BIFF2FmtTable[temp_val.ixfe >> 8 & 63];
                    safe_format_xf(temp_val, options, wb.opts.Date1904);
                    addcell({ c: val2.c, r: val2.r }, temp_val, options);
                  }
                  break;
                case 5:
                case 517:
                  {
                    temp_val = { ixfe: val2.ixfe, XF: XFs[val2.ixfe], v: val2.val, t: val2.t };
                    if (BIFF2Fmt > 0)
                      temp_val.z = temp_val.XF && temp_val.XF.numFmtId && BIFF2FmtTable[temp_val.XF.numFmtId] || BIFF2FmtTable[temp_val.ixfe >> 8 & 63];
                    safe_format_xf(temp_val, options, wb.opts.Date1904);
                    addcell({ c: val2.c, r: val2.r }, temp_val, options);
                  }
                  break;
                case 638:
                  {
                    temp_val = { ixfe: val2.ixfe, XF: XFs[val2.ixfe], v: val2.rknum, t: "n" };
                    if (BIFF2Fmt > 0)
                      temp_val.z = temp_val.XF && temp_val.XF.numFmtId && BIFF2FmtTable[temp_val.XF.numFmtId] || BIFF2FmtTable[temp_val.ixfe >> 8 & 63];
                    safe_format_xf(temp_val, options, wb.opts.Date1904);
                    addcell({ c: val2.c, r: val2.r }, temp_val, options);
                  }
                  break;
                case 189:
                  {
                    for (var j3 = val2.c; j3 <= val2.C; ++j3) {
                      var ixfe = val2.rkrec[j3 - val2.c][0];
                      temp_val = { ixfe, XF: XFs[ixfe], v: val2.rkrec[j3 - val2.c][1], t: "n" };
                      if (BIFF2Fmt > 0)
                        temp_val.z = temp_val.XF && temp_val.XF.numFmtId && BIFF2FmtTable[temp_val.XF.numFmtId] || BIFF2FmtTable[temp_val.ixfe >> 8 & 63];
                      safe_format_xf(temp_val, options, wb.opts.Date1904);
                      addcell({ c: j3, r: val2.r }, temp_val, options);
                    }
                  }
                  break;
                case 6:
                case 518:
                case 1030:
                  {
                    if (val2.val == "String") {
                      last_formula = val2;
                      break;
                    }
                    temp_val = make_cell(val2.val, val2.cell.ixfe, val2.tt);
                    temp_val.XF = XFs[temp_val.ixfe];
                    if (options.cellFormula) {
                      var _f = val2.formula;
                      if (_f && _f[0] && _f[0][0] && _f[0][0][0] == "PtgExp") {
                        var _fr = _f[0][0][1][0], _fc = _f[0][0][1][1];
                        var _fe = encode_cell({ r: _fr, c: _fc });
                        if (sharedf[_fe])
                          temp_val.f = "" + stringify_formula(val2.formula, range, val2.cell, supbooks, opts);
                        else
                          temp_val.F = ((options.dense ? (out["!data"][_fr] || [])[_fc] : out[_fe]) || {}).F;
                      } else
                        temp_val.f = "" + stringify_formula(val2.formula, range, val2.cell, supbooks, opts);
                    }
                    if (BIFF2Fmt > 0)
                      temp_val.z = temp_val.XF && temp_val.XF.numFmtId && BIFF2FmtTable[temp_val.XF.numFmtId] || BIFF2FmtTable[temp_val.ixfe >> 8 & 63];
                    safe_format_xf(temp_val, options, wb.opts.Date1904);
                    addcell(val2.cell, temp_val, options);
                    last_formula = val2;
                  }
                  break;
                case 7:
                case 519:
                  {
                    if (last_formula) {
                      last_formula.val = val2;
                      temp_val = make_cell(val2, last_formula.cell.ixfe, "s");
                      temp_val.XF = XFs[temp_val.ixfe];
                      if (options.cellFormula) {
                        temp_val.f = "" + stringify_formula(last_formula.formula, range, last_formula.cell, supbooks, opts);
                      }
                      if (BIFF2Fmt > 0)
                        temp_val.z = temp_val.XF && temp_val.XF.numFmtId && BIFF2FmtTable[temp_val.XF.numFmtId] || BIFF2FmtTable[temp_val.ixfe >> 8 & 63];
                      safe_format_xf(temp_val, options, wb.opts.Date1904);
                      addcell(last_formula.cell, temp_val, options);
                      last_formula = null;
                    } else
                      throw new Error("String record expects Formula");
                  }
                  break;
                case 33:
                case 545:
                  {
                    arrayf.push(val2);
                    var _arraystart = encode_cell(val2[0].s);
                    cc2 = options.dense ? (out["!data"][val2[0].s.r] || [])[val2[0].s.c] : out[_arraystart];
                    if (options.cellFormula && cc2) {
                      if (!last_formula)
                        break;
                      if (!_arraystart || !cc2)
                        break;
                      cc2.f = "" + stringify_formula(val2[1], range, val2[0], supbooks, opts);
                      cc2.F = encode_range(val2[0]);
                    }
                  }
                  break;
                case 1212:
                  {
                    if (!options.cellFormula)
                      break;
                    if (last_cell) {
                      if (!last_formula)
                        break;
                      sharedf[encode_cell(last_formula.cell)] = val2[0];
                      cc2 = options.dense ? (out["!data"][last_formula.cell.r] || [])[last_formula.cell.c] : out[encode_cell(last_formula.cell)];
                      (cc2 || {}).f = "" + stringify_formula(val2[0], range, lastcell, supbooks, opts);
                    }
                  }
                  break;
                case 253:
                  temp_val = make_cell(sst[val2.isst].t, val2.ixfe, "s");
                  if (sst[val2.isst].h)
                    temp_val.h = sst[val2.isst].h;
                  temp_val.XF = XFs[temp_val.ixfe];
                  if (BIFF2Fmt > 0)
                    temp_val.z = temp_val.XF && temp_val.XF.numFmtId && BIFF2FmtTable[temp_val.XF.numFmtId] || BIFF2FmtTable[temp_val.ixfe >> 8 & 63];
                  safe_format_xf(temp_val, options, wb.opts.Date1904);
                  addcell({ c: val2.c, r: val2.r }, temp_val, options);
                  break;
                case 513:
                  if (options.sheetStubs) {
                    temp_val = { ixfe: val2.ixfe, XF: XFs[val2.ixfe], t: "z" };
                    if (BIFF2Fmt > 0)
                      temp_val.z = temp_val.XF && temp_val.XF.numFmtId && BIFF2FmtTable[temp_val.XF.numFmtId] || BIFF2FmtTable[temp_val.ixfe >> 8 & 63];
                    safe_format_xf(temp_val, options, wb.opts.Date1904);
                    addcell({ c: val2.c, r: val2.r }, temp_val, options);
                  }
                  break;
                case 190:
                  if (options.sheetStubs) {
                    for (var _j = val2.c; _j <= val2.C; ++_j) {
                      var _ixfe = val2.ixfe[_j - val2.c];
                      temp_val = { ixfe: _ixfe, XF: XFs[_ixfe], t: "z" };
                      if (BIFF2Fmt > 0)
                        temp_val.z = temp_val.XF && temp_val.XF.numFmtId && BIFF2FmtTable[temp_val.XF.numFmtId] || BIFF2FmtTable[temp_val.ixfe >> 8 & 63];
                      safe_format_xf(temp_val, options, wb.opts.Date1904);
                      addcell({ c: _j, r: val2.r }, temp_val, options);
                    }
                  }
                  break;
                case 214:
                case 516:
                case 4:
                  temp_val = make_cell(val2.val, val2.ixfe, "s");
                  temp_val.XF = XFs[temp_val.ixfe];
                  if (BIFF2Fmt > 0)
                    temp_val.z = temp_val.XF && temp_val.XF.numFmtId && BIFF2FmtTable[temp_val.XF.numFmtId] || BIFF2FmtTable[temp_val.ixfe >> 8 & 63];
                  safe_format_xf(temp_val, options, wb.opts.Date1904);
                  addcell({ c: val2.c, r: val2.r }, temp_val, options);
                  break;
                case 0:
                case 512:
                  {
                    if (file_depth === 1)
                      range = val2;
                  }
                  break;
                case 252:
                  {
                    sst = val2;
                  }
                  break;
                case 1054:
                  {
                    if (opts.biff >= 3 && opts.biff <= 4) {
                      BIFF2FmtTable[BIFF2Fmt++] = val2[1];
                      for (var b4idx = 0; b4idx < BIFF2Fmt + 163; ++b4idx)
                        if (table_fmt[b4idx] == val2[1])
                          break;
                      if (b4idx >= 163)
                        SSF__load(val2[1], BIFF2Fmt + 163);
                    } else
                      SSF__load(val2[1], val2[0]);
                  }
                  break;
                case 30:
                  {
                    BIFF2FmtTable[BIFF2Fmt++] = val2;
                    for (var b2idx = 0; b2idx < BIFF2Fmt + 163; ++b2idx)
                      if (table_fmt[b2idx] == val2)
                        break;
                    if (b2idx >= 163)
                      SSF__load(val2, BIFF2Fmt + 163);
                  }
                  break;
                case 229:
                  merges = merges.concat(val2);
                  break;
                case 93:
                  objects[val2.cmo[0]] = opts.lastobj = val2;
                  break;
                case 438:
                  opts.lastobj.TxO = val2;
                  break;
                case 127:
                  opts.lastobj.ImData = val2;
                  break;
                case 440:
                  {
                    for (rngR = val2[0].s.r; rngR <= val2[0].e.r; ++rngR)
                      for (rngC = val2[0].s.c; rngC <= val2[0].e.c; ++rngC) {
                        cc2 = options.dense ? (out["!data"][rngR] || [])[rngC] : out[encode_cell({ c: rngC, r: rngR })];
                        if (cc2)
                          cc2.l = val2[1];
                      }
                  }
                  break;
                case 2048:
                  {
                    for (rngR = val2[0].s.r; rngR <= val2[0].e.r; ++rngR)
                      for (rngC = val2[0].s.c; rngC <= val2[0].e.c; ++rngC) {
                        cc2 = options.dense ? (out["!data"][rngR] || [])[rngC] : out[encode_cell({ c: rngC, r: rngR })];
                        if (cc2 && cc2.l)
                          cc2.l.Tooltip = val2[1];
                      }
                  }
                  break;
                case 28:
                  {
                    cc2 = options.dense ? (out["!data"][val2[0].r] || [])[val2[0].c] : out[encode_cell(val2[0])];
                    if (!cc2) {
                      if (options.dense) {
                        if (!out["!data"][val2[0].r])
                          out["!data"][val2[0].r] = [];
                        cc2 = out["!data"][val2[0].r][val2[0].c] = { t: "z" };
                      } else {
                        cc2 = out[encode_cell(val2[0])] = { t: "z" };
                      }
                      range.e.r = Math.max(range.e.r, val2[0].r);
                      range.s.r = Math.min(range.s.r, val2[0].r);
                      range.e.c = Math.max(range.e.c, val2[0].c);
                      range.s.c = Math.min(range.s.c, val2[0].c);
                    }
                    if (!cc2.c)
                      cc2.c = [];
                    if (opts.biff <= 5 && opts.biff >= 2)
                      cmnt = { a: "SheetJ5", t: val2[1] };
                    else {
                      var noteobj = objects[val2[2]];
                      cmnt = { a: val2[1], t: noteobj.TxO.t };
                      if (val2[3] != null && !(val2[3] & 2))
                        cc2.c.hidden = true;
                    }
                    cc2.c.push(cmnt);
                  }
                  break;
                case 2173:
                  update_xfext(XFs[val2.ixfe], val2.ext);
                  break;
                case 125:
                  {
                    if (!opts.cellStyles)
                      break;
                    while (val2.e >= val2.s) {
                      colinfo[val2.e--] = { width: val2.w / 256, level: val2.level || 0, hidden: !!(val2.flags & 1) };
                      if (!seencol) {
                        seencol = true;
                        find_mdw_colw(val2.w / 256);
                      }
                      process_col(colinfo[val2.e + 1]);
                    }
                  }
                  break;
                case 520:
                  {
                    var rowobj = {};
                    if (val2.level != null) {
                      rowinfo[val2.r] = rowobj;
                      rowobj.level = val2.level;
                    }
                    if (val2.hidden) {
                      rowinfo[val2.r] = rowobj;
                      rowobj.hidden = true;
                    }
                    if (val2.hpt) {
                      rowinfo[val2.r] = rowobj;
                      rowobj.hpt = val2.hpt;
                      rowobj.hpx = pt2px(val2.hpt);
                    }
                  }
                  break;
                case 38:
                case 39:
                case 40:
                case 41:
                  if (!out["!margins"])
                    default_margins(out["!margins"] = {});
                  out["!margins"][{ 38: "left", 39: "right", 40: "top", 41: "bottom" }[RecordType]] = val2;
                  break;
                case 161:
                  if (!out["!margins"])
                    default_margins(out["!margins"] = {});
                  out["!margins"].header = val2.header;
                  out["!margins"].footer = val2.footer;
                  break;
                case 574:
                  if (val2.RTL)
                    Workbook.Views[0].RTL = true;
                  break;
                case 146:
                  palette = val2;
                  break;
                case 2198:
                  themes = val2;
                  break;
                case 140:
                  country = val2;
                  break;
                case 442:
                  {
                    if (!cur_sheet)
                      Workbook.WBProps.CodeName = val2 || "ThisWorkbook";
                    else
                      wsprops.CodeName = val2 || wsprops.name;
                  }
                  break;
              }
            } else {
              if (!R2)
                console.error("Missing Info for XLS Record 0x" + RecordType.toString(16));
              blob.l += length;
            }
          }
          wb.SheetNames = keys(Directory).sort(function(a2, b3) {
            return Number(a2) - Number(b3);
          }).map(function(x3) {
            return Directory[x3].name;
          });
          if (!options.bookSheets)
            wb.Sheets = Sheets;
          if (!wb.SheetNames.length && Preamble["!ref"]) {
            wb.SheetNames.push("Sheet1");
            if (wb.Sheets)
              wb.Sheets["Sheet1"] = Preamble;
          } else
            wb.Preamble = Preamble;
          if (wb.Sheets)
            FilterDatabases.forEach(function(r6, i6) {
              wb.Sheets[wb.SheetNames[i6]]["!autofilter"] = r6;
            });
          wb.Strings = sst;
          wb.SSF = dup(table_fmt);
          if (opts.enc)
            wb.Encryption = opts.enc;
          if (themes)
            wb.Themes = themes;
          wb.Metadata = {};
          if (country !== void 0)
            wb.Metadata.Country = country;
          if (supbooks.names.length > 0)
            Workbook.Names = supbooks.names;
          wb.Workbook = Workbook;
          return wb;
        }
        var PSCLSID = {
          SI: "e0859ff2f94f6810ab9108002b27b3d9",
          DSI: "02d5cdd59c2e1b10939708002b2cf9ae",
          UDI: "05d5cdd59c2e1b10939708002b2cf9ae"
        };
        function parse_xls_props(cfb, props, o6) {
          var DSI = CFB.find(cfb, "/!DocumentSummaryInformation");
          if (DSI && DSI.size > 0)
            try {
              var DocSummary = parse_PropertySetStream(DSI, DocSummaryPIDDSI, PSCLSID.DSI);
              for (var d2 in DocSummary)
                props[d2] = DocSummary[d2];
            } catch (e7) {
              if (o6.WTF)
                throw e7;
            }
          var SI = CFB.find(cfb, "/!SummaryInformation");
          if (SI && SI.size > 0)
            try {
              var Summary = parse_PropertySetStream(SI, SummaryPIDSI, PSCLSID.SI);
              for (var s3 in Summary)
                if (props[s3] == null)
                  props[s3] = Summary[s3];
            } catch (e7) {
              if (o6.WTF)
                throw e7;
            }
          if (props.HeadingPairs && props.TitlesOfParts) {
            load_props_pairs(props.HeadingPairs, props.TitlesOfParts, props, o6);
            delete props.HeadingPairs;
            delete props.TitlesOfParts;
          }
        }
        function write_xls_props(wb, cfb) {
          var DSEntries = [], SEntries = [], CEntries = [];
          var i6 = 0, Keys;
          var DocSummaryRE = evert_key(DocSummaryPIDDSI, "n");
          var SummaryRE = evert_key(SummaryPIDSI, "n");
          if (wb.Props) {
            Keys = keys(wb.Props);
            for (i6 = 0; i6 < Keys.length; ++i6)
              (Object.prototype.hasOwnProperty.call(DocSummaryRE, Keys[i6]) ? DSEntries : Object.prototype.hasOwnProperty.call(SummaryRE, Keys[i6]) ? SEntries : CEntries).push([Keys[i6], wb.Props[Keys[i6]]]);
          }
          if (wb.Custprops) {
            Keys = keys(wb.Custprops);
            for (i6 = 0; i6 < Keys.length; ++i6)
              if (!Object.prototype.hasOwnProperty.call(wb.Props || {}, Keys[i6]))
                (Object.prototype.hasOwnProperty.call(DocSummaryRE, Keys[i6]) ? DSEntries : Object.prototype.hasOwnProperty.call(SummaryRE, Keys[i6]) ? SEntries : CEntries).push([Keys[i6], wb.Custprops[Keys[i6]]]);
          }
          var CEntries2 = [];
          for (i6 = 0; i6 < CEntries.length; ++i6) {
            if (XLSPSSkip.indexOf(CEntries[i6][0]) > -1 || PseudoPropsPairs.indexOf(CEntries[i6][0]) > -1)
              continue;
            if (CEntries[i6][1] == null)
              continue;
            CEntries2.push(CEntries[i6]);
          }
          if (SEntries.length)
            CFB.utils.cfb_add(cfb, "/SummaryInformation", write_PropertySetStream(SEntries, PSCLSID.SI, SummaryRE, SummaryPIDSI));
          if (DSEntries.length || CEntries2.length)
            CFB.utils.cfb_add(cfb, "/DocumentSummaryInformation", write_PropertySetStream(DSEntries, PSCLSID.DSI, DocSummaryRE, DocSummaryPIDDSI, CEntries2.length ? CEntries2 : null, PSCLSID.UDI));
        }
        function parse_xlscfb(cfb, options) {
          if (!options)
            options = {};
          fix_read_opts(options);
          reset_cp();
          if (options.codepage)
            set_ansi(options.codepage);
          var CompObj, WB;
          if (cfb.FullPaths) {
            if (CFB.find(cfb, "/encryption"))
              throw new Error("File is password-protected");
            CompObj = CFB.find(cfb, "!CompObj");
            WB = CFB.find(cfb, "/Workbook") || CFB.find(cfb, "/Book");
          } else {
            switch (options.type) {
              case "base64":
                cfb = s2a(Base64_decode(cfb));
                break;
              case "binary":
                cfb = s2a(cfb);
                break;
              case "buffer":
                break;
              case "array":
                if (!Array.isArray(cfb))
                  cfb = Array.prototype.slice.call(cfb);
                break;
            }
            prep_blob(cfb, 0);
            WB = { content: cfb };
          }
          var WorkbookP;
          var _data;
          if (CompObj)
            parse_compobj(CompObj);
          if (options.bookProps && !options.bookSheets)
            WorkbookP = {};
          else {
            var T3 = has_buf ? "buffer" : "array";
            if (WB && WB.content)
              WorkbookP = parse_workbook(WB.content, options);
            else if ((_data = CFB.find(cfb, "PerfectOffice_MAIN")) && _data.content)
              WorkbookP = WK_.to_workbook(_data.content, (options.type = T3, options));
            else if ((_data = CFB.find(cfb, "NativeContent_MAIN")) && _data.content)
              WorkbookP = WK_.to_workbook(_data.content, (options.type = T3, options));
            else if ((_data = CFB.find(cfb, "MN0")) && _data.content)
              throw new Error("Unsupported Works 4 for Mac file");
            else
              throw new Error("Cannot find Workbook stream");
            if (options.bookVBA && cfb.FullPaths && CFB.find(cfb, "/_VBA_PROJECT_CUR/VBA/dir"))
              WorkbookP.vbaraw = make_vba_xls(cfb);
          }
          var props = {};
          if (cfb.FullPaths)
            parse_xls_props(cfb, props, options);
          WorkbookP.Props = WorkbookP.Custprops = props;
          if (options.bookFiles)
            WorkbookP.cfb = cfb;
          return WorkbookP;
        }
        function write_xlscfb(wb, opts) {
          var o6 = opts || {};
          var cfb = CFB.utils.cfb_new({ root: "R" });
          var wbpath = "/Workbook";
          switch (o6.bookType || "xls") {
            case "xls":
              o6.bookType = "biff8";
            case "xla":
              if (!o6.bookType)
                o6.bookType = "xla";
            case "biff8":
              wbpath = "/Workbook";
              o6.biff = 8;
              break;
            case "biff5":
              wbpath = "/Book";
              o6.biff = 5;
              break;
            default:
              throw new Error("invalid type " + o6.bookType + " for XLS CFB");
          }
          CFB.utils.cfb_add(cfb, wbpath, write_biff_buf(wb, o6));
          if (o6.biff == 8 && (wb.Props || wb.Custprops))
            write_xls_props(wb, cfb);
          if (o6.biff == 8 && wb.vbaraw)
            fill_vba_xls(cfb, CFB.read(wb.vbaraw, { type: typeof wb.vbaraw == "string" ? "binary" : "buffer" }));
          return cfb;
        }
        var XLSBRecordEnum = {
          0: { f: parse_BrtRowHdr },
          1: { f: parse_BrtCellBlank },
          2: { f: parse_BrtCellRk },
          3: { f: parse_BrtCellError },
          4: { f: parse_BrtCellBool },
          5: { f: parse_BrtCellReal },
          6: { f: parse_BrtCellSt },
          7: { f: parse_BrtCellIsst },
          8: { f: parse_BrtFmlaString },
          9: { f: parse_BrtFmlaNum },
          10: { f: parse_BrtFmlaBool },
          11: { f: parse_BrtFmlaError },
          12: { f: parse_BrtShortBlank },
          13: { f: parse_BrtShortRk },
          14: { f: parse_BrtShortError },
          15: { f: parse_BrtShortBool },
          16: { f: parse_BrtShortReal },
          17: { f: parse_BrtShortSt },
          18: { f: parse_BrtShortIsst },
          19: { f: parse_RichStr },
          20: {},
          21: {},
          22: {},
          23: {},
          24: {},
          25: {},
          26: {},
          27: {},
          28: {},
          29: {},
          30: {},
          31: {},
          32: {},
          33: {},
          34: {},
          35: { T: 1 },
          36: { T: -1 },
          37: { T: 1 },
          38: { T: -1 },
          39: { f: parse_BrtName },
          40: {},
          42: {},
          43: { f: parse_BrtFont },
          44: { f: parse_BrtFmt },
          45: { f: parse_BrtFill },
          46: { f: parse_BrtBorder },
          47: { f: parse_BrtXF },
          48: {},
          49: { f: parse_Int32LE },
          50: {},
          51: { f: parse_BrtMdb },
          52: { T: 1 },
          53: { T: -1 },
          54: { T: 1 },
          55: { T: -1 },
          56: { T: 1 },
          57: { T: -1 },
          58: {},
          59: {},
          60: { f: parse_ColInfo },
          62: { f: parse_BrtCellRString },
          63: { f: parse_BrtCalcChainItem$ },
          64: { f: parse_BrtDVal },
          65: {},
          66: {},
          67: {},
          68: {},
          69: {},
          70: {},
          128: {},
          129: { T: 1 },
          130: { T: -1 },
          131: { T: 1, f: parsenoop, p: 0 },
          132: { T: -1 },
          133: { T: 1 },
          134: { T: -1 },
          135: { T: 1 },
          136: { T: -1 },
          137: { T: 1, f: parse_BrtBeginWsView },
          138: { T: -1 },
          139: { T: 1 },
          140: { T: -1 },
          141: { T: 1 },
          142: { T: -1 },
          143: { T: 1 },
          144: { T: -1 },
          145: { T: 1 },
          146: { T: -1 },
          147: { f: parse_BrtWsProp },
          148: { f: parse_BrtWsDim, p: 16 },
          151: { f: parse_BrtPane },
          152: {},
          153: { f: parse_BrtWbProp },
          154: {},
          155: {},
          156: { f: parse_BrtBundleSh },
          157: {},
          158: {},
          159: { T: 1, f: parse_BrtBeginSst },
          160: { T: -1 },
          161: { T: 1, f: parse_UncheckedRfX },
          162: { T: -1 },
          163: { T: 1 },
          164: { T: -1 },
          165: { T: 1 },
          166: { T: -1 },
          167: {},
          168: {},
          169: {},
          170: {},
          171: {},
          172: { T: 1 },
          173: { T: -1 },
          174: {},
          175: {},
          176: { f: parse_BrtMergeCell },
          177: { T: 1 },
          178: { T: -1 },
          179: { T: 1 },
          180: { T: -1 },
          181: { T: 1 },
          182: { T: -1 },
          183: { T: 1 },
          184: { T: -1 },
          185: { T: 1 },
          186: { T: -1 },
          187: { T: 1 },
          188: { T: -1 },
          189: { T: 1 },
          190: { T: -1 },
          191: { T: 1 },
          192: { T: -1 },
          193: { T: 1 },
          194: { T: -1 },
          195: { T: 1 },
          196: { T: -1 },
          197: { T: 1 },
          198: { T: -1 },
          199: { T: 1 },
          200: { T: -1 },
          201: { T: 1 },
          202: { T: -1 },
          203: { T: 1 },
          204: { T: -1 },
          205: { T: 1 },
          206: { T: -1 },
          207: { T: 1 },
          208: { T: -1 },
          209: { T: 1 },
          210: { T: -1 },
          211: { T: 1 },
          212: { T: -1 },
          213: { T: 1 },
          214: { T: -1 },
          215: { T: 1 },
          216: { T: -1 },
          217: { T: 1 },
          218: { T: -1 },
          219: { T: 1 },
          220: { T: -1 },
          221: { T: 1 },
          222: { T: -1 },
          223: { T: 1 },
          224: { T: -1 },
          225: { T: 1 },
          226: { T: -1 },
          227: { T: 1 },
          228: { T: -1 },
          229: { T: 1 },
          230: { T: -1 },
          231: { T: 1 },
          232: { T: -1 },
          233: { T: 1 },
          234: { T: -1 },
          235: { T: 1 },
          236: { T: -1 },
          237: { T: 1 },
          238: { T: -1 },
          239: { T: 1 },
          240: { T: -1 },
          241: { T: 1 },
          242: { T: -1 },
          243: { T: 1 },
          244: { T: -1 },
          245: { T: 1 },
          246: { T: -1 },
          247: { T: 1 },
          248: { T: -1 },
          249: { T: 1 },
          250: { T: -1 },
          251: { T: 1 },
          252: { T: -1 },
          253: { T: 1 },
          254: { T: -1 },
          255: { T: 1 },
          256: { T: -1 },
          257: { T: 1 },
          258: { T: -1 },
          259: { T: 1 },
          260: { T: -1 },
          261: { T: 1 },
          262: { T: -1 },
          263: { T: 1 },
          264: { T: -1 },
          265: { T: 1 },
          266: { T: -1 },
          267: { T: 1 },
          268: { T: -1 },
          269: { T: 1 },
          270: { T: -1 },
          271: { T: 1 },
          272: { T: -1 },
          273: { T: 1 },
          274: { T: -1 },
          275: { T: 1 },
          276: { T: -1 },
          277: {},
          278: { T: 1 },
          279: { T: -1 },
          280: { T: 1 },
          281: { T: -1 },
          282: { T: 1 },
          283: { T: 1 },
          284: { T: -1 },
          285: { T: 1 },
          286: { T: -1 },
          287: { T: 1 },
          288: { T: -1 },
          289: { T: 1 },
          290: { T: -1 },
          291: { T: 1 },
          292: { T: -1 },
          293: { T: 1 },
          294: { T: -1 },
          295: { T: 1 },
          296: { T: -1 },
          297: { T: 1 },
          298: { T: -1 },
          299: { T: 1 },
          300: { T: -1 },
          301: { T: 1 },
          302: { T: -1 },
          303: { T: 1 },
          304: { T: -1 },
          305: { T: 1 },
          306: { T: -1 },
          307: { T: 1 },
          308: { T: -1 },
          309: { T: 1 },
          310: { T: -1 },
          311: { T: 1 },
          312: { T: -1 },
          313: { T: -1 },
          314: { T: 1 },
          315: { T: -1 },
          316: { T: 1 },
          317: { T: -1 },
          318: { T: 1 },
          319: { T: -1 },
          320: { T: 1 },
          321: { T: -1 },
          322: { T: 1 },
          323: { T: -1 },
          324: { T: 1 },
          325: { T: -1 },
          326: { T: 1 },
          327: { T: -1 },
          328: { T: 1 },
          329: { T: -1 },
          330: { T: 1 },
          331: { T: -1 },
          332: { T: 1 },
          333: { T: -1 },
          334: { T: 1 },
          335: { f: parse_BrtMdtinfo },
          336: { T: -1 },
          337: { f: parse_BrtBeginEsmdb, T: 1 },
          338: { T: -1 },
          339: { T: 1 },
          340: { T: -1 },
          341: { T: 1 },
          342: { T: -1 },
          343: { T: 1 },
          344: { T: -1 },
          345: { T: 1 },
          346: { T: -1 },
          347: { T: 1 },
          348: { T: -1 },
          349: { T: 1 },
          350: { T: -1 },
          351: {},
          352: {},
          353: { T: 1 },
          354: { T: -1 },
          355: { f: parse_RelID },
          357: {},
          358: {},
          359: {},
          360: { T: 1 },
          361: {},
          362: { f: parse_ExternSheet },
          363: {},
          364: {},
          366: {},
          367: {},
          368: {},
          369: {},
          370: {},
          371: {},
          372: { T: 1 },
          373: { T: -1 },
          374: { T: 1 },
          375: { T: -1 },
          376: { T: 1 },
          377: { T: -1 },
          378: { T: 1 },
          379: { T: -1 },
          380: { T: 1 },
          381: { T: -1 },
          382: { T: 1 },
          383: { T: -1 },
          384: { T: 1 },
          385: { T: -1 },
          386: { T: 1 },
          387: { T: -1 },
          388: { T: 1 },
          389: { T: -1 },
          390: { T: 1 },
          391: { T: -1 },
          392: { T: 1 },
          393: { T: -1 },
          394: { T: 1 },
          395: { T: -1 },
          396: {},
          397: {},
          398: {},
          399: {},
          400: {},
          401: { T: 1 },
          403: {},
          404: {},
          405: {},
          406: {},
          407: {},
          408: {},
          409: {},
          410: {},
          411: {},
          412: {},
          413: {},
          414: {},
          415: {},
          416: {},
          417: {},
          418: {},
          419: {},
          420: {},
          421: {},
          422: { T: 1 },
          423: { T: 1 },
          424: { T: -1 },
          425: { T: -1 },
          426: { f: parse_BrtArrFmla },
          427: { f: parse_BrtShrFmla },
          428: {},
          429: { T: 1 },
          430: { T: -1 },
          431: { T: 1 },
          432: { T: -1 },
          433: { T: 1 },
          434: { T: -1 },
          435: { T: 1 },
          436: { T: -1 },
          437: { T: 1 },
          438: { T: -1 },
          439: { T: 1 },
          440: { T: -1 },
          441: { T: 1 },
          442: { T: -1 },
          443: { T: 1 },
          444: { T: -1 },
          445: { T: 1 },
          446: { T: -1 },
          447: { T: 1 },
          448: { T: -1 },
          449: { T: 1 },
          450: { T: -1 },
          451: { T: 1 },
          452: { T: -1 },
          453: { T: 1 },
          454: { T: -1 },
          455: { T: 1 },
          456: { T: -1 },
          457: { T: 1 },
          458: { T: -1 },
          459: { T: 1 },
          460: { T: -1 },
          461: { T: 1 },
          462: { T: -1 },
          463: { T: 1 },
          464: { T: -1 },
          465: { T: 1 },
          466: { T: -1 },
          467: { T: 1 },
          468: { T: -1 },
          469: { T: 1 },
          470: { T: -1 },
          471: {},
          472: {},
          473: { T: 1 },
          474: { T: -1 },
          475: {},
          476: { f: parse_BrtMargins },
          477: {},
          478: {},
          479: { T: 1 },
          480: { T: -1 },
          481: { T: 1 },
          482: { T: -1 },
          483: { T: 1 },
          484: { T: -1 },
          485: { f: parse_BrtWsFmtInfo },
          486: { T: 1 },
          487: { T: -1 },
          488: { T: 1 },
          489: { T: -1 },
          490: { T: 1 },
          491: { T: -1 },
          492: { T: 1 },
          493: { T: -1 },
          494: { f: parse_BrtHLink },
          495: { T: 1 },
          496: { T: -1 },
          497: { T: 1 },
          498: { T: -1 },
          499: {},
          500: { T: 1 },
          501: { T: -1 },
          502: { T: 1 },
          503: { T: -1 },
          504: {},
          505: { T: 1 },
          506: { T: -1 },
          507: {},
          508: { T: 1 },
          509: { T: -1 },
          510: { T: 1 },
          511: { T: -1 },
          512: {},
          513: {},
          514: { T: 1 },
          515: { T: -1 },
          516: { T: 1 },
          517: { T: -1 },
          518: { T: 1 },
          519: { T: -1 },
          520: { T: 1 },
          521: { T: -1 },
          522: {},
          523: {},
          524: {},
          525: {},
          526: {},
          527: {},
          528: { T: 1 },
          529: { T: -1 },
          530: { T: 1 },
          531: { T: -1 },
          532: { T: 1 },
          533: { T: -1 },
          534: {},
          535: {},
          536: {},
          537: {},
          538: { T: 1 },
          539: { T: -1 },
          540: { T: 1 },
          541: { T: -1 },
          542: { T: 1 },
          548: {},
          549: {},
          550: { f: parse_RelID },
          551: { f: parse_XLNullableWideString },
          552: {},
          553: {},
          554: { T: 1 },
          555: { T: -1 },
          556: { T: 1 },
          557: { T: -1 },
          558: { T: 1 },
          559: { T: -1 },
          560: { T: 1 },
          561: { T: -1 },
          562: {},
          564: {},
          565: { T: 1 },
          566: { T: -1 },
          569: { T: 1 },
          570: { T: -1 },
          572: {},
          573: { T: 1 },
          574: { T: -1 },
          577: {},
          578: {},
          579: {},
          580: {},
          581: {},
          582: {},
          583: {},
          584: {},
          585: {},
          586: {},
          587: {},
          588: { T: -1 },
          589: {},
          590: { T: 1 },
          591: { T: -1 },
          592: { T: 1 },
          593: { T: -1 },
          594: { T: 1 },
          595: { T: -1 },
          596: {},
          597: { T: 1 },
          598: { T: -1 },
          599: { T: 1 },
          600: { T: -1 },
          601: { T: 1 },
          602: { T: -1 },
          603: { T: 1 },
          604: { T: -1 },
          605: { T: 1 },
          606: { T: -1 },
          607: {},
          608: { T: 1 },
          609: { T: -1 },
          610: {},
          611: { T: 1 },
          612: { T: -1 },
          613: { T: 1 },
          614: { T: -1 },
          615: { T: 1 },
          616: { T: -1 },
          617: { T: 1 },
          618: { T: -1 },
          619: { T: 1 },
          620: { T: -1 },
          625: {},
          626: { T: 1 },
          627: { T: -1 },
          628: { T: 1 },
          629: { T: -1 },
          630: { T: 1 },
          631: { T: -1 },
          632: { f: parse_BrtCommentAuthor },
          633: { T: 1 },
          634: { T: -1 },
          635: { T: 1, f: parse_BrtBeginComment },
          636: { T: -1 },
          637: { f: parse_BrtCommentText },
          638: { T: 1 },
          639: {},
          640: { T: -1 },
          641: { T: 1 },
          642: { T: -1 },
          643: { T: 1 },
          644: {},
          645: { T: -1 },
          646: { T: 1 },
          648: { T: 1 },
          649: {},
          650: { T: -1 },
          651: { f: parse_BrtCsProp },
          652: {},
          653: { T: 1 },
          654: { T: -1 },
          655: { T: 1 },
          656: { T: -1 },
          657: { T: 1 },
          658: { T: -1 },
          659: {},
          660: { T: 1 },
          661: {},
          662: { T: -1 },
          663: {},
          664: { T: 1 },
          665: {},
          666: { T: -1 },
          667: {},
          668: {},
          669: {},
          671: { T: 1 },
          672: { T: -1 },
          673: { T: 1 },
          674: { T: -1 },
          675: {},
          676: {},
          677: {},
          678: {},
          679: {},
          680: {},
          681: {},
          1024: {},
          1025: {},
          1026: { T: 1 },
          1027: { T: -1 },
          1028: { T: 1 },
          1029: { T: -1 },
          1030: {},
          1031: { T: 1 },
          1032: { T: -1 },
          1033: { T: 1 },
          1034: { T: -1 },
          1035: {},
          1036: {},
          1037: {},
          1038: { T: 1 },
          1039: { T: -1 },
          1040: {},
          1041: { T: 1 },
          1042: { T: -1 },
          1043: {},
          1044: {},
          1045: {},
          1046: { T: 1 },
          1047: { T: -1 },
          1048: { T: 1 },
          1049: { T: -1 },
          1050: {},
          1051: { T: 1 },
          1052: { T: 1 },
          1053: { f: parse_BrtDVal14 },
          1054: { T: 1 },
          1055: {},
          1056: { T: 1 },
          1057: { T: -1 },
          1058: { T: 1 },
          1059: { T: -1 },
          1061: {},
          1062: { T: 1 },
          1063: { T: -1 },
          1064: { T: 1 },
          1065: { T: -1 },
          1066: { T: 1 },
          1067: { T: -1 },
          1068: { T: 1 },
          1069: { T: -1 },
          1070: { T: 1 },
          1071: { T: -1 },
          1072: { T: 1 },
          1073: { T: -1 },
          1075: { T: 1 },
          1076: { T: -1 },
          1077: { T: 1 },
          1078: { T: -1 },
          1079: { T: 1 },
          1080: { T: -1 },
          1081: { T: 1 },
          1082: { T: -1 },
          1083: { T: 1 },
          1084: { T: -1 },
          1085: {},
          1086: { T: 1 },
          1087: { T: -1 },
          1088: { T: 1 },
          1089: { T: -1 },
          1090: { T: 1 },
          1091: { T: -1 },
          1092: { T: 1 },
          1093: { T: -1 },
          1094: { T: 1 },
          1095: { T: -1 },
          1096: {},
          1097: { T: 1 },
          1098: {},
          1099: { T: -1 },
          1100: { T: 1 },
          1101: { T: -1 },
          1102: {},
          1103: {},
          1104: {},
          1105: {},
          1111: {},
          1112: {},
          1113: { T: 1 },
          1114: { T: -1 },
          1115: { T: 1 },
          1116: { T: -1 },
          1117: {},
          1118: { T: 1 },
          1119: { T: -1 },
          1120: { T: 1 },
          1121: { T: -1 },
          1122: { T: 1 },
          1123: { T: -1 },
          1124: { T: 1 },
          1125: { T: -1 },
          1126: {},
          1128: { T: 1 },
          1129: { T: -1 },
          1130: {},
          1131: { T: 1 },
          1132: { T: -1 },
          1133: { T: 1 },
          1134: { T: -1 },
          1135: { T: 1 },
          1136: { T: -1 },
          1137: { T: 1 },
          1138: { T: -1 },
          1139: { T: 1 },
          1140: { T: -1 },
          1141: {},
          1142: { T: 1 },
          1143: { T: -1 },
          1144: { T: 1 },
          1145: { T: -1 },
          1146: {},
          1147: { T: 1 },
          1148: { T: -1 },
          1149: { T: 1 },
          1150: { T: -1 },
          1152: { T: 1 },
          1153: { T: -1 },
          1154: { T: -1 },
          1155: { T: -1 },
          1156: { T: -1 },
          1157: { T: 1 },
          1158: { T: -1 },
          1159: { T: 1 },
          1160: { T: -1 },
          1161: { T: 1 },
          1162: { T: -1 },
          1163: { T: 1 },
          1164: { T: -1 },
          1165: { T: 1 },
          1166: { T: -1 },
          1167: { T: 1 },
          1168: { T: -1 },
          1169: { T: 1 },
          1170: { T: -1 },
          1171: {},
          1172: { T: 1 },
          1173: { T: -1 },
          1177: {},
          1178: { T: 1 },
          1180: {},
          1181: {},
          1182: {},
          2048: { T: 1 },
          2049: { T: -1 },
          2050: {},
          2051: { T: 1 },
          2052: { T: -1 },
          2053: {},
          2054: {},
          2055: { T: 1 },
          2056: { T: -1 },
          2057: { T: 1 },
          2058: { T: -1 },
          2060: {},
          2067: {},
          2068: { T: 1 },
          2069: { T: -1 },
          2070: {},
          2071: {},
          2072: { T: 1 },
          2073: { T: -1 },
          2075: {},
          2076: {},
          2077: { T: 1 },
          2078: { T: -1 },
          2079: {},
          2080: { T: 1 },
          2081: { T: -1 },
          2082: {},
          2083: { T: 1 },
          2084: { T: -1 },
          2085: { T: 1 },
          2086: { T: -1 },
          2087: { T: 1 },
          2088: { T: -1 },
          2089: { T: 1 },
          2090: { T: -1 },
          2091: {},
          2092: {},
          2093: { T: 1 },
          2094: { T: -1 },
          2095: {},
          2096: { T: 1 },
          2097: { T: -1 },
          2098: { T: 1 },
          2099: { T: -1 },
          2100: { T: 1 },
          2101: { T: -1 },
          2102: {},
          2103: { T: 1 },
          2104: { T: -1 },
          2105: {},
          2106: { T: 1 },
          2107: { T: -1 },
          2108: {},
          2109: { T: 1 },
          2110: { T: -1 },
          2111: { T: 1 },
          2112: { T: -1 },
          2113: { T: 1 },
          2114: { T: -1 },
          2115: {},
          2116: {},
          2117: {},
          2118: { T: 1 },
          2119: { T: -1 },
          2120: {},
          2121: { T: 1 },
          2122: { T: -1 },
          2123: { T: 1 },
          2124: { T: -1 },
          2125: {},
          2126: { T: 1 },
          2127: { T: -1 },
          2128: {},
          2129: { T: 1 },
          2130: { T: -1 },
          2131: { T: 1 },
          2132: { T: -1 },
          2133: { T: 1 },
          2134: {},
          2135: {},
          2136: {},
          2137: { T: 1 },
          2138: { T: -1 },
          2139: { T: 1 },
          2140: { T: -1 },
          2141: {},
          3072: {},
          3073: {},
          4096: { T: 1 },
          4097: { T: -1 },
          5002: { T: 1 },
          5003: { T: -1 },
          5081: { T: 1 },
          5082: { T: -1 },
          5083: {},
          5084: { T: 1 },
          5085: { T: -1 },
          5086: { T: 1 },
          5087: { T: -1 },
          5088: {},
          5089: {},
          5090: {},
          5092: { T: 1 },
          5093: { T: -1 },
          5094: {},
          5095: { T: 1 },
          5096: { T: -1 },
          5097: {},
          5099: {},
          65535: { n: "" }
        };
        var XLSRecordEnum = {
          6: { f: parse_Formula },
          10: { f: parsenoop2 },
          12: { f: parseuint16 },
          13: { f: parseuint16 },
          14: { f: parsebool },
          15: { f: parsebool },
          16: { f: parse_Xnum },
          17: { f: parsebool },
          18: { f: parsebool },
          19: { f: parseuint16 },
          20: { f: parse_XLHeaderFooter },
          21: { f: parse_XLHeaderFooter },
          23: { f: parse_ExternSheet },
          24: { f: parse_Lbl },
          25: { f: parsebool },
          26: {},
          27: {},
          28: { f: parse_Note },
          29: {},
          34: { f: parsebool },
          35: { f: parse_ExternName },
          38: { f: parse_Xnum },
          39: { f: parse_Xnum },
          40: { f: parse_Xnum },
          41: { f: parse_Xnum },
          42: { f: parsebool },
          43: { f: parsebool },
          47: { f: parse_FilePass },
          49: { f: parse_Font },
          51: { f: parseuint16 },
          60: {},
          61: { f: parse_Window1 },
          64: { f: parsebool },
          65: { f: parse_Pane },
          66: { f: parseuint16 },
          77: {},
          80: {},
          81: {},
          82: {},
          85: { f: parseuint16 },
          89: {},
          90: {},
          91: {},
          92: { f: parse_WriteAccess },
          93: { f: parse_Obj },
          94: {},
          95: { f: parsebool },
          96: {},
          97: {},
          99: { f: parsebool },
          125: { f: parse_ColInfo },
          128: { f: parse_Guts },
          129: { f: parse_WsBool },
          130: { f: parseuint16 },
          131: { f: parsebool },
          132: { f: parsebool },
          133: { f: parse_BoundSheet8 },
          134: {},
          140: { f: parse_Country },
          141: { f: parseuint16 },
          144: {},
          146: { f: parse_Palette },
          151: {},
          152: {},
          153: {},
          154: {},
          155: {},
          156: { f: parseuint16 },
          157: {},
          158: {},
          160: { f: parse_Scl },
          161: { f: parse_Setup },
          174: {},
          175: {},
          176: {},
          177: {},
          178: {},
          180: {},
          181: {},
          182: {},
          184: {},
          185: {},
          189: { f: parse_MulRk },
          190: { f: parse_MulBlank },
          193: { f: parsenoop2 },
          197: {},
          198: {},
          199: {},
          200: {},
          201: {},
          202: { f: parsebool },
          203: {},
          204: {},
          205: {},
          206: {},
          207: {},
          208: {},
          209: {},
          210: {},
          211: {},
          213: {},
          215: {},
          216: {},
          217: {},
          218: { f: parseuint16 },
          220: {},
          221: { f: parsebool },
          222: {},
          224: { f: parse_XF },
          225: { f: parse_InterfaceHdr },
          226: { f: parsenoop2 },
          227: {},
          229: { f: parse_MergeCells },
          233: {},
          235: {},
          236: {},
          237: {},
          239: {},
          240: {},
          241: {},
          242: {},
          244: {},
          245: {},
          246: {},
          247: {},
          248: {},
          249: {},
          251: {},
          252: { f: parse_SST },
          253: { f: parse_LabelSst },
          255: { f: parse_ExtSST },
          256: {},
          259: {},
          290: {},
          311: {},
          312: {},
          315: {},
          317: { f: parseuint16a },
          318: {},
          319: {},
          320: {},
          330: {},
          331: {},
          333: {},
          334: {},
          335: {},
          336: {},
          337: {},
          338: {},
          339: {},
          340: {},
          351: {},
          352: { f: parsebool },
          353: { f: parsenoop2 },
          401: {},
          402: {},
          403: {},
          404: {},
          405: {},
          406: {},
          407: {},
          408: {},
          425: {},
          426: {},
          427: {},
          428: {},
          429: {},
          430: { f: parse_SupBook },
          431: { f: parsebool },
          432: {},
          433: {},
          434: {},
          437: {},
          438: { f: parse_TxO },
          439: { f: parsebool },
          440: { f: parse_HLink },
          441: {},
          442: { f: parse_XLUnicodeString },
          443: {},
          444: { f: parseuint16 },
          445: {},
          446: {},
          448: { f: parsenoop2 },
          449: { f: parse_RecalcId, r: 2 },
          450: { f: parsenoop2 },
          512: { f: parse_Dimensions },
          513: { f: parse_Blank },
          515: { f: parse_Number },
          516: { f: parse_Label },
          517: { f: parse_BoolErr },
          519: { f: parse_String },
          520: { f: parse_Row },
          523: {},
          545: { f: parse_Array },
          549: { f: parse_DefaultRowHeight },
          566: {},
          574: { f: parse_Window2 },
          638: { f: parse_RK },
          659: {},
          1048: {},
          1054: { f: parse_Format },
          1084: {},
          1212: { f: parse_ShrFmla },
          2048: { f: parse_HLinkTooltip },
          2049: {},
          2050: {},
          2051: {},
          2052: {},
          2053: {},
          2054: {},
          2055: {},
          2056: {},
          2057: { f: parse_BOF },
          2058: {},
          2059: {},
          2060: {},
          2061: {},
          2062: {},
          2063: {},
          2064: {},
          2066: {},
          2067: {},
          2128: {},
          2129: {},
          2130: {},
          2131: {},
          2132: {},
          2133: {},
          2134: {},
          2135: {},
          2136: {},
          2137: {},
          2138: {},
          2146: {},
          2147: { r: 12 },
          2148: {},
          2149: {},
          2150: {},
          2151: { f: parsenoop2 },
          2152: {},
          2154: {},
          2155: {},
          2156: {},
          2161: {},
          2162: {},
          2164: {},
          2165: {},
          2166: {},
          2167: {},
          2168: {},
          2169: {},
          2170: {},
          2171: {},
          2172: { f: parse_XFCRC, r: 12 },
          2173: { f: parse_XFExt, r: 12 },
          2174: {},
          2175: {},
          2180: {},
          2181: {},
          2182: {},
          2183: {},
          2184: {},
          2185: {},
          2186: {},
          2187: {},
          2188: { f: parsebool, r: 12 },
          2189: {},
          2190: { r: 12 },
          2191: {},
          2192: {},
          2194: {},
          2195: {},
          2196: { f: parse_NameCmt, r: 12 },
          2197: {},
          2198: { f: parse_Theme, r: 12 },
          2199: {},
          2200: {},
          2201: {},
          2202: { f: parse_MTRSettings, r: 12 },
          2203: { f: parsenoop2 },
          2204: {},
          2205: {},
          2206: {},
          2207: {},
          2211: { f: parse_ForceFullCalculation },
          2212: {},
          2213: {},
          2214: {},
          2215: {},
          4097: {},
          4098: {},
          4099: {},
          4102: {},
          4103: {},
          4105: {},
          4106: {},
          4107: {},
          4108: {},
          4109: {},
          4116: {},
          4117: {},
          4118: {},
          4119: {},
          4120: {},
          4121: {},
          4122: {},
          4123: {},
          4124: {},
          4125: {},
          4126: {},
          4127: {},
          4128: {},
          4129: {},
          4130: {},
          4132: {},
          4133: {},
          4134: { f: parseuint16 },
          4135: {},
          4146: {},
          4147: {},
          4148: {},
          4149: {},
          4154: {},
          4156: {},
          4157: {},
          4158: {},
          4159: {},
          4160: {},
          4161: {},
          4163: {},
          4164: { f: parse_ShtProps },
          4165: {},
          4166: {},
          4168: {},
          4170: {},
          4171: {},
          4174: {},
          4175: {},
          4176: {},
          4177: {},
          4187: {},
          4188: { f: parse_ClrtClient },
          4189: {},
          4191: {},
          4192: {},
          4193: {},
          4194: {},
          4195: {},
          4196: {},
          4197: {},
          4198: {},
          4199: {},
          4200: {},
          0: { f: parse_Dimensions },
          1: {},
          2: { f: parse_BIFF2INT },
          3: { f: parse_BIFF2NUM },
          4: { f: parse_BIFF2STR },
          5: { f: parse_BIFF2BOOLERR },
          7: { f: parse_BIFF2STRING },
          8: {},
          9: { f: parse_BOF },
          11: {},
          22: { f: parseuint16 },
          30: { f: parse_BIFF2Format },
          31: {},
          32: {},
          33: { f: parse_Array },
          36: {},
          37: { f: parse_DefaultRowHeight },
          50: { f: parse_BIFF2FONTXTRA },
          62: {},
          52: {},
          67: { f: parse_BIFF2XF },
          68: { f: parseuint16 },
          69: {},
          86: {},
          126: {},
          127: { f: parse_ImData },
          135: {},
          136: {},
          137: {},
          143: { f: parse_BIFF4SheetInfo },
          145: {},
          148: {},
          149: {},
          150: {},
          169: {},
          171: {},
          188: {},
          191: {},
          192: {},
          194: {},
          195: {},
          214: { f: parse_RString },
          223: {},
          234: {},
          354: {},
          421: {},
          518: { f: parse_Formula },
          521: { f: parse_BOF },
          536: { f: parse_Lbl },
          547: { f: parse_ExternName },
          561: {},
          579: { f: parse_BIFF3XF },
          1030: { f: parse_Formula },
          1033: { f: parse_BOF },
          1091: { f: parse_BIFF4XF },
          2157: {},
          2163: {},
          2177: {},
          2240: {},
          2241: {},
          2242: {},
          2243: {},
          2244: {},
          2245: {},
          2246: {},
          2247: {},
          2248: {},
          2249: {},
          2250: {},
          2251: {},
          2262: { r: 12 },
          101: {},
          102: {},
          105: {},
          106: {},
          107: {},
          109: {},
          112: {},
          114: {},
          29282: {}
        };
        function write_biff_rec(ba, type, payload, length) {
          var t5 = type;
          if (isNaN(t5))
            return;
          var len = length || (payload || []).length || 0;
          var o6 = ba.next(4);
          o6.write_shift(2, t5);
          o6.write_shift(2, len);
          if (len > 0 && is_buf(payload))
            ba.push(payload);
        }
        function write_biff_continue(ba, type, payload, length) {
          var len = length || (payload || []).length || 0;
          if (len <= 8224)
            return write_biff_rec(ba, type, payload, len);
          var t5 = type;
          if (isNaN(t5))
            return;
          var parts = payload.parts || [], sidx = 0;
          var i6 = 0, w3 = 0;
          while (w3 + (parts[sidx] || 8224) <= 8224) {
            w3 += parts[sidx] || 8224;
            sidx++;
          }
          var o6 = ba.next(4);
          o6.write_shift(2, t5);
          o6.write_shift(2, w3);
          ba.push(payload.slice(i6, i6 + w3));
          i6 += w3;
          while (i6 < len) {
            o6 = ba.next(4);
            o6.write_shift(2, 60);
            w3 = 0;
            while (w3 + (parts[sidx] || 8224) <= 8224) {
              w3 += parts[sidx] || 8224;
              sidx++;
            }
            o6.write_shift(2, w3);
            ba.push(payload.slice(i6, i6 + w3));
            i6 += w3;
          }
        }
        function write_BIFF2BERR(r6, c8, val2, t5) {
          var out = new_buf(9);
          write_BIFF2Cell(out, r6, c8);
          write_Bes(val2, t5 || "b", out);
          return out;
        }
        function write_BIFF2LABEL(r6, c8, val2) {
          var out = new_buf(8 + 2 * val2.length);
          write_BIFF2Cell(out, r6, c8);
          out.write_shift(1, val2.length);
          out.write_shift(val2.length, val2, "sbcs");
          return out.l < out.length ? out.slice(0, out.l) : out;
        }
        function write_comments_biff2(ba, comments) {
          comments.forEach(function(data) {
            var text = data[0].map(function(cc2) {
              return cc2.t;
            }).join("");
            if (text.length <= 2048)
              return write_biff_rec(ba, 28, write_NOTE_BIFF2(text, data[1], data[2]));
            write_biff_rec(ba, 28, write_NOTE_BIFF2(text.slice(0, 2048), data[1], data[2], text.length));
            for (var i6 = 2048; i6 < text.length; i6 += 2048)
              write_biff_rec(ba, 28, write_NOTE_BIFF2(text.slice(i6, Math.min(i6 + 2048, text.length)), -1, -1, Math.min(2048, text.length - i6)));
          });
        }
        function write_ws_biff2_cell(ba, cell, R2, C6, opts, date1904) {
          var ifmt = 0;
          if (cell.z != null) {
            ifmt = opts._BIFF2FmtTable.indexOf(cell.z);
            if (ifmt == -1) {
              opts._BIFF2FmtTable.push(cell.z);
              ifmt = opts._BIFF2FmtTable.length - 1;
            }
          }
          var ixfe = 0;
          if (cell.z != null) {
            for (; ixfe < opts.cellXfs.length; ++ixfe)
              if (opts.cellXfs[ixfe].numFmtId == ifmt)
                break;
            if (ixfe == opts.cellXfs.length)
              opts.cellXfs.push({ numFmtId: ifmt });
          }
          if (cell.v != null)
            switch (cell.t) {
              case "d":
              case "n":
                var v4 = cell.t == "d" ? datenum(parseDate(cell.v, date1904), date1904) : cell.v;
                if (opts.biff == 2 && v4 == (v4 | 0) && v4 >= 0 && v4 < 65536)
                  write_biff_rec(ba, 2, write_BIFF2INT(R2, C6, v4, ixfe, ifmt));
                else if (isNaN(v4))
                  write_biff_rec(ba, 5, write_BIFF2BERR(R2, C6, 36, "e"));
                else if (!isFinite(v4))
                  write_biff_rec(ba, 5, write_BIFF2BERR(R2, C6, 7, "e"));
                else
                  write_biff_rec(ba, 3, write_BIFF2NUM(R2, C6, v4, ixfe, ifmt));
                return;
              case "b":
              case "e":
                write_biff_rec(ba, 5, write_BIFF2BERR(R2, C6, cell.v, cell.t));
                return;
              case "s":
              case "str":
                write_biff_rec(ba, 4, write_BIFF2LABEL(R2, C6, cell.v == null ? "" : String(cell.v).slice(0, 255)));
                return;
            }
          write_biff_rec(ba, 1, write_BIFF2Cell(null, R2, C6));
        }
        function write_ws_biff2(ba, ws, idx, opts, wb) {
          var dense = ws["!data"] != null;
          var range = safe_decode_range(ws["!ref"] || "A1"), rr = "", cols = [];
          if (range.e.c > 255 || range.e.r > 16383) {
            if (opts.WTF)
              throw new Error("Range " + (ws["!ref"] || "A1") + " exceeds format limit A1:IV16384");
            range.e.c = Math.min(range.e.c, 255);
            range.e.r = Math.min(range.e.r, 16383);
          }
          var date1904 = (((wb || {}).Workbook || {}).WBProps || {}).date1904;
          var row = [], comments = [];
          for (var C6 = range.s.c; C6 <= range.e.c; ++C6)
            cols[C6] = encode_col(C6);
          for (var R2 = range.s.r; R2 <= range.e.r; ++R2) {
            if (dense)
              row = ws["!data"][R2] || [];
            rr = encode_row(R2);
            for (C6 = range.s.c; C6 <= range.e.c; ++C6) {
              var cell = dense ? row[C6] : ws[cols[C6] + rr];
              if (!cell)
                continue;
              write_ws_biff2_cell(ba, cell, R2, C6, opts, date1904);
              if (cell.c)
                comments.push([cell.c, R2, C6]);
            }
          }
          write_comments_biff2(ba, comments);
        }
        function write_biff2_buf(wb, opts) {
          var o6 = opts || {};
          var ba = buf_array();
          var idx = 0;
          for (var i6 = 0; i6 < wb.SheetNames.length; ++i6)
            if (wb.SheetNames[i6] == o6.sheet)
              idx = i6;
          if (idx == 0 && !!o6.sheet && wb.SheetNames[0] != o6.sheet)
            throw new Error("Sheet not found: " + o6.sheet);
          write_biff_rec(ba, o6.biff == 4 ? 1033 : o6.biff == 3 ? 521 : 9, write_BOF(wb, 16, o6));
          if (((wb.Workbook || {}).WBProps || {}).date1904)
            write_biff_rec(ba, 34, writebool(true));
          o6.cellXfs = [{ numFmtId: 0 }];
          o6._BIFF2FmtTable = ["General"];
          o6._Fonts = [];
          var body = buf_array();
          write_ws_biff2(body, wb.Sheets[wb.SheetNames[idx]], idx, o6, wb);
          o6._BIFF2FmtTable.forEach(function(f2) {
            if (o6.biff <= 3)
              write_biff_rec(ba, 30, write_BIFF2Format(f2));
            else
              write_biff_rec(ba, 1054, write_BIFF4Format(f2));
          });
          o6.cellXfs.forEach(function(xf) {
            switch (o6.biff) {
              case 2:
                write_biff_rec(ba, 67, write_BIFF2XF(xf));
                break;
              case 3:
                write_biff_rec(ba, 579, write_BIFF3XF(xf));
                break;
              case 4:
                write_biff_rec(ba, 1091, write_BIFF4XF(xf));
                break;
            }
          });
          delete o6._BIFF2FmtTable;
          delete o6.cellXfs;
          delete o6._Fonts;
          ba.push(body.end());
          write_biff_rec(ba, 10);
          return ba.end();
        }
        var b8oid = 1, b8ocnts = [];
        function write_MsoDrawingGroup() {
          var buf = new_buf(82 + 8 * b8ocnts.length);
          buf.write_shift(2, 15);
          buf.write_shift(2, 61440);
          buf.write_shift(4, 74 + 8 * b8ocnts.length);
          {
            buf.write_shift(2, 0);
            buf.write_shift(2, 61446);
            buf.write_shift(4, 16 + 8 * b8ocnts.length);
            {
              buf.write_shift(4, b8oid);
              buf.write_shift(4, b8ocnts.length + 1);
              var acc = 0;
              for (var i6 = 0; i6 < b8ocnts.length; ++i6)
                acc += b8ocnts[i6] && b8ocnts[i6][1] || 0;
              buf.write_shift(4, acc);
              buf.write_shift(4, b8ocnts.length);
            }
            b8ocnts.forEach(function(b8) {
              buf.write_shift(4, b8[0]);
              buf.write_shift(4, b8[2]);
            });
          }
          {
            buf.write_shift(2, 51);
            buf.write_shift(2, 61451);
            buf.write_shift(4, 18);
            buf.write_shift(2, 191);
            buf.write_shift(4, 524296);
            buf.write_shift(2, 385);
            buf.write_shift(4, 134217793);
            buf.write_shift(2, 448);
            buf.write_shift(4, 134217792);
          }
          {
            buf.write_shift(2, 64);
            buf.write_shift(2, 61726);
            buf.write_shift(4, 16);
            buf.write_shift(4, 134217741);
            buf.write_shift(4, 134217740);
            buf.write_shift(4, 134217751);
            buf.write_shift(4, 268435703);
          }
          return buf;
        }
        function write_comments_biff8(ba, comments) {
          var notes = [], sz = 0, pl = buf_array(), baseid = b8oid;
          var _oasc;
          comments.forEach(function(c8, ci) {
            var author = "";
            var text = c8[0].map(function(t5) {
              if (t5.a && !author)
                author = t5.a;
              return t5.t;
            }).join("");
            ++b8oid;
            {
              var oasc = new_buf(150);
              oasc.write_shift(2, 15);
              oasc.write_shift(2, 61444);
              oasc.write_shift(4, 150);
              {
                oasc.write_shift(2, 3234);
                oasc.write_shift(2, 61450);
                oasc.write_shift(4, 8);
                oasc.write_shift(4, b8oid);
                oasc.write_shift(4, 2560);
              }
              {
                oasc.write_shift(2, 227);
                oasc.write_shift(2, 61451);
                oasc.write_shift(4, 84);
                oasc.write_shift(2, 128);
                oasc.write_shift(4, 0);
                oasc.write_shift(2, 139);
                oasc.write_shift(4, 2);
                oasc.write_shift(2, 191);
                oasc.write_shift(4, 524296);
                oasc.write_shift(2, 344);
                oasc.l += 4;
                oasc.write_shift(2, 385);
                oasc.write_shift(4, 134217808);
                oasc.write_shift(2, 387);
                oasc.write_shift(4, 134217808);
                oasc.write_shift(2, 389);
                oasc.write_shift(4, 268435700);
                oasc.write_shift(2, 447);
                oasc.write_shift(4, 1048592);
                oasc.write_shift(2, 448);
                oasc.write_shift(4, 134217809);
                oasc.write_shift(2, 451);
                oasc.write_shift(4, 268435700);
                oasc.write_shift(2, 513);
                oasc.write_shift(4, 134217809);
                oasc.write_shift(2, 515);
                oasc.write_shift(4, 268435700);
                oasc.write_shift(2, 575);
                oasc.write_shift(4, 196609);
                oasc.write_shift(2, 959);
                oasc.write_shift(4, 131072 | (c8[0].hidden ? 2 : 0));
              }
              {
                oasc.l += 2;
                oasc.write_shift(2, 61456);
                oasc.write_shift(4, 18);
                oasc.write_shift(2, 3);
                oasc.write_shift(2, c8[2] + 2);
                oasc.l += 2;
                oasc.write_shift(2, c8[1] + 1);
                oasc.l += 2;
                oasc.write_shift(2, c8[2] + 4);
                oasc.l += 2;
                oasc.write_shift(2, c8[1] + 5);
                oasc.l += 2;
              }
              {
                oasc.l += 2;
                oasc.write_shift(2, 61457);
                oasc.l += 4;
              }
              oasc.l = 150;
              if (ci == 0)
                _oasc = oasc;
              else
                write_biff_rec(pl, 236, oasc);
            }
            sz += 150;
            {
              var obj = new_buf(52);
              obj.write_shift(2, 21);
              obj.write_shift(2, 18);
              obj.write_shift(2, 25);
              obj.write_shift(2, b8oid);
              obj.write_shift(2, 0);
              obj.l = 22;
              obj.write_shift(2, 13);
              obj.write_shift(2, 22);
              obj.write_shift(4, 1651663474);
              obj.write_shift(4, 2503426821);
              obj.write_shift(4, 2150634280);
              obj.write_shift(4, 1768515844 + b8oid * 256);
              obj.write_shift(2, 0);
              obj.write_shift(4, 0);
              obj.l += 4;
              write_biff_rec(pl, 93, obj);
            }
            {
              var oact = new_buf(8);
              oact.l += 2;
              oact.write_shift(2, 61453);
              oact.l += 4;
              write_biff_rec(pl, 236, oact);
            }
            sz += 8;
            {
              var txo = new_buf(18);
              txo.write_shift(2, 18);
              txo.l += 8;
              txo.write_shift(2, text.length);
              txo.write_shift(2, 16);
              txo.l += 4;
              write_biff_rec(pl, 438, txo);
              {
                var cont = new_buf(1 + text.length);
                cont.write_shift(1, 0);
                cont.write_shift(text.length, text, "sbcs");
                write_biff_rec(pl, 60, cont);
              }
              {
                var conf = new_buf(16);
                conf.l += 8;
                conf.write_shift(2, text.length);
                conf.l += 6;
                write_biff_rec(pl, 60, conf);
              }
            }
            {
              var notesh = new_buf(12 + author.length);
              notesh.write_shift(2, c8[1]);
              notesh.write_shift(2, c8[2]);
              notesh.write_shift(2, 0 | (c8[0].hidden ? 0 : 2));
              notesh.write_shift(2, b8oid);
              notesh.write_shift(2, author.length);
              notesh.write_shift(1, 0);
              notesh.write_shift(author.length, author, "sbcs");
              notesh.l++;
              notes.push(notesh);
            }
          });
          {
            var hdr = new_buf(80);
            hdr.write_shift(2, 15);
            hdr.write_shift(2, 61442);
            hdr.write_shift(4, sz + hdr.length - 8);
            {
              hdr.write_shift(2, 16);
              hdr.write_shift(2, 61448);
              hdr.write_shift(4, 8);
              hdr.write_shift(4, comments.length + 1);
              hdr.write_shift(4, b8oid);
            }
            {
              hdr.write_shift(2, 15);
              hdr.write_shift(2, 61443);
              hdr.write_shift(4, sz + 48);
              {
                hdr.write_shift(2, 15);
                hdr.write_shift(2, 61444);
                hdr.write_shift(4, 40);
                {
                  hdr.write_shift(2, 1);
                  hdr.write_shift(2, 61449);
                  hdr.write_shift(4, 16);
                  hdr.l += 16;
                }
                {
                  hdr.write_shift(2, 2);
                  hdr.write_shift(2, 61450);
                  hdr.write_shift(4, 8);
                  hdr.write_shift(4, baseid);
                  hdr.write_shift(4, 5);
                }
              }
            }
            write_biff_rec(ba, 236, _oasc ? bconcat([hdr, _oasc]) : hdr);
          }
          ba.push(pl.end());
          notes.forEach(function(n6) {
            write_biff_rec(ba, 28, n6);
          });
          b8ocnts.push([baseid, comments.length + 1, b8oid]);
          ++b8oid;
        }
        function write_FONTS_biff8(ba, data, opts) {
          write_biff_rec(ba, 49, write_Font({
            sz: 12,
            color: { theme: 1 },
            name: "Arial",
            family: 2,
            scheme: "minor"
          }, opts));
        }
        function write_FMTS_biff8(ba, NF, opts) {
          if (!NF)
            return;
          [[5, 8], [23, 26], [41, 44], [50, 392]].forEach(function(r6) {
            for (var i6 = r6[0]; i6 <= r6[1]; ++i6)
              if (NF[i6] != null)
                write_biff_rec(ba, 1054, write_Format(i6, NF[i6], opts));
          });
        }
        function write_FEAT(ba, ws) {
          var o6 = new_buf(19);
          o6.write_shift(4, 2151);
          o6.write_shift(4, 0);
          o6.write_shift(4, 0);
          o6.write_shift(2, 3);
          o6.write_shift(1, 1);
          o6.write_shift(4, 0);
          write_biff_rec(ba, 2151, o6);
          o6 = new_buf(39);
          o6.write_shift(4, 2152);
          o6.write_shift(4, 0);
          o6.write_shift(4, 0);
          o6.write_shift(2, 3);
          o6.write_shift(1, 0);
          o6.write_shift(4, 0);
          o6.write_shift(2, 1);
          o6.write_shift(4, 4);
          o6.write_shift(2, 0);
          write_Ref8U(safe_decode_range(ws["!ref"] || "A1"), o6);
          o6.write_shift(4, 4);
          write_biff_rec(ba, 2152, o6);
        }
        function write_CELLXFS_biff8(ba, opts) {
          for (var i6 = 0; i6 < 16; ++i6)
            write_biff_rec(ba, 224, write_XF({ numFmtId: 0, style: true }, 0, opts));
          opts.cellXfs.forEach(function(c8) {
            write_biff_rec(ba, 224, write_XF(c8, 0, opts));
          });
        }
        function write_ws_biff8_hlinks(ba, ws) {
          for (var R2 = 0; R2 < ws["!links"].length; ++R2) {
            var HL = ws["!links"][R2];
            write_biff_rec(ba, 440, write_HLink(HL));
            if (HL[1].Tooltip)
              write_biff_rec(ba, 2048, write_HLinkTooltip(HL));
          }
          delete ws["!links"];
        }
        function write_ws_cols_biff8(ba, cols) {
          if (!cols)
            return;
          var cnt = 0;
          cols.forEach(function(col, idx) {
            if (++cnt <= 256 && col) {
              write_biff_rec(ba, 125, write_ColInfo(col_obj_w(idx, col), idx));
            }
          });
        }
        function write_ws_biff8_cell(ba, cell, R2, C6, opts, date1904) {
          var os = 16 + get_cell_style(opts.cellXfs, cell, opts);
          if (cell.v == null && !cell.bf) {
            write_biff_rec(ba, 513, write_XLSCell(R2, C6, os));
            return;
          }
          if (cell.bf)
            write_biff_rec(ba, 6, write_Formula(cell, R2, C6, opts, os));
          else
            switch (cell.t) {
              case "d":
              case "n":
                var v4 = cell.t == "d" ? datenum(parseDate(cell.v, date1904), date1904) : cell.v;
                if (isNaN(v4))
                  write_biff_rec(ba, 517, write_BoolErr(R2, C6, 36, os, opts, "e"));
                else if (!isFinite(v4))
                  write_biff_rec(ba, 517, write_BoolErr(R2, C6, 7, os, opts, "e"));
                else
                  write_biff_rec(ba, 515, write_Number(R2, C6, v4, os, opts));
                break;
              case "b":
              case "e":
                write_biff_rec(ba, 517, write_BoolErr(R2, C6, cell.v, os, opts, cell.t));
                break;
              case "s":
              case "str":
                if (opts.bookSST) {
                  var isst = get_sst_id(opts.Strings, cell.v == null ? "" : String(cell.v), opts.revStrings);
                  write_biff_rec(ba, 253, write_LabelSst(R2, C6, isst, os, opts));
                } else
                  write_biff_rec(ba, 516, write_Label(R2, C6, (cell.v == null ? "" : String(cell.v)).slice(0, 255), os, opts));
                break;
              default:
                write_biff_rec(ba, 513, write_XLSCell(R2, C6, os));
            }
        }
        function write_ws_biff8(idx, opts, wb) {
          var ba = buf_array();
          var s3 = wb.SheetNames[idx], ws = wb.Sheets[s3] || {};
          var _WB = (wb || {}).Workbook || {};
          var _sheet = (_WB.Sheets || [])[idx] || {};
          var dense = ws["!data"] != null;
          var b8 = opts.biff == 8;
          var ref, rr = "", cols = [];
          var range = safe_decode_range(ws["!ref"] || "A1");
          var MAX_ROWS = b8 ? 65536 : 16384;
          if (range.e.c > 255 || range.e.r >= MAX_ROWS) {
            if (opts.WTF)
              throw new Error("Range " + (ws["!ref"] || "A1") + " exceeds format limit A1:IV" + MAX_ROWS);
            range.e.c = Math.min(range.e.c, 255);
            range.e.r = Math.min(range.e.r, MAX_ROWS - 1);
          }
          write_biff_rec(ba, 2057, write_BOF(wb, 16, opts));
          write_biff_rec(ba, 13, writeuint16(1));
          write_biff_rec(ba, 12, writeuint16(100));
          write_biff_rec(ba, 15, writebool(true));
          write_biff_rec(ba, 17, writebool(false));
          write_biff_rec(ba, 16, write_Xnum(1e-3));
          write_biff_rec(ba, 95, writebool(true));
          write_biff_rec(ba, 42, writebool(false));
          write_biff_rec(ba, 43, writebool(false));
          write_biff_rec(ba, 130, writeuint16(1));
          write_biff_rec(ba, 128, write_Guts([0, 0]));
          write_biff_rec(ba, 131, writebool(false));
          write_biff_rec(ba, 132, writebool(false));
          if (b8)
            write_ws_cols_biff8(ba, ws["!cols"]);
          write_biff_rec(ba, 512, write_Dimensions(range, opts));
          var date1904 = (((wb || {}).Workbook || {}).WBProps || {}).date1904;
          if (b8)
            ws["!links"] = [];
          for (var C6 = range.s.c; C6 <= range.e.c; ++C6)
            cols[C6] = encode_col(C6);
          var comments = [];
          var row = [];
          for (var R2 = range.s.r; R2 <= range.e.r; ++R2) {
            if (dense)
              row = ws["!data"][R2] || [];
            rr = encode_row(R2);
            for (C6 = range.s.c; C6 <= range.e.c; ++C6) {
              var cell = dense ? row[C6] : ws[cols[C6] + rr];
              if (!cell)
                continue;
              write_ws_biff8_cell(ba, cell, R2, C6, opts, date1904);
              if (b8 && cell.l)
                ws["!links"].push([cols[C6] + rr, cell.l]);
              if (cell.c)
                comments.push([cell.c, R2, C6]);
            }
          }
          var cname = _sheet.CodeName || _sheet.name || s3;
          if (b8)
            write_comments_biff8(ba, comments);
          else
            write_comments_biff2(ba, comments);
          if (b8)
            write_biff_rec(ba, 574, write_Window2((_WB.Views || [])[0]));
          if (b8 && (ws["!merges"] || []).length)
            write_biff_rec(ba, 229, write_MergeCells(ws["!merges"]));
          if (b8)
            write_ws_biff8_hlinks(ba, ws);
          write_biff_rec(ba, 442, write_XLUnicodeString(cname, opts));
          if (b8)
            write_FEAT(ba, ws);
          write_biff_rec(ba, 10);
          return ba.end();
        }
        function write_biff8_global(wb, bufs, opts) {
          var A4 = buf_array();
          var _WB = (wb || {}).Workbook || {};
          var _sheets = _WB.Sheets || [];
          var _wb = _WB.WBProps || {};
          var b8 = opts.biff == 8, b5 = opts.biff == 5;
          write_biff_rec(A4, 2057, write_BOF(wb, 5, opts));
          if (opts.bookType == "xla")
            write_biff_rec(A4, 135);
          write_biff_rec(A4, 225, b8 ? writeuint16(1200) : null);
          write_biff_rec(A4, 193, writezeroes(2));
          if (b5)
            write_biff_rec(A4, 191);
          if (b5)
            write_biff_rec(A4, 192);
          write_biff_rec(A4, 226);
          write_biff_rec(A4, 92, write_WriteAccess("SheetJS", opts));
          write_biff_rec(A4, 66, writeuint16(b8 ? 1200 : 1252));
          if (b8)
            write_biff_rec(A4, 353, writeuint16(0));
          if (b8)
            write_biff_rec(A4, 448);
          write_biff_rec(A4, 317, write_RRTabId(wb.SheetNames.length));
          if (b8 && wb.vbaraw)
            write_biff_rec(A4, 211);
          if (b8 && wb.vbaraw) {
            var cname = _wb.CodeName || "ThisWorkbook";
            write_biff_rec(A4, 442, write_XLUnicodeString(cname, opts));
          }
          write_biff_rec(A4, 156, writeuint16(17));
          write_biff_rec(A4, 25, writebool(false));
          write_biff_rec(A4, 18, writebool(false));
          write_biff_rec(A4, 19, writeuint16(0));
          if (b8)
            write_biff_rec(A4, 431, writebool(false));
          if (b8)
            write_biff_rec(A4, 444, writeuint16(0));
          write_biff_rec(A4, 61, write_Window1(opts));
          write_biff_rec(A4, 64, writebool(false));
          write_biff_rec(A4, 141, writeuint16(0));
          write_biff_rec(A4, 34, writebool(safe1904(wb) == "true"));
          write_biff_rec(A4, 14, writebool(true));
          if (b8)
            write_biff_rec(A4, 439, writebool(false));
          write_biff_rec(A4, 218, writeuint16(0));
          write_FONTS_biff8(A4, wb, opts);
          write_FMTS_biff8(A4, wb.SSF, opts);
          write_CELLXFS_biff8(A4, opts);
          if (b8)
            write_biff_rec(A4, 352, writebool(false));
          var a2 = A4.end();
          var C6 = buf_array();
          if (b8)
            write_biff_rec(C6, 140, write_Country());
          if (b8 && b8ocnts.length)
            write_biff_rec(C6, 235, write_MsoDrawingGroup());
          if (b8 && opts.Strings)
            write_biff_continue(C6, 252, write_SST(opts.Strings, opts));
          write_biff_rec(C6, 10);
          var c8 = C6.end();
          var B5 = buf_array();
          var blen = 0, j3 = 0;
          for (j3 = 0; j3 < wb.SheetNames.length; ++j3)
            blen += (b8 ? 12 : 11) + (b8 ? 2 : 1) * wb.SheetNames[j3].length;
          var start2 = a2.length + blen + c8.length;
          for (j3 = 0; j3 < wb.SheetNames.length; ++j3) {
            var _sheet = _sheets[j3] || {};
            write_biff_rec(B5, 133, write_BoundSheet8({ pos: start2, hs: _sheet.Hidden || 0, dt: 0, name: wb.SheetNames[j3] }, opts));
            start2 += bufs[j3].length;
          }
          var b3 = B5.end();
          if (blen != b3.length)
            throw new Error("BS8 " + blen + " != " + b3.length);
          var out = [];
          if (a2.length)
            out.push(a2);
          if (b3.length)
            out.push(b3);
          if (c8.length)
            out.push(c8);
          return bconcat(out);
        }
        function write_biff8_buf(wb, opts) {
          var o6 = opts || {};
          var bufs = [];
          if (wb && !wb.SSF) {
            wb.SSF = dup(table_fmt);
          }
          if (wb && wb.SSF) {
            make_ssf();
            SSF_load_table(wb.SSF);
            o6.revssf = evert_num(wb.SSF);
            o6.revssf[wb.SSF[65535]] = 0;
            o6.ssf = wb.SSF;
          }
          b8oid = 1;
          b8ocnts = [];
          o6.Strings = [];
          o6.Strings.Count = 0;
          o6.Strings.Unique = 0;
          fix_write_opts(o6);
          o6.cellXfs = [];
          get_cell_style(o6.cellXfs, {}, { revssf: { "General": 0 } });
          if (!wb.Props)
            wb.Props = {};
          for (var i6 = 0; i6 < wb.SheetNames.length; ++i6)
            bufs[bufs.length] = write_ws_biff8(i6, o6, wb);
          bufs.unshift(write_biff8_global(wb, bufs, o6));
          return bconcat(bufs);
        }
        function write_biff_buf(wb, opts) {
          for (var i6 = 0; i6 <= wb.SheetNames.length; ++i6) {
            var ws = wb.Sheets[wb.SheetNames[i6]];
            if (!ws || !ws["!ref"])
              continue;
            var range = decode_range(ws["!ref"]);
            if (range.e.c > 255) {
              if (typeof console != "undefined" && console.error)
                console.error("Worksheet '" + wb.SheetNames[i6] + "' extends beyond column IV (255).  Data may be lost.");
            }
            if (range.e.r > 65535) {
              if (typeof console != "undefined" && console.error)
                console.error("Worksheet '" + wb.SheetNames[i6] + "' extends beyond row 65536.  Data may be lost.");
            }
          }
          var o6 = opts || {};
          switch (o6.biff || 2) {
            case 8:
            case 5:
              return write_biff8_buf(wb, opts);
            case 4:
            case 3:
            case 2:
              return write_biff2_buf(wb, opts);
          }
          throw new Error("invalid type " + o6.bookType + " for BIFF");
        }
        function html_to_sheet(str, _opts) {
          var opts = _opts || {};
          var dense = opts.dense != null ? opts.dense : DENSE;
          var ws = {};
          if (dense)
            ws["!data"] = [];
          str = str_remove_ng(str, "<!--", "-->");
          var mtch = str.match(/<table/i);
          if (!mtch)
            throw new Error("Invalid HTML: could not find <table>");
          var mtch2 = str.match(/<\/table/i);
          var i6 = mtch.index, j3 = mtch2 && mtch2.index || str.length;
          var rows = split_regex(str.slice(i6, j3), /(:?<tr[^<>]*>)/i, "<tr>");
          var R2 = -1, C6 = 0, RS = 0, CS = 0;
          var range = { s: { r: 1e7, c: 1e7 }, e: { r: 0, c: 0 } };
          var merges = [];
          for (i6 = 0; i6 < rows.length; ++i6) {
            var row = rows[i6].trim();
            var hd = row.slice(0, 3).toLowerCase();
            if (hd == "<tr") {
              ++R2;
              if (opts.sheetRows && opts.sheetRows <= R2) {
                --R2;
                break;
              }
              C6 = 0;
              continue;
            }
            if (hd != "<td" && hd != "<th")
              continue;
            var cells = row.split(/<\/t[dh]>/i);
            for (j3 = 0; j3 < cells.length; ++j3) {
              var cell = cells[j3].trim();
              if (!cell.match(/<t[dh]/i))
                continue;
              var m4 = cell, cc2 = 0;
              while (m4.charAt(0) == "<" && (cc2 = m4.indexOf(">")) > -1)
                m4 = m4.slice(cc2 + 1);
              for (var midx = 0; midx < merges.length; ++midx) {
                var _merge = merges[midx];
                if (_merge.s.c == C6 && _merge.s.r < R2 && R2 <= _merge.e.r) {
                  C6 = _merge.e.c + 1;
                  midx = -1;
                }
              }
              var tag = parsexmltag(cell.slice(0, cell.indexOf(">")));
              CS = tag.colspan ? +tag.colspan : 1;
              if ((RS = +tag.rowspan) > 1 || CS > 1)
                merges.push({ s: { r: R2, c: C6 }, e: { r: R2 + (RS || 1) - 1, c: C6 + CS - 1 } });
              var _t2 = tag.t || tag["data-t"] || "";
              if (!m4.length) {
                C6 += CS;
                continue;
              }
              m4 = htmldecode(m4);
              if (range.s.r > R2)
                range.s.r = R2;
              if (range.e.r < R2)
                range.e.r = R2;
              if (range.s.c > C6)
                range.s.c = C6;
              if (range.e.c < C6)
                range.e.c = C6;
              if (!m4.length) {
                C6 += CS;
                continue;
              }
              var o6 = { t: "s", v: m4 };
              if (opts.raw || !m4.trim().length || _t2 == "s") {
              } else if (m4 === "TRUE")
                o6 = { t: "b", v: true };
              else if (m4 === "FALSE")
                o6 = { t: "b", v: false };
              else if (!isNaN(fuzzynum(m4)))
                o6 = { t: "n", v: fuzzynum(m4) };
              else if (!isNaN(fuzzydate(m4).getDate())) {
                o6 = { t: "d", v: parseDate(m4) };
                if (opts.UTC === false)
                  o6.v = utc_to_local(o6.v);
                if (!opts.cellDates)
                  o6 = { t: "n", v: datenum(o6.v) };
                o6.z = opts.dateNF || table_fmt[14];
              } else if (m4.charCodeAt(0) == 35 && RBErr[m4] != null) {
                o6.t = "e";
                o6.w = m4;
                o6.v = RBErr[m4];
              }
              if (o6.cellText !== false)
                o6.w = m4;
              if (dense) {
                if (!ws["!data"][R2])
                  ws["!data"][R2] = [];
                ws["!data"][R2][C6] = o6;
              } else
                ws[encode_cell({ r: R2, c: C6 })] = o6;
              C6 += CS;
            }
          }
          ws["!ref"] = encode_range(range);
          if (merges.length)
            ws["!merges"] = merges;
          return ws;
        }
        function make_html_row(ws, r6, R2, o6) {
          var M3 = ws["!merges"] || [];
          var oo = [];
          var sp = {};
          var dense = ws["!data"] != null;
          for (var C6 = r6.s.c; C6 <= r6.e.c; ++C6) {
            var RS = 0, CS = 0;
            for (var j3 = 0; j3 < M3.length; ++j3) {
              if (M3[j3].s.r > R2 || M3[j3].s.c > C6)
                continue;
              if (M3[j3].e.r < R2 || M3[j3].e.c < C6)
                continue;
              if (M3[j3].s.r < R2 || M3[j3].s.c < C6) {
                RS = -1;
                break;
              }
              RS = M3[j3].e.r - M3[j3].s.r + 1;
              CS = M3[j3].e.c - M3[j3].s.c + 1;
              break;
            }
            if (RS < 0)
              continue;
            var coord = encode_col(C6) + encode_row(R2);
            var cell = dense ? (ws["!data"][R2] || [])[C6] : ws[coord];
            if (cell && cell.t == "n" && cell.v != null && !isFinite(cell.v)) {
              if (isNaN(cell.v))
                cell = { t: "e", v: 36, w: BErr[36] };
              else
                cell = { t: "e", v: 7, w: BErr[7] };
            }
            var w3 = cell && cell.v != null && (cell.h || escapehtml(cell.w || (format_cell(cell), cell.w) || "")) || "";
            sp = {};
            if (RS > 1)
              sp.rowspan = RS;
            if (CS > 1)
              sp.colspan = CS;
            if (o6.editable)
              w3 = '<span contenteditable="true">' + w3 + "</span>";
            else if (cell) {
              sp["data-t"] = cell && cell.t || "z";
              if (cell.v != null)
                sp["data-v"] = escapehtml(cell.v instanceof Date ? cell.v.toISOString() : cell.v);
              if (cell.z != null)
                sp["data-z"] = cell.z;
              if (cell.l && (cell.l.Target || "#").charAt(0) != "#")
                w3 = '<a href="' + escapehtml(cell.l.Target) + '">' + w3 + "</a>";
            }
            sp.id = (o6.id || "sjs") + "-" + coord;
            oo.push(writextag("td", w3, sp));
          }
          var preamble = "<tr>";
          return preamble + oo.join("") + "</tr>";
        }
        var HTML_BEGIN = '<html><head><meta charset="utf-8"/><title>SheetJS Table Export</title></head><body>';
        var HTML_END = "</body></html>";
        function html_to_workbook(str, opts) {
          var mtch = str_match_xml_ig(str, "table");
          if (!mtch || mtch.length == 0)
            throw new Error("Invalid HTML: could not find <table>");
          if (mtch.length == 1) {
            var w3 = sheet_to_workbook(html_to_sheet(mtch[0], opts), opts);
            w3.bookType = "html";
            return w3;
          }
          var wb = book_new();
          mtch.forEach(function(s3, idx) {
            book_append_sheet(wb, html_to_sheet(s3, opts), "Sheet" + (idx + 1));
          });
          wb.bookType = "html";
          return wb;
        }
        function make_html_preamble(ws, R2, o6) {
          var out = [];
          return out.join("") + "<table" + (o6 && o6.id ? ' id="' + o6.id + '"' : "") + ">";
        }
        function sheet_to_html(ws, opts) {
          var o6 = opts || {};
          var header = o6.header != null ? o6.header : HTML_BEGIN;
          var footer = o6.footer != null ? o6.footer : HTML_END;
          var out = [header];
          var r6 = decode_range(ws["!ref"] || "A1");
          out.push(make_html_preamble(ws, r6, o6));
          if (ws["!ref"])
            for (var R2 = r6.s.r; R2 <= r6.e.r; ++R2)
              out.push(make_html_row(ws, r6, R2, o6));
          out.push("</table>" + footer);
          return out.join("");
        }
        function sheet_add_dom(ws, table, _opts) {
          var rows = table.rows;
          if (!rows) {
            throw "Unsupported origin when " + table.tagName + " is not a TABLE";
          }
          var opts = _opts || {};
          var dense = ws["!data"] != null;
          var or_R = 0, or_C = 0;
          if (opts.origin != null) {
            if (typeof opts.origin == "number")
              or_R = opts.origin;
            else {
              var _origin = typeof opts.origin == "string" ? decode_cell(opts.origin) : opts.origin;
              or_R = _origin.r;
              or_C = _origin.c;
            }
          }
          var sheetRows = Math.min(opts.sheetRows || 1e7, rows.length);
          var range = { s: { r: 0, c: 0 }, e: { r: or_R, c: or_C } };
          if (ws["!ref"]) {
            var _range = decode_range(ws["!ref"]);
            range.s.r = Math.min(range.s.r, _range.s.r);
            range.s.c = Math.min(range.s.c, _range.s.c);
            range.e.r = Math.max(range.e.r, _range.e.r);
            range.e.c = Math.max(range.e.c, _range.e.c);
            if (or_R == -1)
              range.e.r = or_R = _range.e.r + 1;
          }
          var merges = [], midx = 0;
          var rowinfo = ws["!rows"] || (ws["!rows"] = []);
          var _R = 0, R2 = 0, _C = 0, C6 = 0, RS = 0, CS = 0;
          if (!ws["!cols"])
            ws["!cols"] = [];
          for (; _R < rows.length && R2 < sheetRows; ++_R) {
            var row = rows[_R];
            if (is_dom_element_hidden(row)) {
              if (opts.display)
                continue;
              rowinfo[R2] = { hidden: true };
            }
            var elts = row.cells;
            for (_C = C6 = 0; _C < elts.length; ++_C) {
              var elt = elts[_C];
              if (opts.display && is_dom_element_hidden(elt))
                continue;
              var v4 = elt.hasAttribute("data-v") ? elt.getAttribute("data-v") : elt.hasAttribute("v") ? elt.getAttribute("v") : htmldecode(elt.innerHTML);
              var z3 = elt.getAttribute("data-z") || elt.getAttribute("z");
              for (midx = 0; midx < merges.length; ++midx) {
                var m4 = merges[midx];
                if (m4.s.c == C6 + or_C && m4.s.r < R2 + or_R && R2 + or_R <= m4.e.r) {
                  C6 = m4.e.c + 1 - or_C;
                  midx = -1;
                }
              }
              CS = +elt.getAttribute("colspan") || 1;
              if ((RS = +elt.getAttribute("rowspan") || 1) > 1 || CS > 1)
                merges.push({ s: { r: R2 + or_R, c: C6 + or_C }, e: { r: R2 + or_R + (RS || 1) - 1, c: C6 + or_C + (CS || 1) - 1 } });
              var o6 = { t: "s", v: v4 };
              var _t2 = elt.getAttribute("data-t") || elt.getAttribute("t") || "";
              if (v4 != null) {
                if (v4.length == 0)
                  o6.t = _t2 || "z";
                else if (opts.raw || v4.trim().length == 0 || _t2 == "s") {
                } else if (_t2 == "e" && BErr[+v4])
                  o6 = { t: "e", v: +v4, w: BErr[+v4] };
                else if (v4 === "TRUE")
                  o6 = { t: "b", v: true };
                else if (v4 === "FALSE")
                  o6 = { t: "b", v: false };
                else if (!isNaN(fuzzynum(v4)))
                  o6 = { t: "n", v: fuzzynum(v4) };
                else if (!isNaN(fuzzydate(v4).getDate())) {
                  o6 = { t: "d", v: parseDate(v4) };
                  if (opts.UTC)
                    o6.v = local_to_utc(o6.v);
                  if (!opts.cellDates)
                    o6 = { t: "n", v: datenum(o6.v) };
                  o6.z = opts.dateNF || table_fmt[14];
                } else if (v4.charCodeAt(0) == 35 && RBErr[v4] != null)
                  o6 = { t: "e", v: RBErr[v4], w: v4 };
              }
              if (o6.z === void 0 && z3 != null)
                o6.z = z3;
              var l5 = "", Aelts = elt.getElementsByTagName("A");
              if (Aelts && Aelts.length) {
                for (var Aelti = 0; Aelti < Aelts.length; ++Aelti)
                  if (Aelts[Aelti].hasAttribute("href")) {
                    l5 = Aelts[Aelti].getAttribute("href");
                    if (l5.charAt(0) != "#")
                      break;
                  }
              }
              if (l5 && l5.charAt(0) != "#" && l5.slice(0, 11).toLowerCase() != "javascript:")
                o6.l = { Target: l5 };
              if (dense) {
                if (!ws["!data"][R2 + or_R])
                  ws["!data"][R2 + or_R] = [];
                ws["!data"][R2 + or_R][C6 + or_C] = o6;
              } else
                ws[encode_cell({ c: C6 + or_C, r: R2 + or_R })] = o6;
              if (range.e.c < C6 + or_C)
                range.e.c = C6 + or_C;
              C6 += CS;
            }
            ++R2;
          }
          if (merges.length)
            ws["!merges"] = (ws["!merges"] || []).concat(merges);
          range.e.r = Math.max(range.e.r, R2 - 1 + or_R);
          ws["!ref"] = encode_range(range);
          if (R2 >= sheetRows)
            ws["!fullref"] = encode_range((range.e.r = rows.length - _R + R2 - 1 + or_R, range));
          return ws;
        }
        function parse_dom_table(table, _opts) {
          var opts = _opts || {};
          var ws = {};
          if (opts.dense)
            ws["!data"] = [];
          return sheet_add_dom(ws, table, _opts);
        }
        function table_to_book(table, opts) {
          var o6 = sheet_to_workbook(parse_dom_table(table, opts), opts);
          return o6;
        }
        function is_dom_element_hidden(element) {
          var display = "";
          var get_computed_style = get_get_computed_style_function(element);
          if (get_computed_style)
            display = get_computed_style(element).getPropertyValue("display");
          if (!display)
            display = element.style && element.style.display;
          return display === "none";
        }
        function get_get_computed_style_function(element) {
          if (element.ownerDocument.defaultView && typeof element.ownerDocument.defaultView.getComputedStyle === "function")
            return element.ownerDocument.defaultView.getComputedStyle;
          if (typeof getComputedStyle === "function")
            return getComputedStyle;
          return null;
        }
        function parse_text_p(text) {
          var fixed = text.replace(/[\t\r\n]/g, " ").trim().replace(/ +/g, " ").replace(/<text:s\/>/g, " ").replace(/<text:s text:c="(\d+)"\/>/g, function($$, $1) {
            return Array(parseInt($1, 10) + 1).join(" ");
          }).replace(/<text:tab[^<>]*\/>/g, "	").replace(/<text:line-break\/>/g, "\n");
          var v4 = unescapexml(fixed.replace(/<[^<>]*>/g, ""));
          return [v4];
        }
        function parse_ods_styles(d2, _opts, _nfm) {
          var number_format_map = _nfm || {};
          var str = xlml_normalize(d2);
          xlmlregex.lastIndex = 0;
          str = remove_doctype(str_remove_ng(str, "<!--", "-->"));
          var Rn2, NFtag, NF = "", tNF = "", y4, etpos = 0, tidx = -1, infmt = false, payload = "";
          while (Rn2 = xlmlregex.exec(str)) {
            switch (Rn2[3] = Rn2[3].replace(/_[\s\S]*$/, "")) {
              case "number-style":
              case "currency-style":
              case "percentage-style":
              case "date-style":
              case "time-style":
              case "text-style":
                if (Rn2[1] === "/") {
                  infmt = false;
                  if (NFtag["truncate-on-overflow"] == "false") {
                    if (NF.match(/h/))
                      NF = NF.replace(/h+/, "[$&]");
                    else if (NF.match(/m/))
                      NF = NF.replace(/m+/, "[$&]");
                    else if (NF.match(/s/))
                      NF = NF.replace(/s+/, "[$&]");
                  }
                  number_format_map[NFtag.name] = NF;
                  NF = "";
                } else if (Rn2[0].charAt(Rn2[0].length - 2) !== "/") {
                  infmt = true;
                  NF = "";
                  NFtag = parsexmltag(Rn2[0], false);
                }
                break;
              case "boolean-style":
                if (Rn2[1] === "/") {
                  infmt = false;
                  number_format_map[NFtag.name] = "General";
                  NF = "";
                } else if (Rn2[0].charAt(Rn2[0].length - 2) !== "/") {
                  infmt = true;
                  NF = "";
                  NFtag = parsexmltag(Rn2[0], false);
                }
                break;
              case "boolean":
                NF += "General";
                break;
              case "text":
                if (Rn2[1] === "/") {
                  payload = str.slice(tidx, xlmlregex.lastIndex - Rn2[0].length);
                  if (payload == "%" && NFtag[0] == "<number:percentage-style")
                    NF += "%";
                  else
                    NF += '"' + payload.replace(/"/g, '""') + '"';
                } else if (Rn2[0].charAt(Rn2[0].length - 2) !== "/") {
                  tidx = xlmlregex.lastIndex;
                }
                break;
              case "day":
                {
                  y4 = parsexmltag(Rn2[0], false);
                  switch (y4["style"]) {
                    case "short":
                      NF += "d";
                      break;
                    case "long":
                      NF += "dd";
                      break;
                    default:
                      NF += "dd";
                      break;
                  }
                }
                break;
              case "day-of-week":
                {
                  y4 = parsexmltag(Rn2[0], false);
                  switch (y4["style"]) {
                    case "short":
                      NF += "ddd";
                      break;
                    case "long":
                      NF += "dddd";
                      break;
                    default:
                      NF += "ddd";
                      break;
                  }
                }
                break;
              case "era":
                {
                  y4 = parsexmltag(Rn2[0], false);
                  switch (y4["style"]) {
                    case "short":
                      NF += "ee";
                      break;
                    case "long":
                      NF += "eeee";
                      break;
                    default:
                      NF += "eeee";
                      break;
                  }
                }
                break;
              case "hours":
                {
                  y4 = parsexmltag(Rn2[0], false);
                  switch (y4["style"]) {
                    case "short":
                      NF += "h";
                      break;
                    case "long":
                      NF += "hh";
                      break;
                    default:
                      NF += "hh";
                      break;
                  }
                }
                break;
              case "minutes":
                {
                  y4 = parsexmltag(Rn2[0], false);
                  switch (y4["style"]) {
                    case "short":
                      NF += "m";
                      break;
                    case "long":
                      NF += "mm";
                      break;
                    default:
                      NF += "mm";
                      break;
                  }
                }
                break;
              case "month":
                {
                  y4 = parsexmltag(Rn2[0], false);
                  if (y4["textual"])
                    NF += "mm";
                  switch (y4["style"]) {
                    case "short":
                      NF += "m";
                      break;
                    case "long":
                      NF += "mm";
                      break;
                    default:
                      NF += "m";
                      break;
                  }
                }
                break;
              case "seconds":
                {
                  y4 = parsexmltag(Rn2[0], false);
                  switch (y4["style"]) {
                    case "short":
                      NF += "s";
                      break;
                    case "long":
                      NF += "ss";
                      break;
                    default:
                      NF += "ss";
                      break;
                  }
                  if (y4["decimal-places"])
                    NF += "." + fill("0", +y4["decimal-places"]);
                }
                break;
              case "year":
                {
                  y4 = parsexmltag(Rn2[0], false);
                  switch (y4["style"]) {
                    case "short":
                      NF += "yy";
                      break;
                    case "long":
                      NF += "yyyy";
                      break;
                    default:
                      NF += "yy";
                      break;
                  }
                }
                break;
              case "am-pm":
                NF += "AM/PM";
                break;
              case "week-of-year":
              case "quarter":
                console.error("Excel does not support ODS format token " + Rn2[3]);
                break;
              case "fill-character":
                if (Rn2[1] === "/") {
                  payload = str.slice(tidx, xlmlregex.lastIndex - Rn2[0].length);
                  NF += '"' + payload.replace(/"/g, '""') + '"*';
                } else if (Rn2[0].charAt(Rn2[0].length - 2) !== "/") {
                  tidx = xlmlregex.lastIndex;
                }
                break;
              case "scientific-number":
                y4 = parsexmltag(Rn2[0], false);
                NF += "0." + fill("0", +y4["min-decimal-places"] || +y4["decimal-places"] || 2) + fill("?", +y4["decimal-places"] - +y4["min-decimal-places"] || 0) + "E" + (parsexmlbool(y4["forced-exponent-sign"]) ? "+" : "") + fill("0", +y4["min-exponent-digits"] || 2);
                break;
              case "fraction":
                y4 = parsexmltag(Rn2[0], false);
                if (!+y4["min-integer-digits"])
                  NF += "#";
                else
                  NF += fill("0", +y4["min-integer-digits"]);
                NF += " ";
                NF += fill("?", +y4["min-numerator-digits"] || 1);
                NF += "/";
                if (+y4["denominator-value"])
                  NF += y4["denominator-value"];
                else
                  NF += fill("?", +y4["min-denominator-digits"] || 1);
                break;
              case "currency-symbol":
                if (Rn2[1] === "/") {
                  NF += '"' + str.slice(tidx, xlmlregex.lastIndex - Rn2[0].length).replace(/"/g, '""') + '"';
                } else if (Rn2[0].charAt(Rn2[0].length - 2) !== "/") {
                  tidx = xlmlregex.lastIndex;
                } else
                  NF += "$";
                break;
              case "text-properties":
                y4 = parsexmltag(Rn2[0], false);
                switch ((y4["color"] || "").toLowerCase().replace("#", "")) {
                  case "ff0000":
                  case "red":
                    NF = "[Red]" + NF;
                    break;
                }
                break;
              case "text-content":
                NF += "@";
                break;
              case "map":
                y4 = parsexmltag(Rn2[0], false);
                if (unescapexml(y4["condition"]) == "value()>=0")
                  NF = number_format_map[y4["apply-style-name"]] + ";" + NF;
                else
                  console.error("ODS number format may be incorrect: " + y4["condition"]);
                break;
              case "number":
                if (Rn2[1] === "/")
                  break;
                y4 = parsexmltag(Rn2[0], false);
                tNF = "";
                tNF += fill("0", +y4["min-integer-digits"] || 1);
                if (parsexmlbool(y4["grouping"]))
                  tNF = commaify(fill("#", Math.max(0, 4 - tNF.length)) + tNF);
                if (+y4["min-decimal-places"] || +y4["decimal-places"])
                  tNF += ".";
                if (+y4["min-decimal-places"])
                  tNF += fill("0", +y4["min-decimal-places"] || 1);
                if (+y4["decimal-places"] - (+y4["min-decimal-places"] || 0))
                  tNF += fill("0", +y4["decimal-places"] - (+y4["min-decimal-places"] || 0));
                NF += tNF;
                break;
              case "embedded-text":
                if (Rn2[1] === "/") {
                  if (etpos == 0)
                    NF += '"' + str.slice(tidx, xlmlregex.lastIndex - Rn2[0].length).replace(/"/g, '""') + '"';
                  else
                    NF = NF.slice(0, etpos) + '"' + str.slice(tidx, xlmlregex.lastIndex - Rn2[0].length).replace(/"/g, '""') + '"' + NF.slice(etpos);
                } else if (Rn2[0].charAt(Rn2[0].length - 2) !== "/") {
                  tidx = xlmlregex.lastIndex;
                  etpos = -+parsexmltag(Rn2[0], false)["position"] || 0;
                }
                break;
            }
          }
          return number_format_map;
        }
        function parse_content_xml(d2, _opts, _nfm) {
          var opts = _opts || {};
          if (DENSE != null && opts.dense == null)
            opts.dense = DENSE;
          var str = xlml_normalize(d2);
          var state = [], tmp;
          var tag;
          var nfidx, NF = "", pidx = 0;
          var sheetag;
          var rowtag;
          var Sheets = {}, SheetNames = [];
          var ws = {};
          if (opts.dense)
            ws["!data"] = [];
          var Rn2, q3;
          var ctag = { value: "" }, ctag2 = {};
          var textp = "", textpidx = 0, textptag, oldtextp = "", oldtextpidx = 0;
          var textR = [], oldtextR = [];
          var R2 = -1, C6 = -1, range = { s: { r: 1e6, c: 1e7 }, e: { r: 0, c: 0 } };
          var row_ol = 0;
          var number_format_map = _nfm || {}, styles = {};
          var merges = [], mrange = {}, mR = 0, mC = 0;
          var rowinfo = [], rowpeat = 1, colpeat = 1;
          var arrayf = [];
          var WB = { Names: [], WBProps: {} };
          var atag = {};
          var _Ref = ["", ""];
          var comments = [], comment = {};
          var creator = "", creatoridx = 0;
          var isstub = false, intable = false;
          var i6 = 0;
          xlmlregex.lastIndex = 0;
          str = remove_doctype(str_remove_ng(str, "<!--", "-->"));
          while (Rn2 = xlmlregex.exec(str))
            switch (Rn2[3] = Rn2[3].replace(/_[\s\S]*$/, "")) {
              case "table":
              case "\u5DE5\u4F5C\u8868":
                if (Rn2[1] === "/") {
                  if (range.e.c >= range.s.c && range.e.r >= range.s.r)
                    ws["!ref"] = encode_range(range);
                  else
                    ws["!ref"] = "A1:A1";
                  if (opts.sheetRows > 0 && opts.sheetRows <= range.e.r) {
                    ws["!fullref"] = ws["!ref"];
                    range.e.r = opts.sheetRows - 1;
                    ws["!ref"] = encode_range(range);
                  }
                  if (merges.length)
                    ws["!merges"] = merges;
                  if (rowinfo.length)
                    ws["!rows"] = rowinfo;
                  sheetag.name = sheetag["\u540D\u79F0"] || sheetag.name;
                  if (typeof JSON !== "undefined")
                    JSON.stringify(sheetag);
                  SheetNames.push(sheetag.name);
                  Sheets[sheetag.name] = ws;
                  intable = false;
                } else if (Rn2[0].charAt(Rn2[0].length - 2) !== "/") {
                  sheetag = parsexmltag(Rn2[0], false);
                  R2 = C6 = -1;
                  range.s.r = range.s.c = 1e7;
                  range.e.r = range.e.c = 0;
                  ws = {};
                  if (opts.dense)
                    ws["!data"] = [];
                  merges = [];
                  rowinfo = [];
                  intable = true;
                }
                break;
              case "table-row-group":
                if (Rn2[1] === "/")
                  --row_ol;
                else
                  ++row_ol;
                break;
              case "table-row":
              case "\u884C":
                if (Rn2[1] === "/") {
                  R2 += rowpeat;
                  rowpeat = 1;
                  break;
                }
                rowtag = parsexmltag(Rn2[0], false);
                if (rowtag["\u884C\u53F7"])
                  R2 = rowtag["\u884C\u53F7"] - 1;
                else if (R2 == -1)
                  R2 = 0;
                rowpeat = +rowtag["number-rows-repeated"] || 1;
                if (rowpeat < 10) {
                  for (i6 = 0; i6 < rowpeat; ++i6)
                    if (row_ol > 0)
                      rowinfo[R2 + i6] = { level: row_ol };
                }
                C6 = -1;
                break;
              case "covered-table-cell":
                if (Rn2[1] !== "/") {
                  ++C6;
                  ctag = parsexmltag(Rn2[0], false);
                  colpeat = parseInt(ctag["number-columns-repeated"] || "1", 10) || 1;
                  if (opts.sheetStubs) {
                    while (colpeat-- > 0) {
                      if (opts.dense) {
                        if (!ws["!data"][R2])
                          ws["!data"][R2] = [];
                        ws["!data"][R2][C6] = { t: "z" };
                      } else
                        ws[encode_cell({ r: R2, c: C6 })] = { t: "z" };
                      ++C6;
                    }
                    --C6;
                  } else
                    C6 += colpeat - 1;
                }
                textp = "";
                textR = [];
                break;
              case "table-cell":
              case "\u6570\u636E":
                if (Rn2[0].charAt(Rn2[0].length - 2) === "/") {
                  ++C6;
                  ctag = parsexmltag(Rn2[0], false);
                  colpeat = parseInt(ctag["number-columns-repeated"] || "1", 10) || 1;
                  q3 = { t: "z", v: null };
                  if (ctag.formula && opts.cellFormula != false)
                    q3.f = ods_to_csf_formula(unescapexml(ctag.formula));
                  if (ctag["style-name"] && styles[ctag["style-name"]])
                    q3.z = styles[ctag["style-name"]];
                  if ((ctag["\u6570\u636E\u7C7B\u578B"] || ctag["value-type"]) == "string") {
                    q3.t = "s";
                    q3.v = unescapexml(ctag["string-value"] || "");
                    if (opts.dense) {
                      if (!ws["!data"][R2])
                        ws["!data"][R2] = [];
                      ws["!data"][R2][C6] = q3;
                    } else {
                      ws[encode_col(C6) + encode_row(R2)] = q3;
                    }
                  }
                  C6 += colpeat - 1;
                } else if (Rn2[1] !== "/") {
                  ++C6;
                  textp = oldtextp = "";
                  textpidx = oldtextpidx = 0;
                  textR = [];
                  oldtextR = [];
                  colpeat = 1;
                  var rptR = rowpeat ? R2 + rowpeat - 1 : R2;
                  if (C6 > range.e.c)
                    range.e.c = C6;
                  if (C6 < range.s.c)
                    range.s.c = C6;
                  if (R2 < range.s.r)
                    range.s.r = R2;
                  if (rptR > range.e.r)
                    range.e.r = rptR;
                  ctag = parsexmltag(Rn2[0], false);
                  ctag2 = parsexmltagraw(Rn2[0], true);
                  comments = [];
                  comment = {};
                  q3 = { t: ctag["\u6570\u636E\u7C7B\u578B"] || ctag["value-type"], v: null };
                  if (ctag["style-name"] && styles[ctag["style-name"]])
                    q3.z = styles[ctag["style-name"]];
                  if (opts.cellFormula) {
                    if (ctag.formula)
                      ctag.formula = unescapexml(ctag.formula);
                    if (ctag["number-matrix-columns-spanned"] && ctag["number-matrix-rows-spanned"]) {
                      mR = parseInt(ctag["number-matrix-rows-spanned"], 10) || 0;
                      mC = parseInt(ctag["number-matrix-columns-spanned"], 10) || 0;
                      mrange = { s: { r: R2, c: C6 }, e: { r: R2 + mR - 1, c: C6 + mC - 1 } };
                      q3.F = encode_range(mrange);
                      arrayf.push([mrange, q3.F]);
                    }
                    if (ctag.formula)
                      q3.f = ods_to_csf_formula(ctag.formula);
                    else
                      for (i6 = 0; i6 < arrayf.length; ++i6)
                        if (R2 >= arrayf[i6][0].s.r && R2 <= arrayf[i6][0].e.r) {
                          if (C6 >= arrayf[i6][0].s.c && C6 <= arrayf[i6][0].e.c)
                            q3.F = arrayf[i6][1];
                        }
                  }
                  if (ctag["number-columns-spanned"] || ctag["number-rows-spanned"]) {
                    mR = parseInt(ctag["number-rows-spanned"] || "1", 10) || 1;
                    mC = parseInt(ctag["number-columns-spanned"] || "1", 10) || 1;
                    if (mR * mC > 1) {
                      mrange = { s: { r: R2, c: C6 }, e: { r: R2 + mR - 1, c: C6 + mC - 1 } };
                      merges.push(mrange);
                    }
                  }
                  if (ctag["number-columns-repeated"])
                    colpeat = parseInt(ctag["number-columns-repeated"], 10);
                  switch (q3.t) {
                    case "boolean":
                      q3.t = "b";
                      q3.v = parsexmlbool(ctag["boolean-value"]) || +ctag["boolean-value"] >= 1;
                      break;
                    case "float":
                      q3.t = "n";
                      q3.v = parseFloat(ctag.value);
                      if (opts.cellDates && q3.z && fmt_is_date(q3.z)) {
                        q3.v = numdate(q3.v + (WB.WBProps.date1904 ? 1462 : 0));
                        q3.t = typeof q3.v == "number" ? "n" : "d";
                      }
                      break;
                    case "percentage":
                      q3.t = "n";
                      q3.v = parseFloat(ctag.value);
                      break;
                    case "currency":
                      q3.t = "n";
                      q3.v = parseFloat(ctag.value);
                      break;
                    case "date":
                      q3.t = "d";
                      q3.v = parseDate(ctag["date-value"], WB.WBProps.date1904);
                      if (!opts.cellDates) {
                        q3.t = "n";
                        q3.v = datenum(q3.v, WB.WBProps.date1904);
                      }
                      if (!q3.z)
                        q3.z = "m/d/yy";
                      break;
                    case "time":
                      q3.t = "n";
                      q3.v = parse_isodur(ctag["time-value"]) / 86400;
                      if (opts.cellDates) {
                        q3.v = numdate(q3.v);
                        q3.t = typeof q3.v == "number" ? "n" : "d";
                      }
                      if (!q3.z)
                        q3.z = "HH:MM:SS";
                      break;
                    case "number":
                      q3.t = "n";
                      q3.v = parseFloat(ctag["\u6570\u636E\u6570\u503C"]);
                      break;
                    default:
                      if (q3.t === "string" || q3.t === "text" || !q3.t) {
                        q3.t = "s";
                        if (ctag["string-value"] != null) {
                          textp = unescapexml(ctag["string-value"]);
                          textR = [];
                        }
                      } else
                        throw new Error("Unsupported value type " + q3.t);
                  }
                } else {
                  isstub = false;
                  if (ctag2["calcext:value-type"] == "error" && RBErr[textp] != null) {
                    q3.t = "e";
                    q3.w = textp;
                    q3.v = RBErr[textp];
                  }
                  if (q3.t === "s") {
                    q3.v = textp || "";
                    if (textR.length)
                      q3.R = textR;
                    isstub = textpidx == 0;
                  }
                  if (atag.Target)
                    q3.l = atag;
                  if (comments.length > 0) {
                    q3.c = comments;
                    comments = [];
                  }
                  if (textp && opts.cellText !== false)
                    q3.w = textp;
                  if (isstub) {
                    q3.t = "z";
                    delete q3.v;
                  }
                  if (!isstub || opts.sheetStubs) {
                    if (!(opts.sheetRows && opts.sheetRows <= R2)) {
                      for (var rpt = 0; rpt < rowpeat; ++rpt) {
                        colpeat = parseInt(ctag["number-columns-repeated"] || "1", 10);
                        if (opts.dense) {
                          if (!ws["!data"][R2 + rpt])
                            ws["!data"][R2 + rpt] = [];
                          ws["!data"][R2 + rpt][C6] = rpt == 0 ? q3 : dup(q3);
                          while (--colpeat > 0)
                            ws["!data"][R2 + rpt][C6 + colpeat] = dup(q3);
                        } else {
                          ws[encode_cell({ r: R2 + rpt, c: C6 })] = q3;
                          while (--colpeat > 0)
                            ws[encode_cell({ r: R2 + rpt, c: C6 + colpeat })] = dup(q3);
                        }
                        if (range.e.c <= C6)
                          range.e.c = C6;
                      }
                    }
                  }
                  colpeat = parseInt(ctag["number-columns-repeated"] || "1", 10);
                  C6 += colpeat - 1;
                  colpeat = 0;
                  q3 = {};
                  textp = "";
                  textR = [];
                }
                atag = {};
                break;
              case "document":
              case "document-content":
              case "\u7535\u5B50\u8868\u683C\u6587\u6863":
              case "spreadsheet":
              case "\u4E3B\u4F53":
              case "scripts":
              case "styles":
              case "font-face-decls":
              case "master-styles":
                if (Rn2[1] === "/") {
                  if ((tmp = state.pop())[0] !== Rn2[3])
                    throw "Bad state: " + tmp;
                } else if (Rn2[0].charAt(Rn2[0].length - 2) !== "/")
                  state.push([Rn2[3], true]);
                break;
              case "annotation":
                if (Rn2[1] === "/") {
                  if ((tmp = state.pop())[0] !== Rn2[3])
                    throw "Bad state: " + tmp;
                  comment.t = textp;
                  if (textR.length)
                    comment.R = textR;
                  comment.a = creator;
                  comments.push(comment);
                  textp = oldtextp;
                  textpidx = oldtextpidx;
                  textR = oldtextR;
                } else if (Rn2[0].charAt(Rn2[0].length - 2) !== "/") {
                  state.push([Rn2[3], false]);
                  var annotag = parsexmltag(Rn2[0], true);
                  if (!(annotag["display"] && parsexmlbool(annotag["display"])))
                    comments.hidden = true;
                  oldtextp = textp;
                  oldtextpidx = textpidx;
                  oldtextR = textR;
                  textp = "";
                  textpidx = 0;
                  textR = [];
                }
                creator = "";
                creatoridx = 0;
                break;
              case "creator":
                if (Rn2[1] === "/") {
                  creator = str.slice(creatoridx, Rn2.index);
                } else
                  creatoridx = Rn2.index + Rn2[0].length;
                break;
              case "meta":
              case "\u5143\u6570\u636E":
              case "settings":
              case "config-item-set":
              case "config-item-map-indexed":
              case "config-item-map-entry":
              case "config-item-map-named":
              case "shapes":
              case "frame":
              case "text-box":
              case "image":
              case "data-pilot-tables":
              case "list-style":
              case "form":
              case "dde-links":
              case "event-listeners":
              case "chart":
                if (Rn2[1] === "/") {
                  if ((tmp = state.pop())[0] !== Rn2[3])
                    throw "Bad state: " + tmp;
                } else if (Rn2[0].charAt(Rn2[0].length - 2) !== "/")
                  state.push([Rn2[3], false]);
                textp = "";
                textpidx = 0;
                textR = [];
                break;
              case "scientific-number":
              case "currency-symbol":
              case "fill-character":
                break;
              case "text-style":
              case "boolean-style":
              case "number-style":
              case "currency-style":
              case "percentage-style":
              case "date-style":
              case "time-style":
                if (Rn2[1] === "/") {
                  var xlmlidx = xlmlregex.lastIndex;
                  parse_ods_styles(str.slice(nfidx, xlmlregex.lastIndex), _opts, number_format_map);
                  xlmlregex.lastIndex = xlmlidx;
                } else if (Rn2[0].charAt(Rn2[0].length - 2) !== "/") {
                  nfidx = xlmlregex.lastIndex - Rn2[0].length;
                }
                break;
              case "script":
                break;
              case "libraries":
                break;
              case "automatic-styles":
                break;
              case "default-style":
              case "page-layout":
                break;
              case "style":
                {
                  var styletag = parsexmltag(Rn2[0], false);
                  if (styletag["family"] == "table-cell" && number_format_map[styletag["data-style-name"]])
                    styles[styletag["name"]] = number_format_map[styletag["data-style-name"]];
                }
                break;
              case "map":
                break;
              case "font-face":
                break;
              case "paragraph-properties":
                break;
              case "table-properties":
                break;
              case "table-column-properties":
                break;
              case "table-row-properties":
                break;
              case "table-cell-properties":
                break;
              case "number":
                break;
              case "fraction":
                break;
              case "day":
              case "month":
              case "year":
              case "era":
              case "day-of-week":
              case "week-of-year":
              case "quarter":
              case "hours":
              case "minutes":
              case "seconds":
              case "am-pm":
                break;
              case "boolean":
                break;
              case "text":
                if (Rn2[0].slice(-2) === "/>")
                  break;
                else if (Rn2[1] === "/")
                  switch (state[state.length - 1][0]) {
                    case "number-style":
                    case "date-style":
                    case "time-style":
                      NF += str.slice(pidx, Rn2.index);
                      break;
                  }
                else
                  pidx = Rn2.index + Rn2[0].length;
                break;
              case "named-range":
                tag = parsexmltag(Rn2[0], false);
                _Ref = ods_to_csf_3D(tag["cell-range-address"]);
                var nrange = { Name: tag.name, Ref: _Ref[0] + "!" + _Ref[1] };
                if (intable)
                  nrange.Sheet = SheetNames.length;
                WB.Names.push(nrange);
                break;
              case "text-content":
                break;
              case "text-properties":
                break;
              case "embedded-text":
                break;
              case "body":
              case "\u7535\u5B50\u8868\u683C":
                break;
              case "forms":
                break;
              case "table-column":
                break;
              case "table-header-rows":
                break;
              case "table-rows":
                break;
              case "table-column-group":
                break;
              case "table-header-columns":
                break;
              case "table-columns":
                break;
              case "null-date":
                tag = parsexmltag(Rn2[0], false);
                switch (tag["date-value"]) {
                  case "1904-01-01":
                    WB.WBProps.date1904 = true;
                    break;
                }
                break;
              case "graphic-properties":
                break;
              case "calculation-settings":
                break;
              case "named-expressions":
                break;
              case "label-range":
                break;
              case "label-ranges":
                break;
              case "named-expression":
                break;
              case "sort":
                break;
              case "sort-by":
                break;
              case "sort-groups":
                break;
              case "tab":
                break;
              case "line-break":
                break;
              case "span":
                break;
              case "p":
              case "\u6587\u672C\u4E32":
                if (["master-styles"].indexOf(state[state.length - 1][0]) > -1)
                  break;
                if (Rn2[1] === "/" && (!ctag || !ctag["string-value"])) {
                  var ptp = parse_text_p(str.slice(textpidx, Rn2.index), textptag);
                  textp = (textp.length > 0 ? textp + "\n" : "") + ptp[0];
                } else if (Rn2[0].slice(-2) == "/>") {
                  textp += "\n";
                } else {
                  textptag = parsexmltag(Rn2[0], false);
                  textpidx = Rn2.index + Rn2[0].length;
                }
                break;
              case "s":
                break;
              case "database-range":
                if (Rn2[1] === "/")
                  break;
                try {
                  _Ref = ods_to_csf_3D(parsexmltag(Rn2[0])["target-range-address"]);
                  Sheets[_Ref[0]]["!autofilter"] = { ref: _Ref[1] };
                } catch (e7) {
                }
                break;
              case "date":
                break;
              case "object":
                break;
              case "title":
              case "\u6807\u9898":
                break;
              case "desc":
                break;
              case "binary-data":
                break;
              case "table-source":
                break;
              case "scenario":
                break;
              case "iteration":
                break;
              case "content-validations":
                break;
              case "content-validation":
                break;
              case "help-message":
                break;
              case "error-message":
                break;
              case "database-ranges":
                break;
              case "filter":
                break;
              case "filter-and":
                break;
              case "filter-or":
                break;
              case "filter-condition":
                break;
              case "filter-set-item":
                break;
              case "list-level-style-bullet":
                break;
              case "list-level-style-number":
                break;
              case "list-level-properties":
                break;
              case "sender-firstname":
              case "sender-lastname":
              case "sender-initials":
              case "sender-title":
              case "sender-position":
              case "sender-email":
              case "sender-phone-private":
              case "sender-fax":
              case "sender-company":
              case "sender-phone-work":
              case "sender-street":
              case "sender-city":
              case "sender-postal-code":
              case "sender-country":
              case "sender-state-or-province":
              case "author-name":
              case "author-initials":
              case "chapter":
              case "file-name":
              case "template-name":
              case "sheet-name":
                break;
              case "event-listener":
                break;
              case "initial-creator":
              case "creation-date":
              case "print-date":
              case "generator":
              case "document-statistic":
              case "user-defined":
              case "editing-duration":
              case "editing-cycles":
                break;
              case "config-item":
                break;
              case "page-number":
                break;
              case "page-count":
                break;
              case "time":
                break;
              case "cell-range-source":
                break;
              case "detective":
                break;
              case "operation":
                break;
              case "highlighted-range":
                break;
              case "data-pilot-table":
              case "source-cell-range":
              case "source-service":
              case "data-pilot-field":
              case "data-pilot-level":
              case "data-pilot-subtotals":
              case "data-pilot-subtotal":
              case "data-pilot-members":
              case "data-pilot-member":
              case "data-pilot-display-info":
              case "data-pilot-sort-info":
              case "data-pilot-layout-info":
              case "data-pilot-field-reference":
              case "data-pilot-groups":
              case "data-pilot-group":
              case "data-pilot-group-member":
                break;
              case "rect":
                break;
              case "dde-connection-decls":
              case "dde-connection-decl":
              case "dde-link":
              case "dde-source":
                break;
              case "properties":
                break;
              case "property":
                break;
              case "a":
                if (Rn2[1] !== "/") {
                  atag = parsexmltag(Rn2[0], false);
                  if (!atag.href)
                    break;
                  atag.Target = unescapexml(atag.href);
                  delete atag.href;
                  if (atag.Target.charAt(0) == "#" && atag.Target.indexOf(".") > -1) {
                    _Ref = ods_to_csf_3D(atag.Target.slice(1));
                    atag.Target = "#" + _Ref[0] + "!" + _Ref[1];
                  } else if (atag.Target.match(/^\.\.[\\\/]/))
                    atag.Target = atag.Target.slice(3);
                }
                break;
              case "table-protection":
                break;
              case "data-pilot-grand-total":
                break;
              case "office-document-common-attrs":
                break;
              default:
                switch (Rn2[2]) {
                  case "dc:":
                  case "calcext:":
                  case "loext:":
                  case "ooo:":
                  case "chartooo:":
                  case "draw:":
                  case "style:":
                  case "chart:":
                  case "form:":
                  case "uof:":
                  case "\u8868:":
                  case "\u5B57:":
                    break;
                  default:
                    if (opts.WTF)
                      throw new Error(Rn2);
                }
            }
          var out = {
            Sheets,
            SheetNames,
            Workbook: WB
          };
          if (opts.bookSheets)
            delete out.Sheets;
          return out;
        }
        function parse_ods(zip, opts) {
          opts = opts || {};
          if (safegetzipfile(zip, "META-INF/manifest.xml"))
            parse_manifest(getzipdata(zip, "META-INF/manifest.xml"), opts);
          var styles = getzipstr(zip, "styles.xml");
          var Styles = styles && parse_ods_styles(utf8read(styles), opts);
          var content2 = getzipstr(zip, "content.xml");
          if (!content2)
            throw new Error("Missing content.xml in ODS / UOF file");
          var wb = parse_content_xml(utf8read(content2), opts, Styles);
          if (safegetzipfile(zip, "meta.xml"))
            wb.Props = parse_core_props(getzipdata(zip, "meta.xml"));
          wb.bookType = "ods";
          return wb;
        }
        function parse_fods(data, opts) {
          var wb = parse_content_xml(data, opts);
          wb.bookType = "fods";
          return wb;
        }
        var write_styles_ods = /* @__PURE__ */ function() {
          var master_styles = [
            "<office:master-styles>",
            '<style:master-page style:name="mp1" style:page-layout-name="mp1">',
            "<style:header/>",
            '<style:header-left style:display="false"/>',
            "<style:footer/>",
            '<style:footer-left style:display="false"/>',
            "</style:master-page>",
            "</office:master-styles>"
          ].join("");
          var payload = "<office:document-styles " + wxt_helper({
            "xmlns:office": "urn:oasis:names:tc:opendocument:xmlns:office:1.0",
            "xmlns:table": "urn:oasis:names:tc:opendocument:xmlns:table:1.0",
            "xmlns:style": "urn:oasis:names:tc:opendocument:xmlns:style:1.0",
            "xmlns:text": "urn:oasis:names:tc:opendocument:xmlns:text:1.0",
            "xmlns:draw": "urn:oasis:names:tc:opendocument:xmlns:drawing:1.0",
            "xmlns:fo": "urn:oasis:names:tc:opendocument:xmlns:xsl-fo-compatible:1.0",
            "xmlns:xlink": "http://www.w3.org/1999/xlink",
            "xmlns:dc": "http://purl.org/dc/elements/1.1/",
            "xmlns:number": "urn:oasis:names:tc:opendocument:xmlns:datastyle:1.0",
            "xmlns:svg": "urn:oasis:names:tc:opendocument:xmlns:svg-compatible:1.0",
            "xmlns:of": "urn:oasis:names:tc:opendocument:xmlns:of:1.2",
            "office:version": "1.2"
          }) + ">" + master_styles + "</office:document-styles>";
          return function wso() {
            return XML_HEADER + payload;
          };
        }();
        function write_number_format_ods(nf, nfidx) {
          var type = "number", payload = "", nopts = { "style:name": nfidx }, c8 = "", i6 = 0;
          nf = nf.replace(/"[$]"/g, "$");
          j: {
            if (nf.indexOf(";") > -1) {
              console.error("Unsupported ODS Style Map exported.  Using first branch of " + nf);
              nf = nf.slice(0, nf.indexOf(";"));
            }
            if (nf == "@") {
              type = "text";
              payload = "<number:text-content/>";
              break j;
            }
            if (nf.indexOf(/\$/) > -1) {
              type = "currency";
            }
            if (nf[i6] == '"') {
              c8 = "";
              while (nf[++i6] != '"' || nf[++i6] == '"')
                c8 += nf[i6];
              --i6;
              if (nf[i6 + 1] == "*") {
                i6++;
                payload += "<number:fill-character>" + escapexml(c8.replace(/""/g, '"')) + "</number:fill-character>";
              } else {
                payload += "<number:text>" + escapexml(c8.replace(/""/g, '"')) + "</number:text>";
              }
              nf = nf.slice(i6 + 1);
              i6 = 0;
            }
            var t5 = nf.match(/# (\?+)\/(\?+)/);
            if (t5) {
              payload += writextag("number:fraction", null, { "number:min-integer-digits": 0, "number:min-numerator-digits": t5[1].length, "number:max-denominator-value": Math.max(+t5[1].replace(/./g, "9"), +t5[2].replace(/./g, "9")) });
              break j;
            }
            if (t5 = nf.match(/# (\?+)\/(\d+)/)) {
              payload += writextag("number:fraction", null, { "number:min-integer-digits": 0, "number:min-numerator-digits": t5[1].length, "number:denominator-value": +t5[2] });
              break j;
            }
            if (t5 = nf.match(/\b(\d+)(|\.\d+)%/)) {
              type = "percentage";
              payload += writextag("number:number", null, { "number:decimal-places": t5[2] && t5.length - 1 || 0, "number:min-decimal-places": t5[2] && t5.length - 1 || 0, "number:min-integer-digits": t5[1].length }) + "<number:text>%</number:text>";
              break j;
            }
            var has_time = false;
            if (["y", "m", "d"].indexOf(nf[0]) > -1) {
              type = "date";
              k:
                for (; i6 < nf.length; ++i6)
                  switch (c8 = nf[i6].toLowerCase()) {
                    case "h":
                    case "s":
                      has_time = true;
                      --i6;
                      break k;
                    case "m":
                      l:
                        for (var h = i6 + 1; h < nf.length; ++h)
                          switch (nf[h]) {
                            case "y":
                            case "d":
                              break l;
                            case "h":
                            case "s":
                              has_time = true;
                              --i6;
                              break k;
                          }
                    case "y":
                    case "d":
                      while ((nf[++i6] || "").toLowerCase() == c8[0])
                        c8 += c8[0];
                      --i6;
                      switch (c8) {
                        case "y":
                        case "yy":
                          payload += "<number:year/>";
                          break;
                        case "yyy":
                        case "yyyy":
                          payload += '<number:year number:style="long"/>';
                          break;
                        case "mmmmm":
                          console.error("ODS has no equivalent of format |mmmmm|");
                        case "m":
                        case "mm":
                        case "mmm":
                        case "mmmm":
                          payload += '<number:month number:style="' + (c8.length % 2 ? "short" : "long") + '" number:textual="' + (c8.length >= 3 ? "true" : "false") + '"/>';
                          break;
                        case "d":
                        case "dd":
                          payload += '<number:day number:style="' + (c8.length % 2 ? "short" : "long") + '"/>';
                          break;
                        case "ddd":
                        case "dddd":
                          payload += '<number:day-of-week number:style="' + (c8.length % 2 ? "short" : "long") + '"/>';
                          break;
                      }
                      break;
                    case '"':
                      while (nf[++i6] != '"' || nf[++i6] == '"')
                        c8 += nf[i6];
                      --i6;
                      payload += "<number:text>" + escapexml(c8.slice(1).replace(/""/g, '"')) + "</number:text>";
                      break;
                    case "\\":
                      c8 = nf[++i6];
                      payload += "<number:text>" + escapexml(c8) + "</number:text>";
                      break;
                    case "/":
                    case ":":
                      payload += "<number:text>" + escapexml(c8) + "</number:text>";
                      break;
                    default:
                      console.error("unrecognized character " + c8 + " in ODF format " + nf);
                  }
              if (!has_time)
                break j;
              nf = nf.slice(i6 + 1);
              i6 = 0;
            }
            if (nf.match(/^\[?[hms]/)) {
              if (type == "number")
                type = "time";
              if (nf.match(/\[/)) {
                nf = nf.replace(/[\[\]]/g, "");
                nopts["number:truncate-on-overflow"] = "false";
              }
              for (; i6 < nf.length; ++i6)
                switch (c8 = nf[i6].toLowerCase()) {
                  case "h":
                  case "m":
                  case "s":
                    while ((nf[++i6] || "").toLowerCase() == c8[0])
                      c8 += c8[0];
                    --i6;
                    switch (c8) {
                      case "h":
                      case "hh":
                        payload += '<number:hours number:style="' + (c8.length % 2 ? "short" : "long") + '"/>';
                        break;
                      case "m":
                      case "mm":
                        payload += '<number:minutes number:style="' + (c8.length % 2 ? "short" : "long") + '"/>';
                        break;
                      case "s":
                      case "ss":
                        if (nf[i6 + 1] == ".")
                          do {
                            c8 += nf[i6 + 1];
                            ++i6;
                          } while (nf[i6 + 1] == "0");
                        payload += '<number:seconds number:style="' + (c8.match("ss") ? "long" : "short") + '"' + (c8.match(/\./) ? ' number:decimal-places="' + (c8.match(/0+/) || [""])[0].length + '"' : "") + "/>";
                        break;
                    }
                    break;
                  case '"':
                    while (nf[++i6] != '"' || nf[++i6] == '"')
                      c8 += nf[i6];
                    --i6;
                    payload += "<number:text>" + escapexml(c8.slice(1).replace(/""/g, '"')) + "</number:text>";
                    break;
                  case "/":
                  case ":":
                    payload += "<number:text>" + escapexml(c8) + "</number:text>";
                    break;
                  case "a":
                    if (nf.slice(i6, i6 + 3).toLowerCase() == "a/p") {
                      payload += "<number:am-pm/>";
                      i6 += 2;
                      break;
                    }
                    if (nf.slice(i6, i6 + 5).toLowerCase() == "am/pm") {
                      payload += "<number:am-pm/>";
                      i6 += 4;
                      break;
                    }
                  default:
                    console.error("unrecognized character " + c8 + " in ODF format " + nf);
                }
              break j;
            }
            if (nf.indexOf(/\$/) > -1) {
              type = "currency";
            }
            if (nf[0] == "$") {
              payload += '<number:currency-symbol number:language="en" number:country="US">$</number:currency-symbol>';
              nf = nf.slice(1);
              i6 = 0;
            }
            i6 = 0;
            if (nf[i6] == '"') {
              while (nf[++i6] != '"' || nf[++i6] == '"')
                c8 += nf[i6];
              --i6;
              if (nf[i6 + 1] == "*") {
                i6++;
                payload += "<number:fill-character>" + escapexml(c8.replace(/""/g, '"')) + "</number:fill-character>";
              } else {
                payload += "<number:text>" + escapexml(c8.replace(/""/g, '"')) + "</number:text>";
              }
              nf = nf.slice(i6 + 1);
              i6 = 0;
            }
            var np = nf.match(/([#0][0#,]*)(\.[0#]*|)(E[+]?0*|)/i);
            if (!np || !np[0])
              console.error("Could not find numeric part of " + nf);
            else {
              var base = np[1].replace(/,/g, "");
              payload += "<number:" + (np[3] ? "scientific-" : "") + 'number number:min-integer-digits="' + (base.indexOf("0") == -1 ? "0" : base.length - base.indexOf("0")) + '"' + (np[0].indexOf(",") > -1 ? ' number:grouping="true"' : "") + (np[2] && ' number:decimal-places="' + (np[2].length - 1) + '"' || ' number:decimal-places="0"') + (np[3] && np[3].indexOf("+") > -1 ? ' number:forced-exponent-sign="true"' : "") + (np[3] ? ' number:min-exponent-digits="' + np[3].match(/0+/)[0].length + '"' : "") + "></number:" + (np[3] ? "scientific-" : "") + "number>";
              i6 = np.index + np[0].length;
            }
            if (nf[i6] == '"') {
              c8 = "";
              while (nf[++i6] != '"' || nf[++i6] == '"')
                c8 += nf[i6];
              --i6;
              payload += "<number:text>" + escapexml(c8.replace(/""/g, '"')) + "</number:text>";
            }
          }
          if (!payload) {
            console.error("Could not generate ODS number format for |" + nf + "|");
            return "";
          }
          return writextag("number:" + type + "-style", payload, nopts);
        }
        function write_names_ods(Names, SheetNames, idx) {
          var scoped = [];
          for (var namei = 0; namei < Names.length; ++namei) {
            var name = Names[namei];
            if (!name)
              continue;
            if (name.Sheet == (idx == -1 ? null : idx))
              scoped.push(name);
          }
          if (!scoped.length)
            return "";
          return "      <table:named-expressions>\n" + scoped.map(function(name2) {
            var odsref = (idx == -1 ? "$" : "") + csf_to_ods_3D(name2.Ref);
            return "        " + writextag("table:named-range", null, {
              "table:name": name2.Name,
              "table:cell-range-address": odsref,
              "table:base-cell-address": odsref.replace(/[\.][^\.]*$/, ".$A$1")
            });
          }).join("\n") + "\n      </table:named-expressions>\n";
        }
        var write_content_ods = /* @__PURE__ */ function() {
          var write_text_p = function(text, span) {
            return escapexml(text).replace(/  +/g, function($$) {
              return '<text:s text:c="' + $$.length + '"/>';
            }).replace(/\t/g, "<text:tab/>").replace(/\n/g, span ? "<text:line-break/>" : "</text:p><text:p>").replace(/^ /, "<text:s/>").replace(/ $/, "<text:s/>");
          };
          var null_cell_xml = "          <table:table-cell />\n";
          var write_ws = function(ws, wb, i6, opts, nfs, date1904) {
            var o6 = [];
            o6.push('      <table:table table:name="' + escapexml(wb.SheetNames[i6]) + '" table:style-name="ta1">\n');
            var R2 = 0, C6 = 0, range = decode_range(ws["!ref"] || "A1");
            var marr = ws["!merges"] || [], mi = 0;
            var dense = ws["!data"] != null;
            if (ws["!cols"]) {
              for (C6 = 0; C6 <= range.e.c; ++C6)
                o6.push("        <table:table-column" + (ws["!cols"][C6] ? ' table:style-name="co' + ws["!cols"][C6].ods + '"' : "") + "></table:table-column>\n");
            }
            var H2 = "", ROWS = ws["!rows"] || [];
            for (R2 = 0; R2 < range.s.r; ++R2) {
              H2 = ROWS[R2] ? ' table:style-name="ro' + ROWS[R2].ods + '"' : "";
              o6.push("        <table:table-row" + H2 + "></table:table-row>\n");
            }
            for (; R2 <= range.e.r; ++R2) {
              H2 = ROWS[R2] ? ' table:style-name="ro' + ROWS[R2].ods + '"' : "";
              o6.push("        <table:table-row" + H2 + ">\n");
              for (C6 = 0; C6 < range.s.c; ++C6)
                o6.push(null_cell_xml);
              for (; C6 <= range.e.c; ++C6) {
                var skip2 = false, ct2 = {}, textp = "";
                for (mi = 0; mi != marr.length; ++mi) {
                  if (marr[mi].s.c > C6)
                    continue;
                  if (marr[mi].s.r > R2)
                    continue;
                  if (marr[mi].e.c < C6)
                    continue;
                  if (marr[mi].e.r < R2)
                    continue;
                  if (marr[mi].s.c != C6 || marr[mi].s.r != R2)
                    skip2 = true;
                  ct2["table:number-columns-spanned"] = marr[mi].e.c - marr[mi].s.c + 1;
                  ct2["table:number-rows-spanned"] = marr[mi].e.r - marr[mi].s.r + 1;
                  break;
                }
                if (skip2) {
                  o6.push("          <table:covered-table-cell/>\n");
                  continue;
                }
                var ref = encode_cell({ r: R2, c: C6 }), cell = dense ? (ws["!data"][R2] || [])[C6] : ws[ref];
                if (cell && cell.f) {
                  ct2["table:formula"] = escapexml(csf_to_ods_formula(cell.f));
                  if (cell.F) {
                    if (cell.F.slice(0, ref.length) == ref) {
                      var _Fref = decode_range(cell.F);
                      ct2["table:number-matrix-columns-spanned"] = _Fref.e.c - _Fref.s.c + 1;
                      ct2["table:number-matrix-rows-spanned"] = _Fref.e.r - _Fref.s.r + 1;
                    }
                  }
                }
                if (!cell) {
                  o6.push(null_cell_xml);
                  continue;
                }
                switch (cell.t) {
                  case "b":
                    textp = cell.v ? "TRUE" : "FALSE";
                    ct2["office:value-type"] = "boolean";
                    ct2["office:boolean-value"] = cell.v ? "true" : "false";
                    break;
                  case "n":
                    if (!isFinite(cell.v)) {
                      if (isNaN(cell.v)) {
                        textp = "#NUM!";
                        ct2["table:formula"] = "of:=#NUM!";
                      } else {
                        textp = "#DIV/0!";
                        ct2["table:formula"] = "of:=" + (cell.v < 0 ? "-" : "") + "1/0";
                      }
                      ct2["office:string-value"] = "";
                      ct2["office:value-type"] = "string";
                      ct2["calcext:value-type"] = "error";
                    } else {
                      textp = cell.w || String(cell.v || 0);
                      ct2["office:value-type"] = "float";
                      ct2["office:value"] = cell.v || 0;
                    }
                    break;
                  case "s":
                  case "str":
                    textp = cell.v == null ? "" : cell.v;
                    ct2["office:value-type"] = "string";
                    break;
                  case "d":
                    textp = cell.w || parseDate(cell.v, date1904).toISOString();
                    ct2["office:value-type"] = "date";
                    ct2["office:date-value"] = parseDate(cell.v, date1904).toISOString();
                    ct2["table:style-name"] = "ce1";
                    break;
                  default:
                    o6.push(null_cell_xml);
                    continue;
                }
                var text_p = write_text_p(textp);
                if (cell.l && cell.l.Target) {
                  var _tgt = cell.l.Target;
                  _tgt = _tgt.charAt(0) == "#" ? "#" + csf_to_ods_3D(_tgt.slice(1)) : _tgt;
                  if (_tgt.charAt(0) != "#" && !_tgt.match(/^\w+:/))
                    _tgt = "../" + _tgt;
                  text_p = writextag("text:a", text_p, { "xlink:href": _tgt.replace(/&/g, "&amp;") });
                }
                if (nfs[cell.z])
                  ct2["table:style-name"] = "ce" + nfs[cell.z].slice(1);
                var payload = writextag("text:p", text_p, {});
                if (cell.c) {
                  var acreator = "", apayload = "", aprops = {};
                  for (var ci = 0; ci < cell.c.length; ++ci) {
                    if (!acreator && cell.c[ci].a)
                      acreator = cell.c[ci].a;
                    apayload += "<text:p>" + write_text_p(cell.c[ci].t) + "</text:p>";
                  }
                  if (!cell.c.hidden)
                    aprops["office:display"] = true;
                  payload = writextag("office:annotation", apayload, aprops) + payload;
                }
                o6.push("          " + writextag("table:table-cell", payload, ct2) + "\n");
              }
              o6.push("        </table:table-row>\n");
            }
            if ((wb.Workbook || {}).Names)
              o6.push(write_names_ods(wb.Workbook.Names, wb.SheetNames, i6));
            o6.push("      </table:table>\n");
            return o6.join("");
          };
          var write_automatic_styles_ods = function(o6, wb) {
            o6.push(" <office:automatic-styles>\n");
            var cidx = 0;
            wb.SheetNames.map(function(n6) {
              return wb.Sheets[n6];
            }).forEach(function(ws) {
              if (!ws)
                return;
              if (ws["!cols"]) {
                for (var C6 = 0; C6 < ws["!cols"].length; ++C6)
                  if (ws["!cols"][C6]) {
                    var colobj = ws["!cols"][C6];
                    if (colobj.width == null && colobj.wpx == null && colobj.wch == null)
                      continue;
                    process_col(colobj);
                    colobj.ods = cidx;
                    var w3 = ws["!cols"][C6].wpx + "px";
                    o6.push('  <style:style style:name="co' + cidx + '" style:family="table-column">\n');
                    o6.push('   <style:table-column-properties fo:break-before="auto" style:column-width="' + w3 + '"/>\n');
                    o6.push("  </style:style>\n");
                    ++cidx;
                  }
              }
            });
            var ridx = 0;
            wb.SheetNames.map(function(n6) {
              return wb.Sheets[n6];
            }).forEach(function(ws) {
              if (!ws)
                return;
              if (ws["!rows"]) {
                for (var R2 = 0; R2 < ws["!rows"].length; ++R2)
                  if (ws["!rows"][R2]) {
                    ws["!rows"][R2].ods = ridx;
                    var h = ws["!rows"][R2].hpx + "px";
                    o6.push('  <style:style style:name="ro' + ridx + '" style:family="table-row">\n');
                    o6.push('   <style:table-row-properties fo:break-before="auto" style:row-height="' + h + '"/>\n');
                    o6.push("  </style:style>\n");
                    ++ridx;
                  }
              }
            });
            o6.push('  <style:style style:name="ta1" style:family="table" style:master-page-name="mp1">\n');
            o6.push('   <style:table-properties table:display="true" style:writing-mode="lr-tb"/>\n');
            o6.push("  </style:style>\n");
            o6.push('  <number:date-style style:name="N37" number:automatic-order="true">\n');
            o6.push('   <number:month number:style="long"/>\n');
            o6.push("   <number:text>/</number:text>\n");
            o6.push('   <number:day number:style="long"/>\n');
            o6.push("   <number:text>/</number:text>\n");
            o6.push("   <number:year/>\n");
            o6.push("  </number:date-style>\n");
            var nfs = {};
            var nfi = 69;
            wb.SheetNames.map(function(n6) {
              return wb.Sheets[n6];
            }).forEach(function(ws) {
              if (!ws)
                return;
              var dense = ws["!data"] != null;
              if (!ws["!ref"])
                return;
              var range = decode_range(ws["!ref"]);
              for (var R2 = 0; R2 <= range.e.r; ++R2)
                for (var C6 = 0; C6 <= range.e.c; ++C6) {
                  var c8 = dense ? (ws["!data"][R2] || [])[C6] : ws[encode_cell({ r: R2, c: C6 })];
                  if (!c8 || !c8.z || c8.z.toLowerCase() == "general")
                    continue;
                  if (!nfs[c8.z]) {
                    var out = write_number_format_ods(c8.z, "N" + nfi);
                    if (out) {
                      nfs[c8.z] = "N" + nfi;
                      ++nfi;
                      o6.push(out + "\n");
                    }
                  }
                }
            });
            o6.push('  <style:style style:name="ce1" style:family="table-cell" style:parent-style-name="Default" style:data-style-name="N37"/>\n');
            keys(nfs).forEach(function(nf) {
              o6.push('<style:style style:name="ce' + nfs[nf].slice(1) + '" style:family="table-cell" style:parent-style-name="Default" style:data-style-name="' + nfs[nf] + '"/>\n');
            });
            o6.push(" </office:automatic-styles>\n");
            return nfs;
          };
          return function wcx(wb, opts) {
            var o6 = [XML_HEADER];
            var attr = wxt_helper({
              "xmlns:office": "urn:oasis:names:tc:opendocument:xmlns:office:1.0",
              "xmlns:table": "urn:oasis:names:tc:opendocument:xmlns:table:1.0",
              "xmlns:style": "urn:oasis:names:tc:opendocument:xmlns:style:1.0",
              "xmlns:text": "urn:oasis:names:tc:opendocument:xmlns:text:1.0",
              "xmlns:draw": "urn:oasis:names:tc:opendocument:xmlns:drawing:1.0",
              "xmlns:fo": "urn:oasis:names:tc:opendocument:xmlns:xsl-fo-compatible:1.0",
              "xmlns:xlink": "http://www.w3.org/1999/xlink",
              "xmlns:dc": "http://purl.org/dc/elements/1.1/",
              "xmlns:meta": "urn:oasis:names:tc:opendocument:xmlns:meta:1.0",
              "xmlns:number": "urn:oasis:names:tc:opendocument:xmlns:datastyle:1.0",
              "xmlns:presentation": "urn:oasis:names:tc:opendocument:xmlns:presentation:1.0",
              "xmlns:svg": "urn:oasis:names:tc:opendocument:xmlns:svg-compatible:1.0",
              "xmlns:chart": "urn:oasis:names:tc:opendocument:xmlns:chart:1.0",
              "xmlns:dr3d": "urn:oasis:names:tc:opendocument:xmlns:dr3d:1.0",
              "xmlns:math": "http://www.w3.org/1998/Math/MathML",
              "xmlns:form": "urn:oasis:names:tc:opendocument:xmlns:form:1.0",
              "xmlns:script": "urn:oasis:names:tc:opendocument:xmlns:script:1.0",
              "xmlns:ooo": "http://openoffice.org/2004/office",
              "xmlns:ooow": "http://openoffice.org/2004/writer",
              "xmlns:oooc": "http://openoffice.org/2004/calc",
              "xmlns:dom": "http://www.w3.org/2001/xml-events",
              "xmlns:xforms": "http://www.w3.org/2002/xforms",
              "xmlns:xsd": "http://www.w3.org/2001/XMLSchema",
              "xmlns:xsi": "http://www.w3.org/2001/XMLSchema-instance",
              "xmlns:sheet": "urn:oasis:names:tc:opendocument:sh33tjs:1.0",
              "xmlns:rpt": "http://openoffice.org/2005/report",
              "xmlns:of": "urn:oasis:names:tc:opendocument:xmlns:of:1.2",
              "xmlns:xhtml": "http://www.w3.org/1999/xhtml",
              "xmlns:grddl": "http://www.w3.org/2003/g/data-view#",
              "xmlns:tableooo": "http://openoffice.org/2009/table",
              "xmlns:drawooo": "http://openoffice.org/2010/draw",
              "xmlns:calcext": "urn:org:documentfoundation:names:experimental:calc:xmlns:calcext:1.0",
              "xmlns:loext": "urn:org:documentfoundation:names:experimental:office:xmlns:loext:1.0",
              "xmlns:field": "urn:openoffice:names:experimental:ooo-ms-interop:xmlns:field:1.0",
              "xmlns:formx": "urn:openoffice:names:experimental:ooxml-odf-interop:xmlns:form:1.0",
              "xmlns:css3t": "http://www.w3.org/TR/css3-text/",
              "office:version": "1.2"
            });
            var fods = wxt_helper({
              "xmlns:config": "urn:oasis:names:tc:opendocument:xmlns:config:1.0",
              "office:mimetype": "application/vnd.oasis.opendocument.spreadsheet"
            });
            if (opts.bookType == "fods") {
              o6.push("<office:document" + attr + fods + ">\n");
              o6.push(write_meta_ods().replace(/<office:document-meta[^<>]*?>/, "").replace(/<\/office:document-meta>/, "") + "\n");
            } else
              o6.push("<office:document-content" + attr + ">\n");
            var nfs = write_automatic_styles_ods(o6, wb);
            o6.push("  <office:body>\n");
            o6.push("    <office:spreadsheet>\n");
            if (((wb.Workbook || {}).WBProps || {}).date1904)
              o6.push('      <table:calculation-settings table:case-sensitive="false" table:search-criteria-must-apply-to-whole-cell="true" table:use-wildcards="true" table:use-regular-expressions="false" table:automatic-find-labels="false">\n        <table:null-date table:date-value="1904-01-01"/>\n      </table:calculation-settings>\n');
            for (var i6 = 0; i6 != wb.SheetNames.length; ++i6)
              o6.push(write_ws(wb.Sheets[wb.SheetNames[i6]], wb, i6, opts, nfs, ((wb.Workbook || {}).WBProps || {}).date1904));
            if ((wb.Workbook || {}).Names)
              o6.push(write_names_ods(wb.Workbook.Names, wb.SheetNames, -1));
            o6.push("    </office:spreadsheet>\n");
            o6.push("  </office:body>\n");
            if (opts.bookType == "fods")
              o6.push("</office:document>");
            else
              o6.push("</office:document-content>");
            return o6.join("");
          };
        }();
        function write_ods(wb, opts) {
          if (opts.bookType == "fods")
            return write_content_ods(wb, opts);
          var zip = zip_new();
          var f2 = "";
          var manifest = [];
          var rdf = [];
          f2 = "mimetype";
          zip_add_file(zip, f2, "application/vnd.oasis.opendocument.spreadsheet");
          f2 = "content.xml";
          zip_add_file(zip, f2, write_content_ods(wb, opts));
          manifest.push([f2, "text/xml"]);
          rdf.push([f2, "ContentFile"]);
          f2 = "styles.xml";
          zip_add_file(zip, f2, write_styles_ods(wb, opts));
          manifest.push([f2, "text/xml"]);
          rdf.push([f2, "StylesFile"]);
          f2 = "meta.xml";
          zip_add_file(zip, f2, XML_HEADER + write_meta_ods());
          manifest.push([f2, "text/xml"]);
          rdf.push([f2, "MetadataFile"]);
          f2 = "manifest.rdf";
          zip_add_file(zip, f2, write_rdf(rdf));
          manifest.push([f2, "application/rdf+xml"]);
          f2 = "META-INF/manifest.xml";
          zip_add_file(zip, f2, write_manifest(manifest));
          return zip;
        }
        var subarray = function() {
          try {
            if (typeof Uint8Array == "undefined")
              return "slice";
            if (typeof Uint8Array.prototype.subarray == "undefined")
              return "slice";
            if (typeof Buffer !== "undefined") {
              if (typeof Buffer.prototype.subarray == "undefined")
                return "slice";
              if ((typeof Buffer.from == "function" ? Buffer.from([72, 62]) : new Buffer([72, 62])) instanceof Uint8Array)
                return "subarray";
              return "slice";
            }
            return "subarray";
          } catch (e7) {
            return "slice";
          }
        }();
        function u8_to_dataview(array) {
          return new DataView(array.buffer, array.byteOffset, array.byteLength);
        }
        function u8str(u8) {
          return typeof TextDecoder != "undefined" ? new TextDecoder().decode(u8) : utf8read(a2s(u8));
        }
        function stru8(str) {
          return typeof TextEncoder != "undefined" ? new TextEncoder().encode(str) : s2a(utf8write(str));
        }
        function u8concat(u8a) {
          var len = 0;
          for (var i6 = 0; i6 < u8a.length; ++i6)
            len += u8a[i6].length;
          var out = new Uint8Array(len);
          var off = 0;
          for (i6 = 0; i6 < u8a.length; ++i6) {
            var u8 = u8a[i6], L2 = u8.length;
            if (L2 < 250) {
              for (var j3 = 0; j3 < L2; ++j3)
                out[off++] = u8[j3];
            } else {
              out.set(u8, off);
              off += L2;
            }
          }
          return out;
        }
        function popcnt(x3) {
          x3 -= x3 >> 1 & 1431655765;
          x3 = (x3 & 858993459) + (x3 >> 2 & 858993459);
          return (x3 + (x3 >> 4) & 252645135) * 16843009 >>> 24;
        }
        function readDecimal128LE(buf, offset) {
          var exp = (buf[offset + 15] & 127) << 7 | buf[offset + 14] >> 1;
          var mantissa = buf[offset + 14] & 1;
          for (var j3 = offset + 13; j3 >= offset; --j3)
            mantissa = mantissa * 256 + buf[j3];
          return (buf[offset + 15] & 128 ? -mantissa : mantissa) * Math.pow(10, exp - 6176);
        }
        function writeDecimal128LE(buf, offset, value) {
          var exp = Math.floor(value == 0 ? 0 : Math.LOG10E * Math.log(Math.abs(value))) + 6176 - 16;
          var mantissa = value / Math.pow(10, exp - 6176);
          buf[offset + 15] |= exp >> 7;
          buf[offset + 14] |= (exp & 127) << 1;
          for (var i6 = 0; mantissa >= 1; ++i6, mantissa /= 256)
            buf[offset + i6] = mantissa & 255;
          buf[offset + 15] |= value >= 0 ? 0 : 128;
        }
        function parse_varint49(buf, ptr) {
          var l5 = ptr.l;
          var usz = buf[l5] & 127;
          varint:
            if (buf[l5++] >= 128) {
              usz |= (buf[l5] & 127) << 7;
              if (buf[l5++] < 128)
                break varint;
              usz |= (buf[l5] & 127) << 14;
              if (buf[l5++] < 128)
                break varint;
              usz |= (buf[l5] & 127) << 21;
              if (buf[l5++] < 128)
                break varint;
              usz += (buf[l5] & 127) * Math.pow(2, 28);
              ++l5;
              if (buf[l5++] < 128)
                break varint;
              usz += (buf[l5] & 127) * Math.pow(2, 35);
              ++l5;
              if (buf[l5++] < 128)
                break varint;
              usz += (buf[l5] & 127) * Math.pow(2, 42);
              ++l5;
              if (buf[l5++] < 128)
                break varint;
            }
          ptr.l = l5;
          return usz;
        }
        function write_varint49(v4) {
          var usz = new Uint8Array(7);
          usz[0] = v4 & 127;
          var L2 = 1;
          sz:
            if (v4 > 127) {
              usz[L2 - 1] |= 128;
              usz[L2] = v4 >> 7 & 127;
              ++L2;
              if (v4 <= 16383)
                break sz;
              usz[L2 - 1] |= 128;
              usz[L2] = v4 >> 14 & 127;
              ++L2;
              if (v4 <= 2097151)
                break sz;
              usz[L2 - 1] |= 128;
              usz[L2] = v4 >> 21 & 127;
              ++L2;
              if (v4 <= 268435455)
                break sz;
              usz[L2 - 1] |= 128;
              usz[L2] = v4 / 256 >>> 21 & 127;
              ++L2;
              if (v4 <= 34359738367)
                break sz;
              usz[L2 - 1] |= 128;
              usz[L2] = v4 / 65536 >>> 21 & 127;
              ++L2;
              if (v4 <= 4398046511103)
                break sz;
              usz[L2 - 1] |= 128;
              usz[L2] = v4 / 16777216 >>> 21 & 127;
              ++L2;
            }
          return usz[subarray](0, L2);
        }
        function parse_packed_varints(buf) {
          var ptr = { l: 0 };
          var out = [];
          while (ptr.l < buf.length)
            out.push(parse_varint49(buf, ptr));
          return out;
        }
        function write_packed_varints(nums) {
          return u8concat(nums.map(function(x3) {
            return write_varint49(x3);
          }));
        }
        function varint_to_i32(buf) {
          var l5 = 0, i32 = buf[l5] & 127;
          if (buf[l5++] < 128)
            return i32;
          i32 |= (buf[l5] & 127) << 7;
          if (buf[l5++] < 128)
            return i32;
          i32 |= (buf[l5] & 127) << 14;
          if (buf[l5++] < 128)
            return i32;
          i32 |= (buf[l5] & 127) << 21;
          if (buf[l5++] < 128)
            return i32;
          i32 |= (buf[l5] & 15) << 28;
          return i32;
        }
        function varint_to_u64(buf) {
          var l5 = 0, lo = buf[l5] & 127, hi = 0;
          varint:
            if (buf[l5++] >= 128) {
              lo |= (buf[l5] & 127) << 7;
              if (buf[l5++] < 128)
                break varint;
              lo |= (buf[l5] & 127) << 14;
              if (buf[l5++] < 128)
                break varint;
              lo |= (buf[l5] & 127) << 21;
              if (buf[l5++] < 128)
                break varint;
              lo |= (buf[l5] & 127) << 28;
              hi = buf[l5] >> 4 & 7;
              if (buf[l5++] < 128)
                break varint;
              hi |= (buf[l5] & 127) << 3;
              if (buf[l5++] < 128)
                break varint;
              hi |= (buf[l5] & 127) << 10;
              if (buf[l5++] < 128)
                break varint;
              hi |= (buf[l5] & 127) << 17;
              if (buf[l5++] < 128)
                break varint;
              hi |= (buf[l5] & 127) << 24;
              if (buf[l5++] < 128)
                break varint;
              hi |= (buf[l5] & 127) << 31;
            }
          return [lo >>> 0, hi >>> 0];
        }
        function parse_shallow(buf) {
          var out = [], ptr = { l: 0 };
          while (ptr.l < buf.length) {
            var off = ptr.l;
            var num = parse_varint49(buf, ptr);
            var type = num & 7;
            num = num / 8 | 0;
            var data;
            var l5 = ptr.l;
            switch (type) {
              case 0:
                {
                  while (buf[l5++] >= 128)
                    ;
                  data = buf[subarray](ptr.l, l5);
                  ptr.l = l5;
                }
                break;
              case 1:
                {
                  data = buf[subarray](l5, l5 + 8);
                  ptr.l = l5 + 8;
                }
                break;
              case 2:
                {
                  var len = parse_varint49(buf, ptr);
                  data = buf[subarray](ptr.l, ptr.l + len);
                  ptr.l += len;
                }
                break;
              case 5:
                {
                  data = buf[subarray](l5, l5 + 4);
                  ptr.l = l5 + 4;
                }
                break;
              default:
                throw new Error("PB Type ".concat(type, " for Field ").concat(num, " at offset ").concat(off));
            }
            var v4 = { data, type };
            if (out[num] == null)
              out[num] = [];
            out[num].push(v4);
          }
          return out;
        }
        function write_shallow(proto) {
          var out = [];
          proto.forEach(function(field, idx) {
            if (idx == 0)
              return;
            field.forEach(function(item) {
              if (!item.data)
                return;
              out.push(write_varint49(idx * 8 + item.type));
              if (item.type == 2)
                out.push(write_varint49(item.data.length));
              out.push(item.data);
            });
          });
          return u8concat(out);
        }
        function mappa(data, cb) {
          return (data == null ? void 0 : data.map(function(d2) {
            return cb(d2.data);
          })) || [];
        }
        function parse_iwa_file(buf) {
          var _a;
          var out = [], ptr = { l: 0 };
          while (ptr.l < buf.length) {
            var len = parse_varint49(buf, ptr);
            var ai = parse_shallow(buf[subarray](ptr.l, ptr.l + len));
            ptr.l += len;
            var res = {
              id: varint_to_i32(ai[1][0].data),
              messages: []
            };
            ai[2].forEach(function(b3) {
              var mi = parse_shallow(b3.data);
              var fl = varint_to_i32(mi[3][0].data);
              res.messages.push({
                meta: mi,
                data: buf[subarray](ptr.l, ptr.l + fl)
              });
              ptr.l += fl;
            });
            if ((_a = ai[3]) == null ? void 0 : _a[0])
              res.merge = varint_to_i32(ai[3][0].data) >>> 0 > 0;
            out.push(res);
          }
          return out;
        }
        function write_iwa_file(ias) {
          var bufs = [];
          ias.forEach(function(ia) {
            var ai = [
              [],
              [{ data: write_varint49(ia.id), type: 0 }],
              []
            ];
            if (ia.merge != null)
              ai[3] = [{ data: write_varint49(+!!ia.merge), type: 0 }];
            var midata = [];
            ia.messages.forEach(function(mi) {
              midata.push(mi.data);
              mi.meta[3] = [{ type: 0, data: write_varint49(mi.data.length) }];
              ai[2].push({ data: write_shallow(mi.meta), type: 2 });
            });
            var aipayload = write_shallow(ai);
            bufs.push(write_varint49(aipayload.length));
            bufs.push(aipayload);
            midata.forEach(function(mid) {
              return bufs.push(mid);
            });
          });
          return u8concat(bufs);
        }
        function parse_snappy_chunk(type, buf) {
          if (type != 0)
            throw new Error("Unexpected Snappy chunk type ".concat(type));
          var ptr = { l: 0 };
          var usz = parse_varint49(buf, ptr);
          var chunks = [];
          var l5 = ptr.l;
          while (l5 < buf.length) {
            var tag = buf[l5] & 3;
            if (tag == 0) {
              var len = buf[l5++] >> 2;
              if (len < 60)
                ++len;
              else {
                var c8 = len - 59;
                len = buf[l5];
                if (c8 > 1)
                  len |= buf[l5 + 1] << 8;
                if (c8 > 2)
                  len |= buf[l5 + 2] << 16;
                if (c8 > 3)
                  len |= buf[l5 + 3] << 24;
                len >>>= 0;
                len++;
                l5 += c8;
              }
              chunks.push(buf[subarray](l5, l5 + len));
              l5 += len;
              continue;
            } else {
              var offset = 0, length = 0;
              if (tag == 1) {
                length = (buf[l5] >> 2 & 7) + 4;
                offset = (buf[l5++] & 224) << 3;
                offset |= buf[l5++];
              } else {
                length = (buf[l5++] >> 2) + 1;
                if (tag == 2) {
                  offset = buf[l5] | buf[l5 + 1] << 8;
                  l5 += 2;
                } else {
                  offset = (buf[l5] | buf[l5 + 1] << 8 | buf[l5 + 2] << 16 | buf[l5 + 3] << 24) >>> 0;
                  l5 += 4;
                }
              }
              if (offset == 0)
                throw new Error("Invalid offset 0");
              var j3 = chunks.length - 1, off = offset;
              while (j3 >= 0 && off >= chunks[j3].length) {
                off -= chunks[j3].length;
                --j3;
              }
              if (j3 < 0) {
                if (off == 0)
                  off = chunks[j3 = 0].length;
                else
                  throw new Error("Invalid offset beyond length");
              }
              if (length < off)
                chunks.push(chunks[j3][subarray](chunks[j3].length - off, chunks[j3].length - off + length));
              else {
                if (off > 0) {
                  chunks.push(chunks[j3][subarray](chunks[j3].length - off));
                  length -= off;
                }
                ++j3;
                while (length >= chunks[j3].length) {
                  chunks.push(chunks[j3]);
                  length -= chunks[j3].length;
                  ++j3;
                }
                if (length)
                  chunks.push(chunks[j3][subarray](0, length));
              }
              if (chunks.length > 25)
                chunks = [u8concat(chunks)];
            }
          }
          var clen = 0;
          for (var u8i = 0; u8i < chunks.length; ++u8i)
            clen += chunks[u8i].length;
          if (clen != usz)
            throw new Error("Unexpected length: ".concat(clen, " != ").concat(usz));
          return chunks;
        }
        function decompress_iwa_file(buf) {
          if (Array.isArray(buf))
            buf = new Uint8Array(buf);
          var out = [];
          var l5 = 0;
          while (l5 < buf.length) {
            var t5 = buf[l5++];
            var len = buf[l5] | buf[l5 + 1] << 8 | buf[l5 + 2] << 16;
            l5 += 3;
            out.push.apply(out, parse_snappy_chunk(t5, buf[subarray](l5, l5 + len)));
            l5 += len;
          }
          if (l5 !== buf.length)
            throw new Error("data is not a valid framed stream!");
          return out.length == 1 ? out[0] : u8concat(out);
        }
        function compress_iwa_file(buf) {
          var out = [];
          var l5 = 0;
          while (l5 < buf.length) {
            var c8 = Math.min(buf.length - l5, 268435455);
            var frame = new Uint8Array(4);
            out.push(frame);
            var usz = write_varint49(c8);
            var L2 = usz.length;
            out.push(usz);
            if (c8 <= 60) {
              L2++;
              out.push(new Uint8Array([c8 - 1 << 2]));
            } else if (c8 <= 256) {
              L2 += 2;
              out.push(new Uint8Array([240, c8 - 1 & 255]));
            } else if (c8 <= 65536) {
              L2 += 3;
              out.push(new Uint8Array([244, c8 - 1 & 255, c8 - 1 >> 8 & 255]));
            } else if (c8 <= 16777216) {
              L2 += 4;
              out.push(new Uint8Array([248, c8 - 1 & 255, c8 - 1 >> 8 & 255, c8 - 1 >> 16 & 255]));
            } else if (c8 <= 4294967296) {
              L2 += 5;
              out.push(new Uint8Array([252, c8 - 1 & 255, c8 - 1 >> 8 & 255, c8 - 1 >> 16 & 255, c8 - 1 >>> 24 & 255]));
            }
            out.push(buf[subarray](l5, l5 + c8));
            L2 += c8;
            frame[0] = 0;
            frame[1] = L2 & 255;
            frame[2] = L2 >> 8 & 255;
            frame[3] = L2 >> 16 & 255;
            l5 += c8;
          }
          return u8concat(out);
        }
        var numbers_lut_new = function() {
          return { sst: [], rsst: [], ofmt: [], nfmt: [], fmla: [], ferr: [], cmnt: [] };
        };
        function numbers_format_cell(cell, t5, flags, ofmt, nfmt) {
          var _a, _b, _c, _d;
          var ctype = t5 & 255, ver = t5 >> 8;
          var fmt = ver >= 5 ? nfmt : ofmt;
          dur:
            if (flags & (ver > 4 ? 8 : 4) && cell.t == "n" && ctype == 7) {
              var dstyle = ((_a = fmt[7]) == null ? void 0 : _a[0]) ? varint_to_i32(fmt[7][0].data) : -1;
              if (dstyle == -1)
                break dur;
              var dmin = ((_b = fmt[15]) == null ? void 0 : _b[0]) ? varint_to_i32(fmt[15][0].data) : -1;
              var dmax = ((_c = fmt[16]) == null ? void 0 : _c[0]) ? varint_to_i32(fmt[16][0].data) : -1;
              var auto = ((_d = fmt[40]) == null ? void 0 : _d[0]) ? varint_to_i32(fmt[40][0].data) : -1;
              var d2 = cell.v, dd = d2;
              autodur:
                if (auto) {
                  if (d2 == 0) {
                    dmin = dmax = 2;
                    break autodur;
                  }
                  if (d2 >= 604800)
                    dmin = 1;
                  else if (d2 >= 86400)
                    dmin = 2;
                  else if (d2 >= 3600)
                    dmin = 4;
                  else if (d2 >= 60)
                    dmin = 8;
                  else if (d2 >= 1)
                    dmin = 16;
                  else
                    dmin = 32;
                  if (Math.floor(d2) != d2)
                    dmax = 32;
                  else if (d2 % 60)
                    dmax = 16;
                  else if (d2 % 3600)
                    dmax = 8;
                  else if (d2 % 86400)
                    dmax = 4;
                  else if (d2 % 604800)
                    dmax = 2;
                  if (dmax < dmin)
                    dmax = dmin;
                }
              if (dmin == -1 || dmax == -1)
                break dur;
              var dstr = [], zstr = [];
              if (dmin == 1) {
                dd = d2 / 604800;
                if (dmax == 1) {
                  zstr.push('d"d"');
                } else {
                  dd |= 0;
                  d2 -= 604800 * dd;
                }
                dstr.push(dd + (dstyle == 2 ? " week" + (dd == 1 ? "" : "s") : dstyle == 1 ? "w" : ""));
              }
              if (dmin <= 2 && dmax >= 2) {
                dd = d2 / 86400;
                if (dmax > 2) {
                  dd |= 0;
                  d2 -= 86400 * dd;
                }
                zstr.push('d"d"');
                dstr.push(dd + (dstyle == 2 ? " day" + (dd == 1 ? "" : "s") : dstyle == 1 ? "d" : ""));
              }
              if (dmin <= 4 && dmax >= 4) {
                dd = d2 / 3600;
                if (dmax > 4) {
                  dd |= 0;
                  d2 -= 3600 * dd;
                }
                zstr.push((dmin >= 4 ? "[h]" : "h") + '"h"');
                dstr.push(dd + (dstyle == 2 ? " hour" + (dd == 1 ? "" : "s") : dstyle == 1 ? "h" : ""));
              }
              if (dmin <= 8 && dmax >= 8) {
                dd = d2 / 60;
                if (dmax > 8) {
                  dd |= 0;
                  d2 -= 60 * dd;
                }
                zstr.push((dmin >= 8 ? "[m]" : "m") + '"m"');
                if (dstyle == 0)
                  dstr.push((dmin == 8 && dmax == 8 || dd >= 10 ? "" : "0") + dd);
                else
                  dstr.push(dd + (dstyle == 2 ? " minute" + (dd == 1 ? "" : "s") : dstyle == 1 ? "m" : ""));
              }
              if (dmin <= 16 && dmax >= 16) {
                dd = d2;
                if (dmax > 16) {
                  dd |= 0;
                  d2 -= dd;
                }
                zstr.push((dmin >= 16 ? "[s]" : "s") + '"s"');
                if (dstyle == 0)
                  dstr.push((dmax == 16 && dmin == 16 || dd >= 10 ? "" : "0") + dd);
                else
                  dstr.push(dd + (dstyle == 2 ? " second" + (dd == 1 ? "" : "s") : dstyle == 1 ? "s" : ""));
              }
              if (dmax >= 32) {
                dd = Math.round(1e3 * d2);
                if (dmin < 32)
                  zstr.push('.000"ms"');
                if (dstyle == 0)
                  dstr.push((dd >= 100 ? "" : dd >= 10 ? "0" : "00") + dd);
                else
                  dstr.push(dd + (dstyle == 2 ? " millisecond" + (dd == 1 ? "" : "s") : dstyle == 1 ? "ms" : ""));
              }
              cell.w = dstr.join(dstyle == 0 ? ":" : " ");
              cell.z = zstr.join(dstyle == 0 ? '":"' : " ");
              if (dstyle == 0)
                cell.w = cell.w.replace(/:(\d\d\d)$/, ".$1");
            }
        }
        function parse_old_storage(buf, lut, v4, opts) {
          var dv = u8_to_dataview(buf);
          var flags = dv.getUint32(4, true);
          var ridx = -1, sidx = -1, zidx = -1, ieee = NaN, dc = 0, dt2 = new Date(Date.UTC(2001, 0, 1));
          var doff = v4 > 1 ? 12 : 8;
          if (flags & 2) {
            zidx = dv.getUint32(doff, true);
            doff += 4;
          }
          doff += popcnt(flags & (v4 > 1 ? 3468 : 396)) * 4;
          if (flags & 512) {
            ridx = dv.getUint32(doff, true);
            doff += 4;
          }
          doff += popcnt(flags & (v4 > 1 ? 12288 : 4096)) * 4;
          if (flags & 16) {
            sidx = dv.getUint32(doff, true);
            doff += 4;
          }
          if (flags & 32) {
            ieee = dv.getFloat64(doff, true);
            doff += 8;
          }
          if (flags & 64) {
            dt2.setTime(dt2.getTime() + (dc = dv.getFloat64(doff, true)) * 1e3);
            doff += 8;
          }
          if (v4 > 1) {
            flags = dv.getUint32(8, true) >>> 16;
            if (flags & 255) {
              if (zidx == -1)
                zidx = dv.getUint32(doff, true);
              doff += 4;
            }
          }
          var ret;
          var t5 = buf[v4 >= 4 ? 1 : 2];
          switch (t5) {
            case 0:
              return void 0;
            case 2:
              ret = { t: "n", v: ieee };
              break;
            case 3:
              ret = { t: "s", v: lut.sst[sidx] };
              break;
            case 5:
              {
                if (opts == null ? void 0 : opts.cellDates)
                  ret = { t: "d", v: dt2 };
                else
                  ret = { t: "n", v: dc / 86400 + 35430, z: table_fmt[14] };
              }
              break;
            case 6:
              ret = { t: "b", v: ieee > 0 };
              break;
            case 7:
              ret = { t: "n", v: ieee };
              break;
            case 8:
              ret = { t: "e", v: 0 };
              break;
            case 9:
              {
                if (ridx > -1) {
                  var rts = lut.rsst[ridx];
                  ret = { t: "s", v: rts.v };
                  if (rts.l)
                    ret.l = { Target: rts.l };
                } else
                  throw new Error("Unsupported cell type ".concat(buf[subarray](0, 4)));
              }
              break;
            default:
              throw new Error("Unsupported cell type ".concat(buf[subarray](0, 4)));
          }
          if (zidx > -1)
            numbers_format_cell(ret, t5 | v4 << 8, flags, lut.ofmt[zidx], lut.nfmt[zidx]);
          if (t5 == 7)
            ret.v /= 86400;
          return ret;
        }
        function parse_new_storage(buf, lut, opts) {
          var dv = u8_to_dataview(buf);
          var flags = dv.getUint32(4, true);
          var fields = dv.getUint32(8, true);
          var doff = 12;
          var ridx = -1, sidx = -1, zidx = -1, d128 = NaN, ieee = NaN, dc = 0, dt2 = new Date(Date.UTC(2001, 0, 1)), eidx = -1, fidx = -1;
          if (fields & 1) {
            d128 = readDecimal128LE(buf, doff);
            doff += 16;
          }
          if (fields & 2) {
            ieee = dv.getFloat64(doff, true);
            doff += 8;
          }
          if (fields & 4) {
            dt2.setTime(dt2.getTime() + (dc = dv.getFloat64(doff, true)) * 1e3);
            doff += 8;
          }
          if (fields & 8) {
            sidx = dv.getUint32(doff, true);
            doff += 4;
          }
          if (fields & 16) {
            ridx = dv.getUint32(doff, true);
            doff += 4;
          }
          doff += popcnt(fields & 480) * 4;
          if (fields & 512) {
            fidx = dv.getUint32(doff, true);
            doff += 4;
          }
          doff += popcnt(fields & 1024) * 4;
          if (fields & 2048) {
            eidx = dv.getUint32(doff, true);
            doff += 4;
          }
          var ret;
          var t5 = buf[1];
          switch (t5) {
            case 0:
              ret = { t: "z" };
              break;
            case 2:
              ret = { t: "n", v: d128 };
              break;
            case 3:
              ret = { t: "s", v: lut.sst[sidx] };
              break;
            case 5:
              {
                if (opts == null ? void 0 : opts.cellDates)
                  ret = { t: "d", v: dt2 };
                else
                  ret = { t: "n", v: dc / 86400 + 35430, z: table_fmt[14] };
              }
              break;
            case 6:
              ret = { t: "b", v: ieee > 0 };
              break;
            case 7:
              ret = { t: "n", v: ieee };
              break;
            case 8:
              ret = { t: "e", v: 0 };
              break;
            case 9:
              {
                if (ridx > -1) {
                  var rts = lut.rsst[ridx];
                  ret = { t: "s", v: rts.v };
                  if (rts.l)
                    ret.l = { Target: rts.l };
                } else
                  throw new Error("Unsupported cell type ".concat(buf[1], " : ").concat(fields & 31, " : ").concat(buf[subarray](0, 4)));
              }
              break;
            case 10:
              ret = { t: "n", v: d128 };
              break;
            default:
              throw new Error("Unsupported cell type ".concat(buf[1], " : ").concat(fields & 31, " : ").concat(buf[subarray](0, 4)));
          }
          doff += popcnt(fields & 4096) * 4;
          if (fields & 516096) {
            if (zidx == -1)
              zidx = dv.getUint32(doff, true);
            doff += 4;
          }
          if (fields & 524288) {
            var cmntidx = dv.getUint32(doff, true);
            doff += 4;
            if (lut.cmnt[cmntidx])
              ret.c = iwa_to_s5s_comment(lut.cmnt[cmntidx]);
          }
          if (zidx > -1)
            numbers_format_cell(ret, t5 | 5 << 8, fields >> 13, lut.ofmt[zidx], lut.nfmt[zidx]);
          if (t5 == 7)
            ret.v /= 86400;
          return ret;
        }
        function write_new_storage(cell, lut) {
          var out = new Uint8Array(32), dv = u8_to_dataview(out), l5 = 12, fields = 0;
          out[0] = 5;
          switch (cell.t) {
            case "n":
              if (cell.z && fmt_is_date(cell.z)) {
                out[1] = 5;
                dv.setFloat64(l5, (numdate(cell.v + 1462).getTime() - Date.UTC(2001, 0, 1)) / 1e3, true);
                fields |= 4;
                l5 += 8;
                break;
              } else {
                out[1] = 2;
                writeDecimal128LE(out, l5, cell.v);
                fields |= 1;
                l5 += 16;
              }
              break;
            case "b":
              out[1] = 6;
              dv.setFloat64(l5, cell.v ? 1 : 0, true);
              fields |= 2;
              l5 += 8;
              break;
            case "s":
              {
                var s3 = cell.v == null ? "" : String(cell.v);
                if (cell.l) {
                  var irsst = lut.rsst.findIndex(function(v4) {
                    var _a;
                    return v4.v == s3 && v4.l == ((_a = cell.l) == null ? void 0 : _a.Target);
                  });
                  if (irsst == -1)
                    lut.rsst[irsst = lut.rsst.length] = { v: s3, l: cell.l.Target };
                  out[1] = 9;
                  dv.setUint32(l5, irsst, true);
                  fields |= 16;
                  l5 += 4;
                } else {
                  var isst = lut.sst.indexOf(s3);
                  if (isst == -1)
                    lut.sst[isst = lut.sst.length] = s3;
                  out[1] = 3;
                  dv.setUint32(l5, isst, true);
                  fields |= 8;
                  l5 += 4;
                }
              }
              break;
            case "d":
              out[1] = 5;
              dv.setFloat64(l5, (cell.v.getTime() - Date.UTC(2001, 0, 1)) / 1e3, true);
              fields |= 4;
              l5 += 8;
              break;
            case "z":
              out[1] = 0;
              break;
            default:
              throw "unsupported cell type " + cell.t;
          }
          if (cell.c) {
            lut.cmnt.push(s5s_to_iwa_comment(cell.c));
            dv.setUint32(l5, lut.cmnt.length - 1, true);
            fields |= 524288;
            l5 += 4;
          }
          dv.setUint32(8, fields, true);
          return out[subarray](0, l5);
        }
        function write_old_storage(cell, lut) {
          var out = new Uint8Array(32), dv = u8_to_dataview(out), l5 = 12, fields = 0, s3 = "";
          out[0] = 4;
          switch (cell.t) {
            case "n":
              break;
            case "b":
              break;
            case "s":
              {
                s3 = cell.v == null ? "" : String(cell.v);
                if (cell.l) {
                  var irsst = lut.rsst.findIndex(function(v4) {
                    var _a;
                    return v4.v == s3 && v4.l == ((_a = cell.l) == null ? void 0 : _a.Target);
                  });
                  if (irsst == -1)
                    lut.rsst[irsst = lut.rsst.length] = { v: s3, l: cell.l.Target };
                  out[1] = 9;
                  dv.setUint32(l5, irsst, true);
                  fields |= 512;
                  l5 += 4;
                } else {
                }
              }
              break;
            case "d":
              break;
            case "e":
              break;
            case "z":
              break;
            default:
              throw "unsupported cell type " + cell.t;
          }
          if (cell.c) {
            dv.setUint32(l5, lut.cmnt.length - 1, true);
            fields |= 4096;
            l5 += 4;
          }
          switch (cell.t) {
            case "n":
              out[1] = 2;
              dv.setFloat64(l5, cell.v, true);
              fields |= 32;
              l5 += 8;
              break;
            case "b":
              out[1] = 6;
              dv.setFloat64(l5, cell.v ? 1 : 0, true);
              fields |= 32;
              l5 += 8;
              break;
            case "s":
              {
                s3 = cell.v == null ? "" : String(cell.v);
                if (cell.l) {
                } else {
                  var isst = lut.sst.indexOf(s3);
                  if (isst == -1)
                    lut.sst[isst = lut.sst.length] = s3;
                  out[1] = 3;
                  dv.setUint32(l5, isst, true);
                  fields |= 16;
                  l5 += 4;
                }
              }
              break;
            case "d":
              out[1] = 5;
              dv.setFloat64(l5, (cell.v.getTime() - Date.UTC(2001, 0, 1)) / 1e3, true);
              fields |= 64;
              l5 += 8;
              break;
            case "z":
              out[1] = 0;
              break;
            default:
              throw "unsupported cell type " + cell.t;
          }
          dv.setUint32(8, fields, true);
          return out[subarray](0, l5);
        }
        function parse_cell_storage(buf, lut, opts) {
          switch (buf[0]) {
            case 0:
            case 1:
            case 2:
            case 3:
            case 4:
              return parse_old_storage(buf, lut, buf[0], opts);
            case 5:
              return parse_new_storage(buf, lut, opts);
            default:
              throw new Error("Unsupported payload version ".concat(buf[0]));
          }
        }
        function parse_TSP_Reference(buf) {
          var pb = parse_shallow(buf);
          return varint_to_i32(pb[1][0].data);
        }
        function write_TSP_Reference(idx) {
          return write_shallow([
            [],
            [{ type: 0, data: write_varint49(idx) }]
          ]);
        }
        function numbers_add_oref(iwa, ref) {
          var _a;
          var orefs = ((_a = iwa.messages[0].meta[5]) == null ? void 0 : _a[0]) ? parse_packed_varints(iwa.messages[0].meta[5][0].data) : [];
          var orefidx = orefs.indexOf(ref);
          if (orefidx == -1) {
            orefs.push(ref);
            iwa.messages[0].meta[5] = [{ type: 2, data: write_packed_varints(orefs) }];
          }
        }
        function numbers_del_oref(iwa, ref) {
          var _a;
          var orefs = ((_a = iwa.messages[0].meta[5]) == null ? void 0 : _a[0]) ? parse_packed_varints(iwa.messages[0].meta[5][0].data) : [];
          iwa.messages[0].meta[5] = [{ type: 2, data: write_packed_varints(orefs.filter(function(r6) {
            return r6 != ref;
          })) }];
        }
        function parse_TST_TableDataList(M3, root) {
          var pb = parse_shallow(root.data);
          var type = varint_to_i32(pb[1][0].data);
          var entries = pb[3];
          var data = [];
          (entries || []).forEach(function(entry) {
            var _a, _b;
            var le2 = parse_shallow(entry.data);
            if (!le2[1])
              return;
            var key = varint_to_i32(le2[1][0].data) >>> 0;
            switch (type) {
              case 1:
                data[key] = u8str(le2[3][0].data);
                break;
              case 8:
                {
                  var rt2 = M3[parse_TSP_Reference(le2[9][0].data)][0];
                  var rtp = parse_shallow(rt2.data);
                  var rtpref = M3[parse_TSP_Reference(rtp[1][0].data)][0];
                  var mtype = varint_to_i32(rtpref.meta[1][0].data);
                  if (mtype != 2001)
                    throw new Error("2000 unexpected reference to ".concat(mtype));
                  var tswpsa = parse_shallow(rtpref.data);
                  var richtext = { v: tswpsa[3].map(function(x3) {
                    return u8str(x3.data);
                  }).join("") };
                  data[key] = richtext;
                  sfields:
                    if ((_a = tswpsa == null ? void 0 : tswpsa[11]) == null ? void 0 : _a[0]) {
                      var smartfields = (_b = parse_shallow(tswpsa[11][0].data)) == null ? void 0 : _b[1];
                      if (!smartfields)
                        break sfields;
                      smartfields.forEach(function(sf) {
                        var _a2, _b2, _c;
                        var attr = parse_shallow(sf.data);
                        if ((_a2 = attr[2]) == null ? void 0 : _a2[0]) {
                          var obj = M3[parse_TSP_Reference((_b2 = attr[2]) == null ? void 0 : _b2[0].data)][0];
                          var objtype = varint_to_i32(obj.meta[1][0].data);
                          switch (objtype) {
                            case 2032:
                              var hlink = parse_shallow(obj.data);
                              if (((_c = hlink == null ? void 0 : hlink[2]) == null ? void 0 : _c[0]) && !richtext.l)
                                richtext.l = u8str(hlink[2][0].data);
                              break;
                            case 2039:
                              break;
                            default:
                              console.log("unrecognized ObjectAttribute type ".concat(objtype));
                          }
                        }
                      });
                    }
                }
                break;
              case 2:
                data[key] = parse_shallow(le2[6][0].data);
                break;
              case 3:
                data[key] = parse_shallow(le2[5][0].data);
                break;
              case 10:
                {
                  var cs = M3[parse_TSP_Reference(le2[10][0].data)][0];
                  data[key] = parse_TSD_CommentStorageArchive(M3, cs.data);
                }
                break;
              default:
                throw type;
            }
          });
          return data;
        }
        function parse_TST_TileRowInfo(u8, type) {
          var _a, _b, _c, _d, _e, _f, _g, _h, _i, _j, _k, _l, _m, _n2;
          var pb = parse_shallow(u8);
          var R2 = varint_to_i32(pb[1][0].data) >>> 0;
          var cnt = varint_to_i32(pb[2][0].data) >>> 0;
          var wide_offsets = ((_b = (_a = pb[8]) == null ? void 0 : _a[0]) == null ? void 0 : _b.data) && varint_to_i32(pb[8][0].data) > 0 || false;
          var used_storage_u8, used_storage;
          if (((_d = (_c = pb[7]) == null ? void 0 : _c[0]) == null ? void 0 : _d.data) && type != 0) {
            used_storage_u8 = (_f = (_e = pb[7]) == null ? void 0 : _e[0]) == null ? void 0 : _f.data;
            used_storage = (_h = (_g = pb[6]) == null ? void 0 : _g[0]) == null ? void 0 : _h.data;
          } else if (((_j = (_i = pb[4]) == null ? void 0 : _i[0]) == null ? void 0 : _j.data) && type != 1) {
            used_storage_u8 = (_l = (_k = pb[4]) == null ? void 0 : _k[0]) == null ? void 0 : _l.data;
            used_storage = (_n2 = (_m = pb[3]) == null ? void 0 : _m[0]) == null ? void 0 : _n2.data;
          } else
            throw "NUMBERS Tile missing ".concat(type, " cell storage");
          var width = wide_offsets ? 4 : 1;
          var used_storage_offsets = u8_to_dataview(used_storage_u8);
          var offsets = [];
          for (var C6 = 0; C6 < used_storage_u8.length / 2; ++C6) {
            var off = used_storage_offsets.getUint16(C6 * 2, true);
            if (off < 65535)
              offsets.push([C6, off]);
          }
          if (offsets.length != cnt)
            throw "Expected ".concat(cnt, " cells, found ").concat(offsets.length);
          var cells = [];
          for (C6 = 0; C6 < offsets.length - 1; ++C6)
            cells[offsets[C6][0]] = used_storage[subarray](offsets[C6][1] * width, offsets[C6 + 1][1] * width);
          if (offsets.length >= 1)
            cells[offsets[offsets.length - 1][0]] = used_storage[subarray](offsets[offsets.length - 1][1] * width);
          return { R: R2, cells };
        }
        function parse_TST_Tile(M3, root) {
          var _a;
          var pb = parse_shallow(root.data);
          var storage = -1;
          if ((_a = pb == null ? void 0 : pb[7]) == null ? void 0 : _a[0]) {
            if (varint_to_i32(pb[7][0].data) >>> 0)
              storage = 1;
            else
              storage = 0;
          }
          var ri = mappa(pb[5], function(u8) {
            return parse_TST_TileRowInfo(u8, storage);
          });
          return {
            nrows: varint_to_i32(pb[4][0].data) >>> 0,
            data: ri.reduce(function(acc, x3) {
              if (!acc[x3.R])
                acc[x3.R] = [];
              x3.cells.forEach(function(cell, C6) {
                if (acc[x3.R][C6])
                  throw new Error("Duplicate cell r=".concat(x3.R, " c=").concat(C6));
                acc[x3.R][C6] = cell;
              });
              return acc;
            }, [])
          };
        }
        function parse_TSD_CommentStorageArchive(M3, data) {
          var _a, _b, _c, _d, _e, _f, _g, _h, _i, _j;
          var out = { t: "", a: "" };
          var csp = parse_shallow(data);
          if ((_b = (_a = csp == null ? void 0 : csp[1]) == null ? void 0 : _a[0]) == null ? void 0 : _b.data)
            out.t = u8str((_d = (_c = csp == null ? void 0 : csp[1]) == null ? void 0 : _c[0]) == null ? void 0 : _d.data) || "";
          if ((_f = (_e = csp == null ? void 0 : csp[3]) == null ? void 0 : _e[0]) == null ? void 0 : _f.data) {
            var as = M3[parse_TSP_Reference((_h = (_g = csp == null ? void 0 : csp[3]) == null ? void 0 : _g[0]) == null ? void 0 : _h.data)][0];
            var asp = parse_shallow(as.data);
            if ((_j = (_i = asp[1]) == null ? void 0 : _i[0]) == null ? void 0 : _j.data)
              out.a = u8str(asp[1][0].data);
          }
          if (csp == null ? void 0 : csp[4]) {
            out.replies = [];
            csp[4].forEach(function(pi3) {
              var cs = M3[parse_TSP_Reference(pi3.data)][0];
              out.replies.push(parse_TSD_CommentStorageArchive(M3, cs.data));
            });
          }
          return out;
        }
        function iwa_to_s5s_comment(iwa) {
          var out = [];
          out.push({ t: iwa.t || "", a: iwa.a, T: iwa.replies && iwa.replies.length > 0 });
          if (iwa.replies)
            iwa.replies.forEach(function(reply) {
              out.push({ t: reply.t || "", a: reply.a, T: true });
            });
          return out;
        }
        function s5s_to_iwa_comment(s5s) {
          var out = { a: "", t: "", replies: [] };
          for (var i6 = 0; i6 < s5s.length; ++i6) {
            if (i6 == 0) {
              out.a = s5s[i6].a;
              out.t = s5s[i6].t;
            } else {
              out.replies.push({ a: s5s[i6].a, t: s5s[i6].t });
            }
          }
          return out;
        }
        function parse_TST_TableModelArchive(M3, root, ws, opts) {
          var _a, _b, _c, _d, _e, _f, _g, _h, _i, _j, _k, _l, _m, _n2;
          var pb = parse_shallow(root.data);
          var range = { s: { r: 0, c: 0 }, e: { r: 0, c: 0 } };
          range.e.r = (varint_to_i32(pb[6][0].data) >>> 0) - 1;
          if (range.e.r < 0)
            throw new Error("Invalid row varint ".concat(pb[6][0].data));
          range.e.c = (varint_to_i32(pb[7][0].data) >>> 0) - 1;
          if (range.e.c < 0)
            throw new Error("Invalid col varint ".concat(pb[7][0].data));
          ws["!ref"] = encode_range(range);
          var dense = ws["!data"] != null, dws = ws;
          var store = parse_shallow(pb[4][0].data);
          var lut = numbers_lut_new();
          if ((_a = store[4]) == null ? void 0 : _a[0])
            lut.sst = parse_TST_TableDataList(M3, M3[parse_TSP_Reference(store[4][0].data)][0]);
          if ((_b = store[6]) == null ? void 0 : _b[0])
            lut.fmla = parse_TST_TableDataList(M3, M3[parse_TSP_Reference(store[6][0].data)][0]);
          if ((_c = store[11]) == null ? void 0 : _c[0])
            lut.ofmt = parse_TST_TableDataList(M3, M3[parse_TSP_Reference(store[11][0].data)][0]);
          if ((_d = store[12]) == null ? void 0 : _d[0])
            lut.ferr = parse_TST_TableDataList(M3, M3[parse_TSP_Reference(store[12][0].data)][0]);
          if ((_e = store[17]) == null ? void 0 : _e[0])
            lut.rsst = parse_TST_TableDataList(M3, M3[parse_TSP_Reference(store[17][0].data)][0]);
          if ((_f = store[19]) == null ? void 0 : _f[0])
            lut.cmnt = parse_TST_TableDataList(M3, M3[parse_TSP_Reference(store[19][0].data)][0]);
          if ((_g = store[22]) == null ? void 0 : _g[0])
            lut.nfmt = parse_TST_TableDataList(M3, M3[parse_TSP_Reference(store[22][0].data)][0]);
          var tile = parse_shallow(store[3][0].data);
          var _R = 0;
          if (!((_h = store[9]) == null ? void 0 : _h[0]))
            throw "NUMBERS file missing row tree";
          var rtt = parse_shallow(store[9][0].data)[1].map(function(p2) {
            return parse_shallow(p2.data);
          });
          rtt.forEach(function(kv) {
            _R = varint_to_i32(kv[1][0].data);
            var tidx = varint_to_i32(kv[2][0].data);
            var t5 = tile[1][tidx];
            if (!t5)
              throw "NUMBERS missing tile " + tidx;
            var tl = parse_shallow(t5.data);
            var ref2 = M3[parse_TSP_Reference(tl[2][0].data)][0];
            var mtype2 = varint_to_i32(ref2.meta[1][0].data);
            if (mtype2 != 6002)
              throw new Error("6001 unexpected reference to ".concat(mtype2));
            var _tile = parse_TST_Tile(M3, ref2);
            _tile.data.forEach(function(row, R2) {
              row.forEach(function(buf, C6) {
                var res = parse_cell_storage(buf, lut, opts);
                if (res) {
                  if (dense) {
                    if (!dws["!data"][_R + R2])
                      dws["!data"][_R + R2] = [];
                    dws["!data"][_R + R2][C6] = res;
                  } else {
                    ws[encode_col(C6) + encode_row(_R + R2)] = res;
                  }
                }
              });
            });
            _R += _tile.nrows;
          });
          if ((_i = store[13]) == null ? void 0 : _i[0]) {
            var ref = M3[parse_TSP_Reference(store[13][0].data)][0];
            var mtype = varint_to_i32(ref.meta[1][0].data);
            if (mtype != 6144)
              throw new Error("Expected merge type 6144, found ".concat(mtype));
            ws["!merges"] = (_j = parse_shallow(ref.data)) == null ? void 0 : _j[1].map(function(pi3) {
              var merge2 = parse_shallow(pi3.data);
              var origin = u8_to_dataview(parse_shallow(merge2[1][0].data)[1][0].data), size = u8_to_dataview(parse_shallow(merge2[2][0].data)[1][0].data);
              return {
                s: { r: origin.getUint16(0, true), c: origin.getUint16(2, true) },
                e: {
                  r: origin.getUint16(0, true) + size.getUint16(0, true) - 1,
                  c: origin.getUint16(2, true) + size.getUint16(2, true) - 1
                }
              };
            });
          }
          if (!((_k = ws["!merges"]) == null ? void 0 : _k.length) && ((_l = pb[47]) == null ? void 0 : _l[0])) {
            var merge_owner = parse_shallow(pb[47][0].data);
            if ((_m = merge_owner[2]) == null ? void 0 : _m[0]) {
              var formula_store = parse_shallow(merge_owner[2][0].data);
              if ((_n2 = formula_store[3]) == null ? void 0 : _n2[0]) {
                ws["!merges"] = mappa(formula_store[3], function(u5) {
                  var _a2, _b2, _c2, _d2, _e2;
                  var formula_pair = parse_shallow(u5);
                  var formula = parse_shallow(formula_pair[2][0].data);
                  var AST_node_array = parse_shallow(formula[1][0].data);
                  if (!((_a2 = AST_node_array[1]) == null ? void 0 : _a2[0]))
                    return;
                  var AST_node0 = parse_shallow(AST_node_array[1][0].data);
                  var AST_node_type = varint_to_i32(AST_node0[1][0].data);
                  if (AST_node_type != 67)
                    return;
                  var AST_colon_tract = parse_shallow(AST_node0[40][0].data);
                  if (!((_b2 = AST_colon_tract[3]) == null ? void 0 : _b2[0]) || !((_c2 = AST_colon_tract[4]) == null ? void 0 : _c2[0]))
                    return;
                  var colrange = parse_shallow(AST_colon_tract[3][0].data);
                  var rowrange = parse_shallow(AST_colon_tract[4][0].data);
                  var c8 = varint_to_i32(colrange[1][0].data);
                  var C6 = ((_d2 = colrange[2]) == null ? void 0 : _d2[0]) ? varint_to_i32(colrange[2][0].data) : c8;
                  var r6 = varint_to_i32(rowrange[1][0].data);
                  var R2 = ((_e2 = rowrange[2]) == null ? void 0 : _e2[0]) ? varint_to_i32(rowrange[2][0].data) : r6;
                  return { s: { r: r6, c: c8 }, e: { r: R2, c: C6 } };
                }).filter(function(x3) {
                  return x3 != null;
                });
              }
            }
          }
        }
        function parse_TST_TableInfoArchive(M3, root, opts) {
          var pb = parse_shallow(root.data);
          var out = { "!ref": "A1" };
          if (opts == null ? void 0 : opts.dense)
            out["!data"] = [];
          var tableref = M3[parse_TSP_Reference(pb[2][0].data)];
          var mtype = varint_to_i32(tableref[0].meta[1][0].data);
          if (mtype != 6001)
            throw new Error("6000 unexpected reference to ".concat(mtype));
          parse_TST_TableModelArchive(M3, tableref[0], out, opts);
          return out;
        }
        function parse_TN_SheetArchive(M3, root, opts) {
          var _a;
          var pb = parse_shallow(root.data);
          var out = {
            name: ((_a = pb[1]) == null ? void 0 : _a[0]) ? u8str(pb[1][0].data) : "",
            sheets: []
          };
          var shapeoffs = mappa(pb[2], parse_TSP_Reference);
          shapeoffs.forEach(function(off) {
            M3[off].forEach(function(m4) {
              var mtype = varint_to_i32(m4.meta[1][0].data);
              if (mtype == 6e3)
                out.sheets.push(parse_TST_TableInfoArchive(M3, m4, opts));
            });
          });
          return out;
        }
        function parse_TN_DocumentArchive(M3, root, opts) {
          var _a;
          var out = book_new();
          out.Workbook = { WBProps: { date1904: true } };
          var pb = parse_shallow(root.data);
          if ((_a = pb[2]) == null ? void 0 : _a[0])
            throw new Error("Keynote presentations are not supported");
          var sheetoffs = mappa(pb[1], parse_TSP_Reference);
          sheetoffs.forEach(function(off) {
            M3[off].forEach(function(m4) {
              var mtype = varint_to_i32(m4.meta[1][0].data);
              if (mtype == 2) {
                var root2 = parse_TN_SheetArchive(M3, m4, opts);
                root2.sheets.forEach(function(sheet, idx) {
                  book_append_sheet(out, sheet, idx == 0 ? root2.name : root2.name + "_" + idx, true);
                });
              }
            });
          });
          if (out.SheetNames.length == 0)
            throw new Error("Empty NUMBERS file");
          out.bookType = "numbers";
          return out;
        }
        function parse_numbers_iwa(cfb, opts) {
          var _a, _b, _c, _d, _e, _f, _g;
          var M3 = {}, indices = [];
          cfb.FullPaths.forEach(function(p2) {
            if (p2.match(/\.iwpv2/))
              throw new Error("Unsupported password protection");
          });
          cfb.FileIndex.forEach(function(s3) {
            if (!s3.name.match(/\.iwa$/))
              return;
            if (s3.content[0] != 0)
              return;
            var o6;
            try {
              o6 = decompress_iwa_file(s3.content);
            } catch (e7) {
              return console.log("?? " + s3.content.length + " " + (e7.message || e7));
            }
            var packets;
            try {
              packets = parse_iwa_file(o6);
            } catch (e7) {
              return console.log("## " + (e7.message || e7));
            }
            packets.forEach(function(packet) {
              M3[packet.id] = packet.messages;
              indices.push(packet.id);
            });
          });
          if (!indices.length)
            throw new Error("File has no messages");
          if (((_c = (_b = (_a = M3 == null ? void 0 : M3[1]) == null ? void 0 : _a[0].meta) == null ? void 0 : _b[1]) == null ? void 0 : _c[0].data) && varint_to_i32(M3[1][0].meta[1][0].data) == 1e4)
            throw new Error("Pages documents are not supported");
          var docroot = ((_g = (_f = (_e = (_d = M3 == null ? void 0 : M3[1]) == null ? void 0 : _d[0]) == null ? void 0 : _e.meta) == null ? void 0 : _f[1]) == null ? void 0 : _g[0].data) && varint_to_i32(M3[1][0].meta[1][0].data) == 1 && M3[1][0];
          if (!docroot)
            indices.forEach(function(idx) {
              M3[idx].forEach(function(iwam) {
                var mtype = varint_to_i32(iwam.meta[1][0].data) >>> 0;
                if (mtype == 1) {
                  if (!docroot)
                    docroot = iwam;
                  else
                    throw new Error("Document has multiple roots");
                }
              });
            });
          if (!docroot)
            throw new Error("Cannot find Document root");
          return parse_TN_DocumentArchive(M3, docroot, opts);
        }
        function write_TST_TileRowInfo(data, lut, wide) {
          var _a, _b, _c;
          var tri = [
            [],
            [{ type: 0, data: write_varint49(0) }],
            [{ type: 0, data: write_varint49(0) }],
            [{ type: 2, data: new Uint8Array([]) }],
            [{ type: 2, data: new Uint8Array(Array.from({ length: 510 }, function() {
              return 255;
            })) }],
            [{ type: 0, data: write_varint49(5) }],
            [{ type: 2, data: new Uint8Array([]) }],
            [{ type: 2, data: new Uint8Array(Array.from({ length: 510 }, function() {
              return 255;
            })) }],
            [{ type: 0, data: write_varint49(1) }]
          ];
          if (!((_a = tri[6]) == null ? void 0 : _a[0]) || !((_b = tri[7]) == null ? void 0 : _b[0]))
            throw "Mutation only works on post-BNC storages!";
          var cnt = 0;
          if (tri[7][0].data.length < 2 * data.length) {
            var new_7 = new Uint8Array(2 * data.length);
            new_7.set(tri[7][0].data);
            tri[7][0].data = new_7;
          }
          if (tri[4][0].data.length < 2 * data.length) {
            var new_4 = new Uint8Array(2 * data.length);
            new_4.set(tri[4][0].data);
            tri[4][0].data = new_4;
          }
          var dv = u8_to_dataview(tri[7][0].data), last_offset = 0, cell_storage = [];
          var _dv = u8_to_dataview(tri[4][0].data), _last_offset = 0, _cell_storage = [];
          var width = wide ? 4 : 1;
          for (var C6 = 0; C6 < data.length; ++C6) {
            if (data[C6] == null || data[C6].t == "z" && !((_c = data[C6].c) == null ? void 0 : _c.length) || data[C6].t == "e") {
              dv.setUint16(C6 * 2, 65535, true);
              _dv.setUint16(C6 * 2, 65535);
              continue;
            }
            dv.setUint16(C6 * 2, last_offset / width, true);
            _dv.setUint16(C6 * 2, _last_offset / width, true);
            var celload, _celload;
            switch (data[C6].t) {
              case "d":
                if (data[C6].v instanceof Date) {
                  celload = write_new_storage(data[C6], lut);
                  _celload = write_old_storage(data[C6], lut);
                  break;
                }
                celload = write_new_storage(data[C6], lut);
                _celload = write_old_storage(data[C6], lut);
                break;
              case "s":
              case "n":
              case "b":
              case "z":
                celload = write_new_storage(data[C6], lut);
                _celload = write_old_storage(data[C6], lut);
                break;
              default:
                throw new Error("Unsupported value " + data[C6]);
            }
            cell_storage.push(celload);
            last_offset += celload.length;
            {
              _cell_storage.push(_celload);
              _last_offset += _celload.length;
            }
            ++cnt;
          }
          tri[2][0].data = write_varint49(cnt);
          tri[5][0].data = write_varint49(5);
          for (; C6 < tri[7][0].data.length / 2; ++C6) {
            dv.setUint16(C6 * 2, 65535, true);
            _dv.setUint16(C6 * 2, 65535, true);
          }
          tri[6][0].data = u8concat(cell_storage);
          tri[3][0].data = u8concat(_cell_storage);
          tri[8] = [{ type: 0, data: write_varint49(wide ? 1 : 0) }];
          return tri;
        }
        function write_iwam(type, payload) {
          return {
            meta: [
              [],
              [{ type: 0, data: write_varint49(type) }]
            ],
            data: payload
          };
        }
        function get_unique_msgid(dep, dependents) {
          if (!dependents.last)
            dependents.last = 927262;
          for (var i6 = dependents.last; i6 < 2e6; ++i6)
            if (!dependents[i6]) {
              dependents[dependents.last = i6] = dep;
              return i6;
            }
          throw new Error("Too many messages");
        }
        function build_numbers_deps(cfb) {
          var dependents = {};
          var indices = [];
          cfb.FileIndex.map(function(fi, idx) {
            return [fi, cfb.FullPaths[idx]];
          }).forEach(function(row) {
            var fi = row[0], fp = row[1];
            if (fi.type != 2)
              return;
            if (!fi.name.match(/\.iwa/))
              return;
            if (fi.content[0] != 0)
              return;
            parse_iwa_file(decompress_iwa_file(fi.content)).forEach(function(packet) {
              indices.push(packet.id);
              dependents[packet.id] = { deps: [], location: fp, type: varint_to_i32(packet.messages[0].meta[1][0].data) };
            });
          });
          cfb.FileIndex.forEach(function(fi) {
            if (!fi.name.match(/\.iwa/))
              return;
            if (fi.content[0] != 0)
              return;
            parse_iwa_file(decompress_iwa_file(fi.content)).forEach(function(ia) {
              ia.messages.forEach(function(mess) {
                [5, 6].forEach(function(f2) {
                  if (!mess.meta[f2])
                    return;
                  mess.meta[f2].forEach(function(x3) {
                    dependents[ia.id].deps.push(varint_to_i32(x3.data));
                  });
                });
              });
            });
          });
          return dependents;
        }
        function write_TSP_Color_RGB(r6, g2, b3) {
          return write_shallow([
            [],
            [{ type: 0, data: write_varint49(1) }],
            [],
            [{ type: 5, data: new Uint8Array(Float32Array.from([r6 / 255]).buffer) }],
            [{ type: 5, data: new Uint8Array(Float32Array.from([g2 / 255]).buffer) }],
            [{ type: 5, data: new Uint8Array(Float32Array.from([b3 / 255]).buffer) }],
            [{ type: 5, data: new Uint8Array(Float32Array.from([1]).buffer) }],
            [],
            [],
            [],
            [],
            [],
            [{ type: 0, data: write_varint49(1) }]
          ]);
        }
        function get_author_color(n6) {
          switch (n6) {
            case 0:
              return write_TSP_Color_RGB(99, 222, 171);
            case 1:
              return write_TSP_Color_RGB(162, 197, 240);
            case 2:
              return write_TSP_Color_RGB(255, 189, 189);
          }
          return write_TSP_Color_RGB(Math.random() * 255, Math.random() * 255, Math.random() * 255);
        }
        function write_numbers_iwa(wb, opts) {
          if (!opts || !opts.numbers)
            throw new Error("Must pass a `numbers` option -- check the README");
          var cfb = CFB.read(opts.numbers, { type: "base64" });
          var deps = build_numbers_deps(cfb);
          var docroot = numbers_iwa_find(cfb, deps, 1);
          if (docroot == null)
            throw "Could not find message ".concat(1, " in Numbers template");
          var sheetrefs = mappa(parse_shallow(docroot.messages[0].data)[1], parse_TSP_Reference);
          if (sheetrefs.length > 1)
            throw new Error("Template NUMBERS file must have exactly one sheet");
          wb.SheetNames.forEach(function(name, idx) {
            if (idx >= 1) {
              numbers_add_ws(cfb, deps, idx + 1);
              docroot = numbers_iwa_find(cfb, deps, 1);
              sheetrefs = mappa(parse_shallow(docroot.messages[0].data)[1], parse_TSP_Reference);
            }
            write_numbers_ws(cfb, deps, wb.Sheets[name], name, idx, sheetrefs[idx]);
          });
          return cfb;
        }
        function numbers_iwa_doit(cfb, deps, id, cb) {
          var entry = CFB.find(cfb, deps[id].location);
          if (!entry)
            throw "Could not find ".concat(deps[id].location, " in Numbers template");
          var x3 = parse_iwa_file(decompress_iwa_file(entry.content));
          var ainfo = x3.find(function(packet) {
            return packet.id == id;
          });
          cb(ainfo, x3);
          entry.content = compress_iwa_file(write_iwa_file(x3));
          entry.size = entry.content.length;
        }
        function numbers_iwa_find(cfb, deps, id) {
          var entry = CFB.find(cfb, deps[id].location);
          if (!entry)
            throw "Could not find ".concat(deps[id].location, " in Numbers template");
          var x3 = parse_iwa_file(decompress_iwa_file(entry.content));
          var ainfo = x3.find(function(packet) {
            return packet.id == id;
          });
          return ainfo;
        }
        function numbers_add_meta(mlist, newid, newloc) {
          mlist[3].push({ type: 2, data: write_shallow([
            [],
            [{ type: 0, data: write_varint49(newid) }],
            [{ type: 2, data: stru8(newloc.replace(/-[\s\S]*$/, "")) }],
            [{ type: 2, data: stru8(newloc) }],
            [{ type: 2, data: new Uint8Array([2, 0, 0]) }],
            [{ type: 2, data: new Uint8Array([2, 0, 0]) }],
            [],
            [],
            [],
            [],
            [{ type: 0, data: write_varint49(0) }],
            [],
            [{ type: 0, data: write_varint49(0) }]
          ]) });
          mlist[1] = [{ type: 0, data: write_varint49(Math.max(newid + 1, varint_to_i32(mlist[1][0].data))) }];
        }
        function numbers_add_msg(cfb, type, msg, path2, deps, id) {
          if (!id)
            id = get_unique_msgid({ deps: [], location: "", type }, deps);
          var loc = "".concat(path2, "-").concat(id, ".iwa");
          deps[id].location = "Root Entry" + loc;
          CFB.utils.cfb_add(cfb, loc, compress_iwa_file(write_iwa_file([{
            id,
            messages: [write_iwam(type, write_shallow(msg))]
          }])));
          var newloc = loc.replace(/^[\/]/, "").replace(/^Index\//, "").replace(/\.iwa$/, "");
          numbers_iwa_doit(cfb, deps, 2, function(ai) {
            var mlist = parse_shallow(ai.messages[0].data);
            numbers_add_meta(mlist, id || 0, newloc);
            ai.messages[0].data = write_shallow(mlist);
          });
          return id;
        }
        function numbers_meta_add_dep(mlist, deps, id, dep) {
          var loc = deps[id].location.replace(/^Root Entry\//, "").replace(/^Index\//, "").replace(/\.iwa$/, "");
          var parentidx = mlist[3].findIndex(function(m4) {
            var _a, _b;
            var mm = parse_shallow(m4.data);
            if ((_a = mm[3]) == null ? void 0 : _a[0])
              return u8str(mm[3][0].data) == loc;
            if (((_b = mm[2]) == null ? void 0 : _b[0]) && u8str(mm[2][0].data) == loc)
              return true;
            return false;
          });
          var parent = parse_shallow(mlist[3][parentidx].data);
          if (!parent[6])
            parent[6] = [];
          (Array.isArray(dep) ? dep : [dep]).forEach(function(dep2) {
            parent[6].push({
              type: 2,
              data: write_shallow([
                [],
                [{ type: 0, data: write_varint49(dep2) }]
              ])
            });
          });
          mlist[3][parentidx].data = write_shallow(parent);
        }
        function numbers_meta_del_dep(mlist, deps, id, dep) {
          var loc = deps[id].location.replace(/^Root Entry\//, "").replace(/^Index\//, "").replace(/\.iwa$/, "");
          var parentidx = mlist[3].findIndex(function(m4) {
            var _a, _b;
            var mm = parse_shallow(m4.data);
            if ((_a = mm[3]) == null ? void 0 : _a[0])
              return u8str(mm[3][0].data) == loc;
            if (((_b = mm[2]) == null ? void 0 : _b[0]) && u8str(mm[2][0].data) == loc)
              return true;
            return false;
          });
          var parent = parse_shallow(mlist[3][parentidx].data);
          if (!parent[6])
            parent[6] = [];
          parent[6] = parent[6].filter(function(m4) {
            return varint_to_i32(parse_shallow(m4.data)[1][0].data) != dep;
          });
          mlist[3][parentidx].data = write_shallow(parent);
        }
        function numbers_add_ws(cfb, deps, wsidx) {
          var sheetref = -1, newsheetref = -1;
          var remap = {};
          numbers_iwa_doit(cfb, deps, 1, function(docroot, arch) {
            var doc = parse_shallow(docroot.messages[0].data);
            sheetref = parse_TSP_Reference(parse_shallow(docroot.messages[0].data)[1][0].data);
            newsheetref = get_unique_msgid({ deps: [1], location: deps[sheetref].location, type: 2 }, deps);
            remap[sheetref] = newsheetref;
            numbers_add_oref(docroot, newsheetref);
            doc[1].push({ type: 2, data: write_TSP_Reference(newsheetref) });
            var sheet = numbers_iwa_find(cfb, deps, sheetref);
            sheet.id = newsheetref;
            if (deps[1].location == deps[newsheetref].location)
              arch.push(sheet);
            else
              numbers_iwa_doit(cfb, deps, newsheetref, function(_2, x3) {
                return x3.push(sheet);
              });
            docroot.messages[0].data = write_shallow(doc);
          });
          var tiaref = -1;
          numbers_iwa_doit(cfb, deps, newsheetref, function(sheetroot, arch) {
            var sa = parse_shallow(sheetroot.messages[0].data);
            for (var i6 = 3; i6 <= 69; ++i6)
              delete sa[i6];
            var drawables = mappa(sa[2], parse_TSP_Reference);
            drawables.forEach(function(n6) {
              return numbers_del_oref(sheetroot, n6);
            });
            tiaref = get_unique_msgid({ deps: [newsheetref], location: deps[drawables[0]].location, type: deps[drawables[0]].type }, deps);
            numbers_add_oref(sheetroot, tiaref);
            remap[drawables[0]] = tiaref;
            sa[2] = [{ type: 2, data: write_TSP_Reference(tiaref) }];
            var tia = numbers_iwa_find(cfb, deps, drawables[0]);
            tia.id = tiaref;
            if (deps[drawables[0]].location == deps[newsheetref].location)
              arch.push(tia);
            else {
              numbers_iwa_doit(cfb, deps, 2, function(ai) {
                var mlist = parse_shallow(ai.messages[0].data);
                numbers_meta_add_dep(mlist, deps, newsheetref, tiaref);
                ai.messages[0].data = write_shallow(mlist);
              });
              numbers_iwa_doit(cfb, deps, tiaref, function(_2, x3) {
                return x3.push(tia);
              });
            }
            sheetroot.messages[0].data = write_shallow(sa);
          });
          var tmaref = -1;
          numbers_iwa_doit(cfb, deps, tiaref, function(tiaroot, arch) {
            var tia = parse_shallow(tiaroot.messages[0].data);
            var da2 = parse_shallow(tia[1][0].data);
            for (var i6 = 3; i6 <= 69; ++i6)
              delete da2[i6];
            var dap = parse_TSP_Reference(da2[2][0].data);
            da2[2][0].data = write_TSP_Reference(remap[dap]);
            tia[1][0].data = write_shallow(da2);
            var oldtmaref = parse_TSP_Reference(tia[2][0].data);
            numbers_del_oref(tiaroot, oldtmaref);
            tmaref = get_unique_msgid({ deps: [tiaref], location: deps[oldtmaref].location, type: deps[oldtmaref].type }, deps);
            numbers_add_oref(tiaroot, tmaref);
            remap[oldtmaref] = tmaref;
            tia[2][0].data = write_TSP_Reference(tmaref);
            var tma = numbers_iwa_find(cfb, deps, oldtmaref);
            tma.id = tmaref;
            if (deps[tiaref].location == deps[tmaref].location)
              arch.push(tma);
            else
              numbers_iwa_doit(cfb, deps, tmaref, function(_2, x3) {
                return x3.push(tma);
              });
            tiaroot.messages[0].data = write_shallow(tia);
          });
          numbers_iwa_doit(cfb, deps, tmaref, function(tmaroot, arch) {
            var _a, _b;
            var tma = parse_shallow(tmaroot.messages[0].data);
            var uuid = u8str(tma[1][0].data), new_uuid = uuid.replace(/-[A-Z0-9]*/, "-".concat(("0000" + wsidx.toString(16)).slice(-4)));
            tma[1][0].data = stru8(new_uuid);
            [12, 13, 29, 31, 32, 33, 39, 44, 47, 81, 82, 84].forEach(function(n6) {
              return delete tma[n6];
            });
            if (tma[45]) {
              var srrta = parse_shallow(tma[45][0].data);
              var ref = parse_TSP_Reference(srrta[1][0].data);
              numbers_del_oref(tmaroot, ref);
              delete tma[45];
            }
            if (tma[70]) {
              var hsoa = parse_shallow(tma[70][0].data);
              (_a = hsoa[2]) == null ? void 0 : _a.forEach(function(item) {
                var hsa = parse_shallow(item.data);
                [2, 3].map(function(n6) {
                  return hsa[n6][0];
                }).forEach(function(hseadata) {
                  var hsea = parse_shallow(hseadata.data);
                  if (!hsea[8])
                    return;
                  var ref2 = parse_TSP_Reference(hsea[8][0].data);
                  numbers_del_oref(tmaroot, ref2);
                });
              });
              delete tma[70];
            }
            [
              46,
              30,
              34,
              35,
              36,
              38,
              48,
              49,
              60,
              61,
              62,
              63,
              64,
              71,
              72,
              73,
              74,
              75,
              85,
              86,
              87,
              88,
              89
            ].forEach(function(n6) {
              if (!tma[n6])
                return;
              var ref2 = parse_TSP_Reference(tma[n6][0].data);
              delete tma[n6];
              numbers_del_oref(tmaroot, ref2);
            });
            var store = parse_shallow(tma[4][0].data);
            {
              [2, 4, 5, 6, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22].forEach(function(n6) {
                var _a2;
                if (!((_a2 = store[n6]) == null ? void 0 : _a2[0]))
                  return;
                var oldref = parse_TSP_Reference(store[n6][0].data);
                var newref = get_unique_msgid({ deps: [tmaref], location: deps[oldref].location, type: deps[oldref].type }, deps);
                numbers_del_oref(tmaroot, oldref);
                numbers_add_oref(tmaroot, newref);
                remap[oldref] = newref;
                var msg = numbers_iwa_find(cfb, deps, oldref);
                msg.id = newref;
                if (deps[oldref].location == deps[tmaref].location)
                  arch.push(msg);
                else {
                  deps[newref].location = deps[oldref].location.replace(oldref.toString(), newref.toString());
                  if (deps[newref].location == deps[oldref].location)
                    deps[newref].location = deps[newref].location.replace(/\.iwa/, "-".concat(newref, ".iwa"));
                  CFB.utils.cfb_add(cfb, deps[newref].location, compress_iwa_file(write_iwa_file([msg])));
                  var newloc = deps[newref].location.replace(/^Root Entry\//, "").replace(/^Index\//, "").replace(/\.iwa$/, "");
                  numbers_iwa_doit(cfb, deps, 2, function(ai) {
                    var mlist = parse_shallow(ai.messages[0].data);
                    numbers_add_meta(mlist, newref, newloc);
                    numbers_meta_add_dep(mlist, deps, tmaref, newref);
                    ai.messages[0].data = write_shallow(mlist);
                  });
                }
                store[n6][0].data = write_TSP_Reference(newref);
              });
              var row_headers = parse_shallow(store[1][0].data);
              {
                (_b = row_headers[2]) == null ? void 0 : _b.forEach(function(tspref) {
                  var oldref = parse_TSP_Reference(tspref.data);
                  var newref = get_unique_msgid({ deps: [tmaref], location: deps[oldref].location, type: deps[oldref].type }, deps);
                  numbers_del_oref(tmaroot, oldref);
                  numbers_add_oref(tmaroot, newref);
                  remap[oldref] = newref;
                  var msg = numbers_iwa_find(cfb, deps, oldref);
                  msg.id = newref;
                  if (deps[oldref].location == deps[tmaref].location) {
                    arch.push(msg);
                  } else {
                    deps[newref].location = deps[oldref].location.replace(oldref.toString(), newref.toString());
                    if (deps[newref].location == deps[oldref].location)
                      deps[newref].location = deps[newref].location.replace(/\.iwa/, "-".concat(newref, ".iwa"));
                    CFB.utils.cfb_add(cfb, deps[newref].location, compress_iwa_file(write_iwa_file([msg])));
                    var newloc = deps[newref].location.replace(/^Root Entry\//, "").replace(/^Index\//, "").replace(/\.iwa$/, "");
                    numbers_iwa_doit(cfb, deps, 2, function(ai) {
                      var mlist = parse_shallow(ai.messages[0].data);
                      numbers_add_meta(mlist, newref, newloc);
                      numbers_meta_add_dep(mlist, deps, tmaref, newref);
                      ai.messages[0].data = write_shallow(mlist);
                    });
                  }
                  tspref.data = write_TSP_Reference(newref);
                });
              }
              store[1][0].data = write_shallow(row_headers);
              var tiles = parse_shallow(store[3][0].data);
              {
                tiles[1].forEach(function(t5) {
                  var tst = parse_shallow(t5.data);
                  var oldtileref = parse_TSP_Reference(tst[2][0].data);
                  var newtileref = remap[oldtileref];
                  if (!remap[oldtileref]) {
                    newtileref = get_unique_msgid({ deps: [tmaref], location: "", type: deps[oldtileref].type }, deps);
                    deps[newtileref].location = "Root Entry/Index/Tables/Tile-".concat(newtileref, ".iwa");
                    remap[oldtileref] = newtileref;
                    var oldtile = numbers_iwa_find(cfb, deps, oldtileref);
                    oldtile.id = newtileref;
                    numbers_del_oref(tmaroot, oldtileref);
                    numbers_add_oref(tmaroot, newtileref);
                    CFB.utils.cfb_add(cfb, "/Index/Tables/Tile-".concat(newtileref, ".iwa"), compress_iwa_file(write_iwa_file([oldtile])));
                    numbers_iwa_doit(cfb, deps, 2, function(ai) {
                      var mlist = parse_shallow(ai.messages[0].data);
                      mlist[3].push({ type: 2, data: write_shallow([
                        [],
                        [{ type: 0, data: write_varint49(newtileref) }],
                        [{ type: 2, data: stru8("Tables/Tile") }],
                        [{ type: 2, data: stru8("Tables/Tile-".concat(newtileref)) }],
                        [{ type: 2, data: new Uint8Array([2, 0, 0]) }],
                        [{ type: 2, data: new Uint8Array([2, 0, 0]) }],
                        [],
                        [],
                        [],
                        [],
                        [{ type: 0, data: write_varint49(0) }],
                        [],
                        [{ type: 0, data: write_varint49(0) }]
                      ]) });
                      mlist[1] = [{ type: 0, data: write_varint49(Math.max(newtileref + 1, varint_to_i32(mlist[1][0].data))) }];
                      numbers_meta_add_dep(mlist, deps, tmaref, newtileref);
                      ai.messages[0].data = write_shallow(mlist);
                    });
                  }
                  tst[2][0].data = write_TSP_Reference(newtileref);
                  t5.data = write_shallow(tst);
                });
              }
              store[3][0].data = write_shallow(tiles);
            }
            tma[4][0].data = write_shallow(store);
            tmaroot.messages[0].data = write_shallow(tma);
          });
        }
        function write_numbers_ws(cfb, deps, ws, wsname, sheetidx, rootref) {
          var drawables = [];
          numbers_iwa_doit(cfb, deps, rootref, function(docroot) {
            var sheetref = parse_shallow(docroot.messages[0].data);
            {
              sheetref[1] = [{ type: 2, data: stru8(wsname) }];
              drawables = mappa(sheetref[2], parse_TSP_Reference);
            }
            docroot.messages[0].data = write_shallow(sheetref);
          });
          var tia = numbers_iwa_find(cfb, deps, drawables[0]);
          var tmaref = parse_TSP_Reference(parse_shallow(tia.messages[0].data)[2][0].data);
          numbers_iwa_doit(cfb, deps, tmaref, function(docroot, x3) {
            return write_numbers_tma(cfb, deps, ws, docroot, x3, tmaref);
          });
        }
        var USE_WIDE_ROWS = true;
        function write_numbers_tma(cfb, deps, ws, tmaroot, tmafile, tmaref) {
          if (!ws["!ref"])
            throw new Error("Cannot export empty sheet to NUMBERS");
          var range = decode_range(ws["!ref"]);
          range.s.r = range.s.c = 0;
          var trunc = false;
          if (range.e.c > 999) {
            trunc = true;
            range.e.c = 999;
          }
          if (range.e.r > 999999) {
            trunc = true;
            range.e.r = 999999;
          }
          if (trunc)
            console.error("Truncating to ".concat(encode_range(range)));
          var data = [];
          if (ws["!data"])
            data = ws["!data"];
          else {
            var colstr = [];
            for (var _C = 0; _C <= range.e.c; ++_C)
              colstr[_C] = encode_col(_C);
            for (var R_ = 0; R_ <= range.e.r; ++R_) {
              data[R_] = [];
              var _R = "" + (R_ + 1);
              for (_C = 0; _C <= range.e.c; ++_C) {
                var _cell = ws[colstr[_C] + _R];
                if (!_cell)
                  continue;
                data[R_][_C] = _cell;
              }
            }
          }
          var LUT = {
            cmnt: [{ a: "~54ee77S~", t: "... the people who are crazy enough to think they can change the world, are the ones who do." }],
            ferr: [],
            fmla: [],
            nfmt: [],
            ofmt: [],
            rsst: [{ v: "~54ee77S~", l: "https://sheetjs.com/" }],
            sst: ["~Sh33tJ5~"]
          };
          var pb = parse_shallow(tmaroot.messages[0].data);
          {
            pb[6][0].data = write_varint49(range.e.r + 1);
            pb[7][0].data = write_varint49(range.e.c + 1);
            delete pb[46];
            var store = parse_shallow(pb[4][0].data);
            {
              var row_header_ref = parse_TSP_Reference(parse_shallow(store[1][0].data)[2][0].data);
              numbers_iwa_doit(cfb, deps, row_header_ref, function(rowhead, _x) {
                var _a;
                var base_bucket = parse_shallow(rowhead.messages[0].data);
                if ((_a = base_bucket == null ? void 0 : base_bucket[2]) == null ? void 0 : _a[0])
                  for (var R22 = 0; R22 < data.length; ++R22) {
                    var _bucket = parse_shallow(base_bucket[2][0].data);
                    _bucket[1][0].data = write_varint49(R22);
                    _bucket[4][0].data = write_varint49(data[R22].length);
                    base_bucket[2][R22] = { type: base_bucket[2][0].type, data: write_shallow(_bucket) };
                  }
                rowhead.messages[0].data = write_shallow(base_bucket);
              });
              var col_header_ref = parse_TSP_Reference(store[2][0].data);
              numbers_iwa_doit(cfb, deps, col_header_ref, function(colhead, _x) {
                var base_bucket = parse_shallow(colhead.messages[0].data);
                for (var C6 = 0; C6 <= range.e.c; ++C6) {
                  var _bucket = parse_shallow(base_bucket[2][0].data);
                  _bucket[1][0].data = write_varint49(C6);
                  _bucket[4][0].data = write_varint49(range.e.r + 1);
                  base_bucket[2][C6] = { type: base_bucket[2][0].type, data: write_shallow(_bucket) };
                }
                colhead.messages[0].data = write_shallow(base_bucket);
              });
              var rbtree = parse_shallow(store[9][0].data);
              rbtree[1] = [];
              var tilestore = parse_shallow(store[3][0].data);
              {
                var tstride = 256;
                tilestore[2] = [{ type: 0, data: write_varint49(tstride) }];
                var tileref = parse_TSP_Reference(parse_shallow(tilestore[1][0].data)[2][0].data);
                var save_token = function() {
                  var metadata = numbers_iwa_find(cfb, deps, 2);
                  var mlist = parse_shallow(metadata.messages[0].data);
                  var mlst = mlist[3].filter(function(m4) {
                    return varint_to_i32(parse_shallow(m4.data)[1][0].data) == tileref;
                  });
                  return (mlst == null ? void 0 : mlst.length) ? varint_to_i32(parse_shallow(mlst[0].data)[12][0].data) : 0;
                }();
                {
                  CFB.utils.cfb_del(cfb, deps[tileref].location);
                  numbers_iwa_doit(cfb, deps, 2, function(ai) {
                    var mlist = parse_shallow(ai.messages[0].data);
                    mlist[3] = mlist[3].filter(function(m4) {
                      return varint_to_i32(parse_shallow(m4.data)[1][0].data) != tileref;
                    });
                    numbers_meta_del_dep(mlist, deps, tmaref, tileref);
                    ai.messages[0].data = write_shallow(mlist);
                  });
                  numbers_del_oref(tmaroot, tileref);
                }
                tilestore[1] = [];
                var ntiles = Math.ceil((range.e.r + 1) / tstride);
                for (var tidx = 0; tidx < ntiles; ++tidx) {
                  var newtileid = get_unique_msgid({
                    deps: [],
                    location: "",
                    type: 6002
                  }, deps);
                  deps[newtileid].location = "Root Entry/Index/Tables/Tile-".concat(newtileid, ".iwa");
                  var tiledata = [
                    [],
                    [{ type: 0, data: write_varint49(0) }],
                    [{ type: 0, data: write_varint49(Math.min(range.e.r + 1, (tidx + 1) * tstride)) }],
                    [{ type: 0, data: write_varint49(0) }],
                    [{ type: 0, data: write_varint49(Math.min((tidx + 1) * tstride, range.e.r + 1) - tidx * tstride) }],
                    [],
                    [{ type: 0, data: write_varint49(5) }],
                    [{ type: 0, data: write_varint49(1) }],
                    [{ type: 0, data: write_varint49(USE_WIDE_ROWS ? 1 : 0) }]
                  ];
                  for (var R2 = tidx * tstride; R2 <= Math.min(range.e.r, (tidx + 1) * tstride - 1); ++R2) {
                    var tilerow = write_TST_TileRowInfo(data[R2], LUT, USE_WIDE_ROWS);
                    tilerow[1][0].data = write_varint49(R2 - tidx * tstride);
                    tiledata[5].push({ data: write_shallow(tilerow), type: 2 });
                  }
                  tilestore[1].push({ type: 2, data: write_shallow([
                    [],
                    [{ type: 0, data: write_varint49(tidx) }],
                    [{ type: 2, data: write_TSP_Reference(newtileid) }]
                  ]) });
                  var newtile = {
                    id: newtileid,
                    messages: [write_iwam(6002, write_shallow(tiledata))]
                  };
                  var tilecontent = compress_iwa_file(write_iwa_file([newtile]));
                  CFB.utils.cfb_add(cfb, "/Index/Tables/Tile-".concat(newtileid, ".iwa"), tilecontent);
                  numbers_iwa_doit(cfb, deps, 2, function(ai) {
                    var mlist = parse_shallow(ai.messages[0].data);
                    mlist[3].push({ type: 2, data: write_shallow([
                      [],
                      [{ type: 0, data: write_varint49(newtileid) }],
                      [{ type: 2, data: stru8("Tables/Tile") }],
                      [{ type: 2, data: stru8("Tables/Tile-".concat(newtileid)) }],
                      [{ type: 2, data: new Uint8Array([2, 0, 0]) }],
                      [{ type: 2, data: new Uint8Array([2, 0, 0]) }],
                      [],
                      [],
                      [],
                      [],
                      [{ type: 0, data: write_varint49(0) }],
                      [],
                      [{ type: 0, data: write_varint49(save_token) }]
                    ]) });
                    mlist[1] = [{ type: 0, data: write_varint49(Math.max(newtileid + 1, varint_to_i32(mlist[1][0].data))) }];
                    numbers_meta_add_dep(mlist, deps, tmaref, newtileid);
                    ai.messages[0].data = write_shallow(mlist);
                  });
                  numbers_add_oref(tmaroot, newtileid);
                  rbtree[1].push({ type: 2, data: write_shallow([
                    [],
                    [{ type: 0, data: write_varint49(tidx * tstride) }],
                    [{ type: 0, data: write_varint49(tidx) }]
                  ]) });
                }
              }
              store[3][0].data = write_shallow(tilestore);
              store[9][0].data = write_shallow(rbtree);
              store[10] = [{ type: 2, data: new Uint8Array([]) }];
              if (ws["!merges"]) {
                var mergeid = get_unique_msgid({
                  type: 6144,
                  deps: [tmaref],
                  location: deps[tmaref].location
                }, deps);
                tmafile.push({
                  id: mergeid,
                  messages: [write_iwam(6144, write_shallow([
                    [],
                    ws["!merges"].map(function(m4) {
                      return { type: 2, data: write_shallow([
                        [],
                        [{ type: 2, data: write_shallow([
                          [],
                          [{ type: 5, data: new Uint8Array(new Uint16Array([m4.s.r, m4.s.c]).buffer) }]
                        ]) }],
                        [{ type: 2, data: write_shallow([
                          [],
                          [{ type: 5, data: new Uint8Array(new Uint16Array([m4.e.r - m4.s.r + 1, m4.e.c - m4.s.c + 1]).buffer) }]
                        ]) }]
                      ]) };
                    })
                  ]))]
                });
                store[13] = [{ type: 2, data: write_TSP_Reference(mergeid) }];
                numbers_iwa_doit(cfb, deps, 2, function(ai) {
                  var mlist = parse_shallow(ai.messages[0].data);
                  numbers_meta_add_dep(mlist, deps, tmaref, mergeid);
                  ai.messages[0].data = write_shallow(mlist);
                });
                numbers_add_oref(tmaroot, mergeid);
              } else
                delete store[13];
              var sstref = parse_TSP_Reference(store[4][0].data);
              numbers_iwa_doit(cfb, deps, sstref, function(sstroot) {
                var sstdata = parse_shallow(sstroot.messages[0].data);
                {
                  sstdata[3] = [];
                  LUT.sst.forEach(function(str, i6) {
                    if (i6 == 0)
                      return;
                    sstdata[3].push({ type: 2, data: write_shallow([
                      [],
                      [{ type: 0, data: write_varint49(i6) }],
                      [{ type: 0, data: write_varint49(1) }],
                      [{ type: 2, data: stru8(str) }]
                    ]) });
                  });
                }
                sstroot.messages[0].data = write_shallow(sstdata);
              });
              var rsstref = parse_TSP_Reference(store[17][0].data);
              numbers_iwa_doit(cfb, deps, rsstref, function(rsstroot) {
                var rsstdata = parse_shallow(rsstroot.messages[0].data);
                rsstdata[3] = [];
                var style_indices = [
                  904980,
                  903835,
                  903815,
                  903845
                ];
                LUT.rsst.forEach(function(rsst, i6) {
                  if (i6 == 0)
                    return;
                  var tswpsa = [
                    [],
                    [{ type: 0, data: new Uint8Array([5]) }],
                    [],
                    [{ type: 2, data: stru8(rsst.v) }]
                  ];
                  tswpsa[10] = [{ type: 0, data: new Uint8Array([1]) }];
                  tswpsa[19] = [{ type: 2, data: new Uint8Array([10, 6, 8, 0, 18, 2, 101, 110]) }];
                  tswpsa[5] = [{ type: 2, data: new Uint8Array([10, 8, 8, 0, 18, 4, 8, 155, 149, 55]) }];
                  tswpsa[2] = [{ type: 2, data: new Uint8Array([8, 148, 158, 55]) }];
                  tswpsa[6] = [{ type: 2, data: new Uint8Array([10, 6, 8, 0, 16, 0, 24, 0]) }];
                  tswpsa[7] = [{ type: 2, data: new Uint8Array([10, 8, 8, 0, 18, 4, 8, 135, 149, 55]) }];
                  tswpsa[8] = [{ type: 2, data: new Uint8Array([10, 8, 8, 0, 18, 4, 8, 165, 149, 55]) }];
                  tswpsa[14] = [{ type: 2, data: new Uint8Array([10, 6, 8, 0, 16, 0, 24, 0]) }];
                  tswpsa[24] = [{ type: 2, data: new Uint8Array([10, 6, 8, 0, 16, 0, 24, 0]) }];
                  var tswpsaid = get_unique_msgid({ deps: [], location: "", type: 2001 }, deps);
                  var tswpsarefs = [];
                  if (rsst.l) {
                    var newhlinkid = numbers_add_msg(cfb, 2032, [
                      [],
                      [],
                      [{ type: 2, data: stru8(rsst.l) }]
                    ], "/Index/Tables/DataList", deps);
                    tswpsa[11] = [];
                    var smartfield = [[], []];
                    if (!smartfield[1])
                      smartfield[1] = [];
                    smartfield[1].push({ type: 2, data: write_shallow([
                      [],
                      [{ type: 0, data: write_varint49(0) }],
                      [{ type: 2, data: write_TSP_Reference(newhlinkid) }]
                    ]) });
                    tswpsa[11][0] = { type: 2, data: write_shallow(smartfield) };
                    tswpsarefs.push(newhlinkid);
                  }
                  numbers_add_msg(cfb, 2001, tswpsa, "/Index/Tables/DataList", deps, tswpsaid);
                  numbers_iwa_doit(cfb, deps, tswpsaid, function(iwa) {
                    style_indices.forEach(function(ref) {
                      return numbers_add_oref(iwa, ref);
                    });
                    tswpsarefs.forEach(function(ref) {
                      return numbers_add_oref(iwa, ref);
                    });
                  });
                  var rtpaid = numbers_add_msg(cfb, 6218, [
                    [],
                    [{ type: 2, data: write_TSP_Reference(tswpsaid) }],
                    [],
                    [{ type: 2, data: new Uint8Array([13, 255, 255, 255, 0, 18, 10, 16, 255, 255, 1, 24, 255, 255, 255, 255, 7]) }]
                  ], "/Index/Tables/DataList", deps);
                  numbers_iwa_doit(cfb, deps, rtpaid, function(iwa) {
                    return numbers_add_oref(iwa, tswpsaid);
                  });
                  rsstdata[3].push({ type: 2, data: write_shallow([
                    [],
                    [{ type: 0, data: write_varint49(i6) }],
                    [{ type: 0, data: write_varint49(1) }],
                    [],
                    [],
                    [],
                    [],
                    [],
                    [],
                    [{ type: 2, data: write_TSP_Reference(rtpaid) }]
                  ]) });
                  numbers_add_oref(rsstroot, rtpaid);
                  numbers_iwa_doit(cfb, deps, 2, function(ai) {
                    var mlist = parse_shallow(ai.messages[0].data);
                    numbers_meta_add_dep(mlist, deps, rsstref, rtpaid);
                    numbers_meta_add_dep(mlist, deps, rtpaid, tswpsaid);
                    numbers_meta_add_dep(mlist, deps, tswpsaid, tswpsarefs);
                    numbers_meta_add_dep(mlist, deps, tswpsaid, style_indices);
                    ai.messages[0].data = write_shallow(mlist);
                  });
                });
                rsstroot.messages[0].data = write_shallow(rsstdata);
              });
              if (LUT.cmnt.length > 1) {
                var cmntref = parse_TSP_Reference(store[19][0].data);
                var authors = {}, iauthor = 0;
                numbers_iwa_doit(cfb, deps, cmntref, function(cmntroot) {
                  var cmntdata = parse_shallow(cmntroot.messages[0].data);
                  {
                    cmntdata[3] = [];
                    LUT.cmnt.forEach(function(cc2, i6) {
                      if (i6 == 0)
                        return;
                      var replies = [];
                      if (cc2.replies)
                        cc2.replies.forEach(function(c8) {
                          if (!authors[c8.a || ""])
                            authors[c8.a || ""] = numbers_add_msg(cfb, 212, [
                              [],
                              [{ type: 2, data: stru8(c8.a || "") }],
                              [{ type: 2, data: get_author_color(++iauthor) }],
                              [],
                              [{ type: 0, data: write_varint49(0) }]
                            ], "/Index/Tables/DataList", deps);
                          var aaaid2 = authors[c8.a || ""];
                          var csaid2 = numbers_add_msg(cfb, 3056, [
                            [],
                            [{ type: 2, data: stru8(c8.t || "") }],
                            [{ type: 2, data: write_shallow([
                              [],
                              [{ type: 1, data: new Uint8Array([0, 0, 0, 128, 116, 109, 182, 65]) }]
                            ]) }],
                            [{ type: 2, data: write_TSP_Reference(aaaid2) }]
                          ], "/Index/Tables/DataList", deps);
                          numbers_iwa_doit(cfb, deps, csaid2, function(iwa) {
                            return numbers_add_oref(iwa, aaaid2);
                          });
                          replies.push(csaid2);
                          numbers_iwa_doit(cfb, deps, 2, function(ai) {
                            var mlist = parse_shallow(ai.messages[0].data);
                            numbers_meta_add_dep(mlist, deps, csaid2, aaaid2);
                            ai.messages[0].data = write_shallow(mlist);
                          });
                        });
                      if (!authors[cc2.a || ""])
                        authors[cc2.a || ""] = numbers_add_msg(cfb, 212, [
                          [],
                          [{ type: 2, data: stru8(cc2.a || "") }],
                          [{ type: 2, data: get_author_color(++iauthor) }],
                          [],
                          [{ type: 0, data: write_varint49(0) }]
                        ], "/Index/Tables/DataList", deps);
                      var aaaid = authors[cc2.a || ""];
                      var csaid = numbers_add_msg(cfb, 3056, [
                        [],
                        [{ type: 2, data: stru8(cc2.t || "") }],
                        [{ type: 2, data: write_shallow([
                          [],
                          [{ type: 1, data: new Uint8Array([0, 0, 0, 128, 116, 109, 182, 65]) }]
                        ]) }],
                        [{ type: 2, data: write_TSP_Reference(aaaid) }],
                        replies.map(function(r6) {
                          return { type: 2, data: write_TSP_Reference(r6) };
                        }),
                        [{ type: 2, data: write_shallow([
                          [],
                          [{ type: 0, data: write_varint49(i6) }],
                          [{ type: 0, data: write_varint49(0) }]
                        ]) }]
                      ], "/Index/Tables/DataList", deps);
                      numbers_iwa_doit(cfb, deps, csaid, function(iwa) {
                        numbers_add_oref(iwa, aaaid);
                        replies.forEach(function(r6) {
                          return numbers_add_oref(iwa, r6);
                        });
                      });
                      cmntdata[3].push({ type: 2, data: write_shallow([
                        [],
                        [{ type: 0, data: write_varint49(i6) }],
                        [{ type: 0, data: write_varint49(1) }],
                        [],
                        [],
                        [],
                        [],
                        [],
                        [],
                        [],
                        [{ type: 2, data: write_TSP_Reference(csaid) }]
                      ]) });
                      numbers_add_oref(cmntroot, csaid);
                      numbers_iwa_doit(cfb, deps, 2, function(ai) {
                        var mlist = parse_shallow(ai.messages[0].data);
                        numbers_meta_add_dep(mlist, deps, cmntref, csaid);
                        numbers_meta_add_dep(mlist, deps, csaid, aaaid);
                        if (replies.length)
                          numbers_meta_add_dep(mlist, deps, csaid, replies);
                        ai.messages[0].data = write_shallow(mlist);
                      });
                    });
                  }
                  cmntdata[2][0].data = write_varint49(LUT.cmnt.length + 1);
                  cmntroot.messages[0].data = write_shallow(cmntdata);
                });
              }
            }
            pb[4][0].data = write_shallow(store);
          }
          tmaroot.messages[0].data = write_shallow(pb);
        }
        function fix_opts_func(defaults4) {
          return function fix_opts(opts) {
            for (var i6 = 0; i6 != defaults4.length; ++i6) {
              var d2 = defaults4[i6];
              if (opts[d2[0]] === void 0)
                opts[d2[0]] = d2[1];
              if (d2[2] === "n")
                opts[d2[0]] = Number(opts[d2[0]]);
            }
          };
        }
        function fix_read_opts(opts) {
          fix_opts_func([
            ["cellNF", false],
            ["cellHTML", true],
            ["cellFormula", true],
            ["cellStyles", false],
            ["cellText", true],
            ["cellDates", false],
            ["sheetStubs", false],
            ["sheetRows", 0, "n"],
            ["bookDeps", false],
            ["bookSheets", false],
            ["bookProps", false],
            ["bookFiles", false],
            ["bookVBA", false],
            ["password", ""],
            ["WTF", false]
          ])(opts);
        }
        function fix_write_opts(opts) {
          fix_opts_func([
            ["cellDates", false],
            ["bookSST", false],
            ["bookType", "xlsx"],
            ["compression", false],
            ["WTF", false]
          ])(opts);
        }
        function get_sheet_type(n6) {
          if (RELS.WS.indexOf(n6) > -1)
            return "sheet";
          if (RELS.CS && n6 == RELS.CS)
            return "chart";
          if (RELS.DS && n6 == RELS.DS)
            return "dialog";
          if (RELS.MS && n6 == RELS.MS)
            return "macro";
          return n6 && n6.length ? n6 : "sheet";
        }
        function safe_parse_wbrels(wbrels, sheets) {
          if (!wbrels)
            return 0;
          try {
            wbrels = sheets.map(function pwbr(w3) {
              if (!w3.id)
                w3.id = w3.strRelID;
              return [w3.name, wbrels["!id"][w3.id].Target, get_sheet_type(wbrels["!id"][w3.id].Type)];
            });
          } catch (e7) {
            return null;
          }
          return !wbrels || wbrels.length === 0 ? null : wbrels;
        }
        function parse_sheet_legacy_drawing(sheet, type, zip, path2, idx, opts, wb, comments) {
          if (!sheet || !sheet["!legdrawel"])
            return;
          var dfile = resolve_path(sheet["!legdrawel"].Target, path2);
          var draw2 = getzipstr(zip, dfile, true);
          if (draw2)
            parse_vml(utf8read(draw2), sheet, comments || []);
        }
        function safe_parse_sheet(zip, path2, relsPath, sheet, idx, sheetRels, sheets, stype, opts, wb, themes, styles) {
          try {
            sheetRels[sheet] = parse_rels(getzipstr(zip, relsPath, true), path2);
            var data = getzipdata(zip, path2);
            var _ws;
            switch (stype) {
              case "sheet":
                _ws = parse_ws(data, path2, idx, opts, sheetRels[sheet], wb, themes, styles);
                break;
              case "chart":
                _ws = parse_cs(data, path2, idx, opts, sheetRels[sheet], wb, themes, styles);
                if (!_ws || !_ws["!drawel"])
                  break;
                var dfile = resolve_path(_ws["!drawel"].Target, path2);
                var drelsp = get_rels_path(dfile);
                var draw2 = parse_drawing(getzipstr(zip, dfile, true), parse_rels(getzipstr(zip, drelsp, true), dfile));
                var chartp = resolve_path(draw2, dfile);
                var crelsp = get_rels_path(chartp);
                _ws = parse_chart(getzipstr(zip, chartp, true), chartp, opts, parse_rels(getzipstr(zip, crelsp, true), chartp), wb, _ws);
                break;
              case "macro":
                _ws = parse_ms(data, path2, idx, opts, sheetRels[sheet], wb, themes, styles);
                break;
              case "dialog":
                _ws = parse_ds(data, path2, idx, opts, sheetRels[sheet], wb, themes, styles);
                break;
              default:
                throw new Error("Unrecognized sheet type " + stype);
            }
            sheets[sheet] = _ws;
            var comments = [], tcomments = [];
            if (sheetRels && sheetRels[sheet])
              keys(sheetRels[sheet]).forEach(function(n6) {
                var dfile2 = "";
                if (sheetRels[sheet][n6].Type == RELS.CMNT) {
                  dfile2 = resolve_path(sheetRels[sheet][n6].Target, path2);
                  comments = parse_cmnt(getzipdata(zip, dfile2, true), dfile2, opts);
                  if (!comments || !comments.length)
                    return;
                  sheet_insert_comments(_ws, comments, false);
                }
                if (sheetRels[sheet][n6].Type == RELS.TCMNT) {
                  dfile2 = resolve_path(sheetRels[sheet][n6].Target, path2);
                  tcomments = tcomments.concat(parse_tcmnt_xml(getzipdata(zip, dfile2, true), opts));
                }
              });
            if (tcomments && tcomments.length)
              sheet_insert_comments(_ws, tcomments, true, opts.people || []);
            parse_sheet_legacy_drawing(_ws, stype, zip, path2, idx, opts, wb, comments);
          } catch (e7) {
            if (opts.WTF)
              throw e7;
          }
        }
        function strip_front_slash(x3) {
          return x3.charAt(0) == "/" ? x3.slice(1) : x3;
        }
        function parse_zip(zip, opts) {
          make_ssf();
          opts = opts || {};
          fix_read_opts(opts);
          if (safegetzipfile(zip, "META-INF/manifest.xml"))
            return parse_ods(zip, opts);
          if (safegetzipfile(zip, "objectdata.xml"))
            return parse_ods(zip, opts);
          if (safegetzipfile(zip, "Index/Document.iwa")) {
            if (typeof Uint8Array == "undefined")
              throw new Error("NUMBERS file parsing requires Uint8Array support");
            if (typeof parse_numbers_iwa != "undefined") {
              if (zip.FileIndex)
                return parse_numbers_iwa(zip, opts);
              var _zip = CFB.utils.cfb_new();
              zipentries(zip).forEach(function(e7) {
                zip_add_file(_zip, e7, getzipbin(zip, e7));
              });
              return parse_numbers_iwa(_zip, opts);
            }
            throw new Error("Unsupported NUMBERS file");
          }
          if (!safegetzipfile(zip, "[Content_Types].xml")) {
            if (safegetzipfile(zip, "index.xml.gz"))
              throw new Error("Unsupported NUMBERS 08 file");
            if (safegetzipfile(zip, "index.xml"))
              throw new Error("Unsupported NUMBERS 09 file");
            var index_zip = CFB.find(zip, "Index.zip");
            if (index_zip) {
              opts = dup(opts);
              delete opts.type;
              if (typeof index_zip.content == "string")
                opts.type = "binary";
              if (typeof Bun !== "undefined" && Buffer.isBuffer(index_zip.content))
                return readSync(new Uint8Array(index_zip.content), opts);
              return readSync(index_zip.content, opts);
            }
            throw new Error("Unsupported ZIP file");
          }
          var entries = zipentries(zip);
          var dir = parse_ct(getzipstr(zip, "[Content_Types].xml"));
          var xlsb = false;
          var sheets, binname;
          if (dir.workbooks.length === 0) {
            binname = "xl/workbook.xml";
            if (getzipdata(zip, binname, true))
              dir.workbooks.push(binname);
          }
          if (dir.workbooks.length === 0) {
            binname = "xl/workbook.bin";
            if (!getzipdata(zip, binname, true))
              throw new Error("Could not find workbook");
            dir.workbooks.push(binname);
            xlsb = true;
          }
          if (dir.workbooks[0].slice(-3) == "bin")
            xlsb = true;
          var themes = {};
          var styles = {};
          if (!opts.bookSheets && !opts.bookProps) {
            strs = [];
            if (dir.sst)
              try {
                strs = parse_sst(getzipdata(zip, strip_front_slash(dir.sst)), dir.sst, opts);
              } catch (e7) {
                if (opts.WTF)
                  throw e7;
              }
            if (opts.cellStyles && dir.themes.length)
              themes = parse_theme_xml(getzipstr(zip, dir.themes[0].replace(/^\//, ""), true) || "", opts);
            if (dir.style)
              styles = parse_sty(getzipdata(zip, strip_front_slash(dir.style)), dir.style, themes, opts);
          }
          dir.links.map(function(link2) {
            try {
              var rels = parse_rels(getzipstr(zip, get_rels_path(strip_front_slash(link2))), link2);
              return parse_xlink(getzipdata(zip, strip_front_slash(link2)), rels, link2, opts);
            } catch (e7) {
            }
          });
          var wb = parse_wb(getzipdata(zip, strip_front_slash(dir.workbooks[0])), dir.workbooks[0], opts);
          var props = {}, propdata = "";
          if (dir.coreprops.length) {
            propdata = getzipdata(zip, strip_front_slash(dir.coreprops[0]), true);
            if (propdata)
              props = parse_core_props(propdata);
            if (dir.extprops.length !== 0) {
              propdata = getzipdata(zip, strip_front_slash(dir.extprops[0]), true);
              if (propdata)
                parse_ext_props(propdata, props, opts);
            }
          }
          var custprops = {};
          if (!opts.bookSheets || opts.bookProps) {
            if (dir.custprops.length !== 0) {
              propdata = getzipstr(zip, strip_front_slash(dir.custprops[0]), true);
              if (propdata)
                custprops = parse_cust_props(propdata, opts);
            }
          }
          var out = {};
          if (opts.bookSheets || opts.bookProps) {
            if (wb.Sheets)
              sheets = wb.Sheets.map(function pluck(x3) {
                return x3.name;
              });
            else if (props.Worksheets && props.SheetNames.length > 0)
              sheets = props.SheetNames;
            if (opts.bookProps) {
              out.Props = props;
              out.Custprops = custprops;
            }
            if (opts.bookSheets && typeof sheets !== "undefined")
              out.SheetNames = sheets;
            if (opts.bookSheets ? out.SheetNames : opts.bookProps)
              return out;
          }
          sheets = {};
          var deps = {};
          if (opts.bookDeps && dir.calcchain)
            deps = parse_cc(getzipdata(zip, strip_front_slash(dir.calcchain)), dir.calcchain, opts);
          var i6 = 0;
          var sheetRels = {};
          var path2, relsPath;
          {
            var wbsheets = wb.Sheets;
            props.Worksheets = wbsheets.length;
            props.SheetNames = [];
            for (var j3 = 0; j3 != wbsheets.length; ++j3) {
              props.SheetNames[j3] = wbsheets[j3].name;
            }
          }
          var wbext = xlsb ? "bin" : "xml";
          var wbrelsi = dir.workbooks[0].lastIndexOf("/");
          var wbrelsfile = (dir.workbooks[0].slice(0, wbrelsi + 1) + "_rels/" + dir.workbooks[0].slice(wbrelsi + 1) + ".rels").replace(/^\//, "");
          if (!safegetzipfile(zip, wbrelsfile))
            wbrelsfile = "xl/_rels/workbook." + wbext + ".rels";
          var wbrels = parse_rels(getzipstr(zip, wbrelsfile, true), wbrelsfile.replace(/_rels.*/, "s5s"));
          if ((dir.metadata || []).length >= 1) {
            opts.xlmeta = parse_xlmeta(getzipdata(zip, strip_front_slash(dir.metadata[0])), dir.metadata[0], opts);
          }
          if ((dir.people || []).length >= 1) {
            opts.people = parse_people_xml(getzipdata(zip, strip_front_slash(dir.people[0])), opts);
          }
          if (wbrels)
            wbrels = safe_parse_wbrels(wbrels, wb.Sheets);
          var nmode = getzipdata(zip, "xl/worksheets/sheet.xml", true) ? 1 : 0;
          wsloop:
            for (i6 = 0; i6 != props.Worksheets; ++i6) {
              var stype = "sheet";
              if (wbrels && wbrels[i6]) {
                path2 = "xl/" + wbrels[i6][1].replace(/[\/]?xl\//, "");
                if (!safegetzipfile(zip, path2))
                  path2 = wbrels[i6][1];
                if (!safegetzipfile(zip, path2))
                  path2 = wbrelsfile.replace(/_rels\/[\S\s]*$/, "") + wbrels[i6][1];
                stype = wbrels[i6][2];
              } else {
                path2 = "xl/worksheets/sheet" + (i6 + 1 - nmode) + "." + wbext;
                path2 = path2.replace(/sheet0\./, "sheet.");
              }
              relsPath = path2.replace(/^(.*)(\/)([^\/]*)$/, "$1/_rels/$3.rels");
              if (opts && opts.sheets != null)
                switch (typeof opts.sheets) {
                  case "number":
                    if (i6 != opts.sheets)
                      continue wsloop;
                    break;
                  case "string":
                    if (props.SheetNames[i6].toLowerCase() != opts.sheets.toLowerCase())
                      continue wsloop;
                    break;
                  default:
                    if (Array.isArray && Array.isArray(opts.sheets)) {
                      var snjseen = false;
                      for (var snj = 0; snj != opts.sheets.length; ++snj) {
                        if (typeof opts.sheets[snj] == "number" && opts.sheets[snj] == i6)
                          snjseen = 1;
                        if (typeof opts.sheets[snj] == "string" && opts.sheets[snj].toLowerCase() == props.SheetNames[i6].toLowerCase())
                          snjseen = 1;
                      }
                      if (!snjseen)
                        continue wsloop;
                    }
                }
              safe_parse_sheet(zip, path2, relsPath, props.SheetNames[i6], i6, sheetRels, sheets, stype, opts, wb, themes, styles);
            }
          out = {
            Directory: dir,
            Workbook: wb,
            Props: props,
            Custprops: custprops,
            Deps: deps,
            Sheets: sheets,
            SheetNames: props.SheetNames,
            Strings: strs,
            Styles: styles,
            Themes: themes,
            SSF: dup(table_fmt)
          };
          if (opts && opts.bookFiles) {
            if (zip.files) {
              out.keys = entries;
              out.files = zip.files;
            } else {
              out.keys = [];
              out.files = {};
              zip.FullPaths.forEach(function(p2, idx) {
                p2 = p2.replace(/^Root Entry[\/]/, "");
                out.keys.push(p2);
                out.files[p2] = zip.FileIndex[idx];
              });
            }
          }
          if (opts && opts.bookVBA) {
            if (dir.vba.length > 0)
              out.vbaraw = getzipdata(zip, strip_front_slash(dir.vba[0]), true);
            else if (dir.defaults && dir.defaults.bin === CT_VBA)
              out.vbaraw = getzipdata(zip, "xl/vbaProject.bin", true);
          }
          out.bookType = xlsb ? "xlsb" : "xlsx";
          return out;
        }
        function parse_xlsxcfb(cfb, _opts) {
          var opts = _opts || {};
          var f2 = "Workbook", data = CFB.find(cfb, f2);
          try {
            f2 = "/!DataSpaces/Version";
            data = CFB.find(cfb, f2);
            if (!data || !data.content)
              throw new Error("ECMA-376 Encrypted file missing " + f2);
            parse_DataSpaceVersionInfo(data.content);
            f2 = "/!DataSpaces/DataSpaceMap";
            data = CFB.find(cfb, f2);
            if (!data || !data.content)
              throw new Error("ECMA-376 Encrypted file missing " + f2);
            var dsm = parse_DataSpaceMap(data.content);
            if (dsm.length !== 1 || dsm[0].comps.length !== 1 || dsm[0].comps[0].t !== 0 || dsm[0].name !== "StrongEncryptionDataSpace" || dsm[0].comps[0].v !== "EncryptedPackage")
              throw new Error("ECMA-376 Encrypted file bad " + f2);
            f2 = "/!DataSpaces/DataSpaceInfo/StrongEncryptionDataSpace";
            data = CFB.find(cfb, f2);
            if (!data || !data.content)
              throw new Error("ECMA-376 Encrypted file missing " + f2);
            var seds = parse_DataSpaceDefinition(data.content);
            if (seds.length != 1 || seds[0] != "StrongEncryptionTransform")
              throw new Error("ECMA-376 Encrypted file bad " + f2);
            f2 = "/!DataSpaces/TransformInfo/StrongEncryptionTransform/!Primary";
            data = CFB.find(cfb, f2);
            if (!data || !data.content)
              throw new Error("ECMA-376 Encrypted file missing " + f2);
            parse_Primary(data.content);
          } catch (e7) {
          }
          f2 = "/EncryptionInfo";
          data = CFB.find(cfb, f2);
          if (!data || !data.content)
            throw new Error("ECMA-376 Encrypted file missing " + f2);
          var einfo = parse_EncryptionInfo(data.content);
          f2 = "/EncryptedPackage";
          data = CFB.find(cfb, f2);
          if (!data || !data.content)
            throw new Error("ECMA-376 Encrypted file missing " + f2);
          if (einfo[0] == 4 && typeof decrypt_agile !== "undefined")
            return decrypt_agile(einfo[1], data.content, opts.password || "", opts);
          if (einfo[0] == 2 && typeof decrypt_std76 !== "undefined")
            return decrypt_std76(einfo[1], data.content, opts.password || "", opts);
          throw new Error("File is password-protected");
        }
        function write_zip_xlsb(wb, opts) {
          if (wb && !wb.SSF) {
            wb.SSF = dup(table_fmt);
          }
          if (wb && wb.SSF) {
            make_ssf();
            SSF_load_table(wb.SSF);
            opts.revssf = evert_num(wb.SSF);
            opts.revssf[wb.SSF[65535]] = 0;
            opts.ssf = wb.SSF;
          }
          opts.rels = {};
          opts.wbrels = {};
          opts.Strings = [];
          opts.Strings.Count = 0;
          opts.Strings.Unique = 0;
          if (browser_has_Map)
            opts.revStrings = /* @__PURE__ */ new Map();
          else {
            opts.revStrings = {};
            opts.revStrings.foo = [];
            delete opts.revStrings.foo;
          }
          var wbext = "bin";
          var vbafmt = true;
          var ct2 = new_ct();
          fix_write_opts(opts = opts || {});
          var zip = zip_new();
          var f2 = "", rId = 0;
          opts.cellXfs = [];
          get_cell_style(opts.cellXfs, {}, { revssf: { "General": 0 } });
          if (!wb.Props)
            wb.Props = {};
          f2 = "docProps/core.xml";
          zip_add_file(zip, f2, write_core_props(wb.Props, opts));
          ct2.coreprops.push(f2);
          add_rels(opts.rels, 2, f2, RELS.CORE_PROPS);
          f2 = "docProps/app.xml";
          if (wb.Props && wb.Props.SheetNames) {
          } else if (!wb.Workbook || !wb.Workbook.Sheets)
            wb.Props.SheetNames = wb.SheetNames;
          else {
            var _sn = [];
            for (var _i = 0; _i < wb.SheetNames.length; ++_i)
              if ((wb.Workbook.Sheets[_i] || {}).Hidden != 2)
                _sn.push(wb.SheetNames[_i]);
            wb.Props.SheetNames = _sn;
          }
          wb.Props.Worksheets = wb.Props.SheetNames.length;
          zip_add_file(zip, f2, write_ext_props(wb.Props, opts));
          ct2.extprops.push(f2);
          add_rels(opts.rels, 3, f2, RELS.EXT_PROPS);
          if (wb.Custprops !== wb.Props && keys(wb.Custprops || {}).length > 0) {
            f2 = "docProps/custom.xml";
            zip_add_file(zip, f2, write_cust_props(wb.Custprops, opts));
            ct2.custprops.push(f2);
            add_rels(opts.rels, 4, f2, RELS.CUST_PROPS);
          }
          var people = ["SheetJ5"];
          opts.tcid = 0;
          for (rId = 1; rId <= wb.SheetNames.length; ++rId) {
            var wsrels = { "!id": {} };
            var ws = wb.Sheets[wb.SheetNames[rId - 1]];
            var _type = (ws || {})["!type"] || "sheet";
            switch (_type) {
              case "chart":
              default:
                f2 = "xl/worksheets/sheet" + rId + "." + wbext;
                zip_add_file(zip, f2, write_ws_bin(rId - 1, opts, wb, wsrels));
                ct2.sheets.push(f2);
                add_rels(opts.wbrels, -1, "worksheets/sheet" + rId + "." + wbext, RELS.WS[0]);
            }
            if (ws) {
              var comments = ws["!comments"];
              var need_vml = false;
              var cf = "";
              if (comments && comments.length > 0) {
                var needtc = false;
                comments.forEach(function(carr) {
                  carr[1].forEach(function(c8) {
                    if (c8.T == true)
                      needtc = true;
                  });
                });
                if (needtc) {
                  cf = "xl/threadedComments/threadedComment" + rId + ".xml";
                  zip_add_file(zip, cf, write_tcmnt_xml(comments, people, opts));
                  ct2.threadedcomments.push(cf);
                  add_rels(wsrels, -1, "../threadedComments/threadedComment" + rId + ".xml", RELS.TCMNT);
                }
                cf = "xl/comments" + rId + "." + wbext;
                zip_add_file(zip, cf, write_comments_bin(comments, opts));
                ct2.comments.push(cf);
                add_rels(wsrels, -1, "../comments" + rId + "." + wbext, RELS.CMNT);
                need_vml = true;
              }
              if (ws["!legacy"]) {
                if (need_vml)
                  zip_add_file(zip, "xl/drawings/vmlDrawing" + rId + ".vml", write_vml(rId, ws["!comments"]));
              }
              delete ws["!comments"];
              delete ws["!legacy"];
            }
            if (wsrels["!id"].rId1)
              zip_add_file(zip, get_rels_path(f2), write_rels(wsrels));
          }
          if (opts.Strings != null && opts.Strings.length > 0) {
            f2 = "xl/sharedStrings." + wbext;
            zip_add_file(zip, f2, write_sst_bin(opts.Strings, opts));
            ct2.strs.push(f2);
            add_rels(opts.wbrels, -1, "sharedStrings." + wbext, RELS.SST);
          }
          f2 = "xl/workbook." + wbext;
          zip_add_file(zip, f2, write_wb_bin(wb, opts));
          ct2.workbooks.push(f2);
          add_rels(opts.rels, 1, f2, RELS.WB);
          f2 = "xl/theme/theme1.xml";
          var ww = write_theme(wb.Themes, opts);
          zip_add_file(zip, f2, ww);
          ct2.themes.push(f2);
          add_rels(opts.wbrels, -1, "theme/theme1.xml", RELS.THEME);
          f2 = "xl/styles." + wbext;
          zip_add_file(zip, f2, write_sty_bin(wb, opts));
          ct2.styles.push(f2);
          add_rels(opts.wbrels, -1, "styles." + wbext, RELS.STY);
          if (wb.vbaraw && vbafmt) {
            f2 = "xl/vbaProject.bin";
            zip_add_file(zip, f2, wb.vbaraw);
            ct2.vba.push(f2);
            add_rels(opts.wbrels, -1, "vbaProject.bin", RELS.VBA);
          }
          f2 = "xl/metadata." + wbext;
          zip_add_file(zip, f2, write_xlmeta_bin());
          ct2.metadata.push(f2);
          add_rels(opts.wbrels, -1, "metadata." + wbext, RELS.XLMETA);
          if (people.length > 1) {
            f2 = "xl/persons/person.xml";
            zip_add_file(zip, f2, write_people_xml(people, opts));
            ct2.people.push(f2);
            add_rels(opts.wbrels, -1, "persons/person.xml", RELS.PEOPLE);
          }
          zip_add_file(zip, "[Content_Types].xml", write_ct(ct2, opts));
          zip_add_file(zip, "_rels/.rels", write_rels(opts.rels));
          zip_add_file(zip, "xl/_rels/workbook." + wbext + ".rels", write_rels(opts.wbrels));
          delete opts.revssf;
          delete opts.ssf;
          return zip;
        }
        function write_zip_xlsx(wb, opts) {
          if (wb && !wb.SSF) {
            wb.SSF = dup(table_fmt);
          }
          if (wb && wb.SSF) {
            make_ssf();
            SSF_load_table(wb.SSF);
            opts.revssf = evert_num(wb.SSF);
            opts.revssf[wb.SSF[65535]] = 0;
            opts.ssf = wb.SSF;
          }
          opts.rels = {};
          opts.wbrels = {};
          opts.Strings = [];
          opts.Strings.Count = 0;
          opts.Strings.Unique = 0;
          if (browser_has_Map)
            opts.revStrings = /* @__PURE__ */ new Map();
          else {
            opts.revStrings = {};
            opts.revStrings.foo = [];
            delete opts.revStrings.foo;
          }
          var wbext = "xml";
          var vbafmt = VBAFMTS.indexOf(opts.bookType) > -1;
          var ct2 = new_ct();
          fix_write_opts(opts = opts || {});
          var zip = zip_new();
          var f2 = "", rId = 0;
          opts.cellXfs = [];
          get_cell_style(opts.cellXfs, {}, { revssf: { "General": 0 } });
          if (!wb.Props)
            wb.Props = {};
          f2 = "docProps/core.xml";
          zip_add_file(zip, f2, write_core_props(wb.Props, opts));
          ct2.coreprops.push(f2);
          add_rels(opts.rels, 2, f2, RELS.CORE_PROPS);
          f2 = "docProps/app.xml";
          if (wb.Props && wb.Props.SheetNames) {
          } else if (!wb.Workbook || !wb.Workbook.Sheets)
            wb.Props.SheetNames = wb.SheetNames;
          else {
            var _sn = [];
            for (var _i = 0; _i < wb.SheetNames.length; ++_i)
              if ((wb.Workbook.Sheets[_i] || {}).Hidden != 2)
                _sn.push(wb.SheetNames[_i]);
            wb.Props.SheetNames = _sn;
          }
          wb.Props.Worksheets = wb.Props.SheetNames.length;
          zip_add_file(zip, f2, write_ext_props(wb.Props, opts));
          ct2.extprops.push(f2);
          add_rels(opts.rels, 3, f2, RELS.EXT_PROPS);
          if (wb.Custprops !== wb.Props && keys(wb.Custprops || {}).length > 0) {
            f2 = "docProps/custom.xml";
            zip_add_file(zip, f2, write_cust_props(wb.Custprops, opts));
            ct2.custprops.push(f2);
            add_rels(opts.rels, 4, f2, RELS.CUST_PROPS);
          }
          var people = ["SheetJ5"];
          opts.tcid = 0;
          for (rId = 1; rId <= wb.SheetNames.length; ++rId) {
            var wsrels = { "!id": {} };
            var ws = wb.Sheets[wb.SheetNames[rId - 1]];
            var _type = (ws || {})["!type"] || "sheet";
            switch (_type) {
              case "chart":
              default:
                f2 = "xl/worksheets/sheet" + rId + "." + wbext;
                zip_add_file(zip, f2, write_ws_xml(rId - 1, opts, wb, wsrels));
                ct2.sheets.push(f2);
                add_rels(opts.wbrels, -1, "worksheets/sheet" + rId + "." + wbext, RELS.WS[0]);
            }
            if (ws) {
              var comments = ws["!comments"];
              var need_vml = false;
              var cf = "";
              if (comments && comments.length > 0) {
                var needtc = false;
                comments.forEach(function(carr) {
                  carr[1].forEach(function(c8) {
                    if (c8.T == true)
                      needtc = true;
                  });
                });
                if (needtc) {
                  cf = "xl/threadedComments/threadedComment" + rId + ".xml";
                  zip_add_file(zip, cf, write_tcmnt_xml(comments, people, opts));
                  ct2.threadedcomments.push(cf);
                  add_rels(wsrels, -1, "../threadedComments/threadedComment" + rId + ".xml", RELS.TCMNT);
                }
                cf = "xl/comments" + rId + "." + wbext;
                zip_add_file(zip, cf, write_comments_xml(comments, opts));
                ct2.comments.push(cf);
                add_rels(wsrels, -1, "../comments" + rId + "." + wbext, RELS.CMNT);
                need_vml = true;
              }
              if (ws["!legacy"]) {
                if (need_vml)
                  zip_add_file(zip, "xl/drawings/vmlDrawing" + rId + ".vml", write_vml(rId, ws["!comments"]));
              }
              delete ws["!comments"];
              delete ws["!legacy"];
            }
            if (wsrels["!id"].rId1)
              zip_add_file(zip, get_rels_path(f2), write_rels(wsrels));
          }
          if (opts.Strings != null && opts.Strings.length > 0) {
            f2 = "xl/sharedStrings." + wbext;
            zip_add_file(zip, f2, write_sst_xml(opts.Strings, opts));
            ct2.strs.push(f2);
            add_rels(opts.wbrels, -1, "sharedStrings." + wbext, RELS.SST);
          }
          f2 = "xl/workbook." + wbext;
          zip_add_file(zip, f2, write_wb_xml(wb, opts));
          ct2.workbooks.push(f2);
          add_rels(opts.rels, 1, f2, RELS.WB);
          f2 = "xl/theme/theme1.xml";
          zip_add_file(zip, f2, write_theme(wb.Themes, opts));
          ct2.themes.push(f2);
          add_rels(opts.wbrels, -1, "theme/theme1.xml", RELS.THEME);
          f2 = "xl/styles." + wbext;
          zip_add_file(zip, f2, write_sty_xml(wb, opts));
          ct2.styles.push(f2);
          add_rels(opts.wbrels, -1, "styles." + wbext, RELS.STY);
          if (wb.vbaraw && vbafmt) {
            f2 = "xl/vbaProject.bin";
            zip_add_file(zip, f2, wb.vbaraw);
            ct2.vba.push(f2);
            add_rels(opts.wbrels, -1, "vbaProject.bin", RELS.VBA);
          }
          f2 = "xl/metadata." + wbext;
          zip_add_file(zip, f2, write_xlmeta_xml());
          ct2.metadata.push(f2);
          add_rels(opts.wbrels, -1, "metadata." + wbext, RELS.XLMETA);
          if (people.length > 1) {
            f2 = "xl/persons/person.xml";
            zip_add_file(zip, f2, write_people_xml(people, opts));
            ct2.people.push(f2);
            add_rels(opts.wbrels, -1, "persons/person.xml", RELS.PEOPLE);
          }
          zip_add_file(zip, "[Content_Types].xml", write_ct(ct2, opts));
          zip_add_file(zip, "_rels/.rels", write_rels(opts.rels));
          zip_add_file(zip, "xl/_rels/workbook." + wbext + ".rels", write_rels(opts.wbrels));
          delete opts.revssf;
          delete opts.ssf;
          return zip;
        }
        function firstbyte(f2, o6) {
          var x3 = "";
          switch ((o6 || {}).type || "base64") {
            case "buffer":
              return [f2[0], f2[1], f2[2], f2[3], f2[4], f2[5], f2[6], f2[7]];
            case "base64":
              x3 = Base64_decode(f2.slice(0, 12));
              break;
            case "binary":
              x3 = f2;
              break;
            case "array":
              return [f2[0], f2[1], f2[2], f2[3], f2[4], f2[5], f2[6], f2[7]];
            default:
              throw new Error("Unrecognized type " + (o6 && o6.type || "undefined"));
          }
          return [x3.charCodeAt(0), x3.charCodeAt(1), x3.charCodeAt(2), x3.charCodeAt(3), x3.charCodeAt(4), x3.charCodeAt(5), x3.charCodeAt(6), x3.charCodeAt(7)];
        }
        function read_cfb(cfb, opts) {
          if (CFB.find(cfb, "EncryptedPackage"))
            return parse_xlsxcfb(cfb, opts);
          return parse_xlscfb(cfb, opts);
        }
        function read_zip(data, opts) {
          var zip, d2 = data;
          var o6 = opts || {};
          if (!o6.type)
            o6.type = has_buf && Buffer.isBuffer(data) ? "buffer" : "base64";
          zip = zip_read(d2, o6);
          return parse_zip(zip, o6);
        }
        function read_plaintext(data, o6) {
          var i6 = 0;
          main:
            while (i6 < data.length)
              switch (data.charCodeAt(i6)) {
                case 10:
                case 13:
                case 32:
                  ++i6;
                  break;
                case 60:
                  return parse_xlml(data.slice(i6), o6);
                default:
                  break main;
              }
          return PRN.to_workbook(data, o6);
        }
        function read_plaintext_raw(data, o6) {
          var str = "", bytes = firstbyte(data, o6);
          switch (o6.type) {
            case "base64":
              str = Base64_decode(data);
              break;
            case "binary":
              str = data;
              break;
            case "buffer":
              str = data.toString("binary");
              break;
            case "array":
              str = cc2str(data);
              break;
            default:
              throw new Error("Unrecognized type " + o6.type);
          }
          if (bytes[0] == 239 && bytes[1] == 187 && bytes[2] == 191)
            str = utf8read(str);
          o6.type = "binary";
          return read_plaintext(str, o6);
        }
        function read_utf16(data, o6) {
          var d2 = data;
          if (o6.type == "base64")
            d2 = Base64_decode(d2);
          if (typeof ArrayBuffer !== "undefined" && data instanceof ArrayBuffer)
            d2 = new Uint8Array(data);
          d2 = typeof $cptable !== "undefined" ? $cptable.utils.decode(1200, d2.slice(2), "str") : has_buf && Buffer.isBuffer(data) ? data.slice(2).toString("utf16le") : typeof Uint8Array !== "undefined" && d2 instanceof Uint8Array ? typeof TextDecoder !== "undefined" ? new TextDecoder("utf-16le").decode(d2.slice(2)) : utf16lereadu(d2.slice(2)) : utf16leread(d2.slice(2));
          o6.type = "binary";
          return read_plaintext(d2, o6);
        }
        function bstrify(data) {
          return !data.match(/[^\x00-\x7F]/) ? data : utf8write(data);
        }
        function read_prn(data, d2, o6, str) {
          if (str) {
            o6.type = "string";
            return PRN.to_workbook(data, o6);
          }
          return PRN.to_workbook(d2, o6);
        }
        function readSync(data, opts) {
          reset_cp();
          var o6 = opts || {};
          if (o6.codepage && typeof $cptable === "undefined")
            console.error("Codepage tables are not loaded.  Non-ASCII characters may not give expected results");
          if (typeof ArrayBuffer !== "undefined" && data instanceof ArrayBuffer)
            return readSync(new Uint8Array(data), (o6 = dup(o6), o6.type = "array", o6));
          if (typeof Int8Array !== "undefined" && data instanceof Int8Array)
            return readSync(new Uint8Array(data.buffer, data.byteOffset, data.length), o6);
          if (typeof Uint8Array !== "undefined" && data instanceof Uint8Array && !o6.type)
            o6.type = typeof Deno !== "undefined" ? "buffer" : "array";
          var d2 = data, n6 = [0, 0, 0, 0], str = false;
          if (o6.cellStyles) {
            o6.cellNF = true;
            o6.sheetStubs = true;
          }
          _ssfopts = {};
          if (o6.dateNF)
            _ssfopts.dateNF = o6.dateNF;
          if (!o6.type)
            o6.type = has_buf && Buffer.isBuffer(data) ? "buffer" : "base64";
          if (o6.type == "file") {
            o6.type = has_buf ? "buffer" : "binary";
            d2 = read_binary(data);
            if (typeof Uint8Array !== "undefined" && !has_buf)
              o6.type = "array";
          }
          if (o6.type == "string") {
            str = true;
            o6.type = "binary";
            o6.codepage = 65001;
            d2 = bstrify(data);
          }
          if (o6.type == "array" && typeof Uint8Array !== "undefined" && data instanceof Uint8Array && typeof ArrayBuffer !== "undefined") {
            var ab4 = new ArrayBuffer(3), vu = new Uint8Array(ab4);
            vu.foo = "bar";
            if (!vu.foo) {
              o6 = dup(o6);
              o6.type = "array";
              return readSync(ab2a(d2), o6);
            }
          }
          switch ((n6 = firstbyte(d2, o6))[0]) {
            case 208:
              if (n6[1] === 207 && n6[2] === 17 && n6[3] === 224 && n6[4] === 161 && n6[5] === 177 && n6[6] === 26 && n6[7] === 225)
                return read_cfb(CFB.read(d2, o6), o6);
              break;
            case 9:
              if (n6[1] <= 8)
                return parse_xlscfb(d2, o6);
              break;
            case 60:
              return parse_xlml(d2, o6);
            case 73:
              if (n6[1] === 73 && n6[2] === 42 && n6[3] === 0)
                throw new Error("TIFF Image File is not a spreadsheet");
              if (n6[1] === 68)
                return read_wb_ID(d2, o6);
              break;
            case 84:
              if (n6[1] === 65 && n6[2] === 66 && n6[3] === 76)
                return DIF.to_workbook(d2, o6);
              break;
            case 80:
              return n6[1] === 75 && n6[2] < 9 && n6[3] < 9 ? read_zip(d2, o6) : read_prn(data, d2, o6, str);
            case 239:
              return n6[3] === 60 ? parse_xlml(d2, o6) : read_prn(data, d2, o6, str);
            case 255:
              if (n6[1] === 254) {
                return read_utf16(d2, o6);
              } else if (n6[1] === 0 && n6[2] === 2 && n6[3] === 0)
                return WK_.to_workbook(d2, o6);
              break;
            case 0:
              if (n6[1] === 0) {
                if (n6[2] >= 2 && n6[3] === 0)
                  return WK_.to_workbook(d2, o6);
                if (n6[2] === 0 && (n6[3] === 8 || n6[3] === 9))
                  return WK_.to_workbook(d2, o6);
              }
              break;
            case 3:
            case 131:
            case 139:
            case 140:
              return DBF.to_workbook(d2, o6);
            case 123:
              if (n6[1] === 92 && n6[2] === 114 && n6[3] === 116)
                return rtf_to_workbook(d2, o6);
              break;
            case 10:
            case 13:
            case 32:
              return read_plaintext_raw(d2, o6);
            case 137:
              if (n6[1] === 80 && n6[2] === 78 && n6[3] === 71)
                throw new Error("PNG Image File is not a spreadsheet");
              break;
            case 8:
              if (n6[1] === 231)
                throw new Error("Unsupported Multiplan 1.x file!");
              break;
            case 12:
              if (n6[1] === 236)
                throw new Error("Unsupported Multiplan 2.x file!");
              if (n6[1] === 237)
                throw new Error("Unsupported Multiplan 3.x file!");
              break;
          }
          if (DBF_SUPPORTED_VERSIONS.indexOf(n6[0]) > -1 && n6[2] <= 12 && n6[3] <= 31)
            return DBF.to_workbook(d2, o6);
          return read_prn(data, d2, o6, str);
        }
        function readFileSync(filename, opts) {
          var o6 = opts || {};
          o6.type = "file";
          return readSync(filename, o6);
        }
        function write_cfb_ctr(cfb, o6) {
          switch (o6.type) {
            case "base64":
            case "binary":
              break;
            case "buffer":
            case "array":
              o6.type = "";
              break;
            case "file":
              return write_dl(o6.file, CFB.write(cfb, { type: has_buf ? "buffer" : "" }));
            case "string":
              throw new Error("'string' output type invalid for '" + o6.bookType + "' files");
            default:
              throw new Error("Unrecognized type " + o6.type);
          }
          return CFB.write(cfb, o6);
        }
        function write_zip(wb, opts) {
          switch (opts.bookType) {
            case "ods":
              return write_ods(wb, opts);
            case "numbers":
              return write_numbers_iwa(wb, opts);
            case "xlsb":
              return write_zip_xlsb(wb, opts);
            default:
              return write_zip_xlsx(wb, opts);
          }
        }
        function write_zip_type(wb, opts) {
          var o6 = dup(opts || {});
          var z3 = write_zip(wb, o6);
          return write_zip_denouement(z3, o6);
        }
        function write_zip_typeXLSX(wb, opts) {
          var o6 = dup(opts || {});
          var z3 = write_zip_xlsx(wb, o6);
          return write_zip_denouement(z3, o6);
        }
        function write_zip_denouement(z3, o6) {
          var oopts = {};
          var ftype = has_buf ? "nodebuffer" : typeof Uint8Array !== "undefined" ? "array" : "string";
          if (o6.compression)
            oopts.compression = "DEFLATE";
          if (o6.password)
            oopts.type = ftype;
          else
            switch (o6.type) {
              case "base64":
                oopts.type = "base64";
                break;
              case "binary":
                oopts.type = "string";
                break;
              case "string":
                throw new Error("'string' output type invalid for '" + o6.bookType + "' files");
              case "buffer":
              case "file":
                oopts.type = ftype;
                break;
              default:
                throw new Error("Unrecognized type " + o6.type);
            }
          var out = z3.FullPaths ? CFB.write(z3, { fileType: "zip", type: { "nodebuffer": "buffer", "string": "binary" }[oopts.type] || oopts.type, compression: !!o6.compression }) : z3.generate(oopts);
          if (typeof Deno !== "undefined") {
            if (typeof out == "string") {
              if (o6.type == "binary" || o6.type == "base64")
                return out;
              out = new Uint8Array(s2ab(out));
            }
          }
          if (o6.password && typeof encrypt_agile !== "undefined")
            return write_cfb_ctr(encrypt_agile(out, o6.password), o6);
          if (o6.type === "file")
            return write_dl(o6.file, out);
          return o6.type == "string" ? utf8read(out) : out;
        }
        function write_cfb_type(wb, opts) {
          var o6 = opts || {};
          var cfb = write_xlscfb(wb, o6);
          return write_cfb_ctr(cfb, o6);
        }
        function write_string_type(out, opts, bom) {
          if (!bom)
            bom = "";
          var o6 = bom + out;
          switch (opts.type) {
            case "base64":
              return Base64_encode(utf8write(o6));
            case "binary":
              return utf8write(o6);
            case "string":
              return out;
            case "file":
              return write_dl(opts.file, o6, "utf8");
            case "buffer": {
              if (has_buf)
                return Buffer_from(o6, "utf8");
              else if (typeof TextEncoder !== "undefined")
                return new TextEncoder().encode(o6);
              else
                return write_string_type(o6, { type: "binary" }).split("").map(function(c8) {
                  return c8.charCodeAt(0);
                });
            }
          }
          throw new Error("Unrecognized type " + opts.type);
        }
        function write_stxt_type(out, opts) {
          switch (opts.type) {
            case "base64":
              return Base64_encode_pass(out);
            case "binary":
              return out;
            case "string":
              return out;
            case "file":
              return write_dl(opts.file, out, "binary");
            case "buffer": {
              if (has_buf)
                return Buffer_from(out, "binary");
              else
                return out.split("").map(function(c8) {
                  return c8.charCodeAt(0);
                });
            }
          }
          throw new Error("Unrecognized type " + opts.type);
        }
        function write_binary_type(out, opts) {
          switch (opts.type) {
            case "string":
            case "base64":
            case "binary":
              var bstr = "";
              for (var i6 = 0; i6 < out.length; ++i6)
                bstr += String.fromCharCode(out[i6]);
              return opts.type == "base64" ? Base64_encode(bstr) : opts.type == "string" ? utf8read(bstr) : bstr;
            case "file":
              return write_dl(opts.file, out);
            case "buffer":
              return out;
            default:
              throw new Error("Unrecognized type " + opts.type);
          }
        }
        function writeSyncXLSX(wb, opts) {
          reset_cp();
          check_wb(wb);
          var o6 = dup(opts || {});
          if (o6.cellStyles) {
            o6.cellNF = true;
            o6.sheetStubs = true;
          }
          if (o6.type == "array") {
            o6.type = "binary";
            var out = writeSyncXLSX(wb, o6);
            o6.type = "array";
            return s2ab(out);
          }
          return write_zip_typeXLSX(wb, o6);
        }
        function writeSync(wb, opts) {
          reset_cp();
          check_wb(wb);
          var o6 = dup(opts || {});
          if (o6.cellStyles) {
            o6.cellNF = true;
            o6.sheetStubs = true;
          }
          if (o6.type == "array") {
            o6.type = "binary";
            var out = writeSync(wb, o6);
            o6.type = "array";
            return s2ab(out);
          }
          var idx = 0;
          if (o6.sheet) {
            if (typeof o6.sheet == "number")
              idx = o6.sheet;
            else
              idx = wb.SheetNames.indexOf(o6.sheet);
            if (!wb.SheetNames[idx])
              throw new Error("Sheet not found: " + o6.sheet + " : " + typeof o6.sheet);
          }
          switch (o6.bookType || "xlsb") {
            case "xml":
            case "xlml":
              return write_string_type(write_xlml(wb, o6), o6);
            case "slk":
            case "sylk":
              return write_string_type(SYLK.from_sheet(wb.Sheets[wb.SheetNames[idx]], o6, wb), o6);
            case "htm":
            case "html":
              return write_string_type(sheet_to_html(wb.Sheets[wb.SheetNames[idx]], o6), o6);
            case "txt":
              return write_stxt_type(sheet_to_txt(wb.Sheets[wb.SheetNames[idx]], o6), o6);
            case "csv":
              return write_string_type(sheet_to_csv(wb.Sheets[wb.SheetNames[idx]], o6), o6, "\uFEFF");
            case "dif":
              return write_string_type(DIF.from_sheet(wb.Sheets[wb.SheetNames[idx]], o6), o6);
            case "dbf":
              return write_binary_type(DBF.from_sheet(wb.Sheets[wb.SheetNames[idx]], o6), o6);
            case "prn":
              return write_string_type(PRN.from_sheet(wb.Sheets[wb.SheetNames[idx]], o6), o6);
            case "rtf":
              return write_string_type(sheet_to_rtf(wb.Sheets[wb.SheetNames[idx]], o6), o6);
            case "eth":
              return write_string_type(ETH.from_sheet(wb.Sheets[wb.SheetNames[idx]], o6), o6);
            case "fods":
              return write_string_type(write_ods(wb, o6), o6);
            case "wk1":
              return write_binary_type(WK_.sheet_to_wk1(wb.Sheets[wb.SheetNames[idx]], o6), o6);
            case "wk3":
              return write_binary_type(WK_.book_to_wk3(wb, o6), o6);
            case "biff2":
              if (!o6.biff)
                o6.biff = 2;
            case "biff3":
              if (!o6.biff)
                o6.biff = 3;
            case "biff4":
              if (!o6.biff)
                o6.biff = 4;
              return write_binary_type(write_biff_buf(wb, o6), o6);
            case "biff5":
              if (!o6.biff)
                o6.biff = 5;
            case "biff8":
            case "xla":
            case "xls":
              if (!o6.biff)
                o6.biff = 8;
              return write_cfb_type(wb, o6);
            case "xlsx":
            case "xlsm":
            case "xlam":
            case "xlsb":
            case "numbers":
            case "ods":
              return write_zip_type(wb, o6);
            default:
              throw new Error("Unrecognized bookType |" + o6.bookType + "|");
          }
        }
        function resolve_book_type(o6) {
          if (o6.bookType)
            return;
          var _BT = {
            "xls": "biff8",
            "htm": "html",
            "slk": "sylk",
            "socialcalc": "eth",
            "Sh33tJS": "WTF"
          };
          var ext = o6.file.slice(o6.file.lastIndexOf(".")).toLowerCase();
          if (ext.match(/^\.[a-z]+$/))
            o6.bookType = ext.slice(1);
          o6.bookType = _BT[o6.bookType] || o6.bookType;
        }
        function writeFileSync(wb, filename, opts) {
          var o6 = opts || {};
          o6.type = "file";
          o6.file = filename;
          resolve_book_type(o6);
          return writeSync(wb, o6);
        }
        function writeFileSyncXLSX(wb, filename, opts) {
          var o6 = opts || {};
          o6.type = "file";
          o6.file = filename;
          resolve_book_type(o6);
          return writeSyncXLSX(wb, o6);
        }
        function writeFileAsync(filename, wb, opts, cb) {
          var o6 = opts || {};
          o6.type = "file";
          o6.file = filename;
          resolve_book_type(o6);
          o6.type = "buffer";
          var _cb = cb;
          if (!(_cb instanceof Function))
            _cb = opts;
          return _fs.writeFile(filename, writeSync(wb, o6), _cb);
        }
        function make_json_row(sheet, r6, R2, cols, header, hdr, o6) {
          var rr = encode_row(R2);
          var defval = o6.defval, raw = o6.raw || !Object.prototype.hasOwnProperty.call(o6, "raw");
          var isempty = true, dense = sheet["!data"] != null;
          var row = header === 1 ? [] : {};
          if (header !== 1) {
            if (Object.defineProperty)
              try {
                Object.defineProperty(row, "__rowNum__", { value: R2, enumerable: false });
              } catch (e7) {
                row.__rowNum__ = R2;
              }
            else
              row.__rowNum__ = R2;
          }
          if (!dense || sheet["!data"][R2])
            for (var C6 = r6.s.c; C6 <= r6.e.c; ++C6) {
              var val2 = dense ? (sheet["!data"][R2] || [])[C6] : sheet[cols[C6] + rr];
              if (val2 == null || val2.t === void 0) {
                if (defval === void 0)
                  continue;
                if (hdr[C6] != null) {
                  row[hdr[C6]] = defval;
                }
                continue;
              }
              var v4 = val2.v;
              switch (val2.t) {
                case "z":
                  if (v4 == null)
                    break;
                  continue;
                case "e":
                  v4 = v4 == 0 ? null : void 0;
                  break;
                case "s":
                case "b":
                case "n":
                  if (!val2.z || !fmt_is_date(val2.z))
                    break;
                  v4 = numdate(v4);
                  if (typeof v4 == "number")
                    break;
                case "d":
                  if (!(o6 && (o6.UTC || o6.raw === false)))
                    v4 = utc_to_local(new Date(v4));
                  break;
                default:
                  throw new Error("unrecognized type " + val2.t);
              }
              if (hdr[C6] != null) {
                if (v4 == null) {
                  if (val2.t == "e" && v4 === null)
                    row[hdr[C6]] = null;
                  else if (defval !== void 0)
                    row[hdr[C6]] = defval;
                  else if (raw && v4 === null)
                    row[hdr[C6]] = null;
                  else
                    continue;
                } else {
                  row[hdr[C6]] = (val2.t === "n" && typeof o6.rawNumbers === "boolean" ? o6.rawNumbers : raw) ? v4 : format_cell(val2, v4, o6);
                }
                if (v4 != null)
                  isempty = false;
              }
            }
          return { row, isempty };
        }
        function sheet_to_json(sheet, opts) {
          if (sheet == null || sheet["!ref"] == null)
            return [];
          var val2 = { t: "n", v: 0 }, header = 0, offset = 1, hdr = [], v4 = 0, vv = "";
          var r6 = { s: { r: 0, c: 0 }, e: { r: 0, c: 0 } };
          var o6 = opts || {};
          var range = o6.range != null ? o6.range : sheet["!ref"];
          if (o6.header === 1)
            header = 1;
          else if (o6.header === "A")
            header = 2;
          else if (Array.isArray(o6.header))
            header = 3;
          else if (o6.header == null)
            header = 0;
          switch (typeof range) {
            case "string":
              r6 = safe_decode_range(range);
              break;
            case "number":
              r6 = safe_decode_range(sheet["!ref"]);
              r6.s.r = range;
              break;
            default:
              r6 = range;
          }
          if (header > 0)
            offset = 0;
          var rr = encode_row(r6.s.r);
          var cols = [];
          var out = [];
          var outi = 0, counter = 0;
          var dense = sheet["!data"] != null;
          var R2 = r6.s.r, C6 = 0;
          var header_cnt = {};
          if (dense && !sheet["!data"][R2])
            sheet["!data"][R2] = [];
          var colinfo = o6.skipHidden && sheet["!cols"] || [];
          var rowinfo = o6.skipHidden && sheet["!rows"] || [];
          for (C6 = r6.s.c; C6 <= r6.e.c; ++C6) {
            if ((colinfo[C6] || {}).hidden)
              continue;
            cols[C6] = encode_col(C6);
            val2 = dense ? sheet["!data"][R2][C6] : sheet[cols[C6] + rr];
            switch (header) {
              case 1:
                hdr[C6] = C6 - r6.s.c;
                break;
              case 2:
                hdr[C6] = cols[C6];
                break;
              case 3:
                hdr[C6] = o6.header[C6 - r6.s.c];
                break;
              default:
                if (val2 == null)
                  val2 = { w: "__EMPTY", t: "s" };
                vv = v4 = format_cell(val2, null, o6);
                counter = header_cnt[v4] || 0;
                if (!counter)
                  header_cnt[v4] = 1;
                else {
                  do {
                    vv = v4 + "_" + counter++;
                  } while (header_cnt[vv]);
                  header_cnt[v4] = counter;
                  header_cnt[vv] = 1;
                }
                hdr[C6] = vv;
            }
          }
          for (R2 = r6.s.r + offset; R2 <= r6.e.r; ++R2) {
            if ((rowinfo[R2] || {}).hidden)
              continue;
            var row = make_json_row(sheet, r6, R2, cols, header, hdr, o6);
            if (row.isempty === false || (header === 1 ? o6.blankrows !== false : !!o6.blankrows))
              out[outi++] = row.row;
          }
          out.length = outi;
          return out;
        }
        var qreg = /"/g;
        function make_csv_row(sheet, r6, R2, cols, fs, rs, FS, w3, o6) {
          var isempty = true;
          var row = [], txt = "", rr = encode_row(R2);
          var dense = sheet["!data"] != null;
          var datarow = dense && sheet["!data"][R2] || [];
          for (var C6 = r6.s.c; C6 <= r6.e.c; ++C6) {
            if (!cols[C6])
              continue;
            var val2 = dense ? datarow[C6] : sheet[cols[C6] + rr];
            if (val2 == null)
              txt = "";
            else if (val2.v != null) {
              isempty = false;
              txt = "" + (o6.rawNumbers && val2.t == "n" ? val2.v : format_cell(val2, null, o6));
              for (var i6 = 0, cc2 = 0; i6 !== txt.length; ++i6)
                if ((cc2 = txt.charCodeAt(i6)) === fs || cc2 === rs || cc2 === 34 || o6.forceQuotes) {
                  txt = '"' + txt.replace(qreg, '""') + '"';
                  break;
                }
              if (txt == "ID" && w3 == 0 && row.length == 0)
                txt = '"ID"';
            } else if (val2.f != null && !val2.F) {
              isempty = false;
              txt = "=" + val2.f;
              if (txt.indexOf(",") >= 0)
                txt = '"' + txt.replace(qreg, '""') + '"';
            } else
              txt = "";
            row.push(txt);
          }
          if (o6.strip)
            while (row[row.length - 1] === "")
              --row.length;
          if (o6.blankrows === false && isempty)
            return null;
          return row.join(FS);
        }
        function sheet_to_csv(sheet, opts) {
          var out = [];
          var o6 = opts == null ? {} : opts;
          if (sheet == null || sheet["!ref"] == null)
            return "";
          var r6 = safe_decode_range(sheet["!ref"]);
          var FS = o6.FS !== void 0 ? o6.FS : ",", fs = FS.charCodeAt(0);
          var RS = o6.RS !== void 0 ? o6.RS : "\n", rs = RS.charCodeAt(0);
          var row = "", cols = [];
          var colinfo = o6.skipHidden && sheet["!cols"] || [];
          var rowinfo = o6.skipHidden && sheet["!rows"] || [];
          for (var C6 = r6.s.c; C6 <= r6.e.c; ++C6)
            if (!(colinfo[C6] || {}).hidden)
              cols[C6] = encode_col(C6);
          var w3 = 0;
          for (var R2 = r6.s.r; R2 <= r6.e.r; ++R2) {
            if ((rowinfo[R2] || {}).hidden)
              continue;
            row = make_csv_row(sheet, r6, R2, cols, fs, rs, FS, w3, o6);
            if (row == null) {
              continue;
            }
            if (row || o6.blankrows !== false)
              out.push((w3++ ? RS : "") + row);
          }
          return out.join("");
        }
        function sheet_to_txt(sheet, opts) {
          if (!opts)
            opts = {};
          opts.FS = "	";
          opts.RS = "\n";
          var s3 = sheet_to_csv(sheet, opts);
          if (typeof $cptable == "undefined" || opts.type == "string")
            return s3;
          var o6 = $cptable.utils.encode(1200, s3, "str");
          return String.fromCharCode(255) + String.fromCharCode(254) + o6;
        }
        function sheet_to_formulae(sheet, opts) {
          var y4 = "", x3, val2 = "";
          if (sheet == null || sheet["!ref"] == null)
            return [];
          var r6 = safe_decode_range(sheet["!ref"]), rr = "", cols = [], C6;
          var cmds = [];
          var dense = sheet["!data"] != null;
          for (C6 = r6.s.c; C6 <= r6.e.c; ++C6)
            cols[C6] = encode_col(C6);
          for (var R2 = r6.s.r; R2 <= r6.e.r; ++R2) {
            rr = encode_row(R2);
            for (C6 = r6.s.c; C6 <= r6.e.c; ++C6) {
              y4 = cols[C6] + rr;
              x3 = dense ? (sheet["!data"][R2] || [])[C6] : sheet[y4];
              val2 = "";
              if (x3 === void 0)
                continue;
              else if (x3.F != null) {
                y4 = x3.F;
                if (!x3.f)
                  continue;
                val2 = x3.f;
                if (y4.indexOf(":") == -1)
                  y4 = y4 + ":" + y4;
              }
              if (x3.f != null)
                val2 = x3.f;
              else if (opts && opts.values === false)
                continue;
              else if (x3.t == "z")
                continue;
              else if (x3.t == "n" && x3.v != null)
                val2 = "" + x3.v;
              else if (x3.t == "b")
                val2 = x3.v ? "TRUE" : "FALSE";
              else if (x3.w !== void 0)
                val2 = "'" + x3.w;
              else if (x3.v === void 0)
                continue;
              else if (x3.t == "s")
                val2 = "'" + x3.v;
              else
                val2 = "" + x3.v;
              cmds[cmds.length] = y4 + "=" + val2;
            }
          }
          return cmds;
        }
        function sheet_add_json(_ws, js, opts) {
          var o6 = opts || {};
          var dense = _ws ? _ws["!data"] != null : o6.dense;
          if (DENSE != null && dense == null)
            dense = DENSE;
          var offset = +!o6.skipHeader;
          var ws = _ws || {};
          if (!_ws && dense)
            ws["!data"] = [];
          var _R = 0, _C = 0;
          if (ws && o6.origin != null) {
            if (typeof o6.origin == "number")
              _R = o6.origin;
            else {
              var _origin = typeof o6.origin == "string" ? decode_cell(o6.origin) : o6.origin;
              _R = _origin.r;
              _C = _origin.c;
            }
          }
          var range = { s: { c: 0, r: 0 }, e: { c: _C, r: _R + js.length - 1 + offset } };
          if (ws["!ref"]) {
            var _range = safe_decode_range(ws["!ref"]);
            range.e.c = Math.max(range.e.c, _range.e.c);
            range.e.r = Math.max(range.e.r, _range.e.r);
            if (_R == -1) {
              _R = _range.e.r + 1;
              range.e.r = _R + js.length - 1 + offset;
            }
          } else {
            if (_R == -1) {
              _R = 0;
              range.e.r = js.length - 1 + offset;
            }
          }
          var hdr = o6.header || [], C6 = 0;
          var ROW = [];
          js.forEach(function(JS, R2) {
            if (dense && !ws["!data"][_R + R2 + offset])
              ws["!data"][_R + R2 + offset] = [];
            if (dense)
              ROW = ws["!data"][_R + R2 + offset];
            keys(JS).forEach(function(k2) {
              if ((C6 = hdr.indexOf(k2)) == -1)
                hdr[C6 = hdr.length] = k2;
              var v4 = JS[k2];
              var t5 = "z";
              var z3 = "";
              var ref = dense ? "" : encode_col(_C + C6) + encode_row(_R + R2 + offset);
              var cell = dense ? ROW[_C + C6] : ws[ref];
              if (v4 && typeof v4 === "object" && !(v4 instanceof Date)) {
                if (dense)
                  ROW[_C + C6] = v4;
                else
                  ws[ref] = v4;
              } else {
                if (typeof v4 == "number")
                  t5 = "n";
                else if (typeof v4 == "boolean")
                  t5 = "b";
                else if (typeof v4 == "string")
                  t5 = "s";
                else if (v4 instanceof Date) {
                  t5 = "d";
                  if (!o6.UTC)
                    v4 = local_to_utc(v4);
                  if (!o6.cellDates) {
                    t5 = "n";
                    v4 = datenum(v4);
                  }
                  z3 = cell != null && cell.z && fmt_is_date(cell.z) ? cell.z : o6.dateNF || table_fmt[14];
                } else if (v4 === null && o6.nullError) {
                  t5 = "e";
                  v4 = 0;
                }
                if (!cell) {
                  if (!dense)
                    ws[ref] = cell = { t: t5, v: v4 };
                  else
                    ROW[_C + C6] = cell = { t: t5, v: v4 };
                } else {
                  cell.t = t5;
                  cell.v = v4;
                  delete cell.w;
                  delete cell.R;
                  if (z3)
                    cell.z = z3;
                }
                if (z3)
                  cell.z = z3;
              }
            });
          });
          range.e.c = Math.max(range.e.c, _C + hdr.length - 1);
          var __R = encode_row(_R);
          if (dense && !ws["!data"][_R])
            ws["!data"][_R] = [];
          if (offset)
            for (C6 = 0; C6 < hdr.length; ++C6) {
              if (dense)
                ws["!data"][_R][C6 + _C] = { t: "s", v: hdr[C6] };
              else
                ws[encode_col(C6 + _C) + __R] = { t: "s", v: hdr[C6] };
            }
          ws["!ref"] = encode_range(range);
          return ws;
        }
        function json_to_sheet(js, opts) {
          return sheet_add_json(null, js, opts);
        }
        function ws_get_cell_stub(ws, R2, C6) {
          if (typeof R2 == "string") {
            if (ws["!data"] != null) {
              var RC = decode_cell(R2);
              if (!ws["!data"][RC.r])
                ws["!data"][RC.r] = [];
              return ws["!data"][RC.r][RC.c] || (ws["!data"][RC.r][RC.c] = { t: "z" });
            }
            return ws[R2] || (ws[R2] = { t: "z" });
          }
          if (typeof R2 != "number")
            return ws_get_cell_stub(ws, encode_cell(R2));
          return ws_get_cell_stub(ws, encode_col(C6 || 0) + encode_row(R2));
        }
        function wb_sheet_idx(wb, sh) {
          if (typeof sh == "number") {
            if (sh >= 0 && wb.SheetNames.length > sh)
              return sh;
            throw new Error("Cannot find sheet # " + sh);
          } else if (typeof sh == "string") {
            var idx = wb.SheetNames.indexOf(sh);
            if (idx > -1)
              return idx;
            throw new Error("Cannot find sheet name |" + sh + "|");
          } else
            throw new Error("Cannot find sheet |" + sh + "|");
        }
        function book_new(ws, wsname) {
          var wb = { SheetNames: [], Sheets: {} };
          if (ws)
            book_append_sheet(wb, ws, wsname || "Sheet1");
          return wb;
        }
        function book_append_sheet(wb, ws, name, roll) {
          var i6 = 1;
          if (!name) {
            for (; i6 <= 65535; ++i6, name = void 0)
              if (wb.SheetNames.indexOf(name = "Sheet" + i6) == -1)
                break;
          }
          if (!name || wb.SheetNames.length >= 65535)
            throw new Error("Too many worksheets");
          if (roll && wb.SheetNames.indexOf(name) >= 0 && name.length < 32) {
            var m4 = name.match(/\d+$/);
            i6 = m4 && +m4[0] || 0;
            var root = m4 && name.slice(0, m4.index) || name;
            for (++i6; i6 <= 65535; ++i6)
              if (wb.SheetNames.indexOf(name = root + i6) == -1)
                break;
          }
          check_ws_name(name);
          if (wb.SheetNames.indexOf(name) >= 0)
            throw new Error("Worksheet with name |" + name + "| already exists!");
          wb.SheetNames.push(name);
          wb.Sheets[name] = ws;
          return name;
        }
        function book_set_sheet_visibility(wb, sh, vis) {
          if (!wb.Workbook)
            wb.Workbook = {};
          if (!wb.Workbook.Sheets)
            wb.Workbook.Sheets = [];
          var idx = wb_sheet_idx(wb, sh);
          if (!wb.Workbook.Sheets[idx])
            wb.Workbook.Sheets[idx] = {};
          switch (vis) {
            case 0:
            case 1:
            case 2:
              break;
            default:
              throw new Error("Bad sheet visibility setting " + vis);
          }
          wb.Workbook.Sheets[idx].Hidden = vis;
        }
        function cell_set_number_format(cell, fmt) {
          cell.z = fmt;
          return cell;
        }
        function cell_set_hyperlink(cell, target, tooltip) {
          if (!target) {
            delete cell.l;
          } else {
            cell.l = { Target: target };
            if (tooltip)
              cell.l.Tooltip = tooltip;
          }
          return cell;
        }
        function cell_set_internal_link(cell, range, tooltip) {
          return cell_set_hyperlink(cell, "#" + range, tooltip);
        }
        function cell_add_comment(cell, text, author) {
          if (!cell.c)
            cell.c = [];
          cell.c.push({ t: text, a: author || "SheetJS" });
        }
        function sheet_set_array_formula(ws, range, formula, dynamic) {
          var rng = typeof range != "string" ? range : safe_decode_range(range);
          var rngstr = typeof range == "string" ? range : encode_range(range);
          for (var R2 = rng.s.r; R2 <= rng.e.r; ++R2)
            for (var C6 = rng.s.c; C6 <= rng.e.c; ++C6) {
              var cell = ws_get_cell_stub(ws, R2, C6);
              cell.t = "n";
              cell.F = rngstr;
              delete cell.v;
              if (R2 == rng.s.r && C6 == rng.s.c) {
                cell.f = formula;
                if (dynamic)
                  cell.D = true;
              }
            }
          var wsr = decode_range(ws["!ref"]);
          if (wsr.s.r > rng.s.r)
            wsr.s.r = rng.s.r;
          if (wsr.s.c > rng.s.c)
            wsr.s.c = rng.s.c;
          if (wsr.e.r < rng.e.r)
            wsr.e.r = rng.e.r;
          if (wsr.e.c < rng.e.c)
            wsr.e.c = rng.e.c;
          ws["!ref"] = encode_range(wsr);
          return ws;
        }
        var utils2 = {
          encode_col,
          encode_row,
          encode_cell,
          encode_range,
          decode_col,
          decode_row,
          split_cell,
          decode_cell,
          decode_range,
          format_cell,
          sheet_new,
          sheet_add_aoa,
          sheet_add_json,
          sheet_add_dom,
          aoa_to_sheet,
          json_to_sheet,
          table_to_sheet: parse_dom_table,
          table_to_book,
          sheet_to_csv,
          sheet_to_txt,
          sheet_to_json,
          sheet_to_html,
          sheet_to_formulae,
          sheet_to_row_object_array: sheet_to_json,
          sheet_get_cell: ws_get_cell_stub,
          book_new,
          book_append_sheet,
          book_set_sheet_visibility,
          cell_set_number_format,
          cell_set_hyperlink,
          cell_set_internal_link,
          cell_add_comment,
          sheet_set_array_formula,
          consts: {
            SHEET_VISIBLE: 0,
            SHEET_HIDDEN: 1,
            SHEET_VERY_HIDDEN: 2
          }
        };
        var _Readable;
        function set_readable(R2) {
          _Readable = R2;
        }
        function write_csv_stream(sheet, opts) {
          var stream = _Readable();
          var o6 = opts == null ? {} : opts;
          if (sheet == null || sheet["!ref"] == null) {
            stream.push(null);
            return stream;
          }
          var r6 = safe_decode_range(sheet["!ref"]);
          var FS = o6.FS !== void 0 ? o6.FS : ",", fs = FS.charCodeAt(0);
          var RS = o6.RS !== void 0 ? o6.RS : "\n", rs = RS.charCodeAt(0);
          var row = "", cols = [];
          var colinfo = o6.skipHidden && sheet["!cols"] || [];
          var rowinfo = o6.skipHidden && sheet["!rows"] || [];
          for (var C6 = r6.s.c; C6 <= r6.e.c; ++C6)
            if (!(colinfo[C6] || {}).hidden)
              cols[C6] = encode_col(C6);
          var R2 = r6.s.r;
          var BOM = false, w3 = 0;
          stream._read = function() {
            if (!BOM) {
              BOM = true;
              return stream.push("\uFEFF");
            }
            while (R2 <= r6.e.r) {
              ++R2;
              if ((rowinfo[R2 - 1] || {}).hidden)
                continue;
              row = make_csv_row(sheet, r6, R2 - 1, cols, fs, rs, FS, w3, o6);
              if (row != null) {
                if (row || o6.blankrows !== false)
                  return stream.push((w3++ ? RS : "") + row);
              }
            }
            return stream.push(null);
          };
          return stream;
        }
        function write_html_stream(ws, opts) {
          var stream = _Readable();
          var o6 = opts || {};
          var header = o6.header != null ? o6.header : HTML_BEGIN;
          var footer = o6.footer != null ? o6.footer : HTML_END;
          stream.push(header);
          var r6 = decode_range(ws["!ref"]);
          stream.push(make_html_preamble(ws, r6, o6));
          var R2 = r6.s.r;
          var end = false;
          stream._read = function() {
            if (R2 > r6.e.r) {
              if (!end) {
                end = true;
                stream.push("</table>" + footer);
              }
              return stream.push(null);
            }
            while (R2 <= r6.e.r) {
              stream.push(make_html_row(ws, r6, R2, o6));
              ++R2;
              break;
            }
          };
          return stream;
        }
        function write_json_stream(sheet, opts) {
          var stream = _Readable({ objectMode: true });
          if (sheet == null || sheet["!ref"] == null) {
            stream.push(null);
            return stream;
          }
          var val2 = { t: "n", v: 0 }, header = 0, offset = 1, hdr = [], v4 = 0, vv = "";
          var r6 = { s: { r: 0, c: 0 }, e: { r: 0, c: 0 } };
          var o6 = opts || {};
          var range = o6.range != null ? o6.range : sheet["!ref"];
          if (o6.header === 1)
            header = 1;
          else if (o6.header === "A")
            header = 2;
          else if (Array.isArray(o6.header))
            header = 3;
          switch (typeof range) {
            case "string":
              r6 = safe_decode_range(range);
              break;
            case "number":
              r6 = safe_decode_range(sheet["!ref"]);
              r6.s.r = range;
              break;
            default:
              r6 = range;
          }
          if (header > 0)
            offset = 0;
          var rr = encode_row(r6.s.r);
          var cols = [];
          var counter = 0;
          var dense = sheet["!data"] != null;
          var R2 = r6.s.r, C6 = 0;
          var header_cnt = {};
          if (dense && !sheet["!data"][R2])
            sheet["!data"][R2] = [];
          var colinfo = o6.skipHidden && sheet["!cols"] || [];
          var rowinfo = o6.skipHidden && sheet["!rows"] || [];
          for (C6 = r6.s.c; C6 <= r6.e.c; ++C6) {
            if ((colinfo[C6] || {}).hidden)
              continue;
            cols[C6] = encode_col(C6);
            val2 = dense ? sheet["!data"][R2][C6] : sheet[cols[C6] + rr];
            switch (header) {
              case 1:
                hdr[C6] = C6 - r6.s.c;
                break;
              case 2:
                hdr[C6] = cols[C6];
                break;
              case 3:
                hdr[C6] = o6.header[C6 - r6.s.c];
                break;
              default:
                if (val2 == null)
                  val2 = { w: "__EMPTY", t: "s" };
                vv = v4 = format_cell(val2, null, o6);
                counter = header_cnt[v4] || 0;
                if (!counter)
                  header_cnt[v4] = 1;
                else {
                  do {
                    vv = v4 + "_" + counter++;
                  } while (header_cnt[vv]);
                  header_cnt[v4] = counter;
                  header_cnt[vv] = 1;
                }
                hdr[C6] = vv;
            }
          }
          R2 = r6.s.r + offset;
          stream._read = function() {
            while (R2 <= r6.e.r) {
              if ((rowinfo[R2 - 1] || {}).hidden)
                continue;
              var row = make_json_row(sheet, r6, R2, cols, header, hdr, o6);
              ++R2;
              if (row.isempty === false || (header === 1 ? o6.blankrows !== false : !!o6.blankrows)) {
                stream.push(row.row);
                return;
              }
            }
            return stream.push(null);
          };
          return stream;
        }
        function write_xlml_stream(wb, o6) {
          var stream = _Readable();
          var opts = o6 == null ? {} : o6;
          var stride = +opts.stride || 10;
          if (!wb.SSF)
            wb.SSF = dup(table_fmt);
          if (wb.SSF) {
            make_ssf();
            SSF_load_table(wb.SSF);
            opts.revssf = evert_num(wb.SSF);
            opts.revssf[wb.SSF[65535]] = 0;
            opts.ssf = wb.SSF;
            opts.cellXfs = [];
            get_cell_style(opts.cellXfs, {}, { revssf: { "General": 0 } });
          }
          wb.SheetNames.forEach(function(n6) {
            var ws2 = wb.Sheets[n6];
            if (!ws2 || !ws2["!ref"])
              return;
            var range2 = decode_range(ws2["!ref"]);
            var dense2 = ws2["!data"] != null;
            var ddata = dense2 ? ws2["!data"] : [];
            var addr2 = { r: 0, c: 0 };
            for (var R3 = range2.s.r; R3 <= range2.e.r; ++R3) {
              addr2.r = R3;
              if (dense2 && !ddata[R3])
                continue;
              for (var C6 = range2.s.c; C6 <= range2.e.c; ++C6) {
                addr2.c = C6;
                var cell = dense2 ? ddata[R3][C6] : ws2[encode_col(C6) + encode_row(R3)];
                if (!cell)
                  continue;
                if (cell.t == "d" && cell.z == null) {
                  cell = dup(cell);
                  cell.z = table_fmt[14];
                }
                void get_cell_style(opts.cellXfs, cell, opts);
              }
            }
          });
          var sty = write_sty_xlml(wb, opts);
          var stage = 0, wsidx = 0, ws = wb.Sheets[wb.SheetNames[wsidx]], range = safe_decode_range(ws), R2 = -1, T3 = false;
          var marr = [], mi = 0, dense = false, darr = [], addr = { r: 0, c: 0 };
          stream._read = function() {
            switch (stage) {
              case 0:
                {
                  stage = 1;
                  stream.push(XML_HEADER);
                  stream.push("<Workbook" + wxt_helper({
                    "xmlns": XLMLNS.ss,
                    "xmlns:o": XLMLNS.o,
                    "xmlns:x": XLMLNS.x,
                    "xmlns:ss": XLMLNS.ss,
                    "xmlns:dt": XLMLNS.dt,
                    "xmlns:html": XLMLNS.html
                  }) + ">");
                }
                break;
              case 1:
                {
                  stage = 2;
                  stream.push(write_props_xlml(wb, opts));
                  stream.push(write_wb_xlml(wb, opts));
                }
                break;
              case 2:
                {
                  stage = 3;
                  stream.push(sty);
                  stream.push(write_names_xlml(wb, opts));
                }
                break;
              case 3:
                {
                  T3 = false;
                  if (wsidx >= wb.SheetNames.length) {
                    stage = -1;
                    stream.push("");
                    break;
                  }
                  stream.push("<Worksheet" + wxt_helper({ "ss:Name": escapexml(wb.SheetNames[wsidx]) }) + ">");
                  ws = wb.Sheets[wb.SheetNames[wsidx]];
                  if (!ws) {
                    stream.push("</Worksheet>");
                    return void ++wsidx;
                  }
                  var names2 = write_ws_xlml_names(ws, opts, wsidx, wb);
                  if (names2.length)
                    stream.push("<Names>" + names2 + "</Names>");
                  if (!ws["!ref"])
                    return stage = 5;
                  range = safe_decode_range(ws["!ref"]);
                  R2 = range.s.r;
                  stage = 4;
                }
                break;
              case 4:
                {
                  if (R2 < 0 || R2 > range.e.r) {
                    if (T3)
                      stream.push("</Table>");
                    return void (stage = 5);
                  }
                  if (R2 <= range.s.r) {
                    if (ws["!cols"])
                      ws["!cols"].forEach(function(n6, i6) {
                        process_col(n6);
                        var w3 = !!n6.width;
                        var p2 = col_obj_w(i6, n6);
                        var k2 = { "ss:Index": i6 + 1 };
                        if (w3)
                          k2["ss:Width"] = width2px(p2.width);
                        if (n6.hidden)
                          k2["ss:Hidden"] = "1";
                        if (!T3) {
                          T3 = true;
                          stream.push("<Table>");
                        }
                        stream.push(writextag("Column", null, k2));
                      });
                    dense = ws["!data"] != null;
                    if (dense)
                      darr = ws["!data"];
                    addr.r = addr.c = 0;
                  }
                  for (var cnt = 0; R2 <= range.e.r && cnt < stride; ++R2, ++cnt) {
                    var row = [write_ws_xlml_row(R2, (ws["!rows"] || [])[R2])];
                    addr.r = R2;
                    if (!(dense && !darr[R2]))
                      for (var C6 = range.s.c; C6 <= range.e.c; ++C6) {
                        addr.c = C6;
                        var skip2 = false;
                        for (mi = 0; mi != marr.length; ++mi) {
                          if (marr[mi].s.c > C6)
                            continue;
                          if (marr[mi].s.r > R2)
                            continue;
                          if (marr[mi].e.c < C6)
                            continue;
                          if (marr[mi].e.r < R2)
                            continue;
                          if (marr[mi].s.c != C6 || marr[mi].s.r != R2)
                            skip2 = true;
                          break;
                        }
                        if (skip2)
                          continue;
                        var ref = encode_col(C6) + encode_row(R2), cell = dense ? darr[R2][C6] : ws[ref];
                        row.push(write_ws_xlml_cell(cell, ref, ws, opts, wsidx, wb, addr));
                      }
                    row.push("</Row>");
                    if (!T3) {
                      T3 = true;
                      stream.push("<Table>");
                    }
                    stream.push(row.join(""));
                  }
                }
                break;
              case 5: {
                stream.push(write_ws_xlml_wsopts(ws, opts, wsidx, wb));
                if (ws && ws["!autofilter"])
                  stream.push('<AutoFilter x:Range="' + a1_to_rc(fix_range(ws["!autofilter"].ref), { r: 0, c: 0 }) + '" xmlns="urn:schemas-microsoft-com:office:excel"></AutoFilter>');
                stream.push("</Worksheet>");
                wsidx++;
                R2 = -1;
                return void (stage = 3);
              }
              case -1:
                {
                  stage = -2;
                  stream.push("</Workbook>");
                }
                break;
              case -2:
                stream.push(null);
                break;
            }
          };
          return stream;
        }
        var __stream = {
          to_json: write_json_stream,
          to_html: write_html_stream,
          to_csv: write_csv_stream,
          to_xlml: write_xlml_stream,
          set_readable
        };
        if (typeof parse_xlscfb !== "undefined")
          XLSX2.parse_xlscfb = parse_xlscfb;
        XLSX2.parse_zip = parse_zip;
        XLSX2.read = readSync;
        XLSX2.readFile = readFileSync;
        XLSX2.readFileSync = readFileSync;
        XLSX2.write = writeSync;
        XLSX2.writeFile = writeFileSync;
        XLSX2.writeFileSync = writeFileSync;
        XLSX2.writeFileAsync = writeFileAsync;
        XLSX2.utils = utils2;
        XLSX2.writeXLSX = writeSyncXLSX;
        XLSX2.writeFileXLSX = writeFileSyncXLSX;
        XLSX2.set_fs = set_fs;
        XLSX2.set_cptable = set_cptable;
        XLSX2.SSF = SSF;
        if (typeof __stream !== "undefined")
          XLSX2.stream = __stream;
        if (typeof CFB !== "undefined")
          XLSX2.CFB = CFB;
        if (typeof __require !== "undefined") {
          var strmod = require_stream();
          if ((strmod || {}).Readable)
            set_readable(strmod.Readable);
          try {
            _fs = require_fs();
          } catch (e7) {
          }
        }
      }
      if (typeof exports !== "undefined")
        make_xlsx_lib(exports);
      else if (typeof module !== "undefined" && module.exports)
        make_xlsx_lib(module.exports);
      else if (typeof define === "function" && define.amd)
        define("xlsx", function() {
          if (!XLSX.version)
            make_xlsx_lib(XLSX);
          return XLSX;
        });
      else
        make_xlsx_lib(XLSX);
      if (typeof window !== "undefined" && !window.XLSX)
        try {
          window.XLSX = XLSX;
        } catch (e7) {
        }
    }
  });

  // node_modules/json-as-xlsx/dist/index.js
  var require_dist = __commonJS({
    "node_modules/json-as-xlsx/dist/index.js"(exports, module) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.libraryName = exports.xlsx = exports.getWorksheetColumnWidths = exports.getJsonSheetRow = exports.getContentProperty = exports.utils = void 0;
      var xlsx_1 = require_xlsx();
      Object.defineProperty(exports, "utils", { enumerable: true, get: function() {
        return xlsx_1.utils;
      } });
      var getContentProperty = (content2, property) => {
        const accessContentProperties = (content3, properties2) => {
          const value = content3[properties2[0]];
          if (properties2.length === 1) {
            return value !== null && value !== void 0 ? value : "";
          }
          if (value === void 0 || value === null || typeof value === "string" || typeof value === "boolean" || typeof value === "number" || value instanceof Date) {
            return "";
          }
          return accessContentProperties(value, properties2.slice(1));
        };
        const properties = property.split(".");
        return accessContentProperties(content2, properties);
      };
      exports.getContentProperty = getContentProperty;
      var getJsonSheetRow = (content2, columns) => {
        const jsonSheetRow = {};
        columns.forEach((column) => {
          if (typeof column.value === "function") {
            jsonSheetRow[column.label] = column.value(content2);
          } else {
            jsonSheetRow[column.label] = (0, exports.getContentProperty)(content2, column.value);
          }
        });
        return jsonSheetRow;
      };
      exports.getJsonSheetRow = getJsonSheetRow;
      var applyColumnFormat = (worksheet, columnIds, columnFormats) => {
        var _a;
        for (let i6 = 0; i6 < columnIds.length; i6 += 1) {
          const columnFormat = columnFormats[i6];
          if (!columnFormat) {
            continue;
          }
          const column = xlsx_1.utils.decode_col(columnIds[i6]);
          const range = xlsx_1.utils.decode_range((_a = worksheet["!ref"]) !== null && _a !== void 0 ? _a : "");
          for (let row = range.s.r + 1; row <= range.e.r; ++row) {
            const ref = xlsx_1.utils.encode_cell({ r: row, c: column });
            if (worksheet[ref]) {
              switch (columnFormat) {
                case "hyperlink":
                  worksheet[ref].l = { Target: worksheet[ref].v };
                  break;
                default:
                  worksheet[ref].z = columnFormat;
              }
            }
          }
        }
      };
      var getWorksheetColumnIds = (worksheet) => {
        var _a;
        const columnRange = xlsx_1.utils.decode_range((_a = worksheet["!ref"]) !== null && _a !== void 0 ? _a : "");
        const columnIds = [];
        for (let C6 = columnRange.s.c; C6 <= columnRange.e.c; C6++) {
          const address = xlsx_1.utils.encode_col(C6);
          columnIds.push(address);
        }
        return columnIds;
      };
      var getObjectLength = (object) => {
        if (typeof object === "string") {
          return Math.max(...object.split("\n").map((string) => string.length));
        }
        if (typeof object === "number") {
          return object.toString().length;
        }
        if (typeof object === "boolean") {
          return object ? "true".length : "false".length;
        }
        if (object instanceof Date) {
          return object.toString().length;
        }
        return 0;
      };
      var getWorksheetColumnWidths = (worksheet, extraLength = 1) => {
        const columnLetters = getWorksheetColumnIds(worksheet);
        return columnLetters.map((column) => {
          const columnCells = Object.keys(worksheet).filter((cell) => {
            return cell.replace(/[0-9]/g, "") === column;
          });
          const maxWidthCell = columnCells.reduce((maxWidth, cellId) => {
            const cell = worksheet[cellId];
            const cellContentLength = getObjectLength(cell.v);
            if (!cell.z) {
              return Math.max(maxWidth, cellContentLength);
            }
            const cellFormatLength = cell.z.length;
            const largestWidth = Math.max(cellContentLength, cellFormatLength);
            return Math.max(maxWidth, largestWidth);
          }, 0);
          return { width: maxWidthCell + extraLength };
        });
      };
      exports.getWorksheetColumnWidths = getWorksheetColumnWidths;
      var getWorksheet = (jsonSheet, settings) => {
        let jsonSheetRows;
        if (jsonSheet.content.length > 0) {
          jsonSheetRows = jsonSheet.content.map((contentItem) => {
            return (0, exports.getJsonSheetRow)(contentItem, jsonSheet.columns);
          });
        } else {
          jsonSheetRows = jsonSheet.columns.map((column) => ({ [column.label]: "" }));
        }
        const worksheet = xlsx_1.utils.json_to_sheet(jsonSheetRows);
        const worksheetColumnIds = getWorksheetColumnIds(worksheet);
        const worksheetColumnFormats = jsonSheet.columns.map((jsonSheetColumn) => {
          var _a;
          return (_a = jsonSheetColumn.format) !== null && _a !== void 0 ? _a : null;
        });
        applyColumnFormat(worksheet, worksheetColumnIds, worksheetColumnFormats);
        worksheet["!cols"] = (0, exports.getWorksheetColumnWidths)(worksheet, settings.extraLength);
        return worksheet;
      };
      var writeWorkbook = (workbook, settings = {}) => {
        var _a, _b, _c, _d;
        var _e;
        const RTL = Boolean(settings.RTL);
        (_a = workbook.Workbook) !== null && _a !== void 0 ? _a : workbook.Workbook = {};
        (_b = (_e = workbook.Workbook).Views) !== null && _b !== void 0 ? _b : _e.Views = [{}];
        workbook.Workbook.Views.forEach((view) => {
          view.RTL = RTL;
        });
        const filename = `${(_c = settings.fileName) !== null && _c !== void 0 ? _c : "Spreadsheet"}.xlsx`;
        const writeOptions = (_d = settings.writeOptions) !== null && _d !== void 0 ? _d : {};
        if (settings.writeMode === "write") {
          return (0, xlsx_1.write)(workbook, writeOptions);
        } else if (settings.writeMode === "writeFile") {
          return (0, xlsx_1.writeFile)(workbook, filename, writeOptions);
        } else {
          return writeOptions.type === "buffer" ? (0, xlsx_1.write)(workbook, writeOptions) : (0, xlsx_1.writeFile)(workbook, filename, writeOptions);
        }
      };
      var xlsx2 = (jsonSheets, settings = {}, workbookCallback = () => {
      }) => {
        if (jsonSheets.length === 0)
          return;
        const workbook = xlsx_1.utils.book_new();
        jsonSheets.forEach((actualSheet, actualIndex) => {
          var _a;
          const worksheet = getWorksheet(actualSheet, settings);
          const worksheetName = (_a = actualSheet.sheet) !== null && _a !== void 0 ? _a : `Sheet ${actualIndex + 1}`;
          xlsx_1.utils.book_append_sheet(workbook, worksheet, worksheetName);
        });
        workbookCallback(workbook);
        return writeWorkbook(workbook, settings);
      };
      exports.xlsx = xlsx2;
      exports.default = exports.xlsx;
      exports.libraryName = "json-as-xlsx";
      module.exports = exports.xlsx;
      module.exports.getContentProperty = exports.getContentProperty;
      module.exports.getJsonSheetRow = exports.getJsonSheetRow;
      module.exports.getWorksheetColumnWidths = exports.getWorksheetColumnWidths;
      module.exports.utils = xlsx_1.utils;
    }
  });

  // node_modules/dom-to-image-more/dist/dom-to-image-more.min.js
  var require_dom_to_image_more_min = __commonJS({
    "node_modules/dom-to-image-more/dist/dom-to-image-more.min.js"(exports, module) {
      ((l5) => {
        let f2 = (() => {
          let e8 = 0;
          return { escape: function(e9) {
            return e9.replace(/([.*+?^${}()|[\]/\\])/g, "\\$1");
          }, isDataUrl: function(e9) {
            return -1 !== e9.search(/^(data:)/);
          }, canvasToBlob: function(t7) {
            if (t7.toBlob)
              return new Promise(function(e9) {
                t7.toBlob(e9);
              });
            return ((r8) => new Promise(function(e9) {
              var t8 = u5(r8.toDataURL().split(",")[1]), n8 = t8.length, o8 = new Uint8Array(n8);
              for (let e11 = 0; e11 < n8; e11++)
                o8[e11] = t8.charCodeAt(e11);
              e9(new Blob([o8], { type: "image/png" }));
            }))(t7);
          }, resolveUrl: function(e9, t7) {
            var n8 = document.implementation.createHTMLDocument(), o8 = n8.createElement("base"), r8 = (n8.head.appendChild(o8), n8.createElement("a"));
            return n8.body.appendChild(r8), o8.href = t7, r8.href = e9, r8.href;
          }, getAndEncode: function(s4) {
            let e9 = a2.impl.urlCache.find(function(e11) {
              return e11.url === s4;
            });
            e9 || (e9 = { url: s4, promise: null }, a2.impl.urlCache.push(e9));
            null === e9.promise && (a2.impl.options.cacheBust && (s4 += (/\?/.test(s4) ? "&" : "?") + new Date().getTime()), e9.promise = new Promise(function(t7) {
              let e11 = a2.impl.options.httpTimeout, r8 = new XMLHttpRequest();
              if (r8.onreadystatechange = function() {
                if (4 === r8.readyState)
                  if (300 <= r8.status)
                    n8 ? t7(n8) : l6(`cannot fetch resource: ${s4}, status: ` + r8.status);
                  else {
                    let e12 = new FileReader();
                    e12.onloadend = function() {
                      t7(e12.result);
                    }, e12.readAsDataURL(r8.response);
                  }
              }, r8.ontimeout = function() {
                n8 ? t7(n8) : l6(`timeout of ${e11}ms occured while fetching resource: ` + s4);
              }, r8.responseType = "blob", r8.timeout = e11, 0 < a2.impl.options.useCredentialsFilters.length && (a2.impl.options.useCredentials = 0 < a2.impl.options.useCredentialsFilters.filter((e12) => 0 <= s4.search(e12)).length), a2.impl.options.useCredentials && (r8.withCredentials = true), a2.impl.options.corsImg && 0 === s4.indexOf("http") && -1 === s4.indexOf(window.location.origin)) {
                var i8 = "POST" === (a2.impl.options.corsImg.method || "GET").toUpperCase() ? "POST" : "GET";
                r8.open(i8, (a2.impl.options.corsImg.url || "").replace("#{cors}", s4), true);
                let t8 = false, n9 = a2.impl.options.corsImg.headers || {}, o8 = (Object.keys(n9).forEach(function(e12) {
                  -1 !== n9[e12].indexOf("application/json") && (t8 = true), r8.setRequestHeader(e12, n9[e12]);
                }), ((e12) => {
                  try {
                    return JSON.parse(JSON.stringify(e12));
                  } catch (e13) {
                    l6("corsImg.data is missing or invalid:" + e13.toString());
                  }
                })(a2.impl.options.corsImg.data || ""));
                Object.keys(o8).forEach(function(e12) {
                  "string" == typeof o8[e12] && (o8[e12] = o8[e12].replace("#{cors}", s4));
                }), r8.send(t8 ? JSON.stringify(o8) : o8);
              } else
                r8.open("GET", s4, true), r8.send();
              let n8;
              function l6(e12) {
                console.error(e12), t7("");
              }
              a2.impl.options.imagePlaceholder && (i8 = a2.impl.options.imagePlaceholder.split(/,/)) && i8[1] && (n8 = i8[1]);
            }));
            return e9.promise;
          }, uid: function() {
            return "u" + ("0000" + (Math.random() * Math.pow(36, 4) << 0).toString(36)).slice(-4) + e8++;
          }, delay: function(n8) {
            return function(t7) {
              return new Promise(function(e9) {
                setTimeout(function() {
                  e9(t7);
                }, n8);
              });
            };
          }, asArray: function(t7) {
            var n8 = [], o8 = t7.length;
            for (let e9 = 0; e9 < o8; e9++)
              n8.push(t7[e9]);
            return n8;
          }, escapeXhtml: function(e9) {
            return e9.replace(/%/g, "%25").replace(/#/g, "%23").replace(/\n/g, "%0A");
          }, makeImage: function(r8) {
            return "data:," !== r8 ? new Promise(function(e9, t7) {
              let n8 = document.createElementNS("http://www.w3.org/2000/svg", "svg"), o8 = new Image();
              a2.impl.options.useCredentials && (o8.crossOrigin = "use-credentials"), o8.onload = function() {
                document.body.removeChild(n8), window && window.requestAnimationFrame ? window.requestAnimationFrame(function() {
                  e9(o8);
                }) : e9(o8);
              }, o8.onerror = (e11) => {
                document.body.removeChild(n8), t7(e11);
              }, n8.appendChild(o8), o8.src = r8, document.body.appendChild(n8);
            }) : Promise.resolve();
          }, width: function(e9) {
            var t7 = i7(e9, "width");
            if (!isNaN(t7))
              return t7;
            var t7 = i7(e9, "border-left-width"), n8 = i7(e9, "border-right-width");
            return e9.scrollWidth + t7 + n8;
          }, height: function(e9) {
            var t7 = i7(e9, "height");
            if (!isNaN(t7))
              return t7;
            var t7 = i7(e9, "border-top-width"), n8 = i7(e9, "border-bottom-width");
            return e9.scrollHeight + t7 + n8;
          }, getWindow: t6, isElement: r7, isElementHostForOpenShadowRoot: function(e9) {
            return r7(e9) && null !== e9.shadowRoot;
          }, isShadowRoot: n7, isInShadowRoot: o7, isHTMLElement: function(e9) {
            return e9 instanceof t6(e9).HTMLElement;
          }, isHTMLCanvasElement: function(e9) {
            return e9 instanceof t6(e9).HTMLCanvasElement;
          }, isHTMLInputElement: function(e9) {
            return e9 instanceof t6(e9).HTMLInputElement;
          }, isHTMLImageElement: function(e9) {
            return e9 instanceof t6(e9).HTMLImageElement;
          }, isHTMLLinkElement: function(e9) {
            return e9 instanceof t6(e9).HTMLLinkElement;
          }, isHTMLScriptElement: function(e9) {
            return e9 instanceof t6(e9).HTMLScriptElement;
          }, isHTMLStyleElement: function(e9) {
            return e9 instanceof t6(e9).HTMLStyleElement;
          }, isHTMLTextAreaElement: function(e9) {
            return e9 instanceof t6(e9).HTMLTextAreaElement;
          }, isShadowSlotElement: function(e9) {
            return o7(e9) && e9 instanceof t6(e9).HTMLSlotElement;
          }, isSVGElement: function(e9) {
            return e9 instanceof t6(e9).SVGElement;
          }, isSVGRectElement: function(e9) {
            return e9 instanceof t6(e9).SVGRectElement;
          }, isDimensionMissing: function(e9) {
            return isNaN(e9) || e9 <= 0;
          } };
          function t6(e9) {
            e9 = e9 ? e9.ownerDocument : void 0;
            return (e9 ? e9.defaultView : void 0) || window || l5;
          }
          function n7(e9) {
            return e9 instanceof t6(e9).ShadowRoot;
          }
          function o7(e9) {
            return null != e9 && void 0 !== e9.getRootNode && n7(e9.getRootNode());
          }
          function r7(e9) {
            return e9 instanceof t6(e9).Element;
          }
          function i7(t7, n8) {
            if (t7.nodeType === c8) {
              let e9 = m4(t7).getPropertyValue(n8);
              if ("px" === e9.slice(-2))
                return e9 = e9.slice(0, -2), parseFloat(e9);
            }
            return NaN;
          }
        })(), r6 = (() => {
          let o7 = /url\(['"]?([^'"]+?)['"]?\)/g;
          return { inlineAll: function(t6, o8, r7) {
            if (!e8(t6))
              return Promise.resolve(t6);
            return Promise.resolve(t6).then(n7).then(function(e9) {
              let n8 = Promise.resolve(t6);
              return e9.forEach(function(t7) {
                n8 = n8.then(function(e11) {
                  return i7(e11, t7, o8, r7);
                });
              }), n8;
            });
          }, shouldProcess: e8, impl: { readUrls: n7, inline: i7 } };
          function e8(e9) {
            return -1 !== e9.search(o7);
          }
          function n7(e9) {
            for (var t6, n8 = []; null !== (t6 = o7.exec(e9)); )
              n8.push(t6[1]);
            return n8.filter(function(e11) {
              return !f2.isDataUrl(e11);
            });
          }
          function i7(n8, o8, t6, e9) {
            return Promise.resolve(o8).then(function(e11) {
              return t6 ? f2.resolveUrl(e11, t6) : e11;
            }).then(e9 || f2.getAndEncode).then(function(e11) {
              return n8.replace((t7 = o8, new RegExp(`(url\\(['"]?)(${f2.escape(t7)})(['"]?\\))`, "g")), `$1${e11}$3`);
              var t7;
            });
          }
        })(), e7 = { resolveAll: function() {
          return t5().then(function(e8) {
            return Promise.all(e8.map(function(e9) {
              return e9.resolve();
            }));
          }).then(function(e8) {
            return e8.join("\n");
          });
        }, impl: { readAll: t5 } };
        function t5() {
          return Promise.resolve(f2.asArray(document.styleSheets)).then(function(e8) {
            let n7 = [];
            return e8.forEach(function(t7) {
              var e9 = Object.getPrototypeOf(t7);
              if (Object.prototype.hasOwnProperty.call(e9, "cssRules"))
                try {
                  f2.asArray(t7.cssRules || []).forEach(n7.push.bind(n7));
                } catch (e11) {
                  console.error("domtoimage: Error while reading CSS rules from " + t7.href, e11.toString());
                }
            }), n7;
          }).then(function(e8) {
            return e8.filter(function(e9) {
              return e9.type === CSSRule.FONT_FACE_RULE;
            }).filter(function(e9) {
              return r6.shouldProcess(e9.style.getPropertyValue("src"));
            });
          }).then(function(e8) {
            return e8.map(t6);
          });
          function t6(t7) {
            return { resolve: function() {
              var e8 = (t7.parentStyleSheet || {}).href;
              return r6.inlineAll(t7.cssText, e8);
            }, src: function() {
              return t7.style.getPropertyValue("src");
            } };
          }
        }
        let n6 = { inlineAll: function t6(e8) {
          if (!f2.isElement(e8))
            return Promise.resolve(e8);
          return n7(e8).then(function() {
            return f2.isHTMLImageElement(e8) ? o6(e8).inline() : Promise.all(f2.asArray(e8.childNodes).map(function(e9) {
              return t6(e9);
            }));
          });
          function n7(o7) {
            let e9 = ["background", "background-image"], t7 = e9.map(function(t8) {
              let e11 = o7.style.getPropertyValue(t8), n8 = o7.style.getPropertyPriority(t8);
              return e11 ? r6.inlineAll(e11).then(function(e12) {
                o7.style.setProperty(t8, e12, n8);
              }) : Promise.resolve();
            });
            return Promise.all(t7).then(function() {
              return o7;
            });
          }
        }, impl: { newImage: o6 } };
        function o6(n7) {
          return { inline: function(e8) {
            if (f2.isDataUrl(n7.src))
              return Promise.resolve();
            return Promise.resolve(n7.src).then(e8 || f2.getAndEncode).then(function(t6) {
              return new Promise(function(e9) {
                n7.onload = e9, n7.onerror = e9, n7.src = t6;
              });
            });
          } };
        }
        let s3 = { copyDefaultStyles: true, imagePlaceholder: void 0, cacheBust: false, useCredentials: false, useCredentialsFilters: [], httpTimeout: 3e4, styleCaching: "strict", corsImg: void 0, adjustClonedNode: void 0 }, a2 = { toSvg: d2, toPng: function(e8, t6) {
          return i6(e8, t6).then(function(e9) {
            return e9.toDataURL();
          });
        }, toJpeg: function(e8, t6) {
          return i6(e8, t6).then(function(e9) {
            return e9.toDataURL("image/jpeg", (t6 ? t6.quality : void 0) || 1);
          });
        }, toBlob: function(e8, t6) {
          return i6(e8, t6).then(f2.canvasToBlob);
        }, toPixelData: function(t6, e8) {
          return i6(t6, e8).then(function(e9) {
            return e9.getContext("2d").getImageData(0, 0, f2.width(t6), f2.height(t6)).data;
          });
        }, toCanvas: i6, impl: { fontFaces: e7, images: n6, util: f2, inliner: r6, urlCache: [], options: {} } }, c8 = ("object" == typeof exports && "object" == typeof module ? module.exports = a2 : l5.domtoimage = a2, ("undefined" != typeof Node ? Node.ELEMENT_NODE : void 0) || 1), m4 = (void 0 !== l5 ? l5.getComputedStyle : void 0) || ("undefined" != typeof window ? window.getComputedStyle : void 0) || globalThis.getComputedStyle, u5 = (void 0 !== l5 ? l5.atob : void 0) || ("undefined" != typeof window ? window.atob : void 0) || globalThis.atob;
        function d2(e8, r7) {
          let t6 = a2.impl.util.getWindow(e8);
          var n7 = r7 = r7 || {};
          void 0 === n7.copyDefaultStyles ? a2.impl.options.copyDefaultStyles = s3.copyDefaultStyles : a2.impl.options.copyDefaultStyles = n7.copyDefaultStyles, a2.impl.options.imagePlaceholder = (void 0 === n7.imagePlaceholder ? s3 : n7).imagePlaceholder, a2.impl.options.cacheBust = (void 0 === n7.cacheBust ? s3 : n7).cacheBust, a2.impl.options.corsImg = (void 0 === n7.corsImg ? s3 : n7).corsImg, a2.impl.options.useCredentials = (void 0 === n7.useCredentials ? s3 : n7).useCredentials, a2.impl.options.useCredentialsFilters = (void 0 === n7.useCredentialsFilters ? s3 : n7).useCredentialsFilters, a2.impl.options.httpTimeout = (void 0 === n7.httpTimeout ? s3 : n7).httpTimeout, a2.impl.options.styleCaching = (void 0 === n7.styleCaching ? s3 : n7).styleCaching;
          let i7 = [];
          return Promise.resolve(e8).then(function(e9) {
            if (e9.nodeType === c8)
              return e9;
            var t7 = e9, n8 = e9.parentNode, o7 = document.createElement("span");
            return n8.replaceChild(o7, t7), o7.append(e9), i7.push({ parent: n8, child: t7, wrapper: o7 }), o7;
          }).then(function(e9) {
            return function l6(t7, s4, r8, u6) {
              let e11 = s4.filter;
              if (t7 === h || f2.isHTMLScriptElement(t7) || f2.isHTMLStyleElement(t7) || f2.isHTMLLinkElement(t7) || null !== r8 && e11 && !e11(t7))
                return Promise.resolve();
              return Promise.resolve(t7).then(n8).then(o7).then(function(e12) {
                return c9(e12, a3(t7));
              }).then(i8).then(function(e12) {
                return d3(e12, t7);
              });
              function n8(e12) {
                return f2.isHTMLCanvasElement(e12) ? f2.makeImage(e12.toDataURL()) : e12.cloneNode(false);
              }
              function o7(e12) {
                return s4.adjustClonedNode && s4.adjustClonedNode(t7, e12, false), Promise.resolve(e12);
              }
              function i8(e12) {
                return s4.adjustClonedNode && s4.adjustClonedNode(t7, e12, true), Promise.resolve(e12);
              }
              function a3(e12) {
                return f2.isElementHostForOpenShadowRoot(e12) ? e12.shadowRoot : e12;
              }
              function c9(n9, e12) {
                let o8 = t8(e12), r9 = Promise.resolve();
                if (0 !== o8.length) {
                  let t9 = m4(i9(e12));
                  f2.asArray(o8).forEach(function(e13) {
                    r9 = r9.then(function() {
                      return l6(e13, s4, t9, u6).then(function(e14) {
                        e14 && n9.appendChild(e14);
                      });
                    });
                  });
                }
                return r9.then(function() {
                  return n9;
                });
                function i9(e13) {
                  return f2.isShadowRoot(e13) ? e13.host : e13;
                }
                function t8(t9) {
                  if (f2.isShadowSlotElement(t9)) {
                    let e13 = t9.assignedNodes();
                    if (e13 && 0 < e13.length)
                      return e13;
                  }
                  return t9.childNodes;
                }
              }
              function d3(u7, a4) {
                return !f2.isElement(u7) || f2.isShadowSlotElement(a4) ? Promise.resolve(u7) : Promise.resolve().then(e12).then(t8).then(n9).then(o8).then(function() {
                  return u7;
                });
                function e12() {
                  function o9(e14, t9) {
                    t9.font = e14.font, t9.fontFamily = e14.fontFamily, t9.fontFeatureSettings = e14.fontFeatureSettings, t9.fontKerning = e14.fontKerning, t9.fontSize = e14.fontSize, t9.fontStretch = e14.fontStretch, t9.fontStyle = e14.fontStyle, t9.fontVariant = e14.fontVariant, t9.fontVariantCaps = e14.fontVariantCaps, t9.fontVariantEastAsian = e14.fontVariantEastAsian, t9.fontVariantLigatures = e14.fontVariantLigatures, t9.fontVariantNumeric = e14.fontVariantNumeric, t9.fontVariationSettings = e14.fontVariationSettings, t9.fontWeight = e14.fontWeight;
                  }
                  function e13(e14, t9) {
                    let n10 = m4(e14);
                    n10.cssText ? (t9.style.cssText = n10.cssText, o9(n10, t9.style)) : (y4(s4, e14, n10, r8, t9), null === r8 && (["inset-block", "inset-block-start", "inset-block-end"].forEach((e15) => t9.style.removeProperty(e15)), ["left", "right", "top", "bottom"].forEach((e15) => {
                      t9.style.getPropertyValue(e15) && t9.style.setProperty(e15, "0px");
                    })));
                  }
                  e13(a4, u7);
                }
                function t8() {
                  let s5 = f2.uid();
                  function t9(r9) {
                    let i9 = m4(a4, r9), l7 = i9.getPropertyValue("content");
                    if ("" !== l7 && "none" !== l7) {
                      let n11 = function() {
                        let e14 = `.${s5}:` + r9, t11 = (i9.cssText ? n12 : o9)();
                        return document.createTextNode(e14 + `{${t11}}`);
                        function n12() {
                          return `${i9.cssText} content: ${l7};`;
                        }
                        function o9() {
                          let e15 = f2.asArray(i9).map(t12).join("; ");
                          return e15 + ";";
                          function t12(e16) {
                            let t13 = i9.getPropertyValue(e16), n13 = i9.getPropertyPriority(e16) ? " !important" : "";
                            return e16 + ": " + t13 + n13;
                          }
                        }
                      };
                      var n10 = n11;
                      let e13 = u7.getAttribute("class") || "", t10 = (u7.setAttribute("class", e13 + " " + s5), document.createElement("style"));
                      t10.appendChild(n11()), u7.appendChild(t10);
                    }
                  }
                  [":before", ":after"].forEach(function(e13) {
                    t9(e13);
                  });
                }
                function n9() {
                  f2.isHTMLTextAreaElement(a4) && (u7.innerHTML = a4.value), f2.isHTMLInputElement(a4) && u7.setAttribute("value", a4.value);
                }
                function o8() {
                  f2.isSVGElement(u7) && (u7.setAttribute("xmlns", "http://www.w3.org/2000/svg"), f2.isSVGRectElement(u7)) && ["width", "height"].forEach(function(e13) {
                    let t9 = u7.getAttribute(e13);
                    t9 && u7.style.setProperty(e13, t9);
                  });
                }
              }
            }(e9, r7, null, t6);
          }).then(r7.disableEmbedFonts ? Promise.resolve(e8) : p2).then(g2).then(function(t7) {
            r7.bgcolor && (t7.style.backgroundColor = r7.bgcolor);
            r7.width && (t7.style.width = r7.width + "px");
            r7.height && (t7.style.height = r7.height + "px");
            r7.style && Object.keys(r7.style).forEach(function(e11) {
              t7.style[e11] = r7.style[e11];
            });
            let e9 = null;
            "function" == typeof r7.onclone && (e9 = r7.onclone(t7));
            return Promise.resolve(e9).then(function() {
              return t7;
            });
          }).then(function(e9) {
            let n8 = r7.width || f2.width(e9), o7 = r7.height || f2.height(e9);
            return Promise.resolve(e9).then(function(e11) {
              return e11.setAttribute("xmlns", "http://www.w3.org/1999/xhtml"), new XMLSerializer().serializeToString(e11);
            }).then(f2.escapeXhtml).then(function(e11) {
              var t7 = (f2.isDimensionMissing(n8) ? ' width="100%"' : ` width="${n8}"`) + (f2.isDimensionMissing(o7) ? ' height="100%"' : ` height="${o7}"`);
              return `<svg xmlns="http://www.w3.org/2000/svg"${(f2.isDimensionMissing(n8) ? "" : ` width="${n8}"`) + (f2.isDimensionMissing(o7) ? "" : ` height="${o7}"`)}><foreignObject${t7}>${e11}</foreignObject></svg>`;
            }).then(function(e11) {
              return "data:image/svg+xml;charset=utf-8," + e11;
            });
          }).then(function(e9) {
            for (; 0 < i7.length; ) {
              var t7 = i7.pop();
              t7.parent.replaceChild(t7.child, t7.wrapper);
            }
            return e9;
          }).then(function(e9) {
            return a2.impl.urlCache = [], (() => {
              h && (document.body.removeChild(h), h = null), v4 && clearTimeout(v4), v4 = setTimeout(() => {
                v4 = null, w3 = {};
              }, 2e4);
            })(), e9;
          });
        }
        function i6(r7, i7) {
          return d2(r7, i7 = i7 || {}).then(f2.makeImage).then(function(e8) {
            var t6 = "number" != typeof i7.scale ? 1 : i7.scale, n7 = ((e9, t7) => {
              let n8 = i7.width || f2.width(e9), o8 = i7.height || f2.height(e9);
              return f2.isDimensionMissing(n8) && (n8 = f2.isDimensionMissing(o8) ? 300 : 2 * o8), f2.isDimensionMissing(o8) && (o8 = n8 / 2), (e9 = document.createElement("canvas")).width = n8 * t7, e9.height = o8 * t7, i7.bgcolor && ((t7 = e9.getContext("2d")).fillStyle = i7.bgcolor, t7.fillRect(0, 0, e9.width, e9.height)), e9;
            })(r7, t6), o7 = n7.getContext("2d");
            return o7.msImageSmoothingEnabled = false, o7.imageSmoothingEnabled = false, e8 && (o7.scale(t6, t6), o7.drawImage(e8, 0, 0)), n7;
          });
        }
        let h = null;
        function p2(n7) {
          return e7.resolveAll().then(function(e8) {
            var t6;
            return "" !== e8 && (t6 = document.createElement("style"), n7.appendChild(t6), t6.appendChild(document.createTextNode(e8))), n7;
          });
        }
        function g2(e8) {
          return n6.inlineAll(e8).then(function() {
            return e8;
          });
        }
        function y4(e8, t6, i7, l6, n7) {
          let s4 = a2.impl.options.copyDefaultStyles ? ((t7, e9) => {
            var n8, o7 = ((e11) => ("relaxed" !== t7.styleCaching ? e11 : e11.filter((e12, t8, n9) => 0 === t8 || t8 === n9.length - 1)).join(">"))(e9 = ((e11) => {
              var t8 = [];
              do {
                if (e11.nodeType === c8) {
                  var n9 = e11.tagName;
                  if (t8.push(n9), E6.includes(n9))
                    break;
                }
              } while (e11 = e11.parentNode);
              return t8;
            })(e9));
            {
              if (w3[o7])
                return w3[o7];
              e9 = ((e11, t8) => {
                let n9 = e11.body;
                do {
                  var o8 = t8.pop(), o8 = e11.createElement(o8);
                  n9.appendChild(o8), n9 = o8;
                } while (0 < t8.length);
                return n9.textContent = "\u200B", n9;
              })((n8 = (() => {
                if (h)
                  return h.contentWindow;
                t8 = document.characterSet || "UTF-8", e11 = (e11 = document.doctype) ? (`<!DOCTYPE ${s5(e11.name)} ${s5(e11.publicId)} ` + s5(e11.systemId)).trim() + ">" : "", (h = document.createElement("iframe")).id = "domtoimage-sandbox-" + f2.uid(), h.style.visibility = "hidden", h.style.position = "fixed", document.body.appendChild(h);
                var e11, t8, n9 = h, o8 = "domtoimage-sandbox";
                try {
                  return n9.contentWindow.document.write(e11 + `<html><head><meta charset='${t8}'><title>${o8}</title></head><body></body></html>`), n9.contentWindow;
                } catch (e12) {
                }
                var r8 = document.createElement("meta");
                r8.setAttribute("charset", t8);
                try {
                  var i9 = document.implementation.createHTMLDocument(o8), l7 = (i9.head.appendChild(r8), e11 + i9.documentElement.outerHTML);
                  return n9.setAttribute("srcdoc", l7), n9.contentWindow;
                } catch (e12) {
                }
                return n9.contentDocument.head.appendChild(r8), n9.contentDocument.title = o8, n9.contentWindow;
                function s5(e12) {
                  var t9;
                  return e12 ? ((t9 = document.createElement("div")).innerText = e12, t9.innerHTML) : "";
                }
              })()).document, e9), n8 = ((e11, t8) => {
                let n9 = {}, o8 = e11.getComputedStyle(t8);
                return f2.asArray(o8).forEach(function(e12) {
                  n9[e12] = "width" === e12 || "height" === e12 ? "auto" : o8.getPropertyValue(e12);
                }), n9;
              })(n8, e9);
              var r7 = e9;
              do {
                var i8 = r7.parentElement;
                null !== i8 && i8.removeChild(r7), r7 = i8;
              } while (r7 && "BODY" !== r7.tagName);
              return w3[o7] = n8;
            }
          })(e8, t6) : {}, u6 = n7.style;
          f2.asArray(i7).forEach(function(e9) {
            var t7, n8 = i7.getPropertyValue(e9), o7 = s4[e9], r7 = l6 ? l6.getPropertyValue(e9) : void 0;
            u6.getPropertyValue(e9) || (n8 !== o7 || l6 && n8 !== r7) && (o7 = i7.getPropertyPriority(e9), r7 = u6, n8 = n8, o7 = o7, t7 = 0 <= ["background-clip"].indexOf(e9 = e9), o7 ? (r7.setProperty(e9, n8, o7), t7 && r7.setProperty("-webkit-" + e9, n8, o7)) : (r7.setProperty(e9, n8), t7 && r7.setProperty("-webkit-" + e9, n8)));
          });
        }
        let v4 = null, w3 = {}, E6 = ["ADDRESS", "ARTICLE", "ASIDE", "BLOCKQUOTE", "DETAILS", "DIALOG", "DD", "DIV", "DL", "DT", "FIELDSET", "FIGCAPTION", "FIGURE", "FOOTER", "FORM", "H1", "H2", "H3", "H4", "H5", "H6", "HEADER", "HGROUP", "HR", "LI", "MAIN", "NAV", "OL", "P", "PRE", "SECTION", "SVG", "TABLE", "UL", "math", "svg", "BODY", "HEAD", "HTML"];
      })(exports);
    }
  });

  // node_modules/react-is/cjs/react-is.development.js
  var require_react_is_development = __commonJS({
    "node_modules/react-is/cjs/react-is.development.js"(exports) {
      "use strict";
      if (true) {
        (function() {
          "use strict";
          var hasSymbol = typeof Symbol === "function" && Symbol.for;
          var REACT_ELEMENT_TYPE = hasSymbol ? Symbol.for("react.element") : 60103;
          var REACT_PORTAL_TYPE = hasSymbol ? Symbol.for("react.portal") : 60106;
          var REACT_FRAGMENT_TYPE = hasSymbol ? Symbol.for("react.fragment") : 60107;
          var REACT_STRICT_MODE_TYPE = hasSymbol ? Symbol.for("react.strict_mode") : 60108;
          var REACT_PROFILER_TYPE = hasSymbol ? Symbol.for("react.profiler") : 60114;
          var REACT_PROVIDER_TYPE = hasSymbol ? Symbol.for("react.provider") : 60109;
          var REACT_CONTEXT_TYPE = hasSymbol ? Symbol.for("react.context") : 60110;
          var REACT_ASYNC_MODE_TYPE = hasSymbol ? Symbol.for("react.async_mode") : 60111;
          var REACT_CONCURRENT_MODE_TYPE = hasSymbol ? Symbol.for("react.concurrent_mode") : 60111;
          var REACT_FORWARD_REF_TYPE = hasSymbol ? Symbol.for("react.forward_ref") : 60112;
          var REACT_SUSPENSE_TYPE = hasSymbol ? Symbol.for("react.suspense") : 60113;
          var REACT_SUSPENSE_LIST_TYPE = hasSymbol ? Symbol.for("react.suspense_list") : 60120;
          var REACT_MEMO_TYPE = hasSymbol ? Symbol.for("react.memo") : 60115;
          var REACT_LAZY_TYPE = hasSymbol ? Symbol.for("react.lazy") : 60116;
          var REACT_BLOCK_TYPE = hasSymbol ? Symbol.for("react.block") : 60121;
          var REACT_FUNDAMENTAL_TYPE = hasSymbol ? Symbol.for("react.fundamental") : 60117;
          var REACT_RESPONDER_TYPE = hasSymbol ? Symbol.for("react.responder") : 60118;
          var REACT_SCOPE_TYPE = hasSymbol ? Symbol.for("react.scope") : 60119;
          function isValidElementType(type) {
            return typeof type === "string" || typeof type === "function" || type === REACT_FRAGMENT_TYPE || type === REACT_CONCURRENT_MODE_TYPE || type === REACT_PROFILER_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || typeof type === "object" && type !== null && (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_FUNDAMENTAL_TYPE || type.$$typeof === REACT_RESPONDER_TYPE || type.$$typeof === REACT_SCOPE_TYPE || type.$$typeof === REACT_BLOCK_TYPE);
          }
          function typeOf(object) {
            if (typeof object === "object" && object !== null) {
              var $$typeof = object.$$typeof;
              switch ($$typeof) {
                case REACT_ELEMENT_TYPE:
                  var type = object.type;
                  switch (type) {
                    case REACT_ASYNC_MODE_TYPE:
                    case REACT_CONCURRENT_MODE_TYPE:
                    case REACT_FRAGMENT_TYPE:
                    case REACT_PROFILER_TYPE:
                    case REACT_STRICT_MODE_TYPE:
                    case REACT_SUSPENSE_TYPE:
                      return type;
                    default:
                      var $$typeofType = type && type.$$typeof;
                      switch ($$typeofType) {
                        case REACT_CONTEXT_TYPE:
                        case REACT_FORWARD_REF_TYPE:
                        case REACT_LAZY_TYPE:
                        case REACT_MEMO_TYPE:
                        case REACT_PROVIDER_TYPE:
                          return $$typeofType;
                        default:
                          return $$typeof;
                      }
                  }
                case REACT_PORTAL_TYPE:
                  return $$typeof;
              }
            }
            return void 0;
          }
          var AsyncMode = REACT_ASYNC_MODE_TYPE;
          var ConcurrentMode = REACT_CONCURRENT_MODE_TYPE;
          var ContextConsumer = REACT_CONTEXT_TYPE;
          var ContextProvider = REACT_PROVIDER_TYPE;
          var Element2 = REACT_ELEMENT_TYPE;
          var ForwardRef = REACT_FORWARD_REF_TYPE;
          var Fragment3 = REACT_FRAGMENT_TYPE;
          var Lazy = REACT_LAZY_TYPE;
          var Memo = REACT_MEMO_TYPE;
          var Portal = REACT_PORTAL_TYPE;
          var Profiler = REACT_PROFILER_TYPE;
          var StrictMode = REACT_STRICT_MODE_TYPE;
          var Suspense = REACT_SUSPENSE_TYPE;
          var hasWarnedAboutDeprecatedIsAsyncMode = false;
          function isAsyncMode(object) {
            {
              if (!hasWarnedAboutDeprecatedIsAsyncMode) {
                hasWarnedAboutDeprecatedIsAsyncMode = true;
                console["warn"]("The ReactIs.isAsyncMode() alias has been deprecated, and will be removed in React 17+. Update your code to use ReactIs.isConcurrentMode() instead. It has the exact same API.");
              }
            }
            return isConcurrentMode(object) || typeOf(object) === REACT_ASYNC_MODE_TYPE;
          }
          function isConcurrentMode(object) {
            return typeOf(object) === REACT_CONCURRENT_MODE_TYPE;
          }
          function isContextConsumer(object) {
            return typeOf(object) === REACT_CONTEXT_TYPE;
          }
          function isContextProvider(object) {
            return typeOf(object) === REACT_PROVIDER_TYPE;
          }
          function isElement(object) {
            return typeof object === "object" && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
          }
          function isForwardRef(object) {
            return typeOf(object) === REACT_FORWARD_REF_TYPE;
          }
          function isFragment(object) {
            return typeOf(object) === REACT_FRAGMENT_TYPE;
          }
          function isLazy(object) {
            return typeOf(object) === REACT_LAZY_TYPE;
          }
          function isMemo(object) {
            return typeOf(object) === REACT_MEMO_TYPE;
          }
          function isPortal(object) {
            return typeOf(object) === REACT_PORTAL_TYPE;
          }
          function isProfiler(object) {
            return typeOf(object) === REACT_PROFILER_TYPE;
          }
          function isStrictMode(object) {
            return typeOf(object) === REACT_STRICT_MODE_TYPE;
          }
          function isSuspense(object) {
            return typeOf(object) === REACT_SUSPENSE_TYPE;
          }
          exports.AsyncMode = AsyncMode;
          exports.ConcurrentMode = ConcurrentMode;
          exports.ContextConsumer = ContextConsumer;
          exports.ContextProvider = ContextProvider;
          exports.Element = Element2;
          exports.ForwardRef = ForwardRef;
          exports.Fragment = Fragment3;
          exports.Lazy = Lazy;
          exports.Memo = Memo;
          exports.Portal = Portal;
          exports.Profiler = Profiler;
          exports.StrictMode = StrictMode;
          exports.Suspense = Suspense;
          exports.isAsyncMode = isAsyncMode;
          exports.isConcurrentMode = isConcurrentMode;
          exports.isContextConsumer = isContextConsumer;
          exports.isContextProvider = isContextProvider;
          exports.isElement = isElement;
          exports.isForwardRef = isForwardRef;
          exports.isFragment = isFragment;
          exports.isLazy = isLazy;
          exports.isMemo = isMemo;
          exports.isPortal = isPortal;
          exports.isProfiler = isProfiler;
          exports.isStrictMode = isStrictMode;
          exports.isSuspense = isSuspense;
          exports.isValidElementType = isValidElementType;
          exports.typeOf = typeOf;
        })();
      }
    }
  });

  // node_modules/react-is/index.js
  var require_react_is = __commonJS({
    "node_modules/react-is/index.js"(exports, module) {
      "use strict";
      if (false) {
        module.exports = null;
      } else {
        module.exports = require_react_is_development();
      }
    }
  });

  // node_modules/object-assign/index.js
  var require_object_assign = __commonJS({
    "node_modules/object-assign/index.js"(exports, module) {
      "use strict";
      var getOwnPropertySymbols = Object.getOwnPropertySymbols;
      var hasOwnProperty = Object.prototype.hasOwnProperty;
      var propIsEnumerable = Object.prototype.propertyIsEnumerable;
      function toObject(val2) {
        if (val2 === null || val2 === void 0) {
          throw new TypeError("Object.assign cannot be called with null or undefined");
        }
        return Object(val2);
      }
      function shouldUseNative() {
        try {
          if (!Object.assign) {
            return false;
          }
          var test1 = new String("abc");
          test1[5] = "de";
          if (Object.getOwnPropertyNames(test1)[0] === "5") {
            return false;
          }
          var test2 = {};
          for (var i6 = 0; i6 < 10; i6++) {
            test2["_" + String.fromCharCode(i6)] = i6;
          }
          var order2 = Object.getOwnPropertyNames(test2).map(function(n6) {
            return test2[n6];
          });
          if (order2.join("") !== "0123456789") {
            return false;
          }
          var test3 = {};
          "abcdefghijklmnopqrst".split("").forEach(function(letter) {
            test3[letter] = letter;
          });
          if (Object.keys(Object.assign({}, test3)).join("") !== "abcdefghijklmnopqrst") {
            return false;
          }
          return true;
        } catch (err) {
          return false;
        }
      }
      module.exports = shouldUseNative() ? Object.assign : function(target, source) {
        var from2;
        var to4 = toObject(target);
        var symbols;
        for (var s3 = 1; s3 < arguments.length; s3++) {
          from2 = Object(arguments[s3]);
          for (var key in from2) {
            if (hasOwnProperty.call(from2, key)) {
              to4[key] = from2[key];
            }
          }
          if (getOwnPropertySymbols) {
            symbols = getOwnPropertySymbols(from2);
            for (var i6 = 0; i6 < symbols.length; i6++) {
              if (propIsEnumerable.call(from2, symbols[i6])) {
                to4[symbols[i6]] = from2[symbols[i6]];
              }
            }
          }
        }
        return to4;
      };
    }
  });

  // node_modules/prop-types/lib/ReactPropTypesSecret.js
  var require_ReactPropTypesSecret = __commonJS({
    "node_modules/prop-types/lib/ReactPropTypesSecret.js"(exports, module) {
      "use strict";
      var ReactPropTypesSecret = "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED";
      module.exports = ReactPropTypesSecret;
    }
  });

  // node_modules/prop-types/lib/has.js
  var require_has = __commonJS({
    "node_modules/prop-types/lib/has.js"(exports, module) {
      module.exports = Function.call.bind(Object.prototype.hasOwnProperty);
    }
  });

  // node_modules/prop-types/checkPropTypes.js
  var require_checkPropTypes = __commonJS({
    "node_modules/prop-types/checkPropTypes.js"(exports, module) {
      "use strict";
      var printWarning = function() {
      };
      if (true) {
        ReactPropTypesSecret = require_ReactPropTypesSecret();
        loggedTypeFailures = {};
        has = require_has();
        printWarning = function(text) {
          var message = "Warning: " + text;
          if (typeof console !== "undefined") {
            console.error(message);
          }
          try {
            throw new Error(message);
          } catch (x3) {
          }
        };
      }
      var ReactPropTypesSecret;
      var loggedTypeFailures;
      var has;
      function checkPropTypes(typeSpecs, values, location2, componentName, getStack) {
        if (true) {
          for (var typeSpecName in typeSpecs) {
            if (has(typeSpecs, typeSpecName)) {
              var error;
              try {
                if (typeof typeSpecs[typeSpecName] !== "function") {
                  var err = Error(
                    (componentName || "React class") + ": " + location2 + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`."
                  );
                  err.name = "Invariant Violation";
                  throw err;
                }
                error = typeSpecs[typeSpecName](values, typeSpecName, componentName, location2, null, ReactPropTypesSecret);
              } catch (ex) {
                error = ex;
              }
              if (error && !(error instanceof Error)) {
                printWarning(
                  (componentName || "React class") + ": type specification of " + location2 + " `" + typeSpecName + "` is invalid; the type checker function must return `null` or an `Error` but returned a " + typeof error + ". You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument)."
                );
              }
              if (error instanceof Error && !(error.message in loggedTypeFailures)) {
                loggedTypeFailures[error.message] = true;
                var stack = getStack ? getStack() : "";
                printWarning(
                  "Failed " + location2 + " type: " + error.message + (stack != null ? stack : "")
                );
              }
            }
          }
        }
      }
      checkPropTypes.resetWarningCache = function() {
        if (true) {
          loggedTypeFailures = {};
        }
      };
      module.exports = checkPropTypes;
    }
  });

  // node_modules/prop-types/factoryWithTypeCheckers.js
  var require_factoryWithTypeCheckers = __commonJS({
    "node_modules/prop-types/factoryWithTypeCheckers.js"(exports, module) {
      "use strict";
      var ReactIs = require_react_is();
      var assign2 = require_object_assign();
      var ReactPropTypesSecret = require_ReactPropTypesSecret();
      var has = require_has();
      var checkPropTypes = require_checkPropTypes();
      var printWarning = function() {
      };
      if (true) {
        printWarning = function(text) {
          var message = "Warning: " + text;
          if (typeof console !== "undefined") {
            console.error(message);
          }
          try {
            throw new Error(message);
          } catch (x3) {
          }
        };
      }
      function emptyFunctionThatReturnsNull() {
        return null;
      }
      module.exports = function(isValidElement, throwOnDirectAccess) {
        var ITERATOR_SYMBOL = typeof Symbol === "function" && Symbol.iterator;
        var FAUX_ITERATOR_SYMBOL = "@@iterator";
        function getIteratorFn(maybeIterable) {
          var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);
          if (typeof iteratorFn === "function") {
            return iteratorFn;
          }
        }
        var ANONYMOUS = "<<anonymous>>";
        var ReactPropTypes = {
          array: createPrimitiveTypeChecker("array"),
          bigint: createPrimitiveTypeChecker("bigint"),
          bool: createPrimitiveTypeChecker("boolean"),
          func: createPrimitiveTypeChecker("function"),
          number: createPrimitiveTypeChecker("number"),
          object: createPrimitiveTypeChecker("object"),
          string: createPrimitiveTypeChecker("string"),
          symbol: createPrimitiveTypeChecker("symbol"),
          any: createAnyTypeChecker(),
          arrayOf: createArrayOfTypeChecker,
          element: createElementTypeChecker(),
          elementType: createElementTypeTypeChecker(),
          instanceOf: createInstanceTypeChecker,
          node: createNodeChecker(),
          objectOf: createObjectOfTypeChecker,
          oneOf: createEnumTypeChecker,
          oneOfType: createUnionTypeChecker,
          shape: createShapeTypeChecker,
          exact: createStrictShapeTypeChecker
        };
        function is2(x3, y4) {
          if (x3 === y4) {
            return x3 !== 0 || 1 / x3 === 1 / y4;
          } else {
            return x3 !== x3 && y4 !== y4;
          }
        }
        function PropTypeError(message, data) {
          this.message = message;
          this.data = data && typeof data === "object" ? data : {};
          this.stack = "";
        }
        PropTypeError.prototype = Error.prototype;
        function createChainableTypeChecker(validate) {
          if (true) {
            var manualPropTypeCallCache = {};
            var manualPropTypeWarningCount = 0;
          }
          function checkType(isRequired, props, propName, componentName, location2, propFullName, secret) {
            componentName = componentName || ANONYMOUS;
            propFullName = propFullName || propName;
            if (secret !== ReactPropTypesSecret) {
              if (throwOnDirectAccess) {
                var err = new Error(
                  "Calling PropTypes validators directly is not supported by the `prop-types` package. Use `PropTypes.checkPropTypes()` to call them. Read more at http://fb.me/use-check-prop-types"
                );
                err.name = "Invariant Violation";
                throw err;
              } else if (typeof console !== "undefined") {
                var cacheKey2 = componentName + ":" + propName;
                if (!manualPropTypeCallCache[cacheKey2] && manualPropTypeWarningCount < 3) {
                  printWarning(
                    "You are manually calling a React.PropTypes validation function for the `" + propFullName + "` prop on `" + componentName + "`. This is deprecated and will throw in the standalone `prop-types` package. You may be seeing this warning due to a third-party PropTypes library. See https://fb.me/react-warning-dont-call-proptypes for details."
                  );
                  manualPropTypeCallCache[cacheKey2] = true;
                  manualPropTypeWarningCount++;
                }
              }
            }
            if (props[propName] == null) {
              if (isRequired) {
                if (props[propName] === null) {
                  return new PropTypeError("The " + location2 + " `" + propFullName + "` is marked as required " + ("in `" + componentName + "`, but its value is `null`."));
                }
                return new PropTypeError("The " + location2 + " `" + propFullName + "` is marked as required in " + ("`" + componentName + "`, but its value is `undefined`."));
              }
              return null;
            } else {
              return validate(props, propName, componentName, location2, propFullName);
            }
          }
          var chainedCheckType = checkType.bind(null, false);
          chainedCheckType.isRequired = checkType.bind(null, true);
          return chainedCheckType;
        }
        function createPrimitiveTypeChecker(expectedType) {
          function validate(props, propName, componentName, location2, propFullName, secret) {
            var propValue = props[propName];
            var propType = getPropType(propValue);
            if (propType !== expectedType) {
              var preciseType = getPreciseType(propValue);
              return new PropTypeError(
                "Invalid " + location2 + " `" + propFullName + "` of type " + ("`" + preciseType + "` supplied to `" + componentName + "`, expected ") + ("`" + expectedType + "`."),
                { expectedType }
              );
            }
            return null;
          }
          return createChainableTypeChecker(validate);
        }
        function createAnyTypeChecker() {
          return createChainableTypeChecker(emptyFunctionThatReturnsNull);
        }
        function createArrayOfTypeChecker(typeChecker) {
          function validate(props, propName, componentName, location2, propFullName) {
            if (typeof typeChecker !== "function") {
              return new PropTypeError("Property `" + propFullName + "` of component `" + componentName + "` has invalid PropType notation inside arrayOf.");
            }
            var propValue = props[propName];
            if (!Array.isArray(propValue)) {
              var propType = getPropType(propValue);
              return new PropTypeError("Invalid " + location2 + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected an array."));
            }
            for (var i6 = 0; i6 < propValue.length; i6++) {
              var error = typeChecker(propValue, i6, componentName, location2, propFullName + "[" + i6 + "]", ReactPropTypesSecret);
              if (error instanceof Error) {
                return error;
              }
            }
            return null;
          }
          return createChainableTypeChecker(validate);
        }
        function createElementTypeChecker() {
          function validate(props, propName, componentName, location2, propFullName) {
            var propValue = props[propName];
            if (!isValidElement(propValue)) {
              var propType = getPropType(propValue);
              return new PropTypeError("Invalid " + location2 + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected a single ReactElement."));
            }
            return null;
          }
          return createChainableTypeChecker(validate);
        }
        function createElementTypeTypeChecker() {
          function validate(props, propName, componentName, location2, propFullName) {
            var propValue = props[propName];
            if (!ReactIs.isValidElementType(propValue)) {
              var propType = getPropType(propValue);
              return new PropTypeError("Invalid " + location2 + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected a single ReactElement type."));
            }
            return null;
          }
          return createChainableTypeChecker(validate);
        }
        function createInstanceTypeChecker(expectedClass) {
          function validate(props, propName, componentName, location2, propFullName) {
            if (!(props[propName] instanceof expectedClass)) {
              var expectedClassName = expectedClass.name || ANONYMOUS;
              var actualClassName = getClassName(props[propName]);
              return new PropTypeError("Invalid " + location2 + " `" + propFullName + "` of type " + ("`" + actualClassName + "` supplied to `" + componentName + "`, expected ") + ("instance of `" + expectedClassName + "`."));
            }
            return null;
          }
          return createChainableTypeChecker(validate);
        }
        function createEnumTypeChecker(expectedValues) {
          if (!Array.isArray(expectedValues)) {
            if (true) {
              if (arguments.length > 1) {
                printWarning(
                  "Invalid arguments supplied to oneOf, expected an array, got " + arguments.length + " arguments. A common mistake is to write oneOf(x, y, z) instead of oneOf([x, y, z])."
                );
              } else {
                printWarning("Invalid argument supplied to oneOf, expected an array.");
              }
            }
            return emptyFunctionThatReturnsNull;
          }
          function validate(props, propName, componentName, location2, propFullName) {
            var propValue = props[propName];
            for (var i6 = 0; i6 < expectedValues.length; i6++) {
              if (is2(propValue, expectedValues[i6])) {
                return null;
              }
            }
            var valuesString = JSON.stringify(expectedValues, function replacer(key, value) {
              var type = getPreciseType(value);
              if (type === "symbol") {
                return String(value);
              }
              return value;
            });
            return new PropTypeError("Invalid " + location2 + " `" + propFullName + "` of value `" + String(propValue) + "` " + ("supplied to `" + componentName + "`, expected one of " + valuesString + "."));
          }
          return createChainableTypeChecker(validate);
        }
        function createObjectOfTypeChecker(typeChecker) {
          function validate(props, propName, componentName, location2, propFullName) {
            if (typeof typeChecker !== "function") {
              return new PropTypeError("Property `" + propFullName + "` of component `" + componentName + "` has invalid PropType notation inside objectOf.");
            }
            var propValue = props[propName];
            var propType = getPropType(propValue);
            if (propType !== "object") {
              return new PropTypeError("Invalid " + location2 + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected an object."));
            }
            for (var key in propValue) {
              if (has(propValue, key)) {
                var error = typeChecker(propValue, key, componentName, location2, propFullName + "." + key, ReactPropTypesSecret);
                if (error instanceof Error) {
                  return error;
                }
              }
            }
            return null;
          }
          return createChainableTypeChecker(validate);
        }
        function createUnionTypeChecker(arrayOfTypeCheckers) {
          if (!Array.isArray(arrayOfTypeCheckers)) {
            true ? printWarning("Invalid argument supplied to oneOfType, expected an instance of array.") : void 0;
            return emptyFunctionThatReturnsNull;
          }
          for (var i6 = 0; i6 < arrayOfTypeCheckers.length; i6++) {
            var checker = arrayOfTypeCheckers[i6];
            if (typeof checker !== "function") {
              printWarning(
                "Invalid argument supplied to oneOfType. Expected an array of check functions, but received " + getPostfixForTypeWarning(checker) + " at index " + i6 + "."
              );
              return emptyFunctionThatReturnsNull;
            }
          }
          function validate(props, propName, componentName, location2, propFullName) {
            var expectedTypes = [];
            for (var i7 = 0; i7 < arrayOfTypeCheckers.length; i7++) {
              var checker2 = arrayOfTypeCheckers[i7];
              var checkerResult = checker2(props, propName, componentName, location2, propFullName, ReactPropTypesSecret);
              if (checkerResult == null) {
                return null;
              }
              if (checkerResult.data && has(checkerResult.data, "expectedType")) {
                expectedTypes.push(checkerResult.data.expectedType);
              }
            }
            var expectedTypesMessage = expectedTypes.length > 0 ? ", expected one of type [" + expectedTypes.join(", ") + "]" : "";
            return new PropTypeError("Invalid " + location2 + " `" + propFullName + "` supplied to " + ("`" + componentName + "`" + expectedTypesMessage + "."));
          }
          return createChainableTypeChecker(validate);
        }
        function createNodeChecker() {
          function validate(props, propName, componentName, location2, propFullName) {
            if (!isNode(props[propName])) {
              return new PropTypeError("Invalid " + location2 + " `" + propFullName + "` supplied to " + ("`" + componentName + "`, expected a ReactNode."));
            }
            return null;
          }
          return createChainableTypeChecker(validate);
        }
        function invalidValidatorError(componentName, location2, propFullName, key, type) {
          return new PropTypeError(
            (componentName || "React class") + ": " + location2 + " type `" + propFullName + "." + key + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + type + "`."
          );
        }
        function createShapeTypeChecker(shapeTypes) {
          function validate(props, propName, componentName, location2, propFullName) {
            var propValue = props[propName];
            var propType = getPropType(propValue);
            if (propType !== "object") {
              return new PropTypeError("Invalid " + location2 + " `" + propFullName + "` of type `" + propType + "` " + ("supplied to `" + componentName + "`, expected `object`."));
            }
            for (var key in shapeTypes) {
              var checker = shapeTypes[key];
              if (typeof checker !== "function") {
                return invalidValidatorError(componentName, location2, propFullName, key, getPreciseType(checker));
              }
              var error = checker(propValue, key, componentName, location2, propFullName + "." + key, ReactPropTypesSecret);
              if (error) {
                return error;
              }
            }
            return null;
          }
          return createChainableTypeChecker(validate);
        }
        function createStrictShapeTypeChecker(shapeTypes) {
          function validate(props, propName, componentName, location2, propFullName) {
            var propValue = props[propName];
            var propType = getPropType(propValue);
            if (propType !== "object") {
              return new PropTypeError("Invalid " + location2 + " `" + propFullName + "` of type `" + propType + "` " + ("supplied to `" + componentName + "`, expected `object`."));
            }
            var allKeys = assign2({}, props[propName], shapeTypes);
            for (var key in allKeys) {
              var checker = shapeTypes[key];
              if (has(shapeTypes, key) && typeof checker !== "function") {
                return invalidValidatorError(componentName, location2, propFullName, key, getPreciseType(checker));
              }
              if (!checker) {
                return new PropTypeError(
                  "Invalid " + location2 + " `" + propFullName + "` key `" + key + "` supplied to `" + componentName + "`.\nBad object: " + JSON.stringify(props[propName], null, "  ") + "\nValid keys: " + JSON.stringify(Object.keys(shapeTypes), null, "  ")
                );
              }
              var error = checker(propValue, key, componentName, location2, propFullName + "." + key, ReactPropTypesSecret);
              if (error) {
                return error;
              }
            }
            return null;
          }
          return createChainableTypeChecker(validate);
        }
        function isNode(propValue) {
          switch (typeof propValue) {
            case "number":
            case "string":
            case "undefined":
              return true;
            case "boolean":
              return !propValue;
            case "object":
              if (Array.isArray(propValue)) {
                return propValue.every(isNode);
              }
              if (propValue === null || isValidElement(propValue)) {
                return true;
              }
              var iteratorFn = getIteratorFn(propValue);
              if (iteratorFn) {
                var iterator = iteratorFn.call(propValue);
                var step;
                if (iteratorFn !== propValue.entries) {
                  while (!(step = iterator.next()).done) {
                    if (!isNode(step.value)) {
                      return false;
                    }
                  }
                } else {
                  while (!(step = iterator.next()).done) {
                    var entry = step.value;
                    if (entry) {
                      if (!isNode(entry[1])) {
                        return false;
                      }
                    }
                  }
                }
              } else {
                return false;
              }
              return true;
            default:
              return false;
          }
        }
        function isSymbol(propType, propValue) {
          if (propType === "symbol") {
            return true;
          }
          if (!propValue) {
            return false;
          }
          if (propValue["@@toStringTag"] === "Symbol") {
            return true;
          }
          if (typeof Symbol === "function" && propValue instanceof Symbol) {
            return true;
          }
          return false;
        }
        function getPropType(propValue) {
          var propType = typeof propValue;
          if (Array.isArray(propValue)) {
            return "array";
          }
          if (propValue instanceof RegExp) {
            return "object";
          }
          if (isSymbol(propType, propValue)) {
            return "symbol";
          }
          return propType;
        }
        function getPreciseType(propValue) {
          if (typeof propValue === "undefined" || propValue === null) {
            return "" + propValue;
          }
          var propType = getPropType(propValue);
          if (propType === "object") {
            if (propValue instanceof Date) {
              return "date";
            } else if (propValue instanceof RegExp) {
              return "regexp";
            }
          }
          return propType;
        }
        function getPostfixForTypeWarning(value) {
          var type = getPreciseType(value);
          switch (type) {
            case "array":
            case "object":
              return "an " + type;
            case "boolean":
            case "date":
            case "regexp":
              return "a " + type;
            default:
              return type;
          }
        }
        function getClassName(propValue) {
          if (!propValue.constructor || !propValue.constructor.name) {
            return ANONYMOUS;
          }
          return propValue.constructor.name;
        }
        ReactPropTypes.checkPropTypes = checkPropTypes;
        ReactPropTypes.resetWarningCache = checkPropTypes.resetWarningCache;
        ReactPropTypes.PropTypes = ReactPropTypes;
        return ReactPropTypes;
      };
    }
  });

  // node_modules/prop-types/index.js
  var require_prop_types = __commonJS({
    "node_modules/prop-types/index.js"(exports, module) {
      if (true) {
        ReactIs = require_react_is();
        throwOnDirectAccess = true;
        module.exports = require_factoryWithTypeCheckers()(ReactIs.isElement, throwOnDirectAccess);
      } else {
        module.exports = null();
      }
      var ReactIs;
      var throwOnDirectAccess;
    }
  });

  // external-global-plugin:react-dom
  var require_react_dom = __commonJS({
    "external-global-plugin:react-dom"(exports, module) {
      module.exports = window.ReactDOM;
    }
  });

  // node_modules/react/cjs/react-jsx-runtime.development.js
  var require_react_jsx_runtime_development = __commonJS({
    "node_modules/react/cjs/react-jsx-runtime.development.js"(exports) {
      "use strict";
      if (true) {
        (function() {
          "use strict";
          var React5 = require_react();
          var _assign = require_object_assign();
          var REACT_ELEMENT_TYPE = 60103;
          var REACT_PORTAL_TYPE = 60106;
          exports.Fragment = 60107;
          var REACT_STRICT_MODE_TYPE = 60108;
          var REACT_PROFILER_TYPE = 60114;
          var REACT_PROVIDER_TYPE = 60109;
          var REACT_CONTEXT_TYPE = 60110;
          var REACT_FORWARD_REF_TYPE = 60112;
          var REACT_SUSPENSE_TYPE = 60113;
          var REACT_SUSPENSE_LIST_TYPE = 60120;
          var REACT_MEMO_TYPE = 60115;
          var REACT_LAZY_TYPE = 60116;
          var REACT_BLOCK_TYPE = 60121;
          var REACT_SERVER_BLOCK_TYPE = 60122;
          var REACT_FUNDAMENTAL_TYPE = 60117;
          var REACT_SCOPE_TYPE = 60119;
          var REACT_OPAQUE_ID_TYPE = 60128;
          var REACT_DEBUG_TRACING_MODE_TYPE = 60129;
          var REACT_OFFSCREEN_TYPE = 60130;
          var REACT_LEGACY_HIDDEN_TYPE = 60131;
          if (typeof Symbol === "function" && Symbol.for) {
            var symbolFor = Symbol.for;
            REACT_ELEMENT_TYPE = symbolFor("react.element");
            REACT_PORTAL_TYPE = symbolFor("react.portal");
            exports.Fragment = symbolFor("react.fragment");
            REACT_STRICT_MODE_TYPE = symbolFor("react.strict_mode");
            REACT_PROFILER_TYPE = symbolFor("react.profiler");
            REACT_PROVIDER_TYPE = symbolFor("react.provider");
            REACT_CONTEXT_TYPE = symbolFor("react.context");
            REACT_FORWARD_REF_TYPE = symbolFor("react.forward_ref");
            REACT_SUSPENSE_TYPE = symbolFor("react.suspense");
            REACT_SUSPENSE_LIST_TYPE = symbolFor("react.suspense_list");
            REACT_MEMO_TYPE = symbolFor("react.memo");
            REACT_LAZY_TYPE = symbolFor("react.lazy");
            REACT_BLOCK_TYPE = symbolFor("react.block");
            REACT_SERVER_BLOCK_TYPE = symbolFor("react.server.block");
            REACT_FUNDAMENTAL_TYPE = symbolFor("react.fundamental");
            REACT_SCOPE_TYPE = symbolFor("react.scope");
            REACT_OPAQUE_ID_TYPE = symbolFor("react.opaque.id");
            REACT_DEBUG_TRACING_MODE_TYPE = symbolFor("react.debug_trace_mode");
            REACT_OFFSCREEN_TYPE = symbolFor("react.offscreen");
            REACT_LEGACY_HIDDEN_TYPE = symbolFor("react.legacy_hidden");
          }
          var MAYBE_ITERATOR_SYMBOL = typeof Symbol === "function" && Symbol.iterator;
          var FAUX_ITERATOR_SYMBOL = "@@iterator";
          function getIteratorFn(maybeIterable) {
            if (maybeIterable === null || typeof maybeIterable !== "object") {
              return null;
            }
            var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
            if (typeof maybeIterator === "function") {
              return maybeIterator;
            }
            return null;
          }
          var ReactSharedInternals = React5.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
          function error(format2) {
            {
              for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
                args[_key2 - 1] = arguments[_key2];
              }
              printWarning("error", format2, args);
            }
          }
          function printWarning(level, format2, args) {
            {
              var ReactDebugCurrentFrame2 = ReactSharedInternals.ReactDebugCurrentFrame;
              var stack = ReactDebugCurrentFrame2.getStackAddendum();
              if (stack !== "") {
                format2 += "%s";
                args = args.concat([stack]);
              }
              var argsWithFormat = args.map(function(item) {
                return "" + item;
              });
              argsWithFormat.unshift("Warning: " + format2);
              Function.prototype.apply.call(console[level], console, argsWithFormat);
            }
          }
          var enableScopeAPI = false;
          function isValidElementType(type) {
            if (typeof type === "string" || typeof type === "function") {
              return true;
            }
            if (type === exports.Fragment || type === REACT_PROFILER_TYPE || type === REACT_DEBUG_TRACING_MODE_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || type === REACT_LEGACY_HIDDEN_TYPE || enableScopeAPI) {
              return true;
            }
            if (typeof type === "object" && type !== null) {
              if (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_FUNDAMENTAL_TYPE || type.$$typeof === REACT_BLOCK_TYPE || type[0] === REACT_SERVER_BLOCK_TYPE) {
                return true;
              }
            }
            return false;
          }
          function getWrappedName(outerType, innerType, wrapperName) {
            var functionName = innerType.displayName || innerType.name || "";
            return outerType.displayName || (functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName);
          }
          function getContextName(type) {
            return type.displayName || "Context";
          }
          function getComponentName(type) {
            if (type == null) {
              return null;
            }
            {
              if (typeof type.tag === "number") {
                error("Received an unexpected object in getComponentName(). This is likely a bug in React. Please file an issue.");
              }
            }
            if (typeof type === "function") {
              return type.displayName || type.name || null;
            }
            if (typeof type === "string") {
              return type;
            }
            switch (type) {
              case exports.Fragment:
                return "Fragment";
              case REACT_PORTAL_TYPE:
                return "Portal";
              case REACT_PROFILER_TYPE:
                return "Profiler";
              case REACT_STRICT_MODE_TYPE:
                return "StrictMode";
              case REACT_SUSPENSE_TYPE:
                return "Suspense";
              case REACT_SUSPENSE_LIST_TYPE:
                return "SuspenseList";
            }
            if (typeof type === "object") {
              switch (type.$$typeof) {
                case REACT_CONTEXT_TYPE:
                  var context = type;
                  return getContextName(context) + ".Consumer";
                case REACT_PROVIDER_TYPE:
                  var provider = type;
                  return getContextName(provider._context) + ".Provider";
                case REACT_FORWARD_REF_TYPE:
                  return getWrappedName(type, type.render, "ForwardRef");
                case REACT_MEMO_TYPE:
                  return getComponentName(type.type);
                case REACT_BLOCK_TYPE:
                  return getComponentName(type._render);
                case REACT_LAZY_TYPE: {
                  var lazyComponent = type;
                  var payload = lazyComponent._payload;
                  var init = lazyComponent._init;
                  try {
                    return getComponentName(init(payload));
                  } catch (x3) {
                    return null;
                  }
                }
              }
            }
            return null;
          }
          var disabledDepth = 0;
          var prevLog;
          var prevInfo;
          var prevWarn;
          var prevError;
          var prevGroup;
          var prevGroupCollapsed;
          var prevGroupEnd;
          function disabledLog() {
          }
          disabledLog.__reactDisabledLog = true;
          function disableLogs() {
            {
              if (disabledDepth === 0) {
                prevLog = console.log;
                prevInfo = console.info;
                prevWarn = console.warn;
                prevError = console.error;
                prevGroup = console.group;
                prevGroupCollapsed = console.groupCollapsed;
                prevGroupEnd = console.groupEnd;
                var props = {
                  configurable: true,
                  enumerable: true,
                  value: disabledLog,
                  writable: true
                };
                Object.defineProperties(console, {
                  info: props,
                  log: props,
                  warn: props,
                  error: props,
                  group: props,
                  groupCollapsed: props,
                  groupEnd: props
                });
              }
              disabledDepth++;
            }
          }
          function reenableLogs() {
            {
              disabledDepth--;
              if (disabledDepth === 0) {
                var props = {
                  configurable: true,
                  enumerable: true,
                  writable: true
                };
                Object.defineProperties(console, {
                  log: _assign({}, props, {
                    value: prevLog
                  }),
                  info: _assign({}, props, {
                    value: prevInfo
                  }),
                  warn: _assign({}, props, {
                    value: prevWarn
                  }),
                  error: _assign({}, props, {
                    value: prevError
                  }),
                  group: _assign({}, props, {
                    value: prevGroup
                  }),
                  groupCollapsed: _assign({}, props, {
                    value: prevGroupCollapsed
                  }),
                  groupEnd: _assign({}, props, {
                    value: prevGroupEnd
                  })
                });
              }
              if (disabledDepth < 0) {
                error("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
              }
            }
          }
          var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;
          var prefix2;
          function describeBuiltInComponentFrame(name, source, ownerFn) {
            {
              if (prefix2 === void 0) {
                try {
                  throw Error();
                } catch (x3) {
                  var match = x3.stack.trim().match(/\n( *(at )?)/);
                  prefix2 = match && match[1] || "";
                }
              }
              return "\n" + prefix2 + name;
            }
          }
          var reentry = false;
          var componentFrameCache;
          {
            var PossiblyWeakMap = typeof WeakMap === "function" ? WeakMap : Map;
            componentFrameCache = new PossiblyWeakMap();
          }
          function describeNativeComponentFrame(fn2, construct) {
            if (!fn2 || reentry) {
              return "";
            }
            {
              var frame = componentFrameCache.get(fn2);
              if (frame !== void 0) {
                return frame;
              }
            }
            var control;
            reentry = true;
            var previousPrepareStackTrace = Error.prepareStackTrace;
            Error.prepareStackTrace = void 0;
            var previousDispatcher;
            {
              previousDispatcher = ReactCurrentDispatcher.current;
              ReactCurrentDispatcher.current = null;
              disableLogs();
            }
            try {
              if (construct) {
                var Fake = function() {
                  throw Error();
                };
                Object.defineProperty(Fake.prototype, "props", {
                  set: function() {
                    throw Error();
                  }
                });
                if (typeof Reflect === "object" && Reflect.construct) {
                  try {
                    Reflect.construct(Fake, []);
                  } catch (x3) {
                    control = x3;
                  }
                  Reflect.construct(fn2, [], Fake);
                } else {
                  try {
                    Fake.call();
                  } catch (x3) {
                    control = x3;
                  }
                  fn2.call(Fake.prototype);
                }
              } else {
                try {
                  throw Error();
                } catch (x3) {
                  control = x3;
                }
                fn2();
              }
            } catch (sample2) {
              if (sample2 && control && typeof sample2.stack === "string") {
                var sampleLines = sample2.stack.split("\n");
                var controlLines = control.stack.split("\n");
                var s3 = sampleLines.length - 1;
                var c8 = controlLines.length - 1;
                while (s3 >= 1 && c8 >= 0 && sampleLines[s3] !== controlLines[c8]) {
                  c8--;
                }
                for (; s3 >= 1 && c8 >= 0; s3--, c8--) {
                  if (sampleLines[s3] !== controlLines[c8]) {
                    if (s3 !== 1 || c8 !== 1) {
                      do {
                        s3--;
                        c8--;
                        if (c8 < 0 || sampleLines[s3] !== controlLines[c8]) {
                          var _frame = "\n" + sampleLines[s3].replace(" at new ", " at ");
                          {
                            if (typeof fn2 === "function") {
                              componentFrameCache.set(fn2, _frame);
                            }
                          }
                          return _frame;
                        }
                      } while (s3 >= 1 && c8 >= 0);
                    }
                    break;
                  }
                }
              }
            } finally {
              reentry = false;
              {
                ReactCurrentDispatcher.current = previousDispatcher;
                reenableLogs();
              }
              Error.prepareStackTrace = previousPrepareStackTrace;
            }
            var name = fn2 ? fn2.displayName || fn2.name : "";
            var syntheticFrame = name ? describeBuiltInComponentFrame(name) : "";
            {
              if (typeof fn2 === "function") {
                componentFrameCache.set(fn2, syntheticFrame);
              }
            }
            return syntheticFrame;
          }
          function describeFunctionComponentFrame(fn2, source, ownerFn) {
            {
              return describeNativeComponentFrame(fn2, false);
            }
          }
          function shouldConstruct(Component) {
            var prototype = Component.prototype;
            return !!(prototype && prototype.isReactComponent);
          }
          function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {
            if (type == null) {
              return "";
            }
            if (typeof type === "function") {
              {
                return describeNativeComponentFrame(type, shouldConstruct(type));
              }
            }
            if (typeof type === "string") {
              return describeBuiltInComponentFrame(type);
            }
            switch (type) {
              case REACT_SUSPENSE_TYPE:
                return describeBuiltInComponentFrame("Suspense");
              case REACT_SUSPENSE_LIST_TYPE:
                return describeBuiltInComponentFrame("SuspenseList");
            }
            if (typeof type === "object") {
              switch (type.$$typeof) {
                case REACT_FORWARD_REF_TYPE:
                  return describeFunctionComponentFrame(type.render);
                case REACT_MEMO_TYPE:
                  return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);
                case REACT_BLOCK_TYPE:
                  return describeFunctionComponentFrame(type._render);
                case REACT_LAZY_TYPE: {
                  var lazyComponent = type;
                  var payload = lazyComponent._payload;
                  var init = lazyComponent._init;
                  try {
                    return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);
                  } catch (x3) {
                  }
                }
              }
            }
            return "";
          }
          var loggedTypeFailures = {};
          var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
          function setCurrentlyValidatingElement(element) {
            {
              if (element) {
                var owner = element._owner;
                var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
                ReactDebugCurrentFrame.setExtraStackFrame(stack);
              } else {
                ReactDebugCurrentFrame.setExtraStackFrame(null);
              }
            }
          }
          function checkPropTypes(typeSpecs, values, location2, componentName, element) {
            {
              var has = Function.call.bind(Object.prototype.hasOwnProperty);
              for (var typeSpecName in typeSpecs) {
                if (has(typeSpecs, typeSpecName)) {
                  var error$1 = void 0;
                  try {
                    if (typeof typeSpecs[typeSpecName] !== "function") {
                      var err = Error((componentName || "React class") + ": " + location2 + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");
                      err.name = "Invariant Violation";
                      throw err;
                    }
                    error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location2, null, "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED");
                  } catch (ex) {
                    error$1 = ex;
                  }
                  if (error$1 && !(error$1 instanceof Error)) {
                    setCurrentlyValidatingElement(element);
                    error("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).", componentName || "React class", location2, typeSpecName, typeof error$1);
                    setCurrentlyValidatingElement(null);
                  }
                  if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {
                    loggedTypeFailures[error$1.message] = true;
                    setCurrentlyValidatingElement(element);
                    error("Failed %s type: %s", location2, error$1.message);
                    setCurrentlyValidatingElement(null);
                  }
                }
              }
            }
          }
          var ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;
          var hasOwnProperty = Object.prototype.hasOwnProperty;
          var RESERVED_PROPS2 = {
            key: true,
            ref: true,
            __self: true,
            __source: true
          };
          var specialPropKeyWarningShown;
          var specialPropRefWarningShown;
          var didWarnAboutStringRefs;
          {
            didWarnAboutStringRefs = {};
          }
          function hasValidRef(config2) {
            {
              if (hasOwnProperty.call(config2, "ref")) {
                var getter = Object.getOwnPropertyDescriptor(config2, "ref").get;
                if (getter && getter.isReactWarning) {
                  return false;
                }
              }
            }
            return config2.ref !== void 0;
          }
          function hasValidKey(config2) {
            {
              if (hasOwnProperty.call(config2, "key")) {
                var getter = Object.getOwnPropertyDescriptor(config2, "key").get;
                if (getter && getter.isReactWarning) {
                  return false;
                }
              }
            }
            return config2.key !== void 0;
          }
          function warnIfStringRefCannotBeAutoConverted(config2, self2) {
            {
              if (typeof config2.ref === "string" && ReactCurrentOwner.current && self2 && ReactCurrentOwner.current.stateNode !== self2) {
                var componentName = getComponentName(ReactCurrentOwner.current.type);
                if (!didWarnAboutStringRefs[componentName]) {
                  error('Component "%s" contains the string ref "%s". Support for string refs will be removed in a future major release. This case cannot be automatically converted to an arrow function. We ask you to manually fix this case by using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref', getComponentName(ReactCurrentOwner.current.type), config2.ref);
                  didWarnAboutStringRefs[componentName] = true;
                }
              }
            }
          }
          function defineKeyPropWarningGetter(props, displayName) {
            {
              var warnAboutAccessingKey = function() {
                if (!specialPropKeyWarningShown) {
                  specialPropKeyWarningShown = true;
                  error("%s: `key` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
                }
              };
              warnAboutAccessingKey.isReactWarning = true;
              Object.defineProperty(props, "key", {
                get: warnAboutAccessingKey,
                configurable: true
              });
            }
          }
          function defineRefPropWarningGetter(props, displayName) {
            {
              var warnAboutAccessingRef = function() {
                if (!specialPropRefWarningShown) {
                  specialPropRefWarningShown = true;
                  error("%s: `ref` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
                }
              };
              warnAboutAccessingRef.isReactWarning = true;
              Object.defineProperty(props, "ref", {
                get: warnAboutAccessingRef,
                configurable: true
              });
            }
          }
          var ReactElement = function(type, key, ref, self2, source, owner, props) {
            var element = {
              $$typeof: REACT_ELEMENT_TYPE,
              type,
              key,
              ref,
              props,
              _owner: owner
            };
            {
              element._store = {};
              Object.defineProperty(element._store, "validated", {
                configurable: false,
                enumerable: false,
                writable: true,
                value: false
              });
              Object.defineProperty(element, "_self", {
                configurable: false,
                enumerable: false,
                writable: false,
                value: self2
              });
              Object.defineProperty(element, "_source", {
                configurable: false,
                enumerable: false,
                writable: false,
                value: source
              });
              if (Object.freeze) {
                Object.freeze(element.props);
                Object.freeze(element);
              }
            }
            return element;
          };
          function jsxDEV(type, config2, maybeKey, source, self2) {
            {
              var propName;
              var props = {};
              var key = null;
              var ref = null;
              if (maybeKey !== void 0) {
                key = "" + maybeKey;
              }
              if (hasValidKey(config2)) {
                key = "" + config2.key;
              }
              if (hasValidRef(config2)) {
                ref = config2.ref;
                warnIfStringRefCannotBeAutoConverted(config2, self2);
              }
              for (propName in config2) {
                if (hasOwnProperty.call(config2, propName) && !RESERVED_PROPS2.hasOwnProperty(propName)) {
                  props[propName] = config2[propName];
                }
              }
              if (type && type.defaultProps) {
                var defaultProps = type.defaultProps;
                for (propName in defaultProps) {
                  if (props[propName] === void 0) {
                    props[propName] = defaultProps[propName];
                  }
                }
              }
              if (key || ref) {
                var displayName = typeof type === "function" ? type.displayName || type.name || "Unknown" : type;
                if (key) {
                  defineKeyPropWarningGetter(props, displayName);
                }
                if (ref) {
                  defineRefPropWarningGetter(props, displayName);
                }
              }
              return ReactElement(type, key, ref, self2, source, ReactCurrentOwner.current, props);
            }
          }
          var ReactCurrentOwner$1 = ReactSharedInternals.ReactCurrentOwner;
          var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
          function setCurrentlyValidatingElement$1(element) {
            {
              if (element) {
                var owner = element._owner;
                var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
                ReactDebugCurrentFrame$1.setExtraStackFrame(stack);
              } else {
                ReactDebugCurrentFrame$1.setExtraStackFrame(null);
              }
            }
          }
          var propTypesMisspellWarningShown;
          {
            propTypesMisspellWarningShown = false;
          }
          function isValidElement(object) {
            {
              return typeof object === "object" && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
            }
          }
          function getDeclarationErrorAddendum() {
            {
              if (ReactCurrentOwner$1.current) {
                var name = getComponentName(ReactCurrentOwner$1.current.type);
                if (name) {
                  return "\n\nCheck the render method of `" + name + "`.";
                }
              }
              return "";
            }
          }
          function getSourceInfoErrorAddendum(source) {
            {
              if (source !== void 0) {
                var fileName = source.fileName.replace(/^.*[\\\/]/, "");
                var lineNumber = source.lineNumber;
                return "\n\nCheck your code at " + fileName + ":" + lineNumber + ".";
              }
              return "";
            }
          }
          var ownerHasKeyUseWarning = {};
          function getCurrentComponentErrorInfo(parentType) {
            {
              var info = getDeclarationErrorAddendum();
              if (!info) {
                var parentName = typeof parentType === "string" ? parentType : parentType.displayName || parentType.name;
                if (parentName) {
                  info = "\n\nCheck the top-level render call using <" + parentName + ">.";
                }
              }
              return info;
            }
          }
          function validateExplicitKey(element, parentType) {
            {
              if (!element._store || element._store.validated || element.key != null) {
                return;
              }
              element._store.validated = true;
              var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);
              if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {
                return;
              }
              ownerHasKeyUseWarning[currentComponentErrorInfo] = true;
              var childOwner = "";
              if (element && element._owner && element._owner !== ReactCurrentOwner$1.current) {
                childOwner = " It was passed a child from " + getComponentName(element._owner.type) + ".";
              }
              setCurrentlyValidatingElement$1(element);
              error('Each child in a list should have a unique "key" prop.%s%s See https://reactjs.org/link/warning-keys for more information.', currentComponentErrorInfo, childOwner);
              setCurrentlyValidatingElement$1(null);
            }
          }
          function validateChildKeys(node, parentType) {
            {
              if (typeof node !== "object") {
                return;
              }
              if (Array.isArray(node)) {
                for (var i6 = 0; i6 < node.length; i6++) {
                  var child = node[i6];
                  if (isValidElement(child)) {
                    validateExplicitKey(child, parentType);
                  }
                }
              } else if (isValidElement(node)) {
                if (node._store) {
                  node._store.validated = true;
                }
              } else if (node) {
                var iteratorFn = getIteratorFn(node);
                if (typeof iteratorFn === "function") {
                  if (iteratorFn !== node.entries) {
                    var iterator = iteratorFn.call(node);
                    var step;
                    while (!(step = iterator.next()).done) {
                      if (isValidElement(step.value)) {
                        validateExplicitKey(step.value, parentType);
                      }
                    }
                  }
                }
              }
            }
          }
          function validatePropTypes(element) {
            {
              var type = element.type;
              if (type === null || type === void 0 || typeof type === "string") {
                return;
              }
              var propTypes;
              if (typeof type === "function") {
                propTypes = type.propTypes;
              } else if (typeof type === "object" && (type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_MEMO_TYPE)) {
                propTypes = type.propTypes;
              } else {
                return;
              }
              if (propTypes) {
                var name = getComponentName(type);
                checkPropTypes(propTypes, element.props, "prop", name, element);
              } else if (type.PropTypes !== void 0 && !propTypesMisspellWarningShown) {
                propTypesMisspellWarningShown = true;
                var _name = getComponentName(type);
                error("Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?", _name || "Unknown");
              }
              if (typeof type.getDefaultProps === "function" && !type.getDefaultProps.isReactClassApproved) {
                error("getDefaultProps is only used on classic React.createClass definitions. Use a static property named `defaultProps` instead.");
              }
            }
          }
          function validateFragmentProps(fragment) {
            {
              var keys = Object.keys(fragment.props);
              for (var i6 = 0; i6 < keys.length; i6++) {
                var key = keys[i6];
                if (key !== "children" && key !== "key") {
                  setCurrentlyValidatingElement$1(fragment);
                  error("Invalid prop `%s` supplied to `React.Fragment`. React.Fragment can only have `key` and `children` props.", key);
                  setCurrentlyValidatingElement$1(null);
                  break;
                }
              }
              if (fragment.ref !== null) {
                setCurrentlyValidatingElement$1(fragment);
                error("Invalid attribute `ref` supplied to `React.Fragment`.");
                setCurrentlyValidatingElement$1(null);
              }
            }
          }
          function jsxWithValidation(type, props, key, isStaticChildren, source, self2) {
            {
              var validType = isValidElementType(type);
              if (!validType) {
                var info = "";
                if (type === void 0 || typeof type === "object" && type !== null && Object.keys(type).length === 0) {
                  info += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.";
                }
                var sourceInfo = getSourceInfoErrorAddendum(source);
                if (sourceInfo) {
                  info += sourceInfo;
                } else {
                  info += getDeclarationErrorAddendum();
                }
                var typeString;
                if (type === null) {
                  typeString = "null";
                } else if (Array.isArray(type)) {
                  typeString = "array";
                } else if (type !== void 0 && type.$$typeof === REACT_ELEMENT_TYPE) {
                  typeString = "<" + (getComponentName(type.type) || "Unknown") + " />";
                  info = " Did you accidentally export a JSX literal instead of a component?";
                } else {
                  typeString = typeof type;
                }
                error("React.jsx: type is invalid -- expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s", typeString, info);
              }
              var element = jsxDEV(type, props, key, source, self2);
              if (element == null) {
                return element;
              }
              if (validType) {
                var children = props.children;
                if (children !== void 0) {
                  if (isStaticChildren) {
                    if (Array.isArray(children)) {
                      for (var i6 = 0; i6 < children.length; i6++) {
                        validateChildKeys(children[i6], type);
                      }
                      if (Object.freeze) {
                        Object.freeze(children);
                      }
                    } else {
                      error("React.jsx: Static children should always be an array. You are likely explicitly calling React.jsxs or React.jsxDEV. Use the Babel transform instead.");
                    }
                  } else {
                    validateChildKeys(children, type);
                  }
                }
              }
              if (type === exports.Fragment) {
                validateFragmentProps(element);
              } else {
                validatePropTypes(element);
              }
              return element;
            }
          }
          function jsxWithValidationStatic(type, props, key) {
            {
              return jsxWithValidation(type, props, key, true);
            }
          }
          function jsxWithValidationDynamic(type, props, key) {
            {
              return jsxWithValidation(type, props, key, false);
            }
          }
          var jsx = jsxWithValidationDynamic;
          var jsxs = jsxWithValidationStatic;
          exports.jsx = jsx;
          exports.jsxs = jsxs;
        })();
      }
    }
  });

  // node_modules/react/jsx-runtime.js
  var require_jsx_runtime = __commonJS({
    "node_modules/react/jsx-runtime.js"(exports, module) {
      "use strict";
      if (false) {
        module.exports = null;
      } else {
        module.exports = require_react_jsx_runtime_development();
      }
    }
  });

  // node_modules/lodash/_listCacheClear.js
  var require_listCacheClear = __commonJS({
    "node_modules/lodash/_listCacheClear.js"(exports, module) {
      function listCacheClear() {
        this.__data__ = [];
        this.size = 0;
      }
      module.exports = listCacheClear;
    }
  });

  // node_modules/lodash/eq.js
  var require_eq = __commonJS({
    "node_modules/lodash/eq.js"(exports, module) {
      function eq2(value, other) {
        return value === other || value !== value && other !== other;
      }
      module.exports = eq2;
    }
  });

  // node_modules/lodash/_assocIndexOf.js
  var require_assocIndexOf = __commonJS({
    "node_modules/lodash/_assocIndexOf.js"(exports, module) {
      var eq2 = require_eq();
      function assocIndexOf(array, key) {
        var length = array.length;
        while (length--) {
          if (eq2(array[length][0], key)) {
            return length;
          }
        }
        return -1;
      }
      module.exports = assocIndexOf;
    }
  });

  // node_modules/lodash/_listCacheDelete.js
  var require_listCacheDelete = __commonJS({
    "node_modules/lodash/_listCacheDelete.js"(exports, module) {
      var assocIndexOf = require_assocIndexOf();
      var arrayProto = Array.prototype;
      var splice = arrayProto.splice;
      function listCacheDelete(key) {
        var data = this.__data__, index = assocIndexOf(data, key);
        if (index < 0) {
          return false;
        }
        var lastIndex = data.length - 1;
        if (index == lastIndex) {
          data.pop();
        } else {
          splice.call(data, index, 1);
        }
        --this.size;
        return true;
      }
      module.exports = listCacheDelete;
    }
  });

  // node_modules/lodash/_listCacheGet.js
  var require_listCacheGet = __commonJS({
    "node_modules/lodash/_listCacheGet.js"(exports, module) {
      var assocIndexOf = require_assocIndexOf();
      function listCacheGet(key) {
        var data = this.__data__, index = assocIndexOf(data, key);
        return index < 0 ? void 0 : data[index][1];
      }
      module.exports = listCacheGet;
    }
  });

  // node_modules/lodash/_listCacheHas.js
  var require_listCacheHas = __commonJS({
    "node_modules/lodash/_listCacheHas.js"(exports, module) {
      var assocIndexOf = require_assocIndexOf();
      function listCacheHas(key) {
        return assocIndexOf(this.__data__, key) > -1;
      }
      module.exports = listCacheHas;
    }
  });

  // node_modules/lodash/_listCacheSet.js
  var require_listCacheSet = __commonJS({
    "node_modules/lodash/_listCacheSet.js"(exports, module) {
      var assocIndexOf = require_assocIndexOf();
      function listCacheSet(key, value) {
        var data = this.__data__, index = assocIndexOf(data, key);
        if (index < 0) {
          ++this.size;
          data.push([key, value]);
        } else {
          data[index][1] = value;
        }
        return this;
      }
      module.exports = listCacheSet;
    }
  });

  // node_modules/lodash/_ListCache.js
  var require_ListCache = __commonJS({
    "node_modules/lodash/_ListCache.js"(exports, module) {
      var listCacheClear = require_listCacheClear();
      var listCacheDelete = require_listCacheDelete();
      var listCacheGet = require_listCacheGet();
      var listCacheHas = require_listCacheHas();
      var listCacheSet = require_listCacheSet();
      function ListCache(entries) {
        var index = -1, length = entries == null ? 0 : entries.length;
        this.clear();
        while (++index < length) {
          var entry = entries[index];
          this.set(entry[0], entry[1]);
        }
      }
      ListCache.prototype.clear = listCacheClear;
      ListCache.prototype["delete"] = listCacheDelete;
      ListCache.prototype.get = listCacheGet;
      ListCache.prototype.has = listCacheHas;
      ListCache.prototype.set = listCacheSet;
      module.exports = ListCache;
    }
  });

  // node_modules/lodash/_stackClear.js
  var require_stackClear = __commonJS({
    "node_modules/lodash/_stackClear.js"(exports, module) {
      var ListCache = require_ListCache();
      function stackClear() {
        this.__data__ = new ListCache();
        this.size = 0;
      }
      module.exports = stackClear;
    }
  });

  // node_modules/lodash/_stackDelete.js
  var require_stackDelete = __commonJS({
    "node_modules/lodash/_stackDelete.js"(exports, module) {
      function stackDelete(key) {
        var data = this.__data__, result = data["delete"](key);
        this.size = data.size;
        return result;
      }
      module.exports = stackDelete;
    }
  });

  // node_modules/lodash/_stackGet.js
  var require_stackGet = __commonJS({
    "node_modules/lodash/_stackGet.js"(exports, module) {
      function stackGet(key) {
        return this.__data__.get(key);
      }
      module.exports = stackGet;
    }
  });

  // node_modules/lodash/_stackHas.js
  var require_stackHas = __commonJS({
    "node_modules/lodash/_stackHas.js"(exports, module) {
      function stackHas(key) {
        return this.__data__.has(key);
      }
      module.exports = stackHas;
    }
  });

  // node_modules/lodash/_freeGlobal.js
  var require_freeGlobal = __commonJS({
    "node_modules/lodash/_freeGlobal.js"(exports, module) {
      var freeGlobal = typeof global == "object" && global && global.Object === Object && global;
      module.exports = freeGlobal;
    }
  });

  // node_modules/lodash/_root.js
  var require_root = __commonJS({
    "node_modules/lodash/_root.js"(exports, module) {
      var freeGlobal = require_freeGlobal();
      var freeSelf = typeof self == "object" && self && self.Object === Object && self;
      var root = freeGlobal || freeSelf || Function("return this")();
      module.exports = root;
    }
  });

  // node_modules/lodash/_Symbol.js
  var require_Symbol = __commonJS({
    "node_modules/lodash/_Symbol.js"(exports, module) {
      var root = require_root();
      var Symbol2 = root.Symbol;
      module.exports = Symbol2;
    }
  });

  // node_modules/lodash/_getRawTag.js
  var require_getRawTag = __commonJS({
    "node_modules/lodash/_getRawTag.js"(exports, module) {
      var Symbol2 = require_Symbol();
      var objectProto = Object.prototype;
      var hasOwnProperty = objectProto.hasOwnProperty;
      var nativeObjectToString = objectProto.toString;
      var symToStringTag = Symbol2 ? Symbol2.toStringTag : void 0;
      function getRawTag(value) {
        var isOwn = hasOwnProperty.call(value, symToStringTag), tag = value[symToStringTag];
        try {
          value[symToStringTag] = void 0;
          var unmasked = true;
        } catch (e7) {
        }
        var result = nativeObjectToString.call(value);
        if (unmasked) {
          if (isOwn) {
            value[symToStringTag] = tag;
          } else {
            delete value[symToStringTag];
          }
        }
        return result;
      }
      module.exports = getRawTag;
    }
  });

  // node_modules/lodash/_objectToString.js
  var require_objectToString = __commonJS({
    "node_modules/lodash/_objectToString.js"(exports, module) {
      var objectProto = Object.prototype;
      var nativeObjectToString = objectProto.toString;
      function objectToString(value) {
        return nativeObjectToString.call(value);
      }
      module.exports = objectToString;
    }
  });

  // node_modules/lodash/_baseGetTag.js
  var require_baseGetTag = __commonJS({
    "node_modules/lodash/_baseGetTag.js"(exports, module) {
      var Symbol2 = require_Symbol();
      var getRawTag = require_getRawTag();
      var objectToString = require_objectToString();
      var nullTag = "[object Null]";
      var undefinedTag = "[object Undefined]";
      var symToStringTag = Symbol2 ? Symbol2.toStringTag : void 0;
      function baseGetTag(value) {
        if (value == null) {
          return value === void 0 ? undefinedTag : nullTag;
        }
        return symToStringTag && symToStringTag in Object(value) ? getRawTag(value) : objectToString(value);
      }
      module.exports = baseGetTag;
    }
  });

  // node_modules/lodash/isObject.js
  var require_isObject = __commonJS({
    "node_modules/lodash/isObject.js"(exports, module) {
      function isObject2(value) {
        var type = typeof value;
        return value != null && (type == "object" || type == "function");
      }
      module.exports = isObject2;
    }
  });

  // node_modules/lodash/isFunction.js
  var require_isFunction = __commonJS({
    "node_modules/lodash/isFunction.js"(exports, module) {
      var baseGetTag = require_baseGetTag();
      var isObject2 = require_isObject();
      var asyncTag = "[object AsyncFunction]";
      var funcTag = "[object Function]";
      var genTag = "[object GeneratorFunction]";
      var proxyTag = "[object Proxy]";
      function isFunction2(value) {
        if (!isObject2(value)) {
          return false;
        }
        var tag = baseGetTag(value);
        return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
      }
      module.exports = isFunction2;
    }
  });

  // node_modules/lodash/_coreJsData.js
  var require_coreJsData = __commonJS({
    "node_modules/lodash/_coreJsData.js"(exports, module) {
      var root = require_root();
      var coreJsData = root["__core-js_shared__"];
      module.exports = coreJsData;
    }
  });

  // node_modules/lodash/_isMasked.js
  var require_isMasked = __commonJS({
    "node_modules/lodash/_isMasked.js"(exports, module) {
      var coreJsData = require_coreJsData();
      var maskSrcKey = function() {
        var uid2 = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || "");
        return uid2 ? "Symbol(src)_1." + uid2 : "";
      }();
      function isMasked(func) {
        return !!maskSrcKey && maskSrcKey in func;
      }
      module.exports = isMasked;
    }
  });

  // node_modules/lodash/_toSource.js
  var require_toSource = __commonJS({
    "node_modules/lodash/_toSource.js"(exports, module) {
      var funcProto = Function.prototype;
      var funcToString = funcProto.toString;
      function toSource(func) {
        if (func != null) {
          try {
            return funcToString.call(func);
          } catch (e7) {
          }
          try {
            return func + "";
          } catch (e7) {
          }
        }
        return "";
      }
      module.exports = toSource;
    }
  });

  // node_modules/lodash/_baseIsNative.js
  var require_baseIsNative = __commonJS({
    "node_modules/lodash/_baseIsNative.js"(exports, module) {
      var isFunction2 = require_isFunction();
      var isMasked = require_isMasked();
      var isObject2 = require_isObject();
      var toSource = require_toSource();
      var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;
      var reIsHostCtor = /^\[object .+?Constructor\]$/;
      var funcProto = Function.prototype;
      var objectProto = Object.prototype;
      var funcToString = funcProto.toString;
      var hasOwnProperty = objectProto.hasOwnProperty;
      var reIsNative = RegExp(
        "^" + funcToString.call(hasOwnProperty).replace(reRegExpChar, "\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, "$1.*?") + "$"
      );
      function baseIsNative(value) {
        if (!isObject2(value) || isMasked(value)) {
          return false;
        }
        var pattern = isFunction2(value) ? reIsNative : reIsHostCtor;
        return pattern.test(toSource(value));
      }
      module.exports = baseIsNative;
    }
  });

  // node_modules/lodash/_getValue.js
  var require_getValue = __commonJS({
    "node_modules/lodash/_getValue.js"(exports, module) {
      function getValue(object, key) {
        return object == null ? void 0 : object[key];
      }
      module.exports = getValue;
    }
  });

  // node_modules/lodash/_getNative.js
  var require_getNative = __commonJS({
    "node_modules/lodash/_getNative.js"(exports, module) {
      var baseIsNative = require_baseIsNative();
      var getValue = require_getValue();
      function getNative(object, key) {
        var value = getValue(object, key);
        return baseIsNative(value) ? value : void 0;
      }
      module.exports = getNative;
    }
  });

  // node_modules/lodash/_Map.js
  var require_Map = __commonJS({
    "node_modules/lodash/_Map.js"(exports, module) {
      var getNative = require_getNative();
      var root = require_root();
      var Map2 = getNative(root, "Map");
      module.exports = Map2;
    }
  });

  // node_modules/lodash/_nativeCreate.js
  var require_nativeCreate = __commonJS({
    "node_modules/lodash/_nativeCreate.js"(exports, module) {
      var getNative = require_getNative();
      var nativeCreate = getNative(Object, "create");
      module.exports = nativeCreate;
    }
  });

  // node_modules/lodash/_hashClear.js
  var require_hashClear = __commonJS({
    "node_modules/lodash/_hashClear.js"(exports, module) {
      var nativeCreate = require_nativeCreate();
      function hashClear() {
        this.__data__ = nativeCreate ? nativeCreate(null) : {};
        this.size = 0;
      }
      module.exports = hashClear;
    }
  });

  // node_modules/lodash/_hashDelete.js
  var require_hashDelete = __commonJS({
    "node_modules/lodash/_hashDelete.js"(exports, module) {
      function hashDelete(key) {
        var result = this.has(key) && delete this.__data__[key];
        this.size -= result ? 1 : 0;
        return result;
      }
      module.exports = hashDelete;
    }
  });

  // node_modules/lodash/_hashGet.js
  var require_hashGet = __commonJS({
    "node_modules/lodash/_hashGet.js"(exports, module) {
      var nativeCreate = require_nativeCreate();
      var HASH_UNDEFINED = "__lodash_hash_undefined__";
      var objectProto = Object.prototype;
      var hasOwnProperty = objectProto.hasOwnProperty;
      function hashGet(key) {
        var data = this.__data__;
        if (nativeCreate) {
          var result = data[key];
          return result === HASH_UNDEFINED ? void 0 : result;
        }
        return hasOwnProperty.call(data, key) ? data[key] : void 0;
      }
      module.exports = hashGet;
    }
  });

  // node_modules/lodash/_hashHas.js
  var require_hashHas = __commonJS({
    "node_modules/lodash/_hashHas.js"(exports, module) {
      var nativeCreate = require_nativeCreate();
      var objectProto = Object.prototype;
      var hasOwnProperty = objectProto.hasOwnProperty;
      function hashHas(key) {
        var data = this.__data__;
        return nativeCreate ? data[key] !== void 0 : hasOwnProperty.call(data, key);
      }
      module.exports = hashHas;
    }
  });

  // node_modules/lodash/_hashSet.js
  var require_hashSet = __commonJS({
    "node_modules/lodash/_hashSet.js"(exports, module) {
      var nativeCreate = require_nativeCreate();
      var HASH_UNDEFINED = "__lodash_hash_undefined__";
      function hashSet(key, value) {
        var data = this.__data__;
        this.size += this.has(key) ? 0 : 1;
        data[key] = nativeCreate && value === void 0 ? HASH_UNDEFINED : value;
        return this;
      }
      module.exports = hashSet;
    }
  });

  // node_modules/lodash/_Hash.js
  var require_Hash = __commonJS({
    "node_modules/lodash/_Hash.js"(exports, module) {
      var hashClear = require_hashClear();
      var hashDelete = require_hashDelete();
      var hashGet = require_hashGet();
      var hashHas = require_hashHas();
      var hashSet = require_hashSet();
      function Hash(entries) {
        var index = -1, length = entries == null ? 0 : entries.length;
        this.clear();
        while (++index < length) {
          var entry = entries[index];
          this.set(entry[0], entry[1]);
        }
      }
      Hash.prototype.clear = hashClear;
      Hash.prototype["delete"] = hashDelete;
      Hash.prototype.get = hashGet;
      Hash.prototype.has = hashHas;
      Hash.prototype.set = hashSet;
      module.exports = Hash;
    }
  });

  // node_modules/lodash/_mapCacheClear.js
  var require_mapCacheClear = __commonJS({
    "node_modules/lodash/_mapCacheClear.js"(exports, module) {
      var Hash = require_Hash();
      var ListCache = require_ListCache();
      var Map2 = require_Map();
      function mapCacheClear() {
        this.size = 0;
        this.__data__ = {
          "hash": new Hash(),
          "map": new (Map2 || ListCache)(),
          "string": new Hash()
        };
      }
      module.exports = mapCacheClear;
    }
  });

  // node_modules/lodash/_isKeyable.js
  var require_isKeyable = __commonJS({
    "node_modules/lodash/_isKeyable.js"(exports, module) {
      function isKeyable(value) {
        var type = typeof value;
        return type == "string" || type == "number" || type == "symbol" || type == "boolean" ? value !== "__proto__" : value === null;
      }
      module.exports = isKeyable;
    }
  });

  // node_modules/lodash/_getMapData.js
  var require_getMapData = __commonJS({
    "node_modules/lodash/_getMapData.js"(exports, module) {
      var isKeyable = require_isKeyable();
      function getMapData(map3, key) {
        var data = map3.__data__;
        return isKeyable(key) ? data[typeof key == "string" ? "string" : "hash"] : data.map;
      }
      module.exports = getMapData;
    }
  });

  // node_modules/lodash/_mapCacheDelete.js
  var require_mapCacheDelete = __commonJS({
    "node_modules/lodash/_mapCacheDelete.js"(exports, module) {
      var getMapData = require_getMapData();
      function mapCacheDelete(key) {
        var result = getMapData(this, key)["delete"](key);
        this.size -= result ? 1 : 0;
        return result;
      }
      module.exports = mapCacheDelete;
    }
  });

  // node_modules/lodash/_mapCacheGet.js
  var require_mapCacheGet = __commonJS({
    "node_modules/lodash/_mapCacheGet.js"(exports, module) {
      var getMapData = require_getMapData();
      function mapCacheGet(key) {
        return getMapData(this, key).get(key);
      }
      module.exports = mapCacheGet;
    }
  });

  // node_modules/lodash/_mapCacheHas.js
  var require_mapCacheHas = __commonJS({
    "node_modules/lodash/_mapCacheHas.js"(exports, module) {
      var getMapData = require_getMapData();
      function mapCacheHas(key) {
        return getMapData(this, key).has(key);
      }
      module.exports = mapCacheHas;
    }
  });

  // node_modules/lodash/_mapCacheSet.js
  var require_mapCacheSet = __commonJS({
    "node_modules/lodash/_mapCacheSet.js"(exports, module) {
      var getMapData = require_getMapData();
      function mapCacheSet(key, value) {
        var data = getMapData(this, key), size = data.size;
        data.set(key, value);
        this.size += data.size == size ? 0 : 1;
        return this;
      }
      module.exports = mapCacheSet;
    }
  });

  // node_modules/lodash/_MapCache.js
  var require_MapCache = __commonJS({
    "node_modules/lodash/_MapCache.js"(exports, module) {
      var mapCacheClear = require_mapCacheClear();
      var mapCacheDelete = require_mapCacheDelete();
      var mapCacheGet = require_mapCacheGet();
      var mapCacheHas = require_mapCacheHas();
      var mapCacheSet = require_mapCacheSet();
      function MapCache(entries) {
        var index = -1, length = entries == null ? 0 : entries.length;
        this.clear();
        while (++index < length) {
          var entry = entries[index];
          this.set(entry[0], entry[1]);
        }
      }
      MapCache.prototype.clear = mapCacheClear;
      MapCache.prototype["delete"] = mapCacheDelete;
      MapCache.prototype.get = mapCacheGet;
      MapCache.prototype.has = mapCacheHas;
      MapCache.prototype.set = mapCacheSet;
      module.exports = MapCache;
    }
  });

  // node_modules/lodash/_stackSet.js
  var require_stackSet = __commonJS({
    "node_modules/lodash/_stackSet.js"(exports, module) {
      var ListCache = require_ListCache();
      var Map2 = require_Map();
      var MapCache = require_MapCache();
      var LARGE_ARRAY_SIZE = 200;
      function stackSet(key, value) {
        var data = this.__data__;
        if (data instanceof ListCache) {
          var pairs = data.__data__;
          if (!Map2 || pairs.length < LARGE_ARRAY_SIZE - 1) {
            pairs.push([key, value]);
            this.size = ++data.size;
            return this;
          }
          data = this.__data__ = new MapCache(pairs);
        }
        data.set(key, value);
        this.size = data.size;
        return this;
      }
      module.exports = stackSet;
    }
  });

  // node_modules/lodash/_Stack.js
  var require_Stack = __commonJS({
    "node_modules/lodash/_Stack.js"(exports, module) {
      var ListCache = require_ListCache();
      var stackClear = require_stackClear();
      var stackDelete = require_stackDelete();
      var stackGet = require_stackGet();
      var stackHas = require_stackHas();
      var stackSet = require_stackSet();
      function Stack(entries) {
        var data = this.__data__ = new ListCache(entries);
        this.size = data.size;
      }
      Stack.prototype.clear = stackClear;
      Stack.prototype["delete"] = stackDelete;
      Stack.prototype.get = stackGet;
      Stack.prototype.has = stackHas;
      Stack.prototype.set = stackSet;
      module.exports = Stack;
    }
  });

  // node_modules/lodash/_defineProperty.js
  var require_defineProperty = __commonJS({
    "node_modules/lodash/_defineProperty.js"(exports, module) {
      var getNative = require_getNative();
      var defineProperty = function() {
        try {
          var func = getNative(Object, "defineProperty");
          func({}, "", {});
          return func;
        } catch (e7) {
        }
      }();
      module.exports = defineProperty;
    }
  });

  // node_modules/lodash/_baseAssignValue.js
  var require_baseAssignValue = __commonJS({
    "node_modules/lodash/_baseAssignValue.js"(exports, module) {
      var defineProperty = require_defineProperty();
      function baseAssignValue(object, key, value) {
        if (key == "__proto__" && defineProperty) {
          defineProperty(object, key, {
            "configurable": true,
            "enumerable": true,
            "value": value,
            "writable": true
          });
        } else {
          object[key] = value;
        }
      }
      module.exports = baseAssignValue;
    }
  });

  // node_modules/lodash/_assignMergeValue.js
  var require_assignMergeValue = __commonJS({
    "node_modules/lodash/_assignMergeValue.js"(exports, module) {
      var baseAssignValue = require_baseAssignValue();
      var eq2 = require_eq();
      function assignMergeValue(object, key, value) {
        if (value !== void 0 && !eq2(object[key], value) || value === void 0 && !(key in object)) {
          baseAssignValue(object, key, value);
        }
      }
      module.exports = assignMergeValue;
    }
  });

  // node_modules/lodash/_createBaseFor.js
  var require_createBaseFor = __commonJS({
    "node_modules/lodash/_createBaseFor.js"(exports, module) {
      function createBaseFor(fromRight) {
        return function(object, iteratee, keysFunc) {
          var index = -1, iterable = Object(object), props = keysFunc(object), length = props.length;
          while (length--) {
            var key = props[fromRight ? length : ++index];
            if (iteratee(iterable[key], key, iterable) === false) {
              break;
            }
          }
          return object;
        };
      }
      module.exports = createBaseFor;
    }
  });

  // node_modules/lodash/_baseFor.js
  var require_baseFor = __commonJS({
    "node_modules/lodash/_baseFor.js"(exports, module) {
      var createBaseFor = require_createBaseFor();
      var baseFor = createBaseFor();
      module.exports = baseFor;
    }
  });

  // node_modules/lodash/_cloneBuffer.js
  var require_cloneBuffer = __commonJS({
    "node_modules/lodash/_cloneBuffer.js"(exports, module) {
      var root = require_root();
      var freeExports = typeof exports == "object" && exports && !exports.nodeType && exports;
      var freeModule = freeExports && typeof module == "object" && module && !module.nodeType && module;
      var moduleExports = freeModule && freeModule.exports === freeExports;
      var Buffer2 = moduleExports ? root.Buffer : void 0;
      var allocUnsafe = Buffer2 ? Buffer2.allocUnsafe : void 0;
      function cloneBuffer(buffer, isDeep) {
        if (isDeep) {
          return buffer.slice();
        }
        var length = buffer.length, result = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);
        buffer.copy(result);
        return result;
      }
      module.exports = cloneBuffer;
    }
  });

  // node_modules/lodash/_Uint8Array.js
  var require_Uint8Array = __commonJS({
    "node_modules/lodash/_Uint8Array.js"(exports, module) {
      var root = require_root();
      var Uint8Array2 = root.Uint8Array;
      module.exports = Uint8Array2;
    }
  });

  // node_modules/lodash/_cloneArrayBuffer.js
  var require_cloneArrayBuffer = __commonJS({
    "node_modules/lodash/_cloneArrayBuffer.js"(exports, module) {
      var Uint8Array2 = require_Uint8Array();
      function cloneArrayBuffer(arrayBuffer) {
        var result = new arrayBuffer.constructor(arrayBuffer.byteLength);
        new Uint8Array2(result).set(new Uint8Array2(arrayBuffer));
        return result;
      }
      module.exports = cloneArrayBuffer;
    }
  });

  // node_modules/lodash/_cloneTypedArray.js
  var require_cloneTypedArray = __commonJS({
    "node_modules/lodash/_cloneTypedArray.js"(exports, module) {
      var cloneArrayBuffer = require_cloneArrayBuffer();
      function cloneTypedArray(typedArray, isDeep) {
        var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;
        return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
      }
      module.exports = cloneTypedArray;
    }
  });

  // node_modules/lodash/_copyArray.js
  var require_copyArray = __commonJS({
    "node_modules/lodash/_copyArray.js"(exports, module) {
      function copyArray(source, array) {
        var index = -1, length = source.length;
        array || (array = Array(length));
        while (++index < length) {
          array[index] = source[index];
        }
        return array;
      }
      module.exports = copyArray;
    }
  });

  // node_modules/lodash/_baseCreate.js
  var require_baseCreate = __commonJS({
    "node_modules/lodash/_baseCreate.js"(exports, module) {
      var isObject2 = require_isObject();
      var objectCreate = Object.create;
      var baseCreate = function() {
        function object() {
        }
        return function(proto) {
          if (!isObject2(proto)) {
            return {};
          }
          if (objectCreate) {
            return objectCreate(proto);
          }
          object.prototype = proto;
          var result = new object();
          object.prototype = void 0;
          return result;
        };
      }();
      module.exports = baseCreate;
    }
  });

  // node_modules/lodash/_overArg.js
  var require_overArg = __commonJS({
    "node_modules/lodash/_overArg.js"(exports, module) {
      function overArg(func, transform) {
        return function(arg) {
          return func(transform(arg));
        };
      }
      module.exports = overArg;
    }
  });

  // node_modules/lodash/_getPrototype.js
  var require_getPrototype = __commonJS({
    "node_modules/lodash/_getPrototype.js"(exports, module) {
      var overArg = require_overArg();
      var getPrototype = overArg(Object.getPrototypeOf, Object);
      module.exports = getPrototype;
    }
  });

  // node_modules/lodash/_isPrototype.js
  var require_isPrototype = __commonJS({
    "node_modules/lodash/_isPrototype.js"(exports, module) {
      var objectProto = Object.prototype;
      function isPrototype(value) {
        var Ctor = value && value.constructor, proto = typeof Ctor == "function" && Ctor.prototype || objectProto;
        return value === proto;
      }
      module.exports = isPrototype;
    }
  });

  // node_modules/lodash/_initCloneObject.js
  var require_initCloneObject = __commonJS({
    "node_modules/lodash/_initCloneObject.js"(exports, module) {
      var baseCreate = require_baseCreate();
      var getPrototype = require_getPrototype();
      var isPrototype = require_isPrototype();
      function initCloneObject(object) {
        return typeof object.constructor == "function" && !isPrototype(object) ? baseCreate(getPrototype(object)) : {};
      }
      module.exports = initCloneObject;
    }
  });

  // node_modules/lodash/isObjectLike.js
  var require_isObjectLike = __commonJS({
    "node_modules/lodash/isObjectLike.js"(exports, module) {
      function isObjectLike(value) {
        return value != null && typeof value == "object";
      }
      module.exports = isObjectLike;
    }
  });

  // node_modules/lodash/_baseIsArguments.js
  var require_baseIsArguments = __commonJS({
    "node_modules/lodash/_baseIsArguments.js"(exports, module) {
      var baseGetTag = require_baseGetTag();
      var isObjectLike = require_isObjectLike();
      var argsTag = "[object Arguments]";
      function baseIsArguments(value) {
        return isObjectLike(value) && baseGetTag(value) == argsTag;
      }
      module.exports = baseIsArguments;
    }
  });

  // node_modules/lodash/isArguments.js
  var require_isArguments = __commonJS({
    "node_modules/lodash/isArguments.js"(exports, module) {
      var baseIsArguments = require_baseIsArguments();
      var isObjectLike = require_isObjectLike();
      var objectProto = Object.prototype;
      var hasOwnProperty = objectProto.hasOwnProperty;
      var propertyIsEnumerable = objectProto.propertyIsEnumerable;
      var isArguments = baseIsArguments(function() {
        return arguments;
      }()) ? baseIsArguments : function(value) {
        return isObjectLike(value) && hasOwnProperty.call(value, "callee") && !propertyIsEnumerable.call(value, "callee");
      };
      module.exports = isArguments;
    }
  });

  // node_modules/lodash/isArray.js
  var require_isArray = __commonJS({
    "node_modules/lodash/isArray.js"(exports, module) {
      var isArray2 = Array.isArray;
      module.exports = isArray2;
    }
  });

  // node_modules/lodash/isLength.js
  var require_isLength = __commonJS({
    "node_modules/lodash/isLength.js"(exports, module) {
      var MAX_SAFE_INTEGER = 9007199254740991;
      function isLength(value) {
        return typeof value == "number" && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
      }
      module.exports = isLength;
    }
  });

  // node_modules/lodash/isArrayLike.js
  var require_isArrayLike = __commonJS({
    "node_modules/lodash/isArrayLike.js"(exports, module) {
      var isFunction2 = require_isFunction();
      var isLength = require_isLength();
      function isArrayLike(value) {
        return value != null && isLength(value.length) && !isFunction2(value);
      }
      module.exports = isArrayLike;
    }
  });

  // node_modules/lodash/isArrayLikeObject.js
  var require_isArrayLikeObject = __commonJS({
    "node_modules/lodash/isArrayLikeObject.js"(exports, module) {
      var isArrayLike = require_isArrayLike();
      var isObjectLike = require_isObjectLike();
      function isArrayLikeObject(value) {
        return isObjectLike(value) && isArrayLike(value);
      }
      module.exports = isArrayLikeObject;
    }
  });

  // node_modules/lodash/stubFalse.js
  var require_stubFalse = __commonJS({
    "node_modules/lodash/stubFalse.js"(exports, module) {
      function stubFalse() {
        return false;
      }
      module.exports = stubFalse;
    }
  });

  // node_modules/lodash/isBuffer.js
  var require_isBuffer = __commonJS({
    "node_modules/lodash/isBuffer.js"(exports, module) {
      var root = require_root();
      var stubFalse = require_stubFalse();
      var freeExports = typeof exports == "object" && exports && !exports.nodeType && exports;
      var freeModule = freeExports && typeof module == "object" && module && !module.nodeType && module;
      var moduleExports = freeModule && freeModule.exports === freeExports;
      var Buffer2 = moduleExports ? root.Buffer : void 0;
      var nativeIsBuffer = Buffer2 ? Buffer2.isBuffer : void 0;
      var isBuffer = nativeIsBuffer || stubFalse;
      module.exports = isBuffer;
    }
  });

  // node_modules/lodash/isPlainObject.js
  var require_isPlainObject = __commonJS({
    "node_modules/lodash/isPlainObject.js"(exports, module) {
      var baseGetTag = require_baseGetTag();
      var getPrototype = require_getPrototype();
      var isObjectLike = require_isObjectLike();
      var objectTag = "[object Object]";
      var funcProto = Function.prototype;
      var objectProto = Object.prototype;
      var funcToString = funcProto.toString;
      var hasOwnProperty = objectProto.hasOwnProperty;
      var objectCtorString = funcToString.call(Object);
      function isPlainObject(value) {
        if (!isObjectLike(value) || baseGetTag(value) != objectTag) {
          return false;
        }
        var proto = getPrototype(value);
        if (proto === null) {
          return true;
        }
        var Ctor = hasOwnProperty.call(proto, "constructor") && proto.constructor;
        return typeof Ctor == "function" && Ctor instanceof Ctor && funcToString.call(Ctor) == objectCtorString;
      }
      module.exports = isPlainObject;
    }
  });

  // node_modules/lodash/_baseIsTypedArray.js
  var require_baseIsTypedArray = __commonJS({
    "node_modules/lodash/_baseIsTypedArray.js"(exports, module) {
      var baseGetTag = require_baseGetTag();
      var isLength = require_isLength();
      var isObjectLike = require_isObjectLike();
      var argsTag = "[object Arguments]";
      var arrayTag = "[object Array]";
      var boolTag = "[object Boolean]";
      var dateTag = "[object Date]";
      var errorTag = "[object Error]";
      var funcTag = "[object Function]";
      var mapTag = "[object Map]";
      var numberTag = "[object Number]";
      var objectTag = "[object Object]";
      var regexpTag = "[object RegExp]";
      var setTag = "[object Set]";
      var stringTag = "[object String]";
      var weakMapTag = "[object WeakMap]";
      var arrayBufferTag = "[object ArrayBuffer]";
      var dataViewTag = "[object DataView]";
      var float32Tag = "[object Float32Array]";
      var float64Tag = "[object Float64Array]";
      var int8Tag = "[object Int8Array]";
      var int16Tag = "[object Int16Array]";
      var int32Tag = "[object Int32Array]";
      var uint8Tag = "[object Uint8Array]";
      var uint8ClampedTag = "[object Uint8ClampedArray]";
      var uint16Tag = "[object Uint16Array]";
      var uint32Tag = "[object Uint32Array]";
      var typedArrayTags = {};
      typedArrayTags[float32Tag] = typedArrayTags[float64Tag] = typedArrayTags[int8Tag] = typedArrayTags[int16Tag] = typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] = typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] = typedArrayTags[uint32Tag] = true;
      typedArrayTags[argsTag] = typedArrayTags[arrayTag] = typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] = typedArrayTags[dataViewTag] = typedArrayTags[dateTag] = typedArrayTags[errorTag] = typedArrayTags[funcTag] = typedArrayTags[mapTag] = typedArrayTags[numberTag] = typedArrayTags[objectTag] = typedArrayTags[regexpTag] = typedArrayTags[setTag] = typedArrayTags[stringTag] = typedArrayTags[weakMapTag] = false;
      function baseIsTypedArray(value) {
        return isObjectLike(value) && isLength(value.length) && !!typedArrayTags[baseGetTag(value)];
      }
      module.exports = baseIsTypedArray;
    }
  });

  // node_modules/lodash/_baseUnary.js
  var require_baseUnary = __commonJS({
    "node_modules/lodash/_baseUnary.js"(exports, module) {
      function baseUnary(func) {
        return function(value) {
          return func(value);
        };
      }
      module.exports = baseUnary;
    }
  });

  // node_modules/lodash/_nodeUtil.js
  var require_nodeUtil = __commonJS({
    "node_modules/lodash/_nodeUtil.js"(exports, module) {
      var freeGlobal = require_freeGlobal();
      var freeExports = typeof exports == "object" && exports && !exports.nodeType && exports;
      var freeModule = freeExports && typeof module == "object" && module && !module.nodeType && module;
      var moduleExports = freeModule && freeModule.exports === freeExports;
      var freeProcess = moduleExports && freeGlobal.process;
      var nodeUtil = function() {
        try {
          var types = freeModule && freeModule.require && freeModule.require("util").types;
          if (types) {
            return types;
          }
          return freeProcess && freeProcess.binding && freeProcess.binding("util");
        } catch (e7) {
        }
      }();
      module.exports = nodeUtil;
    }
  });

  // node_modules/lodash/isTypedArray.js
  var require_isTypedArray = __commonJS({
    "node_modules/lodash/isTypedArray.js"(exports, module) {
      var baseIsTypedArray = require_baseIsTypedArray();
      var baseUnary = require_baseUnary();
      var nodeUtil = require_nodeUtil();
      var nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;
      var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;
      module.exports = isTypedArray;
    }
  });

  // node_modules/lodash/_safeGet.js
  var require_safeGet = __commonJS({
    "node_modules/lodash/_safeGet.js"(exports, module) {
      function safeGet(object, key) {
        if (key === "constructor" && typeof object[key] === "function") {
          return;
        }
        if (key == "__proto__") {
          return;
        }
        return object[key];
      }
      module.exports = safeGet;
    }
  });

  // node_modules/lodash/_assignValue.js
  var require_assignValue = __commonJS({
    "node_modules/lodash/_assignValue.js"(exports, module) {
      var baseAssignValue = require_baseAssignValue();
      var eq2 = require_eq();
      var objectProto = Object.prototype;
      var hasOwnProperty = objectProto.hasOwnProperty;
      function assignValue(object, key, value) {
        var objValue = object[key];
        if (!(hasOwnProperty.call(object, key) && eq2(objValue, value)) || value === void 0 && !(key in object)) {
          baseAssignValue(object, key, value);
        }
      }
      module.exports = assignValue;
    }
  });

  // node_modules/lodash/_copyObject.js
  var require_copyObject = __commonJS({
    "node_modules/lodash/_copyObject.js"(exports, module) {
      var assignValue = require_assignValue();
      var baseAssignValue = require_baseAssignValue();
      function copyObject(source, props, object, customizer) {
        var isNew = !object;
        object || (object = {});
        var index = -1, length = props.length;
        while (++index < length) {
          var key = props[index];
          var newValue = customizer ? customizer(object[key], source[key], key, object, source) : void 0;
          if (newValue === void 0) {
            newValue = source[key];
          }
          if (isNew) {
            baseAssignValue(object, key, newValue);
          } else {
            assignValue(object, key, newValue);
          }
        }
        return object;
      }
      module.exports = copyObject;
    }
  });

  // node_modules/lodash/_baseTimes.js
  var require_baseTimes = __commonJS({
    "node_modules/lodash/_baseTimes.js"(exports, module) {
      function baseTimes(n6, iteratee) {
        var index = -1, result = Array(n6);
        while (++index < n6) {
          result[index] = iteratee(index);
        }
        return result;
      }
      module.exports = baseTimes;
    }
  });

  // node_modules/lodash/_isIndex.js
  var require_isIndex = __commonJS({
    "node_modules/lodash/_isIndex.js"(exports, module) {
      var MAX_SAFE_INTEGER = 9007199254740991;
      var reIsUint = /^(?:0|[1-9]\d*)$/;
      function isIndex(value, length) {
        var type = typeof value;
        length = length == null ? MAX_SAFE_INTEGER : length;
        return !!length && (type == "number" || type != "symbol" && reIsUint.test(value)) && (value > -1 && value % 1 == 0 && value < length);
      }
      module.exports = isIndex;
    }
  });

  // node_modules/lodash/_arrayLikeKeys.js
  var require_arrayLikeKeys = __commonJS({
    "node_modules/lodash/_arrayLikeKeys.js"(exports, module) {
      var baseTimes = require_baseTimes();
      var isArguments = require_isArguments();
      var isArray2 = require_isArray();
      var isBuffer = require_isBuffer();
      var isIndex = require_isIndex();
      var isTypedArray = require_isTypedArray();
      var objectProto = Object.prototype;
      var hasOwnProperty = objectProto.hasOwnProperty;
      function arrayLikeKeys(value, inherited) {
        var isArr = isArray2(value), isArg = !isArr && isArguments(value), isBuff = !isArr && !isArg && isBuffer(value), isType = !isArr && !isArg && !isBuff && isTypedArray(value), skipIndexes = isArr || isArg || isBuff || isType, result = skipIndexes ? baseTimes(value.length, String) : [], length = result.length;
        for (var key in value) {
          if ((inherited || hasOwnProperty.call(value, key)) && !(skipIndexes && (key == "length" || isBuff && (key == "offset" || key == "parent") || isType && (key == "buffer" || key == "byteLength" || key == "byteOffset") || isIndex(key, length)))) {
            result.push(key);
          }
        }
        return result;
      }
      module.exports = arrayLikeKeys;
    }
  });

  // node_modules/lodash/_nativeKeysIn.js
  var require_nativeKeysIn = __commonJS({
    "node_modules/lodash/_nativeKeysIn.js"(exports, module) {
      function nativeKeysIn(object) {
        var result = [];
        if (object != null) {
          for (var key in Object(object)) {
            result.push(key);
          }
        }
        return result;
      }
      module.exports = nativeKeysIn;
    }
  });

  // node_modules/lodash/_baseKeysIn.js
  var require_baseKeysIn = __commonJS({
    "node_modules/lodash/_baseKeysIn.js"(exports, module) {
      var isObject2 = require_isObject();
      var isPrototype = require_isPrototype();
      var nativeKeysIn = require_nativeKeysIn();
      var objectProto = Object.prototype;
      var hasOwnProperty = objectProto.hasOwnProperty;
      function baseKeysIn(object) {
        if (!isObject2(object)) {
          return nativeKeysIn(object);
        }
        var isProto = isPrototype(object), result = [];
        for (var key in object) {
          if (!(key == "constructor" && (isProto || !hasOwnProperty.call(object, key)))) {
            result.push(key);
          }
        }
        return result;
      }
      module.exports = baseKeysIn;
    }
  });

  // node_modules/lodash/keysIn.js
  var require_keysIn = __commonJS({
    "node_modules/lodash/keysIn.js"(exports, module) {
      var arrayLikeKeys = require_arrayLikeKeys();
      var baseKeysIn = require_baseKeysIn();
      var isArrayLike = require_isArrayLike();
      function keysIn(object) {
        return isArrayLike(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);
      }
      module.exports = keysIn;
    }
  });

  // node_modules/lodash/toPlainObject.js
  var require_toPlainObject = __commonJS({
    "node_modules/lodash/toPlainObject.js"(exports, module) {
      var copyObject = require_copyObject();
      var keysIn = require_keysIn();
      function toPlainObject(value) {
        return copyObject(value, keysIn(value));
      }
      module.exports = toPlainObject;
    }
  });

  // node_modules/lodash/_baseMergeDeep.js
  var require_baseMergeDeep = __commonJS({
    "node_modules/lodash/_baseMergeDeep.js"(exports, module) {
      var assignMergeValue = require_assignMergeValue();
      var cloneBuffer = require_cloneBuffer();
      var cloneTypedArray = require_cloneTypedArray();
      var copyArray = require_copyArray();
      var initCloneObject = require_initCloneObject();
      var isArguments = require_isArguments();
      var isArray2 = require_isArray();
      var isArrayLikeObject = require_isArrayLikeObject();
      var isBuffer = require_isBuffer();
      var isFunction2 = require_isFunction();
      var isObject2 = require_isObject();
      var isPlainObject = require_isPlainObject();
      var isTypedArray = require_isTypedArray();
      var safeGet = require_safeGet();
      var toPlainObject = require_toPlainObject();
      function baseMergeDeep(object, source, key, srcIndex, mergeFunc, customizer, stack) {
        var objValue = safeGet(object, key), srcValue = safeGet(source, key), stacked = stack.get(srcValue);
        if (stacked) {
          assignMergeValue(object, key, stacked);
          return;
        }
        var newValue = customizer ? customizer(objValue, srcValue, key + "", object, source, stack) : void 0;
        var isCommon = newValue === void 0;
        if (isCommon) {
          var isArr = isArray2(srcValue), isBuff = !isArr && isBuffer(srcValue), isTyped = !isArr && !isBuff && isTypedArray(srcValue);
          newValue = srcValue;
          if (isArr || isBuff || isTyped) {
            if (isArray2(objValue)) {
              newValue = objValue;
            } else if (isArrayLikeObject(objValue)) {
              newValue = copyArray(objValue);
            } else if (isBuff) {
              isCommon = false;
              newValue = cloneBuffer(srcValue, true);
            } else if (isTyped) {
              isCommon = false;
              newValue = cloneTypedArray(srcValue, true);
            } else {
              newValue = [];
            }
          } else if (isPlainObject(srcValue) || isArguments(srcValue)) {
            newValue = objValue;
            if (isArguments(objValue)) {
              newValue = toPlainObject(objValue);
            } else if (!isObject2(objValue) || isFunction2(objValue)) {
              newValue = initCloneObject(srcValue);
            }
          } else {
            isCommon = false;
          }
        }
        if (isCommon) {
          stack.set(srcValue, newValue);
          mergeFunc(newValue, srcValue, srcIndex, customizer, stack);
          stack["delete"](srcValue);
        }
        assignMergeValue(object, key, newValue);
      }
      module.exports = baseMergeDeep;
    }
  });

  // node_modules/lodash/_baseMerge.js
  var require_baseMerge = __commonJS({
    "node_modules/lodash/_baseMerge.js"(exports, module) {
      var Stack = require_Stack();
      var assignMergeValue = require_assignMergeValue();
      var baseFor = require_baseFor();
      var baseMergeDeep = require_baseMergeDeep();
      var isObject2 = require_isObject();
      var keysIn = require_keysIn();
      var safeGet = require_safeGet();
      function baseMerge(object, source, srcIndex, customizer, stack) {
        if (object === source) {
          return;
        }
        baseFor(source, function(srcValue, key) {
          stack || (stack = new Stack());
          if (isObject2(srcValue)) {
            baseMergeDeep(object, source, key, srcIndex, baseMerge, customizer, stack);
          } else {
            var newValue = customizer ? customizer(safeGet(object, key), srcValue, key + "", object, source, stack) : void 0;
            if (newValue === void 0) {
              newValue = srcValue;
            }
            assignMergeValue(object, key, newValue);
          }
        }, keysIn);
      }
      module.exports = baseMerge;
    }
  });

  // node_modules/lodash/identity.js
  var require_identity = __commonJS({
    "node_modules/lodash/identity.js"(exports, module) {
      function identity2(value) {
        return value;
      }
      module.exports = identity2;
    }
  });

  // node_modules/lodash/_apply.js
  var require_apply = __commonJS({
    "node_modules/lodash/_apply.js"(exports, module) {
      function apply(func, thisArg, args) {
        switch (args.length) {
          case 0:
            return func.call(thisArg);
          case 1:
            return func.call(thisArg, args[0]);
          case 2:
            return func.call(thisArg, args[0], args[1]);
          case 3:
            return func.call(thisArg, args[0], args[1], args[2]);
        }
        return func.apply(thisArg, args);
      }
      module.exports = apply;
    }
  });

  // node_modules/lodash/_overRest.js
  var require_overRest = __commonJS({
    "node_modules/lodash/_overRest.js"(exports, module) {
      var apply = require_apply();
      var nativeMax = Math.max;
      function overRest(func, start2, transform) {
        start2 = nativeMax(start2 === void 0 ? func.length - 1 : start2, 0);
        return function() {
          var args = arguments, index = -1, length = nativeMax(args.length - start2, 0), array = Array(length);
          while (++index < length) {
            array[index] = args[start2 + index];
          }
          index = -1;
          var otherArgs = Array(start2 + 1);
          while (++index < start2) {
            otherArgs[index] = args[index];
          }
          otherArgs[start2] = transform(array);
          return apply(func, this, otherArgs);
        };
      }
      module.exports = overRest;
    }
  });

  // node_modules/lodash/constant.js
  var require_constant = __commonJS({
    "node_modules/lodash/constant.js"(exports, module) {
      function constant(value) {
        return function() {
          return value;
        };
      }
      module.exports = constant;
    }
  });

  // node_modules/lodash/_baseSetToString.js
  var require_baseSetToString = __commonJS({
    "node_modules/lodash/_baseSetToString.js"(exports, module) {
      var constant = require_constant();
      var defineProperty = require_defineProperty();
      var identity2 = require_identity();
      var baseSetToString = !defineProperty ? identity2 : function(func, string) {
        return defineProperty(func, "toString", {
          "configurable": true,
          "enumerable": false,
          "value": constant(string),
          "writable": true
        });
      };
      module.exports = baseSetToString;
    }
  });

  // node_modules/lodash/_shortOut.js
  var require_shortOut = __commonJS({
    "node_modules/lodash/_shortOut.js"(exports, module) {
      var HOT_COUNT = 800;
      var HOT_SPAN = 16;
      var nativeNow = Date.now;
      function shortOut(func) {
        var count2 = 0, lastCalled = 0;
        return function() {
          var stamp = nativeNow(), remaining = HOT_SPAN - (stamp - lastCalled);
          lastCalled = stamp;
          if (remaining > 0) {
            if (++count2 >= HOT_COUNT) {
              return arguments[0];
            }
          } else {
            count2 = 0;
          }
          return func.apply(void 0, arguments);
        };
      }
      module.exports = shortOut;
    }
  });

  // node_modules/lodash/_setToString.js
  var require_setToString = __commonJS({
    "node_modules/lodash/_setToString.js"(exports, module) {
      var baseSetToString = require_baseSetToString();
      var shortOut = require_shortOut();
      var setToString = shortOut(baseSetToString);
      module.exports = setToString;
    }
  });

  // node_modules/lodash/_baseRest.js
  var require_baseRest = __commonJS({
    "node_modules/lodash/_baseRest.js"(exports, module) {
      var identity2 = require_identity();
      var overRest = require_overRest();
      var setToString = require_setToString();
      function baseRest(func, start2) {
        return setToString(overRest(func, start2, identity2), func + "");
      }
      module.exports = baseRest;
    }
  });

  // node_modules/lodash/_isIterateeCall.js
  var require_isIterateeCall = __commonJS({
    "node_modules/lodash/_isIterateeCall.js"(exports, module) {
      var eq2 = require_eq();
      var isArrayLike = require_isArrayLike();
      var isIndex = require_isIndex();
      var isObject2 = require_isObject();
      function isIterateeCall(value, index, object) {
        if (!isObject2(object)) {
          return false;
        }
        var type = typeof index;
        if (type == "number" ? isArrayLike(object) && isIndex(index, object.length) : type == "string" && index in object) {
          return eq2(object[index], value);
        }
        return false;
      }
      module.exports = isIterateeCall;
    }
  });

  // node_modules/lodash/_createAssigner.js
  var require_createAssigner = __commonJS({
    "node_modules/lodash/_createAssigner.js"(exports, module) {
      var baseRest = require_baseRest();
      var isIterateeCall = require_isIterateeCall();
      function createAssigner(assigner) {
        return baseRest(function(object, sources) {
          var index = -1, length = sources.length, customizer = length > 1 ? sources[length - 1] : void 0, guard = length > 2 ? sources[2] : void 0;
          customizer = assigner.length > 3 && typeof customizer == "function" ? (length--, customizer) : void 0;
          if (guard && isIterateeCall(sources[0], sources[1], guard)) {
            customizer = length < 3 ? void 0 : customizer;
            length = 1;
          }
          object = Object(object);
          while (++index < length) {
            var source = sources[index];
            if (source) {
              assigner(object, source, index, customizer);
            }
          }
          return object;
        });
      }
      module.exports = createAssigner;
    }
  });

  // node_modules/lodash/merge.js
  var require_merge = __commonJS({
    "node_modules/lodash/merge.js"(exports, module) {
      var baseMerge = require_baseMerge();
      var createAssigner = require_createAssigner();
      var merge2 = createAssigner(function(object, source, srcIndex) {
        baseMerge(object, source, srcIndex);
      });
      module.exports = merge2;
    }
  });

  // node_modules/lodash/isSymbol.js
  var require_isSymbol = __commonJS({
    "node_modules/lodash/isSymbol.js"(exports, module) {
      var baseGetTag = require_baseGetTag();
      var isObjectLike = require_isObjectLike();
      var symbolTag = "[object Symbol]";
      function isSymbol(value) {
        return typeof value == "symbol" || isObjectLike(value) && baseGetTag(value) == symbolTag;
      }
      module.exports = isSymbol;
    }
  });

  // node_modules/lodash/_isKey.js
  var require_isKey = __commonJS({
    "node_modules/lodash/_isKey.js"(exports, module) {
      var isArray2 = require_isArray();
      var isSymbol = require_isSymbol();
      var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/;
      var reIsPlainProp = /^\w*$/;
      function isKey(value, object) {
        if (isArray2(value)) {
          return false;
        }
        var type = typeof value;
        if (type == "number" || type == "symbol" || type == "boolean" || value == null || isSymbol(value)) {
          return true;
        }
        return reIsPlainProp.test(value) || !reIsDeepProp.test(value) || object != null && value in Object(object);
      }
      module.exports = isKey;
    }
  });

  // node_modules/lodash/memoize.js
  var require_memoize = __commonJS({
    "node_modules/lodash/memoize.js"(exports, module) {
      var MapCache = require_MapCache();
      var FUNC_ERROR_TEXT = "Expected a function";
      function memoize(func, resolver) {
        if (typeof func != "function" || resolver != null && typeof resolver != "function") {
          throw new TypeError(FUNC_ERROR_TEXT);
        }
        var memoized = function() {
          var args = arguments, key = resolver ? resolver.apply(this, args) : args[0], cache = memoized.cache;
          if (cache.has(key)) {
            return cache.get(key);
          }
          var result = func.apply(this, args);
          memoized.cache = cache.set(key, result) || cache;
          return result;
        };
        memoized.cache = new (memoize.Cache || MapCache)();
        return memoized;
      }
      memoize.Cache = MapCache;
      module.exports = memoize;
    }
  });

  // node_modules/lodash/_memoizeCapped.js
  var require_memoizeCapped = __commonJS({
    "node_modules/lodash/_memoizeCapped.js"(exports, module) {
      var memoize = require_memoize();
      var MAX_MEMOIZE_SIZE = 500;
      function memoizeCapped(func) {
        var result = memoize(func, function(key) {
          if (cache.size === MAX_MEMOIZE_SIZE) {
            cache.clear();
          }
          return key;
        });
        var cache = result.cache;
        return result;
      }
      module.exports = memoizeCapped;
    }
  });

  // node_modules/lodash/_stringToPath.js
  var require_stringToPath = __commonJS({
    "node_modules/lodash/_stringToPath.js"(exports, module) {
      var memoizeCapped = require_memoizeCapped();
      var rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;
      var reEscapeChar = /\\(\\)?/g;
      var stringToPath = memoizeCapped(function(string) {
        var result = [];
        if (string.charCodeAt(0) === 46) {
          result.push("");
        }
        string.replace(rePropName, function(match, number3, quote, subString) {
          result.push(quote ? subString.replace(reEscapeChar, "$1") : number3 || match);
        });
        return result;
      });
      module.exports = stringToPath;
    }
  });

  // node_modules/lodash/_arrayMap.js
  var require_arrayMap = __commonJS({
    "node_modules/lodash/_arrayMap.js"(exports, module) {
      function arrayMap(array, iteratee) {
        var index = -1, length = array == null ? 0 : array.length, result = Array(length);
        while (++index < length) {
          result[index] = iteratee(array[index], index, array);
        }
        return result;
      }
      module.exports = arrayMap;
    }
  });

  // node_modules/lodash/_baseToString.js
  var require_baseToString = __commonJS({
    "node_modules/lodash/_baseToString.js"(exports, module) {
      var Symbol2 = require_Symbol();
      var arrayMap = require_arrayMap();
      var isArray2 = require_isArray();
      var isSymbol = require_isSymbol();
      var INFINITY2 = 1 / 0;
      var symbolProto = Symbol2 ? Symbol2.prototype : void 0;
      var symbolToString = symbolProto ? symbolProto.toString : void 0;
      function baseToString(value) {
        if (typeof value == "string") {
          return value;
        }
        if (isArray2(value)) {
          return arrayMap(value, baseToString) + "";
        }
        if (isSymbol(value)) {
          return symbolToString ? symbolToString.call(value) : "";
        }
        var result = value + "";
        return result == "0" && 1 / value == -INFINITY2 ? "-0" : result;
      }
      module.exports = baseToString;
    }
  });

  // node_modules/lodash/toString.js
  var require_toString = __commonJS({
    "node_modules/lodash/toString.js"(exports, module) {
      var baseToString = require_baseToString();
      function toString(value) {
        return value == null ? "" : baseToString(value);
      }
      module.exports = toString;
    }
  });

  // node_modules/lodash/_castPath.js
  var require_castPath = __commonJS({
    "node_modules/lodash/_castPath.js"(exports, module) {
      var isArray2 = require_isArray();
      var isKey = require_isKey();
      var stringToPath = require_stringToPath();
      var toString = require_toString();
      function castPath(value, object) {
        if (isArray2(value)) {
          return value;
        }
        return isKey(value, object) ? [value] : stringToPath(toString(value));
      }
      module.exports = castPath;
    }
  });

  // node_modules/lodash/_toKey.js
  var require_toKey = __commonJS({
    "node_modules/lodash/_toKey.js"(exports, module) {
      var isSymbol = require_isSymbol();
      var INFINITY2 = 1 / 0;
      function toKey(value) {
        if (typeof value == "string" || isSymbol(value)) {
          return value;
        }
        var result = value + "";
        return result == "0" && 1 / value == -INFINITY2 ? "-0" : result;
      }
      module.exports = toKey;
    }
  });

  // node_modules/lodash/_baseGet.js
  var require_baseGet = __commonJS({
    "node_modules/lodash/_baseGet.js"(exports, module) {
      var castPath = require_castPath();
      var toKey = require_toKey();
      function baseGet(object, path2) {
        path2 = castPath(path2, object);
        var index = 0, length = path2.length;
        while (object != null && index < length) {
          object = object[toKey(path2[index++])];
        }
        return index && index == length ? object : void 0;
      }
      module.exports = baseGet;
    }
  });

  // node_modules/lodash/get.js
  var require_get = __commonJS({
    "node_modules/lodash/get.js"(exports, module) {
      var baseGet = require_baseGet();
      function get(object, path2, defaultValue) {
        var result = object == null ? void 0 : baseGet(object, path2);
        return result === void 0 ? defaultValue : result;
      }
      module.exports = get;
    }
  });

  // node_modules/lodash/_baseSet.js
  var require_baseSet = __commonJS({
    "node_modules/lodash/_baseSet.js"(exports, module) {
      var assignValue = require_assignValue();
      var castPath = require_castPath();
      var isIndex = require_isIndex();
      var isObject2 = require_isObject();
      var toKey = require_toKey();
      function baseSet(object, path2, value, customizer) {
        if (!isObject2(object)) {
          return object;
        }
        path2 = castPath(path2, object);
        var index = -1, length = path2.length, lastIndex = length - 1, nested = object;
        while (nested != null && ++index < length) {
          var key = toKey(path2[index]), newValue = value;
          if (key === "__proto__" || key === "constructor" || key === "prototype") {
            return object;
          }
          if (index != lastIndex) {
            var objValue = nested[key];
            newValue = customizer ? customizer(objValue, key, nested) : void 0;
            if (newValue === void 0) {
              newValue = isObject2(objValue) ? objValue : isIndex(path2[index + 1]) ? [] : {};
            }
          }
          assignValue(nested, key, newValue);
          nested = nested[key];
        }
        return object;
      }
      module.exports = baseSet;
    }
  });

  // node_modules/lodash/set.js
  var require_set = __commonJS({
    "node_modules/lodash/set.js"(exports, module) {
      var baseSet = require_baseSet();
      function set2(object, path2, value) {
        return object == null ? object : baseSet(object, path2, value);
      }
      module.exports = set2;
    }
  });

  // node_modules/lodash/isString.js
  var require_isString = __commonJS({
    "node_modules/lodash/isString.js"(exports, module) {
      var baseGetTag = require_baseGetTag();
      var isArray2 = require_isArray();
      var isObjectLike = require_isObjectLike();
      var stringTag = "[object String]";
      function isString(value) {
        return typeof value == "string" || !isArray2(value) && isObjectLike(value) && baseGetTag(value) == stringTag;
      }
      module.exports = isString;
    }
  });

  // node_modules/lodash/last.js
  var require_last = __commonJS({
    "node_modules/lodash/last.js"(exports, module) {
      function last(array) {
        var length = array == null ? 0 : array.length;
        return length ? array[length - 1] : void 0;
      }
      module.exports = last;
    }
  });

  // node_modules/lodash/_setCacheAdd.js
  var require_setCacheAdd = __commonJS({
    "node_modules/lodash/_setCacheAdd.js"(exports, module) {
      var HASH_UNDEFINED = "__lodash_hash_undefined__";
      function setCacheAdd(value) {
        this.__data__.set(value, HASH_UNDEFINED);
        return this;
      }
      module.exports = setCacheAdd;
    }
  });

  // node_modules/lodash/_setCacheHas.js
  var require_setCacheHas = __commonJS({
    "node_modules/lodash/_setCacheHas.js"(exports, module) {
      function setCacheHas(value) {
        return this.__data__.has(value);
      }
      module.exports = setCacheHas;
    }
  });

  // node_modules/lodash/_SetCache.js
  var require_SetCache = __commonJS({
    "node_modules/lodash/_SetCache.js"(exports, module) {
      var MapCache = require_MapCache();
      var setCacheAdd = require_setCacheAdd();
      var setCacheHas = require_setCacheHas();
      function SetCache(values) {
        var index = -1, length = values == null ? 0 : values.length;
        this.__data__ = new MapCache();
        while (++index < length) {
          this.add(values[index]);
        }
      }
      SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
      SetCache.prototype.has = setCacheHas;
      module.exports = SetCache;
    }
  });

  // node_modules/lodash/_baseFindIndex.js
  var require_baseFindIndex = __commonJS({
    "node_modules/lodash/_baseFindIndex.js"(exports, module) {
      function baseFindIndex(array, predicate, fromIndex, fromRight) {
        var length = array.length, index = fromIndex + (fromRight ? 1 : -1);
        while (fromRight ? index-- : ++index < length) {
          if (predicate(array[index], index, array)) {
            return index;
          }
        }
        return -1;
      }
      module.exports = baseFindIndex;
    }
  });

  // node_modules/lodash/_baseIsNaN.js
  var require_baseIsNaN = __commonJS({
    "node_modules/lodash/_baseIsNaN.js"(exports, module) {
      function baseIsNaN(value) {
        return value !== value;
      }
      module.exports = baseIsNaN;
    }
  });

  // node_modules/lodash/_strictIndexOf.js
  var require_strictIndexOf = __commonJS({
    "node_modules/lodash/_strictIndexOf.js"(exports, module) {
      function strictIndexOf(array, value, fromIndex) {
        var index = fromIndex - 1, length = array.length;
        while (++index < length) {
          if (array[index] === value) {
            return index;
          }
        }
        return -1;
      }
      module.exports = strictIndexOf;
    }
  });

  // node_modules/lodash/_baseIndexOf.js
  var require_baseIndexOf = __commonJS({
    "node_modules/lodash/_baseIndexOf.js"(exports, module) {
      var baseFindIndex = require_baseFindIndex();
      var baseIsNaN = require_baseIsNaN();
      var strictIndexOf = require_strictIndexOf();
      function baseIndexOf(array, value, fromIndex) {
        return value === value ? strictIndexOf(array, value, fromIndex) : baseFindIndex(array, baseIsNaN, fromIndex);
      }
      module.exports = baseIndexOf;
    }
  });

  // node_modules/lodash/_arrayIncludes.js
  var require_arrayIncludes = __commonJS({
    "node_modules/lodash/_arrayIncludes.js"(exports, module) {
      var baseIndexOf = require_baseIndexOf();
      function arrayIncludes(array, value) {
        var length = array == null ? 0 : array.length;
        return !!length && baseIndexOf(array, value, 0) > -1;
      }
      module.exports = arrayIncludes;
    }
  });

  // node_modules/lodash/_arrayIncludesWith.js
  var require_arrayIncludesWith = __commonJS({
    "node_modules/lodash/_arrayIncludesWith.js"(exports, module) {
      function arrayIncludesWith(array, value, comparator) {
        var index = -1, length = array == null ? 0 : array.length;
        while (++index < length) {
          if (comparator(value, array[index])) {
            return true;
          }
        }
        return false;
      }
      module.exports = arrayIncludesWith;
    }
  });

  // node_modules/lodash/_cacheHas.js
  var require_cacheHas = __commonJS({
    "node_modules/lodash/_cacheHas.js"(exports, module) {
      function cacheHas(cache, key) {
        return cache.has(key);
      }
      module.exports = cacheHas;
    }
  });

  // node_modules/lodash/_baseDifference.js
  var require_baseDifference = __commonJS({
    "node_modules/lodash/_baseDifference.js"(exports, module) {
      var SetCache = require_SetCache();
      var arrayIncludes = require_arrayIncludes();
      var arrayIncludesWith = require_arrayIncludesWith();
      var arrayMap = require_arrayMap();
      var baseUnary = require_baseUnary();
      var cacheHas = require_cacheHas();
      var LARGE_ARRAY_SIZE = 200;
      function baseDifference(array, values, iteratee, comparator) {
        var index = -1, includes = arrayIncludes, isCommon = true, length = array.length, result = [], valuesLength = values.length;
        if (!length) {
          return result;
        }
        if (iteratee) {
          values = arrayMap(values, baseUnary(iteratee));
        }
        if (comparator) {
          includes = arrayIncludesWith;
          isCommon = false;
        } else if (values.length >= LARGE_ARRAY_SIZE) {
          includes = cacheHas;
          isCommon = false;
          values = new SetCache(values);
        }
        outer:
          while (++index < length) {
            var value = array[index], computed = iteratee == null ? value : iteratee(value);
            value = comparator || value !== 0 ? value : 0;
            if (isCommon && computed === computed) {
              var valuesIndex = valuesLength;
              while (valuesIndex--) {
                if (values[valuesIndex] === computed) {
                  continue outer;
                }
              }
              result.push(value);
            } else if (!includes(values, computed, comparator)) {
              result.push(value);
            }
          }
        return result;
      }
      module.exports = baseDifference;
    }
  });

  // node_modules/lodash/without.js
  var require_without = __commonJS({
    "node_modules/lodash/without.js"(exports, module) {
      var baseDifference = require_baseDifference();
      var baseRest = require_baseRest();
      var isArrayLikeObject = require_isArrayLikeObject();
      var without = baseRest(function(array, values) {
        return isArrayLikeObject(array) ? baseDifference(array, values) : [];
      });
      module.exports = without;
    }
  });

  // node_modules/lodash/_basePickBy.js
  var require_basePickBy = __commonJS({
    "node_modules/lodash/_basePickBy.js"(exports, module) {
      var baseGet = require_baseGet();
      var baseSet = require_baseSet();
      var castPath = require_castPath();
      function basePickBy(object, paths, predicate) {
        var index = -1, length = paths.length, result = {};
        while (++index < length) {
          var path2 = paths[index], value = baseGet(object, path2);
          if (predicate(value, path2)) {
            baseSet(result, castPath(path2, object), value);
          }
        }
        return result;
      }
      module.exports = basePickBy;
    }
  });

  // node_modules/lodash/_baseHasIn.js
  var require_baseHasIn = __commonJS({
    "node_modules/lodash/_baseHasIn.js"(exports, module) {
      function baseHasIn(object, key) {
        return object != null && key in Object(object);
      }
      module.exports = baseHasIn;
    }
  });

  // node_modules/lodash/_hasPath.js
  var require_hasPath = __commonJS({
    "node_modules/lodash/_hasPath.js"(exports, module) {
      var castPath = require_castPath();
      var isArguments = require_isArguments();
      var isArray2 = require_isArray();
      var isIndex = require_isIndex();
      var isLength = require_isLength();
      var toKey = require_toKey();
      function hasPath(object, path2, hasFunc) {
        path2 = castPath(path2, object);
        var index = -1, length = path2.length, result = false;
        while (++index < length) {
          var key = toKey(path2[index]);
          if (!(result = object != null && hasFunc(object, key))) {
            break;
          }
          object = object[key];
        }
        if (result || ++index != length) {
          return result;
        }
        length = object == null ? 0 : object.length;
        return !!length && isLength(length) && isIndex(key, length) && (isArray2(object) || isArguments(object));
      }
      module.exports = hasPath;
    }
  });

  // node_modules/lodash/hasIn.js
  var require_hasIn = __commonJS({
    "node_modules/lodash/hasIn.js"(exports, module) {
      var baseHasIn = require_baseHasIn();
      var hasPath = require_hasPath();
      function hasIn(object, path2) {
        return object != null && hasPath(object, path2, baseHasIn);
      }
      module.exports = hasIn;
    }
  });

  // node_modules/lodash/_basePick.js
  var require_basePick = __commonJS({
    "node_modules/lodash/_basePick.js"(exports, module) {
      var basePickBy = require_basePickBy();
      var hasIn = require_hasIn();
      function basePick(object, paths) {
        return basePickBy(object, paths, function(value, path2) {
          return hasIn(object, path2);
        });
      }
      module.exports = basePick;
    }
  });

  // node_modules/lodash/_arrayPush.js
  var require_arrayPush = __commonJS({
    "node_modules/lodash/_arrayPush.js"(exports, module) {
      function arrayPush(array, values) {
        var index = -1, length = values.length, offset = array.length;
        while (++index < length) {
          array[offset + index] = values[index];
        }
        return array;
      }
      module.exports = arrayPush;
    }
  });

  // node_modules/lodash/_isFlattenable.js
  var require_isFlattenable = __commonJS({
    "node_modules/lodash/_isFlattenable.js"(exports, module) {
      var Symbol2 = require_Symbol();
      var isArguments = require_isArguments();
      var isArray2 = require_isArray();
      var spreadableSymbol = Symbol2 ? Symbol2.isConcatSpreadable : void 0;
      function isFlattenable(value) {
        return isArray2(value) || isArguments(value) || !!(spreadableSymbol && value && value[spreadableSymbol]);
      }
      module.exports = isFlattenable;
    }
  });

  // node_modules/lodash/_baseFlatten.js
  var require_baseFlatten = __commonJS({
    "node_modules/lodash/_baseFlatten.js"(exports, module) {
      var arrayPush = require_arrayPush();
      var isFlattenable = require_isFlattenable();
      function baseFlatten(array, depth, predicate, isStrict, result) {
        var index = -1, length = array.length;
        predicate || (predicate = isFlattenable);
        result || (result = []);
        while (++index < length) {
          var value = array[index];
          if (depth > 0 && predicate(value)) {
            if (depth > 1) {
              baseFlatten(value, depth - 1, predicate, isStrict, result);
            } else {
              arrayPush(result, value);
            }
          } else if (!isStrict) {
            result[result.length] = value;
          }
        }
        return result;
      }
      module.exports = baseFlatten;
    }
  });

  // node_modules/lodash/flatten.js
  var require_flatten = __commonJS({
    "node_modules/lodash/flatten.js"(exports, module) {
      var baseFlatten = require_baseFlatten();
      function flatten(array) {
        var length = array == null ? 0 : array.length;
        return length ? baseFlatten(array, 1) : [];
      }
      module.exports = flatten;
    }
  });

  // node_modules/lodash/_flatRest.js
  var require_flatRest = __commonJS({
    "node_modules/lodash/_flatRest.js"(exports, module) {
      var flatten = require_flatten();
      var overRest = require_overRest();
      var setToString = require_setToString();
      function flatRest(func) {
        return setToString(overRest(func, void 0, flatten), func + "");
      }
      module.exports = flatRest;
    }
  });

  // node_modules/lodash/pick.js
  var require_pick = __commonJS({
    "node_modules/lodash/pick.js"(exports, module) {
      var basePick = require_basePick();
      var flatRest = require_flatRest();
      var pick = flatRest(function(object, paths) {
        return object == null ? {} : basePick(object, paths);
      });
      module.exports = pick;
    }
  });

  // node_modules/lodash/_arraySome.js
  var require_arraySome = __commonJS({
    "node_modules/lodash/_arraySome.js"(exports, module) {
      function arraySome(array, predicate) {
        var index = -1, length = array == null ? 0 : array.length;
        while (++index < length) {
          if (predicate(array[index], index, array)) {
            return true;
          }
        }
        return false;
      }
      module.exports = arraySome;
    }
  });

  // node_modules/lodash/_equalArrays.js
  var require_equalArrays = __commonJS({
    "node_modules/lodash/_equalArrays.js"(exports, module) {
      var SetCache = require_SetCache();
      var arraySome = require_arraySome();
      var cacheHas = require_cacheHas();
      var COMPARE_PARTIAL_FLAG = 1;
      var COMPARE_UNORDERED_FLAG = 2;
      function equalArrays(array, other, bitmask, customizer, equalFunc, stack) {
        var isPartial = bitmask & COMPARE_PARTIAL_FLAG, arrLength = array.length, othLength = other.length;
        if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
          return false;
        }
        var arrStacked = stack.get(array);
        var othStacked = stack.get(other);
        if (arrStacked && othStacked) {
          return arrStacked == other && othStacked == array;
        }
        var index = -1, result = true, seen = bitmask & COMPARE_UNORDERED_FLAG ? new SetCache() : void 0;
        stack.set(array, other);
        stack.set(other, array);
        while (++index < arrLength) {
          var arrValue = array[index], othValue = other[index];
          if (customizer) {
            var compared = isPartial ? customizer(othValue, arrValue, index, other, array, stack) : customizer(arrValue, othValue, index, array, other, stack);
          }
          if (compared !== void 0) {
            if (compared) {
              continue;
            }
            result = false;
            break;
          }
          if (seen) {
            if (!arraySome(other, function(othValue2, othIndex) {
              if (!cacheHas(seen, othIndex) && (arrValue === othValue2 || equalFunc(arrValue, othValue2, bitmask, customizer, stack))) {
                return seen.push(othIndex);
              }
            })) {
              result = false;
              break;
            }
          } else if (!(arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
            result = false;
            break;
          }
        }
        stack["delete"](array);
        stack["delete"](other);
        return result;
      }
      module.exports = equalArrays;
    }
  });

  // node_modules/lodash/_mapToArray.js
  var require_mapToArray = __commonJS({
    "node_modules/lodash/_mapToArray.js"(exports, module) {
      function mapToArray(map3) {
        var index = -1, result = Array(map3.size);
        map3.forEach(function(value, key) {
          result[++index] = [key, value];
        });
        return result;
      }
      module.exports = mapToArray;
    }
  });

  // node_modules/lodash/_setToArray.js
  var require_setToArray = __commonJS({
    "node_modules/lodash/_setToArray.js"(exports, module) {
      function setToArray(set2) {
        var index = -1, result = Array(set2.size);
        set2.forEach(function(value) {
          result[++index] = value;
        });
        return result;
      }
      module.exports = setToArray;
    }
  });

  // node_modules/lodash/_equalByTag.js
  var require_equalByTag = __commonJS({
    "node_modules/lodash/_equalByTag.js"(exports, module) {
      var Symbol2 = require_Symbol();
      var Uint8Array2 = require_Uint8Array();
      var eq2 = require_eq();
      var equalArrays = require_equalArrays();
      var mapToArray = require_mapToArray();
      var setToArray = require_setToArray();
      var COMPARE_PARTIAL_FLAG = 1;
      var COMPARE_UNORDERED_FLAG = 2;
      var boolTag = "[object Boolean]";
      var dateTag = "[object Date]";
      var errorTag = "[object Error]";
      var mapTag = "[object Map]";
      var numberTag = "[object Number]";
      var regexpTag = "[object RegExp]";
      var setTag = "[object Set]";
      var stringTag = "[object String]";
      var symbolTag = "[object Symbol]";
      var arrayBufferTag = "[object ArrayBuffer]";
      var dataViewTag = "[object DataView]";
      var symbolProto = Symbol2 ? Symbol2.prototype : void 0;
      var symbolValueOf = symbolProto ? symbolProto.valueOf : void 0;
      function equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {
        switch (tag) {
          case dataViewTag:
            if (object.byteLength != other.byteLength || object.byteOffset != other.byteOffset) {
              return false;
            }
            object = object.buffer;
            other = other.buffer;
          case arrayBufferTag:
            if (object.byteLength != other.byteLength || !equalFunc(new Uint8Array2(object), new Uint8Array2(other))) {
              return false;
            }
            return true;
          case boolTag:
          case dateTag:
          case numberTag:
            return eq2(+object, +other);
          case errorTag:
            return object.name == other.name && object.message == other.message;
          case regexpTag:
          case stringTag:
            return object == other + "";
          case mapTag:
            var convert = mapToArray;
          case setTag:
            var isPartial = bitmask & COMPARE_PARTIAL_FLAG;
            convert || (convert = setToArray);
            if (object.size != other.size && !isPartial) {
              return false;
            }
            var stacked = stack.get(object);
            if (stacked) {
              return stacked == other;
            }
            bitmask |= COMPARE_UNORDERED_FLAG;
            stack.set(object, other);
            var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);
            stack["delete"](object);
            return result;
          case symbolTag:
            if (symbolValueOf) {
              return symbolValueOf.call(object) == symbolValueOf.call(other);
            }
        }
        return false;
      }
      module.exports = equalByTag;
    }
  });

  // node_modules/lodash/_baseGetAllKeys.js
  var require_baseGetAllKeys = __commonJS({
    "node_modules/lodash/_baseGetAllKeys.js"(exports, module) {
      var arrayPush = require_arrayPush();
      var isArray2 = require_isArray();
      function baseGetAllKeys(object, keysFunc, symbolsFunc) {
        var result = keysFunc(object);
        return isArray2(object) ? result : arrayPush(result, symbolsFunc(object));
      }
      module.exports = baseGetAllKeys;
    }
  });

  // node_modules/lodash/_arrayFilter.js
  var require_arrayFilter = __commonJS({
    "node_modules/lodash/_arrayFilter.js"(exports, module) {
      function arrayFilter(array, predicate) {
        var index = -1, length = array == null ? 0 : array.length, resIndex = 0, result = [];
        while (++index < length) {
          var value = array[index];
          if (predicate(value, index, array)) {
            result[resIndex++] = value;
          }
        }
        return result;
      }
      module.exports = arrayFilter;
    }
  });

  // node_modules/lodash/stubArray.js
  var require_stubArray = __commonJS({
    "node_modules/lodash/stubArray.js"(exports, module) {
      function stubArray() {
        return [];
      }
      module.exports = stubArray;
    }
  });

  // node_modules/lodash/_getSymbols.js
  var require_getSymbols = __commonJS({
    "node_modules/lodash/_getSymbols.js"(exports, module) {
      var arrayFilter = require_arrayFilter();
      var stubArray = require_stubArray();
      var objectProto = Object.prototype;
      var propertyIsEnumerable = objectProto.propertyIsEnumerable;
      var nativeGetSymbols = Object.getOwnPropertySymbols;
      var getSymbols = !nativeGetSymbols ? stubArray : function(object) {
        if (object == null) {
          return [];
        }
        object = Object(object);
        return arrayFilter(nativeGetSymbols(object), function(symbol) {
          return propertyIsEnumerable.call(object, symbol);
        });
      };
      module.exports = getSymbols;
    }
  });

  // node_modules/lodash/_nativeKeys.js
  var require_nativeKeys = __commonJS({
    "node_modules/lodash/_nativeKeys.js"(exports, module) {
      var overArg = require_overArg();
      var nativeKeys = overArg(Object.keys, Object);
      module.exports = nativeKeys;
    }
  });

  // node_modules/lodash/_baseKeys.js
  var require_baseKeys = __commonJS({
    "node_modules/lodash/_baseKeys.js"(exports, module) {
      var isPrototype = require_isPrototype();
      var nativeKeys = require_nativeKeys();
      var objectProto = Object.prototype;
      var hasOwnProperty = objectProto.hasOwnProperty;
      function baseKeys(object) {
        if (!isPrototype(object)) {
          return nativeKeys(object);
        }
        var result = [];
        for (var key in Object(object)) {
          if (hasOwnProperty.call(object, key) && key != "constructor") {
            result.push(key);
          }
        }
        return result;
      }
      module.exports = baseKeys;
    }
  });

  // node_modules/lodash/keys.js
  var require_keys = __commonJS({
    "node_modules/lodash/keys.js"(exports, module) {
      var arrayLikeKeys = require_arrayLikeKeys();
      var baseKeys = require_baseKeys();
      var isArrayLike = require_isArrayLike();
      function keys(object) {
        return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
      }
      module.exports = keys;
    }
  });

  // node_modules/lodash/_getAllKeys.js
  var require_getAllKeys = __commonJS({
    "node_modules/lodash/_getAllKeys.js"(exports, module) {
      var baseGetAllKeys = require_baseGetAllKeys();
      var getSymbols = require_getSymbols();
      var keys = require_keys();
      function getAllKeys(object) {
        return baseGetAllKeys(object, keys, getSymbols);
      }
      module.exports = getAllKeys;
    }
  });

  // node_modules/lodash/_equalObjects.js
  var require_equalObjects = __commonJS({
    "node_modules/lodash/_equalObjects.js"(exports, module) {
      var getAllKeys = require_getAllKeys();
      var COMPARE_PARTIAL_FLAG = 1;
      var objectProto = Object.prototype;
      var hasOwnProperty = objectProto.hasOwnProperty;
      function equalObjects(object, other, bitmask, customizer, equalFunc, stack) {
        var isPartial = bitmask & COMPARE_PARTIAL_FLAG, objProps = getAllKeys(object), objLength = objProps.length, othProps = getAllKeys(other), othLength = othProps.length;
        if (objLength != othLength && !isPartial) {
          return false;
        }
        var index = objLength;
        while (index--) {
          var key = objProps[index];
          if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {
            return false;
          }
        }
        var objStacked = stack.get(object);
        var othStacked = stack.get(other);
        if (objStacked && othStacked) {
          return objStacked == other && othStacked == object;
        }
        var result = true;
        stack.set(object, other);
        stack.set(other, object);
        var skipCtor = isPartial;
        while (++index < objLength) {
          key = objProps[index];
          var objValue = object[key], othValue = other[key];
          if (customizer) {
            var compared = isPartial ? customizer(othValue, objValue, key, other, object, stack) : customizer(objValue, othValue, key, object, other, stack);
          }
          if (!(compared === void 0 ? objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack) : compared)) {
            result = false;
            break;
          }
          skipCtor || (skipCtor = key == "constructor");
        }
        if (result && !skipCtor) {
          var objCtor = object.constructor, othCtor = other.constructor;
          if (objCtor != othCtor && ("constructor" in object && "constructor" in other) && !(typeof objCtor == "function" && objCtor instanceof objCtor && typeof othCtor == "function" && othCtor instanceof othCtor)) {
            result = false;
          }
        }
        stack["delete"](object);
        stack["delete"](other);
        return result;
      }
      module.exports = equalObjects;
    }
  });

  // node_modules/lodash/_DataView.js
  var require_DataView = __commonJS({
    "node_modules/lodash/_DataView.js"(exports, module) {
      var getNative = require_getNative();
      var root = require_root();
      var DataView2 = getNative(root, "DataView");
      module.exports = DataView2;
    }
  });

  // node_modules/lodash/_Promise.js
  var require_Promise = __commonJS({
    "node_modules/lodash/_Promise.js"(exports, module) {
      var getNative = require_getNative();
      var root = require_root();
      var Promise2 = getNative(root, "Promise");
      module.exports = Promise2;
    }
  });

  // node_modules/lodash/_Set.js
  var require_Set = __commonJS({
    "node_modules/lodash/_Set.js"(exports, module) {
      var getNative = require_getNative();
      var root = require_root();
      var Set2 = getNative(root, "Set");
      module.exports = Set2;
    }
  });

  // node_modules/lodash/_WeakMap.js
  var require_WeakMap = __commonJS({
    "node_modules/lodash/_WeakMap.js"(exports, module) {
      var getNative = require_getNative();
      var root = require_root();
      var WeakMap2 = getNative(root, "WeakMap");
      module.exports = WeakMap2;
    }
  });

  // node_modules/lodash/_getTag.js
  var require_getTag = __commonJS({
    "node_modules/lodash/_getTag.js"(exports, module) {
      var DataView2 = require_DataView();
      var Map2 = require_Map();
      var Promise2 = require_Promise();
      var Set2 = require_Set();
      var WeakMap2 = require_WeakMap();
      var baseGetTag = require_baseGetTag();
      var toSource = require_toSource();
      var mapTag = "[object Map]";
      var objectTag = "[object Object]";
      var promiseTag = "[object Promise]";
      var setTag = "[object Set]";
      var weakMapTag = "[object WeakMap]";
      var dataViewTag = "[object DataView]";
      var dataViewCtorString = toSource(DataView2);
      var mapCtorString = toSource(Map2);
      var promiseCtorString = toSource(Promise2);
      var setCtorString = toSource(Set2);
      var weakMapCtorString = toSource(WeakMap2);
      var getTag = baseGetTag;
      if (DataView2 && getTag(new DataView2(new ArrayBuffer(1))) != dataViewTag || Map2 && getTag(new Map2()) != mapTag || Promise2 && getTag(Promise2.resolve()) != promiseTag || Set2 && getTag(new Set2()) != setTag || WeakMap2 && getTag(new WeakMap2()) != weakMapTag) {
        getTag = function(value) {
          var result = baseGetTag(value), Ctor = result == objectTag ? value.constructor : void 0, ctorString = Ctor ? toSource(Ctor) : "";
          if (ctorString) {
            switch (ctorString) {
              case dataViewCtorString:
                return dataViewTag;
              case mapCtorString:
                return mapTag;
              case promiseCtorString:
                return promiseTag;
              case setCtorString:
                return setTag;
              case weakMapCtorString:
                return weakMapTag;
            }
          }
          return result;
        };
      }
      module.exports = getTag;
    }
  });

  // node_modules/lodash/_baseIsEqualDeep.js
  var require_baseIsEqualDeep = __commonJS({
    "node_modules/lodash/_baseIsEqualDeep.js"(exports, module) {
      var Stack = require_Stack();
      var equalArrays = require_equalArrays();
      var equalByTag = require_equalByTag();
      var equalObjects = require_equalObjects();
      var getTag = require_getTag();
      var isArray2 = require_isArray();
      var isBuffer = require_isBuffer();
      var isTypedArray = require_isTypedArray();
      var COMPARE_PARTIAL_FLAG = 1;
      var argsTag = "[object Arguments]";
      var arrayTag = "[object Array]";
      var objectTag = "[object Object]";
      var objectProto = Object.prototype;
      var hasOwnProperty = objectProto.hasOwnProperty;
      function baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {
        var objIsArr = isArray2(object), othIsArr = isArray2(other), objTag = objIsArr ? arrayTag : getTag(object), othTag = othIsArr ? arrayTag : getTag(other);
        objTag = objTag == argsTag ? objectTag : objTag;
        othTag = othTag == argsTag ? objectTag : othTag;
        var objIsObj = objTag == objectTag, othIsObj = othTag == objectTag, isSameTag = objTag == othTag;
        if (isSameTag && isBuffer(object)) {
          if (!isBuffer(other)) {
            return false;
          }
          objIsArr = true;
          objIsObj = false;
        }
        if (isSameTag && !objIsObj) {
          stack || (stack = new Stack());
          return objIsArr || isTypedArray(object) ? equalArrays(object, other, bitmask, customizer, equalFunc, stack) : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);
        }
        if (!(bitmask & COMPARE_PARTIAL_FLAG)) {
          var objIsWrapped = objIsObj && hasOwnProperty.call(object, "__wrapped__"), othIsWrapped = othIsObj && hasOwnProperty.call(other, "__wrapped__");
          if (objIsWrapped || othIsWrapped) {
            var objUnwrapped = objIsWrapped ? object.value() : object, othUnwrapped = othIsWrapped ? other.value() : other;
            stack || (stack = new Stack());
            return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);
          }
        }
        if (!isSameTag) {
          return false;
        }
        stack || (stack = new Stack());
        return equalObjects(object, other, bitmask, customizer, equalFunc, stack);
      }
      module.exports = baseIsEqualDeep;
    }
  });

  // node_modules/lodash/_baseIsEqual.js
  var require_baseIsEqual = __commonJS({
    "node_modules/lodash/_baseIsEqual.js"(exports, module) {
      var baseIsEqualDeep = require_baseIsEqualDeep();
      var isObjectLike = require_isObjectLike();
      function baseIsEqual(value, other, bitmask, customizer, stack) {
        if (value === other) {
          return true;
        }
        if (value == null || other == null || !isObjectLike(value) && !isObjectLike(other)) {
          return value !== value && other !== other;
        }
        return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);
      }
      module.exports = baseIsEqual;
    }
  });

  // node_modules/lodash/isEqual.js
  var require_isEqual = __commonJS({
    "node_modules/lodash/isEqual.js"(exports, module) {
      var baseIsEqual = require_baseIsEqual();
      function isEqual2(value, other) {
        return baseIsEqual(value, other);
      }
      module.exports = isEqual2;
    }
  });

  // assets/src/admin/js/AdminPages/Partials/index.js
  var { Affix, Row, Col, Popover, Button } = window.antd;
  var sidebar = wp.data.select("getgenie").sidebar();
  var rowLayout = { gutter: 32 };
  var { useState } = window.React;
  var content = /* @__PURE__ */ React.createElement("div", {
    className: "getgenie-admin-header-menu"
  }, /* @__PURE__ */ React.createElement("a", {
    target: "_blank",
    href: "https://getgenie.ai/docs/"
  }, /* @__PURE__ */ React.createElement("span", {
    className: "getgenie-icon-copy_02"
  }), sidebar.__(" Documentation", "getgenie")), /* @__PURE__ */ React.createElement("a", {
    target: "_blank",
    href: "https://getgenie.ai/support-ticket/"
  }, /* @__PURE__ */ React.createElement("span", {
    className: "getgenie-icon-chat"
  }), sidebar.__(" Help & Support", "getgenie")));
  function HeaderAdminPage() {
    const [open2, setOpen] = useState(false);
    const showHistory = () => {
      wp.data.dispatch("getgenie").setSidebar({
        open: true,
        component: "UserHistory"
      });
    };
    return /* @__PURE__ */ React.createElement("header", null, /* @__PURE__ */ React.createElement(Affix, {
      offsetTop: 32,
      className: "getgenie-plugin-header"
    }, /* @__PURE__ */ React.createElement("div", {
      className: "getgenie-dashboard-header"
    }, /* @__PURE__ */ React.createElement(Row, {
      className: "getgenie-header-row",
      ...rowLayout
    }, /* @__PURE__ */ React.createElement(Col, {
      sm: 10,
      xs: 24
    }, /* @__PURE__ */ React.createElement("span", {
      className: "getgenie-dashboard-header-tooltip"
    }, "V" + window.getGenie.config.version || "1.0"), /* @__PURE__ */ React.createElement("img", {
      className: "getgenie-dashboard-header-image",
      src: `${window.getGenie.config.assetsUrl}/dist/admin/images/logo_black.svg`,
      alt: "Genie AI"
    })), /* @__PURE__ */ React.createElement(Col, {
      sm: 10,
      xs: 24
    }, /* @__PURE__ */ React.createElement("div", {
      className: "getgenie-dashboard-header-dropdown"
    }, /* @__PURE__ */ React.createElement(Button, {
      className: "show-history-btn",
      onClick: showHistory
    }, "Writing History"), /* @__PURE__ */ React.createElement(Popover, {
      placement: "bottom",
      content,
      overlayClassName: "getgenie-dashboard-header-dropdown-content",
      trigger: "click"
    }, /* @__PURE__ */ React.createElement(Button, {
      className: "getgenie-dashboard-header-dropdown-button"
    }, /* @__PURE__ */ React.createElement("span", {
      className: "getgenie-dashboard-header-dropdown-button-svg getgenie-icon-help"
    }), " ", sidebar.__("Help/Resources", "getgenie"), " ", /* @__PURE__ */ React.createElement("span", {
      className: "getgenie-icon-arrow_down"
    })))))))));
  }

  // assets/src/admin/js/Common/Libs/Notification.js
  var { notification } = window.antd;
  var Notification = (type, title, message = "", placement = "top") => {
    const sidebar4 = wp.data.select("getgenie").sidebar();
    notification.config({
      getContainer: () => sidebar4.rootContainer,
      placement
    });
    notification[type]({
      message: title,
      description: /* @__PURE__ */ React.createElement("span", {
        dangerouslySetInnerHTML: { __html: message }
      }),
      duration: 8,
      zIndex: 999999
    });
  };
  var Notification_default = Notification;

  // assets/src/admin/js/AdminPages/HelpAdminPage/index.js
  var { useState: useState2, useEffect } = window.React;
  function HelpAdminPage() {
    const sidebar4 = wp.data.select("getgenie").sidebar();
    const imageUrl = `${window.getGenie.config.assetsUrl}dist/admin/images`;
    const data = [
      {
        label: sidebar4.__("Support Center", "getgenie"),
        desc: sidebar4.__("Our experienced support team is ready to resolve your issues any time.", "getgenie"),
        image: `${imageUrl}/support.png`,
        url: "https://getgenie.ai/support-ticket/"
      },
      {
        label: sidebar4.__("Join The Community", "getgenie"),
        desc: sidebar4.__("Follow us and stay connected for all the latest news and updates of GetGenie AI.", "getgenie"),
        image: `${imageUrl}/community.png`,
        url: "https://www.facebook.com/groups/792474565423684"
      },
      {
        label: sidebar4.__("Video Tutorials", "getgenie"),
        desc: sidebar4.__("Learn the step by step process for developing your site easily from video tutorials.", "getgenie"),
        image: `${imageUrl}/videos.png`,
        url: "https://www.youtube.com/channel/UCzPzYrqhFgvyvmm0uoLG6Jw"
      },
      {
        label: sidebar4.__("Request A Feature", "getgenie"),
        desc: sidebar4.__("Have any special feature in mind? Let us know through the feature request.", "getgenie"),
        image: `${imageUrl}/request.png`,
        url: "https://getgenie.ai/roadmap/"
      },
      {
        label: sidebar4.__("Documentation", "getgenie"),
        desc: sidebar4.__("Detailed documentation to help you understand the functionality of each feature.", "getgenie"),
        image: `${imageUrl}/documentation.png`,
        url: "https://getgenie.ai/docs/"
      },
      {
        label: sidebar4.__("Public Roadmap", "getgenie"),
        desc: sidebar4.__("Check our upcoming new features, detailed development stories and tasks", "getgenie"),
        image: `${imageUrl}/roadmaps.png`,
        url: "https://getgenie.ai/roadmap/"
      }
    ];
    const products = [
      {
        label: "ElementsKit",
        desc: sidebar4.__("All-in-One drag and drop Addons for Elementor", "getgenie"),
        image: `${imageUrl}/elementskit.svg`,
        url: "https://wpmet.com/plugin/elementskit/"
      },
      {
        label: "MetForm",
        desc: sidebar4.__("Most flexible drag-and-drop form builder", "getgenie"),
        image: `${imageUrl}/metform-logo.svg`,
        url: "https://wpmet.com/plugin/metform/"
      },
      {
        label: "ShopEngine",
        desc: sidebar4.__("All-in-one WooCommerce builder addon for Elementor", "getgenie"),
        image: `${imageUrl}/shopengine.svg`,
        url: "https://wpmet.com/plugin/shopengine/"
      },
      {
        label: "WP Social",
        desc: sidebar4.__("Integrate all your social media to your website", "getgenie"),
        image: `${imageUrl}/wp-social-logo.svg`,
        url: "https://wpmet.com/plugin/wp-social/"
      },
      {
        label: "Ultimate Review",
        desc: sidebar4.__("Integrate various styled review system in your website", "getgenie"),
        image: `${imageUrl}/untimate-review.svg`,
        url: "https://products.wpmet.com/review/?ref=wpmet"
      },
      {
        label: "Fundraising & Donation Platform",
        desc: sidebar4.__("Enable donation system in your website", "getgenie"),
        image: `${imageUrl}/fundraising.svg`,
        url: "https://products.wpmet.com/crowdfunding/?ref=wpmet"
      }
    ];
    const isLicenseActivated = !!window.getGenie.config.siteToken;
    const [isChecked, setIsChecked] = useState2(true);
    useEffect(() => {
      wp.apiFetch({
        path: "getgenie/v1/admin-config",
        method: "GET"
      }).then((res) => {
        setIsChecked(res?.data?.user_consent !== void 0 ? res.data.user_consent == 1 : true);
      });
    }, []);
    const handleUserConsent = () => {
      setIsChecked(!isChecked);
      wp.apiFetch({
        path: "getgenie/v1/admin-config",
        method: "POST",
        data: { user_consent: !isChecked ? 1 : 0 }
      }).then((res) => {
        setIsChecked(res?.data?.user_consent == 1 ? true : false);
        Notification_default("success", "Success!", "Your action was completed.", "topRight");
      });
    };
    return /* @__PURE__ */ React.createElement(React.Fragment, null, /* @__PURE__ */ React.createElement(HeaderAdminPage, {
      headerRightVisible: false
    }), /* @__PURE__ */ React.createElement("div", {
      className: "getgenie-get-help-page"
    }, /* @__PURE__ */ React.createElement("div", {
      className: "getgenie-helpful-links"
    }, data.map(
      (item, index) => /* @__PURE__ */ React.createElement("a", {
        key: index,
        className: "getgenie-help-card",
        href: item.url,
        target: "_blank"
      }, /* @__PURE__ */ React.createElement("img", {
        src: item.image,
        alt: item.label
      }), /* @__PURE__ */ React.createElement("label", null, item.label), /* @__PURE__ */ React.createElement("span", null, item.desc))
    )), isLicenseActivated && /* @__PURE__ */ React.createElement("div", {
      className: "getgenie-user-consent-wrapper"
    }, /* @__PURE__ */ React.createElement("div", {
      className: "getgenie-user-consent"
    }, /* @__PURE__ */ React.createElement("input", {
      onChange: handleUserConsent,
      checked: isChecked,
      type: "checkbox",
      className: "getgenie-user-consent-checkbox",
      id: "getgenie-user-consent-checkbox"
    }), /* @__PURE__ */ React.createElement("label", {
      htmlFor: "getgenie-user-consent-checkbox"
    }, "Show update & fix related important messages, essential tutorials and promotional images on WP Dashboard."))), /* @__PURE__ */ React.createElement("div", {
      className: "getgenie-products"
    }, /* @__PURE__ */ React.createElement("div", {
      className: "getgenie-products__header"
    }, /* @__PURE__ */ React.createElement("h1", null, sidebar4.__("Take your website to the next level", "getgenie")), /* @__PURE__ */ React.createElement("p", null, sidebar4.__("We have some plugins you can install to get most from Wordpress.", "getgenie"), /* @__PURE__ */ React.createElement("br", null), " ", sidebar4.__("These are absolute FREE to use.", "getgenie"))), /* @__PURE__ */ React.createElement("div", {
      className: "getgenie-products__content"
    }, products.map(
      (item, index) => /* @__PURE__ */ React.createElement("a", {
        key: index,
        className: "getgenie-help-card",
        href: item.url,
        target: "_blank"
      }, /* @__PURE__ */ React.createElement("label", null, /* @__PURE__ */ React.createElement("img", {
        src: item.image,
        alt: item.label
      }), " ", item.label), /* @__PURE__ */ React.createElement("span", null, item.desc))
    )))));
  }

  // assets/src/admin/js/AdminPages/HistoryAdminPage/index.js
  var { Form, Tooltip, Typography } = window.antd;
  var { useEffect: useEffect2, useState: useState3 } = window.React;
  var { HandleFetch, HandleResponse } = window.getGenie.Components.Common.RequestManager;
  var { Libs, Utilities } = window.getGenie.Components.Common;
  var { ComposeComponents } = window.getGenie.Components.Common.ReduxManager;
  var HistoryAdminPage = ComposeComponents(({ setInput, getInputs, sidebar: sidebar4 }) => {
    const [clickedRow, setClickedRow] = useState3({});
    const [historyDataList, setHistoryDataList] = useState3([]);
    const [currentPage, setCurrentPage] = useState3(1);
    const [loading, setLoading] = useState3(false);
    const [isModalVisible, setIsModalVisible] = useState3(false);
    const [showRowData, setShowRowData] = useState3(false);
    const [users, setUsers] = useState3([]);
    const [showClearBtn, setShowClearBtn] = useState3(false);
    const [showTooltip, setShowTooltip] = useState3(null);
    const getHistoryData = () => {
      HandleFetch((res) => {
        HandleResponse(res, () => {
          setHistoryDataList(res.data.history);
        });
        setLoading(false);
      }, "historyData");
    };
    useEffect2(() => {
      getHistoryData();
    }, []);
    const columns = [
      {
        title: "Template Name",
        dataIndex: "templateTitle",
        key: "templateTitle",
        width: "25%"
      },
      {
        title: "Input",
        dataIndex: "input",
        key: "input",
        responsive: ["sm"],
        render: (data) => {
          if (typeof data == "string") {
            return data;
          }
          let input = "";
          for (const [key, value] of Object.entries(data)) {
            let result = key.replace(/([A-Z])/g, " $1");
            let finalResult = result.charAt(0).toUpperCase() + result.slice(1);
            input += `<strong>${finalResult}:</strong> ${value}; `;
          }
          return /* @__PURE__ */ React.createElement("span", {
            key: "${key}",
            dangerouslySetInnerHTML: { __html: input }
          });
        }
      },
      {
        title: "Date",
        dataIndex: "date",
        key: "date",
        width: "20%",
        responsive: ["md"]
      }
    ];
    const rowData = (r6) => ({
      onClick: () => {
        setShowRowData(true);
        setClickedRow(r6);
        setIsModalVisible(true);
      }
    });
    const loadMoreData = () => {
      setLoading(true);
      setCurrentPage(currentPage + 1);
      getHistoryData();
    };
    const loadOptions = (inputValue) => {
      HandleFetch((res) => {
        HandleResponse(res, () => {
          setUsers([...users, ...res.data.list]);
        });
      }, "userList", {
        userId: inputValue
      });
    };
    let interval;
    const handleSelectInputChange = (input) => {
      setLoadingUser(true);
      if (interval) {
        clearInterval(interval);
      }
      interval = setTimeout(() => {
        setLoadingUser(false);
        let updatedUsers = [...users, {
          value: input,
          label: input
        }];
        updatedUsers = updatedUsers.filter((item, index, array) => {
          return array.findIndex((t5) => t5.value == item.value && t5.label == item.label) == index;
        });
        setUsers(updatedUsers);
      }, 3e3);
    };
    const clearInputs = () => {
      setInput("searchInput", "");
      setInput("dateRange", []);
      setInput("selectedUser", "");
      setShowClearBtn(false);
    };
    const onFinish = () => {
      setLoading(true);
      let data = {};
      data.page = currentPage;
      data.perPage = 20;
      data.searchKeyword = getInputs["searchInput"] || "";
      data.dateRange = (getInputs["dateRange"] || []).join("-");
      data.wpUser = getInputs["selectedUser"] || "";
      setCurrentPage(1);
      HandleFetch((res) => {
        HandleResponse(res, () => {
          setHistoryData(res.data.list);
        });
      }, "historyData", {});
      setTimeout(() => {
        setLoading(false);
      }, 2e3);
      clearInputs();
      setShowClearBtn(false);
    };
    const copyTextAction = (value) => {
      sidebar4.rootContainer.querySelectorAll(".ant-tooltip").forEach((item) => item.style.visibility = "visible");
      let copyAbleText = value.replace(/<br\s*\/?>/gi, "\n");
      Utilities.GenieHelpers.copyToClipboard(copyAbleText).then(() => {
        setShowTooltip(value);
        setTimeout(() => {
          setShowTooltip(null);
        }, 2e3);
      }).catch(() => console.log("Error while copying."));
    };
    const hideTooltip = () => {
      sidebar4.rootContainer.querySelectorAll(".ant-tooltip").forEach((item) => item.style.visibility = "hidden");
    };
    useEffect2(() => {
      if (getInputs["searchInput"]?.length || getInputs["dateRange"]?.length || getInputs["selectedUser"]) {
        setShowClearBtn(true);
      } else {
        setShowClearBtn(false);
      }
    }, [getInputs["searchInput"], getInputs["dateRange"], getInputs["selectedUser"]]);
    return /* @__PURE__ */ React.createElement(React.Fragment, null, /* @__PURE__ */ React.createElement(HeaderAdminPage, null), /* @__PURE__ */ React.createElement("div", {
      className: "getgenie-info-wrapper"
    }, /* @__PURE__ */ React.createElement("div", {
      className: "getgenie-history"
    }, /* @__PURE__ */ React.createElement(Form, {
      layout: "vertical",
      onFinish
    }, /* @__PURE__ */ React.createElement(Typography.Title, {
      level: 2
    }, "Genie's ", sidebar4.__("History", "getgenie")), /* @__PURE__ */ React.createElement("div", {
      className: "getgenie-table"
    }, /* @__PURE__ */ React.createElement(Libs.Table, {
      rowData,
      columns,
      dataSource: historyDataList,
      pagination: true
    })), showRowData && /* @__PURE__ */ React.createElement(Libs.Modal, {
      className: "getgenie-history-modal",
      closeIcon: /* @__PURE__ */ React.createElement("span", {
        className: "getgenie-icon-close1"
      }),
      isModalVisible,
      setIsModalVisible,
      onClose: hideTooltip,
      centered: true,
      footer: null
    }, /* @__PURE__ */ React.createElement("div", {
      className: "getgenie-modal-date"
    }, /* @__PURE__ */ React.createElement("h5", {
      className: "gg-label"
    }, sidebar4.__("Template Name", "getgenie"), ": ", /* @__PURE__ */ React.createElement("span", {
      className: "gg-value"
    }, clickedRow?.templateTitle)), /* @__PURE__ */ React.createElement("h5", {
      className: "gg-label"
    }, sidebar4.__("Creativity Level", "getgenie"), ": ", /* @__PURE__ */ React.createElement("span", {
      className: "gg-value"
    }, clickedRow?.creativityLevel)), /* @__PURE__ */ React.createElement("h5", {
      className: "gg-label"
    }, sidebar4.__("Created at", "getgenie"), ": ", /* @__PURE__ */ React.createElement("span", {
      className: "gg-value"
    }, clickedRow?.date))), /* @__PURE__ */ React.createElement("div", {
      className: "getgenie-modal-contents"
    }, /* @__PURE__ */ React.createElement(Typography.Title, {
      level: 3,
      className: "getgenie-modal-label"
    }, sidebar4.__("Keyword Input", "getgenie")), typeof clickedRow.input == "string" ? /* @__PURE__ */ React.createElement("div", {
      className: "getgenie-text genieText"
    }, clickedRow.input) : Object.values(clickedRow.input).map(
      (item, index) => /* @__PURE__ */ React.createElement("div", {
        key: index,
        className: "getgenie-text genieText"
      }, /* @__PURE__ */ React.createElement("span", {
        dangerouslySetInnerHTML: { __html: item }
      }), /* @__PURE__ */ React.createElement(Tooltip, {
        placement: "right",
        title: showTooltip === item && "Copied",
        visible: showTooltip === item && isModalVisible
      }, /* @__PURE__ */ React.createElement("span", {
        className: "getgenie-icon-icon_02",
        onClick: () => {
          copyTextAction(item);
        }
      })))
    )), /* @__PURE__ */ React.createElement("div", {
      className: "getgenie-modal-contents"
    }, /* @__PURE__ */ React.createElement(Typography.Title, {
      level: 3,
      className: "getgenie-modal-label"
    }, sidebar4.__("Generated Content", "getgenie"), clickedRow.output.length < 1 ? ": 0" : ""), clickedRow.output.map(
      (item, index) => /* @__PURE__ */ React.createElement("div", {
        key: index,
        className: "getgenie-text genieText"
      }, /* @__PURE__ */ React.createElement("span", {
        dangerouslySetInnerHTML: { __html: item }
      }), /* @__PURE__ */ React.createElement(Tooltip, {
        placement: "right",
        title: showTooltip === item && sidebar4.__("Copied", "getgenie"),
        visible: showTooltip === item && isModalVisible
      }, /* @__PURE__ */ React.createElement("span", {
        className: "getgenie-icon-icon_02",
        onClick: () => {
          copyTextAction(item);
        }
      })))
    )))))));
  }, ["getInputs", "setInput", "sidebar"]);
  var HistoryAdminPage_default = HistoryAdminPage;

  // assets/src/admin/js/AdminPages/LicenseAdminPage/index.js
  var { useState: useState4, useEffect: useEffect3 } = window.React;
  var { Button: Button2, Divider, Form: Form2, Typography: Typography2, Row: Row2, Col: Col2 } = window.antd;
  var { HandleFetch: HandleFetch2, HandleResponse: HandleResponse2 } = window.getGenie.Components.Common.RequestManager;
  var { Libs: Libs2 } = window.getGenie.Components.Common;
  var { ComposeComponents: ComposeComponents2 } = window.getGenie.Components.Common.ReduxManager;
  var LicenseAdminPage = ComposeComponents2(({ getInputs, limitUsage, setLimitUsage, setSidebar, sidebar: sidebar4 }) => {
    const [loading, setLoading] = useState4(false);
    const [status, setStatus] = useState4(!!window.getGenie.config.siteToken);
    const inActiveLicenseText = /* @__PURE__ */ React.createElement("p", null, " Still can't find your license key? ", /* @__PURE__ */ React.createElement("a", {
      href: "https://getgenie.ai/support-ticket/",
      target: "_blank"
    }, " Knock us here!  "), " ");
    const [statusText, setStatusText] = useState4(inActiveLicenseText);
    useEffect3(() => {
      if (status) {
        setStatusText("Your License Is Activated");
      }
    }, []);
    const onSubmitKey = () => {
      let data = { license: getInputs["licenseKey"] };
      setLoading(true);
      HandleFetch2((res) => {
        HandleResponse2(res, () => {
          window.location.reload();
        });
        setLoading(false);
      }, "getLicenseToken", data);
    };
    const removeLicenseKeyProcessor = () => {
      setLoading(true);
      HandleFetch2((res) => {
        HandleResponse2(res, () => {
          window.location.reload();
        });
        setLoading(false);
      }, "removeLicenseToken");
    };
    const onRemoveKey = () => {
      Libs2.ConfirmModal(
        "Are you sure to remove license from this site?",
        "",
        removeLicenseKeyProcessor
      );
    };
    return /* @__PURE__ */ React.createElement(React.Fragment, null, /* @__PURE__ */ React.createElement(HeaderAdminPage, null), /* @__PURE__ */ React.createElement("div", {
      style: { display: window.genieImage || window.genieSKA ? "flex" : "inherit", flexWrap: "wrap" }
    }, /* @__PURE__ */ React.createElement("div", {
      className: "getgenie-info-wrapper"
    }, /* @__PURE__ */ React.createElement("div", {
      className: `getgenie-license-page ${status}`
    }, /* @__PURE__ */ React.createElement(Typography2.Title, {
      level: 2
    }, sidebar4.__("GetGenie License Settings", "getgenie")), !status && /* @__PURE__ */ React.createElement(React.Fragment, null, /* @__PURE__ */ React.createElement(Typography2.Title, {
      level: 2
    }, sidebar4.__("License Settings", "getgenie")), /* @__PURE__ */ React.createElement(Typography2.Text, {
      strong: true,
      level: 2
    }, sidebar4.__("You'll need a license to use both the free and pro version of GetGenie AI.", "getgenie"), /* @__PURE__ */ React.createElement(Button2, {
      style: { boxShadow: "none" },
      ghost: true,
      type: "link",
      href: "https://app.getgenie.ai/license/?product=free-trial",
      target: "_blank"
    }, sidebar4.__("Claim your license here", "getgenie"), " \u2192")), /* @__PURE__ */ React.createElement(Divider, null), /* @__PURE__ */ React.createElement("h3", null, sidebar4.__("If you have the license key, paste the code below and activate your subscription.", "getgenie")), /* @__PURE__ */ React.createElement("p", null, sidebar4.__("Or, follow the steps below to activate the Genie AI plugin", "getgenie"), ":"), /* @__PURE__ */ React.createElement("ul", {
      className: "getgenie-license-page__steps"
    }, /* @__PURE__ */ React.createElement("li", null, sidebar4.__("Log in to your GetGenie account.", "getgenie")), /* @__PURE__ */ React.createElement("li", null, sidebar4.__("Generate a license key from Product Licenses then Manage Licenses.", "getgenie")), /* @__PURE__ */ React.createElement("li", null, sidebar4.__("Copy the license key text and paste it inside the input box below.", "getgenie")))), /* @__PURE__ */ React.createElement(Form2, {
      className: "getgenie-license-form",
      layout: "vertical",
      onFinish: onSubmitKey
    }, !status && /* @__PURE__ */ React.createElement(Libs2.Input, {
      name: "licenseKey",
      required: true,
      maxLength: window.getGenie.config?.licenseKeyLength,
      errorMessage: "Your key is empty!",
      label: "Your License Key",
      placeholder: "Please insert your license key here"
    }), /* @__PURE__ */ React.createElement("div", {
      className: `getgenie-license-page--status ${status ? "valid" : "invalid"}`
    }, " ", statusText, " "), !status && /* @__PURE__ */ React.createElement(Libs2.Button, {
      className: "getgenie-license-active",
      loading,
      icon: /* @__PURE__ */ React.createElement("span", {
        className: "getgenie-icon-check"
      }),
      type: "primary",
      htmlType: "submit",
      disabled: (getInputs["licenseKey"] || "").length != window.getGenie.config?.licenseKeyLength,
      size: "large"
    }, " ", sidebar4.__("ACTIVATE NOW", "getgenie"))), status && /* @__PURE__ */ React.createElement(React.Fragment, null, /* @__PURE__ */ React.createElement("div", {
      className: "getgenie-license-page-button-container"
    }, /* @__PURE__ */ React.createElement(Libs2.Button, {
      onClick: () => {
        setSidebar({ isUsageModalOpen: true });
      },
      type: "primary",
      size: "large"
    }, " ", sidebar4.__("Usage details", "getgenie"), " "), /* @__PURE__ */ React.createElement(Libs2.Button, {
      loading,
      onClick: onRemoveKey,
      className: "ant-btn",
      type: "primary",
      danger: true,
      size: "large"
    }, " ", sidebar4.__("Remove license from this domain", "getgenie"), " ")), /* @__PURE__ */ React.createElement("p", null, " ", sidebar4.__("See documentation", "getgenie"), " ", /* @__PURE__ */ React.createElement("a", {
      href: "https://getgenie.ai/docs/getting-started/license-settings/",
      target: "_blank"
    }, " here "), " ")))), window.genieImage?.Components?.AdminPages?.LicenseAdminPage ? /* @__PURE__ */ React.createElement(genieImage.Components.AdminPages.LicenseAdminPage, {
      header: false,
      classPrefix: "getgenie-"
    }) : "", window.genieSKA?.Components?.AdminPages?.LicenseAdminPage ? /* @__PURE__ */ React.createElement(genieSKA.Components.AdminPages.LicenseAdminPage, {
      header: false,
      classPrefix: "getgenie-"
    }) : ""));
  }, ["getInputs", "limitUsage", "setLimitUsage", "setSidebar", "sidebar"]);
  var LicenseAdminPage_default = LicenseAdminPage;

  // assets/src/admin/js/AdminPages/SettingsAdminPage/index.js
  var SettingsAdminPage = () => {
  };
  var SettingsAdminPage_default = SettingsAdminPage;

  // assets/src/admin/js/Common/Utilities/templates.js
  var sidebar2 = {
    __: window?.wp?.i18n?.__ || ((text, domain) => text)
  };
  var templateList = {
    "meta-description": {
      "title": sidebar2.__("Meta-Description", "getgenie"),
      "templateSlug": "meta-description",
      "description": sidebar2.__("Leverage SERP rankings with outstanding meta description of your blog post/page", "getgenie"),
      "inputFields": [
        {
          "label": sidebar2.__("Blog Post Title", "getgenie"),
          "name": "blogPostTitle",
          "sample": "What Is Off-Page SEO? A Comprehensive Guide",
          "placeholder": sidebar2.__("Enter the blog post title here", "getgenie"),
          "required": true
        },
        {
          "label": sidebar2.__("Focus Keyword", "getgenie"),
          "name": "focusKeyword",
          "sample": "Off-Page SEO guide",
          "placeholder": sidebar2.__("Enter the focus keyword/keyphrase for this meta description", "getgenie"),
          "required": true
        }
      ],
      "categories": {}
    },
    "listicle-ideas": {
      "title": sidebar2.__("Listicle Ideas", "getgenie"),
      "templateSlug": "listicle-ideas",
      "description": sidebar2.__("Generate title ideas for listicles for your given topic and get ahead of your competition", "getgenie"),
      "inputFields": [
        {
          "label": sidebar2.__("Topic", "getgenie"),
          "name": "topic",
          "sample": "Enter the topic for listicle ideas",
          "placeholder": sidebar2.__("Enter the topic and additional instructions (if any) for the listicle ideas", "getgenie"),
          "required": true
        }
      ],
      "categories": {}
    },
    "definition": {
      "title": sidebar2.__("Definition", "getgenie"),
      "templateSlug": "definition",
      "description": sidebar2.__("Need a brief explanation? Want to utilize featured snippets? Try our definition template", "getgenie"),
      "inputFields": [
        {
          "label": sidebar2.__("Topic", "getgenie"),
          "name": "topic",
          "sample": "venture capital",
          "placeholder": sidebar2.__("Enter the topic for the definition", "getgenie"),
          "required": true
        }
      ],
      "categories": {}
    },
    "sentence-rewriter": {
      "title": sidebar2.__("Sentence Rewriter", "getgenie"),
      "templateSlug": "sentence-rewriter",
      "description": sidebar2.__("Get different variations of your given sentence with rewritten versions from Genie", "getgenie"),
      "inputFields": [
        {
          "label": sidebar2.__("Sentence to Rewrite", "getgenie"),
          "name": "sentenceToRewrite",
          "sample": "When we talk about a particular topic, clarity is very important.",
          "placeholder": sidebar2.__("Enter your sentence to get a rewritten version", "getgenie"),
          "required": true
        }
      ],
      "categories": {}
    },
    "featured-snippet-numbered-list": {
      "title": sidebar2.__("Featured Snippet (Numbered List)", "getgenie"),
      "templateSlug": "featured-snippet-numbered-list",
      "description": sidebar2.__("Get a detailed numbered list of how to do something with a simple one-liner input", "getgenie"),
      "inputFields": [
        {
          "label": sidebar2.__("Topic", "getgenie"),
          "name": "topic",
          "sample": "how to take care of a cat",
          "placeholder": sidebar2.__("Enter the topic for the list of steps", "getgenie"),
          "required": true
        }
      ],
      "categories": {}
    },
    "title-ideas": {
      "title": sidebar2.__("Title Ideas", "getgenie"),
      "templateSlug": "title-ideas",
      "description": sidebar2.__("Get multiple title ideas off an initial title to get a variation or deploying in headers", "getgenie"),
      "inputFields": [
        {
          "label": sidebar2.__("Topic", "getgenie"),
          "name": "topic",
          "sample": "Fast fashion trend",
          "placeholder": sidebar2.__("Enter your desired topic for title generation", "getgenie"),
          "required": true
        }
      ],
      "categories": {}
    },
    "short-answer": {
      "title": sidebar2.__("Short Answer", "getgenie"),
      "templateSlug": "short-answer",
      "description": sidebar2.__("Generate brief, one-sentence answer to any given question to utilize in your content", "getgenie"),
      "inputFields": [
        {
          "label": sidebar2.__("Question", "getgenie"),
          "name": "question",
          "sample": "What is depreciation in accounting?",
          "placeholder": sidebar2.__("Enter your question", "getgenie"),
          "required": true
        }
      ],
      "categories": {}
    },
    "related-topics": {
      "title": sidebar2.__("Related Topics", "getgenie"),
      "templateSlug": "related-topics",
      "description": sidebar2.__("Stuck with your content? Input a paragraph and get a list of related topics to cover", "getgenie"),
      "inputFields": [
        {
          "label": sidebar2.__("Content", "getgenie"),
          "name": "content",
          "sample": "Bollywood, an Indian Hollywood, refers to the Hindi-language movie industry in India. The term Bollywood combines Bombay (where most Hindi movies are made) and Hollywood (where most American movies are made). Bollywood makes many movies each year. Many Bollywood movies are called Masala movies.",
          "placeholder": sidebar2.__("Enter a paragraph/snippet of content", "getgenie"),
          "required": true
        }
      ],
      "categories": {}
    },
    "paragraph-compression": {
      "title": sidebar2.__("Paragraph Compression", "getgenie"),
      "templateSlug": "paragraph-compression",
      "description": sidebar2.__("Generate a short summary of a paragraph keeping the gist, tone, and context intact", "getgenie"),
      "inputFields": [
        {
          "label": sidebar2.__("Paragraph", "getgenie"),
          "name": "paragraph",
          "sample": "With the introduction of a \u2018professional portfolio\u2019 by LinkedIn, you can now easily share visual content on your LinkedIn profile to demonstrate your capabilities more than what CVs ever could. From portfolio pieces to presentations to videos, you can now display your work on your profile by importing the content from a webpage or uploading your favorite work pieces straight from your computer. Instead of telling potential employers what you can do, display your work and let it speak for itself.",
          "placeholder": sidebar2.__("Enter the paragraph to be summarized", "getgenie"),
          "required": true
        }
      ],
      "categories": {}
    },
    "next-sentence": {
      "title": sidebar2.__("Next Sentence", "getgenie"),
      "templateSlug": "next-sentence",
      "description": sidebar2.__("Provide a sentence/line of content and get a follow-up sentence in return maintaining coherence", "getgenie"),
      "inputFields": [
        {
          "label": sidebar2.__("Sentence", "getgenie"),
          "name": "sentence",
          "sample": "It was a cold winter night, perfect for Vlad the vampire to go out hunting for his next prey.",
          "placeholder": sidebar2.__("Enter the sentence to be followed-up", "getgenie"),
          "required": true
        }
      ],
      "categories": {}
    },
    "paragraph-rewriter": {
      "title": sidebar2.__("Paragraph Rewriter", "getgenie"),
      "templateSlug": "paragraph-rewriter",
      "description": sidebar2.__("Put a new and unique spin to your given content with rewritten versions of it", "getgenie"),
      "inputFields": [
        {
          "label": sidebar2.__("Paragraph", "getgenie"),
          "name": "paragraph",
          "sample": "Most of the people of our country are farmers, workers, and day laborers who live below the poverty line. But the price of essential commodities is soaring higher and higher. It has now become impossible for them to make both ends meet. It has severely hit the day laborers, the lower and middle-class families, and the salaried class too. The prices of rice, vegetables, clothes, mustard oil, medicine, and other essential commodities are also increasing by leaps and bounds.",
          "placeholder": sidebar2.__("Enter the paragraph to be rewritten", "getgenie"),
          "required": true
        }
      ],
      "categories": {}
    },
    "next-paragraph": {
      "title": sidebar2.__("Next Paragraph", "getgenie"),
      "templateSlug": "next-paragraph",
      "description": sidebar2.__("Input your paragraph/lines of content and get a contextual follow-up content in return", "getgenie"),
      "inputFields": [
        {
          "label": sidebar2.__("Paragraph", "getgenie"),
          "name": "paragraph",
          "sample": "In less than a generation, social media has evolved from direct electronic information exchange, to virtual gathering place, to retail platform, to vital 21st-century marketing tool.",
          "placeholder": sidebar2.__("Enter the paragraph to be followed-up", "getgenie"),
          "required": true
        }
      ],
      "categories": {}
    },
    "list-of-questions": {
      "title": sidebar2.__("List of Questions", "getgenie"),
      "templateSlug": "list-of-questions",
      "description": sidebar2.__("Generate lists of questions for your given topic and utilize them in your title/content", "getgenie"),
      "inputFields": [
        {
          "label": sidebar2.__("Topic", "getgenie"),
          "name": "topic",
          "sample": "Breakfast at home",
          "placeholder": sidebar2.__("Enter the topic for the list of related questions", "getgenie"),
          "required": true
        }
      ],
      "categories": {}
    },
    "paragraph-answer": {
      "title": sidebar2.__("Paragraph Answer", "getgenie"),
      "templateSlug": "paragraph-answer",
      "description": sidebar2.__("Get paragraph-long answers of informative content for every question you ask", "getgenie"),
      "inputFields": [
        {
          "label": sidebar2.__("Question", "getgenie"),
          "name": "question",
          "sample": "Which country is going to be the next super power of the world?",
          "placeholder": sidebar2.__("Enter the question for a detailed answer", "getgenie"),
          "required": true
        }
      ],
      "categories": {}
    },
    "summary-bullets": {
      "title": sidebar2.__("Summary Bullets", "getgenie"),
      "templateSlug": "summary-bullets",
      "description": sidebar2.__("Get a bulleted list of summary for a given topic with the same tone and context", "getgenie"),
      "inputFields": [
        {
          "label": sidebar2.__("Paragraph", "getgenie"),
          "name": "paragraph",
          "sample": "The Greek gods were all born from the union between a god and a mortal woman. Zeus was born from the union between his father, Kronos, and his mother, Rhea. Athena was born from the union of Zeus with Metis, or wisdom. Apollo was born from the union with Leto or Artemis. Poseidon was born from the union his father, Uranus, and Gaia, or Earth. Demeter was born from the union her husband, Persephone, and Kore, or Spring.",
          "placeholder": sidebar2.__("Enter the paragraph for summarized list", "getgenie"),
          "required": true
        }
      ],
      "categories": {}
    },
    "paragraph-for-heading": {
      "title": sidebar2.__("Paragraph for Heading", "getgenie"),
      "templateSlug": "paragraph-for-heading",
      "description": sidebar2.__("Input the heading/title of your long-form content and receive an introductory paragraph", "getgenie"),
      "inputFields": [
        {
          "label": sidebar2.__("Title/Heading", "getgenie"),
          "name": "title/heading",
          "sample": "French new wave as a film movement",
          "placeholder": sidebar2.__("Enter the title/heading", "getgenie"),
          "required": true
        }
      ],
      "categories": {}
    },
    "outline": {
      "title": sidebar2.__("Outline", "getgenie"),
      "templateSlug": "outline",
      "description": sidebar2.__("Create an outline of your long-form content based on a title and a brief description", "getgenie"),
      "inputFields": [
        {
          "label": sidebar2.__("Blog context", "getgenie"),
          "name": "blogContext",
          "sample": "Nulled or cracked software might contain malware and viruses that infect your computer. These viruses steal your data and sometimes make your device invalid. So, it is highly recommended not to use a cracked version of the software. Besides security reasons, it's completely unethical and like theft. ",
          "placeholder": sidebar2.__("Enter a few lines of the intro to get an outline", "getgenie"),
          "required": true
        }
      ],
      "categories": {}
    },
    "product-description": {
      "title": sidebar2.__("Product Description", "getgenie"),
      "templateSlug": "product-description",
      "description": sidebar2.__("Name any product (or service) and get Genie to write a convincing description for it", "getgenie"),
      "inputFields": [
        {
          "label": sidebar2.__("Product Name", "getgenie"),
          "name": "productName",
          "sample": "Jhakanaka",
          "placeholder": sidebar2.__("Enter the product name", "getgenie"),
          "required": true
        },
        {
          "label": sidebar2.__("Product Brief", "getgenie"),
          "name": "productBrief",
          "sample": "Jhakanaka is a music player. A product of XpeedStudio. Plays all types of music and podcast. Speech-to-text technology for lyrics for music and subtitles for podcasts. Target audience: teens and young adults. Audiobook feature upcoming.",
          "placeholder": sidebar2.__("Explain briefly about the product, or which features to focus on", "getgenie"),
          "required": false
        }
      ],
      "categories": {}
    },
    "woocommerce-product-long-description": {
      "title": sidebar2.__("WooCommerce Product Long Description", "getgenie"),
      "templateSlug": "woocommerce-product-long-description",
      "description": sidebar2.__("Generate keyword-optimized & conversion-friendly long descriptions for your WooCommerce products", "getgenie"),
      "inputFields": [
        {
          "label": sidebar2.__("Product Name", "getgenie"),
          "name": "productName",
          "sample": "JBL C100SI",
          "placeholder": sidebar2.__("Enter the product name", "getgenie"),
          "required": true
        },
        {
          "label": sidebar2.__("Keywords", "getgenie"),
          "name": "keywords",
          "sample": "in-ear headphones, JBL pure bass, one-button remote, angled buds, black, comfort fit, suitable for punchy bass and rock music, 30-day replacement warranty, worldwide free shipping",
          "placeholder": sidebar2.__("Specify the keywords/key phrases for the product long description", "getgenie"),
          "required": true
        }
      ],
      "categories": {}
    },
    "taglines": {
      "title": sidebar2.__("Taglines", "getgenie"),
      "templateSlug": "taglines",
      "description": sidebar2.__("Get genie to write taglines for your brands, products, services, or any content", "getgenie"),
      "inputFields": [
        {
          "label": sidebar2.__("Product Name", "getgenie"),
          "name": "productName",
          "sample": "Dunkin' Donuts",
          "placeholder": sidebar2.__("Enter the product name", "getgenie"),
          "required": true
        },
        {
          "label": sidebar2.__("Product Brief", "getgenie"),
          "name": "productBrief",
          "sample": "Dunkin\u2019 Donuts is the world\u2019s leading baked goods and coffee chain, serving more than 3 million customers per day. Dunkin\u2019 Donuts sells 52 varieties of donuts and more than a dozen coffee beverages as well as an array of bagels, sandwiches & more!",
          "placeholder": sidebar2.__("Explain briefly about the product, or which features to focus on", "getgenie"),
          "required": false
        }
      ],
      "categories": {}
    },
    "social-media-postcopy": {
      "title": sidebar2.__("Social Media Post/Copy", "getgenie"),
      "templateSlug": "social-media-postcopy",
      "description": sidebar2.__("Write copies for all your social media handles using a brief description of your product", "getgenie"),
      "inputFields": [
        {
          "label": sidebar2.__("Product/Brand Name", "getgenie"),
          "name": "product/brandName",
          "sample": "Semrush",
          "placeholder": sidebar2.__("Enter the name of the product/brand", "getgenie"),
          "required": true
        },
        {
          "label": sidebar2.__("Product Brief", "getgenie"),
          "name": "productBrief",
          "sample": "Semrush is like a keyword research tool, Google Trends, Moz, Hootsuite, and SimilarWeb in one. Get measurable results from online marketing with Semrush \u2014 do SEO, content marketing, competitor research, PPC, and social media marketing from just one platform.",
          "placeholder": sidebar2.__("Explain briefly about the product, or which features to focus on", "getgenie"),
          "required": false
        }
      ],
      "categories": {}
    },
    "content-rewriter": {
      "title": sidebar2.__("Content Rewriter", "getgenie"),
      "templateSlug": "content-rewriter",
      "description": sidebar2.__("Get AI-paraphrased variations of your given sentence/paragraph/content from Genie", "getgenie"),
      "inputFields": [
        {
          "label": sidebar2.__("Your Content", "getgenie"),
          "name": "yourContent",
          "sample": "Dengue fever, also known as breakbone fever, is a mosquito-borne infection that can lead to a severe flu-like illness. It is caused by four different viruses and spread by Aedes mosquitoes.",
          "placeholder": sidebar2.__("Provide the sentence/paragraph/content you want to be rewritten/paraphrased", "getgenie"),
          "required": true
        }
      ],
      "categories": {}
    },
    "call-to-action": {
      "title": sidebar2.__("Call to Action", "getgenie"),
      "templateSlug": "call-to-action",
      "description": sidebar2.__("Increase your CTA button/anchor's CTR using the magical persuasive words of Genie", "getgenie"),
      "inputFields": [
        {
          "label": sidebar2.__("Context/Description", "getgenie"),
          "name": "context/description",
          "sample": "a lead magnet downloader button that gives users a content calendar for free",
          "placeholder": sidebar2.__("Provide the context or the details of the call-to-action (CTA) button/link", "getgenie"),
          "required": true
        },
        {
          "label": sidebar2.__("Product/Brand Name ", "getgenie"),
          "name": "product/brandName",
          "sample": "Ollyo",
          "placeholder": sidebar2.__("You can provide the name of the product/brand to be included in the CTA content", "getgenie"),
          "required": false
        }
      ],
      "categories": {}
    },
    "conclusion": {
      "title": sidebar2.__("Conclusion", "getgenie"),
      "templateSlug": "conclusion",
      "description": sidebar2.__("Draw a relevant conclusion for your blog post or any content using Genie's AI magic", "getgenie"),
      "inputFields": [
        {
          "label": sidebar2.__("Title", "getgenie"),
          "name": "title",
          "sample": "How to Write a Blog Post: A Step-by-Step Guide",
          "placeholder": sidebar2.__("Enter the title of the blog post/content that needs a conclusion from GetGenie", "getgenie"),
          "required": true
        },
        {
          "label": sidebar2.__("Intro", "getgenie"),
          "name": "intro",
          "sample": "Writing a blog can be an extremely rewarding and fun activity. But the task of creating a successful blog post can seem daunting, especially if you\u2019re just starting out. From coming up with ideas to crafting compelling content, there\u2019s a lot to consider when writing a blog post. The good news is that with the proper guidance and strategy in place, anyone can craft a blog post that will capture their readers\u2019 attention. In this guide, we\u2019ll provide step-by-step instructions to help you write a blog post that will attract readers and keep them engaged.",
          "placeholder": sidebar2.__("Provide the introduction of the blog post/content for a better context", "getgenie"),
          "required": true
        }
      ],
      "categories": {}
    },
    "linkedin-post": {
      "title": sidebar2.__("LinkedIn Post", "getgenie"),
      "templateSlug": "linkedin-post",
      "description": sidebar2.__("For yourself or your company/brand, professional posts made easy with AI for LinkedIn", "getgenie"),
      "inputFields": [
        {
          "label": sidebar2.__("Topic", "getgenie"),
          "name": "topic",
          "sample": "WordPress plugins",
          "placeholder": sidebar2.__("Enter the topic", "getgenie"),
          "required": true
        },
        {
          "label": sidebar2.__("Context", "getgenie"),
          "name": "context",
          "sample": "make the post about the future of WordPress plugins with the advent of AI and how AI can be incorporated into plugins",
          "placeholder": sidebar2.__("Explain what the post is about and which topics should be touched upon", "getgenie"),
          "required": true
        },
        {
          "label": sidebar2.__("Brand name", "getgenie"),
          "name": "brandName",
          "sample": "Wpmet",
          "placeholder": sidebar2.__("Enter the brand name", "getgenie"),
          "required": false
        }
      ],
      "categories": {}
    },
    "instagram-bio": {
      "title": sidebar2.__("Instagram Bio", "getgenie"),
      "templateSlug": "instagram-bio",
      "description": sidebar2.__("Make lasting impressions with the perfect instagram bio for your handle from AI", "getgenie"),
      "inputFields": [
        {
          "label": sidebar2.__("Brand name", "getgenie"),
          "name": "brandName",
          "sample": "Asadullah Galib",
          "placeholder": sidebar2.__("Enter the brand name", "getgenie"),
          "required": true
        },
        {
          "label": sidebar2.__("Keywords", "getgenie"),
          "name": "keywords",
          "sample": "angel investor, digital marketer of Arraytics, YouTuber",
          "placeholder": sidebar2.__("Specify the keywords/key phrases for the instagram bio", "getgenie"),
          "required": true
        }
      ],
      "categories": {}
    },
    "instagram-caption": {
      "title": sidebar2.__("Instagram Caption", "getgenie"),
      "templateSlug": "instagram-caption",
      "description": sidebar2.__("Generate AI-powered captions for your instagram images in the blink of an eye", "getgenie"),
      "inputFields": [
        {
          "label": sidebar2.__("Brand name", "getgenie"),
          "name": "brandName",
          "sample": "Pizzak",
          "placeholder": sidebar2.__("Enter the brand name", "getgenie"),
          "required": true
        },
        {
          "label": sidebar2.__("Context", "getgenie"),
          "name": "context",
          "sample": "pizzak is a cloud kitchen that serves pizza, wings, fries, etc. The post will feature it's 18-hour delivery system even at midnight, from 12 pm to 6 am.",
          "placeholder": sidebar2.__("Provide the topic, context or any additional instruction for the instagram caption", "getgenie"),
          "required": true
        }
      ],
      "categories": {}
    },
    "pros-and-cons": {
      "title": sidebar2.__("Pros and Cons", "getgenie"),
      "templateSlug": "pros-and-cons",
      "description": sidebar2.__("Generate a list of pros and cons about any given topic to utilize in your content", "getgenie"),
      "inputFields": [
        {
          "label": sidebar2.__("Topic", "getgenie"),
          "name": "topic",
          "sample": "Divulgaci\xF3n por correo electr\xF3nico en fr\xEDo",
          "placeholder": sidebar2.__("Enter a topic to get the pros and cons of it", "getgenie"),
          "required": true
        },
        {
          "label": sidebar2.__("Context/Additional Instruction", "getgenie"),
          "name": "context/additionalInstruction",
          "sample": "Dame las ventajas y desventajas de la divulgaci\xF3n en fr\xEDo a trav\xE9s de correos electr\xF3nicos",
          "placeholder": sidebar2.__("You can give additional instruction/context for a more accurate output (optional)", "getgenie"),
          "required": false
        }
      ],
      "categories": {}
    },
    "woocommerce-product-short-description": {
      "title": sidebar2.__("WooCommerce Product Short Description", "getgenie"),
      "templateSlug": "woocommerce-product-short-description",
      "description": sidebar2.__("Get short descriptions/excerpts for your WooCommerce products optimized for your desired keywords", "getgenie"),
      "inputFields": [
        {
          "label": sidebar2.__("Product Name", "getgenie"),
          "name": "productName",
          "sample": "F\u0103in\u0103 de porumb Kellogg's cu piure de c\u0103p\u0219uni adev\u0103rat",
          "placeholder": sidebar2.__("Enter the brand name", "getgenie"),
          "required": true
        },
        {
          "label": sidebar2.__("Keywords", "getgenie"),
          "name": "keywords",
          "sample": "cereale pentru micul dejun, vitamina C, cu con\u021Binut sc\u0103zut de gr\u0103simi, f\u0103r\u0103 colesterol, 300 grame",
          "placeholder": sidebar2.__("Specify the keywords/key phrases for the product long description", "getgenie"),
          "required": true
        }
      ],
      "categories": {}
    },
    "tweet-twitter-post": {
      "title": sidebar2.__("Tweet (Twitter Post)", "getgenie"),
      "templateSlug": "tweet-twitter-post",
      "description": sidebar2.__("Short but impactful \u2014 that's what your tweets will be when you generate them with GetGenie", "getgenie"),
      "inputFields": [
        {
          "label": sidebar2.__("Context/Instruction", "getgenie"),
          "name": "context/instruction",
          "sample": "steps of how to optimize old youtube videos",
          "placeholder": sidebar2.__("Enter context/Instruction ", "getgenie"),
          "required": true
        }
      ],
      "categories": {}
    },
    "twitter-thread": {
      "title": sidebar2.__("Twitter Thread", "getgenie"),
      "templateSlug": "twitter-thread",
      "description": sidebar2.__("Create engaging Twitter threads on any topic and up your Twitter game using AI magic", "getgenie"),
      "inputFields": [
        {
          "label": sidebar2.__("Context/Instruction", "getgenie"),
          "name": "context/instruction",
          "sample": "establishing yourself as a personal brand",
          "placeholder": sidebar2.__("Enter the context/instruction", "getgenie"),
          "required": true
        }
      ],
      "categories": {}
    },
    "explain-why": {
      "title": sidebar2.__("Explain Why", "getgenie"),
      "templateSlug": "explain-why",
      "description": sidebar2.__("Questions need answering and concepts need explaining \u2014 let\u2019s explain why", "getgenie"),
      "inputFields": [
        {
          "label": sidebar2.__("Question", "getgenie"),
          "name": "question",
          "sample": "Why can't we live on mars?",
          "placeholder": sidebar2.__("Enter a WH-question question that you need explained", "getgenie"),
          "required": true
        },
        {
          "label": sidebar2.__("Context", "getgenie"),
          "name": "context",
          "sample": "tell me the scientific as well as anthropological reasons",
          "placeholder": sidebar2.__("You can give additional instruction/context for a more accurate output", "getgenie"),
          "required": false
        }
      ],
      "categories": {}
    },
    "feature-benefit": {
      "title": sidebar2.__("Feature - Benefit", "getgenie"),
      "templateSlug": "feature-benefit",
      "description": sidebar2.__("Describe what your product/service does and get the detailed benefits in return", "getgenie"),
      "inputFields": [
        {
          "label": sidebar2.__("Product Name", "getgenie"),
          "name": "productName",
          "sample": "Dove Original Beauty Bar",
          "placeholder": sidebar2.__("Enter the product name", "getgenie"),
          "required": true
        },
        {
          "label": sidebar2.__("Product Description", "getgenie"),
          "name": "productDescription",
          "sample": "Dove Original Beauty Bar and gentle skin cleanser combine a gentle cleansing formula with our signature 1/4 moisturizing cream to hydrate and nourish skin, instead of leaving skin feeling dry and tight like an ordinary bar soap might. Dove mild cleansers help skin retain its natural moisture, which helps replenish skin-natural nutrients that can be lost during the cleansing process.",
          "placeholder": sidebar2.__("Enter the product's features here to generate the benefits", "getgenie"),
          "required": true
        }
      ],
      "categories": {}
    },
    "before-after-bridge-bab": {
      "title": sidebar2.__("Before After Bridge (BAB)", "getgenie"),
      "templateSlug": "before-after-bridge-bab",
      "description": sidebar2.__("BAB formula shows the before and after of your product/solution in your content", "getgenie"),
      "inputFields": [
        {
          "label": sidebar2.__("Product Name", "getgenie"),
          "name": "productName",
          "sample": "Realme Narzo 50A",
          "placeholder": sidebar2.__("Enter the product name", "getgenie"),
          "required": true
        },
        {
          "label": sidebar2.__("Product Description", "getgenie"),
          "name": "productDescription",
          "sample": "Equipped with a Helio G85 Gaming Processor, the Realme Narzo 50A is a high-speed smartphone that lets you play intense games and binge-watch favorite shows. This smartphone features a 6000 mAh Battery and 18W Quick Charge for uninterrupted performance, and a 50 MP AI Triple Camera to click beautiful photos.",
          "placeholder": sidebar2.__("Enter the product description", "getgenie"),
          "required": true
        }
      ],
      "categories": {}
    },
    "bullet-point-to-answers": {
      "title": sidebar2.__("Bullet Point to Answers", "getgenie"),
      "templateSlug": "bullet-point-to-answers",
      "description": sidebar2.__("Get bulleted lists of answers to related questions while writing long-form content", "getgenie"),
      "inputFields": [
        {
          "label": sidebar2.__("Question", "getgenie"),
          "name": "question",
          "sample": "How to make a cup of tea?",
          "placeholder": sidebar2.__("Enter the question to get an answer in bullet points", "getgenie"),
          "required": true
        },
        {
          "label": sidebar2.__("Additional Instruction", "getgenie"),
          "name": "additionalInstruction",
          "sample": "describe how to prepare a cup of tea step by step",
          "placeholder": sidebar2.__("You can give instruction/context for a more accurate output (optional)", "getgenie"),
          "required": false
        }
      ],
      "categories": {}
    },
    "woocommerce-product-title": {
      "title": sidebar2.__("WooCommerce Product Title", "getgenie"),
      "templateSlug": "woocommerce-product-title",
      "description": sidebar2.__("Generate keyword-optimized product titles to rank & convert with your WooCommerce website", "getgenie"),
      "inputFields": [
        {
          "label": sidebar2.__("Product Name", "getgenie"),
          "name": "productName",
          "sample": "JBL C100SI",
          "placeholder": sidebar2.__("Enter the product name", "getgenie"),
          "required": true
        },
        {
          "label": sidebar2.__("Keywords", "getgenie"),
          "name": "keywords",
          "sample": "in-ear headphone, JBL pure bass, one button remote, angled buds, black",
          "placeholder": sidebar2.__("Specify which keywords should the product title be based on", "getgenie"),
          "required": true
        }
      ],
      "categories": {}
    },
    "product-ad-copy": {
      "title": sidebar2.__("Product Ad Copy", "getgenie"),
      "templateSlug": "product-ad-copy",
      "description": sidebar2.__("Generate a basic ad copy for your product inputting only a brief introduction/description", "getgenie"),
      "inputFields": [
        {
          "label": sidebar2.__("Product Name", "getgenie"),
          "name": "productName",
          "sample": "YOSUDA Exercise Bike L-007A",
          "placeholder": sidebar2.__("Enter the product name", "getgenie"),
          "required": true
        },
        {
          "label": sidebar2.__("Product Description", "getgenie"),
          "name": "productDescription",
          "sample": "Well-built exercise bike from the inside out. With its rock-solid foundation and athletic + aesthetic design, it's at the top of the game. With thickened frame tubes, precision manufacturing overcomes the wobbly defect of most of the cycle bikes on the market. Give you safer riding. Excellent bearing capacity for riders up to 330LBS. This is an energetic exercising bike, bringing you a cycling experience which is compared with riding classes!",
          "placeholder": sidebar2.__("Enter the product description", "getgenie"),
          "required": true
        }
      ],
      "categories": {}
    },
    "problem-agitate-solution-pas": {
      "title": sidebar2.__("Problem, Agitate, Solution (PAS)", "getgenie"),
      "templateSlug": "problem-agitate-solution-pas",
      "description": sidebar2.__("Make use of the proven copywriting formula \u2014 Problem, Agitate, Solution (PAS)", "getgenie"),
      "inputFields": [
        {
          "label": sidebar2.__("Product Name", "getgenie"),
          "name": "productName",
          "sample": "Canva",
          "placeholder": sidebar2.__("Enter the product name", "getgenie"),
          "required": true
        },
        {
          "label": sidebar2.__("Product Description", "getgenie"),
          "name": "productDescription",
          "sample": "Canva is a graphic design platform, used to create social media graphics, presentations, posters, documents and other visual content. The app includes templates for users to use. The platform is free to use and offers paid subscriptions such as Canva Pro and Canva for Enterprise for additional functionality.",
          "placeholder": sidebar2.__("Enter the product description", "getgenie"),
          "required": true
        }
      ],
      "categories": {}
    },
    "attention-interest-desire-action-aida": {
      "title": sidebar2.__("Attention Interest Desire Action (AIDA)", "getgenie"),
      "templateSlug": "attention-interest-desire-action-aida",
      "description": sidebar2.__("Generate sales/marketing copies by applying the renowned AIDA formula", "getgenie"),
      "inputFields": [
        {
          "label": sidebar2.__("Product Name", "getgenie"),
          "name": "productName",
          "sample": "Typeform",
          "placeholder": sidebar2.__("Enter the product name", "getgenie"),
          "required": true
        },
        {
          "label": sidebar2.__("Product Description", "getgenie"),
          "name": "productDescription",
          "sample": "Typeform is a popular online form builder and survey tool. It specializes in a conversational one question at a time experience that feels more like a conversation when compared to the regular form flow.",
          "placeholder": sidebar2.__("Enter the product description", "getgenie"),
          "required": true
        }
      ],
      "categories": {}
    }
  };
  var templates = Object.values(templateList || {}).filter((item) => !["sentence-rewriter", "paragraph-rewriter"].includes(item?.templateSlug));

  // assets/src/admin/js/TemplateWizard/AdditionalWizards.js
  var AdditionalWizards = [
    {
      title: sidebar2.__("Blog Wizard", "getgenie"),
      templateSlug: "blogWizard",
      description: sidebar2.__("Get your blog article SERP-ready \u2014 from analyzing the keywords to generating content that ranks", "getgenie"),
      categories: {
        general: {
          title: "General",
          slug: "general"
        }
      }
    },
    {
      title: sidebar2.__("WooCommerce Wizard", "getgenie"),
      templateSlug: "wooWizard",
      description: sidebar2.__("Get conversion-friendly & SEO-optimized content for WooCommerce Product pages", "getgenie"),
      categories: {
        general: {
          title: "General",
          slug: "general"
        }
      }
    },
    {
      title: sidebar2.__("Genie Mode", "getgenie"),
      templateSlug: "genieMode",
      description: sidebar2.__("Write anything you want with the help of Genie Mode", "getgenie")
    }
  ];
  var AdditionalWizards_default = AdditionalWizards;

  // assets/src/admin/js/AdminPages/WriteForMeAdminPage/index.js
  var { Libs: Libs3 } = window.getGenie.Components.Common;
  var { Col: Col3, Input, Row: Row3 } = window.antd;
  var { ComposeComponents: ComposeComponents3 } = window.getGenie.Components.Common.ReduxManager;
  var { useState: useState5 } = window.React;
  var WriteForMeAdminPage = ComposeComponents3(({ setSidebar, sidebar: sidebar4, templates: templates2 }) => {
    const templateArray = [...AdditionalWizards_default, ...templates2.list];
    const [list, setList] = useState5(templateArray);
    const handleClick = (e7, item) => {
      if (item.templateSlug == "blogWizard") {
        if (window.getGenie.config?.wizardScreen !== "post") {
          window.open(window.getGenie.config?.wizardScreenUrl?.post, "_blank");
          return;
        }
      } else if (item.templateSlug == "wooWizard") {
        if (!window.getGenie.config?.wcActivated) {
          Libs3.ErrorModal({
            title: "Plugin not found!",
            content: "WooCommerce is not installed or activated yet."
          });
          return;
        }
        if (window.getGenie.config?.wizardScreen !== "woo_product") {
          window.open(window.getGenie.config?.wizardScreenUrl?.woo_product, "_blank");
          return;
        }
      }
      let component = "WriteTemplatesScreen";
      setSidebar({
        open: true,
        enableFooter: false,
        component,
        currentTemplate: item.templateSlug
      });
    };
    const handleSearchTemplate = (e7) => {
      let searchInput = e7.target.value.toLowerCase();
      let updatedTemplates = templateArray.filter((item) => item.title.toLowerCase().includes(searchInput));
      setList(updatedTemplates);
    };
    return /* @__PURE__ */ React.createElement(React.Fragment, null, /* @__PURE__ */ React.createElement(HeaderAdminPage, null), /* @__PURE__ */ React.createElement("div", {
      className: "getgenie-info-wrapper"
    }, /* @__PURE__ */ React.createElement("div", {
      className: "getgenie-dashboard-templates getgenie-license-page"
    }, /* @__PURE__ */ React.createElement(Row3, null, /* @__PURE__ */ React.createElement(Col3, {
      xs: { span: 24 },
      sm: { span: 24 },
      md: 16
    }, /* @__PURE__ */ React.createElement("h5", {
      className: "getgenie-title"
    }, sidebar4.__("Write Using Templates", "getgenie"))), /* @__PURE__ */ React.createElement(Col3, {
      xs: { span: 24 },
      sm: { span: 24 },
      md: 8
    }, /* @__PURE__ */ React.createElement(Input, {
      onChange: handleSearchTemplate,
      bordered: false,
      className: "template-search",
      placeholder: sidebar4.__("Search...", "getgenie"),
      suffix: /* @__PURE__ */ React.createElement("span", {
        className: "getgenie-icon-search"
      })
    }))), list.length === 0 ? /* @__PURE__ */ React.createElement("h4", {
      className: "getgenie-not-found-title"
    }, sidebar4.__("No template found", "getgenie")) : /* @__PURE__ */ React.createElement(Libs3.Card, {
      list,
      column: 3,
      handleClick
    }, (item) => {
      return /* @__PURE__ */ React.createElement(React.Fragment, null, /* @__PURE__ */ React.createElement("h5", {
        "data-slug": item?.templateSlug,
        className: "template-title"
      }, item.title), /* @__PURE__ */ React.createElement("p", {
        className: "template-description"
      }, item?.description));
    }))));
  }, ["setSidebar", "sidebar", "templates"]);
  var WriteForMeAdminPage_default = WriteForMeAdminPage;

  // assets/src/admin/js/AdminPages/GettingStarted/index.js
  var { Card, Row: Row4, Col: Col4, Modal } = window.antd;
  var { Libs: Libs4 } = window.getGenie.Components.Common;
  var { useState: useState6, useEffect: useEffect4 } = window.React;
  var GettingStarted = () => {
    const [frameHeight, setFrameHeight] = useState6(window.innerHeight);
    const sidebar4 = wp.data.select("getgenie").sidebar();
    const videoDetailsContainer = [
      {
        title: "Write Blog Posts with AI",
        description: "Learn how you can generate an entire blog post customized to your needs using the \u201CBlog Writing Assistant\u201D of GetGenie",
        documentationLink: "https://getgenie.ai/docs/how-to-tutorials/getgenie-ai-blog-wizard/?utm_source=inplugin&utm_medium=button&utm_campaign=onboarding",
        videoLink: "https://www.youtube.com/embed/5lIwXUS8QHE",
        thumbnail: `${sidebar4.imageUrl}/blog_post.png`
      },
      {
        title: "SEO Optimize Your Content",
        description: "Watch how you can optimize the generated content for SEO on the go using the SEO mode & On-Page Content Score of GetGenie",
        documentationLink: "https://getgenie.ai/docs/seo-assistant/getgenie-seo-features/?utm_source=inplugin&utm_medium=button&utm_campaign=onboarding",
        videoLink: "https://www.youtube.com/embed/yDC6kC3NDUQ",
        thumbnail: `${sidebar4.imageUrl}/seo_optimization.png`
      },
      {
        title: "Utilize 30+ AI Templates",
        description: "Learn how to use 30+ GetGenie templates to generate content & copies (AIDA template has been shown as an example)",
        documentationLink: "https://getgenie.ai/docs/getting-started/getgenie-ai-templates-walkthtough/?utm_source=inplugin&utm_medium=button&utm_campaign=onboarding",
        videoLink: "https://www.youtube.com/embed/gBrzoRkp6OA",
        thumbnail: `${sidebar4.imageUrl}/aida_template.png`
      }
    ];
    const blogContainer = [
      {
        thumbnail: "https://getgenie.ai/wp-content/uploads/2022/08/How-to-write-a-blog-post-using-AI-blog-post-writer.png",
        heading: "How to Write an Article Using AI Blog Post Writer",
        link: "https://getgenie.ai/write-a-blog-using-ai-blog-post-writer/"
      },
      {
        thumbnail: "https://getgenie.ai/wp-content/uploads/2022/11/how_to_create_SEO_content_with_AI_content-tools_banner.png",
        heading: "How to Create SEO-friendly Content with AI Content Tools that Ranks Higher",
        link: "https://getgenie.ai/create-seo-friendly-content-with-ai-content-tools/"
      },
      {
        thumbnail: "https://getgenie.ai/wp-content/uploads/2022/07/monetize-ai-written-content.jpg",
        heading: "Can You Monetize AI Written Content with Ad Networks?",
        link: "https://getgenie.ai/monetize-ai-written-content/"
      },
      {
        thumbnail: "https://getgenie.ai/wp-content/uploads/2022/10/SERP-analysis.png",
        heading: "What is SERP Analysis and How Does It Keep You Ahead of Competitors",
        link: "https://getgenie.ai/how-to-perform-serp-analysis/"
      },
      {
        thumbnail: "https://getgenie.ai/wp-content/uploads/2022/04/does-AI-content-rank.png",
        heading: "Does AI Generated Content Rank on Search Engine: an In-Depth Discussion",
        link: "https://getgenie.ai/does-ai-generated-content-rank/"
      },
      {
        thumbnail: "https://getgenie.ai/wp-content/uploads/2022/10/Old-Blog.png",
        heading: "How To Update Old Blog Posts For SEO With AI Content Assistant",
        link: "https://getgenie.ai/how-to-update-old-blog-posts-for-seo/"
      }
    ];
    const documentations = {
      container1: [
        {
          title: "Getting started with Getgenie AI",
          link: "https://getgenie.ai/docs/getting-started/getting-started-with-getgenie-ai/"
        },
        {
          title: "How to claim Getgenie free credits",
          link: "https://getgenie.ai/docs/getting-started/how-to-claim-getgenie-free-credits/"
        },
        {
          title: "How to upgrade current subscription",
          link: "https://getgenie.ai/docs/how-to-tutorials/how-to-upgrade-current-getgenie-ai-subscription/"
        },
        {
          title: "Getgenie elementor compatibility",
          link: "https://getgenie.ai/docs/compatibility-and-integration/getgenie-elementor-compatibility/"
        },
        {
          title: "Attention interest desire action(AIDA)",
          link: "https://getgenie.ai/docs/templates/aida-framework/"
        }
      ],
      container2: [
        {
          title: "Blog Wizard",
          link: "https://getgenie.ai/docs/blog-wizard/getgenie-ai-blog-wizard/"
        },
        {
          title: "Keyword Research",
          link: "https://getgenie.ai/docs/seo-assistant/keyword-research-for-blog-posts/"
        },
        {
          title: "Competitor analysis",
          link: "https://getgenie.ai/docs/seo-assistant/how-to-do-competitor-analysis/"
        },
        {
          title: "Woocommerce Wizard",
          link: "https://getgenie.ai/docs/how-to-tutorials/woocommerce-wizard/"
        },
        {
          title: "Social media copywriting",
          link: "https://getgenie.ai/docs/how-to-tutorials/how-to-social-media-copywriting/"
        }
      ],
      container3: [
        {
          title: "Paragraph rewrite",
          link: "https://getgenie.ai/docs/templates/getgenie-free-paragraph-rewriting-tool/"
        },
        {
          title: "Paragraph answer",
          link: "https://getgenie.ai/docs/templates/getgenie-ai-long-paragraph-generator/"
        },
        {
          title: "Getgenie SEO features",
          link: "https://getgenie.ai/docs/seo-assistant/getgenie-seo-features/"
        },
        {
          title: "Questions asked feature",
          link: "https://getgenie.ai/docs/seo-assistant/questions-asked-frequently-asked-questions/"
        },
        {
          title: "Problem, Agitate, Solution (PAS)",
          link: "https://getgenie.ai/docs/templates/getgenie-ai-pas-copywriting-formula/"
        }
      ]
    };
    const handleClick = (link2) => {
      window.open(
        link2,
        "_blank"
      );
    };
    const handleVideo = (link2) => {
      Modal.info({
        content: /* @__PURE__ */ React.createElement("div", {
          className: "getgenie-info-wrapper-modal"
        }, /* @__PURE__ */ React.createElement("iframe", {
          width: "100%",
          height: frameHeight / 1.2,
          src: link2,
          title: "YouTube video player",
          frameBorder: "0",
          allow: "accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture",
          allowFullScreen: true
        })),
        width: window.innerWidth * 0.9,
        closable: true,
        getContainer: () => wp.data.select("getgenie").sidebar().rootContainer,
        zIndex: 9999,
        maskClosable: true,
        okButtonProps: { style: { display: "none" } },
        className: "getgenie-video-modal",
        footer: null,
        okText: null,
        icon: null,
        centered: true
      });
    };
    return /* @__PURE__ */ React.createElement(React.Fragment, null, /* @__PURE__ */ React.createElement(HeaderAdminPage, {
      headerRightVisible: false
    }), /* @__PURE__ */ React.createElement("div", {
      className: "getgenie-getting-started"
    }, /* @__PURE__ */ React.createElement("div", {
      className: "getgenie-getting-started-header"
    }, /* @__PURE__ */ React.createElement("h3", {
      className: "getgenie-getting-started-header-title"
    }, sidebar4.__("Get Started with GetGenie", "getgenie")), /* @__PURE__ */ React.createElement("p", {
      className: "getgenie-getting-started-header-description"
    }, sidebar4.__("Setting up GetGenie AI takes only a few minutes! Simply go through the \u201CGetting Started\u201D video, click", "getgenie"), /* @__PURE__ */ React.createElement("br", null), sidebar4.__("the buttons below, and voila \u2014 the AI magic is ready for you!", "getgenie"))), /* @__PURE__ */ React.createElement("div", {
      className: "getgenie-getting-started-top_video"
    }, /* @__PURE__ */ React.createElement("iframe", {
      className: "getgenie-getting-started-top_video-iframe",
      src: "https://www.youtube.com/embed/bVoiXJOKBIQ",
      title: "YouTube video player",
      frameBorder: "2",
      allow: "accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture",
      allowFullScreen: true
    }), /* @__PURE__ */ React.createElement("div", {
      className: "getgenie-getting-started-top_video-button-container"
    }, /* @__PURE__ */ React.createElement("a", {
      target: "_blank",
      className: "getgenie-getting-started-top_video-button",
      href: "https://app.getgenie.ai/manage-sites/"
    }, sidebar4.__("Manage Your License", "getgenie")), /* @__PURE__ */ React.createElement("a", {
      target: "_blank",
      className: "getgenie-getting-started-top_video-button",
      href: "https://getgenie.ai/docs/getting-started/getting-started-with-getgenie-ai/"
    }, sidebar4.__("Read the Documentation", "getgenie")), /* @__PURE__ */ React.createElement("a", {
      target: "_blank",
      className: "getgenie-getting-started-top_video-button",
      href: "https://www.facebook.com/groups/792474565423684/"
    }, sidebar4.__("Join the community", "getgenie")))), /* @__PURE__ */ React.createElement("div", {
      className: "getgenie-getting-started-card-container"
    }, /* @__PURE__ */ React.createElement(Row4, {
      gutter: [16, 16]
    }, videoDetailsContainer.map((item, key) => /* @__PURE__ */ React.createElement(Col4, {
      key,
      sm: 24,
      lg: 8
    }, /* @__PURE__ */ React.createElement(Card, null, /* @__PURE__ */ React.createElement("h3", null, sidebar4.__(item.title, "getgenie")), /* @__PURE__ */ React.createElement("p", null, sidebar4.__(item.description, "getgenie")), /* @__PURE__ */ React.createElement("img", {
      style: { cursor: "pointer" },
      onClick: () => handleVideo(item.videoLink),
      width: "100%",
      src: item.thumbnail
    }), /* @__PURE__ */ React.createElement("a", {
      target: "_blank",
      className: "getgenie-getting-started-card-container-documentation-btn",
      href: item.documentationLink
    }, sidebar4.__("Read the Documentation", "getgenie"))))))), /* @__PURE__ */ React.createElement("div", {
      className: "getgenie-getting-started-card-container blog-container"
    }, /* @__PURE__ */ React.createElement("h2", {
      className: "blog-container-title"
    }, "Read Our Growth-Focused Blog"), /* @__PURE__ */ React.createElement(Row4, {
      gutter: [16, 16]
    }, blogContainer.map((blog, key) => /* @__PURE__ */ React.createElement(Col4, {
      key,
      md: 24,
      lg: 12,
      xl: 8
    }, /* @__PURE__ */ React.createElement(Card, {
      style: { height: "100%" },
      hoverable: true,
      onClick: () => {
        handleClick(blog.link);
      }
    }, /* @__PURE__ */ React.createElement("img", {
      width: "100%",
      src: blog.thumbnail
    }), /* @__PURE__ */ React.createElement("h3", null, blog.heading)))))), /* @__PURE__ */ React.createElement("div", {
      className: "getgenie-getting-started-resource"
    }, /* @__PURE__ */ React.createElement("h3", null, sidebar4.__("More Resources to Check Out", "getgenie")), /* @__PURE__ */ React.createElement(Row4, {
      gutter: [8, 16]
    }, Object.keys(documentations).map((documentation, key) => /* @__PURE__ */ React.createElement(Col4, {
      key,
      sm: 24,
      md: 12,
      lg: 8
    }, /* @__PURE__ */ React.createElement(Card, {
      className: "getgenie-getting-started-resource-card",
      style: { height: "100%" }
    }, /* @__PURE__ */ React.createElement("ul", null, /* @__PURE__ */ React.createElement("li", null, /* @__PURE__ */ React.createElement("a", {
      target: "_blank",
      href: documentations[documentation][0].link
    }, sidebar4.__(documentations[documentation][0].title, "getgenie"))), /* @__PURE__ */ React.createElement("li", null, /* @__PURE__ */ React.createElement("a", {
      target: "_blank",
      href: documentations[documentation][1].link
    }, sidebar4.__(documentations[documentation][1].title, "getgenie"))), /* @__PURE__ */ React.createElement("li", null, /* @__PURE__ */ React.createElement("a", {
      target: "_blank",
      href: documentations[documentation][2].link
    }, sidebar4.__(documentations[documentation][2].title, "getgenie"))), /* @__PURE__ */ React.createElement("li", null, /* @__PURE__ */ React.createElement("a", {
      target: "_blank",
      href: documentations[documentation][3].link
    }, sidebar4.__(documentations[documentation][3].title, "getgenie"))), /* @__PURE__ */ React.createElement("li", null, /* @__PURE__ */ React.createElement("a", {
      target: "_blank",
      href: documentations[documentation][4].link
    }, sidebar4.__(documentations[documentation][4].title, "getgenie")))))))))));
  };
  var GettingStarted_default = GettingStarted;

  // assets/src/admin/js/AdminPages/RoadmapAdminPage/index.js
  var { Libs: Libs5 } = window.getGenie.Components.Common;
  var { Col: Col5, Input: Input2, Row: Row5 } = window.antd;
  var { ComposeComponents: ComposeComponents4 } = window.getGenie.Components.Common.ReduxManager;
  var { useState: useState7 } = window.React;
  var RoadmapAdminPage = ComposeComponents4(
    ({ setSidebar, sidebar: sidebar4, templates: templates2 }) => {
      const changelog = [
        {
          release_version: "1.2.1",
          release_date: "22/11/2022",
          release_info: [
            "improved: blog wizard competitor statistics calculation.",
            "fixed: conflicting issue with Detectorist plugin which prevented to create DOM elements."
          ]
        },
        {
          release_version: "1.2.2",
          release_date: "22/10/2022",
          release_info: [
            "added: multi language support (Spanish, German) and more to go.",
            "added: template writings and advance writing in WordPress pages.",
            "added: full site editor support for template writings and advance writing.",
            "added: template writings and advance writing are also added in Gutenberg based CPTs.",
            "improved: repositioned getting started menu for better accessibility."
          ]
        }
      ];
      return /* @__PURE__ */ React.createElement(React.Fragment, null, /* @__PURE__ */ React.createElement(HeaderAdminPage, null), /* @__PURE__ */ React.createElement("div", {
        className: "getgenie-info-wrapper getgenie-roadmap-wrapper"
      }, /* @__PURE__ */ React.createElement("div", {
        className: "getgenie-dashboard-templates getgenie-license-page"
      }, /* @__PURE__ */ React.createElement(Row5, null, /* @__PURE__ */ React.createElement(Col5, {
        span: 24
      }, /* @__PURE__ */ React.createElement("h5", {
        className: "getgenie-title getgenie-roadmap-title"
      }, sidebar4.__("Changelog/Upcoming Features", "getgenie")))), /* @__PURE__ */ React.createElement(Row5, {
        gutter: [{ md: 16 }, 16],
        className: "getgenie-roadmap-content-row",
        style: { marginTop: "50px" }
      }, /* @__PURE__ */ React.createElement(Col5, {
        className: "getgenie-roadmap-content-col getgenie-roadmap-content-col-1",
        lg: 12,
        xl: 16
      }, /* @__PURE__ */ React.createElement("div", {
        className: "getgenie-roadmap-content-col-wrapper"
      }, /* @__PURE__ */ React.createElement("h3", {
        className: "getgenie-roadmap-feature-heading"
      }, "Changelogs"), changelog.map((item) => /* @__PURE__ */ React.createElement(React.Fragment, null, /* @__PURE__ */ React.createElement("div", {
        className: "getgenie-changelog"
      }, /* @__PURE__ */ React.createElement("p", {
        className: "getgenie-changelog-release-date"
      }, item?.release_date), /* @__PURE__ */ React.createElement("h4", {
        className: "getgenie-changelog-release-version"
      }, "Version: ", item?.release_version), /* @__PURE__ */ React.createElement("div", {
        className: "getgenie-changelog-release-details"
      }, /* @__PURE__ */ React.createElement("ul", {
        className: "getgenie-changelog-release-list"
      }, item?.release_info.map((changes) => /* @__PURE__ */ React.createElement(React.Fragment, null, /* @__PURE__ */ React.createElement("li", null, changes)))))))))), /* @__PURE__ */ React.createElement(Col5, {
        className: "getgenie-roadmap-content-col getgenie-roadmap-content-col-2",
        lg: 12,
        xl: 8
      }, /* @__PURE__ */ React.createElement("div", {
        className: "getgenie-roadmap-content-col-wrapper"
      }, /* @__PURE__ */ React.createElement("h3", {
        className: "getgenie-roadmap-feature-heading"
      }, "Upcoming Feature"), changelog.map((item) => /* @__PURE__ */ React.createElement(React.Fragment, null, /* @__PURE__ */ React.createElement("div", {
        className: "getgenie-changelog"
      }, /* @__PURE__ */ React.createElement("p", {
        className: "getgenie-changelog-release-date"
      }, item?.release_date), /* @__PURE__ */ React.createElement("h4", {
        className: "getgenie-changelog-release-version"
      }, "Version: ", item?.release_version), /* @__PURE__ */ React.createElement("div", {
        className: "getgenie-changelog-release-details"
      }, /* @__PURE__ */ React.createElement("ul", {
        className: "getgenie-changelog-release-list"
      }, item?.release_info.map((changes) => /* @__PURE__ */ React.createElement(React.Fragment, null, /* @__PURE__ */ React.createElement("li", null, changes))))))))))))));
    },
    ["setSidebar", "sidebar", "templates"]
  );
  var RoadmapAdminPage_default = RoadmapAdminPage;

  // assets/src/admin/js/Common/Utilities/searchVolume.js
  var demoOverviewChartData = {
    searchVolTrend: [
      { date: "3/24", volume: 0 },
      { date: "4/24", volume: 0 },
      { date: "5/24", volume: 0 },
      { date: "6/24", volume: 0 },
      { date: "7/24", volume: 0 },
      { date: "8/24", volume: 0 },
      { date: "9/24", volume: 0 },
      { date: "10/24", volume: 0 },
      { date: "11/24", volume: 0 },
      { date: "12/24", volume: 0 },
      { date: "1/24", volume: 0 },
      { date: "2/25", volume: 0 }
    ],
    googleTrend: []
  };
  var missingSearchVolumeData = {
    "lastMonth": 0,
    "avg12Month": "0.0",
    "highest": 0,
    "lowest": 0
  };

  // assets/src/admin/js/BlogWizard/SeoData/Keywords/KeywordAnalysis.js
  var { Col: Col6, Row: Row6, Typography: Typography3, Divider: Divider2 } = window.antd;
  var { ComposeComponents: ComposeComponents5 } = window.getGenie.Components.Common.ReduxManager;
  var KeywordAnalysis = ComposeComponents5(({ getInputs, sidebar: sidebar4 }) => {
    const analysisData = getInputs["searchVolume"];
    const data = [
      { title: "Last Month", value: analysisData?.searchVolume?.lastMonth },
      { title: "Average 12 month", value: analysisData?.searchVolume?.avg12Month },
      { title: "Highest", value: analysisData?.searchVolume?.highest },
      { title: "Lowest", value: analysisData?.searchVolume?.lowest }
    ];
    return /* @__PURE__ */ React.createElement("div", {
      className: "getgenie-keyword-analysis"
    }, /* @__PURE__ */ React.createElement(Typography3.Title, {
      level: 4,
      className: "getgenie-title"
    }, sidebar4.__("Keyword Analysis", "getgenie")), analysisData ? /* @__PURE__ */ React.createElement(React.Fragment, null, /* @__PURE__ */ React.createElement(Row6, {
      gutter: 6
    }, /* @__PURE__ */ React.createElement(Col6, {
      className: "gutter-row",
      flex: "auto"
    }, /* @__PURE__ */ React.createElement("div", {
      className: "getgenie-keyword-result volume"
    }, /* @__PURE__ */ React.createElement(Typography3.Title, {
      level: 5,
      className: "getgenie-title"
    }, sidebar4.__("Search Volume", "getgenie")), /* @__PURE__ */ React.createElement("div", {
      className: "getgenie-result-item"
    }, /* @__PURE__ */ React.createElement(Typography3.Text, {
      className: "getgenie-text"
    }, analysisData?.searchVolume?.total || "-"), /* @__PURE__ */ React.createElement("span", {
      className: "getgenie-icon-search"
    })))), /* @__PURE__ */ React.createElement(Col6, {
      className: "gutter-row",
      flex: "auto"
    }, /* @__PURE__ */ React.createElement("div", {
      className: "getgenie-keyword-result competition"
    }, /* @__PURE__ */ React.createElement(Typography3.Title, {
      level: 5,
      className: "getgenie-title"
    }, sidebar4.__("Competition", "getgenie")), /* @__PURE__ */ React.createElement("div", {
      className: "getgenie-result-item"
    }, /* @__PURE__ */ React.createElement(Typography3.Text, {
      className: "getgenie-text"
    }, analysisData?.searchVolume?.competition || "-"), /* @__PURE__ */ React.createElement("span", {
      className: "getgenie-icon-competition_icon"
    })))), /* @__PURE__ */ React.createElement(Col6, {
      className: "gutter-row",
      flex: "auto"
    }, /* @__PURE__ */ React.createElement("div", {
      className: "getgenie-keyword-result cpc"
    }, /* @__PURE__ */ React.createElement(Typography3.Title, {
      level: 5,
      className: "getgenie-title"
    }, "CPC"), /* @__PURE__ */ React.createElement("div", {
      className: "getgenie-result-item"
    }, /* @__PURE__ */ React.createElement(Typography3.Text, {
      className: "getgenie-text"
    }, analysisData?.searchVolume?.cpc?.currency || "-", " ", analysisData?.searchVolume?.cpc?.value), /* @__PURE__ */ React.createElement("span", {
      className: "getgenie-icon-cpc_icon"
    }))))), data?.[1]?.value ? /* @__PURE__ */ React.createElement("div", {
      className: "getgenie-list-data"
    }, data.map(
      (item, index) => /* @__PURE__ */ React.createElement("div", {
        key: index
      }, /* @__PURE__ */ React.createElement("div", {
        className: "getgenie-list-data-container"
      }, /* @__PURE__ */ React.createElement(Typography3.Title, {
        level: 5,
        className: "getgenie-list-data-title"
      }, item.title), /* @__PURE__ */ React.createElement(Typography3.Title, {
        level: 5,
        className: "getgenie-list-data-value"
      }, item.value)), index !== data.length - 1 && /* @__PURE__ */ React.createElement(Divider2, null))
    )) : "") : /* @__PURE__ */ React.createElement(Typography3.Title, {
      level: 5,
      className: "getgenie-not-found-title"
    }, sidebar4.__("No magic found for this keyword. Maybe try a different one?", "getgenie")));
  }, ["getInputs", "sidebar"]);

  // assets/src/admin/js/BlogWizard/SeoData/Keywords/GoogleTrendChart.js
  var { Libs: Libs6 } = window.getGenie.Components.Common;
  var { useState: useState8, memo, useEffect: useEffect5 } = window.React;
  var GoogleTrendChart = memo(({ data }) => {
    const [url, setUrl] = useState8(null);
    const [loading, setLoading] = useState8(true);
    useEffect5(() => {
      if (!data) {
        return;
      }
      let keyword = encodeURIComponent(data);
      let modifiedUrl = `https://trends.google.com:443/trends/embed/explore/TIMESERIES?req=%7B%22comparisonItem%22%3A%5B%7B%22keyword%22%3A%22#ENCODED_KEYWORD#%22%2C%22geo%22%3A%22%22%2C%22time%22%3A%22today%2012-m%22%7D%5D%2C%22category%22%3A0%2C%22property%22%3A%22%22%7D&tz=-360&eq=q%3D#DOUBLE_ENCODED_KEYWORD#%26date%3Dtoday%2012-m`;
      modifiedUrl = modifiedUrl.replace("#ENCODED_KEYWORD#", keyword);
      modifiedUrl = modifiedUrl.replace("#DOUBLE_ENCODED_KEYWORD#", encodeURIComponent(keyword));
      setUrl(modifiedUrl);
    }, [data]);
    const onLoad = (e7) => {
      e7.target.style.display = "block";
      setLoading(false);
    };
    return url && /* @__PURE__ */ React.createElement(React.Fragment, null, /* @__PURE__ */ React.createElement("iframe", {
      onLoad,
      id: "trends-widget-1",
      title: "trends-widget-1",
      src: url,
      className: "getgenie-chart",
      frameBorder: "0",
      scrolling: "0",
      style: { height: "370px", width: "300px", padding: 0, display: "none" }
    }), loading ? /* @__PURE__ */ React.createElement(Libs6.Loading, null) : "");
  });
  var GoogleTrendChart_default = GoogleTrendChart;

  // node_modules/chart.js/dist/chunks/helpers.segment.mjs
  function noop() {
  }
  var uid = function() {
    let id = 0;
    return function() {
      return id++;
    };
  }();
  function isNullOrUndef(value) {
    return value === null || typeof value === "undefined";
  }
  function isArray(value) {
    if (Array.isArray && Array.isArray(value)) {
      return true;
    }
    const type = Object.prototype.toString.call(value);
    if (type.slice(0, 7) === "[object" && type.slice(-6) === "Array]") {
      return true;
    }
    return false;
  }
  function isObject(value) {
    return value !== null && Object.prototype.toString.call(value) === "[object Object]";
  }
  var isNumberFinite = (value) => (typeof value === "number" || value instanceof Number) && isFinite(+value);
  function finiteOrDefault(value, defaultValue) {
    return isNumberFinite(value) ? value : defaultValue;
  }
  function valueOrDefault(value, defaultValue) {
    return typeof value === "undefined" ? defaultValue : value;
  }
  var toPercentage = (value, dimension) => typeof value === "string" && value.endsWith("%") ? parseFloat(value) / 100 : value / dimension;
  var toDimension = (value, dimension) => typeof value === "string" && value.endsWith("%") ? parseFloat(value) / 100 * dimension : +value;
  function callback(fn2, args, thisArg) {
    if (fn2 && typeof fn2.call === "function") {
      return fn2.apply(thisArg, args);
    }
  }
  function each(loopable, fn2, thisArg, reverse) {
    let i6, len, keys;
    if (isArray(loopable)) {
      len = loopable.length;
      if (reverse) {
        for (i6 = len - 1; i6 >= 0; i6--) {
          fn2.call(thisArg, loopable[i6], i6);
        }
      } else {
        for (i6 = 0; i6 < len; i6++) {
          fn2.call(thisArg, loopable[i6], i6);
        }
      }
    } else if (isObject(loopable)) {
      keys = Object.keys(loopable);
      len = keys.length;
      for (i6 = 0; i6 < len; i6++) {
        fn2.call(thisArg, loopable[keys[i6]], keys[i6]);
      }
    }
  }
  function _elementsEqual(a0, a1) {
    let i6, ilen, v0, v1;
    if (!a0 || !a1 || a0.length !== a1.length) {
      return false;
    }
    for (i6 = 0, ilen = a0.length; i6 < ilen; ++i6) {
      v0 = a0[i6];
      v1 = a1[i6];
      if (v0.datasetIndex !== v1.datasetIndex || v0.index !== v1.index) {
        return false;
      }
    }
    return true;
  }
  function clone$1(source) {
    if (isArray(source)) {
      return source.map(clone$1);
    }
    if (isObject(source)) {
      const target = /* @__PURE__ */ Object.create(null);
      const keys = Object.keys(source);
      const klen = keys.length;
      let k2 = 0;
      for (; k2 < klen; ++k2) {
        target[keys[k2]] = clone$1(source[keys[k2]]);
      }
      return target;
    }
    return source;
  }
  function isValidKey(key) {
    return ["__proto__", "prototype", "constructor"].indexOf(key) === -1;
  }
  function _merger(key, target, source, options) {
    if (!isValidKey(key)) {
      return;
    }
    const tval = target[key];
    const sval = source[key];
    if (isObject(tval) && isObject(sval)) {
      merge(tval, sval, options);
    } else {
      target[key] = clone$1(sval);
    }
  }
  function merge(target, source, options) {
    const sources = isArray(source) ? source : [source];
    const ilen = sources.length;
    if (!isObject(target)) {
      return target;
    }
    options = options || {};
    const merger = options.merger || _merger;
    for (let i6 = 0; i6 < ilen; ++i6) {
      source = sources[i6];
      if (!isObject(source)) {
        continue;
      }
      const keys = Object.keys(source);
      for (let k2 = 0, klen = keys.length; k2 < klen; ++k2) {
        merger(keys[k2], target, source, options);
      }
    }
    return target;
  }
  function mergeIf(target, source) {
    return merge(target, source, { merger: _mergerIf });
  }
  function _mergerIf(key, target, source) {
    if (!isValidKey(key)) {
      return;
    }
    const tval = target[key];
    const sval = source[key];
    if (isObject(tval) && isObject(sval)) {
      mergeIf(tval, sval);
    } else if (!Object.prototype.hasOwnProperty.call(target, key)) {
      target[key] = clone$1(sval);
    }
  }
  var keyResolvers = {
    "": (v4) => v4,
    x: (o6) => o6.x,
    y: (o6) => o6.y
  };
  function resolveObjectKey(obj, key) {
    const resolver = keyResolvers[key] || (keyResolvers[key] = _getKeyResolver(key));
    return resolver(obj);
  }
  function _getKeyResolver(key) {
    const keys = _splitKey(key);
    return (obj) => {
      for (const k2 of keys) {
        if (k2 === "") {
          break;
        }
        obj = obj && obj[k2];
      }
      return obj;
    };
  }
  function _splitKey(key) {
    const parts = key.split(".");
    const keys = [];
    let tmp = "";
    for (const part of parts) {
      tmp += part;
      if (tmp.endsWith("\\")) {
        tmp = tmp.slice(0, -1) + ".";
      } else {
        keys.push(tmp);
        tmp = "";
      }
    }
    return keys;
  }
  function _capitalize(str) {
    return str.charAt(0).toUpperCase() + str.slice(1);
  }
  var defined = (value) => typeof value !== "undefined";
  var isFunction = (value) => typeof value === "function";
  var setsEqual = (a2, b3) => {
    if (a2.size !== b3.size) {
      return false;
    }
    for (const item of a2) {
      if (!b3.has(item)) {
        return false;
      }
    }
    return true;
  };
  function _isClickEvent(e7) {
    return e7.type === "mouseup" || e7.type === "click" || e7.type === "contextmenu";
  }
  var PI = Math.PI;
  var TAU = 2 * PI;
  var PITAU = TAU + PI;
  var INFINITY = Number.POSITIVE_INFINITY;
  var RAD_PER_DEG = PI / 180;
  var HALF_PI = PI / 2;
  var QUARTER_PI = PI / 4;
  var TWO_THIRDS_PI = PI * 2 / 3;
  var log10 = Math.log10;
  var sign = Math.sign;
  function niceNum(range) {
    const roundedRange = Math.round(range);
    range = almostEquals(range, roundedRange, range / 1e3) ? roundedRange : range;
    const niceRange = Math.pow(10, Math.floor(log10(range)));
    const fraction = range / niceRange;
    const niceFraction = fraction <= 1 ? 1 : fraction <= 2 ? 2 : fraction <= 5 ? 5 : 10;
    return niceFraction * niceRange;
  }
  function _factorize(value) {
    const result = [];
    const sqrt = Math.sqrt(value);
    let i6;
    for (i6 = 1; i6 < sqrt; i6++) {
      if (value % i6 === 0) {
        result.push(i6);
        result.push(value / i6);
      }
    }
    if (sqrt === (sqrt | 0)) {
      result.push(sqrt);
    }
    result.sort((a2, b3) => a2 - b3).pop();
    return result;
  }
  function isNumber(n6) {
    return !isNaN(parseFloat(n6)) && isFinite(n6);
  }
  function almostEquals(x3, y4, epsilon5) {
    return Math.abs(x3 - y4) < epsilon5;
  }
  function almostWhole(x3, epsilon5) {
    const rounded = Math.round(x3);
    return rounded - epsilon5 <= x3 && rounded + epsilon5 >= x3;
  }
  function _setMinAndMaxByKey(array, target, property) {
    let i6, ilen, value;
    for (i6 = 0, ilen = array.length; i6 < ilen; i6++) {
      value = array[i6][property];
      if (!isNaN(value)) {
        target.min = Math.min(target.min, value);
        target.max = Math.max(target.max, value);
      }
    }
  }
  function toRadians(degrees2) {
    return degrees2 * (PI / 180);
  }
  function toDegrees(radians2) {
    return radians2 * (180 / PI);
  }
  function _decimalPlaces(x3) {
    if (!isNumberFinite(x3)) {
      return;
    }
    let e7 = 1;
    let p2 = 0;
    while (Math.round(x3 * e7) / e7 !== x3) {
      e7 *= 10;
      p2++;
    }
    return p2;
  }
  function getAngleFromPoint(centrePoint, anglePoint) {
    const distanceFromXCenter = anglePoint.x - centrePoint.x;
    const distanceFromYCenter = anglePoint.y - centrePoint.y;
    const radialDistanceFromCenter = Math.sqrt(distanceFromXCenter * distanceFromXCenter + distanceFromYCenter * distanceFromYCenter);
    let angle = Math.atan2(distanceFromYCenter, distanceFromXCenter);
    if (angle < -0.5 * PI) {
      angle += TAU;
    }
    return {
      angle,
      distance: radialDistanceFromCenter
    };
  }
  function distanceBetweenPoints(pt1, pt2) {
    return Math.sqrt(Math.pow(pt2.x - pt1.x, 2) + Math.pow(pt2.y - pt1.y, 2));
  }
  function _angleDiff(a2, b3) {
    return (a2 - b3 + PITAU) % TAU - PI;
  }
  function _normalizeAngle(a2) {
    return (a2 % TAU + TAU) % TAU;
  }
  function _angleBetween(angle, start2, end, sameAngleIsFullCircle) {
    const a2 = _normalizeAngle(angle);
    const s3 = _normalizeAngle(start2);
    const e7 = _normalizeAngle(end);
    const angleToStart = _normalizeAngle(s3 - a2);
    const angleToEnd = _normalizeAngle(e7 - a2);
    const startToAngle = _normalizeAngle(a2 - s3);
    const endToAngle = _normalizeAngle(a2 - e7);
    return a2 === s3 || a2 === e7 || sameAngleIsFullCircle && s3 === e7 || angleToStart > angleToEnd && startToAngle < endToAngle;
  }
  function _limitValue(value, min, max) {
    return Math.max(min, Math.min(max, value));
  }
  function _int16Range(value) {
    return _limitValue(value, -32768, 32767);
  }
  function _isBetween(value, start2, end, epsilon5 = 1e-6) {
    return value >= Math.min(start2, end) - epsilon5 && value <= Math.max(start2, end) + epsilon5;
  }
  function _lookup(table, value, cmp) {
    cmp = cmp || ((index) => table[index] < value);
    let hi = table.length - 1;
    let lo = 0;
    let mid;
    while (hi - lo > 1) {
      mid = lo + hi >> 1;
      if (cmp(mid)) {
        lo = mid;
      } else {
        hi = mid;
      }
    }
    return { lo, hi };
  }
  var _lookupByKey = (table, key, value, last) => _lookup(table, value, last ? (index) => table[index][key] <= value : (index) => table[index][key] < value);
  var _rlookupByKey = (table, key, value) => _lookup(table, value, (index) => table[index][key] >= value);
  function _filterBetween(values, min, max) {
    let start2 = 0;
    let end = values.length;
    while (start2 < end && values[start2] < min) {
      start2++;
    }
    while (end > start2 && values[end - 1] > max) {
      end--;
    }
    return start2 > 0 || end < values.length ? values.slice(start2, end) : values;
  }
  var arrayEvents = ["push", "pop", "shift", "splice", "unshift"];
  function listenArrayEvents(array, listener) {
    if (array._chartjs) {
      array._chartjs.listeners.push(listener);
      return;
    }
    Object.defineProperty(array, "_chartjs", {
      configurable: true,
      enumerable: false,
      value: {
        listeners: [listener]
      }
    });
    arrayEvents.forEach((key) => {
      const method = "_onData" + _capitalize(key);
      const base = array[key];
      Object.defineProperty(array, key, {
        configurable: true,
        enumerable: false,
        value(...args) {
          const res = base.apply(this, args);
          array._chartjs.listeners.forEach((object) => {
            if (typeof object[method] === "function") {
              object[method](...args);
            }
          });
          return res;
        }
      });
    });
  }
  function unlistenArrayEvents(array, listener) {
    const stub = array._chartjs;
    if (!stub) {
      return;
    }
    const listeners = stub.listeners;
    const index = listeners.indexOf(listener);
    if (index !== -1) {
      listeners.splice(index, 1);
    }
    if (listeners.length > 0) {
      return;
    }
    arrayEvents.forEach((key) => {
      delete array[key];
    });
    delete array._chartjs;
  }
  function _arrayUnique(items) {
    const set2 = /* @__PURE__ */ new Set();
    let i6, ilen;
    for (i6 = 0, ilen = items.length; i6 < ilen; ++i6) {
      set2.add(items[i6]);
    }
    if (set2.size === ilen) {
      return items;
    }
    return Array.from(set2);
  }
  var requestAnimFrame = function() {
    if (typeof window === "undefined") {
      return function(callback2) {
        return callback2();
      };
    }
    return window.requestAnimationFrame;
  }();
  function throttled(fn2, thisArg, updateFn) {
    const updateArgs = updateFn || ((args2) => Array.prototype.slice.call(args2));
    let ticking = false;
    let args = [];
    return function(...rest) {
      args = updateArgs(rest);
      if (!ticking) {
        ticking = true;
        requestAnimFrame.call(window, () => {
          ticking = false;
          fn2.apply(thisArg, args);
        });
      }
    };
  }
  function debounce(fn2, delay) {
    let timeout;
    return function(...args) {
      if (delay) {
        clearTimeout(timeout);
        timeout = setTimeout(fn2, delay, args);
      } else {
        fn2.apply(this, args);
      }
      return delay;
    };
  }
  var _toLeftRightCenter = (align) => align === "start" ? "left" : align === "end" ? "right" : "center";
  var _alignStartEnd = (align, start2, end) => align === "start" ? start2 : align === "end" ? end : (start2 + end) / 2;
  var _textX = (align, left, right, rtl) => {
    const check = rtl ? "left" : "right";
    return align === check ? right : align === "center" ? (left + right) / 2 : left;
  };
  function _getStartAndCountOfVisiblePoints(meta, points, animationsDisabled) {
    const pointCount = points.length;
    let start2 = 0;
    let count2 = pointCount;
    if (meta._sorted) {
      const { iScale, _parsed } = meta;
      const axis = iScale.axis;
      const { min, max, minDefined, maxDefined } = iScale.getUserBounds();
      if (minDefined) {
        start2 = _limitValue(
          Math.min(
            _lookupByKey(_parsed, iScale.axis, min).lo,
            animationsDisabled ? pointCount : _lookupByKey(points, axis, iScale.getPixelForValue(min)).lo
          ),
          0,
          pointCount - 1
        );
      }
      if (maxDefined) {
        count2 = _limitValue(
          Math.max(
            _lookupByKey(_parsed, iScale.axis, max, true).hi + 1,
            animationsDisabled ? 0 : _lookupByKey(points, axis, iScale.getPixelForValue(max), true).hi + 1
          ),
          start2,
          pointCount
        ) - start2;
      } else {
        count2 = pointCount - start2;
      }
    }
    return { start: start2, count: count2 };
  }
  function _scaleRangesChanged(meta) {
    const { xScale, yScale, _scaleRanges } = meta;
    const newRanges = {
      xmin: xScale.min,
      xmax: xScale.max,
      ymin: yScale.min,
      ymax: yScale.max
    };
    if (!_scaleRanges) {
      meta._scaleRanges = newRanges;
      return true;
    }
    const changed = _scaleRanges.xmin !== xScale.min || _scaleRanges.xmax !== xScale.max || _scaleRanges.ymin !== yScale.min || _scaleRanges.ymax !== yScale.max;
    Object.assign(_scaleRanges, newRanges);
    return changed;
  }
  var atEdge = (t5) => t5 === 0 || t5 === 1;
  var elasticIn = (t5, s3, p2) => -(Math.pow(2, 10 * (t5 -= 1)) * Math.sin((t5 - s3) * TAU / p2));
  var elasticOut = (t5, s3, p2) => Math.pow(2, -10 * t5) * Math.sin((t5 - s3) * TAU / p2) + 1;
  var effects = {
    linear: (t5) => t5,
    easeInQuad: (t5) => t5 * t5,
    easeOutQuad: (t5) => -t5 * (t5 - 2),
    easeInOutQuad: (t5) => (t5 /= 0.5) < 1 ? 0.5 * t5 * t5 : -0.5 * (--t5 * (t5 - 2) - 1),
    easeInCubic: (t5) => t5 * t5 * t5,
    easeOutCubic: (t5) => (t5 -= 1) * t5 * t5 + 1,
    easeInOutCubic: (t5) => (t5 /= 0.5) < 1 ? 0.5 * t5 * t5 * t5 : 0.5 * ((t5 -= 2) * t5 * t5 + 2),
    easeInQuart: (t5) => t5 * t5 * t5 * t5,
    easeOutQuart: (t5) => -((t5 -= 1) * t5 * t5 * t5 - 1),
    easeInOutQuart: (t5) => (t5 /= 0.5) < 1 ? 0.5 * t5 * t5 * t5 * t5 : -0.5 * ((t5 -= 2) * t5 * t5 * t5 - 2),
    easeInQuint: (t5) => t5 * t5 * t5 * t5 * t5,
    easeOutQuint: (t5) => (t5 -= 1) * t5 * t5 * t5 * t5 + 1,
    easeInOutQuint: (t5) => (t5 /= 0.5) < 1 ? 0.5 * t5 * t5 * t5 * t5 * t5 : 0.5 * ((t5 -= 2) * t5 * t5 * t5 * t5 + 2),
    easeInSine: (t5) => -Math.cos(t5 * HALF_PI) + 1,
    easeOutSine: (t5) => Math.sin(t5 * HALF_PI),
    easeInOutSine: (t5) => -0.5 * (Math.cos(PI * t5) - 1),
    easeInExpo: (t5) => t5 === 0 ? 0 : Math.pow(2, 10 * (t5 - 1)),
    easeOutExpo: (t5) => t5 === 1 ? 1 : -Math.pow(2, -10 * t5) + 1,
    easeInOutExpo: (t5) => atEdge(t5) ? t5 : t5 < 0.5 ? 0.5 * Math.pow(2, 10 * (t5 * 2 - 1)) : 0.5 * (-Math.pow(2, -10 * (t5 * 2 - 1)) + 2),
    easeInCirc: (t5) => t5 >= 1 ? t5 : -(Math.sqrt(1 - t5 * t5) - 1),
    easeOutCirc: (t5) => Math.sqrt(1 - (t5 -= 1) * t5),
    easeInOutCirc: (t5) => (t5 /= 0.5) < 1 ? -0.5 * (Math.sqrt(1 - t5 * t5) - 1) : 0.5 * (Math.sqrt(1 - (t5 -= 2) * t5) + 1),
    easeInElastic: (t5) => atEdge(t5) ? t5 : elasticIn(t5, 0.075, 0.3),
    easeOutElastic: (t5) => atEdge(t5) ? t5 : elasticOut(t5, 0.075, 0.3),
    easeInOutElastic(t5) {
      const s3 = 0.1125;
      const p2 = 0.45;
      return atEdge(t5) ? t5 : t5 < 0.5 ? 0.5 * elasticIn(t5 * 2, s3, p2) : 0.5 + 0.5 * elasticOut(t5 * 2 - 1, s3, p2);
    },
    easeInBack(t5) {
      const s3 = 1.70158;
      return t5 * t5 * ((s3 + 1) * t5 - s3);
    },
    easeOutBack(t5) {
      const s3 = 1.70158;
      return (t5 -= 1) * t5 * ((s3 + 1) * t5 + s3) + 1;
    },
    easeInOutBack(t5) {
      let s3 = 1.70158;
      if ((t5 /= 0.5) < 1) {
        return 0.5 * (t5 * t5 * (((s3 *= 1.525) + 1) * t5 - s3));
      }
      return 0.5 * ((t5 -= 2) * t5 * (((s3 *= 1.525) + 1) * t5 + s3) + 2);
    },
    easeInBounce: (t5) => 1 - effects.easeOutBounce(1 - t5),
    easeOutBounce(t5) {
      const m4 = 7.5625;
      const d2 = 2.75;
      if (t5 < 1 / d2) {
        return m4 * t5 * t5;
      }
      if (t5 < 2 / d2) {
        return m4 * (t5 -= 1.5 / d2) * t5 + 0.75;
      }
      if (t5 < 2.5 / d2) {
        return m4 * (t5 -= 2.25 / d2) * t5 + 0.9375;
      }
      return m4 * (t5 -= 2.625 / d2) * t5 + 0.984375;
    },
    easeInOutBounce: (t5) => t5 < 0.5 ? effects.easeInBounce(t5 * 2) * 0.5 : effects.easeOutBounce(t5 * 2 - 1) * 0.5 + 0.5
  };
  function round(v4) {
    return v4 + 0.5 | 0;
  }
  var lim = (v4, l5, h) => Math.max(Math.min(v4, h), l5);
  function p2b(v4) {
    return lim(round(v4 * 2.55), 0, 255);
  }
  function n2b(v4) {
    return lim(round(v4 * 255), 0, 255);
  }
  function b2n(v4) {
    return lim(round(v4 / 2.55) / 100, 0, 1);
  }
  function n2p(v4) {
    return lim(round(v4 * 100), 0, 100);
  }
  var map$1 = { 0: 0, 1: 1, 2: 2, 3: 3, 4: 4, 5: 5, 6: 6, 7: 7, 8: 8, 9: 9, A: 10, B: 11, C: 12, D: 13, E: 14, F: 15, a: 10, b: 11, c: 12, d: 13, e: 14, f: 15 };
  var hex = [..."0123456789ABCDEF"];
  var h1 = (b3) => hex[b3 & 15];
  var h2 = (b3) => hex[(b3 & 240) >> 4] + hex[b3 & 15];
  var eq = (b3) => (b3 & 240) >> 4 === (b3 & 15);
  var isShort = (v4) => eq(v4.r) && eq(v4.g) && eq(v4.b) && eq(v4.a);
  function hexParse(str) {
    var len = str.length;
    var ret;
    if (str[0] === "#") {
      if (len === 4 || len === 5) {
        ret = {
          r: 255 & map$1[str[1]] * 17,
          g: 255 & map$1[str[2]] * 17,
          b: 255 & map$1[str[3]] * 17,
          a: len === 5 ? map$1[str[4]] * 17 : 255
        };
      } else if (len === 7 || len === 9) {
        ret = {
          r: map$1[str[1]] << 4 | map$1[str[2]],
          g: map$1[str[3]] << 4 | map$1[str[4]],
          b: map$1[str[5]] << 4 | map$1[str[6]],
          a: len === 9 ? map$1[str[7]] << 4 | map$1[str[8]] : 255
        };
      }
    }
    return ret;
  }
  var alpha = (a2, f2) => a2 < 255 ? f2(a2) : "";
  function hexString(v4) {
    var f2 = isShort(v4) ? h1 : h2;
    return v4 ? "#" + f2(v4.r) + f2(v4.g) + f2(v4.b) + alpha(v4.a, f2) : void 0;
  }
  var HUE_RE = /^(hsla?|hwb|hsv)\(\s*([-+.e\d]+)(?:deg)?[\s,]+([-+.e\d]+)%[\s,]+([-+.e\d]+)%(?:[\s,]+([-+.e\d]+)(%)?)?\s*\)$/;
  function hsl2rgbn(h, s3, l5) {
    const a2 = s3 * Math.min(l5, 1 - l5);
    const f2 = (n6, k2 = (n6 + h / 30) % 12) => l5 - a2 * Math.max(Math.min(k2 - 3, 9 - k2, 1), -1);
    return [f2(0), f2(8), f2(4)];
  }
  function hsv2rgbn(h, s3, v4) {
    const f2 = (n6, k2 = (n6 + h / 60) % 6) => v4 - v4 * s3 * Math.max(Math.min(k2, 4 - k2, 1), 0);
    return [f2(5), f2(3), f2(1)];
  }
  function hwb2rgbn(h, w3, b3) {
    const rgb5 = hsl2rgbn(h, 1, 0.5);
    let i6;
    if (w3 + b3 > 1) {
      i6 = 1 / (w3 + b3);
      w3 *= i6;
      b3 *= i6;
    }
    for (i6 = 0; i6 < 3; i6++) {
      rgb5[i6] *= 1 - w3 - b3;
      rgb5[i6] += w3;
    }
    return rgb5;
  }
  function hueValue(r6, g2, b3, d2, max) {
    if (r6 === max) {
      return (g2 - b3) / d2 + (g2 < b3 ? 6 : 0);
    }
    if (g2 === max) {
      return (b3 - r6) / d2 + 2;
    }
    return (r6 - g2) / d2 + 4;
  }
  function rgb2hsl(v4) {
    const range = 255;
    const r6 = v4.r / range;
    const g2 = v4.g / range;
    const b3 = v4.b / range;
    const max = Math.max(r6, g2, b3);
    const min = Math.min(r6, g2, b3);
    const l5 = (max + min) / 2;
    let h, s3, d2;
    if (max !== min) {
      d2 = max - min;
      s3 = l5 > 0.5 ? d2 / (2 - max - min) : d2 / (max + min);
      h = hueValue(r6, g2, b3, d2, max);
      h = h * 60 + 0.5;
    }
    return [h | 0, s3 || 0, l5];
  }
  function calln(f2, a2, b3, c8) {
    return (Array.isArray(a2) ? f2(a2[0], a2[1], a2[2]) : f2(a2, b3, c8)).map(n2b);
  }
  function hsl2rgb(h, s3, l5) {
    return calln(hsl2rgbn, h, s3, l5);
  }
  function hwb2rgb(h, w3, b3) {
    return calln(hwb2rgbn, h, w3, b3);
  }
  function hsv2rgb(h, s3, v4) {
    return calln(hsv2rgbn, h, s3, v4);
  }
  function hue(h) {
    return (h % 360 + 360) % 360;
  }
  function hueParse(str) {
    const m4 = HUE_RE.exec(str);
    let a2 = 255;
    let v4;
    if (!m4) {
      return;
    }
    if (m4[5] !== v4) {
      a2 = m4[6] ? p2b(+m4[5]) : n2b(+m4[5]);
    }
    const h = hue(+m4[2]);
    const p1 = +m4[3] / 100;
    const p2 = +m4[4] / 100;
    if (m4[1] === "hwb") {
      v4 = hwb2rgb(h, p1, p2);
    } else if (m4[1] === "hsv") {
      v4 = hsv2rgb(h, p1, p2);
    } else {
      v4 = hsl2rgb(h, p1, p2);
    }
    return {
      r: v4[0],
      g: v4[1],
      b: v4[2],
      a: a2
    };
  }
  function rotate(v4, deg) {
    var h = rgb2hsl(v4);
    h[0] = hue(h[0] + deg);
    h = hsl2rgb(h);
    v4.r = h[0];
    v4.g = h[1];
    v4.b = h[2];
  }
  function hslString(v4) {
    if (!v4) {
      return;
    }
    const a2 = rgb2hsl(v4);
    const h = a2[0];
    const s3 = n2p(a2[1]);
    const l5 = n2p(a2[2]);
    return v4.a < 255 ? `hsla(${h}, ${s3}%, ${l5}%, ${b2n(v4.a)})` : `hsl(${h}, ${s3}%, ${l5}%)`;
  }
  var map = {
    x: "dark",
    Z: "light",
    Y: "re",
    X: "blu",
    W: "gr",
    V: "medium",
    U: "slate",
    A: "ee",
    T: "ol",
    S: "or",
    B: "ra",
    C: "lateg",
    D: "ights",
    R: "in",
    Q: "turquois",
    E: "hi",
    P: "ro",
    O: "al",
    N: "le",
    M: "de",
    L: "yello",
    F: "en",
    K: "ch",
    G: "arks",
    H: "ea",
    I: "ightg",
    J: "wh"
  };
  var names$1 = {
    OiceXe: "f0f8ff",
    antiquewEte: "faebd7",
    aqua: "ffff",
    aquamarRe: "7fffd4",
    azuY: "f0ffff",
    beige: "f5f5dc",
    bisque: "ffe4c4",
    black: "0",
    blanKedOmond: "ffebcd",
    Xe: "ff",
    XeviTet: "8a2be2",
    bPwn: "a52a2a",
    burlywood: "deb887",
    caMtXe: "5f9ea0",
    KartYuse: "7fff00",
    KocTate: "d2691e",
    cSO: "ff7f50",
    cSnflowerXe: "6495ed",
    cSnsilk: "fff8dc",
    crimson: "dc143c",
    cyan: "ffff",
    xXe: "8b",
    xcyan: "8b8b",
    xgTMnPd: "b8860b",
    xWay: "a9a9a9",
    xgYF: "6400",
    xgYy: "a9a9a9",
    xkhaki: "bdb76b",
    xmagFta: "8b008b",
    xTivegYF: "556b2f",
    xSange: "ff8c00",
    xScEd: "9932cc",
    xYd: "8b0000",
    xsOmon: "e9967a",
    xsHgYF: "8fbc8f",
    xUXe: "483d8b",
    xUWay: "2f4f4f",
    xUgYy: "2f4f4f",
    xQe: "ced1",
    xviTet: "9400d3",
    dAppRk: "ff1493",
    dApskyXe: "bfff",
    dimWay: "696969",
    dimgYy: "696969",
    dodgerXe: "1e90ff",
    fiYbrick: "b22222",
    flSOwEte: "fffaf0",
    foYstWAn: "228b22",
    fuKsia: "ff00ff",
    gaRsbSo: "dcdcdc",
    ghostwEte: "f8f8ff",
    gTd: "ffd700",
    gTMnPd: "daa520",
    Way: "808080",
    gYF: "8000",
    gYFLw: "adff2f",
    gYy: "808080",
    honeyMw: "f0fff0",
    hotpRk: "ff69b4",
    RdianYd: "cd5c5c",
    Rdigo: "4b0082",
    ivSy: "fffff0",
    khaki: "f0e68c",
    lavFMr: "e6e6fa",
    lavFMrXsh: "fff0f5",
    lawngYF: "7cfc00",
    NmoncEffon: "fffacd",
    ZXe: "add8e6",
    ZcSO: "f08080",
    Zcyan: "e0ffff",
    ZgTMnPdLw: "fafad2",
    ZWay: "d3d3d3",
    ZgYF: "90ee90",
    ZgYy: "d3d3d3",
    ZpRk: "ffb6c1",
    ZsOmon: "ffa07a",
    ZsHgYF: "20b2aa",
    ZskyXe: "87cefa",
    ZUWay: "778899",
    ZUgYy: "778899",
    ZstAlXe: "b0c4de",
    ZLw: "ffffe0",
    lime: "ff00",
    limegYF: "32cd32",
    lRF: "faf0e6",
    magFta: "ff00ff",
    maPon: "800000",
    VaquamarRe: "66cdaa",
    VXe: "cd",
    VScEd: "ba55d3",
    VpurpN: "9370db",
    VsHgYF: "3cb371",
    VUXe: "7b68ee",
    VsprRggYF: "fa9a",
    VQe: "48d1cc",
    VviTetYd: "c71585",
    midnightXe: "191970",
    mRtcYam: "f5fffa",
    mistyPse: "ffe4e1",
    moccasR: "ffe4b5",
    navajowEte: "ffdead",
    navy: "80",
    Tdlace: "fdf5e6",
    Tive: "808000",
    TivedBb: "6b8e23",
    Sange: "ffa500",
    SangeYd: "ff4500",
    ScEd: "da70d6",
    pOegTMnPd: "eee8aa",
    pOegYF: "98fb98",
    pOeQe: "afeeee",
    pOeviTetYd: "db7093",
    papayawEp: "ffefd5",
    pHKpuff: "ffdab9",
    peru: "cd853f",
    pRk: "ffc0cb",
    plum: "dda0dd",
    powMrXe: "b0e0e6",
    purpN: "800080",
    YbeccapurpN: "663399",
    Yd: "ff0000",
    Psybrown: "bc8f8f",
    PyOXe: "4169e1",
    saddNbPwn: "8b4513",
    sOmon: "fa8072",
    sandybPwn: "f4a460",
    sHgYF: "2e8b57",
    sHshell: "fff5ee",
    siFna: "a0522d",
    silver: "c0c0c0",
    skyXe: "87ceeb",
    UXe: "6a5acd",
    UWay: "708090",
    UgYy: "708090",
    snow: "fffafa",
    sprRggYF: "ff7f",
    stAlXe: "4682b4",
    tan: "d2b48c",
    teO: "8080",
    tEstN: "d8bfd8",
    tomato: "ff6347",
    Qe: "40e0d0",
    viTet: "ee82ee",
    JHt: "f5deb3",
    wEte: "ffffff",
    wEtesmoke: "f5f5f5",
    Lw: "ffff00",
    LwgYF: "9acd32"
  };
  function unpack() {
    const unpacked = {};
    const keys = Object.keys(names$1);
    const tkeys = Object.keys(map);
    let i6, j3, k2, ok, nk;
    for (i6 = 0; i6 < keys.length; i6++) {
      ok = nk = keys[i6];
      for (j3 = 0; j3 < tkeys.length; j3++) {
        k2 = tkeys[j3];
        nk = nk.replace(k2, map[k2]);
      }
      k2 = parseInt(names$1[ok], 16);
      unpacked[nk] = [k2 >> 16 & 255, k2 >> 8 & 255, k2 & 255];
    }
    return unpacked;
  }
  var names;
  function nameParse(str) {
    if (!names) {
      names = unpack();
      names.transparent = [0, 0, 0, 0];
    }
    const a2 = names[str.toLowerCase()];
    return a2 && {
      r: a2[0],
      g: a2[1],
      b: a2[2],
      a: a2.length === 4 ? a2[3] : 255
    };
  }
  var RGB_RE = /^rgba?\(\s*([-+.\d]+)(%)?[\s,]+([-+.e\d]+)(%)?[\s,]+([-+.e\d]+)(%)?(?:[\s,/]+([-+.e\d]+)(%)?)?\s*\)$/;
  function rgbParse(str) {
    const m4 = RGB_RE.exec(str);
    let a2 = 255;
    let r6, g2, b3;
    if (!m4) {
      return;
    }
    if (m4[7] !== r6) {
      const v4 = +m4[7];
      a2 = m4[8] ? p2b(v4) : lim(v4 * 255, 0, 255);
    }
    r6 = +m4[1];
    g2 = +m4[3];
    b3 = +m4[5];
    r6 = 255 & (m4[2] ? p2b(r6) : lim(r6, 0, 255));
    g2 = 255 & (m4[4] ? p2b(g2) : lim(g2, 0, 255));
    b3 = 255 & (m4[6] ? p2b(b3) : lim(b3, 0, 255));
    return {
      r: r6,
      g: g2,
      b: b3,
      a: a2
    };
  }
  function rgbString(v4) {
    return v4 && (v4.a < 255 ? `rgba(${v4.r}, ${v4.g}, ${v4.b}, ${b2n(v4.a)})` : `rgb(${v4.r}, ${v4.g}, ${v4.b})`);
  }
  var to = (v4) => v4 <= 31308e-7 ? v4 * 12.92 : Math.pow(v4, 1 / 2.4) * 1.055 - 0.055;
  var from = (v4) => v4 <= 0.04045 ? v4 / 12.92 : Math.pow((v4 + 0.055) / 1.055, 2.4);
  function interpolate(rgb1, rgb22, t5) {
    const r6 = from(b2n(rgb1.r));
    const g2 = from(b2n(rgb1.g));
    const b3 = from(b2n(rgb1.b));
    return {
      r: n2b(to(r6 + t5 * (from(b2n(rgb22.r)) - r6))),
      g: n2b(to(g2 + t5 * (from(b2n(rgb22.g)) - g2))),
      b: n2b(to(b3 + t5 * (from(b2n(rgb22.b)) - b3))),
      a: rgb1.a + t5 * (rgb22.a - rgb1.a)
    };
  }
  function modHSL(v4, i6, ratio) {
    if (v4) {
      let tmp = rgb2hsl(v4);
      tmp[i6] = Math.max(0, Math.min(tmp[i6] + tmp[i6] * ratio, i6 === 0 ? 360 : 1));
      tmp = hsl2rgb(tmp);
      v4.r = tmp[0];
      v4.g = tmp[1];
      v4.b = tmp[2];
    }
  }
  function clone(v4, proto) {
    return v4 ? Object.assign(proto || {}, v4) : v4;
  }
  function fromObject(input) {
    var v4 = { r: 0, g: 0, b: 0, a: 255 };
    if (Array.isArray(input)) {
      if (input.length >= 3) {
        v4 = { r: input[0], g: input[1], b: input[2], a: 255 };
        if (input.length > 3) {
          v4.a = n2b(input[3]);
        }
      }
    } else {
      v4 = clone(input, { r: 0, g: 0, b: 0, a: 1 });
      v4.a = n2b(v4.a);
    }
    return v4;
  }
  function functionParse(str) {
    if (str.charAt(0) === "r") {
      return rgbParse(str);
    }
    return hueParse(str);
  }
  var Color = class {
    constructor(input) {
      if (input instanceof Color) {
        return input;
      }
      const type = typeof input;
      let v4;
      if (type === "object") {
        v4 = fromObject(input);
      } else if (type === "string") {
        v4 = hexParse(input) || nameParse(input) || functionParse(input);
      }
      this._rgb = v4;
      this._valid = !!v4;
    }
    get valid() {
      return this._valid;
    }
    get rgb() {
      var v4 = clone(this._rgb);
      if (v4) {
        v4.a = b2n(v4.a);
      }
      return v4;
    }
    set rgb(obj) {
      this._rgb = fromObject(obj);
    }
    rgbString() {
      return this._valid ? rgbString(this._rgb) : void 0;
    }
    hexString() {
      return this._valid ? hexString(this._rgb) : void 0;
    }
    hslString() {
      return this._valid ? hslString(this._rgb) : void 0;
    }
    mix(color5, weight) {
      if (color5) {
        const c12 = this.rgb;
        const c22 = color5.rgb;
        let w22;
        const p2 = weight === w22 ? 0.5 : weight;
        const w3 = 2 * p2 - 1;
        const a2 = c12.a - c22.a;
        const w1 = ((w3 * a2 === -1 ? w3 : (w3 + a2) / (1 + w3 * a2)) + 1) / 2;
        w22 = 1 - w1;
        c12.r = 255 & w1 * c12.r + w22 * c22.r + 0.5;
        c12.g = 255 & w1 * c12.g + w22 * c22.g + 0.5;
        c12.b = 255 & w1 * c12.b + w22 * c22.b + 0.5;
        c12.a = p2 * c12.a + (1 - p2) * c22.a;
        this.rgb = c12;
      }
      return this;
    }
    interpolate(color5, t5) {
      if (color5) {
        this._rgb = interpolate(this._rgb, color5._rgb, t5);
      }
      return this;
    }
    clone() {
      return new Color(this.rgb);
    }
    alpha(a2) {
      this._rgb.a = n2b(a2);
      return this;
    }
    clearer(ratio) {
      const rgb5 = this._rgb;
      rgb5.a *= 1 - ratio;
      return this;
    }
    greyscale() {
      const rgb5 = this._rgb;
      const val2 = round(rgb5.r * 0.3 + rgb5.g * 0.59 + rgb5.b * 0.11);
      rgb5.r = rgb5.g = rgb5.b = val2;
      return this;
    }
    opaquer(ratio) {
      const rgb5 = this._rgb;
      rgb5.a *= 1 + ratio;
      return this;
    }
    negate() {
      const v4 = this._rgb;
      v4.r = 255 - v4.r;
      v4.g = 255 - v4.g;
      v4.b = 255 - v4.b;
      return this;
    }
    lighten(ratio) {
      modHSL(this._rgb, 2, ratio);
      return this;
    }
    darken(ratio) {
      modHSL(this._rgb, 2, -ratio);
      return this;
    }
    saturate(ratio) {
      modHSL(this._rgb, 1, ratio);
      return this;
    }
    desaturate(ratio) {
      modHSL(this._rgb, 1, -ratio);
      return this;
    }
    rotate(deg) {
      rotate(this._rgb, deg);
      return this;
    }
  };
  function index_esm(input) {
    return new Color(input);
  }
  function isPatternOrGradient(value) {
    if (value && typeof value === "object") {
      const type = value.toString();
      return type === "[object CanvasPattern]" || type === "[object CanvasGradient]";
    }
    return false;
  }
  function color(value) {
    return isPatternOrGradient(value) ? value : index_esm(value);
  }
  function getHoverColor(value) {
    return isPatternOrGradient(value) ? value : index_esm(value).saturate(0.5).darken(0.1).hexString();
  }
  var overrides = /* @__PURE__ */ Object.create(null);
  var descriptors = /* @__PURE__ */ Object.create(null);
  function getScope$1(node, key) {
    if (!key) {
      return node;
    }
    const keys = key.split(".");
    for (let i6 = 0, n6 = keys.length; i6 < n6; ++i6) {
      const k2 = keys[i6];
      node = node[k2] || (node[k2] = /* @__PURE__ */ Object.create(null));
    }
    return node;
  }
  function set(root, scope, values) {
    if (typeof scope === "string") {
      return merge(getScope$1(root, scope), values);
    }
    return merge(getScope$1(root, ""), scope);
  }
  var Defaults = class {
    constructor(_descriptors2) {
      this.animation = void 0;
      this.backgroundColor = "rgba(0,0,0,0.1)";
      this.borderColor = "rgba(0,0,0,0.1)";
      this.color = "#666";
      this.datasets = {};
      this.devicePixelRatio = (context) => context.chart.platform.getDevicePixelRatio();
      this.elements = {};
      this.events = [
        "mousemove",
        "mouseout",
        "click",
        "touchstart",
        "touchmove"
      ];
      this.font = {
        family: "'Helvetica Neue', 'Helvetica', 'Arial', sans-serif",
        size: 12,
        style: "normal",
        lineHeight: 1.2,
        weight: null
      };
      this.hover = {};
      this.hoverBackgroundColor = (ctx2, options) => getHoverColor(options.backgroundColor);
      this.hoverBorderColor = (ctx2, options) => getHoverColor(options.borderColor);
      this.hoverColor = (ctx2, options) => getHoverColor(options.color);
      this.indexAxis = "x";
      this.interaction = {
        mode: "nearest",
        intersect: true,
        includeInvisible: false
      };
      this.maintainAspectRatio = true;
      this.onHover = null;
      this.onClick = null;
      this.parsing = true;
      this.plugins = {};
      this.responsive = true;
      this.scale = void 0;
      this.scales = {};
      this.showLine = true;
      this.drawActiveElementsOnTop = true;
      this.describe(_descriptors2);
    }
    set(scope, values) {
      return set(this, scope, values);
    }
    get(scope) {
      return getScope$1(this, scope);
    }
    describe(scope, values) {
      return set(descriptors, scope, values);
    }
    override(scope, values) {
      return set(overrides, scope, values);
    }
    route(scope, name, targetScope, targetName) {
      const scopeObject = getScope$1(this, scope);
      const targetScopeObject = getScope$1(this, targetScope);
      const privateName = "_" + name;
      Object.defineProperties(scopeObject, {
        [privateName]: {
          value: scopeObject[name],
          writable: true
        },
        [name]: {
          enumerable: true,
          get() {
            const local = this[privateName];
            const target = targetScopeObject[targetName];
            if (isObject(local)) {
              return Object.assign({}, target, local);
            }
            return valueOrDefault(local, target);
          },
          set(value) {
            this[privateName] = value;
          }
        }
      });
    }
  };
  var defaults = new Defaults({
    _scriptable: (name) => !name.startsWith("on"),
    _indexable: (name) => name !== "events",
    hover: {
      _fallback: "interaction"
    },
    interaction: {
      _scriptable: false,
      _indexable: false
    }
  });
  function toFontString(font) {
    if (!font || isNullOrUndef(font.size) || isNullOrUndef(font.family)) {
      return null;
    }
    return (font.style ? font.style + " " : "") + (font.weight ? font.weight + " " : "") + font.size + "px " + font.family;
  }
  function _measureText(ctx2, data, gc, longest, string) {
    let textWidth = data[string];
    if (!textWidth) {
      textWidth = data[string] = ctx2.measureText(string).width;
      gc.push(string);
    }
    if (textWidth > longest) {
      longest = textWidth;
    }
    return longest;
  }
  function _longestText(ctx2, font, arrayOfThings, cache) {
    cache = cache || {};
    let data = cache.data = cache.data || {};
    let gc = cache.garbageCollect = cache.garbageCollect || [];
    if (cache.font !== font) {
      data = cache.data = {};
      gc = cache.garbageCollect = [];
      cache.font = font;
    }
    ctx2.save();
    ctx2.font = font;
    let longest = 0;
    const ilen = arrayOfThings.length;
    let i6, j3, jlen, thing, nestedThing;
    for (i6 = 0; i6 < ilen; i6++) {
      thing = arrayOfThings[i6];
      if (thing !== void 0 && thing !== null && isArray(thing) !== true) {
        longest = _measureText(ctx2, data, gc, longest, thing);
      } else if (isArray(thing)) {
        for (j3 = 0, jlen = thing.length; j3 < jlen; j3++) {
          nestedThing = thing[j3];
          if (nestedThing !== void 0 && nestedThing !== null && !isArray(nestedThing)) {
            longest = _measureText(ctx2, data, gc, longest, nestedThing);
          }
        }
      }
    }
    ctx2.restore();
    const gcLen = gc.length / 2;
    if (gcLen > arrayOfThings.length) {
      for (i6 = 0; i6 < gcLen; i6++) {
        delete data[gc[i6]];
      }
      gc.splice(0, gcLen);
    }
    return longest;
  }
  function _alignPixel(chart, pixel, width) {
    const devicePixelRatio2 = chart.currentDevicePixelRatio;
    const halfWidth = width !== 0 ? Math.max(width / 2, 0.5) : 0;
    return Math.round((pixel - halfWidth) * devicePixelRatio2) / devicePixelRatio2 + halfWidth;
  }
  function clearCanvas(canvas, ctx2) {
    ctx2 = ctx2 || canvas.getContext("2d");
    ctx2.save();
    ctx2.resetTransform();
    ctx2.clearRect(0, 0, canvas.width, canvas.height);
    ctx2.restore();
  }
  function drawPoint(ctx2, options, x3, y4) {
    drawPointLegend(ctx2, options, x3, y4, null);
  }
  function drawPointLegend(ctx2, options, x3, y4, w3) {
    let type, xOffset, yOffset, size, cornerRadius, width;
    const style = options.pointStyle;
    const rotation = options.rotation;
    const radius = options.radius;
    let rad = (rotation || 0) * RAD_PER_DEG;
    if (style && typeof style === "object") {
      type = style.toString();
      if (type === "[object HTMLImageElement]" || type === "[object HTMLCanvasElement]") {
        ctx2.save();
        ctx2.translate(x3, y4);
        ctx2.rotate(rad);
        ctx2.drawImage(style, -style.width / 2, -style.height / 2, style.width, style.height);
        ctx2.restore();
        return;
      }
    }
    if (isNaN(radius) || radius <= 0) {
      return;
    }
    ctx2.beginPath();
    switch (style) {
      default:
        if (w3) {
          ctx2.ellipse(x3, y4, w3 / 2, radius, 0, 0, TAU);
        } else {
          ctx2.arc(x3, y4, radius, 0, TAU);
        }
        ctx2.closePath();
        break;
      case "triangle":
        ctx2.moveTo(x3 + Math.sin(rad) * radius, y4 - Math.cos(rad) * radius);
        rad += TWO_THIRDS_PI;
        ctx2.lineTo(x3 + Math.sin(rad) * radius, y4 - Math.cos(rad) * radius);
        rad += TWO_THIRDS_PI;
        ctx2.lineTo(x3 + Math.sin(rad) * radius, y4 - Math.cos(rad) * radius);
        ctx2.closePath();
        break;
      case "rectRounded":
        cornerRadius = radius * 0.516;
        size = radius - cornerRadius;
        xOffset = Math.cos(rad + QUARTER_PI) * size;
        yOffset = Math.sin(rad + QUARTER_PI) * size;
        ctx2.arc(x3 - xOffset, y4 - yOffset, cornerRadius, rad - PI, rad - HALF_PI);
        ctx2.arc(x3 + yOffset, y4 - xOffset, cornerRadius, rad - HALF_PI, rad);
        ctx2.arc(x3 + xOffset, y4 + yOffset, cornerRadius, rad, rad + HALF_PI);
        ctx2.arc(x3 - yOffset, y4 + xOffset, cornerRadius, rad + HALF_PI, rad + PI);
        ctx2.closePath();
        break;
      case "rect":
        if (!rotation) {
          size = Math.SQRT1_2 * radius;
          width = w3 ? w3 / 2 : size;
          ctx2.rect(x3 - width, y4 - size, 2 * width, 2 * size);
          break;
        }
        rad += QUARTER_PI;
      case "rectRot":
        xOffset = Math.cos(rad) * radius;
        yOffset = Math.sin(rad) * radius;
        ctx2.moveTo(x3 - xOffset, y4 - yOffset);
        ctx2.lineTo(x3 + yOffset, y4 - xOffset);
        ctx2.lineTo(x3 + xOffset, y4 + yOffset);
        ctx2.lineTo(x3 - yOffset, y4 + xOffset);
        ctx2.closePath();
        break;
      case "crossRot":
        rad += QUARTER_PI;
      case "cross":
        xOffset = Math.cos(rad) * radius;
        yOffset = Math.sin(rad) * radius;
        ctx2.moveTo(x3 - xOffset, y4 - yOffset);
        ctx2.lineTo(x3 + xOffset, y4 + yOffset);
        ctx2.moveTo(x3 + yOffset, y4 - xOffset);
        ctx2.lineTo(x3 - yOffset, y4 + xOffset);
        break;
      case "star":
        xOffset = Math.cos(rad) * radius;
        yOffset = Math.sin(rad) * radius;
        ctx2.moveTo(x3 - xOffset, y4 - yOffset);
        ctx2.lineTo(x3 + xOffset, y4 + yOffset);
        ctx2.moveTo(x3 + yOffset, y4 - xOffset);
        ctx2.lineTo(x3 - yOffset, y4 + xOffset);
        rad += QUARTER_PI;
        xOffset = Math.cos(rad) * radius;
        yOffset = Math.sin(rad) * radius;
        ctx2.moveTo(x3 - xOffset, y4 - yOffset);
        ctx2.lineTo(x3 + xOffset, y4 + yOffset);
        ctx2.moveTo(x3 + yOffset, y4 - xOffset);
        ctx2.lineTo(x3 - yOffset, y4 + xOffset);
        break;
      case "line":
        xOffset = w3 ? w3 / 2 : Math.cos(rad) * radius;
        yOffset = Math.sin(rad) * radius;
        ctx2.moveTo(x3 - xOffset, y4 - yOffset);
        ctx2.lineTo(x3 + xOffset, y4 + yOffset);
        break;
      case "dash":
        ctx2.moveTo(x3, y4);
        ctx2.lineTo(x3 + Math.cos(rad) * radius, y4 + Math.sin(rad) * radius);
        break;
    }
    ctx2.fill();
    if (options.borderWidth > 0) {
      ctx2.stroke();
    }
  }
  function _isPointInArea(point5, area, margin) {
    margin = margin || 0.5;
    return !area || point5 && point5.x > area.left - margin && point5.x < area.right + margin && point5.y > area.top - margin && point5.y < area.bottom + margin;
  }
  function clipArea(ctx2, area) {
    ctx2.save();
    ctx2.beginPath();
    ctx2.rect(area.left, area.top, area.right - area.left, area.bottom - area.top);
    ctx2.clip();
  }
  function unclipArea(ctx2) {
    ctx2.restore();
  }
  function _steppedLineTo(ctx2, previous, target, flip, mode) {
    if (!previous) {
      return ctx2.lineTo(target.x, target.y);
    }
    if (mode === "middle") {
      const midpoint = (previous.x + target.x) / 2;
      ctx2.lineTo(midpoint, previous.y);
      ctx2.lineTo(midpoint, target.y);
    } else if (mode === "after" !== !!flip) {
      ctx2.lineTo(previous.x, target.y);
    } else {
      ctx2.lineTo(target.x, previous.y);
    }
    ctx2.lineTo(target.x, target.y);
  }
  function _bezierCurveTo(ctx2, previous, target, flip) {
    if (!previous) {
      return ctx2.lineTo(target.x, target.y);
    }
    ctx2.bezierCurveTo(
      flip ? previous.cp1x : previous.cp2x,
      flip ? previous.cp1y : previous.cp2y,
      flip ? target.cp2x : target.cp1x,
      flip ? target.cp2y : target.cp1y,
      target.x,
      target.y
    );
  }
  function renderText(ctx2, text, x3, y4, font, opts = {}) {
    const lines = isArray(text) ? text : [text];
    const stroke = opts.strokeWidth > 0 && opts.strokeColor !== "";
    let i6, line;
    ctx2.save();
    ctx2.font = font.string;
    setRenderOpts(ctx2, opts);
    for (i6 = 0; i6 < lines.length; ++i6) {
      line = lines[i6];
      if (stroke) {
        if (opts.strokeColor) {
          ctx2.strokeStyle = opts.strokeColor;
        }
        if (!isNullOrUndef(opts.strokeWidth)) {
          ctx2.lineWidth = opts.strokeWidth;
        }
        ctx2.strokeText(line, x3, y4, opts.maxWidth);
      }
      ctx2.fillText(line, x3, y4, opts.maxWidth);
      decorateText(ctx2, x3, y4, line, opts);
      y4 += font.lineHeight;
    }
    ctx2.restore();
  }
  function setRenderOpts(ctx2, opts) {
    if (opts.translation) {
      ctx2.translate(opts.translation[0], opts.translation[1]);
    }
    if (!isNullOrUndef(opts.rotation)) {
      ctx2.rotate(opts.rotation);
    }
    if (opts.color) {
      ctx2.fillStyle = opts.color;
    }
    if (opts.textAlign) {
      ctx2.textAlign = opts.textAlign;
    }
    if (opts.textBaseline) {
      ctx2.textBaseline = opts.textBaseline;
    }
  }
  function decorateText(ctx2, x3, y4, line, opts) {
    if (opts.strikethrough || opts.underline) {
      const metrics = ctx2.measureText(line);
      const left = x3 - metrics.actualBoundingBoxLeft;
      const right = x3 + metrics.actualBoundingBoxRight;
      const top = y4 - metrics.actualBoundingBoxAscent;
      const bottom = y4 + metrics.actualBoundingBoxDescent;
      const yDecoration = opts.strikethrough ? (top + bottom) / 2 : bottom;
      ctx2.strokeStyle = ctx2.fillStyle;
      ctx2.beginPath();
      ctx2.lineWidth = opts.decorationWidth || 2;
      ctx2.moveTo(left, yDecoration);
      ctx2.lineTo(right, yDecoration);
      ctx2.stroke();
    }
  }
  function addRoundedRectPath(ctx2, rect) {
    const { x: x3, y: y4, w: w3, h, radius } = rect;
    ctx2.arc(x3 + radius.topLeft, y4 + radius.topLeft, radius.topLeft, -HALF_PI, PI, true);
    ctx2.lineTo(x3, y4 + h - radius.bottomLeft);
    ctx2.arc(x3 + radius.bottomLeft, y4 + h - radius.bottomLeft, radius.bottomLeft, PI, HALF_PI, true);
    ctx2.lineTo(x3 + w3 - radius.bottomRight, y4 + h);
    ctx2.arc(x3 + w3 - radius.bottomRight, y4 + h - radius.bottomRight, radius.bottomRight, HALF_PI, 0, true);
    ctx2.lineTo(x3 + w3, y4 + radius.topRight);
    ctx2.arc(x3 + w3 - radius.topRight, y4 + radius.topRight, radius.topRight, 0, -HALF_PI, true);
    ctx2.lineTo(x3 + radius.topLeft, y4);
  }
  var LINE_HEIGHT = new RegExp(/^(normal|(\d+(?:\.\d+)?)(px|em|%)?)$/);
  var FONT_STYLE = new RegExp(/^(normal|italic|initial|inherit|unset|(oblique( -?[0-9]?[0-9]deg)?))$/);
  function toLineHeight(value, size) {
    const matches = ("" + value).match(LINE_HEIGHT);
    if (!matches || matches[1] === "normal") {
      return size * 1.2;
    }
    value = +matches[2];
    switch (matches[3]) {
      case "px":
        return value;
      case "%":
        value /= 100;
        break;
    }
    return size * value;
  }
  var numberOrZero = (v4) => +v4 || 0;
  function _readValueToProps(value, props) {
    const ret = {};
    const objProps = isObject(props);
    const keys = objProps ? Object.keys(props) : props;
    const read = isObject(value) ? objProps ? (prop) => valueOrDefault(value[prop], value[props[prop]]) : (prop) => value[prop] : () => value;
    for (const prop of keys) {
      ret[prop] = numberOrZero(read(prop));
    }
    return ret;
  }
  function toTRBL(value) {
    return _readValueToProps(value, { top: "y", right: "x", bottom: "y", left: "x" });
  }
  function toTRBLCorners(value) {
    return _readValueToProps(value, ["topLeft", "topRight", "bottomLeft", "bottomRight"]);
  }
  function toPadding(value) {
    const obj = toTRBL(value);
    obj.width = obj.left + obj.right;
    obj.height = obj.top + obj.bottom;
    return obj;
  }
  function toFont(options, fallback) {
    options = options || {};
    fallback = fallback || defaults.font;
    let size = valueOrDefault(options.size, fallback.size);
    if (typeof size === "string") {
      size = parseInt(size, 10);
    }
    let style = valueOrDefault(options.style, fallback.style);
    if (style && !("" + style).match(FONT_STYLE)) {
      console.warn('Invalid font style specified: "' + style + '"');
      style = "";
    }
    const font = {
      family: valueOrDefault(options.family, fallback.family),
      lineHeight: toLineHeight(valueOrDefault(options.lineHeight, fallback.lineHeight), size),
      size,
      style,
      weight: valueOrDefault(options.weight, fallback.weight),
      string: ""
    };
    font.string = toFontString(font);
    return font;
  }
  function resolve(inputs, context, index, info) {
    let cacheable = true;
    let i6, ilen, value;
    for (i6 = 0, ilen = inputs.length; i6 < ilen; ++i6) {
      value = inputs[i6];
      if (value === void 0) {
        continue;
      }
      if (context !== void 0 && typeof value === "function") {
        value = value(context);
        cacheable = false;
      }
      if (index !== void 0 && isArray(value)) {
        value = value[index % value.length];
        cacheable = false;
      }
      if (value !== void 0) {
        if (info && !cacheable) {
          info.cacheable = false;
        }
        return value;
      }
    }
  }
  function _addGrace(minmax, grace, beginAtZero) {
    const { min, max } = minmax;
    const change = toDimension(grace, (max - min) / 2);
    const keepZero = (value, add) => beginAtZero && value === 0 ? 0 : value + add;
    return {
      min: keepZero(min, -Math.abs(change)),
      max: keepZero(max, change)
    };
  }
  function createContext(parentContext, context) {
    return Object.assign(Object.create(parentContext), context);
  }
  function _createResolver(scopes, prefixes6 = [""], rootScopes = scopes, fallback, getTarget = () => scopes[0]) {
    if (!defined(fallback)) {
      fallback = _resolve("_fallback", scopes);
    }
    const cache = {
      [Symbol.toStringTag]: "Object",
      _cacheable: true,
      _scopes: scopes,
      _rootScopes: rootScopes,
      _fallback: fallback,
      _getTarget: getTarget,
      override: (scope) => _createResolver([scope, ...scopes], prefixes6, rootScopes, fallback)
    };
    return new Proxy(cache, {
      deleteProperty(target, prop) {
        delete target[prop];
        delete target._keys;
        delete scopes[0][prop];
        return true;
      },
      get(target, prop) {
        return _cached(
          target,
          prop,
          () => _resolveWithPrefixes(prop, prefixes6, scopes, target)
        );
      },
      getOwnPropertyDescriptor(target, prop) {
        return Reflect.getOwnPropertyDescriptor(target._scopes[0], prop);
      },
      getPrototypeOf() {
        return Reflect.getPrototypeOf(scopes[0]);
      },
      has(target, prop) {
        return getKeysFromAllScopes(target).includes(prop);
      },
      ownKeys(target) {
        return getKeysFromAllScopes(target);
      },
      set(target, prop, value) {
        const storage = target._storage || (target._storage = getTarget());
        target[prop] = storage[prop] = value;
        delete target._keys;
        return true;
      }
    });
  }
  function _attachContext(proxy, context, subProxy, descriptorDefaults) {
    const cache = {
      _cacheable: false,
      _proxy: proxy,
      _context: context,
      _subProxy: subProxy,
      _stack: /* @__PURE__ */ new Set(),
      _descriptors: _descriptors(proxy, descriptorDefaults),
      setContext: (ctx2) => _attachContext(proxy, ctx2, subProxy, descriptorDefaults),
      override: (scope) => _attachContext(proxy.override(scope), context, subProxy, descriptorDefaults)
    };
    return new Proxy(cache, {
      deleteProperty(target, prop) {
        delete target[prop];
        delete proxy[prop];
        return true;
      },
      get(target, prop, receiver) {
        return _cached(
          target,
          prop,
          () => _resolveWithContext(target, prop, receiver)
        );
      },
      getOwnPropertyDescriptor(target, prop) {
        return target._descriptors.allKeys ? Reflect.has(proxy, prop) ? { enumerable: true, configurable: true } : void 0 : Reflect.getOwnPropertyDescriptor(proxy, prop);
      },
      getPrototypeOf() {
        return Reflect.getPrototypeOf(proxy);
      },
      has(target, prop) {
        return Reflect.has(proxy, prop);
      },
      ownKeys() {
        return Reflect.ownKeys(proxy);
      },
      set(target, prop, value) {
        proxy[prop] = value;
        delete target[prop];
        return true;
      }
    });
  }
  function _descriptors(proxy, defaults4 = { scriptable: true, indexable: true }) {
    const { _scriptable = defaults4.scriptable, _indexable = defaults4.indexable, _allKeys = defaults4.allKeys } = proxy;
    return {
      allKeys: _allKeys,
      scriptable: _scriptable,
      indexable: _indexable,
      isScriptable: isFunction(_scriptable) ? _scriptable : () => _scriptable,
      isIndexable: isFunction(_indexable) ? _indexable : () => _indexable
    };
  }
  var readKey = (prefix2, name) => prefix2 ? prefix2 + _capitalize(name) : name;
  var needsSubResolver = (prop, value) => isObject(value) && prop !== "adapters" && (Object.getPrototypeOf(value) === null || value.constructor === Object);
  function _cached(target, prop, resolve2) {
    if (Object.prototype.hasOwnProperty.call(target, prop)) {
      return target[prop];
    }
    const value = resolve2();
    target[prop] = value;
    return value;
  }
  function _resolveWithContext(target, prop, receiver) {
    const { _proxy, _context, _subProxy, _descriptors: descriptors2 } = target;
    let value = _proxy[prop];
    if (isFunction(value) && descriptors2.isScriptable(prop)) {
      value = _resolveScriptable(prop, value, target, receiver);
    }
    if (isArray(value) && value.length) {
      value = _resolveArray(prop, value, target, descriptors2.isIndexable);
    }
    if (needsSubResolver(prop, value)) {
      value = _attachContext(value, _context, _subProxy && _subProxy[prop], descriptors2);
    }
    return value;
  }
  function _resolveScriptable(prop, value, target, receiver) {
    const { _proxy, _context, _subProxy, _stack } = target;
    if (_stack.has(prop)) {
      throw new Error("Recursion detected: " + Array.from(_stack).join("->") + "->" + prop);
    }
    _stack.add(prop);
    value = value(_context, _subProxy || receiver);
    _stack.delete(prop);
    if (needsSubResolver(prop, value)) {
      value = createSubResolver(_proxy._scopes, _proxy, prop, value);
    }
    return value;
  }
  function _resolveArray(prop, value, target, isIndexable) {
    const { _proxy, _context, _subProxy, _descriptors: descriptors2 } = target;
    if (defined(_context.index) && isIndexable(prop)) {
      value = value[_context.index % value.length];
    } else if (isObject(value[0])) {
      const arr = value;
      const scopes = _proxy._scopes.filter((s3) => s3 !== arr);
      value = [];
      for (const item of arr) {
        const resolver = createSubResolver(scopes, _proxy, prop, item);
        value.push(_attachContext(resolver, _context, _subProxy && _subProxy[prop], descriptors2));
      }
    }
    return value;
  }
  function resolveFallback(fallback, prop, value) {
    return isFunction(fallback) ? fallback(prop, value) : fallback;
  }
  var getScope = (key, parent) => key === true ? parent : typeof key === "string" ? resolveObjectKey(parent, key) : void 0;
  function addScopes(set2, parentScopes, key, parentFallback, value) {
    for (const parent of parentScopes) {
      const scope = getScope(key, parent);
      if (scope) {
        set2.add(scope);
        const fallback = resolveFallback(scope._fallback, key, value);
        if (defined(fallback) && fallback !== key && fallback !== parentFallback) {
          return fallback;
        }
      } else if (scope === false && defined(parentFallback) && key !== parentFallback) {
        return null;
      }
    }
    return false;
  }
  function createSubResolver(parentScopes, resolver, prop, value) {
    const rootScopes = resolver._rootScopes;
    const fallback = resolveFallback(resolver._fallback, prop, value);
    const allScopes = [...parentScopes, ...rootScopes];
    const set2 = /* @__PURE__ */ new Set();
    set2.add(value);
    let key = addScopesFromKey(set2, allScopes, prop, fallback || prop, value);
    if (key === null) {
      return false;
    }
    if (defined(fallback) && fallback !== prop) {
      key = addScopesFromKey(set2, allScopes, fallback, key, value);
      if (key === null) {
        return false;
      }
    }
    return _createResolver(
      Array.from(set2),
      [""],
      rootScopes,
      fallback,
      () => subGetTarget(resolver, prop, value)
    );
  }
  function addScopesFromKey(set2, allScopes, key, fallback, item) {
    while (key) {
      key = addScopes(set2, allScopes, key, fallback, item);
    }
    return key;
  }
  function subGetTarget(resolver, prop, value) {
    const parent = resolver._getTarget();
    if (!(prop in parent)) {
      parent[prop] = {};
    }
    const target = parent[prop];
    if (isArray(target) && isObject(value)) {
      return value;
    }
    return target;
  }
  function _resolveWithPrefixes(prop, prefixes6, scopes, proxy) {
    let value;
    for (const prefix2 of prefixes6) {
      value = _resolve(readKey(prefix2, prop), scopes);
      if (defined(value)) {
        return needsSubResolver(prop, value) ? createSubResolver(scopes, proxy, prop, value) : value;
      }
    }
  }
  function _resolve(key, scopes) {
    for (const scope of scopes) {
      if (!scope) {
        continue;
      }
      const value = scope[key];
      if (defined(value)) {
        return value;
      }
    }
  }
  function getKeysFromAllScopes(target) {
    let keys = target._keys;
    if (!keys) {
      keys = target._keys = resolveKeysFromAllScopes(target._scopes);
    }
    return keys;
  }
  function resolveKeysFromAllScopes(scopes) {
    const set2 = /* @__PURE__ */ new Set();
    for (const scope of scopes) {
      for (const key of Object.keys(scope).filter((k2) => !k2.startsWith("_"))) {
        set2.add(key);
      }
    }
    return Array.from(set2);
  }
  function _parseObjectDataRadialScale(meta, data, start2, count2) {
    const { iScale } = meta;
    const { key = "r" } = this._parsing;
    const parsed = new Array(count2);
    let i6, ilen, index, item;
    for (i6 = 0, ilen = count2; i6 < ilen; ++i6) {
      index = i6 + start2;
      item = data[index];
      parsed[i6] = {
        r: iScale.parse(resolveObjectKey(item, key), index)
      };
    }
    return parsed;
  }
  var EPSILON = Number.EPSILON || 1e-14;
  var getPoint = (points, i6) => i6 < points.length && !points[i6].skip && points[i6];
  var getValueAxis = (indexAxis) => indexAxis === "x" ? "y" : "x";
  function splineCurve(firstPoint, middlePoint, afterPoint, t5) {
    const previous = firstPoint.skip ? middlePoint : firstPoint;
    const current = middlePoint;
    const next = afterPoint.skip ? middlePoint : afterPoint;
    const d01 = distanceBetweenPoints(current, previous);
    const d12 = distanceBetweenPoints(next, current);
    let s01 = d01 / (d01 + d12);
    let s12 = d12 / (d01 + d12);
    s01 = isNaN(s01) ? 0 : s01;
    s12 = isNaN(s12) ? 0 : s12;
    const fa = t5 * s01;
    const fb = t5 * s12;
    return {
      previous: {
        x: current.x - fa * (next.x - previous.x),
        y: current.y - fa * (next.y - previous.y)
      },
      next: {
        x: current.x + fb * (next.x - previous.x),
        y: current.y + fb * (next.y - previous.y)
      }
    };
  }
  function monotoneAdjust(points, deltaK, mK) {
    const pointsLen = points.length;
    let alphaK, betaK, tauK, squaredMagnitude, pointCurrent;
    let pointAfter = getPoint(points, 0);
    for (let i6 = 0; i6 < pointsLen - 1; ++i6) {
      pointCurrent = pointAfter;
      pointAfter = getPoint(points, i6 + 1);
      if (!pointCurrent || !pointAfter) {
        continue;
      }
      if (almostEquals(deltaK[i6], 0, EPSILON)) {
        mK[i6] = mK[i6 + 1] = 0;
        continue;
      }
      alphaK = mK[i6] / deltaK[i6];
      betaK = mK[i6 + 1] / deltaK[i6];
      squaredMagnitude = Math.pow(alphaK, 2) + Math.pow(betaK, 2);
      if (squaredMagnitude <= 9) {
        continue;
      }
      tauK = 3 / Math.sqrt(squaredMagnitude);
      mK[i6] = alphaK * tauK * deltaK[i6];
      mK[i6 + 1] = betaK * tauK * deltaK[i6];
    }
  }
  function monotoneCompute(points, mK, indexAxis = "x") {
    const valueAxis = getValueAxis(indexAxis);
    const pointsLen = points.length;
    let delta, pointBefore, pointCurrent;
    let pointAfter = getPoint(points, 0);
    for (let i6 = 0; i6 < pointsLen; ++i6) {
      pointBefore = pointCurrent;
      pointCurrent = pointAfter;
      pointAfter = getPoint(points, i6 + 1);
      if (!pointCurrent) {
        continue;
      }
      const iPixel = pointCurrent[indexAxis];
      const vPixel = pointCurrent[valueAxis];
      if (pointBefore) {
        delta = (iPixel - pointBefore[indexAxis]) / 3;
        pointCurrent[`cp1${indexAxis}`] = iPixel - delta;
        pointCurrent[`cp1${valueAxis}`] = vPixel - delta * mK[i6];
      }
      if (pointAfter) {
        delta = (pointAfter[indexAxis] - iPixel) / 3;
        pointCurrent[`cp2${indexAxis}`] = iPixel + delta;
        pointCurrent[`cp2${valueAxis}`] = vPixel + delta * mK[i6];
      }
    }
  }
  function splineCurveMonotone(points, indexAxis = "x") {
    const valueAxis = getValueAxis(indexAxis);
    const pointsLen = points.length;
    const deltaK = Array(pointsLen).fill(0);
    const mK = Array(pointsLen);
    let i6, pointBefore, pointCurrent;
    let pointAfter = getPoint(points, 0);
    for (i6 = 0; i6 < pointsLen; ++i6) {
      pointBefore = pointCurrent;
      pointCurrent = pointAfter;
      pointAfter = getPoint(points, i6 + 1);
      if (!pointCurrent) {
        continue;
      }
      if (pointAfter) {
        const slopeDelta = pointAfter[indexAxis] - pointCurrent[indexAxis];
        deltaK[i6] = slopeDelta !== 0 ? (pointAfter[valueAxis] - pointCurrent[valueAxis]) / slopeDelta : 0;
      }
      mK[i6] = !pointBefore ? deltaK[i6] : !pointAfter ? deltaK[i6 - 1] : sign(deltaK[i6 - 1]) !== sign(deltaK[i6]) ? 0 : (deltaK[i6 - 1] + deltaK[i6]) / 2;
    }
    monotoneAdjust(points, deltaK, mK);
    monotoneCompute(points, mK, indexAxis);
  }
  function capControlPoint(pt2, min, max) {
    return Math.max(Math.min(pt2, max), min);
  }
  function capBezierPoints(points, area) {
    let i6, ilen, point5, inArea, inAreaPrev;
    let inAreaNext = _isPointInArea(points[0], area);
    for (i6 = 0, ilen = points.length; i6 < ilen; ++i6) {
      inAreaPrev = inArea;
      inArea = inAreaNext;
      inAreaNext = i6 < ilen - 1 && _isPointInArea(points[i6 + 1], area);
      if (!inArea) {
        continue;
      }
      point5 = points[i6];
      if (inAreaPrev) {
        point5.cp1x = capControlPoint(point5.cp1x, area.left, area.right);
        point5.cp1y = capControlPoint(point5.cp1y, area.top, area.bottom);
      }
      if (inAreaNext) {
        point5.cp2x = capControlPoint(point5.cp2x, area.left, area.right);
        point5.cp2y = capControlPoint(point5.cp2y, area.top, area.bottom);
      }
    }
  }
  function _updateBezierControlPoints(points, options, area, loop2, indexAxis) {
    let i6, ilen, point5, controlPoints2;
    if (options.spanGaps) {
      points = points.filter((pt2) => !pt2.skip);
    }
    if (options.cubicInterpolationMode === "monotone") {
      splineCurveMonotone(points, indexAxis);
    } else {
      let prev = loop2 ? points[points.length - 1] : points[0];
      for (i6 = 0, ilen = points.length; i6 < ilen; ++i6) {
        point5 = points[i6];
        controlPoints2 = splineCurve(
          prev,
          point5,
          points[Math.min(i6 + 1, ilen - (loop2 ? 0 : 1)) % ilen],
          options.tension
        );
        point5.cp1x = controlPoints2.previous.x;
        point5.cp1y = controlPoints2.previous.y;
        point5.cp2x = controlPoints2.next.x;
        point5.cp2y = controlPoints2.next.y;
        prev = point5;
      }
    }
    if (options.capBezierPoints) {
      capBezierPoints(points, area);
    }
  }
  function _isDomSupported() {
    return typeof window !== "undefined" && typeof document !== "undefined";
  }
  function _getParentNode(domNode) {
    let parent = domNode.parentNode;
    if (parent && parent.toString() === "[object ShadowRoot]") {
      parent = parent.host;
    }
    return parent;
  }
  function parseMaxStyle(styleValue, node, parentProperty) {
    let valueInPixels;
    if (typeof styleValue === "string") {
      valueInPixels = parseInt(styleValue, 10);
      if (styleValue.indexOf("%") !== -1) {
        valueInPixels = valueInPixels / 100 * node.parentNode[parentProperty];
      }
    } else {
      valueInPixels = styleValue;
    }
    return valueInPixels;
  }
  var getComputedStyle2 = (element) => window.getComputedStyle(element, null);
  function getStyle(el, property) {
    return getComputedStyle2(el).getPropertyValue(property);
  }
  var positions = ["top", "right", "bottom", "left"];
  function getPositionedStyle(styles, style, suffix) {
    const result = {};
    suffix = suffix ? "-" + suffix : "";
    for (let i6 = 0; i6 < 4; i6++) {
      const pos = positions[i6];
      result[pos] = parseFloat(styles[style + "-" + pos + suffix]) || 0;
    }
    result.width = result.left + result.right;
    result.height = result.top + result.bottom;
    return result;
  }
  var useOffsetPos = (x3, y4, target) => (x3 > 0 || y4 > 0) && (!target || !target.shadowRoot);
  function getCanvasPosition(e7, canvas) {
    const touches = e7.touches;
    const source = touches && touches.length ? touches[0] : e7;
    const { offsetX, offsetY } = source;
    let box = false;
    let x3, y4;
    if (useOffsetPos(offsetX, offsetY, e7.target)) {
      x3 = offsetX;
      y4 = offsetY;
    } else {
      const rect = canvas.getBoundingClientRect();
      x3 = source.clientX - rect.left;
      y4 = source.clientY - rect.top;
      box = true;
    }
    return { x: x3, y: y4, box };
  }
  function getRelativePosition(evt, chart) {
    if ("native" in evt) {
      return evt;
    }
    const { canvas, currentDevicePixelRatio } = chart;
    const style = getComputedStyle2(canvas);
    const borderBox = style.boxSizing === "border-box";
    const paddings = getPositionedStyle(style, "padding");
    const borders = getPositionedStyle(style, "border", "width");
    const { x: x3, y: y4, box } = getCanvasPosition(evt, canvas);
    const xOffset = paddings.left + (box && borders.left);
    const yOffset = paddings.top + (box && borders.top);
    let { width, height } = chart;
    if (borderBox) {
      width -= paddings.width + borders.width;
      height -= paddings.height + borders.height;
    }
    return {
      x: Math.round((x3 - xOffset) / width * canvas.width / currentDevicePixelRatio),
      y: Math.round((y4 - yOffset) / height * canvas.height / currentDevicePixelRatio)
    };
  }
  function getContainerSize(canvas, width, height) {
    let maxWidth, maxHeight;
    if (width === void 0 || height === void 0) {
      const container = _getParentNode(canvas);
      if (!container) {
        width = canvas.clientWidth;
        height = canvas.clientHeight;
      } else {
        const rect = container.getBoundingClientRect();
        const containerStyle = getComputedStyle2(container);
        const containerBorder = getPositionedStyle(containerStyle, "border", "width");
        const containerPadding = getPositionedStyle(containerStyle, "padding");
        width = rect.width - containerPadding.width - containerBorder.width;
        height = rect.height - containerPadding.height - containerBorder.height;
        maxWidth = parseMaxStyle(containerStyle.maxWidth, container, "clientWidth");
        maxHeight = parseMaxStyle(containerStyle.maxHeight, container, "clientHeight");
      }
    }
    return {
      width,
      height,
      maxWidth: maxWidth || INFINITY,
      maxHeight: maxHeight || INFINITY
    };
  }
  var round1 = (v4) => Math.round(v4 * 10) / 10;
  function getMaximumSize(canvas, bbWidth, bbHeight, aspectRatio) {
    const style = getComputedStyle2(canvas);
    const margins = getPositionedStyle(style, "margin");
    const maxWidth = parseMaxStyle(style.maxWidth, canvas, "clientWidth") || INFINITY;
    const maxHeight = parseMaxStyle(style.maxHeight, canvas, "clientHeight") || INFINITY;
    const containerSize = getContainerSize(canvas, bbWidth, bbHeight);
    let { width, height } = containerSize;
    if (style.boxSizing === "content-box") {
      const borders = getPositionedStyle(style, "border", "width");
      const paddings = getPositionedStyle(style, "padding");
      width -= paddings.width + borders.width;
      height -= paddings.height + borders.height;
    }
    width = Math.max(0, width - margins.width);
    height = Math.max(0, aspectRatio ? Math.floor(width / aspectRatio) : height - margins.height);
    width = round1(Math.min(width, maxWidth, containerSize.maxWidth));
    height = round1(Math.min(height, maxHeight, containerSize.maxHeight));
    if (width && !height) {
      height = round1(width / 2);
    }
    return {
      width,
      height
    };
  }
  function retinaScale(chart, forceRatio, forceStyle) {
    const pixelRatio = forceRatio || 1;
    const deviceHeight = Math.floor(chart.height * pixelRatio);
    const deviceWidth = Math.floor(chart.width * pixelRatio);
    chart.height = deviceHeight / pixelRatio;
    chart.width = deviceWidth / pixelRatio;
    const canvas = chart.canvas;
    if (canvas.style && (forceStyle || !canvas.style.height && !canvas.style.width)) {
      canvas.style.height = `${chart.height}px`;
      canvas.style.width = `${chart.width}px`;
    }
    if (chart.currentDevicePixelRatio !== pixelRatio || canvas.height !== deviceHeight || canvas.width !== deviceWidth) {
      chart.currentDevicePixelRatio = pixelRatio;
      canvas.height = deviceHeight;
      canvas.width = deviceWidth;
      chart.ctx.setTransform(pixelRatio, 0, 0, pixelRatio, 0, 0);
      return true;
    }
    return false;
  }
  var supportsEventListenerOptions = function() {
    let passiveSupported = false;
    try {
      const options = {
        get passive() {
          passiveSupported = true;
          return false;
        }
      };
      window.addEventListener("test", null, options);
      window.removeEventListener("test", null, options);
    } catch (e7) {
    }
    return passiveSupported;
  }();
  function readUsedSize(element, property) {
    const value = getStyle(element, property);
    const matches = value && value.match(/^(\d+)(\.\d+)?px$/);
    return matches ? +matches[1] : void 0;
  }
  function _pointInLine(p1, p2, t5, mode) {
    return {
      x: p1.x + t5 * (p2.x - p1.x),
      y: p1.y + t5 * (p2.y - p1.y)
    };
  }
  function _steppedInterpolation(p1, p2, t5, mode) {
    return {
      x: p1.x + t5 * (p2.x - p1.x),
      y: mode === "middle" ? t5 < 0.5 ? p1.y : p2.y : mode === "after" ? t5 < 1 ? p1.y : p2.y : t5 > 0 ? p2.y : p1.y
    };
  }
  function _bezierInterpolation(p1, p2, t5, mode) {
    const cp1 = { x: p1.cp2x, y: p1.cp2y };
    const cp2 = { x: p2.cp1x, y: p2.cp1y };
    const a2 = _pointInLine(p1, cp1, t5);
    const b3 = _pointInLine(cp1, cp2, t5);
    const c8 = _pointInLine(cp2, p2, t5);
    const d2 = _pointInLine(a2, b3, t5);
    const e7 = _pointInLine(b3, c8, t5);
    return _pointInLine(d2, e7, t5);
  }
  var intlCache = /* @__PURE__ */ new Map();
  function getNumberFormat(locale3, options) {
    options = options || {};
    const cacheKey2 = locale3 + JSON.stringify(options);
    let formatter2 = intlCache.get(cacheKey2);
    if (!formatter2) {
      formatter2 = new Intl.NumberFormat(locale3, options);
      intlCache.set(cacheKey2, formatter2);
    }
    return formatter2;
  }
  function formatNumber(num, locale3, options) {
    return getNumberFormat(locale3, options).format(num);
  }
  var getRightToLeftAdapter = function(rectX, width) {
    return {
      x(x3) {
        return rectX + rectX + width - x3;
      },
      setWidth(w3) {
        width = w3;
      },
      textAlign(align) {
        if (align === "center") {
          return align;
        }
        return align === "right" ? "left" : "right";
      },
      xPlus(x3, value) {
        return x3 - value;
      },
      leftForLtr(x3, itemWidth) {
        return x3 - itemWidth;
      }
    };
  };
  var getLeftToRightAdapter = function() {
    return {
      x(x3) {
        return x3;
      },
      setWidth(w3) {
      },
      textAlign(align) {
        return align;
      },
      xPlus(x3, value) {
        return x3 + value;
      },
      leftForLtr(x3, _itemWidth) {
        return x3;
      }
    };
  };
  function getRtlAdapter(rtl, rectX, width) {
    return rtl ? getRightToLeftAdapter(rectX, width) : getLeftToRightAdapter();
  }
  function overrideTextDirection(ctx2, direction) {
    let style, original;
    if (direction === "ltr" || direction === "rtl") {
      style = ctx2.canvas.style;
      original = [
        style.getPropertyValue("direction"),
        style.getPropertyPriority("direction")
      ];
      style.setProperty("direction", direction, "important");
      ctx2.prevTextDirection = original;
    }
  }
  function restoreTextDirection(ctx2, original) {
    if (original !== void 0) {
      delete ctx2.prevTextDirection;
      ctx2.canvas.style.setProperty("direction", original[0], original[1]);
    }
  }
  function propertyFn(property) {
    if (property === "angle") {
      return {
        between: _angleBetween,
        compare: _angleDiff,
        normalize: _normalizeAngle
      };
    }
    return {
      between: _isBetween,
      compare: (a2, b3) => a2 - b3,
      normalize: (x3) => x3
    };
  }
  function normalizeSegment({ start: start2, end, count: count2, loop: loop2, style }) {
    return {
      start: start2 % count2,
      end: end % count2,
      loop: loop2 && (end - start2 + 1) % count2 === 0,
      style
    };
  }
  function getSegment(segment, points, bounds) {
    const { property, start: startBound, end: endBound } = bounds;
    const { between, normalize: normalize2 } = propertyFn(property);
    const count2 = points.length;
    let { start: start2, end, loop: loop2 } = segment;
    let i6, ilen;
    if (loop2) {
      start2 += count2;
      end += count2;
      for (i6 = 0, ilen = count2; i6 < ilen; ++i6) {
        if (!between(normalize2(points[start2 % count2][property]), startBound, endBound)) {
          break;
        }
        start2--;
        end--;
      }
      start2 %= count2;
      end %= count2;
    }
    if (end < start2) {
      end += count2;
    }
    return { start: start2, end, loop: loop2, style: segment.style };
  }
  function _boundSegment(segment, points, bounds) {
    if (!bounds) {
      return [segment];
    }
    const { property, start: startBound, end: endBound } = bounds;
    const count2 = points.length;
    const { compare, between, normalize: normalize2 } = propertyFn(property);
    const { start: start2, end, loop: loop2, style } = getSegment(segment, points, bounds);
    const result = [];
    let inside = false;
    let subStart = null;
    let value, point5, prevValue;
    const startIsBefore = () => between(startBound, prevValue, value) && compare(startBound, prevValue) !== 0;
    const endIsBefore = () => compare(endBound, value) === 0 || between(endBound, prevValue, value);
    const shouldStart = () => inside || startIsBefore();
    const shouldStop = () => !inside || endIsBefore();
    for (let i6 = start2, prev = start2; i6 <= end; ++i6) {
      point5 = points[i6 % count2];
      if (point5.skip) {
        continue;
      }
      value = normalize2(point5[property]);
      if (value === prevValue) {
        continue;
      }
      inside = between(value, startBound, endBound);
      if (subStart === null && shouldStart()) {
        subStart = compare(value, startBound) === 0 ? i6 : prev;
      }
      if (subStart !== null && shouldStop()) {
        result.push(normalizeSegment({ start: subStart, end: i6, loop: loop2, count: count2, style }));
        subStart = null;
      }
      prev = i6;
      prevValue = value;
    }
    if (subStart !== null) {
      result.push(normalizeSegment({ start: subStart, end, loop: loop2, count: count2, style }));
    }
    return result;
  }
  function _boundSegments(line, bounds) {
    const result = [];
    const segments = line.segments;
    for (let i6 = 0; i6 < segments.length; i6++) {
      const sub = _boundSegment(segments[i6], line.points, bounds);
      if (sub.length) {
        result.push(...sub);
      }
    }
    return result;
  }
  function findStartAndEnd(points, count2, loop2, spanGaps) {
    let start2 = 0;
    let end = count2 - 1;
    if (loop2 && !spanGaps) {
      while (start2 < count2 && !points[start2].skip) {
        start2++;
      }
    }
    while (start2 < count2 && points[start2].skip) {
      start2++;
    }
    start2 %= count2;
    if (loop2) {
      end += start2;
    }
    while (end > start2 && points[end % count2].skip) {
      end--;
    }
    end %= count2;
    return { start: start2, end };
  }
  function solidSegments(points, start2, max, loop2) {
    const count2 = points.length;
    const result = [];
    let last = start2;
    let prev = points[start2];
    let end;
    for (end = start2 + 1; end <= max; ++end) {
      const cur = points[end % count2];
      if (cur.skip || cur.stop) {
        if (!prev.skip) {
          loop2 = false;
          result.push({ start: start2 % count2, end: (end - 1) % count2, loop: loop2 });
          start2 = last = cur.stop ? end : null;
        }
      } else {
        last = end;
        if (prev.skip) {
          start2 = end;
        }
      }
      prev = cur;
    }
    if (last !== null) {
      result.push({ start: start2 % count2, end: last % count2, loop: loop2 });
    }
    return result;
  }
  function _computeSegments(line, segmentOptions) {
    const points = line.points;
    const spanGaps = line.options.spanGaps;
    const count2 = points.length;
    if (!count2) {
      return [];
    }
    const loop2 = !!line._loop;
    const { start: start2, end } = findStartAndEnd(points, count2, loop2, spanGaps);
    if (spanGaps === true) {
      return splitByStyles(line, [{ start: start2, end, loop: loop2 }], points, segmentOptions);
    }
    const max = end < start2 ? end + count2 : end;
    const completeLoop = !!line._fullLoop && start2 === 0 && end === count2 - 1;
    return splitByStyles(line, solidSegments(points, start2, max, completeLoop), points, segmentOptions);
  }
  function splitByStyles(line, segments, points, segmentOptions) {
    if (!segmentOptions || !segmentOptions.setContext || !points) {
      return segments;
    }
    return doSplitByStyles(line, segments, points, segmentOptions);
  }
  function doSplitByStyles(line, segments, points, segmentOptions) {
    const chartContext = line._chart.getContext();
    const baseStyle = readStyle(line.options);
    const { _datasetIndex: datasetIndex, options: { spanGaps } } = line;
    const count2 = points.length;
    const result = [];
    let prevStyle = baseStyle;
    let start2 = segments[0].start;
    let i6 = start2;
    function addStyle(s3, e7, l5, st) {
      const dir = spanGaps ? -1 : 1;
      if (s3 === e7) {
        return;
      }
      s3 += count2;
      while (points[s3 % count2].skip) {
        s3 -= dir;
      }
      while (points[e7 % count2].skip) {
        e7 += dir;
      }
      if (s3 % count2 !== e7 % count2) {
        result.push({ start: s3 % count2, end: e7 % count2, loop: l5, style: st });
        prevStyle = st;
        start2 = e7 % count2;
      }
    }
    for (const segment of segments) {
      start2 = spanGaps ? start2 : segment.start;
      let prev = points[start2 % count2];
      let style;
      for (i6 = start2 + 1; i6 <= segment.end; i6++) {
        const pt2 = points[i6 % count2];
        style = readStyle(segmentOptions.setContext(createContext(chartContext, {
          type: "segment",
          p0: prev,
          p1: pt2,
          p0DataIndex: (i6 - 1) % count2,
          p1DataIndex: i6 % count2,
          datasetIndex
        })));
        if (styleChanged(style, prevStyle)) {
          addStyle(start2, i6 - 1, segment.loop, prevStyle);
        }
        prev = pt2;
        prevStyle = style;
      }
      if (start2 < i6 - 1) {
        addStyle(start2, i6 - 1, segment.loop, prevStyle);
      }
    }
    return result;
  }
  function readStyle(options) {
    return {
      backgroundColor: options.backgroundColor,
      borderCapStyle: options.borderCapStyle,
      borderDash: options.borderDash,
      borderDashOffset: options.borderDashOffset,
      borderJoinStyle: options.borderJoinStyle,
      borderWidth: options.borderWidth,
      borderColor: options.borderColor
    };
  }
  function styleChanged(style, prevStyle) {
    return prevStyle && JSON.stringify(style) !== JSON.stringify(prevStyle);
  }

  // node_modules/chart.js/dist/chart.mjs
  var Animator = class {
    constructor() {
      this._request = null;
      this._charts = /* @__PURE__ */ new Map();
      this._running = false;
      this._lastDate = void 0;
    }
    _notify(chart, anims, date, type) {
      const callbacks = anims.listeners[type];
      const numSteps = anims.duration;
      callbacks.forEach((fn2) => fn2({
        chart,
        initial: anims.initial,
        numSteps,
        currentStep: Math.min(date - anims.start, numSteps)
      }));
    }
    _refresh() {
      if (this._request) {
        return;
      }
      this._running = true;
      this._request = requestAnimFrame.call(window, () => {
        this._update();
        this._request = null;
        if (this._running) {
          this._refresh();
        }
      });
    }
    _update(date = Date.now()) {
      let remaining = 0;
      this._charts.forEach((anims, chart) => {
        if (!anims.running || !anims.items.length) {
          return;
        }
        const items = anims.items;
        let i6 = items.length - 1;
        let draw2 = false;
        let item;
        for (; i6 >= 0; --i6) {
          item = items[i6];
          if (item._active) {
            if (item._total > anims.duration) {
              anims.duration = item._total;
            }
            item.tick(date);
            draw2 = true;
          } else {
            items[i6] = items[items.length - 1];
            items.pop();
          }
        }
        if (draw2) {
          chart.draw();
          this._notify(chart, anims, date, "progress");
        }
        if (!items.length) {
          anims.running = false;
          this._notify(chart, anims, date, "complete");
          anims.initial = false;
        }
        remaining += items.length;
      });
      this._lastDate = date;
      if (remaining === 0) {
        this._running = false;
      }
    }
    _getAnims(chart) {
      const charts = this._charts;
      let anims = charts.get(chart);
      if (!anims) {
        anims = {
          running: false,
          initial: true,
          items: [],
          listeners: {
            complete: [],
            progress: []
          }
        };
        charts.set(chart, anims);
      }
      return anims;
    }
    listen(chart, event, cb) {
      this._getAnims(chart).listeners[event].push(cb);
    }
    add(chart, items) {
      if (!items || !items.length) {
        return;
      }
      this._getAnims(chart).items.push(...items);
    }
    has(chart) {
      return this._getAnims(chart).items.length > 0;
    }
    start(chart) {
      const anims = this._charts.get(chart);
      if (!anims) {
        return;
      }
      anims.running = true;
      anims.start = Date.now();
      anims.duration = anims.items.reduce((acc, cur) => Math.max(acc, cur._duration), 0);
      this._refresh();
    }
    running(chart) {
      if (!this._running) {
        return false;
      }
      const anims = this._charts.get(chart);
      if (!anims || !anims.running || !anims.items.length) {
        return false;
      }
      return true;
    }
    stop(chart) {
      const anims = this._charts.get(chart);
      if (!anims || !anims.items.length) {
        return;
      }
      const items = anims.items;
      let i6 = items.length - 1;
      for (; i6 >= 0; --i6) {
        items[i6].cancel();
      }
      anims.items = [];
      this._notify(chart, anims, Date.now(), "complete");
    }
    remove(chart) {
      return this._charts.delete(chart);
    }
  };
  var animator = new Animator();
  var transparent = "transparent";
  var interpolators = {
    boolean(from2, to4, factor) {
      return factor > 0.5 ? to4 : from2;
    },
    color(from2, to4, factor) {
      const c0 = color(from2 || transparent);
      const c12 = c0.valid && color(to4 || transparent);
      return c12 && c12.valid ? c12.mix(c0, factor).hexString() : to4;
    },
    number(from2, to4, factor) {
      return from2 + (to4 - from2) * factor;
    }
  };
  var Animation = class {
    constructor(cfg, target, prop, to4) {
      const currentValue = target[prop];
      to4 = resolve([cfg.to, to4, currentValue, cfg.from]);
      const from2 = resolve([cfg.from, currentValue, to4]);
      this._active = true;
      this._fn = cfg.fn || interpolators[cfg.type || typeof from2];
      this._easing = effects[cfg.easing] || effects.linear;
      this._start = Math.floor(Date.now() + (cfg.delay || 0));
      this._duration = this._total = Math.floor(cfg.duration);
      this._loop = !!cfg.loop;
      this._target = target;
      this._prop = prop;
      this._from = from2;
      this._to = to4;
      this._promises = void 0;
    }
    active() {
      return this._active;
    }
    update(cfg, to4, date) {
      if (this._active) {
        this._notify(false);
        const currentValue = this._target[this._prop];
        const elapsed = date - this._start;
        const remain = this._duration - elapsed;
        this._start = date;
        this._duration = Math.floor(Math.max(remain, cfg.duration));
        this._total += elapsed;
        this._loop = !!cfg.loop;
        this._to = resolve([cfg.to, to4, currentValue, cfg.from]);
        this._from = resolve([cfg.from, currentValue, to4]);
      }
    }
    cancel() {
      if (this._active) {
        this.tick(Date.now());
        this._active = false;
        this._notify(false);
      }
    }
    tick(date) {
      const elapsed = date - this._start;
      const duration = this._duration;
      const prop = this._prop;
      const from2 = this._from;
      const loop2 = this._loop;
      const to4 = this._to;
      let factor;
      this._active = from2 !== to4 && (loop2 || elapsed < duration);
      if (!this._active) {
        this._target[prop] = to4;
        this._notify(true);
        return;
      }
      if (elapsed < 0) {
        this._target[prop] = from2;
        return;
      }
      factor = elapsed / duration % 2;
      factor = loop2 && factor > 1 ? 2 - factor : factor;
      factor = this._easing(Math.min(1, Math.max(0, factor)));
      this._target[prop] = this._fn(from2, to4, factor);
    }
    wait() {
      const promises = this._promises || (this._promises = []);
      return new Promise((res, rej) => {
        promises.push({ res, rej });
      });
    }
    _notify(resolved) {
      const method = resolved ? "res" : "rej";
      const promises = this._promises || [];
      for (let i6 = 0; i6 < promises.length; i6++) {
        promises[i6][method]();
      }
    }
  };
  var numbers = ["x", "y", "borderWidth", "radius", "tension"];
  var colors = ["color", "borderColor", "backgroundColor"];
  defaults.set("animation", {
    delay: void 0,
    duration: 1e3,
    easing: "easeOutQuart",
    fn: void 0,
    from: void 0,
    loop: void 0,
    to: void 0,
    type: void 0
  });
  var animationOptions = Object.keys(defaults.animation);
  defaults.describe("animation", {
    _fallback: false,
    _indexable: false,
    _scriptable: (name) => name !== "onProgress" && name !== "onComplete" && name !== "fn"
  });
  defaults.set("animations", {
    colors: {
      type: "color",
      properties: colors
    },
    numbers: {
      type: "number",
      properties: numbers
    }
  });
  defaults.describe("animations", {
    _fallback: "animation"
  });
  defaults.set("transitions", {
    active: {
      animation: {
        duration: 400
      }
    },
    resize: {
      animation: {
        duration: 0
      }
    },
    show: {
      animations: {
        colors: {
          from: "transparent"
        },
        visible: {
          type: "boolean",
          duration: 0
        }
      }
    },
    hide: {
      animations: {
        colors: {
          to: "transparent"
        },
        visible: {
          type: "boolean",
          easing: "linear",
          fn: (v4) => v4 | 0
        }
      }
    }
  });
  var Animations = class {
    constructor(chart, config2) {
      this._chart = chart;
      this._properties = /* @__PURE__ */ new Map();
      this.configure(config2);
    }
    configure(config2) {
      if (!isObject(config2)) {
        return;
      }
      const animatedProps = this._properties;
      Object.getOwnPropertyNames(config2).forEach((key) => {
        const cfg = config2[key];
        if (!isObject(cfg)) {
          return;
        }
        const resolved = {};
        for (const option of animationOptions) {
          resolved[option] = cfg[option];
        }
        (isArray(cfg.properties) && cfg.properties || [key]).forEach((prop) => {
          if (prop === key || !animatedProps.has(prop)) {
            animatedProps.set(prop, resolved);
          }
        });
      });
    }
    _animateOptions(target, values) {
      const newOptions = values.options;
      const options = resolveTargetOptions(target, newOptions);
      if (!options) {
        return [];
      }
      const animations = this._createAnimations(options, newOptions);
      if (newOptions.$shared) {
        awaitAll(target.options.$animations, newOptions).then(() => {
          target.options = newOptions;
        }, () => {
        });
      }
      return animations;
    }
    _createAnimations(target, values) {
      const animatedProps = this._properties;
      const animations = [];
      const running = target.$animations || (target.$animations = {});
      const props = Object.keys(values);
      const date = Date.now();
      let i6;
      for (i6 = props.length - 1; i6 >= 0; --i6) {
        const prop = props[i6];
        if (prop.charAt(0) === "$") {
          continue;
        }
        if (prop === "options") {
          animations.push(...this._animateOptions(target, values));
          continue;
        }
        const value = values[prop];
        let animation = running[prop];
        const cfg = animatedProps.get(prop);
        if (animation) {
          if (cfg && animation.active()) {
            animation.update(cfg, value, date);
            continue;
          } else {
            animation.cancel();
          }
        }
        if (!cfg || !cfg.duration) {
          target[prop] = value;
          continue;
        }
        running[prop] = animation = new Animation(cfg, target, prop, value);
        animations.push(animation);
      }
      return animations;
    }
    update(target, values) {
      if (this._properties.size === 0) {
        Object.assign(target, values);
        return;
      }
      const animations = this._createAnimations(target, values);
      if (animations.length) {
        animator.add(this._chart, animations);
        return true;
      }
    }
  };
  function awaitAll(animations, properties) {
    const running = [];
    const keys = Object.keys(properties);
    for (let i6 = 0; i6 < keys.length; i6++) {
      const anim = animations[keys[i6]];
      if (anim && anim.active()) {
        running.push(anim.wait());
      }
    }
    return Promise.all(running);
  }
  function resolveTargetOptions(target, newOptions) {
    if (!newOptions) {
      return;
    }
    let options = target.options;
    if (!options) {
      target.options = newOptions;
      return;
    }
    if (options.$shared) {
      target.options = options = Object.assign({}, options, { $shared: false, $animations: {} });
    }
    return options;
  }
  function scaleClip(scale2, allowedOverflow) {
    const opts = scale2 && scale2.options || {};
    const reverse = opts.reverse;
    const min = opts.min === void 0 ? allowedOverflow : 0;
    const max = opts.max === void 0 ? allowedOverflow : 0;
    return {
      start: reverse ? max : min,
      end: reverse ? min : max
    };
  }
  function defaultClip(xScale, yScale, allowedOverflow) {
    if (allowedOverflow === false) {
      return false;
    }
    const x3 = scaleClip(xScale, allowedOverflow);
    const y4 = scaleClip(yScale, allowedOverflow);
    return {
      top: y4.end,
      right: x3.end,
      bottom: y4.start,
      left: x3.start
    };
  }
  function toClip(value) {
    let t5, r6, b3, l5;
    if (isObject(value)) {
      t5 = value.top;
      r6 = value.right;
      b3 = value.bottom;
      l5 = value.left;
    } else {
      t5 = r6 = b3 = l5 = value;
    }
    return {
      top: t5,
      right: r6,
      bottom: b3,
      left: l5,
      disabled: value === false
    };
  }
  function getSortedDatasetIndices(chart, filterVisible) {
    const keys = [];
    const metasets = chart._getSortedDatasetMetas(filterVisible);
    let i6, ilen;
    for (i6 = 0, ilen = metasets.length; i6 < ilen; ++i6) {
      keys.push(metasets[i6].index);
    }
    return keys;
  }
  function applyStack(stack, value, dsIndex, options = {}) {
    const keys = stack.keys;
    const singleMode = options.mode === "single";
    let i6, ilen, datasetIndex, otherValue;
    if (value === null) {
      return;
    }
    for (i6 = 0, ilen = keys.length; i6 < ilen; ++i6) {
      datasetIndex = +keys[i6];
      if (datasetIndex === dsIndex) {
        if (options.all) {
          continue;
        }
        break;
      }
      otherValue = stack.values[datasetIndex];
      if (isNumberFinite(otherValue) && (singleMode || (value === 0 || sign(value) === sign(otherValue)))) {
        value += otherValue;
      }
    }
    return value;
  }
  function convertObjectDataToArray(data) {
    const keys = Object.keys(data);
    const adata = new Array(keys.length);
    let i6, ilen, key;
    for (i6 = 0, ilen = keys.length; i6 < ilen; ++i6) {
      key = keys[i6];
      adata[i6] = {
        x: key,
        y: data[key]
      };
    }
    return adata;
  }
  function isStacked(scale2, meta) {
    const stacked = scale2 && scale2.options.stacked;
    return stacked || stacked === void 0 && meta.stack !== void 0;
  }
  function getStackKey(indexScale, valueScale, meta) {
    return `${indexScale.id}.${valueScale.id}.${meta.stack || meta.type}`;
  }
  function getUserBounds(scale2) {
    const { min, max, minDefined, maxDefined } = scale2.getUserBounds();
    return {
      min: minDefined ? min : Number.NEGATIVE_INFINITY,
      max: maxDefined ? max : Number.POSITIVE_INFINITY
    };
  }
  function getOrCreateStack(stacks, stackKey, indexValue) {
    const subStack = stacks[stackKey] || (stacks[stackKey] = {});
    return subStack[indexValue] || (subStack[indexValue] = {});
  }
  function getLastIndexInStack(stack, vScale, positive, type) {
    for (const meta of vScale.getMatchingVisibleMetas(type).reverse()) {
      const value = stack[meta.index];
      if (positive && value > 0 || !positive && value < 0) {
        return meta.index;
      }
    }
    return null;
  }
  function updateStacks(controller, parsed) {
    const { chart, _cachedMeta: meta } = controller;
    const stacks = chart._stacks || (chart._stacks = {});
    const { iScale, vScale, index: datasetIndex } = meta;
    const iAxis = iScale.axis;
    const vAxis = vScale.axis;
    const key = getStackKey(iScale, vScale, meta);
    const ilen = parsed.length;
    let stack;
    for (let i6 = 0; i6 < ilen; ++i6) {
      const item = parsed[i6];
      const { [iAxis]: index, [vAxis]: value } = item;
      const itemStacks = item._stacks || (item._stacks = {});
      stack = itemStacks[vAxis] = getOrCreateStack(stacks, key, index);
      stack[datasetIndex] = value;
      stack._top = getLastIndexInStack(stack, vScale, true, meta.type);
      stack._bottom = getLastIndexInStack(stack, vScale, false, meta.type);
    }
  }
  function getFirstScaleId(chart, axis) {
    const scales = chart.scales;
    return Object.keys(scales).filter((key) => scales[key].axis === axis).shift();
  }
  function createDatasetContext(parent, index) {
    return createContext(
      parent,
      {
        active: false,
        dataset: void 0,
        datasetIndex: index,
        index,
        mode: "default",
        type: "dataset"
      }
    );
  }
  function createDataContext(parent, index, element) {
    return createContext(parent, {
      active: false,
      dataIndex: index,
      parsed: void 0,
      raw: void 0,
      element,
      index,
      mode: "default",
      type: "data"
    });
  }
  function clearStacks(meta, items) {
    const datasetIndex = meta.controller.index;
    const axis = meta.vScale && meta.vScale.axis;
    if (!axis) {
      return;
    }
    items = items || meta._parsed;
    for (const parsed of items) {
      const stacks = parsed._stacks;
      if (!stacks || stacks[axis] === void 0 || stacks[axis][datasetIndex] === void 0) {
        return;
      }
      delete stacks[axis][datasetIndex];
    }
  }
  var isDirectUpdateMode = (mode) => mode === "reset" || mode === "none";
  var cloneIfNotShared = (cached, shared) => shared ? cached : Object.assign({}, cached);
  var createStack = (canStack, meta, chart) => canStack && !meta.hidden && meta._stacked && { keys: getSortedDatasetIndices(chart, true), values: null };
  var DatasetController = class {
    constructor(chart, datasetIndex) {
      this.chart = chart;
      this._ctx = chart.ctx;
      this.index = datasetIndex;
      this._cachedDataOpts = {};
      this._cachedMeta = this.getMeta();
      this._type = this._cachedMeta.type;
      this.options = void 0;
      this._parsing = false;
      this._data = void 0;
      this._objectData = void 0;
      this._sharedOptions = void 0;
      this._drawStart = void 0;
      this._drawCount = void 0;
      this.enableOptionSharing = false;
      this.supportsDecimation = false;
      this.$context = void 0;
      this._syncList = [];
      this.initialize();
    }
    initialize() {
      const meta = this._cachedMeta;
      this.configure();
      this.linkScales();
      meta._stacked = isStacked(meta.vScale, meta);
      this.addElements();
    }
    updateIndex(datasetIndex) {
      if (this.index !== datasetIndex) {
        clearStacks(this._cachedMeta);
      }
      this.index = datasetIndex;
    }
    linkScales() {
      const chart = this.chart;
      const meta = this._cachedMeta;
      const dataset = this.getDataset();
      const chooseId = (axis, x3, y4, r6) => axis === "x" ? x3 : axis === "r" ? r6 : y4;
      const xid = meta.xAxisID = valueOrDefault(dataset.xAxisID, getFirstScaleId(chart, "x"));
      const yid = meta.yAxisID = valueOrDefault(dataset.yAxisID, getFirstScaleId(chart, "y"));
      const rid = meta.rAxisID = valueOrDefault(dataset.rAxisID, getFirstScaleId(chart, "r"));
      const indexAxis = meta.indexAxis;
      const iid = meta.iAxisID = chooseId(indexAxis, xid, yid, rid);
      const vid = meta.vAxisID = chooseId(indexAxis, yid, xid, rid);
      meta.xScale = this.getScaleForId(xid);
      meta.yScale = this.getScaleForId(yid);
      meta.rScale = this.getScaleForId(rid);
      meta.iScale = this.getScaleForId(iid);
      meta.vScale = this.getScaleForId(vid);
    }
    getDataset() {
      return this.chart.data.datasets[this.index];
    }
    getMeta() {
      return this.chart.getDatasetMeta(this.index);
    }
    getScaleForId(scaleID) {
      return this.chart.scales[scaleID];
    }
    _getOtherScale(scale2) {
      const meta = this._cachedMeta;
      return scale2 === meta.iScale ? meta.vScale : meta.iScale;
    }
    reset() {
      this._update("reset");
    }
    _destroy() {
      const meta = this._cachedMeta;
      if (this._data) {
        unlistenArrayEvents(this._data, this);
      }
      if (meta._stacked) {
        clearStacks(meta);
      }
    }
    _dataCheck() {
      const dataset = this.getDataset();
      const data = dataset.data || (dataset.data = []);
      const _data = this._data;
      if (isObject(data)) {
        this._data = convertObjectDataToArray(data);
      } else if (_data !== data) {
        if (_data) {
          unlistenArrayEvents(_data, this);
          const meta = this._cachedMeta;
          clearStacks(meta);
          meta._parsed = [];
        }
        if (data && Object.isExtensible(data)) {
          listenArrayEvents(data, this);
        }
        this._syncList = [];
        this._data = data;
      }
    }
    addElements() {
      const meta = this._cachedMeta;
      this._dataCheck();
      if (this.datasetElementType) {
        meta.dataset = new this.datasetElementType();
      }
    }
    buildOrUpdateElements(resetNewElements) {
      const meta = this._cachedMeta;
      const dataset = this.getDataset();
      let stackChanged = false;
      this._dataCheck();
      const oldStacked = meta._stacked;
      meta._stacked = isStacked(meta.vScale, meta);
      if (meta.stack !== dataset.stack) {
        stackChanged = true;
        clearStacks(meta);
        meta.stack = dataset.stack;
      }
      this._resyncElements(resetNewElements);
      if (stackChanged || oldStacked !== meta._stacked) {
        updateStacks(this, meta._parsed);
      }
    }
    configure() {
      const config2 = this.chart.config;
      const scopeKeys = config2.datasetScopeKeys(this._type);
      const scopes = config2.getOptionScopes(this.getDataset(), scopeKeys, true);
      this.options = config2.createResolver(scopes, this.getContext());
      this._parsing = this.options.parsing;
      this._cachedDataOpts = {};
    }
    parse(start2, count2) {
      const { _cachedMeta: meta, _data: data } = this;
      const { iScale, _stacked } = meta;
      const iAxis = iScale.axis;
      let sorted = start2 === 0 && count2 === data.length ? true : meta._sorted;
      let prev = start2 > 0 && meta._parsed[start2 - 1];
      let i6, cur, parsed;
      if (this._parsing === false) {
        meta._parsed = data;
        meta._sorted = true;
        parsed = data;
      } else {
        if (isArray(data[start2])) {
          parsed = this.parseArrayData(meta, data, start2, count2);
        } else if (isObject(data[start2])) {
          parsed = this.parseObjectData(meta, data, start2, count2);
        } else {
          parsed = this.parsePrimitiveData(meta, data, start2, count2);
        }
        const isNotInOrderComparedToPrev = () => cur[iAxis] === null || prev && cur[iAxis] < prev[iAxis];
        for (i6 = 0; i6 < count2; ++i6) {
          meta._parsed[i6 + start2] = cur = parsed[i6];
          if (sorted) {
            if (isNotInOrderComparedToPrev()) {
              sorted = false;
            }
            prev = cur;
          }
        }
        meta._sorted = sorted;
      }
      if (_stacked) {
        updateStacks(this, parsed);
      }
    }
    parsePrimitiveData(meta, data, start2, count2) {
      const { iScale, vScale } = meta;
      const iAxis = iScale.axis;
      const vAxis = vScale.axis;
      const labels = iScale.getLabels();
      const singleScale = iScale === vScale;
      const parsed = new Array(count2);
      let i6, ilen, index;
      for (i6 = 0, ilen = count2; i6 < ilen; ++i6) {
        index = i6 + start2;
        parsed[i6] = {
          [iAxis]: singleScale || iScale.parse(labels[index], index),
          [vAxis]: vScale.parse(data[index], index)
        };
      }
      return parsed;
    }
    parseArrayData(meta, data, start2, count2) {
      const { xScale, yScale } = meta;
      const parsed = new Array(count2);
      let i6, ilen, index, item;
      for (i6 = 0, ilen = count2; i6 < ilen; ++i6) {
        index = i6 + start2;
        item = data[index];
        parsed[i6] = {
          x: xScale.parse(item[0], index),
          y: yScale.parse(item[1], index)
        };
      }
      return parsed;
    }
    parseObjectData(meta, data, start2, count2) {
      const { xScale, yScale } = meta;
      const { xAxisKey = "x", yAxisKey = "y" } = this._parsing;
      const parsed = new Array(count2);
      let i6, ilen, index, item;
      for (i6 = 0, ilen = count2; i6 < ilen; ++i6) {
        index = i6 + start2;
        item = data[index];
        parsed[i6] = {
          x: xScale.parse(resolveObjectKey(item, xAxisKey), index),
          y: yScale.parse(resolveObjectKey(item, yAxisKey), index)
        };
      }
      return parsed;
    }
    getParsed(index) {
      return this._cachedMeta._parsed[index];
    }
    getDataElement(index) {
      return this._cachedMeta.data[index];
    }
    applyStack(scale2, parsed, mode) {
      const chart = this.chart;
      const meta = this._cachedMeta;
      const value = parsed[scale2.axis];
      const stack = {
        keys: getSortedDatasetIndices(chart, true),
        values: parsed._stacks[scale2.axis]
      };
      return applyStack(stack, value, meta.index, { mode });
    }
    updateRangeFromParsed(range, scale2, parsed, stack) {
      const parsedValue = parsed[scale2.axis];
      let value = parsedValue === null ? NaN : parsedValue;
      const values = stack && parsed._stacks[scale2.axis];
      if (stack && values) {
        stack.values = values;
        value = applyStack(stack, parsedValue, this._cachedMeta.index);
      }
      range.min = Math.min(range.min, value);
      range.max = Math.max(range.max, value);
    }
    getMinMax(scale2, canStack) {
      const meta = this._cachedMeta;
      const _parsed = meta._parsed;
      const sorted = meta._sorted && scale2 === meta.iScale;
      const ilen = _parsed.length;
      const otherScale = this._getOtherScale(scale2);
      const stack = createStack(canStack, meta, this.chart);
      const range = { min: Number.POSITIVE_INFINITY, max: Number.NEGATIVE_INFINITY };
      const { min: otherMin, max: otherMax } = getUserBounds(otherScale);
      let i6, parsed;
      function _skip() {
        parsed = _parsed[i6];
        const otherValue = parsed[otherScale.axis];
        return !isNumberFinite(parsed[scale2.axis]) || otherMin > otherValue || otherMax < otherValue;
      }
      for (i6 = 0; i6 < ilen; ++i6) {
        if (_skip()) {
          continue;
        }
        this.updateRangeFromParsed(range, scale2, parsed, stack);
        if (sorted) {
          break;
        }
      }
      if (sorted) {
        for (i6 = ilen - 1; i6 >= 0; --i6) {
          if (_skip()) {
            continue;
          }
          this.updateRangeFromParsed(range, scale2, parsed, stack);
          break;
        }
      }
      return range;
    }
    getAllParsedValues(scale2) {
      const parsed = this._cachedMeta._parsed;
      const values = [];
      let i6, ilen, value;
      for (i6 = 0, ilen = parsed.length; i6 < ilen; ++i6) {
        value = parsed[i6][scale2.axis];
        if (isNumberFinite(value)) {
          values.push(value);
        }
      }
      return values;
    }
    getMaxOverflow() {
      return false;
    }
    getLabelAndValue(index) {
      const meta = this._cachedMeta;
      const iScale = meta.iScale;
      const vScale = meta.vScale;
      const parsed = this.getParsed(index);
      return {
        label: iScale ? "" + iScale.getLabelForValue(parsed[iScale.axis]) : "",
        value: vScale ? "" + vScale.getLabelForValue(parsed[vScale.axis]) : ""
      };
    }
    _update(mode) {
      const meta = this._cachedMeta;
      this.update(mode || "default");
      meta._clip = toClip(valueOrDefault(this.options.clip, defaultClip(meta.xScale, meta.yScale, this.getMaxOverflow())));
    }
    update(mode) {
    }
    draw() {
      const ctx2 = this._ctx;
      const chart = this.chart;
      const meta = this._cachedMeta;
      const elements = meta.data || [];
      const area = chart.chartArea;
      const active = [];
      const start2 = this._drawStart || 0;
      const count2 = this._drawCount || elements.length - start2;
      const drawActiveElementsOnTop = this.options.drawActiveElementsOnTop;
      let i6;
      if (meta.dataset) {
        meta.dataset.draw(ctx2, area, start2, count2);
      }
      for (i6 = start2; i6 < start2 + count2; ++i6) {
        const element = elements[i6];
        if (element.hidden) {
          continue;
        }
        if (element.active && drawActiveElementsOnTop) {
          active.push(element);
        } else {
          element.draw(ctx2, area);
        }
      }
      for (i6 = 0; i6 < active.length; ++i6) {
        active[i6].draw(ctx2, area);
      }
    }
    getStyle(index, active) {
      const mode = active ? "active" : "default";
      return index === void 0 && this._cachedMeta.dataset ? this.resolveDatasetElementOptions(mode) : this.resolveDataElementOptions(index || 0, mode);
    }
    getContext(index, active, mode) {
      const dataset = this.getDataset();
      let context;
      if (index >= 0 && index < this._cachedMeta.data.length) {
        const element = this._cachedMeta.data[index];
        context = element.$context || (element.$context = createDataContext(this.getContext(), index, element));
        context.parsed = this.getParsed(index);
        context.raw = dataset.data[index];
        context.index = context.dataIndex = index;
      } else {
        context = this.$context || (this.$context = createDatasetContext(this.chart.getContext(), this.index));
        context.dataset = dataset;
        context.index = context.datasetIndex = this.index;
      }
      context.active = !!active;
      context.mode = mode;
      return context;
    }
    resolveDatasetElementOptions(mode) {
      return this._resolveElementOptions(this.datasetElementType.id, mode);
    }
    resolveDataElementOptions(index, mode) {
      return this._resolveElementOptions(this.dataElementType.id, mode, index);
    }
    _resolveElementOptions(elementType, mode = "default", index) {
      const active = mode === "active";
      const cache = this._cachedDataOpts;
      const cacheKey2 = elementType + "-" + mode;
      const cached = cache[cacheKey2];
      const sharing = this.enableOptionSharing && defined(index);
      if (cached) {
        return cloneIfNotShared(cached, sharing);
      }
      const config2 = this.chart.config;
      const scopeKeys = config2.datasetElementScopeKeys(this._type, elementType);
      const prefixes6 = active ? [`${elementType}Hover`, "hover", elementType, ""] : [elementType, ""];
      const scopes = config2.getOptionScopes(this.getDataset(), scopeKeys);
      const names2 = Object.keys(defaults.elements[elementType]);
      const context = () => this.getContext(index, active);
      const values = config2.resolveNamedOptions(scopes, names2, context, prefixes6);
      if (values.$shared) {
        values.$shared = sharing;
        cache[cacheKey2] = Object.freeze(cloneIfNotShared(values, sharing));
      }
      return values;
    }
    _resolveAnimations(index, transition, active) {
      const chart = this.chart;
      const cache = this._cachedDataOpts;
      const cacheKey2 = `animation-${transition}`;
      const cached = cache[cacheKey2];
      if (cached) {
        return cached;
      }
      let options;
      if (chart.options.animation !== false) {
        const config2 = this.chart.config;
        const scopeKeys = config2.datasetAnimationScopeKeys(this._type, transition);
        const scopes = config2.getOptionScopes(this.getDataset(), scopeKeys);
        options = config2.createResolver(scopes, this.getContext(index, active, transition));
      }
      const animations = new Animations(chart, options && options.animations);
      if (options && options._cacheable) {
        cache[cacheKey2] = Object.freeze(animations);
      }
      return animations;
    }
    getSharedOptions(options) {
      if (!options.$shared) {
        return;
      }
      return this._sharedOptions || (this._sharedOptions = Object.assign({}, options));
    }
    includeOptions(mode, sharedOptions) {
      return !sharedOptions || isDirectUpdateMode(mode) || this.chart._animationsDisabled;
    }
    _getSharedOptions(start2, mode) {
      const firstOpts = this.resolveDataElementOptions(start2, mode);
      const previouslySharedOptions = this._sharedOptions;
      const sharedOptions = this.getSharedOptions(firstOpts);
      const includeOptions = this.includeOptions(mode, sharedOptions) || sharedOptions !== previouslySharedOptions;
      this.updateSharedOptions(sharedOptions, mode, firstOpts);
      return { sharedOptions, includeOptions };
    }
    updateElement(element, index, properties, mode) {
      if (isDirectUpdateMode(mode)) {
        Object.assign(element, properties);
      } else {
        this._resolveAnimations(index, mode).update(element, properties);
      }
    }
    updateSharedOptions(sharedOptions, mode, newOptions) {
      if (sharedOptions && !isDirectUpdateMode(mode)) {
        this._resolveAnimations(void 0, mode).update(sharedOptions, newOptions);
      }
    }
    _setStyle(element, index, mode, active) {
      element.active = active;
      const options = this.getStyle(index, active);
      this._resolveAnimations(index, mode, active).update(element, {
        options: !active && this.getSharedOptions(options) || options
      });
    }
    removeHoverStyle(element, datasetIndex, index) {
      this._setStyle(element, index, "active", false);
    }
    setHoverStyle(element, datasetIndex, index) {
      this._setStyle(element, index, "active", true);
    }
    _removeDatasetHoverStyle() {
      const element = this._cachedMeta.dataset;
      if (element) {
        this._setStyle(element, void 0, "active", false);
      }
    }
    _setDatasetHoverStyle() {
      const element = this._cachedMeta.dataset;
      if (element) {
        this._setStyle(element, void 0, "active", true);
      }
    }
    _resyncElements(resetNewElements) {
      const data = this._data;
      const elements = this._cachedMeta.data;
      for (const [method, arg1, arg2] of this._syncList) {
        this[method](arg1, arg2);
      }
      this._syncList = [];
      const numMeta = elements.length;
      const numData = data.length;
      const count2 = Math.min(numData, numMeta);
      if (count2) {
        this.parse(0, count2);
      }
      if (numData > numMeta) {
        this._insertElements(numMeta, numData - numMeta, resetNewElements);
      } else if (numData < numMeta) {
        this._removeElements(numData, numMeta - numData);
      }
    }
    _insertElements(start2, count2, resetNewElements = true) {
      const meta = this._cachedMeta;
      const data = meta.data;
      const end = start2 + count2;
      let i6;
      const move = (arr) => {
        arr.length += count2;
        for (i6 = arr.length - 1; i6 >= end; i6--) {
          arr[i6] = arr[i6 - count2];
        }
      };
      move(data);
      for (i6 = start2; i6 < end; ++i6) {
        data[i6] = new this.dataElementType();
      }
      if (this._parsing) {
        move(meta._parsed);
      }
      this.parse(start2, count2);
      if (resetNewElements) {
        this.updateElements(data, start2, count2, "reset");
      }
    }
    updateElements(element, start2, count2, mode) {
    }
    _removeElements(start2, count2) {
      const meta = this._cachedMeta;
      if (this._parsing) {
        const removed = meta._parsed.splice(start2, count2);
        if (meta._stacked) {
          clearStacks(meta, removed);
        }
      }
      meta.data.splice(start2, count2);
    }
    _sync(args) {
      if (this._parsing) {
        this._syncList.push(args);
      } else {
        const [method, arg1, arg2] = args;
        this[method](arg1, arg2);
      }
      this.chart._dataChanges.push([this.index, ...args]);
    }
    _onDataPush() {
      const count2 = arguments.length;
      this._sync(["_insertElements", this.getDataset().data.length - count2, count2]);
    }
    _onDataPop() {
      this._sync(["_removeElements", this._cachedMeta.data.length - 1, 1]);
    }
    _onDataShift() {
      this._sync(["_removeElements", 0, 1]);
    }
    _onDataSplice(start2, count2) {
      if (count2) {
        this._sync(["_removeElements", start2, count2]);
      }
      const newCount = arguments.length - 2;
      if (newCount) {
        this._sync(["_insertElements", start2, newCount]);
      }
    }
    _onDataUnshift() {
      this._sync(["_insertElements", 0, arguments.length]);
    }
  };
  DatasetController.defaults = {};
  DatasetController.prototype.datasetElementType = null;
  DatasetController.prototype.dataElementType = null;
  function getAllScaleValues(scale2, type) {
    if (!scale2._cache.$bar) {
      const visibleMetas = scale2.getMatchingVisibleMetas(type);
      let values = [];
      for (let i6 = 0, ilen = visibleMetas.length; i6 < ilen; i6++) {
        values = values.concat(visibleMetas[i6].controller.getAllParsedValues(scale2));
      }
      scale2._cache.$bar = _arrayUnique(values.sort((a2, b3) => a2 - b3));
    }
    return scale2._cache.$bar;
  }
  function computeMinSampleSize(meta) {
    const scale2 = meta.iScale;
    const values = getAllScaleValues(scale2, meta.type);
    let min = scale2._length;
    let i6, ilen, curr, prev;
    const updateMinAndPrev = () => {
      if (curr === 32767 || curr === -32768) {
        return;
      }
      if (defined(prev)) {
        min = Math.min(min, Math.abs(curr - prev) || min);
      }
      prev = curr;
    };
    for (i6 = 0, ilen = values.length; i6 < ilen; ++i6) {
      curr = scale2.getPixelForValue(values[i6]);
      updateMinAndPrev();
    }
    prev = void 0;
    for (i6 = 0, ilen = scale2.ticks.length; i6 < ilen; ++i6) {
      curr = scale2.getPixelForTick(i6);
      updateMinAndPrev();
    }
    return min;
  }
  function computeFitCategoryTraits(index, ruler, options, stackCount) {
    const thickness = options.barThickness;
    let size, ratio;
    if (isNullOrUndef(thickness)) {
      size = ruler.min * options.categoryPercentage;
      ratio = options.barPercentage;
    } else {
      size = thickness * stackCount;
      ratio = 1;
    }
    return {
      chunk: size / stackCount,
      ratio,
      start: ruler.pixels[index] - size / 2
    };
  }
  function computeFlexCategoryTraits(index, ruler, options, stackCount) {
    const pixels = ruler.pixels;
    const curr = pixels[index];
    let prev = index > 0 ? pixels[index - 1] : null;
    let next = index < pixels.length - 1 ? pixels[index + 1] : null;
    const percent = options.categoryPercentage;
    if (prev === null) {
      prev = curr - (next === null ? ruler.end - ruler.start : next - curr);
    }
    if (next === null) {
      next = curr + curr - prev;
    }
    const start2 = curr - (curr - Math.min(prev, next)) / 2 * percent;
    const size = Math.abs(next - prev) / 2 * percent;
    return {
      chunk: size / stackCount,
      ratio: options.barPercentage,
      start: start2
    };
  }
  function parseFloatBar(entry, item, vScale, i6) {
    const startValue = vScale.parse(entry[0], i6);
    const endValue = vScale.parse(entry[1], i6);
    const min = Math.min(startValue, endValue);
    const max = Math.max(startValue, endValue);
    let barStart = min;
    let barEnd = max;
    if (Math.abs(min) > Math.abs(max)) {
      barStart = max;
      barEnd = min;
    }
    item[vScale.axis] = barEnd;
    item._custom = {
      barStart,
      barEnd,
      start: startValue,
      end: endValue,
      min,
      max
    };
  }
  function parseValue(entry, item, vScale, i6) {
    if (isArray(entry)) {
      parseFloatBar(entry, item, vScale, i6);
    } else {
      item[vScale.axis] = vScale.parse(entry, i6);
    }
    return item;
  }
  function parseArrayOrPrimitive(meta, data, start2, count2) {
    const iScale = meta.iScale;
    const vScale = meta.vScale;
    const labels = iScale.getLabels();
    const singleScale = iScale === vScale;
    const parsed = [];
    let i6, ilen, item, entry;
    for (i6 = start2, ilen = start2 + count2; i6 < ilen; ++i6) {
      entry = data[i6];
      item = {};
      item[iScale.axis] = singleScale || iScale.parse(labels[i6], i6);
      parsed.push(parseValue(entry, item, vScale, i6));
    }
    return parsed;
  }
  function isFloatBar(custom8) {
    return custom8 && custom8.barStart !== void 0 && custom8.barEnd !== void 0;
  }
  function barSign(size, vScale, actualBase) {
    if (size !== 0) {
      return sign(size);
    }
    return (vScale.isHorizontal() ? 1 : -1) * (vScale.min >= actualBase ? 1 : -1);
  }
  function borderProps(properties) {
    let reverse, start2, end, top, bottom;
    if (properties.horizontal) {
      reverse = properties.base > properties.x;
      start2 = "left";
      end = "right";
    } else {
      reverse = properties.base < properties.y;
      start2 = "bottom";
      end = "top";
    }
    if (reverse) {
      top = "end";
      bottom = "start";
    } else {
      top = "start";
      bottom = "end";
    }
    return { start: start2, end, reverse, top, bottom };
  }
  function setBorderSkipped(properties, options, stack, index) {
    let edge = options.borderSkipped;
    const res = {};
    if (!edge) {
      properties.borderSkipped = res;
      return;
    }
    if (edge === true) {
      properties.borderSkipped = { top: true, right: true, bottom: true, left: true };
      return;
    }
    const { start: start2, end, reverse, top, bottom } = borderProps(properties);
    if (edge === "middle" && stack) {
      properties.enableBorderRadius = true;
      if ((stack._top || 0) === index) {
        edge = top;
      } else if ((stack._bottom || 0) === index) {
        edge = bottom;
      } else {
        res[parseEdge(bottom, start2, end, reverse)] = true;
        edge = top;
      }
    }
    res[parseEdge(edge, start2, end, reverse)] = true;
    properties.borderSkipped = res;
  }
  function parseEdge(edge, a2, b3, reverse) {
    if (reverse) {
      edge = swap(edge, a2, b3);
      edge = startEnd(edge, b3, a2);
    } else {
      edge = startEnd(edge, a2, b3);
    }
    return edge;
  }
  function swap(orig, v1, v22) {
    return orig === v1 ? v22 : orig === v22 ? v1 : orig;
  }
  function startEnd(v4, start2, end) {
    return v4 === "start" ? start2 : v4 === "end" ? end : v4;
  }
  function setInflateAmount(properties, { inflateAmount }, ratio) {
    properties.inflateAmount = inflateAmount === "auto" ? ratio === 1 ? 0.33 : 0 : inflateAmount;
  }
  var BarController = class extends DatasetController {
    parsePrimitiveData(meta, data, start2, count2) {
      return parseArrayOrPrimitive(meta, data, start2, count2);
    }
    parseArrayData(meta, data, start2, count2) {
      return parseArrayOrPrimitive(meta, data, start2, count2);
    }
    parseObjectData(meta, data, start2, count2) {
      const { iScale, vScale } = meta;
      const { xAxisKey = "x", yAxisKey = "y" } = this._parsing;
      const iAxisKey = iScale.axis === "x" ? xAxisKey : yAxisKey;
      const vAxisKey = vScale.axis === "x" ? xAxisKey : yAxisKey;
      const parsed = [];
      let i6, ilen, item, obj;
      for (i6 = start2, ilen = start2 + count2; i6 < ilen; ++i6) {
        obj = data[i6];
        item = {};
        item[iScale.axis] = iScale.parse(resolveObjectKey(obj, iAxisKey), i6);
        parsed.push(parseValue(resolveObjectKey(obj, vAxisKey), item, vScale, i6));
      }
      return parsed;
    }
    updateRangeFromParsed(range, scale2, parsed, stack) {
      super.updateRangeFromParsed(range, scale2, parsed, stack);
      const custom8 = parsed._custom;
      if (custom8 && scale2 === this._cachedMeta.vScale) {
        range.min = Math.min(range.min, custom8.min);
        range.max = Math.max(range.max, custom8.max);
      }
    }
    getMaxOverflow() {
      return 0;
    }
    getLabelAndValue(index) {
      const meta = this._cachedMeta;
      const { iScale, vScale } = meta;
      const parsed = this.getParsed(index);
      const custom8 = parsed._custom;
      const value = isFloatBar(custom8) ? "[" + custom8.start + ", " + custom8.end + "]" : "" + vScale.getLabelForValue(parsed[vScale.axis]);
      return {
        label: "" + iScale.getLabelForValue(parsed[iScale.axis]),
        value
      };
    }
    initialize() {
      this.enableOptionSharing = true;
      super.initialize();
      const meta = this._cachedMeta;
      meta.stack = this.getDataset().stack;
    }
    update(mode) {
      const meta = this._cachedMeta;
      this.updateElements(meta.data, 0, meta.data.length, mode);
    }
    updateElements(bars, start2, count2, mode) {
      const reset = mode === "reset";
      const { index, _cachedMeta: { vScale } } = this;
      const base = vScale.getBasePixel();
      const horizontal = vScale.isHorizontal();
      const ruler = this._getRuler();
      const { sharedOptions, includeOptions } = this._getSharedOptions(start2, mode);
      for (let i6 = start2; i6 < start2 + count2; i6++) {
        const parsed = this.getParsed(i6);
        const vpixels = reset || isNullOrUndef(parsed[vScale.axis]) ? { base, head: base } : this._calculateBarValuePixels(i6);
        const ipixels = this._calculateBarIndexPixels(i6, ruler);
        const stack = (parsed._stacks || {})[vScale.axis];
        const properties = {
          horizontal,
          base: vpixels.base,
          enableBorderRadius: !stack || isFloatBar(parsed._custom) || (index === stack._top || index === stack._bottom),
          x: horizontal ? vpixels.head : ipixels.center,
          y: horizontal ? ipixels.center : vpixels.head,
          height: horizontal ? ipixels.size : Math.abs(vpixels.size),
          width: horizontal ? Math.abs(vpixels.size) : ipixels.size
        };
        if (includeOptions) {
          properties.options = sharedOptions || this.resolveDataElementOptions(i6, bars[i6].active ? "active" : mode);
        }
        const options = properties.options || bars[i6].options;
        setBorderSkipped(properties, options, stack, index);
        setInflateAmount(properties, options, ruler.ratio);
        this.updateElement(bars[i6], i6, properties, mode);
      }
    }
    _getStacks(last, dataIndex) {
      const { iScale } = this._cachedMeta;
      const metasets = iScale.getMatchingVisibleMetas(this._type).filter((meta) => meta.controller.options.grouped);
      const stacked = iScale.options.stacked;
      const stacks = [];
      const skipNull = (meta) => {
        const parsed = meta.controller.getParsed(dataIndex);
        const val2 = parsed && parsed[meta.vScale.axis];
        if (isNullOrUndef(val2) || isNaN(val2)) {
          return true;
        }
      };
      for (const meta of metasets) {
        if (dataIndex !== void 0 && skipNull(meta)) {
          continue;
        }
        if (stacked === false || stacks.indexOf(meta.stack) === -1 || stacked === void 0 && meta.stack === void 0) {
          stacks.push(meta.stack);
        }
        if (meta.index === last) {
          break;
        }
      }
      if (!stacks.length) {
        stacks.push(void 0);
      }
      return stacks;
    }
    _getStackCount(index) {
      return this._getStacks(void 0, index).length;
    }
    _getStackIndex(datasetIndex, name, dataIndex) {
      const stacks = this._getStacks(datasetIndex, dataIndex);
      const index = name !== void 0 ? stacks.indexOf(name) : -1;
      return index === -1 ? stacks.length - 1 : index;
    }
    _getRuler() {
      const opts = this.options;
      const meta = this._cachedMeta;
      const iScale = meta.iScale;
      const pixels = [];
      let i6, ilen;
      for (i6 = 0, ilen = meta.data.length; i6 < ilen; ++i6) {
        pixels.push(iScale.getPixelForValue(this.getParsed(i6)[iScale.axis], i6));
      }
      const barThickness = opts.barThickness;
      const min = barThickness || computeMinSampleSize(meta);
      return {
        min,
        pixels,
        start: iScale._startPixel,
        end: iScale._endPixel,
        stackCount: this._getStackCount(),
        scale: iScale,
        grouped: opts.grouped,
        ratio: barThickness ? 1 : opts.categoryPercentage * opts.barPercentage
      };
    }
    _calculateBarValuePixels(index) {
      const { _cachedMeta: { vScale, _stacked }, options: { base: baseValue, minBarLength } } = this;
      const actualBase = baseValue || 0;
      const parsed = this.getParsed(index);
      const custom8 = parsed._custom;
      const floating = isFloatBar(custom8);
      let value = parsed[vScale.axis];
      let start2 = 0;
      let length = _stacked ? this.applyStack(vScale, parsed, _stacked) : value;
      let head, size;
      if (length !== value) {
        start2 = length - value;
        length = value;
      }
      if (floating) {
        value = custom8.barStart;
        length = custom8.barEnd - custom8.barStart;
        if (value !== 0 && sign(value) !== sign(custom8.barEnd)) {
          start2 = 0;
        }
        start2 += value;
      }
      const startValue = !isNullOrUndef(baseValue) && !floating ? baseValue : start2;
      let base = vScale.getPixelForValue(startValue);
      if (this.chart.getDataVisibility(index)) {
        head = vScale.getPixelForValue(start2 + length);
      } else {
        head = base;
      }
      size = head - base;
      if (Math.abs(size) < minBarLength) {
        size = barSign(size, vScale, actualBase) * minBarLength;
        if (value === actualBase) {
          base -= size / 2;
        }
        const startPixel = vScale.getPixelForDecimal(0);
        const endPixel = vScale.getPixelForDecimal(1);
        const min = Math.min(startPixel, endPixel);
        const max = Math.max(startPixel, endPixel);
        base = Math.max(Math.min(base, max), min);
        head = base + size;
      }
      if (base === vScale.getPixelForValue(actualBase)) {
        const halfGrid = sign(size) * vScale.getLineWidthForValue(actualBase) / 2;
        base += halfGrid;
        size -= halfGrid;
      }
      return {
        size,
        base,
        head,
        center: head + size / 2
      };
    }
    _calculateBarIndexPixels(index, ruler) {
      const scale2 = ruler.scale;
      const options = this.options;
      const skipNull = options.skipNull;
      const maxBarThickness = valueOrDefault(options.maxBarThickness, Infinity);
      let center, size;
      if (ruler.grouped) {
        const stackCount = skipNull ? this._getStackCount(index) : ruler.stackCount;
        const range = options.barThickness === "flex" ? computeFlexCategoryTraits(index, ruler, options, stackCount) : computeFitCategoryTraits(index, ruler, options, stackCount);
        const stackIndex = this._getStackIndex(this.index, this._cachedMeta.stack, skipNull ? index : void 0);
        center = range.start + range.chunk * stackIndex + range.chunk / 2;
        size = Math.min(maxBarThickness, range.chunk * range.ratio);
      } else {
        center = scale2.getPixelForValue(this.getParsed(index)[scale2.axis], index);
        size = Math.min(maxBarThickness, ruler.min * ruler.ratio);
      }
      return {
        base: center - size / 2,
        head: center + size / 2,
        center,
        size
      };
    }
    draw() {
      const meta = this._cachedMeta;
      const vScale = meta.vScale;
      const rects = meta.data;
      const ilen = rects.length;
      let i6 = 0;
      for (; i6 < ilen; ++i6) {
        if (this.getParsed(i6)[vScale.axis] !== null) {
          rects[i6].draw(this._ctx);
        }
      }
    }
  };
  BarController.id = "bar";
  BarController.defaults = {
    datasetElementType: false,
    dataElementType: "bar",
    categoryPercentage: 0.8,
    barPercentage: 0.9,
    grouped: true,
    animations: {
      numbers: {
        type: "number",
        properties: ["x", "y", "base", "width", "height"]
      }
    }
  };
  BarController.overrides = {
    scales: {
      _index_: {
        type: "category",
        offset: true,
        grid: {
          offset: true
        }
      },
      _value_: {
        type: "linear",
        beginAtZero: true
      }
    }
  };
  var BubbleController = class extends DatasetController {
    initialize() {
      this.enableOptionSharing = true;
      super.initialize();
    }
    parsePrimitiveData(meta, data, start2, count2) {
      const parsed = super.parsePrimitiveData(meta, data, start2, count2);
      for (let i6 = 0; i6 < parsed.length; i6++) {
        parsed[i6]._custom = this.resolveDataElementOptions(i6 + start2).radius;
      }
      return parsed;
    }
    parseArrayData(meta, data, start2, count2) {
      const parsed = super.parseArrayData(meta, data, start2, count2);
      for (let i6 = 0; i6 < parsed.length; i6++) {
        const item = data[start2 + i6];
        parsed[i6]._custom = valueOrDefault(item[2], this.resolveDataElementOptions(i6 + start2).radius);
      }
      return parsed;
    }
    parseObjectData(meta, data, start2, count2) {
      const parsed = super.parseObjectData(meta, data, start2, count2);
      for (let i6 = 0; i6 < parsed.length; i6++) {
        const item = data[start2 + i6];
        parsed[i6]._custom = valueOrDefault(item && item.r && +item.r, this.resolveDataElementOptions(i6 + start2).radius);
      }
      return parsed;
    }
    getMaxOverflow() {
      const data = this._cachedMeta.data;
      let max = 0;
      for (let i6 = data.length - 1; i6 >= 0; --i6) {
        max = Math.max(max, data[i6].size(this.resolveDataElementOptions(i6)) / 2);
      }
      return max > 0 && max;
    }
    getLabelAndValue(index) {
      const meta = this._cachedMeta;
      const { xScale, yScale } = meta;
      const parsed = this.getParsed(index);
      const x3 = xScale.getLabelForValue(parsed.x);
      const y4 = yScale.getLabelForValue(parsed.y);
      const r6 = parsed._custom;
      return {
        label: meta.label,
        value: "(" + x3 + ", " + y4 + (r6 ? ", " + r6 : "") + ")"
      };
    }
    update(mode) {
      const points = this._cachedMeta.data;
      this.updateElements(points, 0, points.length, mode);
    }
    updateElements(points, start2, count2, mode) {
      const reset = mode === "reset";
      const { iScale, vScale } = this._cachedMeta;
      const { sharedOptions, includeOptions } = this._getSharedOptions(start2, mode);
      const iAxis = iScale.axis;
      const vAxis = vScale.axis;
      for (let i6 = start2; i6 < start2 + count2; i6++) {
        const point5 = points[i6];
        const parsed = !reset && this.getParsed(i6);
        const properties = {};
        const iPixel = properties[iAxis] = reset ? iScale.getPixelForDecimal(0.5) : iScale.getPixelForValue(parsed[iAxis]);
        const vPixel = properties[vAxis] = reset ? vScale.getBasePixel() : vScale.getPixelForValue(parsed[vAxis]);
        properties.skip = isNaN(iPixel) || isNaN(vPixel);
        if (includeOptions) {
          properties.options = sharedOptions || this.resolveDataElementOptions(i6, point5.active ? "active" : mode);
          if (reset) {
            properties.options.radius = 0;
          }
        }
        this.updateElement(point5, i6, properties, mode);
      }
    }
    resolveDataElementOptions(index, mode) {
      const parsed = this.getParsed(index);
      let values = super.resolveDataElementOptions(index, mode);
      if (values.$shared) {
        values = Object.assign({}, values, { $shared: false });
      }
      const radius = values.radius;
      if (mode !== "active") {
        values.radius = 0;
      }
      values.radius += valueOrDefault(parsed && parsed._custom, radius);
      return values;
    }
  };
  BubbleController.id = "bubble";
  BubbleController.defaults = {
    datasetElementType: false,
    dataElementType: "point",
    animations: {
      numbers: {
        type: "number",
        properties: ["x", "y", "borderWidth", "radius"]
      }
    }
  };
  BubbleController.overrides = {
    scales: {
      x: {
        type: "linear"
      },
      y: {
        type: "linear"
      }
    },
    plugins: {
      tooltip: {
        callbacks: {
          title() {
            return "";
          }
        }
      }
    }
  };
  function getRatioAndOffset(rotation, circumference, cutout) {
    let ratioX = 1;
    let ratioY = 1;
    let offsetX = 0;
    let offsetY = 0;
    if (circumference < TAU) {
      const startAngle = rotation;
      const endAngle = startAngle + circumference;
      const startX = Math.cos(startAngle);
      const startY = Math.sin(startAngle);
      const endX = Math.cos(endAngle);
      const endY = Math.sin(endAngle);
      const calcMax = (angle, a2, b3) => _angleBetween(angle, startAngle, endAngle, true) ? 1 : Math.max(a2, a2 * cutout, b3, b3 * cutout);
      const calcMin = (angle, a2, b3) => _angleBetween(angle, startAngle, endAngle, true) ? -1 : Math.min(a2, a2 * cutout, b3, b3 * cutout);
      const maxX = calcMax(0, startX, endX);
      const maxY2 = calcMax(HALF_PI, startY, endY);
      const minX = calcMin(PI, startX, endX);
      const minY = calcMin(PI + HALF_PI, startY, endY);
      ratioX = (maxX - minX) / 2;
      ratioY = (maxY2 - minY) / 2;
      offsetX = -(maxX + minX) / 2;
      offsetY = -(maxY2 + minY) / 2;
    }
    return { ratioX, ratioY, offsetX, offsetY };
  }
  var DoughnutController = class extends DatasetController {
    constructor(chart, datasetIndex) {
      super(chart, datasetIndex);
      this.enableOptionSharing = true;
      this.innerRadius = void 0;
      this.outerRadius = void 0;
      this.offsetX = void 0;
      this.offsetY = void 0;
    }
    linkScales() {
    }
    parse(start2, count2) {
      const data = this.getDataset().data;
      const meta = this._cachedMeta;
      if (this._parsing === false) {
        meta._parsed = data;
      } else {
        let getter = (i7) => +data[i7];
        if (isObject(data[start2])) {
          const { key = "value" } = this._parsing;
          getter = (i7) => +resolveObjectKey(data[i7], key);
        }
        let i6, ilen;
        for (i6 = start2, ilen = start2 + count2; i6 < ilen; ++i6) {
          meta._parsed[i6] = getter(i6);
        }
      }
    }
    _getRotation() {
      return toRadians(this.options.rotation - 90);
    }
    _getCircumference() {
      return toRadians(this.options.circumference);
    }
    _getRotationExtents() {
      let min = TAU;
      let max = -TAU;
      for (let i6 = 0; i6 < this.chart.data.datasets.length; ++i6) {
        if (this.chart.isDatasetVisible(i6)) {
          const controller = this.chart.getDatasetMeta(i6).controller;
          const rotation = controller._getRotation();
          const circumference = controller._getCircumference();
          min = Math.min(min, rotation);
          max = Math.max(max, rotation + circumference);
        }
      }
      return {
        rotation: min,
        circumference: max - min
      };
    }
    update(mode) {
      const chart = this.chart;
      const { chartArea } = chart;
      const meta = this._cachedMeta;
      const arcs = meta.data;
      const spacing = this.getMaxBorderWidth() + this.getMaxOffset(arcs) + this.options.spacing;
      const maxSize = Math.max((Math.min(chartArea.width, chartArea.height) - spacing) / 2, 0);
      const cutout = Math.min(toPercentage(this.options.cutout, maxSize), 1);
      const chartWeight = this._getRingWeight(this.index);
      const { circumference, rotation } = this._getRotationExtents();
      const { ratioX, ratioY, offsetX, offsetY } = getRatioAndOffset(rotation, circumference, cutout);
      const maxWidth = (chartArea.width - spacing) / ratioX;
      const maxHeight = (chartArea.height - spacing) / ratioY;
      const maxRadius = Math.max(Math.min(maxWidth, maxHeight) / 2, 0);
      const outerRadius = toDimension(this.options.radius, maxRadius);
      const innerRadius = Math.max(outerRadius * cutout, 0);
      const radiusLength = (outerRadius - innerRadius) / this._getVisibleDatasetWeightTotal();
      this.offsetX = offsetX * outerRadius;
      this.offsetY = offsetY * outerRadius;
      meta.total = this.calculateTotal();
      this.outerRadius = outerRadius - radiusLength * this._getRingWeightOffset(this.index);
      this.innerRadius = Math.max(this.outerRadius - radiusLength * chartWeight, 0);
      this.updateElements(arcs, 0, arcs.length, mode);
    }
    _circumference(i6, reset) {
      const opts = this.options;
      const meta = this._cachedMeta;
      const circumference = this._getCircumference();
      if (reset && opts.animation.animateRotate || !this.chart.getDataVisibility(i6) || meta._parsed[i6] === null || meta.data[i6].hidden) {
        return 0;
      }
      return this.calculateCircumference(meta._parsed[i6] * circumference / TAU);
    }
    updateElements(arcs, start2, count2, mode) {
      const reset = mode === "reset";
      const chart = this.chart;
      const chartArea = chart.chartArea;
      const opts = chart.options;
      const animationOpts = opts.animation;
      const centerX = (chartArea.left + chartArea.right) / 2;
      const centerY = (chartArea.top + chartArea.bottom) / 2;
      const animateScale = reset && animationOpts.animateScale;
      const innerRadius = animateScale ? 0 : this.innerRadius;
      const outerRadius = animateScale ? 0 : this.outerRadius;
      const { sharedOptions, includeOptions } = this._getSharedOptions(start2, mode);
      let startAngle = this._getRotation();
      let i6;
      for (i6 = 0; i6 < start2; ++i6) {
        startAngle += this._circumference(i6, reset);
      }
      for (i6 = start2; i6 < start2 + count2; ++i6) {
        const circumference = this._circumference(i6, reset);
        const arc = arcs[i6];
        const properties = {
          x: centerX + this.offsetX,
          y: centerY + this.offsetY,
          startAngle,
          endAngle: startAngle + circumference,
          circumference,
          outerRadius,
          innerRadius
        };
        if (includeOptions) {
          properties.options = sharedOptions || this.resolveDataElementOptions(i6, arc.active ? "active" : mode);
        }
        startAngle += circumference;
        this.updateElement(arc, i6, properties, mode);
      }
    }
    calculateTotal() {
      const meta = this._cachedMeta;
      const metaData = meta.data;
      let total = 0;
      let i6;
      for (i6 = 0; i6 < metaData.length; i6++) {
        const value = meta._parsed[i6];
        if (value !== null && !isNaN(value) && this.chart.getDataVisibility(i6) && !metaData[i6].hidden) {
          total += Math.abs(value);
        }
      }
      return total;
    }
    calculateCircumference(value) {
      const total = this._cachedMeta.total;
      if (total > 0 && !isNaN(value)) {
        return TAU * (Math.abs(value) / total);
      }
      return 0;
    }
    getLabelAndValue(index) {
      const meta = this._cachedMeta;
      const chart = this.chart;
      const labels = chart.data.labels || [];
      const value = formatNumber(meta._parsed[index], chart.options.locale);
      return {
        label: labels[index] || "",
        value
      };
    }
    getMaxBorderWidth(arcs) {
      let max = 0;
      const chart = this.chart;
      let i6, ilen, meta, controller, options;
      if (!arcs) {
        for (i6 = 0, ilen = chart.data.datasets.length; i6 < ilen; ++i6) {
          if (chart.isDatasetVisible(i6)) {
            meta = chart.getDatasetMeta(i6);
            arcs = meta.data;
            controller = meta.controller;
            break;
          }
        }
      }
      if (!arcs) {
        return 0;
      }
      for (i6 = 0, ilen = arcs.length; i6 < ilen; ++i6) {
        options = controller.resolveDataElementOptions(i6);
        if (options.borderAlign !== "inner") {
          max = Math.max(max, options.borderWidth || 0, options.hoverBorderWidth || 0);
        }
      }
      return max;
    }
    getMaxOffset(arcs) {
      let max = 0;
      for (let i6 = 0, ilen = arcs.length; i6 < ilen; ++i6) {
        const options = this.resolveDataElementOptions(i6);
        max = Math.max(max, options.offset || 0, options.hoverOffset || 0);
      }
      return max;
    }
    _getRingWeightOffset(datasetIndex) {
      let ringWeightOffset = 0;
      for (let i6 = 0; i6 < datasetIndex; ++i6) {
        if (this.chart.isDatasetVisible(i6)) {
          ringWeightOffset += this._getRingWeight(i6);
        }
      }
      return ringWeightOffset;
    }
    _getRingWeight(datasetIndex) {
      return Math.max(valueOrDefault(this.chart.data.datasets[datasetIndex].weight, 1), 0);
    }
    _getVisibleDatasetWeightTotal() {
      return this._getRingWeightOffset(this.chart.data.datasets.length) || 1;
    }
  };
  DoughnutController.id = "doughnut";
  DoughnutController.defaults = {
    datasetElementType: false,
    dataElementType: "arc",
    animation: {
      animateRotate: true,
      animateScale: false
    },
    animations: {
      numbers: {
        type: "number",
        properties: ["circumference", "endAngle", "innerRadius", "outerRadius", "startAngle", "x", "y", "offset", "borderWidth", "spacing"]
      }
    },
    cutout: "50%",
    rotation: 0,
    circumference: 360,
    radius: "100%",
    spacing: 0,
    indexAxis: "r"
  };
  DoughnutController.descriptors = {
    _scriptable: (name) => name !== "spacing",
    _indexable: (name) => name !== "spacing"
  };
  DoughnutController.overrides = {
    aspectRatio: 1,
    plugins: {
      legend: {
        labels: {
          generateLabels(chart) {
            const data = chart.data;
            if (data.labels.length && data.datasets.length) {
              const { labels: { pointStyle } } = chart.legend.options;
              return data.labels.map((label, i6) => {
                const meta = chart.getDatasetMeta(0);
                const style = meta.controller.getStyle(i6);
                return {
                  text: label,
                  fillStyle: style.backgroundColor,
                  strokeStyle: style.borderColor,
                  lineWidth: style.borderWidth,
                  pointStyle,
                  hidden: !chart.getDataVisibility(i6),
                  index: i6
                };
              });
            }
            return [];
          }
        },
        onClick(e7, legendItem, legend) {
          legend.chart.toggleDataVisibility(legendItem.index);
          legend.chart.update();
        }
      },
      tooltip: {
        callbacks: {
          title() {
            return "";
          },
          label(tooltipItem) {
            let dataLabel = tooltipItem.label;
            const value = ": " + tooltipItem.formattedValue;
            if (isArray(dataLabel)) {
              dataLabel = dataLabel.slice();
              dataLabel[0] += value;
            } else {
              dataLabel += value;
            }
            return dataLabel;
          }
        }
      }
    }
  };
  var LineController = class extends DatasetController {
    initialize() {
      this.enableOptionSharing = true;
      this.supportsDecimation = true;
      super.initialize();
    }
    update(mode) {
      const meta = this._cachedMeta;
      const { dataset: line, data: points = [], _dataset } = meta;
      const animationsDisabled = this.chart._animationsDisabled;
      let { start: start2, count: count2 } = _getStartAndCountOfVisiblePoints(meta, points, animationsDisabled);
      this._drawStart = start2;
      this._drawCount = count2;
      if (_scaleRangesChanged(meta)) {
        start2 = 0;
        count2 = points.length;
      }
      line._chart = this.chart;
      line._datasetIndex = this.index;
      line._decimated = !!_dataset._decimated;
      line.points = points;
      const options = this.resolveDatasetElementOptions(mode);
      if (!this.options.showLine) {
        options.borderWidth = 0;
      }
      options.segment = this.options.segment;
      this.updateElement(line, void 0, {
        animated: !animationsDisabled,
        options
      }, mode);
      this.updateElements(points, start2, count2, mode);
    }
    updateElements(points, start2, count2, mode) {
      const reset = mode === "reset";
      const { iScale, vScale, _stacked, _dataset } = this._cachedMeta;
      const { sharedOptions, includeOptions } = this._getSharedOptions(start2, mode);
      const iAxis = iScale.axis;
      const vAxis = vScale.axis;
      const { spanGaps, segment } = this.options;
      const maxGapLength = isNumber(spanGaps) ? spanGaps : Number.POSITIVE_INFINITY;
      const directUpdate = this.chart._animationsDisabled || reset || mode === "none";
      let prevParsed = start2 > 0 && this.getParsed(start2 - 1);
      for (let i6 = start2; i6 < start2 + count2; ++i6) {
        const point5 = points[i6];
        const parsed = this.getParsed(i6);
        const properties = directUpdate ? point5 : {};
        const nullData = isNullOrUndef(parsed[vAxis]);
        const iPixel = properties[iAxis] = iScale.getPixelForValue(parsed[iAxis], i6);
        const vPixel = properties[vAxis] = reset || nullData ? vScale.getBasePixel() : vScale.getPixelForValue(_stacked ? this.applyStack(vScale, parsed, _stacked) : parsed[vAxis], i6);
        properties.skip = isNaN(iPixel) || isNaN(vPixel) || nullData;
        properties.stop = i6 > 0 && Math.abs(parsed[iAxis] - prevParsed[iAxis]) > maxGapLength;
        if (segment) {
          properties.parsed = parsed;
          properties.raw = _dataset.data[i6];
        }
        if (includeOptions) {
          properties.options = sharedOptions || this.resolveDataElementOptions(i6, point5.active ? "active" : mode);
        }
        if (!directUpdate) {
          this.updateElement(point5, i6, properties, mode);
        }
        prevParsed = parsed;
      }
    }
    getMaxOverflow() {
      const meta = this._cachedMeta;
      const dataset = meta.dataset;
      const border = dataset.options && dataset.options.borderWidth || 0;
      const data = meta.data || [];
      if (!data.length) {
        return border;
      }
      const firstPoint = data[0].size(this.resolveDataElementOptions(0));
      const lastPoint = data[data.length - 1].size(this.resolveDataElementOptions(data.length - 1));
      return Math.max(border, firstPoint, lastPoint) / 2;
    }
    draw() {
      const meta = this._cachedMeta;
      meta.dataset.updateControlPoints(this.chart.chartArea, meta.iScale.axis);
      super.draw();
    }
  };
  LineController.id = "line";
  LineController.defaults = {
    datasetElementType: "line",
    dataElementType: "point",
    showLine: true,
    spanGaps: false
  };
  LineController.overrides = {
    scales: {
      _index_: {
        type: "category"
      },
      _value_: {
        type: "linear"
      }
    }
  };
  var PolarAreaController = class extends DatasetController {
    constructor(chart, datasetIndex) {
      super(chart, datasetIndex);
      this.innerRadius = void 0;
      this.outerRadius = void 0;
    }
    getLabelAndValue(index) {
      const meta = this._cachedMeta;
      const chart = this.chart;
      const labels = chart.data.labels || [];
      const value = formatNumber(meta._parsed[index].r, chart.options.locale);
      return {
        label: labels[index] || "",
        value
      };
    }
    parseObjectData(meta, data, start2, count2) {
      return _parseObjectDataRadialScale.bind(this)(meta, data, start2, count2);
    }
    update(mode) {
      const arcs = this._cachedMeta.data;
      this._updateRadius();
      this.updateElements(arcs, 0, arcs.length, mode);
    }
    getMinMax() {
      const meta = this._cachedMeta;
      const range = { min: Number.POSITIVE_INFINITY, max: Number.NEGATIVE_INFINITY };
      meta.data.forEach((element, index) => {
        const parsed = this.getParsed(index).r;
        if (!isNaN(parsed) && this.chart.getDataVisibility(index)) {
          if (parsed < range.min) {
            range.min = parsed;
          }
          if (parsed > range.max) {
            range.max = parsed;
          }
        }
      });
      return range;
    }
    _updateRadius() {
      const chart = this.chart;
      const chartArea = chart.chartArea;
      const opts = chart.options;
      const minSize = Math.min(chartArea.right - chartArea.left, chartArea.bottom - chartArea.top);
      const outerRadius = Math.max(minSize / 2, 0);
      const innerRadius = Math.max(opts.cutoutPercentage ? outerRadius / 100 * opts.cutoutPercentage : 1, 0);
      const radiusLength = (outerRadius - innerRadius) / chart.getVisibleDatasetCount();
      this.outerRadius = outerRadius - radiusLength * this.index;
      this.innerRadius = this.outerRadius - radiusLength;
    }
    updateElements(arcs, start2, count2, mode) {
      const reset = mode === "reset";
      const chart = this.chart;
      const opts = chart.options;
      const animationOpts = opts.animation;
      const scale2 = this._cachedMeta.rScale;
      const centerX = scale2.xCenter;
      const centerY = scale2.yCenter;
      const datasetStartAngle = scale2.getIndexAngle(0) - 0.5 * PI;
      let angle = datasetStartAngle;
      let i6;
      const defaultAngle = 360 / this.countVisibleElements();
      for (i6 = 0; i6 < start2; ++i6) {
        angle += this._computeAngle(i6, mode, defaultAngle);
      }
      for (i6 = start2; i6 < start2 + count2; i6++) {
        const arc = arcs[i6];
        let startAngle = angle;
        let endAngle = angle + this._computeAngle(i6, mode, defaultAngle);
        let outerRadius = chart.getDataVisibility(i6) ? scale2.getDistanceFromCenterForValue(this.getParsed(i6).r) : 0;
        angle = endAngle;
        if (reset) {
          if (animationOpts.animateScale) {
            outerRadius = 0;
          }
          if (animationOpts.animateRotate) {
            startAngle = endAngle = datasetStartAngle;
          }
        }
        const properties = {
          x: centerX,
          y: centerY,
          innerRadius: 0,
          outerRadius,
          startAngle,
          endAngle,
          options: this.resolveDataElementOptions(i6, arc.active ? "active" : mode)
        };
        this.updateElement(arc, i6, properties, mode);
      }
    }
    countVisibleElements() {
      const meta = this._cachedMeta;
      let count2 = 0;
      meta.data.forEach((element, index) => {
        if (!isNaN(this.getParsed(index).r) && this.chart.getDataVisibility(index)) {
          count2++;
        }
      });
      return count2;
    }
    _computeAngle(index, mode, defaultAngle) {
      return this.chart.getDataVisibility(index) ? toRadians(this.resolveDataElementOptions(index, mode).angle || defaultAngle) : 0;
    }
  };
  PolarAreaController.id = "polarArea";
  PolarAreaController.defaults = {
    dataElementType: "arc",
    animation: {
      animateRotate: true,
      animateScale: true
    },
    animations: {
      numbers: {
        type: "number",
        properties: ["x", "y", "startAngle", "endAngle", "innerRadius", "outerRadius"]
      }
    },
    indexAxis: "r",
    startAngle: 0
  };
  PolarAreaController.overrides = {
    aspectRatio: 1,
    plugins: {
      legend: {
        labels: {
          generateLabels(chart) {
            const data = chart.data;
            if (data.labels.length && data.datasets.length) {
              const { labels: { pointStyle } } = chart.legend.options;
              return data.labels.map((label, i6) => {
                const meta = chart.getDatasetMeta(0);
                const style = meta.controller.getStyle(i6);
                return {
                  text: label,
                  fillStyle: style.backgroundColor,
                  strokeStyle: style.borderColor,
                  lineWidth: style.borderWidth,
                  pointStyle,
                  hidden: !chart.getDataVisibility(i6),
                  index: i6
                };
              });
            }
            return [];
          }
        },
        onClick(e7, legendItem, legend) {
          legend.chart.toggleDataVisibility(legendItem.index);
          legend.chart.update();
        }
      },
      tooltip: {
        callbacks: {
          title() {
            return "";
          },
          label(context) {
            return context.chart.data.labels[context.dataIndex] + ": " + context.formattedValue;
          }
        }
      }
    },
    scales: {
      r: {
        type: "radialLinear",
        angleLines: {
          display: false
        },
        beginAtZero: true,
        grid: {
          circular: true
        },
        pointLabels: {
          display: false
        },
        startAngle: 0
      }
    }
  };
  var PieController = class extends DoughnutController {
  };
  PieController.id = "pie";
  PieController.defaults = {
    cutout: 0,
    rotation: 0,
    circumference: 360,
    radius: "100%"
  };
  var RadarController = class extends DatasetController {
    getLabelAndValue(index) {
      const vScale = this._cachedMeta.vScale;
      const parsed = this.getParsed(index);
      return {
        label: vScale.getLabels()[index],
        value: "" + vScale.getLabelForValue(parsed[vScale.axis])
      };
    }
    parseObjectData(meta, data, start2, count2) {
      return _parseObjectDataRadialScale.bind(this)(meta, data, start2, count2);
    }
    update(mode) {
      const meta = this._cachedMeta;
      const line = meta.dataset;
      const points = meta.data || [];
      const labels = meta.iScale.getLabels();
      line.points = points;
      if (mode !== "resize") {
        const options = this.resolveDatasetElementOptions(mode);
        if (!this.options.showLine) {
          options.borderWidth = 0;
        }
        const properties = {
          _loop: true,
          _fullLoop: labels.length === points.length,
          options
        };
        this.updateElement(line, void 0, properties, mode);
      }
      this.updateElements(points, 0, points.length, mode);
    }
    updateElements(points, start2, count2, mode) {
      const scale2 = this._cachedMeta.rScale;
      const reset = mode === "reset";
      for (let i6 = start2; i6 < start2 + count2; i6++) {
        const point5 = points[i6];
        const options = this.resolveDataElementOptions(i6, point5.active ? "active" : mode);
        const pointPosition = scale2.getPointPositionForValue(i6, this.getParsed(i6).r);
        const x3 = reset ? scale2.xCenter : pointPosition.x;
        const y4 = reset ? scale2.yCenter : pointPosition.y;
        const properties = {
          x: x3,
          y: y4,
          angle: pointPosition.angle,
          skip: isNaN(x3) || isNaN(y4),
          options
        };
        this.updateElement(point5, i6, properties, mode);
      }
    }
  };
  RadarController.id = "radar";
  RadarController.defaults = {
    datasetElementType: "line",
    dataElementType: "point",
    indexAxis: "r",
    showLine: true,
    elements: {
      line: {
        fill: "start"
      }
    }
  };
  RadarController.overrides = {
    aspectRatio: 1,
    scales: {
      r: {
        type: "radialLinear"
      }
    }
  };
  var Element = class {
    constructor() {
      this.x = void 0;
      this.y = void 0;
      this.active = false;
      this.options = void 0;
      this.$animations = void 0;
    }
    tooltipPosition(useFinalPosition) {
      const { x: x3, y: y4 } = this.getProps(["x", "y"], useFinalPosition);
      return { x: x3, y: y4 };
    }
    hasValue() {
      return isNumber(this.x) && isNumber(this.y);
    }
    getProps(props, final) {
      const anims = this.$animations;
      if (!final || !anims) {
        return this;
      }
      const ret = {};
      props.forEach((prop) => {
        ret[prop] = anims[prop] && anims[prop].active() ? anims[prop]._to : this[prop];
      });
      return ret;
    }
  };
  Element.defaults = {};
  Element.defaultRoutes = void 0;
  var formatters = {
    values(value) {
      return isArray(value) ? value : "" + value;
    },
    numeric(tickValue, index, ticks2) {
      if (tickValue === 0) {
        return "0";
      }
      const locale3 = this.chart.options.locale;
      let notation;
      let delta = tickValue;
      if (ticks2.length > 1) {
        const maxTick = Math.max(Math.abs(ticks2[0].value), Math.abs(ticks2[ticks2.length - 1].value));
        if (maxTick < 1e-4 || maxTick > 1e15) {
          notation = "scientific";
        }
        delta = calculateDelta(tickValue, ticks2);
      }
      const logDelta = log10(Math.abs(delta));
      const numDecimal = Math.max(Math.min(-1 * Math.floor(logDelta), 20), 0);
      const options = { notation, minimumFractionDigits: numDecimal, maximumFractionDigits: numDecimal };
      Object.assign(options, this.options.ticks.format);
      return formatNumber(tickValue, locale3, options);
    },
    logarithmic(tickValue, index, ticks2) {
      if (tickValue === 0) {
        return "0";
      }
      const remain = tickValue / Math.pow(10, Math.floor(log10(tickValue)));
      if (remain === 1 || remain === 2 || remain === 5) {
        return formatters.numeric.call(this, tickValue, index, ticks2);
      }
      return "";
    }
  };
  function calculateDelta(tickValue, ticks2) {
    let delta = ticks2.length > 3 ? ticks2[2].value - ticks2[1].value : ticks2[1].value - ticks2[0].value;
    if (Math.abs(delta) >= 1 && tickValue !== Math.floor(tickValue)) {
      delta = tickValue - Math.floor(tickValue);
    }
    return delta;
  }
  var Ticks = { formatters };
  defaults.set("scale", {
    display: true,
    offset: false,
    reverse: false,
    beginAtZero: false,
    bounds: "ticks",
    grace: 0,
    grid: {
      display: true,
      lineWidth: 1,
      drawBorder: true,
      drawOnChartArea: true,
      drawTicks: true,
      tickLength: 8,
      tickWidth: (_ctx, options) => options.lineWidth,
      tickColor: (_ctx, options) => options.color,
      offset: false,
      borderDash: [],
      borderDashOffset: 0,
      borderWidth: 1
    },
    title: {
      display: false,
      text: "",
      padding: {
        top: 4,
        bottom: 4
      }
    },
    ticks: {
      minRotation: 0,
      maxRotation: 50,
      mirror: false,
      textStrokeWidth: 0,
      textStrokeColor: "",
      padding: 3,
      display: true,
      autoSkip: true,
      autoSkipPadding: 3,
      labelOffset: 0,
      callback: Ticks.formatters.values,
      minor: {},
      major: {},
      align: "center",
      crossAlign: "near",
      showLabelBackdrop: false,
      backdropColor: "rgba(255, 255, 255, 0.75)",
      backdropPadding: 2
    }
  });
  defaults.route("scale.ticks", "color", "", "color");
  defaults.route("scale.grid", "color", "", "borderColor");
  defaults.route("scale.grid", "borderColor", "", "borderColor");
  defaults.route("scale.title", "color", "", "color");
  defaults.describe("scale", {
    _fallback: false,
    _scriptable: (name) => !name.startsWith("before") && !name.startsWith("after") && name !== "callback" && name !== "parser",
    _indexable: (name) => name !== "borderDash" && name !== "tickBorderDash"
  });
  defaults.describe("scales", {
    _fallback: "scale"
  });
  defaults.describe("scale.ticks", {
    _scriptable: (name) => name !== "backdropPadding" && name !== "callback",
    _indexable: (name) => name !== "backdropPadding"
  });
  function autoSkip(scale2, ticks2) {
    const tickOpts = scale2.options.ticks;
    const ticksLimit = tickOpts.maxTicksLimit || determineMaxTicks(scale2);
    const majorIndices = tickOpts.major.enabled ? getMajorIndices(ticks2) : [];
    const numMajorIndices = majorIndices.length;
    const first = majorIndices[0];
    const last = majorIndices[numMajorIndices - 1];
    const newTicks = [];
    if (numMajorIndices > ticksLimit) {
      skipMajors(ticks2, newTicks, majorIndices, numMajorIndices / ticksLimit);
      return newTicks;
    }
    const spacing = calculateSpacing(majorIndices, ticks2, ticksLimit);
    if (numMajorIndices > 0) {
      let i6, ilen;
      const avgMajorSpacing = numMajorIndices > 1 ? Math.round((last - first) / (numMajorIndices - 1)) : null;
      skip(ticks2, newTicks, spacing, isNullOrUndef(avgMajorSpacing) ? 0 : first - avgMajorSpacing, first);
      for (i6 = 0, ilen = numMajorIndices - 1; i6 < ilen; i6++) {
        skip(ticks2, newTicks, spacing, majorIndices[i6], majorIndices[i6 + 1]);
      }
      skip(ticks2, newTicks, spacing, last, isNullOrUndef(avgMajorSpacing) ? ticks2.length : last + avgMajorSpacing);
      return newTicks;
    }
    skip(ticks2, newTicks, spacing);
    return newTicks;
  }
  function determineMaxTicks(scale2) {
    const offset = scale2.options.offset;
    const tickLength = scale2._tickSize();
    const maxScale = scale2._length / tickLength + (offset ? 0 : 1);
    const maxChart = scale2._maxLength / tickLength;
    return Math.floor(Math.min(maxScale, maxChart));
  }
  function calculateSpacing(majorIndices, ticks2, ticksLimit) {
    const evenMajorSpacing = getEvenSpacing(majorIndices);
    const spacing = ticks2.length / ticksLimit;
    if (!evenMajorSpacing) {
      return Math.max(spacing, 1);
    }
    const factors = _factorize(evenMajorSpacing);
    for (let i6 = 0, ilen = factors.length - 1; i6 < ilen; i6++) {
      const factor = factors[i6];
      if (factor > spacing) {
        return factor;
      }
    }
    return Math.max(spacing, 1);
  }
  function getMajorIndices(ticks2) {
    const result = [];
    let i6, ilen;
    for (i6 = 0, ilen = ticks2.length; i6 < ilen; i6++) {
      if (ticks2[i6].major) {
        result.push(i6);
      }
    }
    return result;
  }
  function skipMajors(ticks2, newTicks, majorIndices, spacing) {
    let count2 = 0;
    let next = majorIndices[0];
    let i6;
    spacing = Math.ceil(spacing);
    for (i6 = 0; i6 < ticks2.length; i6++) {
      if (i6 === next) {
        newTicks.push(ticks2[i6]);
        count2++;
        next = majorIndices[count2 * spacing];
      }
    }
  }
  function skip(ticks2, newTicks, spacing, majorStart, majorEnd) {
    const start2 = valueOrDefault(majorStart, 0);
    const end = Math.min(valueOrDefault(majorEnd, ticks2.length), ticks2.length);
    let count2 = 0;
    let length, i6, next;
    spacing = Math.ceil(spacing);
    if (majorEnd) {
      length = majorEnd - majorStart;
      spacing = length / Math.floor(length / spacing);
    }
    next = start2;
    while (next < 0) {
      count2++;
      next = Math.round(start2 + count2 * spacing);
    }
    for (i6 = Math.max(start2, 0); i6 < end; i6++) {
      if (i6 === next) {
        newTicks.push(ticks2[i6]);
        count2++;
        next = Math.round(start2 + count2 * spacing);
      }
    }
  }
  function getEvenSpacing(arr) {
    const len = arr.length;
    let i6, diff;
    if (len < 2) {
      return false;
    }
    for (diff = arr[0], i6 = 1; i6 < len; ++i6) {
      if (arr[i6] - arr[i6 - 1] !== diff) {
        return false;
      }
    }
    return diff;
  }
  var reverseAlign = (align) => align === "left" ? "right" : align === "right" ? "left" : align;
  var offsetFromEdge = (scale2, edge, offset) => edge === "top" || edge === "left" ? scale2[edge] + offset : scale2[edge] - offset;
  function sample(arr, numItems) {
    const result = [];
    const increment = arr.length / numItems;
    const len = arr.length;
    let i6 = 0;
    for (; i6 < len; i6 += increment) {
      result.push(arr[Math.floor(i6)]);
    }
    return result;
  }
  function getPixelForGridLine(scale2, index, offsetGridLines) {
    const length = scale2.ticks.length;
    const validIndex2 = Math.min(index, length - 1);
    const start2 = scale2._startPixel;
    const end = scale2._endPixel;
    const epsilon5 = 1e-6;
    let lineValue = scale2.getPixelForTick(validIndex2);
    let offset;
    if (offsetGridLines) {
      if (length === 1) {
        offset = Math.max(lineValue - start2, end - lineValue);
      } else if (index === 0) {
        offset = (scale2.getPixelForTick(1) - lineValue) / 2;
      } else {
        offset = (lineValue - scale2.getPixelForTick(validIndex2 - 1)) / 2;
      }
      lineValue += validIndex2 < index ? offset : -offset;
      if (lineValue < start2 - epsilon5 || lineValue > end + epsilon5) {
        return;
      }
    }
    return lineValue;
  }
  function garbageCollect(caches, length) {
    each(caches, (cache) => {
      const gc = cache.gc;
      const gcLen = gc.length / 2;
      let i6;
      if (gcLen > length) {
        for (i6 = 0; i6 < gcLen; ++i6) {
          delete cache.data[gc[i6]];
        }
        gc.splice(0, gcLen);
      }
    });
  }
  function getTickMarkLength(options) {
    return options.drawTicks ? options.tickLength : 0;
  }
  function getTitleHeight(options, fallback) {
    if (!options.display) {
      return 0;
    }
    const font = toFont(options.font, fallback);
    const padding = toPadding(options.padding);
    const lines = isArray(options.text) ? options.text.length : 1;
    return lines * font.lineHeight + padding.height;
  }
  function createScaleContext(parent, scale2) {
    return createContext(parent, {
      scale: scale2,
      type: "scale"
    });
  }
  function createTickContext(parent, index, tick) {
    return createContext(parent, {
      tick,
      index,
      type: "tick"
    });
  }
  function titleAlign(align, position, reverse) {
    let ret = _toLeftRightCenter(align);
    if (reverse && position !== "right" || !reverse && position === "right") {
      ret = reverseAlign(ret);
    }
    return ret;
  }
  function titleArgs(scale2, offset, position, align) {
    const { top, left, bottom, right, chart } = scale2;
    const { chartArea, scales } = chart;
    let rotation = 0;
    let maxWidth, titleX, titleY;
    const height = bottom - top;
    const width = right - left;
    if (scale2.isHorizontal()) {
      titleX = _alignStartEnd(align, left, right);
      if (isObject(position)) {
        const positionAxisID = Object.keys(position)[0];
        const value = position[positionAxisID];
        titleY = scales[positionAxisID].getPixelForValue(value) + height - offset;
      } else if (position === "center") {
        titleY = (chartArea.bottom + chartArea.top) / 2 + height - offset;
      } else {
        titleY = offsetFromEdge(scale2, position, offset);
      }
      maxWidth = right - left;
    } else {
      if (isObject(position)) {
        const positionAxisID = Object.keys(position)[0];
        const value = position[positionAxisID];
        titleX = scales[positionAxisID].getPixelForValue(value) - width + offset;
      } else if (position === "center") {
        titleX = (chartArea.left + chartArea.right) / 2 - width + offset;
      } else {
        titleX = offsetFromEdge(scale2, position, offset);
      }
      titleY = _alignStartEnd(align, bottom, top);
      rotation = position === "left" ? -HALF_PI : HALF_PI;
    }
    return { titleX, titleY, maxWidth, rotation };
  }
  var Scale = class extends Element {
    constructor(cfg) {
      super();
      this.id = cfg.id;
      this.type = cfg.type;
      this.options = void 0;
      this.ctx = cfg.ctx;
      this.chart = cfg.chart;
      this.top = void 0;
      this.bottom = void 0;
      this.left = void 0;
      this.right = void 0;
      this.width = void 0;
      this.height = void 0;
      this._margins = {
        left: 0,
        right: 0,
        top: 0,
        bottom: 0
      };
      this.maxWidth = void 0;
      this.maxHeight = void 0;
      this.paddingTop = void 0;
      this.paddingBottom = void 0;
      this.paddingLeft = void 0;
      this.paddingRight = void 0;
      this.axis = void 0;
      this.labelRotation = void 0;
      this.min = void 0;
      this.max = void 0;
      this._range = void 0;
      this.ticks = [];
      this._gridLineItems = null;
      this._labelItems = null;
      this._labelSizes = null;
      this._length = 0;
      this._maxLength = 0;
      this._longestTextCache = {};
      this._startPixel = void 0;
      this._endPixel = void 0;
      this._reversePixels = false;
      this._userMax = void 0;
      this._userMin = void 0;
      this._suggestedMax = void 0;
      this._suggestedMin = void 0;
      this._ticksLength = 0;
      this._borderValue = 0;
      this._cache = {};
      this._dataLimitsCached = false;
      this.$context = void 0;
    }
    init(options) {
      this.options = options.setContext(this.getContext());
      this.axis = options.axis;
      this._userMin = this.parse(options.min);
      this._userMax = this.parse(options.max);
      this._suggestedMin = this.parse(options.suggestedMin);
      this._suggestedMax = this.parse(options.suggestedMax);
    }
    parse(raw, index) {
      return raw;
    }
    getUserBounds() {
      let { _userMin, _userMax, _suggestedMin, _suggestedMax } = this;
      _userMin = finiteOrDefault(_userMin, Number.POSITIVE_INFINITY);
      _userMax = finiteOrDefault(_userMax, Number.NEGATIVE_INFINITY);
      _suggestedMin = finiteOrDefault(_suggestedMin, Number.POSITIVE_INFINITY);
      _suggestedMax = finiteOrDefault(_suggestedMax, Number.NEGATIVE_INFINITY);
      return {
        min: finiteOrDefault(_userMin, _suggestedMin),
        max: finiteOrDefault(_userMax, _suggestedMax),
        minDefined: isNumberFinite(_userMin),
        maxDefined: isNumberFinite(_userMax)
      };
    }
    getMinMax(canStack) {
      let { min, max, minDefined, maxDefined } = this.getUserBounds();
      let range;
      if (minDefined && maxDefined) {
        return { min, max };
      }
      const metas = this.getMatchingVisibleMetas();
      for (let i6 = 0, ilen = metas.length; i6 < ilen; ++i6) {
        range = metas[i6].controller.getMinMax(this, canStack);
        if (!minDefined) {
          min = Math.min(min, range.min);
        }
        if (!maxDefined) {
          max = Math.max(max, range.max);
        }
      }
      min = maxDefined && min > max ? max : min;
      max = minDefined && min > max ? min : max;
      return {
        min: finiteOrDefault(min, finiteOrDefault(max, min)),
        max: finiteOrDefault(max, finiteOrDefault(min, max))
      };
    }
    getPadding() {
      return {
        left: this.paddingLeft || 0,
        top: this.paddingTop || 0,
        right: this.paddingRight || 0,
        bottom: this.paddingBottom || 0
      };
    }
    getTicks() {
      return this.ticks;
    }
    getLabels() {
      const data = this.chart.data;
      return this.options.labels || (this.isHorizontal() ? data.xLabels : data.yLabels) || data.labels || [];
    }
    beforeLayout() {
      this._cache = {};
      this._dataLimitsCached = false;
    }
    beforeUpdate() {
      callback(this.options.beforeUpdate, [this]);
    }
    update(maxWidth, maxHeight, margins) {
      const { beginAtZero, grace, ticks: tickOpts } = this.options;
      const sampleSize = tickOpts.sampleSize;
      this.beforeUpdate();
      this.maxWidth = maxWidth;
      this.maxHeight = maxHeight;
      this._margins = margins = Object.assign({
        left: 0,
        right: 0,
        top: 0,
        bottom: 0
      }, margins);
      this.ticks = null;
      this._labelSizes = null;
      this._gridLineItems = null;
      this._labelItems = null;
      this.beforeSetDimensions();
      this.setDimensions();
      this.afterSetDimensions();
      this._maxLength = this.isHorizontal() ? this.width + margins.left + margins.right : this.height + margins.top + margins.bottom;
      if (!this._dataLimitsCached) {
        this.beforeDataLimits();
        this.determineDataLimits();
        this.afterDataLimits();
        this._range = _addGrace(this, grace, beginAtZero);
        this._dataLimitsCached = true;
      }
      this.beforeBuildTicks();
      this.ticks = this.buildTicks() || [];
      this.afterBuildTicks();
      const samplingEnabled = sampleSize < this.ticks.length;
      this._convertTicksToLabels(samplingEnabled ? sample(this.ticks, sampleSize) : this.ticks);
      this.configure();
      this.beforeCalculateLabelRotation();
      this.calculateLabelRotation();
      this.afterCalculateLabelRotation();
      if (tickOpts.display && (tickOpts.autoSkip || tickOpts.source === "auto")) {
        this.ticks = autoSkip(this, this.ticks);
        this._labelSizes = null;
        this.afterAutoSkip();
      }
      if (samplingEnabled) {
        this._convertTicksToLabels(this.ticks);
      }
      this.beforeFit();
      this.fit();
      this.afterFit();
      this.afterUpdate();
    }
    configure() {
      let reversePixels = this.options.reverse;
      let startPixel, endPixel;
      if (this.isHorizontal()) {
        startPixel = this.left;
        endPixel = this.right;
      } else {
        startPixel = this.top;
        endPixel = this.bottom;
        reversePixels = !reversePixels;
      }
      this._startPixel = startPixel;
      this._endPixel = endPixel;
      this._reversePixels = reversePixels;
      this._length = endPixel - startPixel;
      this._alignToPixels = this.options.alignToPixels;
    }
    afterUpdate() {
      callback(this.options.afterUpdate, [this]);
    }
    beforeSetDimensions() {
      callback(this.options.beforeSetDimensions, [this]);
    }
    setDimensions() {
      if (this.isHorizontal()) {
        this.width = this.maxWidth;
        this.left = 0;
        this.right = this.width;
      } else {
        this.height = this.maxHeight;
        this.top = 0;
        this.bottom = this.height;
      }
      this.paddingLeft = 0;
      this.paddingTop = 0;
      this.paddingRight = 0;
      this.paddingBottom = 0;
    }
    afterSetDimensions() {
      callback(this.options.afterSetDimensions, [this]);
    }
    _callHooks(name) {
      this.chart.notifyPlugins(name, this.getContext());
      callback(this.options[name], [this]);
    }
    beforeDataLimits() {
      this._callHooks("beforeDataLimits");
    }
    determineDataLimits() {
    }
    afterDataLimits() {
      this._callHooks("afterDataLimits");
    }
    beforeBuildTicks() {
      this._callHooks("beforeBuildTicks");
    }
    buildTicks() {
      return [];
    }
    afterBuildTicks() {
      this._callHooks("afterBuildTicks");
    }
    beforeTickToLabelConversion() {
      callback(this.options.beforeTickToLabelConversion, [this]);
    }
    generateTickLabels(ticks2) {
      const tickOpts = this.options.ticks;
      let i6, ilen, tick;
      for (i6 = 0, ilen = ticks2.length; i6 < ilen; i6++) {
        tick = ticks2[i6];
        tick.label = callback(tickOpts.callback, [tick.value, i6, ticks2], this);
      }
    }
    afterTickToLabelConversion() {
      callback(this.options.afterTickToLabelConversion, [this]);
    }
    beforeCalculateLabelRotation() {
      callback(this.options.beforeCalculateLabelRotation, [this]);
    }
    calculateLabelRotation() {
      const options = this.options;
      const tickOpts = options.ticks;
      const numTicks = this.ticks.length;
      const minRotation = tickOpts.minRotation || 0;
      const maxRotation = tickOpts.maxRotation;
      let labelRotation = minRotation;
      let tickWidth, maxHeight, maxLabelDiagonal;
      if (!this._isVisible() || !tickOpts.display || minRotation >= maxRotation || numTicks <= 1 || !this.isHorizontal()) {
        this.labelRotation = minRotation;
        return;
      }
      const labelSizes = this._getLabelSizes();
      const maxLabelWidth = labelSizes.widest.width;
      const maxLabelHeight = labelSizes.highest.height;
      const maxWidth = _limitValue(this.chart.width - maxLabelWidth, 0, this.maxWidth);
      tickWidth = options.offset ? this.maxWidth / numTicks : maxWidth / (numTicks - 1);
      if (maxLabelWidth + 6 > tickWidth) {
        tickWidth = maxWidth / (numTicks - (options.offset ? 0.5 : 1));
        maxHeight = this.maxHeight - getTickMarkLength(options.grid) - tickOpts.padding - getTitleHeight(options.title, this.chart.options.font);
        maxLabelDiagonal = Math.sqrt(maxLabelWidth * maxLabelWidth + maxLabelHeight * maxLabelHeight);
        labelRotation = toDegrees(Math.min(
          Math.asin(_limitValue((labelSizes.highest.height + 6) / tickWidth, -1, 1)),
          Math.asin(_limitValue(maxHeight / maxLabelDiagonal, -1, 1)) - Math.asin(_limitValue(maxLabelHeight / maxLabelDiagonal, -1, 1))
        ));
        labelRotation = Math.max(minRotation, Math.min(maxRotation, labelRotation));
      }
      this.labelRotation = labelRotation;
    }
    afterCalculateLabelRotation() {
      callback(this.options.afterCalculateLabelRotation, [this]);
    }
    afterAutoSkip() {
    }
    beforeFit() {
      callback(this.options.beforeFit, [this]);
    }
    fit() {
      const minSize = {
        width: 0,
        height: 0
      };
      const { chart, options: { ticks: tickOpts, title: titleOpts, grid: gridOpts } } = this;
      const display = this._isVisible();
      const isHorizontal = this.isHorizontal();
      if (display) {
        const titleHeight = getTitleHeight(titleOpts, chart.options.font);
        if (isHorizontal) {
          minSize.width = this.maxWidth;
          minSize.height = getTickMarkLength(gridOpts) + titleHeight;
        } else {
          minSize.height = this.maxHeight;
          minSize.width = getTickMarkLength(gridOpts) + titleHeight;
        }
        if (tickOpts.display && this.ticks.length) {
          const { first, last, widest, highest } = this._getLabelSizes();
          const tickPadding = tickOpts.padding * 2;
          const angleRadians = toRadians(this.labelRotation);
          const cos = Math.cos(angleRadians);
          const sin = Math.sin(angleRadians);
          if (isHorizontal) {
            const labelHeight = tickOpts.mirror ? 0 : sin * widest.width + cos * highest.height;
            minSize.height = Math.min(this.maxHeight, minSize.height + labelHeight + tickPadding);
          } else {
            const labelWidth = tickOpts.mirror ? 0 : cos * widest.width + sin * highest.height;
            minSize.width = Math.min(this.maxWidth, minSize.width + labelWidth + tickPadding);
          }
          this._calculatePadding(first, last, sin, cos);
        }
      }
      this._handleMargins();
      if (isHorizontal) {
        this.width = this._length = chart.width - this._margins.left - this._margins.right;
        this.height = minSize.height;
      } else {
        this.width = minSize.width;
        this.height = this._length = chart.height - this._margins.top - this._margins.bottom;
      }
    }
    _calculatePadding(first, last, sin, cos) {
      const { ticks: { align, padding }, position } = this.options;
      const isRotated = this.labelRotation !== 0;
      const labelsBelowTicks = position !== "top" && this.axis === "x";
      if (this.isHorizontal()) {
        const offsetLeft = this.getPixelForTick(0) - this.left;
        const offsetRight = this.right - this.getPixelForTick(this.ticks.length - 1);
        let paddingLeft = 0;
        let paddingRight = 0;
        if (isRotated) {
          if (labelsBelowTicks) {
            paddingLeft = cos * first.width;
            paddingRight = sin * last.height;
          } else {
            paddingLeft = sin * first.height;
            paddingRight = cos * last.width;
          }
        } else if (align === "start") {
          paddingRight = last.width;
        } else if (align === "end") {
          paddingLeft = first.width;
        } else if (align !== "inner") {
          paddingLeft = first.width / 2;
          paddingRight = last.width / 2;
        }
        this.paddingLeft = Math.max((paddingLeft - offsetLeft + padding) * this.width / (this.width - offsetLeft), 0);
        this.paddingRight = Math.max((paddingRight - offsetRight + padding) * this.width / (this.width - offsetRight), 0);
      } else {
        let paddingTop = last.height / 2;
        let paddingBottom = first.height / 2;
        if (align === "start") {
          paddingTop = 0;
          paddingBottom = first.height;
        } else if (align === "end") {
          paddingTop = last.height;
          paddingBottom = 0;
        }
        this.paddingTop = paddingTop + padding;
        this.paddingBottom = paddingBottom + padding;
      }
    }
    _handleMargins() {
      if (this._margins) {
        this._margins.left = Math.max(this.paddingLeft, this._margins.left);
        this._margins.top = Math.max(this.paddingTop, this._margins.top);
        this._margins.right = Math.max(this.paddingRight, this._margins.right);
        this._margins.bottom = Math.max(this.paddingBottom, this._margins.bottom);
      }
    }
    afterFit() {
      callback(this.options.afterFit, [this]);
    }
    isHorizontal() {
      const { axis, position } = this.options;
      return position === "top" || position === "bottom" || axis === "x";
    }
    isFullSize() {
      return this.options.fullSize;
    }
    _convertTicksToLabels(ticks2) {
      this.beforeTickToLabelConversion();
      this.generateTickLabels(ticks2);
      let i6, ilen;
      for (i6 = 0, ilen = ticks2.length; i6 < ilen; i6++) {
        if (isNullOrUndef(ticks2[i6].label)) {
          ticks2.splice(i6, 1);
          ilen--;
          i6--;
        }
      }
      this.afterTickToLabelConversion();
    }
    _getLabelSizes() {
      let labelSizes = this._labelSizes;
      if (!labelSizes) {
        const sampleSize = this.options.ticks.sampleSize;
        let ticks2 = this.ticks;
        if (sampleSize < ticks2.length) {
          ticks2 = sample(ticks2, sampleSize);
        }
        this._labelSizes = labelSizes = this._computeLabelSizes(ticks2, ticks2.length);
      }
      return labelSizes;
    }
    _computeLabelSizes(ticks2, length) {
      const { ctx: ctx2, _longestTextCache: caches } = this;
      const widths = [];
      const heights = [];
      let widestLabelSize = 0;
      let highestLabelSize = 0;
      let i6, j3, jlen, label, tickFont, fontString2, cache, lineHeight, width, height, nestedLabel;
      for (i6 = 0; i6 < length; ++i6) {
        label = ticks2[i6].label;
        tickFont = this._resolveTickFontOptions(i6);
        ctx2.font = fontString2 = tickFont.string;
        cache = caches[fontString2] = caches[fontString2] || { data: {}, gc: [] };
        lineHeight = tickFont.lineHeight;
        width = height = 0;
        if (!isNullOrUndef(label) && !isArray(label)) {
          width = _measureText(ctx2, cache.data, cache.gc, width, label);
          height = lineHeight;
        } else if (isArray(label)) {
          for (j3 = 0, jlen = label.length; j3 < jlen; ++j3) {
            nestedLabel = label[j3];
            if (!isNullOrUndef(nestedLabel) && !isArray(nestedLabel)) {
              width = _measureText(ctx2, cache.data, cache.gc, width, nestedLabel);
              height += lineHeight;
            }
          }
        }
        widths.push(width);
        heights.push(height);
        widestLabelSize = Math.max(width, widestLabelSize);
        highestLabelSize = Math.max(height, highestLabelSize);
      }
      garbageCollect(caches, length);
      const widest = widths.indexOf(widestLabelSize);
      const highest = heights.indexOf(highestLabelSize);
      const valueAt = (idx) => ({ width: widths[idx] || 0, height: heights[idx] || 0 });
      return {
        first: valueAt(0),
        last: valueAt(length - 1),
        widest: valueAt(widest),
        highest: valueAt(highest),
        widths,
        heights
      };
    }
    getLabelForValue(value) {
      return value;
    }
    getPixelForValue(value, index) {
      return NaN;
    }
    getValueForPixel(pixel) {
    }
    getPixelForTick(index) {
      const ticks2 = this.ticks;
      if (index < 0 || index > ticks2.length - 1) {
        return null;
      }
      return this.getPixelForValue(ticks2[index].value);
    }
    getPixelForDecimal(decimal) {
      if (this._reversePixels) {
        decimal = 1 - decimal;
      }
      const pixel = this._startPixel + decimal * this._length;
      return _int16Range(this._alignToPixels ? _alignPixel(this.chart, pixel, 0) : pixel);
    }
    getDecimalForPixel(pixel) {
      const decimal = (pixel - this._startPixel) / this._length;
      return this._reversePixels ? 1 - decimal : decimal;
    }
    getBasePixel() {
      return this.getPixelForValue(this.getBaseValue());
    }
    getBaseValue() {
      const { min, max } = this;
      return min < 0 && max < 0 ? max : min > 0 && max > 0 ? min : 0;
    }
    getContext(index) {
      const ticks2 = this.ticks || [];
      if (index >= 0 && index < ticks2.length) {
        const tick = ticks2[index];
        return tick.$context || (tick.$context = createTickContext(this.getContext(), index, tick));
      }
      return this.$context || (this.$context = createScaleContext(this.chart.getContext(), this));
    }
    _tickSize() {
      const optionTicks = this.options.ticks;
      const rot = toRadians(this.labelRotation);
      const cos = Math.abs(Math.cos(rot));
      const sin = Math.abs(Math.sin(rot));
      const labelSizes = this._getLabelSizes();
      const padding = optionTicks.autoSkipPadding || 0;
      const w3 = labelSizes ? labelSizes.widest.width + padding : 0;
      const h = labelSizes ? labelSizes.highest.height + padding : 0;
      return this.isHorizontal() ? h * cos > w3 * sin ? w3 / cos : h / sin : h * sin < w3 * cos ? h / cos : w3 / sin;
    }
    _isVisible() {
      const display = this.options.display;
      if (display !== "auto") {
        return !!display;
      }
      return this.getMatchingVisibleMetas().length > 0;
    }
    _computeGridLineItems(chartArea) {
      const axis = this.axis;
      const chart = this.chart;
      const options = this.options;
      const { grid, position } = options;
      const offset = grid.offset;
      const isHorizontal = this.isHorizontal();
      const ticks2 = this.ticks;
      const ticksLength = ticks2.length + (offset ? 1 : 0);
      const tl = getTickMarkLength(grid);
      const items = [];
      const borderOpts = grid.setContext(this.getContext());
      const axisWidth = borderOpts.drawBorder ? borderOpts.borderWidth : 0;
      const axisHalfWidth = axisWidth / 2;
      const alignBorderValue = function(pixel) {
        return _alignPixel(chart, pixel, axisWidth);
      };
      let borderValue, i6, lineValue, alignedLineValue;
      let tx1, ty1, tx2, ty2, x1, y1, x22, y22;
      if (position === "top") {
        borderValue = alignBorderValue(this.bottom);
        ty1 = this.bottom - tl;
        ty2 = borderValue - axisHalfWidth;
        y1 = alignBorderValue(chartArea.top) + axisHalfWidth;
        y22 = chartArea.bottom;
      } else if (position === "bottom") {
        borderValue = alignBorderValue(this.top);
        y1 = chartArea.top;
        y22 = alignBorderValue(chartArea.bottom) - axisHalfWidth;
        ty1 = borderValue + axisHalfWidth;
        ty2 = this.top + tl;
      } else if (position === "left") {
        borderValue = alignBorderValue(this.right);
        tx1 = this.right - tl;
        tx2 = borderValue - axisHalfWidth;
        x1 = alignBorderValue(chartArea.left) + axisHalfWidth;
        x22 = chartArea.right;
      } else if (position === "right") {
        borderValue = alignBorderValue(this.left);
        x1 = chartArea.left;
        x22 = alignBorderValue(chartArea.right) - axisHalfWidth;
        tx1 = borderValue + axisHalfWidth;
        tx2 = this.left + tl;
      } else if (axis === "x") {
        if (position === "center") {
          borderValue = alignBorderValue((chartArea.top + chartArea.bottom) / 2 + 0.5);
        } else if (isObject(position)) {
          const positionAxisID = Object.keys(position)[0];
          const value = position[positionAxisID];
          borderValue = alignBorderValue(this.chart.scales[positionAxisID].getPixelForValue(value));
        }
        y1 = chartArea.top;
        y22 = chartArea.bottom;
        ty1 = borderValue + axisHalfWidth;
        ty2 = ty1 + tl;
      } else if (axis === "y") {
        if (position === "center") {
          borderValue = alignBorderValue((chartArea.left + chartArea.right) / 2);
        } else if (isObject(position)) {
          const positionAxisID = Object.keys(position)[0];
          const value = position[positionAxisID];
          borderValue = alignBorderValue(this.chart.scales[positionAxisID].getPixelForValue(value));
        }
        tx1 = borderValue - axisHalfWidth;
        tx2 = tx1 - tl;
        x1 = chartArea.left;
        x22 = chartArea.right;
      }
      const limit = valueOrDefault(options.ticks.maxTicksLimit, ticksLength);
      const step = Math.max(1, Math.ceil(ticksLength / limit));
      for (i6 = 0; i6 < ticksLength; i6 += step) {
        const optsAtIndex = grid.setContext(this.getContext(i6));
        const lineWidth = optsAtIndex.lineWidth;
        const lineColor = optsAtIndex.color;
        const borderDash = optsAtIndex.borderDash || [];
        const borderDashOffset = optsAtIndex.borderDashOffset;
        const tickWidth = optsAtIndex.tickWidth;
        const tickColor = optsAtIndex.tickColor;
        const tickBorderDash = optsAtIndex.tickBorderDash || [];
        const tickBorderDashOffset = optsAtIndex.tickBorderDashOffset;
        lineValue = getPixelForGridLine(this, i6, offset);
        if (lineValue === void 0) {
          continue;
        }
        alignedLineValue = _alignPixel(chart, lineValue, lineWidth);
        if (isHorizontal) {
          tx1 = tx2 = x1 = x22 = alignedLineValue;
        } else {
          ty1 = ty2 = y1 = y22 = alignedLineValue;
        }
        items.push({
          tx1,
          ty1,
          tx2,
          ty2,
          x1,
          y1,
          x2: x22,
          y2: y22,
          width: lineWidth,
          color: lineColor,
          borderDash,
          borderDashOffset,
          tickWidth,
          tickColor,
          tickBorderDash,
          tickBorderDashOffset
        });
      }
      this._ticksLength = ticksLength;
      this._borderValue = borderValue;
      return items;
    }
    _computeLabelItems(chartArea) {
      const axis = this.axis;
      const options = this.options;
      const { position, ticks: optionTicks } = options;
      const isHorizontal = this.isHorizontal();
      const ticks2 = this.ticks;
      const { align, crossAlign, padding, mirror } = optionTicks;
      const tl = getTickMarkLength(options.grid);
      const tickAndPadding = tl + padding;
      const hTickAndPadding = mirror ? -padding : tickAndPadding;
      const rotation = -toRadians(this.labelRotation);
      const items = [];
      let i6, ilen, tick, label, x3, y4, textAlign, pixel, font, lineHeight, lineCount, textOffset;
      let textBaseline = "middle";
      if (position === "top") {
        y4 = this.bottom - hTickAndPadding;
        textAlign = this._getXAxisLabelAlignment();
      } else if (position === "bottom") {
        y4 = this.top + hTickAndPadding;
        textAlign = this._getXAxisLabelAlignment();
      } else if (position === "left") {
        const ret = this._getYAxisLabelAlignment(tl);
        textAlign = ret.textAlign;
        x3 = ret.x;
      } else if (position === "right") {
        const ret = this._getYAxisLabelAlignment(tl);
        textAlign = ret.textAlign;
        x3 = ret.x;
      } else if (axis === "x") {
        if (position === "center") {
          y4 = (chartArea.top + chartArea.bottom) / 2 + tickAndPadding;
        } else if (isObject(position)) {
          const positionAxisID = Object.keys(position)[0];
          const value = position[positionAxisID];
          y4 = this.chart.scales[positionAxisID].getPixelForValue(value) + tickAndPadding;
        }
        textAlign = this._getXAxisLabelAlignment();
      } else if (axis === "y") {
        if (position === "center") {
          x3 = (chartArea.left + chartArea.right) / 2 - tickAndPadding;
        } else if (isObject(position)) {
          const positionAxisID = Object.keys(position)[0];
          const value = position[positionAxisID];
          x3 = this.chart.scales[positionAxisID].getPixelForValue(value);
        }
        textAlign = this._getYAxisLabelAlignment(tl).textAlign;
      }
      if (axis === "y") {
        if (align === "start") {
          textBaseline = "top";
        } else if (align === "end") {
          textBaseline = "bottom";
        }
      }
      const labelSizes = this._getLabelSizes();
      for (i6 = 0, ilen = ticks2.length; i6 < ilen; ++i6) {
        tick = ticks2[i6];
        label = tick.label;
        const optsAtIndex = optionTicks.setContext(this.getContext(i6));
        pixel = this.getPixelForTick(i6) + optionTicks.labelOffset;
        font = this._resolveTickFontOptions(i6);
        lineHeight = font.lineHeight;
        lineCount = isArray(label) ? label.length : 1;
        const halfCount = lineCount / 2;
        const color5 = optsAtIndex.color;
        const strokeColor = optsAtIndex.textStrokeColor;
        const strokeWidth = optsAtIndex.textStrokeWidth;
        let tickTextAlign = textAlign;
        if (isHorizontal) {
          x3 = pixel;
          if (textAlign === "inner") {
            if (i6 === ilen - 1) {
              tickTextAlign = !this.options.reverse ? "right" : "left";
            } else if (i6 === 0) {
              tickTextAlign = !this.options.reverse ? "left" : "right";
            } else {
              tickTextAlign = "center";
            }
          }
          if (position === "top") {
            if (crossAlign === "near" || rotation !== 0) {
              textOffset = -lineCount * lineHeight + lineHeight / 2;
            } else if (crossAlign === "center") {
              textOffset = -labelSizes.highest.height / 2 - halfCount * lineHeight + lineHeight;
            } else {
              textOffset = -labelSizes.highest.height + lineHeight / 2;
            }
          } else {
            if (crossAlign === "near" || rotation !== 0) {
              textOffset = lineHeight / 2;
            } else if (crossAlign === "center") {
              textOffset = labelSizes.highest.height / 2 - halfCount * lineHeight;
            } else {
              textOffset = labelSizes.highest.height - lineCount * lineHeight;
            }
          }
          if (mirror) {
            textOffset *= -1;
          }
        } else {
          y4 = pixel;
          textOffset = (1 - lineCount) * lineHeight / 2;
        }
        let backdrop;
        if (optsAtIndex.showLabelBackdrop) {
          const labelPadding = toPadding(optsAtIndex.backdropPadding);
          const height = labelSizes.heights[i6];
          const width = labelSizes.widths[i6];
          let top = y4 + textOffset - labelPadding.top;
          let left = x3 - labelPadding.left;
          switch (textBaseline) {
            case "middle":
              top -= height / 2;
              break;
            case "bottom":
              top -= height;
              break;
          }
          switch (textAlign) {
            case "center":
              left -= width / 2;
              break;
            case "right":
              left -= width;
              break;
          }
          backdrop = {
            left,
            top,
            width: width + labelPadding.width,
            height: height + labelPadding.height,
            color: optsAtIndex.backdropColor
          };
        }
        items.push({
          rotation,
          label,
          font,
          color: color5,
          strokeColor,
          strokeWidth,
          textOffset,
          textAlign: tickTextAlign,
          textBaseline,
          translation: [x3, y4],
          backdrop
        });
      }
      return items;
    }
    _getXAxisLabelAlignment() {
      const { position, ticks: ticks2 } = this.options;
      const rotation = -toRadians(this.labelRotation);
      if (rotation) {
        return position === "top" ? "left" : "right";
      }
      let align = "center";
      if (ticks2.align === "start") {
        align = "left";
      } else if (ticks2.align === "end") {
        align = "right";
      } else if (ticks2.align === "inner") {
        align = "inner";
      }
      return align;
    }
    _getYAxisLabelAlignment(tl) {
      const { position, ticks: { crossAlign, mirror, padding } } = this.options;
      const labelSizes = this._getLabelSizes();
      const tickAndPadding = tl + padding;
      const widest = labelSizes.widest.width;
      let textAlign;
      let x3;
      if (position === "left") {
        if (mirror) {
          x3 = this.right + padding;
          if (crossAlign === "near") {
            textAlign = "left";
          } else if (crossAlign === "center") {
            textAlign = "center";
            x3 += widest / 2;
          } else {
            textAlign = "right";
            x3 += widest;
          }
        } else {
          x3 = this.right - tickAndPadding;
          if (crossAlign === "near") {
            textAlign = "right";
          } else if (crossAlign === "center") {
            textAlign = "center";
            x3 -= widest / 2;
          } else {
            textAlign = "left";
            x3 = this.left;
          }
        }
      } else if (position === "right") {
        if (mirror) {
          x3 = this.left + padding;
          if (crossAlign === "near") {
            textAlign = "right";
          } else if (crossAlign === "center") {
            textAlign = "center";
            x3 -= widest / 2;
          } else {
            textAlign = "left";
            x3 -= widest;
          }
        } else {
          x3 = this.left + tickAndPadding;
          if (crossAlign === "near") {
            textAlign = "left";
          } else if (crossAlign === "center") {
            textAlign = "center";
            x3 += widest / 2;
          } else {
            textAlign = "right";
            x3 = this.right;
          }
        }
      } else {
        textAlign = "right";
      }
      return { textAlign, x: x3 };
    }
    _computeLabelArea() {
      if (this.options.ticks.mirror) {
        return;
      }
      const chart = this.chart;
      const position = this.options.position;
      if (position === "left" || position === "right") {
        return { top: 0, left: this.left, bottom: chart.height, right: this.right };
      }
      if (position === "top" || position === "bottom") {
        return { top: this.top, left: 0, bottom: this.bottom, right: chart.width };
      }
    }
    drawBackground() {
      const { ctx: ctx2, options: { backgroundColor }, left, top, width, height } = this;
      if (backgroundColor) {
        ctx2.save();
        ctx2.fillStyle = backgroundColor;
        ctx2.fillRect(left, top, width, height);
        ctx2.restore();
      }
    }
    getLineWidthForValue(value) {
      const grid = this.options.grid;
      if (!this._isVisible() || !grid.display) {
        return 0;
      }
      const ticks2 = this.ticks;
      const index = ticks2.findIndex((t5) => t5.value === value);
      if (index >= 0) {
        const opts = grid.setContext(this.getContext(index));
        return opts.lineWidth;
      }
      return 0;
    }
    drawGrid(chartArea) {
      const grid = this.options.grid;
      const ctx2 = this.ctx;
      const items = this._gridLineItems || (this._gridLineItems = this._computeGridLineItems(chartArea));
      let i6, ilen;
      const drawLine = (p1, p2, style) => {
        if (!style.width || !style.color) {
          return;
        }
        ctx2.save();
        ctx2.lineWidth = style.width;
        ctx2.strokeStyle = style.color;
        ctx2.setLineDash(style.borderDash || []);
        ctx2.lineDashOffset = style.borderDashOffset;
        ctx2.beginPath();
        ctx2.moveTo(p1.x, p1.y);
        ctx2.lineTo(p2.x, p2.y);
        ctx2.stroke();
        ctx2.restore();
      };
      if (grid.display) {
        for (i6 = 0, ilen = items.length; i6 < ilen; ++i6) {
          const item = items[i6];
          if (grid.drawOnChartArea) {
            drawLine(
              { x: item.x1, y: item.y1 },
              { x: item.x2, y: item.y2 },
              item
            );
          }
          if (grid.drawTicks) {
            drawLine(
              { x: item.tx1, y: item.ty1 },
              { x: item.tx2, y: item.ty2 },
              {
                color: item.tickColor,
                width: item.tickWidth,
                borderDash: item.tickBorderDash,
                borderDashOffset: item.tickBorderDashOffset
              }
            );
          }
        }
      }
    }
    drawBorder() {
      const { chart, ctx: ctx2, options: { grid } } = this;
      const borderOpts = grid.setContext(this.getContext());
      const axisWidth = grid.drawBorder ? borderOpts.borderWidth : 0;
      if (!axisWidth) {
        return;
      }
      const lastLineWidth = grid.setContext(this.getContext(0)).lineWidth;
      const borderValue = this._borderValue;
      let x1, x22, y1, y22;
      if (this.isHorizontal()) {
        x1 = _alignPixel(chart, this.left, axisWidth) - axisWidth / 2;
        x22 = _alignPixel(chart, this.right, lastLineWidth) + lastLineWidth / 2;
        y1 = y22 = borderValue;
      } else {
        y1 = _alignPixel(chart, this.top, axisWidth) - axisWidth / 2;
        y22 = _alignPixel(chart, this.bottom, lastLineWidth) + lastLineWidth / 2;
        x1 = x22 = borderValue;
      }
      ctx2.save();
      ctx2.lineWidth = borderOpts.borderWidth;
      ctx2.strokeStyle = borderOpts.borderColor;
      ctx2.beginPath();
      ctx2.moveTo(x1, y1);
      ctx2.lineTo(x22, y22);
      ctx2.stroke();
      ctx2.restore();
    }
    drawLabels(chartArea) {
      const optionTicks = this.options.ticks;
      if (!optionTicks.display) {
        return;
      }
      const ctx2 = this.ctx;
      const area = this._computeLabelArea();
      if (area) {
        clipArea(ctx2, area);
      }
      const items = this._labelItems || (this._labelItems = this._computeLabelItems(chartArea));
      let i6, ilen;
      for (i6 = 0, ilen = items.length; i6 < ilen; ++i6) {
        const item = items[i6];
        const tickFont = item.font;
        const label = item.label;
        if (item.backdrop) {
          ctx2.fillStyle = item.backdrop.color;
          ctx2.fillRect(item.backdrop.left, item.backdrop.top, item.backdrop.width, item.backdrop.height);
        }
        let y4 = item.textOffset;
        renderText(ctx2, label, 0, y4, tickFont, item);
      }
      if (area) {
        unclipArea(ctx2);
      }
    }
    drawTitle() {
      const { ctx: ctx2, options: { position, title, reverse } } = this;
      if (!title.display) {
        return;
      }
      const font = toFont(title.font);
      const padding = toPadding(title.padding);
      const align = title.align;
      let offset = font.lineHeight / 2;
      if (position === "bottom" || position === "center" || isObject(position)) {
        offset += padding.bottom;
        if (isArray(title.text)) {
          offset += font.lineHeight * (title.text.length - 1);
        }
      } else {
        offset += padding.top;
      }
      const { titleX, titleY, maxWidth, rotation } = titleArgs(this, offset, position, align);
      renderText(ctx2, title.text, 0, 0, font, {
        color: title.color,
        maxWidth,
        rotation,
        textAlign: titleAlign(align, position, reverse),
        textBaseline: "middle",
        translation: [titleX, titleY]
      });
    }
    draw(chartArea) {
      if (!this._isVisible()) {
        return;
      }
      this.drawBackground();
      this.drawGrid(chartArea);
      this.drawBorder();
      this.drawTitle();
      this.drawLabels(chartArea);
    }
    _layers() {
      const opts = this.options;
      const tz = opts.ticks && opts.ticks.z || 0;
      const gz = valueOrDefault(opts.grid && opts.grid.z, -1);
      if (!this._isVisible() || this.draw !== Scale.prototype.draw) {
        return [{
          z: tz,
          draw: (chartArea) => {
            this.draw(chartArea);
          }
        }];
      }
      return [{
        z: gz,
        draw: (chartArea) => {
          this.drawBackground();
          this.drawGrid(chartArea);
          this.drawTitle();
        }
      }, {
        z: gz + 1,
        draw: () => {
          this.drawBorder();
        }
      }, {
        z: tz,
        draw: (chartArea) => {
          this.drawLabels(chartArea);
        }
      }];
    }
    getMatchingVisibleMetas(type) {
      const metas = this.chart.getSortedVisibleDatasetMetas();
      const axisID = this.axis + "AxisID";
      const result = [];
      let i6, ilen;
      for (i6 = 0, ilen = metas.length; i6 < ilen; ++i6) {
        const meta = metas[i6];
        if (meta[axisID] === this.id && (!type || meta.type === type)) {
          result.push(meta);
        }
      }
      return result;
    }
    _resolveTickFontOptions(index) {
      const opts = this.options.ticks.setContext(this.getContext(index));
      return toFont(opts.font);
    }
    _maxDigits() {
      const fontSize = this._resolveTickFontOptions(0).lineHeight;
      return (this.isHorizontal() ? this.width : this.height) / fontSize;
    }
  };
  var TypedRegistry = class {
    constructor(type, scope, override) {
      this.type = type;
      this.scope = scope;
      this.override = override;
      this.items = /* @__PURE__ */ Object.create(null);
    }
    isForType(type) {
      return Object.prototype.isPrototypeOf.call(this.type.prototype, type.prototype);
    }
    register(item) {
      const proto = Object.getPrototypeOf(item);
      let parentScope;
      if (isIChartComponent(proto)) {
        parentScope = this.register(proto);
      }
      const items = this.items;
      const id = item.id;
      const scope = this.scope + "." + id;
      if (!id) {
        throw new Error("class does not have id: " + item);
      }
      if (id in items) {
        return scope;
      }
      items[id] = item;
      registerDefaults(item, scope, parentScope);
      if (this.override) {
        defaults.override(item.id, item.overrides);
      }
      return scope;
    }
    get(id) {
      return this.items[id];
    }
    unregister(item) {
      const items = this.items;
      const id = item.id;
      const scope = this.scope;
      if (id in items) {
        delete items[id];
      }
      if (scope && id in defaults[scope]) {
        delete defaults[scope][id];
        if (this.override) {
          delete overrides[id];
        }
      }
    }
  };
  function registerDefaults(item, scope, parentScope) {
    const itemDefaults = merge(/* @__PURE__ */ Object.create(null), [
      parentScope ? defaults.get(parentScope) : {},
      defaults.get(scope),
      item.defaults
    ]);
    defaults.set(scope, itemDefaults);
    if (item.defaultRoutes) {
      routeDefaults(scope, item.defaultRoutes);
    }
    if (item.descriptors) {
      defaults.describe(scope, item.descriptors);
    }
  }
  function routeDefaults(scope, routes) {
    Object.keys(routes).forEach((property) => {
      const propertyParts = property.split(".");
      const sourceName = propertyParts.pop();
      const sourceScope = [scope].concat(propertyParts).join(".");
      const parts = routes[property].split(".");
      const targetName = parts.pop();
      const targetScope = parts.join(".");
      defaults.route(sourceScope, sourceName, targetScope, targetName);
    });
  }
  function isIChartComponent(proto) {
    return "id" in proto && "defaults" in proto;
  }
  var Registry = class {
    constructor() {
      this.controllers = new TypedRegistry(DatasetController, "datasets", true);
      this.elements = new TypedRegistry(Element, "elements");
      this.plugins = new TypedRegistry(Object, "plugins");
      this.scales = new TypedRegistry(Scale, "scales");
      this._typedRegistries = [this.controllers, this.scales, this.elements];
    }
    add(...args) {
      this._each("register", args);
    }
    remove(...args) {
      this._each("unregister", args);
    }
    addControllers(...args) {
      this._each("register", args, this.controllers);
    }
    addElements(...args) {
      this._each("register", args, this.elements);
    }
    addPlugins(...args) {
      this._each("register", args, this.plugins);
    }
    addScales(...args) {
      this._each("register", args, this.scales);
    }
    getController(id) {
      return this._get(id, this.controllers, "controller");
    }
    getElement(id) {
      return this._get(id, this.elements, "element");
    }
    getPlugin(id) {
      return this._get(id, this.plugins, "plugin");
    }
    getScale(id) {
      return this._get(id, this.scales, "scale");
    }
    removeControllers(...args) {
      this._each("unregister", args, this.controllers);
    }
    removeElements(...args) {
      this._each("unregister", args, this.elements);
    }
    removePlugins(...args) {
      this._each("unregister", args, this.plugins);
    }
    removeScales(...args) {
      this._each("unregister", args, this.scales);
    }
    _each(method, args, typedRegistry) {
      [...args].forEach((arg) => {
        const reg = typedRegistry || this._getRegistryForType(arg);
        if (typedRegistry || reg.isForType(arg) || reg === this.plugins && arg.id) {
          this._exec(method, reg, arg);
        } else {
          each(arg, (item) => {
            const itemReg = typedRegistry || this._getRegistryForType(item);
            this._exec(method, itemReg, item);
          });
        }
      });
    }
    _exec(method, registry2, component) {
      const camelMethod = _capitalize(method);
      callback(component["before" + camelMethod], [], component);
      registry2[method](component);
      callback(component["after" + camelMethod], [], component);
    }
    _getRegistryForType(type) {
      for (let i6 = 0; i6 < this._typedRegistries.length; i6++) {
        const reg = this._typedRegistries[i6];
        if (reg.isForType(type)) {
          return reg;
        }
      }
      return this.plugins;
    }
    _get(id, typedRegistry, type) {
      const item = typedRegistry.get(id);
      if (item === void 0) {
        throw new Error('"' + id + '" is not a registered ' + type + ".");
      }
      return item;
    }
  };
  var registry = new Registry();
  var ScatterController = class extends DatasetController {
    update(mode) {
      const meta = this._cachedMeta;
      const { data: points = [] } = meta;
      const animationsDisabled = this.chart._animationsDisabled;
      let { start: start2, count: count2 } = _getStartAndCountOfVisiblePoints(meta, points, animationsDisabled);
      this._drawStart = start2;
      this._drawCount = count2;
      if (_scaleRangesChanged(meta)) {
        start2 = 0;
        count2 = points.length;
      }
      if (this.options.showLine) {
        const { dataset: line, _dataset } = meta;
        line._chart = this.chart;
        line._datasetIndex = this.index;
        line._decimated = !!_dataset._decimated;
        line.points = points;
        const options = this.resolveDatasetElementOptions(mode);
        options.segment = this.options.segment;
        this.updateElement(line, void 0, {
          animated: !animationsDisabled,
          options
        }, mode);
      }
      this.updateElements(points, start2, count2, mode);
    }
    addElements() {
      const { showLine } = this.options;
      if (!this.datasetElementType && showLine) {
        this.datasetElementType = registry.getElement("line");
      }
      super.addElements();
    }
    updateElements(points, start2, count2, mode) {
      const reset = mode === "reset";
      const { iScale, vScale, _stacked, _dataset } = this._cachedMeta;
      const firstOpts = this.resolveDataElementOptions(start2, mode);
      const sharedOptions = this.getSharedOptions(firstOpts);
      const includeOptions = this.includeOptions(mode, sharedOptions);
      const iAxis = iScale.axis;
      const vAxis = vScale.axis;
      const { spanGaps, segment } = this.options;
      const maxGapLength = isNumber(spanGaps) ? spanGaps : Number.POSITIVE_INFINITY;
      const directUpdate = this.chart._animationsDisabled || reset || mode === "none";
      let prevParsed = start2 > 0 && this.getParsed(start2 - 1);
      for (let i6 = start2; i6 < start2 + count2; ++i6) {
        const point5 = points[i6];
        const parsed = this.getParsed(i6);
        const properties = directUpdate ? point5 : {};
        const nullData = isNullOrUndef(parsed[vAxis]);
        const iPixel = properties[iAxis] = iScale.getPixelForValue(parsed[iAxis], i6);
        const vPixel = properties[vAxis] = reset || nullData ? vScale.getBasePixel() : vScale.getPixelForValue(_stacked ? this.applyStack(vScale, parsed, _stacked) : parsed[vAxis], i6);
        properties.skip = isNaN(iPixel) || isNaN(vPixel) || nullData;
        properties.stop = i6 > 0 && Math.abs(parsed[iAxis] - prevParsed[iAxis]) > maxGapLength;
        if (segment) {
          properties.parsed = parsed;
          properties.raw = _dataset.data[i6];
        }
        if (includeOptions) {
          properties.options = sharedOptions || this.resolveDataElementOptions(i6, point5.active ? "active" : mode);
        }
        if (!directUpdate) {
          this.updateElement(point5, i6, properties, mode);
        }
        prevParsed = parsed;
      }
      this.updateSharedOptions(sharedOptions, mode, firstOpts);
    }
    getMaxOverflow() {
      const meta = this._cachedMeta;
      const data = meta.data || [];
      if (!this.options.showLine) {
        let max = 0;
        for (let i6 = data.length - 1; i6 >= 0; --i6) {
          max = Math.max(max, data[i6].size(this.resolveDataElementOptions(i6)) / 2);
        }
        return max > 0 && max;
      }
      const dataset = meta.dataset;
      const border = dataset.options && dataset.options.borderWidth || 0;
      if (!data.length) {
        return border;
      }
      const firstPoint = data[0].size(this.resolveDataElementOptions(0));
      const lastPoint = data[data.length - 1].size(this.resolveDataElementOptions(data.length - 1));
      return Math.max(border, firstPoint, lastPoint) / 2;
    }
  };
  ScatterController.id = "scatter";
  ScatterController.defaults = {
    datasetElementType: false,
    dataElementType: "point",
    showLine: false,
    fill: false
  };
  ScatterController.overrides = {
    interaction: {
      mode: "point"
    },
    plugins: {
      tooltip: {
        callbacks: {
          title() {
            return "";
          },
          label(item) {
            return "(" + item.label + ", " + item.formattedValue + ")";
          }
        }
      }
    },
    scales: {
      x: {
        type: "linear"
      },
      y: {
        type: "linear"
      }
    }
  };
  function abstract() {
    throw new Error("This method is not implemented: Check that a complete date adapter is provided.");
  }
  var DateAdapter = class {
    constructor(options) {
      this.options = options || {};
    }
    init(chartOptions) {
    }
    formats() {
      return abstract();
    }
    parse(value, format2) {
      return abstract();
    }
    format(timestamp, format2) {
      return abstract();
    }
    add(timestamp, amount, unit2) {
      return abstract();
    }
    diff(a2, b3, unit2) {
      return abstract();
    }
    startOf(timestamp, unit2, weekday2) {
      return abstract();
    }
    endOf(timestamp, unit2) {
      return abstract();
    }
  };
  DateAdapter.override = function(members) {
    Object.assign(DateAdapter.prototype, members);
  };
  var adapters = {
    _date: DateAdapter
  };
  function binarySearch(metaset, axis, value, intersect) {
    const { controller, data, _sorted } = metaset;
    const iScale = controller._cachedMeta.iScale;
    if (iScale && axis === iScale.axis && axis !== "r" && _sorted && data.length) {
      const lookupMethod = iScale._reversePixels ? _rlookupByKey : _lookupByKey;
      if (!intersect) {
        return lookupMethod(data, axis, value);
      } else if (controller._sharedOptions) {
        const el = data[0];
        const range = typeof el.getRange === "function" && el.getRange(axis);
        if (range) {
          const start2 = lookupMethod(data, axis, value - range);
          const end = lookupMethod(data, axis, value + range);
          return { lo: start2.lo, hi: end.hi };
        }
      }
    }
    return { lo: 0, hi: data.length - 1 };
  }
  function evaluateInteractionItems(chart, axis, position, handler, intersect) {
    const metasets = chart.getSortedVisibleDatasetMetas();
    const value = position[axis];
    for (let i6 = 0, ilen = metasets.length; i6 < ilen; ++i6) {
      const { index, data } = metasets[i6];
      const { lo, hi } = binarySearch(metasets[i6], axis, value, intersect);
      for (let j3 = lo; j3 <= hi; ++j3) {
        const element = data[j3];
        if (!element.skip) {
          handler(element, index, j3);
        }
      }
    }
  }
  function getDistanceMetricForAxis(axis) {
    const useX = axis.indexOf("x") !== -1;
    const useY = axis.indexOf("y") !== -1;
    return function(pt1, pt2) {
      const deltaX = useX ? Math.abs(pt1.x - pt2.x) : 0;
      const deltaY = useY ? Math.abs(pt1.y - pt2.y) : 0;
      return Math.sqrt(Math.pow(deltaX, 2) + Math.pow(deltaY, 2));
    };
  }
  function getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible) {
    const items = [];
    if (!includeInvisible && !chart.isPointInArea(position)) {
      return items;
    }
    const evaluationFunc = function(element, datasetIndex, index) {
      if (!includeInvisible && !_isPointInArea(element, chart.chartArea, 0)) {
        return;
      }
      if (element.inRange(position.x, position.y, useFinalPosition)) {
        items.push({ element, datasetIndex, index });
      }
    };
    evaluateInteractionItems(chart, axis, position, evaluationFunc, true);
    return items;
  }
  function getNearestRadialItems(chart, position, axis, useFinalPosition) {
    let items = [];
    function evaluationFunc(element, datasetIndex, index) {
      const { startAngle, endAngle } = element.getProps(["startAngle", "endAngle"], useFinalPosition);
      const { angle } = getAngleFromPoint(element, { x: position.x, y: position.y });
      if (_angleBetween(angle, startAngle, endAngle)) {
        items.push({ element, datasetIndex, index });
      }
    }
    evaluateInteractionItems(chart, axis, position, evaluationFunc);
    return items;
  }
  function getNearestCartesianItems(chart, position, axis, intersect, useFinalPosition, includeInvisible) {
    let items = [];
    const distanceMetric = getDistanceMetricForAxis(axis);
    let minDistance = Number.POSITIVE_INFINITY;
    function evaluationFunc(element, datasetIndex, index) {
      const inRange2 = element.inRange(position.x, position.y, useFinalPosition);
      if (intersect && !inRange2) {
        return;
      }
      const center = element.getCenterPoint(useFinalPosition);
      const pointInArea = !!includeInvisible || chart.isPointInArea(center);
      if (!pointInArea && !inRange2) {
        return;
      }
      const distance = distanceMetric(position, center);
      if (distance < minDistance) {
        items = [{ element, datasetIndex, index }];
        minDistance = distance;
      } else if (distance === minDistance) {
        items.push({ element, datasetIndex, index });
      }
    }
    evaluateInteractionItems(chart, axis, position, evaluationFunc);
    return items;
  }
  function getNearestItems(chart, position, axis, intersect, useFinalPosition, includeInvisible) {
    if (!includeInvisible && !chart.isPointInArea(position)) {
      return [];
    }
    return axis === "r" && !intersect ? getNearestRadialItems(chart, position, axis, useFinalPosition) : getNearestCartesianItems(chart, position, axis, intersect, useFinalPosition, includeInvisible);
  }
  function getAxisItems(chart, position, axis, intersect, useFinalPosition) {
    const items = [];
    const rangeMethod = axis === "x" ? "inXRange" : "inYRange";
    let intersectsItem = false;
    evaluateInteractionItems(chart, axis, position, (element, datasetIndex, index) => {
      if (element[rangeMethod](position[axis], useFinalPosition)) {
        items.push({ element, datasetIndex, index });
        intersectsItem = intersectsItem || element.inRange(position.x, position.y, useFinalPosition);
      }
    });
    if (intersect && !intersectsItem) {
      return [];
    }
    return items;
  }
  var Interaction = {
    evaluateInteractionItems,
    modes: {
      index(chart, e7, options, useFinalPosition) {
        const position = getRelativePosition(e7, chart);
        const axis = options.axis || "x";
        const includeInvisible = options.includeInvisible || false;
        const items = options.intersect ? getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible) : getNearestItems(chart, position, axis, false, useFinalPosition, includeInvisible);
        const elements = [];
        if (!items.length) {
          return [];
        }
        chart.getSortedVisibleDatasetMetas().forEach((meta) => {
          const index = items[0].index;
          const element = meta.data[index];
          if (element && !element.skip) {
            elements.push({ element, datasetIndex: meta.index, index });
          }
        });
        return elements;
      },
      dataset(chart, e7, options, useFinalPosition) {
        const position = getRelativePosition(e7, chart);
        const axis = options.axis || "xy";
        const includeInvisible = options.includeInvisible || false;
        let items = options.intersect ? getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible) : getNearestItems(chart, position, axis, false, useFinalPosition, includeInvisible);
        if (items.length > 0) {
          const datasetIndex = items[0].datasetIndex;
          const data = chart.getDatasetMeta(datasetIndex).data;
          items = [];
          for (let i6 = 0; i6 < data.length; ++i6) {
            items.push({ element: data[i6], datasetIndex, index: i6 });
          }
        }
        return items;
      },
      point(chart, e7, options, useFinalPosition) {
        const position = getRelativePosition(e7, chart);
        const axis = options.axis || "xy";
        const includeInvisible = options.includeInvisible || false;
        return getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible);
      },
      nearest(chart, e7, options, useFinalPosition) {
        const position = getRelativePosition(e7, chart);
        const axis = options.axis || "xy";
        const includeInvisible = options.includeInvisible || false;
        return getNearestItems(chart, position, axis, options.intersect, useFinalPosition, includeInvisible);
      },
      x(chart, e7, options, useFinalPosition) {
        const position = getRelativePosition(e7, chart);
        return getAxisItems(chart, position, "x", options.intersect, useFinalPosition);
      },
      y(chart, e7, options, useFinalPosition) {
        const position = getRelativePosition(e7, chart);
        return getAxisItems(chart, position, "y", options.intersect, useFinalPosition);
      }
    }
  };
  var STATIC_POSITIONS = ["left", "top", "right", "bottom"];
  function filterByPosition(array, position) {
    return array.filter((v4) => v4.pos === position);
  }
  function filterDynamicPositionByAxis(array, axis) {
    return array.filter((v4) => STATIC_POSITIONS.indexOf(v4.pos) === -1 && v4.box.axis === axis);
  }
  function sortByWeight(array, reverse) {
    return array.sort((a2, b3) => {
      const v0 = reverse ? b3 : a2;
      const v1 = reverse ? a2 : b3;
      return v0.weight === v1.weight ? v0.index - v1.index : v0.weight - v1.weight;
    });
  }
  function wrapBoxes(boxes) {
    const layoutBoxes = [];
    let i6, ilen, box, pos, stack, stackWeight;
    for (i6 = 0, ilen = (boxes || []).length; i6 < ilen; ++i6) {
      box = boxes[i6];
      ({ position: pos, options: { stack, stackWeight = 1 } } = box);
      layoutBoxes.push({
        index: i6,
        box,
        pos,
        horizontal: box.isHorizontal(),
        weight: box.weight,
        stack: stack && pos + stack,
        stackWeight
      });
    }
    return layoutBoxes;
  }
  function buildStacks(layouts2) {
    const stacks = {};
    for (const wrap of layouts2) {
      const { stack, pos, stackWeight } = wrap;
      if (!stack || !STATIC_POSITIONS.includes(pos)) {
        continue;
      }
      const _stack = stacks[stack] || (stacks[stack] = { count: 0, placed: 0, weight: 0, size: 0 });
      _stack.count++;
      _stack.weight += stackWeight;
    }
    return stacks;
  }
  function setLayoutDims(layouts2, params) {
    const stacks = buildStacks(layouts2);
    const { vBoxMaxWidth, hBoxMaxHeight } = params;
    let i6, ilen, layout2;
    for (i6 = 0, ilen = layouts2.length; i6 < ilen; ++i6) {
      layout2 = layouts2[i6];
      const { fullSize } = layout2.box;
      const stack = stacks[layout2.stack];
      const factor = stack && layout2.stackWeight / stack.weight;
      if (layout2.horizontal) {
        layout2.width = factor ? factor * vBoxMaxWidth : fullSize && params.availableWidth;
        layout2.height = hBoxMaxHeight;
      } else {
        layout2.width = vBoxMaxWidth;
        layout2.height = factor ? factor * hBoxMaxHeight : fullSize && params.availableHeight;
      }
    }
    return stacks;
  }
  function buildLayoutBoxes(boxes) {
    const layoutBoxes = wrapBoxes(boxes);
    const fullSize = sortByWeight(layoutBoxes.filter((wrap) => wrap.box.fullSize), true);
    const left = sortByWeight(filterByPosition(layoutBoxes, "left"), true);
    const right = sortByWeight(filterByPosition(layoutBoxes, "right"));
    const top = sortByWeight(filterByPosition(layoutBoxes, "top"), true);
    const bottom = sortByWeight(filterByPosition(layoutBoxes, "bottom"));
    const centerHorizontal = filterDynamicPositionByAxis(layoutBoxes, "x");
    const centerVertical = filterDynamicPositionByAxis(layoutBoxes, "y");
    return {
      fullSize,
      leftAndTop: left.concat(top),
      rightAndBottom: right.concat(centerVertical).concat(bottom).concat(centerHorizontal),
      chartArea: filterByPosition(layoutBoxes, "chartArea"),
      vertical: left.concat(right).concat(centerVertical),
      horizontal: top.concat(bottom).concat(centerHorizontal)
    };
  }
  function getCombinedMax(maxPadding, chartArea, a2, b3) {
    return Math.max(maxPadding[a2], chartArea[a2]) + Math.max(maxPadding[b3], chartArea[b3]);
  }
  function updateMaxPadding(maxPadding, boxPadding) {
    maxPadding.top = Math.max(maxPadding.top, boxPadding.top);
    maxPadding.left = Math.max(maxPadding.left, boxPadding.left);
    maxPadding.bottom = Math.max(maxPadding.bottom, boxPadding.bottom);
    maxPadding.right = Math.max(maxPadding.right, boxPadding.right);
  }
  function updateDims(chartArea, params, layout2, stacks) {
    const { pos, box } = layout2;
    const maxPadding = chartArea.maxPadding;
    if (!isObject(pos)) {
      if (layout2.size) {
        chartArea[pos] -= layout2.size;
      }
      const stack = stacks[layout2.stack] || { size: 0, count: 1 };
      stack.size = Math.max(stack.size, layout2.horizontal ? box.height : box.width);
      layout2.size = stack.size / stack.count;
      chartArea[pos] += layout2.size;
    }
    if (box.getPadding) {
      updateMaxPadding(maxPadding, box.getPadding());
    }
    const newWidth = Math.max(0, params.outerWidth - getCombinedMax(maxPadding, chartArea, "left", "right"));
    const newHeight = Math.max(0, params.outerHeight - getCombinedMax(maxPadding, chartArea, "top", "bottom"));
    const widthChanged = newWidth !== chartArea.w;
    const heightChanged = newHeight !== chartArea.h;
    chartArea.w = newWidth;
    chartArea.h = newHeight;
    return layout2.horizontal ? { same: widthChanged, other: heightChanged } : { same: heightChanged, other: widthChanged };
  }
  function handleMaxPadding(chartArea) {
    const maxPadding = chartArea.maxPadding;
    function updatePos(pos) {
      const change = Math.max(maxPadding[pos] - chartArea[pos], 0);
      chartArea[pos] += change;
      return change;
    }
    chartArea.y += updatePos("top");
    chartArea.x += updatePos("left");
    updatePos("right");
    updatePos("bottom");
  }
  function getMargins(horizontal, chartArea) {
    const maxPadding = chartArea.maxPadding;
    function marginForPositions(positions2) {
      const margin = { left: 0, top: 0, right: 0, bottom: 0 };
      positions2.forEach((pos) => {
        margin[pos] = Math.max(chartArea[pos], maxPadding[pos]);
      });
      return margin;
    }
    return horizontal ? marginForPositions(["left", "right"]) : marginForPositions(["top", "bottom"]);
  }
  function fitBoxes(boxes, chartArea, params, stacks) {
    const refitBoxes = [];
    let i6, ilen, layout2, box, refit, changed;
    for (i6 = 0, ilen = boxes.length, refit = 0; i6 < ilen; ++i6) {
      layout2 = boxes[i6];
      box = layout2.box;
      box.update(
        layout2.width || chartArea.w,
        layout2.height || chartArea.h,
        getMargins(layout2.horizontal, chartArea)
      );
      const { same, other } = updateDims(chartArea, params, layout2, stacks);
      refit |= same && refitBoxes.length;
      changed = changed || other;
      if (!box.fullSize) {
        refitBoxes.push(layout2);
      }
    }
    return refit && fitBoxes(refitBoxes, chartArea, params, stacks) || changed;
  }
  function setBoxDims(box, left, top, width, height) {
    box.top = top;
    box.left = left;
    box.right = left + width;
    box.bottom = top + height;
    box.width = width;
    box.height = height;
  }
  function placeBoxes(boxes, chartArea, params, stacks) {
    const userPadding = params.padding;
    let { x: x3, y: y4 } = chartArea;
    for (const layout2 of boxes) {
      const box = layout2.box;
      const stack = stacks[layout2.stack] || { count: 1, placed: 0, weight: 1 };
      const weight = layout2.stackWeight / stack.weight || 1;
      if (layout2.horizontal) {
        const width = chartArea.w * weight;
        const height = stack.size || box.height;
        if (defined(stack.start)) {
          y4 = stack.start;
        }
        if (box.fullSize) {
          setBoxDims(box, userPadding.left, y4, params.outerWidth - userPadding.right - userPadding.left, height);
        } else {
          setBoxDims(box, chartArea.left + stack.placed, y4, width, height);
        }
        stack.start = y4;
        stack.placed += width;
        y4 = box.bottom;
      } else {
        const height = chartArea.h * weight;
        const width = stack.size || box.width;
        if (defined(stack.start)) {
          x3 = stack.start;
        }
        if (box.fullSize) {
          setBoxDims(box, x3, userPadding.top, width, params.outerHeight - userPadding.bottom - userPadding.top);
        } else {
          setBoxDims(box, x3, chartArea.top + stack.placed, width, height);
        }
        stack.start = x3;
        stack.placed += height;
        x3 = box.right;
      }
    }
    chartArea.x = x3;
    chartArea.y = y4;
  }
  defaults.set("layout", {
    autoPadding: true,
    padding: {
      top: 0,
      right: 0,
      bottom: 0,
      left: 0
    }
  });
  var layouts = {
    addBox(chart, item) {
      if (!chart.boxes) {
        chart.boxes = [];
      }
      item.fullSize = item.fullSize || false;
      item.position = item.position || "top";
      item.weight = item.weight || 0;
      item._layers = item._layers || function() {
        return [{
          z: 0,
          draw(chartArea) {
            item.draw(chartArea);
          }
        }];
      };
      chart.boxes.push(item);
    },
    removeBox(chart, layoutItem) {
      const index = chart.boxes ? chart.boxes.indexOf(layoutItem) : -1;
      if (index !== -1) {
        chart.boxes.splice(index, 1);
      }
    },
    configure(chart, item, options) {
      item.fullSize = options.fullSize;
      item.position = options.position;
      item.weight = options.weight;
    },
    update(chart, width, height, minPadding) {
      if (!chart) {
        return;
      }
      const padding = toPadding(chart.options.layout.padding);
      const availableWidth = Math.max(width - padding.width, 0);
      const availableHeight = Math.max(height - padding.height, 0);
      const boxes = buildLayoutBoxes(chart.boxes);
      const verticalBoxes = boxes.vertical;
      const horizontalBoxes = boxes.horizontal;
      each(chart.boxes, (box) => {
        if (typeof box.beforeLayout === "function") {
          box.beforeLayout();
        }
      });
      const visibleVerticalBoxCount = verticalBoxes.reduce((total, wrap) => wrap.box.options && wrap.box.options.display === false ? total : total + 1, 0) || 1;
      const params = Object.freeze({
        outerWidth: width,
        outerHeight: height,
        padding,
        availableWidth,
        availableHeight,
        vBoxMaxWidth: availableWidth / 2 / visibleVerticalBoxCount,
        hBoxMaxHeight: availableHeight / 2
      });
      const maxPadding = Object.assign({}, padding);
      updateMaxPadding(maxPadding, toPadding(minPadding));
      const chartArea = Object.assign({
        maxPadding,
        w: availableWidth,
        h: availableHeight,
        x: padding.left,
        y: padding.top
      }, padding);
      const stacks = setLayoutDims(verticalBoxes.concat(horizontalBoxes), params);
      fitBoxes(boxes.fullSize, chartArea, params, stacks);
      fitBoxes(verticalBoxes, chartArea, params, stacks);
      if (fitBoxes(horizontalBoxes, chartArea, params, stacks)) {
        fitBoxes(verticalBoxes, chartArea, params, stacks);
      }
      handleMaxPadding(chartArea);
      placeBoxes(boxes.leftAndTop, chartArea, params, stacks);
      chartArea.x += chartArea.w;
      chartArea.y += chartArea.h;
      placeBoxes(boxes.rightAndBottom, chartArea, params, stacks);
      chart.chartArea = {
        left: chartArea.left,
        top: chartArea.top,
        right: chartArea.left + chartArea.w,
        bottom: chartArea.top + chartArea.h,
        height: chartArea.h,
        width: chartArea.w
      };
      each(boxes.chartArea, (layout2) => {
        const box = layout2.box;
        Object.assign(box, chart.chartArea);
        box.update(chartArea.w, chartArea.h, { left: 0, top: 0, right: 0, bottom: 0 });
      });
    }
  };
  var BasePlatform = class {
    acquireContext(canvas, aspectRatio) {
    }
    releaseContext(context) {
      return false;
    }
    addEventListener(chart, type, listener) {
    }
    removeEventListener(chart, type, listener) {
    }
    getDevicePixelRatio() {
      return 1;
    }
    getMaximumSize(element, width, height, aspectRatio) {
      width = Math.max(0, width || element.width);
      height = height || element.height;
      return {
        width,
        height: Math.max(0, aspectRatio ? Math.floor(width / aspectRatio) : height)
      };
    }
    isAttached(canvas) {
      return true;
    }
    updateConfig(config2) {
    }
  };
  var BasicPlatform = class extends BasePlatform {
    acquireContext(item) {
      return item && item.getContext && item.getContext("2d") || null;
    }
    updateConfig(config2) {
      config2.options.animation = false;
    }
  };
  var EXPANDO_KEY = "$chartjs";
  var EVENT_TYPES = {
    touchstart: "mousedown",
    touchmove: "mousemove",
    touchend: "mouseup",
    pointerenter: "mouseenter",
    pointerdown: "mousedown",
    pointermove: "mousemove",
    pointerup: "mouseup",
    pointerleave: "mouseout",
    pointerout: "mouseout"
  };
  var isNullOrEmpty = (value) => value === null || value === "";
  function initCanvas(canvas, aspectRatio) {
    const style = canvas.style;
    const renderHeight = canvas.getAttribute("height");
    const renderWidth = canvas.getAttribute("width");
    canvas[EXPANDO_KEY] = {
      initial: {
        height: renderHeight,
        width: renderWidth,
        style: {
          display: style.display,
          height: style.height,
          width: style.width
        }
      }
    };
    style.display = style.display || "block";
    style.boxSizing = style.boxSizing || "border-box";
    if (isNullOrEmpty(renderWidth)) {
      const displayWidth = readUsedSize(canvas, "width");
      if (displayWidth !== void 0) {
        canvas.width = displayWidth;
      }
    }
    if (isNullOrEmpty(renderHeight)) {
      if (canvas.style.height === "") {
        canvas.height = canvas.width / (aspectRatio || 2);
      } else {
        const displayHeight = readUsedSize(canvas, "height");
        if (displayHeight !== void 0) {
          canvas.height = displayHeight;
        }
      }
    }
    return canvas;
  }
  var eventListenerOptions = supportsEventListenerOptions ? { passive: true } : false;
  function addListener(node, type, listener) {
    node.addEventListener(type, listener, eventListenerOptions);
  }
  function removeListener(chart, type, listener) {
    chart.canvas.removeEventListener(type, listener, eventListenerOptions);
  }
  function fromNativeEvent(event, chart) {
    const type = EVENT_TYPES[event.type] || event.type;
    const { x: x3, y: y4 } = getRelativePosition(event, chart);
    return {
      type,
      chart,
      native: event,
      x: x3 !== void 0 ? x3 : null,
      y: y4 !== void 0 ? y4 : null
    };
  }
  function nodeListContains(nodeList, canvas) {
    for (const node of nodeList) {
      if (node === canvas || node.contains(canvas)) {
        return true;
      }
    }
  }
  function createAttachObserver(chart, type, listener) {
    const canvas = chart.canvas;
    const observer = new MutationObserver((entries) => {
      let trigger = false;
      for (const entry of entries) {
        trigger = trigger || nodeListContains(entry.addedNodes, canvas);
        trigger = trigger && !nodeListContains(entry.removedNodes, canvas);
      }
      if (trigger) {
        listener();
      }
    });
    observer.observe(document, { childList: true, subtree: true });
    return observer;
  }
  function createDetachObserver(chart, type, listener) {
    const canvas = chart.canvas;
    const observer = new MutationObserver((entries) => {
      let trigger = false;
      for (const entry of entries) {
        trigger = trigger || nodeListContains(entry.removedNodes, canvas);
        trigger = trigger && !nodeListContains(entry.addedNodes, canvas);
      }
      if (trigger) {
        listener();
      }
    });
    observer.observe(document, { childList: true, subtree: true });
    return observer;
  }
  var drpListeningCharts = /* @__PURE__ */ new Map();
  var oldDevicePixelRatio = 0;
  function onWindowResize() {
    const dpr = window.devicePixelRatio;
    if (dpr === oldDevicePixelRatio) {
      return;
    }
    oldDevicePixelRatio = dpr;
    drpListeningCharts.forEach((resize, chart) => {
      if (chart.currentDevicePixelRatio !== dpr) {
        resize();
      }
    });
  }
  function listenDevicePixelRatioChanges(chart, resize) {
    if (!drpListeningCharts.size) {
      window.addEventListener("resize", onWindowResize);
    }
    drpListeningCharts.set(chart, resize);
  }
  function unlistenDevicePixelRatioChanges(chart) {
    drpListeningCharts.delete(chart);
    if (!drpListeningCharts.size) {
      window.removeEventListener("resize", onWindowResize);
    }
  }
  function createResizeObserver(chart, type, listener) {
    const canvas = chart.canvas;
    const container = canvas && _getParentNode(canvas);
    if (!container) {
      return;
    }
    const resize = throttled((width, height) => {
      const w3 = container.clientWidth;
      listener(width, height);
      if (w3 < container.clientWidth) {
        listener();
      }
    }, window);
    const observer = new ResizeObserver((entries) => {
      const entry = entries[0];
      const width = entry.contentRect.width;
      const height = entry.contentRect.height;
      if (width === 0 && height === 0) {
        return;
      }
      resize(width, height);
    });
    observer.observe(container);
    listenDevicePixelRatioChanges(chart, resize);
    return observer;
  }
  function releaseObserver(chart, type, observer) {
    if (observer) {
      observer.disconnect();
    }
    if (type === "resize") {
      unlistenDevicePixelRatioChanges(chart);
    }
  }
  function createProxyAndListen(chart, type, listener) {
    const canvas = chart.canvas;
    const proxy = throttled((event) => {
      if (chart.ctx !== null) {
        listener(fromNativeEvent(event, chart));
      }
    }, chart, (args) => {
      const event = args[0];
      return [event, event.offsetX, event.offsetY];
    });
    addListener(canvas, type, proxy);
    return proxy;
  }
  var DomPlatform = class extends BasePlatform {
    acquireContext(canvas, aspectRatio) {
      const context = canvas && canvas.getContext && canvas.getContext("2d");
      if (context && context.canvas === canvas) {
        initCanvas(canvas, aspectRatio);
        return context;
      }
      return null;
    }
    releaseContext(context) {
      const canvas = context.canvas;
      if (!canvas[EXPANDO_KEY]) {
        return false;
      }
      const initial = canvas[EXPANDO_KEY].initial;
      ["height", "width"].forEach((prop) => {
        const value = initial[prop];
        if (isNullOrUndef(value)) {
          canvas.removeAttribute(prop);
        } else {
          canvas.setAttribute(prop, value);
        }
      });
      const style = initial.style || {};
      Object.keys(style).forEach((key) => {
        canvas.style[key] = style[key];
      });
      canvas.width = canvas.width;
      delete canvas[EXPANDO_KEY];
      return true;
    }
    addEventListener(chart, type, listener) {
      this.removeEventListener(chart, type);
      const proxies = chart.$proxies || (chart.$proxies = {});
      const handlers = {
        attach: createAttachObserver,
        detach: createDetachObserver,
        resize: createResizeObserver
      };
      const handler = handlers[type] || createProxyAndListen;
      proxies[type] = handler(chart, type, listener);
    }
    removeEventListener(chart, type) {
      const proxies = chart.$proxies || (chart.$proxies = {});
      const proxy = proxies[type];
      if (!proxy) {
        return;
      }
      const handlers = {
        attach: releaseObserver,
        detach: releaseObserver,
        resize: releaseObserver
      };
      const handler = handlers[type] || removeListener;
      handler(chart, type, proxy);
      proxies[type] = void 0;
    }
    getDevicePixelRatio() {
      return window.devicePixelRatio;
    }
    getMaximumSize(canvas, width, height, aspectRatio) {
      return getMaximumSize(canvas, width, height, aspectRatio);
    }
    isAttached(canvas) {
      const container = _getParentNode(canvas);
      return !!(container && container.isConnected);
    }
  };
  function _detectPlatform(canvas) {
    if (!_isDomSupported() || typeof OffscreenCanvas !== "undefined" && canvas instanceof OffscreenCanvas) {
      return BasicPlatform;
    }
    return DomPlatform;
  }
  var PluginService = class {
    constructor() {
      this._init = [];
    }
    notify(chart, hook, args, filter) {
      if (hook === "beforeInit") {
        this._init = this._createDescriptors(chart, true);
        this._notify(this._init, chart, "install");
      }
      const descriptors2 = filter ? this._descriptors(chart).filter(filter) : this._descriptors(chart);
      const result = this._notify(descriptors2, chart, hook, args);
      if (hook === "afterDestroy") {
        this._notify(descriptors2, chart, "stop");
        this._notify(this._init, chart, "uninstall");
      }
      return result;
    }
    _notify(descriptors2, chart, hook, args) {
      args = args || {};
      for (const descriptor of descriptors2) {
        const plugin2 = descriptor.plugin;
        const method = plugin2[hook];
        const params = [chart, args, descriptor.options];
        if (callback(method, params, plugin2) === false && args.cancelable) {
          return false;
        }
      }
      return true;
    }
    invalidate() {
      if (!isNullOrUndef(this._cache)) {
        this._oldCache = this._cache;
        this._cache = void 0;
      }
    }
    _descriptors(chart) {
      if (this._cache) {
        return this._cache;
      }
      const descriptors2 = this._cache = this._createDescriptors(chart);
      this._notifyStateChanges(chart);
      return descriptors2;
    }
    _createDescriptors(chart, all) {
      const config2 = chart && chart.config;
      const options = valueOrDefault(config2.options && config2.options.plugins, {});
      const plugins = allPlugins(config2);
      return options === false && !all ? [] : createDescriptors(chart, plugins, options, all);
    }
    _notifyStateChanges(chart) {
      const previousDescriptors = this._oldCache || [];
      const descriptors2 = this._cache;
      const diff = (a2, b3) => a2.filter((x3) => !b3.some((y4) => x3.plugin.id === y4.plugin.id));
      this._notify(diff(previousDescriptors, descriptors2), chart, "stop");
      this._notify(diff(descriptors2, previousDescriptors), chart, "start");
    }
  };
  function allPlugins(config2) {
    const localIds = {};
    const plugins = [];
    const keys = Object.keys(registry.plugins.items);
    for (let i6 = 0; i6 < keys.length; i6++) {
      plugins.push(registry.getPlugin(keys[i6]));
    }
    const local = config2.plugins || [];
    for (let i6 = 0; i6 < local.length; i6++) {
      const plugin2 = local[i6];
      if (plugins.indexOf(plugin2) === -1) {
        plugins.push(plugin2);
        localIds[plugin2.id] = true;
      }
    }
    return { plugins, localIds };
  }
  function getOpts(options, all) {
    if (!all && options === false) {
      return null;
    }
    if (options === true) {
      return {};
    }
    return options;
  }
  function createDescriptors(chart, { plugins, localIds }, options, all) {
    const result = [];
    const context = chart.getContext();
    for (const plugin2 of plugins) {
      const id = plugin2.id;
      const opts = getOpts(options[id], all);
      if (opts === null) {
        continue;
      }
      result.push({
        plugin: plugin2,
        options: pluginOpts(chart.config, { plugin: plugin2, local: localIds[id] }, opts, context)
      });
    }
    return result;
  }
  function pluginOpts(config2, { plugin: plugin2, local }, opts, context) {
    const keys = config2.pluginScopeKeys(plugin2);
    const scopes = config2.getOptionScopes(opts, keys);
    if (local && plugin2.defaults) {
      scopes.push(plugin2.defaults);
    }
    return config2.createResolver(scopes, context, [""], {
      scriptable: false,
      indexable: false,
      allKeys: true
    });
  }
  function getIndexAxis(type, options) {
    const datasetDefaults = defaults.datasets[type] || {};
    const datasetOptions = (options.datasets || {})[type] || {};
    return datasetOptions.indexAxis || options.indexAxis || datasetDefaults.indexAxis || "x";
  }
  function getAxisFromDefaultScaleID(id, indexAxis) {
    let axis = id;
    if (id === "_index_") {
      axis = indexAxis;
    } else if (id === "_value_") {
      axis = indexAxis === "x" ? "y" : "x";
    }
    return axis;
  }
  function getDefaultScaleIDFromAxis(axis, indexAxis) {
    return axis === indexAxis ? "_index_" : "_value_";
  }
  function axisFromPosition(position) {
    if (position === "top" || position === "bottom") {
      return "x";
    }
    if (position === "left" || position === "right") {
      return "y";
    }
  }
  function determineAxis(id, scaleOptions) {
    if (id === "x" || id === "y") {
      return id;
    }
    return scaleOptions.axis || axisFromPosition(scaleOptions.position) || id.charAt(0).toLowerCase();
  }
  function mergeScaleConfig(config2, options) {
    const chartDefaults = overrides[config2.type] || { scales: {} };
    const configScales = options.scales || {};
    const chartIndexAxis = getIndexAxis(config2.type, options);
    const firstIDs = /* @__PURE__ */ Object.create(null);
    const scales = /* @__PURE__ */ Object.create(null);
    Object.keys(configScales).forEach((id) => {
      const scaleConf = configScales[id];
      if (!isObject(scaleConf)) {
        return console.error(`Invalid scale configuration for scale: ${id}`);
      }
      if (scaleConf._proxy) {
        return console.warn(`Ignoring resolver passed as options for scale: ${id}`);
      }
      const axis = determineAxis(id, scaleConf);
      const defaultId = getDefaultScaleIDFromAxis(axis, chartIndexAxis);
      const defaultScaleOptions = chartDefaults.scales || {};
      firstIDs[axis] = firstIDs[axis] || id;
      scales[id] = mergeIf(/* @__PURE__ */ Object.create(null), [{ axis }, scaleConf, defaultScaleOptions[axis], defaultScaleOptions[defaultId]]);
    });
    config2.data.datasets.forEach((dataset) => {
      const type = dataset.type || config2.type;
      const indexAxis = dataset.indexAxis || getIndexAxis(type, options);
      const datasetDefaults = overrides[type] || {};
      const defaultScaleOptions = datasetDefaults.scales || {};
      Object.keys(defaultScaleOptions).forEach((defaultID) => {
        const axis = getAxisFromDefaultScaleID(defaultID, indexAxis);
        const id = dataset[axis + "AxisID"] || firstIDs[axis] || axis;
        scales[id] = scales[id] || /* @__PURE__ */ Object.create(null);
        mergeIf(scales[id], [{ axis }, configScales[id], defaultScaleOptions[defaultID]]);
      });
    });
    Object.keys(scales).forEach((key) => {
      const scale2 = scales[key];
      mergeIf(scale2, [defaults.scales[scale2.type], defaults.scale]);
    });
    return scales;
  }
  function initOptions(config2) {
    const options = config2.options || (config2.options = {});
    options.plugins = valueOrDefault(options.plugins, {});
    options.scales = mergeScaleConfig(config2, options);
  }
  function initData(data) {
    data = data || {};
    data.datasets = data.datasets || [];
    data.labels = data.labels || [];
    return data;
  }
  function initConfig(config2) {
    config2 = config2 || {};
    config2.data = initData(config2.data);
    initOptions(config2);
    return config2;
  }
  var keyCache = /* @__PURE__ */ new Map();
  var keysCached = /* @__PURE__ */ new Set();
  function cachedKeys(cacheKey2, generate) {
    let keys = keyCache.get(cacheKey2);
    if (!keys) {
      keys = generate();
      keyCache.set(cacheKey2, keys);
      keysCached.add(keys);
    }
    return keys;
  }
  var addIfFound = (set2, obj, key) => {
    const opts = resolveObjectKey(obj, key);
    if (opts !== void 0) {
      set2.add(opts);
    }
  };
  var Config = class {
    constructor(config2) {
      this._config = initConfig(config2);
      this._scopeCache = /* @__PURE__ */ new Map();
      this._resolverCache = /* @__PURE__ */ new Map();
    }
    get platform() {
      return this._config.platform;
    }
    get type() {
      return this._config.type;
    }
    set type(type) {
      this._config.type = type;
    }
    get data() {
      return this._config.data;
    }
    set data(data) {
      this._config.data = initData(data);
    }
    get options() {
      return this._config.options;
    }
    set options(options) {
      this._config.options = options;
    }
    get plugins() {
      return this._config.plugins;
    }
    update() {
      const config2 = this._config;
      this.clearCache();
      initOptions(config2);
    }
    clearCache() {
      this._scopeCache.clear();
      this._resolverCache.clear();
    }
    datasetScopeKeys(datasetType) {
      return cachedKeys(
        datasetType,
        () => [[
          `datasets.${datasetType}`,
          ""
        ]]
      );
    }
    datasetAnimationScopeKeys(datasetType, transition) {
      return cachedKeys(
        `${datasetType}.transition.${transition}`,
        () => [
          [
            `datasets.${datasetType}.transitions.${transition}`,
            `transitions.${transition}`
          ],
          [
            `datasets.${datasetType}`,
            ""
          ]
        ]
      );
    }
    datasetElementScopeKeys(datasetType, elementType) {
      return cachedKeys(
        `${datasetType}-${elementType}`,
        () => [[
          `datasets.${datasetType}.elements.${elementType}`,
          `datasets.${datasetType}`,
          `elements.${elementType}`,
          ""
        ]]
      );
    }
    pluginScopeKeys(plugin2) {
      const id = plugin2.id;
      const type = this.type;
      return cachedKeys(
        `${type}-plugin-${id}`,
        () => [[
          `plugins.${id}`,
          ...plugin2.additionalOptionScopes || []
        ]]
      );
    }
    _cachedScopes(mainScope, resetCache) {
      const _scopeCache = this._scopeCache;
      let cache = _scopeCache.get(mainScope);
      if (!cache || resetCache) {
        cache = /* @__PURE__ */ new Map();
        _scopeCache.set(mainScope, cache);
      }
      return cache;
    }
    getOptionScopes(mainScope, keyLists, resetCache) {
      const { options, type } = this;
      const cache = this._cachedScopes(mainScope, resetCache);
      const cached = cache.get(keyLists);
      if (cached) {
        return cached;
      }
      const scopes = /* @__PURE__ */ new Set();
      keyLists.forEach((keys) => {
        if (mainScope) {
          scopes.add(mainScope);
          keys.forEach((key) => addIfFound(scopes, mainScope, key));
        }
        keys.forEach((key) => addIfFound(scopes, options, key));
        keys.forEach((key) => addIfFound(scopes, overrides[type] || {}, key));
        keys.forEach((key) => addIfFound(scopes, defaults, key));
        keys.forEach((key) => addIfFound(scopes, descriptors, key));
      });
      const array = Array.from(scopes);
      if (array.length === 0) {
        array.push(/* @__PURE__ */ Object.create(null));
      }
      if (keysCached.has(keyLists)) {
        cache.set(keyLists, array);
      }
      return array;
    }
    chartOptionScopes() {
      const { options, type } = this;
      return [
        options,
        overrides[type] || {},
        defaults.datasets[type] || {},
        { type },
        defaults,
        descriptors
      ];
    }
    resolveNamedOptions(scopes, names2, context, prefixes6 = [""]) {
      const result = { $shared: true };
      const { resolver, subPrefixes } = getResolver(this._resolverCache, scopes, prefixes6);
      let options = resolver;
      if (needContext(resolver, names2)) {
        result.$shared = false;
        context = isFunction(context) ? context() : context;
        const subResolver = this.createResolver(scopes, context, subPrefixes);
        options = _attachContext(resolver, context, subResolver);
      }
      for (const prop of names2) {
        result[prop] = options[prop];
      }
      return result;
    }
    createResolver(scopes, context, prefixes6 = [""], descriptorDefaults) {
      const { resolver } = getResolver(this._resolverCache, scopes, prefixes6);
      return isObject(context) ? _attachContext(resolver, context, void 0, descriptorDefaults) : resolver;
    }
  };
  function getResolver(resolverCache, scopes, prefixes6) {
    let cache = resolverCache.get(scopes);
    if (!cache) {
      cache = /* @__PURE__ */ new Map();
      resolverCache.set(scopes, cache);
    }
    const cacheKey2 = prefixes6.join();
    let cached = cache.get(cacheKey2);
    if (!cached) {
      const resolver = _createResolver(scopes, prefixes6);
      cached = {
        resolver,
        subPrefixes: prefixes6.filter((p2) => !p2.toLowerCase().includes("hover"))
      };
      cache.set(cacheKey2, cached);
    }
    return cached;
  }
  var hasFunction = (value) => isObject(value) && Object.getOwnPropertyNames(value).reduce((acc, key) => acc || isFunction(value[key]), false);
  function needContext(proxy, names2) {
    const { isScriptable, isIndexable } = _descriptors(proxy);
    for (const prop of names2) {
      const scriptable = isScriptable(prop);
      const indexable = isIndexable(prop);
      const value = (indexable || scriptable) && proxy[prop];
      if (scriptable && (isFunction(value) || hasFunction(value)) || indexable && isArray(value)) {
        return true;
      }
    }
    return false;
  }
  var version = "3.9.1";
  var KNOWN_POSITIONS = ["top", "bottom", "left", "right", "chartArea"];
  function positionIsHorizontal(position, axis) {
    return position === "top" || position === "bottom" || KNOWN_POSITIONS.indexOf(position) === -1 && axis === "x";
  }
  function compare2Level(l1, l22) {
    return function(a2, b3) {
      return a2[l1] === b3[l1] ? a2[l22] - b3[l22] : a2[l1] - b3[l1];
    };
  }
  function onAnimationsComplete(context) {
    const chart = context.chart;
    const animationOptions2 = chart.options.animation;
    chart.notifyPlugins("afterRender");
    callback(animationOptions2 && animationOptions2.onComplete, [context], chart);
  }
  function onAnimationProgress(context) {
    const chart = context.chart;
    const animationOptions2 = chart.options.animation;
    callback(animationOptions2 && animationOptions2.onProgress, [context], chart);
  }
  function getCanvas(item) {
    if (_isDomSupported() && typeof item === "string") {
      item = document.getElementById(item);
    } else if (item && item.length) {
      item = item[0];
    }
    if (item && item.canvas) {
      item = item.canvas;
    }
    return item;
  }
  var instances = {};
  var getChart = (key) => {
    const canvas = getCanvas(key);
    return Object.values(instances).filter((c8) => c8.canvas === canvas).pop();
  };
  function moveNumericKeys(obj, start2, move) {
    const keys = Object.keys(obj);
    for (const key of keys) {
      const intKey = +key;
      if (intKey >= start2) {
        const value = obj[key];
        delete obj[key];
        if (move > 0 || intKey > start2) {
          obj[intKey + move] = value;
        }
      }
    }
  }
  function determineLastEvent(e7, lastEvent, inChartArea, isClick) {
    if (!inChartArea || e7.type === "mouseout") {
      return null;
    }
    if (isClick) {
      return lastEvent;
    }
    return e7;
  }
  var Chart = class {
    constructor(item, userConfig) {
      const config2 = this.config = new Config(userConfig);
      const initialCanvas = getCanvas(item);
      const existingChart = getChart(initialCanvas);
      if (existingChart) {
        throw new Error(
          "Canvas is already in use. Chart with ID '" + existingChart.id + "' must be destroyed before the canvas with ID '" + existingChart.canvas.id + "' can be reused."
        );
      }
      const options = config2.createResolver(config2.chartOptionScopes(), this.getContext());
      this.platform = new (config2.platform || _detectPlatform(initialCanvas))();
      this.platform.updateConfig(config2);
      const context = this.platform.acquireContext(initialCanvas, options.aspectRatio);
      const canvas = context && context.canvas;
      const height = canvas && canvas.height;
      const width = canvas && canvas.width;
      this.id = uid();
      this.ctx = context;
      this.canvas = canvas;
      this.width = width;
      this.height = height;
      this._options = options;
      this._aspectRatio = this.aspectRatio;
      this._layers = [];
      this._metasets = [];
      this._stacks = void 0;
      this.boxes = [];
      this.currentDevicePixelRatio = void 0;
      this.chartArea = void 0;
      this._active = [];
      this._lastEvent = void 0;
      this._listeners = {};
      this._responsiveListeners = void 0;
      this._sortedMetasets = [];
      this.scales = {};
      this._plugins = new PluginService();
      this.$proxies = {};
      this._hiddenIndices = {};
      this.attached = false;
      this._animationsDisabled = void 0;
      this.$context = void 0;
      this._doResize = debounce((mode) => this.update(mode), options.resizeDelay || 0);
      this._dataChanges = [];
      instances[this.id] = this;
      if (!context || !canvas) {
        console.error("Failed to create chart: can't acquire context from the given item");
        return;
      }
      animator.listen(this, "complete", onAnimationsComplete);
      animator.listen(this, "progress", onAnimationProgress);
      this._initialize();
      if (this.attached) {
        this.update();
      }
    }
    get aspectRatio() {
      const { options: { aspectRatio, maintainAspectRatio }, width, height, _aspectRatio } = this;
      if (!isNullOrUndef(aspectRatio)) {
        return aspectRatio;
      }
      if (maintainAspectRatio && _aspectRatio) {
        return _aspectRatio;
      }
      return height ? width / height : null;
    }
    get data() {
      return this.config.data;
    }
    set data(data) {
      this.config.data = data;
    }
    get options() {
      return this._options;
    }
    set options(options) {
      this.config.options = options;
    }
    _initialize() {
      this.notifyPlugins("beforeInit");
      if (this.options.responsive) {
        this.resize();
      } else {
        retinaScale(this, this.options.devicePixelRatio);
      }
      this.bindEvents();
      this.notifyPlugins("afterInit");
      return this;
    }
    clear() {
      clearCanvas(this.canvas, this.ctx);
      return this;
    }
    stop() {
      animator.stop(this);
      return this;
    }
    resize(width, height) {
      if (!animator.running(this)) {
        this._resize(width, height);
      } else {
        this._resizeBeforeDraw = { width, height };
      }
    }
    _resize(width, height) {
      const options = this.options;
      const canvas = this.canvas;
      const aspectRatio = options.maintainAspectRatio && this.aspectRatio;
      const newSize = this.platform.getMaximumSize(canvas, width, height, aspectRatio);
      const newRatio = options.devicePixelRatio || this.platform.getDevicePixelRatio();
      const mode = this.width ? "resize" : "attach";
      this.width = newSize.width;
      this.height = newSize.height;
      this._aspectRatio = this.aspectRatio;
      if (!retinaScale(this, newRatio, true)) {
        return;
      }
      this.notifyPlugins("resize", { size: newSize });
      callback(options.onResize, [this, newSize], this);
      if (this.attached) {
        if (this._doResize(mode)) {
          this.render();
        }
      }
    }
    ensureScalesHaveIDs() {
      const options = this.options;
      const scalesOptions = options.scales || {};
      each(scalesOptions, (axisOptions, axisID) => {
        axisOptions.id = axisID;
      });
    }
    buildOrUpdateScales() {
      const options = this.options;
      const scaleOpts = options.scales;
      const scales = this.scales;
      const updated = Object.keys(scales).reduce((obj, id) => {
        obj[id] = false;
        return obj;
      }, {});
      let items = [];
      if (scaleOpts) {
        items = items.concat(
          Object.keys(scaleOpts).map((id) => {
            const scaleOptions = scaleOpts[id];
            const axis = determineAxis(id, scaleOptions);
            const isRadial = axis === "r";
            const isHorizontal = axis === "x";
            return {
              options: scaleOptions,
              dposition: isRadial ? "chartArea" : isHorizontal ? "bottom" : "left",
              dtype: isRadial ? "radialLinear" : isHorizontal ? "category" : "linear"
            };
          })
        );
      }
      each(items, (item) => {
        const scaleOptions = item.options;
        const id = scaleOptions.id;
        const axis = determineAxis(id, scaleOptions);
        const scaleType = valueOrDefault(scaleOptions.type, item.dtype);
        if (scaleOptions.position === void 0 || positionIsHorizontal(scaleOptions.position, axis) !== positionIsHorizontal(item.dposition)) {
          scaleOptions.position = item.dposition;
        }
        updated[id] = true;
        let scale2 = null;
        if (id in scales && scales[id].type === scaleType) {
          scale2 = scales[id];
        } else {
          const scaleClass = registry.getScale(scaleType);
          scale2 = new scaleClass({
            id,
            type: scaleType,
            ctx: this.ctx,
            chart: this
          });
          scales[scale2.id] = scale2;
        }
        scale2.init(scaleOptions, options);
      });
      each(updated, (hasUpdated, id) => {
        if (!hasUpdated) {
          delete scales[id];
        }
      });
      each(scales, (scale2) => {
        layouts.configure(this, scale2, scale2.options);
        layouts.addBox(this, scale2);
      });
    }
    _updateMetasets() {
      const metasets = this._metasets;
      const numData = this.data.datasets.length;
      const numMeta = metasets.length;
      metasets.sort((a2, b3) => a2.index - b3.index);
      if (numMeta > numData) {
        for (let i6 = numData; i6 < numMeta; ++i6) {
          this._destroyDatasetMeta(i6);
        }
        metasets.splice(numData, numMeta - numData);
      }
      this._sortedMetasets = metasets.slice(0).sort(compare2Level("order", "index"));
    }
    _removeUnreferencedMetasets() {
      const { _metasets: metasets, data: { datasets } } = this;
      if (metasets.length > datasets.length) {
        delete this._stacks;
      }
      metasets.forEach((meta, index) => {
        if (datasets.filter((x3) => x3 === meta._dataset).length === 0) {
          this._destroyDatasetMeta(index);
        }
      });
    }
    buildOrUpdateControllers() {
      const newControllers = [];
      const datasets = this.data.datasets;
      let i6, ilen;
      this._removeUnreferencedMetasets();
      for (i6 = 0, ilen = datasets.length; i6 < ilen; i6++) {
        const dataset = datasets[i6];
        let meta = this.getDatasetMeta(i6);
        const type = dataset.type || this.config.type;
        if (meta.type && meta.type !== type) {
          this._destroyDatasetMeta(i6);
          meta = this.getDatasetMeta(i6);
        }
        meta.type = type;
        meta.indexAxis = dataset.indexAxis || getIndexAxis(type, this.options);
        meta.order = dataset.order || 0;
        meta.index = i6;
        meta.label = "" + dataset.label;
        meta.visible = this.isDatasetVisible(i6);
        if (meta.controller) {
          meta.controller.updateIndex(i6);
          meta.controller.linkScales();
        } else {
          const ControllerClass = registry.getController(type);
          const { datasetElementType, dataElementType } = defaults.datasets[type];
          Object.assign(ControllerClass.prototype, {
            dataElementType: registry.getElement(dataElementType),
            datasetElementType: datasetElementType && registry.getElement(datasetElementType)
          });
          meta.controller = new ControllerClass(this, i6);
          newControllers.push(meta.controller);
        }
      }
      this._updateMetasets();
      return newControllers;
    }
    _resetElements() {
      each(this.data.datasets, (dataset, datasetIndex) => {
        this.getDatasetMeta(datasetIndex).controller.reset();
      }, this);
    }
    reset() {
      this._resetElements();
      this.notifyPlugins("reset");
    }
    update(mode) {
      const config2 = this.config;
      config2.update();
      const options = this._options = config2.createResolver(config2.chartOptionScopes(), this.getContext());
      const animsDisabled = this._animationsDisabled = !options.animation;
      this._updateScales();
      this._checkEventBindings();
      this._updateHiddenIndices();
      this._plugins.invalidate();
      if (this.notifyPlugins("beforeUpdate", { mode, cancelable: true }) === false) {
        return;
      }
      const newControllers = this.buildOrUpdateControllers();
      this.notifyPlugins("beforeElementsUpdate");
      let minPadding = 0;
      for (let i6 = 0, ilen = this.data.datasets.length; i6 < ilen; i6++) {
        const { controller } = this.getDatasetMeta(i6);
        const reset = !animsDisabled && newControllers.indexOf(controller) === -1;
        controller.buildOrUpdateElements(reset);
        minPadding = Math.max(+controller.getMaxOverflow(), minPadding);
      }
      minPadding = this._minPadding = options.layout.autoPadding ? minPadding : 0;
      this._updateLayout(minPadding);
      if (!animsDisabled) {
        each(newControllers, (controller) => {
          controller.reset();
        });
      }
      this._updateDatasets(mode);
      this.notifyPlugins("afterUpdate", { mode });
      this._layers.sort(compare2Level("z", "_idx"));
      const { _active, _lastEvent } = this;
      if (_lastEvent) {
        this._eventHandler(_lastEvent, true);
      } else if (_active.length) {
        this._updateHoverStyles(_active, _active, true);
      }
      this.render();
    }
    _updateScales() {
      each(this.scales, (scale2) => {
        layouts.removeBox(this, scale2);
      });
      this.ensureScalesHaveIDs();
      this.buildOrUpdateScales();
    }
    _checkEventBindings() {
      const options = this.options;
      const existingEvents = new Set(Object.keys(this._listeners));
      const newEvents = new Set(options.events);
      if (!setsEqual(existingEvents, newEvents) || !!this._responsiveListeners !== options.responsive) {
        this.unbindEvents();
        this.bindEvents();
      }
    }
    _updateHiddenIndices() {
      const { _hiddenIndices } = this;
      const changes = this._getUniformDataChanges() || [];
      for (const { method, start: start2, count: count2 } of changes) {
        const move = method === "_removeElements" ? -count2 : count2;
        moveNumericKeys(_hiddenIndices, start2, move);
      }
    }
    _getUniformDataChanges() {
      const _dataChanges = this._dataChanges;
      if (!_dataChanges || !_dataChanges.length) {
        return;
      }
      this._dataChanges = [];
      const datasetCount = this.data.datasets.length;
      const makeSet = (idx) => new Set(
        _dataChanges.filter((c8) => c8[0] === idx).map((c8, i6) => i6 + "," + c8.splice(1).join(","))
      );
      const changeSet = makeSet(0);
      for (let i6 = 1; i6 < datasetCount; i6++) {
        if (!setsEqual(changeSet, makeSet(i6))) {
          return;
        }
      }
      return Array.from(changeSet).map((c8) => c8.split(",")).map((a2) => ({ method: a2[1], start: +a2[2], count: +a2[3] }));
    }
    _updateLayout(minPadding) {
      if (this.notifyPlugins("beforeLayout", { cancelable: true }) === false) {
        return;
      }
      layouts.update(this, this.width, this.height, minPadding);
      const area = this.chartArea;
      const noArea = area.width <= 0 || area.height <= 0;
      this._layers = [];
      each(this.boxes, (box) => {
        if (noArea && box.position === "chartArea") {
          return;
        }
        if (box.configure) {
          box.configure();
        }
        this._layers.push(...box._layers());
      }, this);
      this._layers.forEach((item, index) => {
        item._idx = index;
      });
      this.notifyPlugins("afterLayout");
    }
    _updateDatasets(mode) {
      if (this.notifyPlugins("beforeDatasetsUpdate", { mode, cancelable: true }) === false) {
        return;
      }
      for (let i6 = 0, ilen = this.data.datasets.length; i6 < ilen; ++i6) {
        this.getDatasetMeta(i6).controller.configure();
      }
      for (let i6 = 0, ilen = this.data.datasets.length; i6 < ilen; ++i6) {
        this._updateDataset(i6, isFunction(mode) ? mode({ datasetIndex: i6 }) : mode);
      }
      this.notifyPlugins("afterDatasetsUpdate", { mode });
    }
    _updateDataset(index, mode) {
      const meta = this.getDatasetMeta(index);
      const args = { meta, index, mode, cancelable: true };
      if (this.notifyPlugins("beforeDatasetUpdate", args) === false) {
        return;
      }
      meta.controller._update(mode);
      args.cancelable = false;
      this.notifyPlugins("afterDatasetUpdate", args);
    }
    render() {
      if (this.notifyPlugins("beforeRender", { cancelable: true }) === false) {
        return;
      }
      if (animator.has(this)) {
        if (this.attached && !animator.running(this)) {
          animator.start(this);
        }
      } else {
        this.draw();
        onAnimationsComplete({ chart: this });
      }
    }
    draw() {
      let i6;
      if (this._resizeBeforeDraw) {
        const { width, height } = this._resizeBeforeDraw;
        this._resize(width, height);
        this._resizeBeforeDraw = null;
      }
      this.clear();
      if (this.width <= 0 || this.height <= 0) {
        return;
      }
      if (this.notifyPlugins("beforeDraw", { cancelable: true }) === false) {
        return;
      }
      const layers = this._layers;
      for (i6 = 0; i6 < layers.length && layers[i6].z <= 0; ++i6) {
        layers[i6].draw(this.chartArea);
      }
      this._drawDatasets();
      for (; i6 < layers.length; ++i6) {
        layers[i6].draw(this.chartArea);
      }
      this.notifyPlugins("afterDraw");
    }
    _getSortedDatasetMetas(filterVisible) {
      const metasets = this._sortedMetasets;
      const result = [];
      let i6, ilen;
      for (i6 = 0, ilen = metasets.length; i6 < ilen; ++i6) {
        const meta = metasets[i6];
        if (!filterVisible || meta.visible) {
          result.push(meta);
        }
      }
      return result;
    }
    getSortedVisibleDatasetMetas() {
      return this._getSortedDatasetMetas(true);
    }
    _drawDatasets() {
      if (this.notifyPlugins("beforeDatasetsDraw", { cancelable: true }) === false) {
        return;
      }
      const metasets = this.getSortedVisibleDatasetMetas();
      for (let i6 = metasets.length - 1; i6 >= 0; --i6) {
        this._drawDataset(metasets[i6]);
      }
      this.notifyPlugins("afterDatasetsDraw");
    }
    _drawDataset(meta) {
      const ctx2 = this.ctx;
      const clip = meta._clip;
      const useClip = !clip.disabled;
      const area = this.chartArea;
      const args = {
        meta,
        index: meta.index,
        cancelable: true
      };
      if (this.notifyPlugins("beforeDatasetDraw", args) === false) {
        return;
      }
      if (useClip) {
        clipArea(ctx2, {
          left: clip.left === false ? 0 : area.left - clip.left,
          right: clip.right === false ? this.width : area.right + clip.right,
          top: clip.top === false ? 0 : area.top - clip.top,
          bottom: clip.bottom === false ? this.height : area.bottom + clip.bottom
        });
      }
      meta.controller.draw();
      if (useClip) {
        unclipArea(ctx2);
      }
      args.cancelable = false;
      this.notifyPlugins("afterDatasetDraw", args);
    }
    isPointInArea(point5) {
      return _isPointInArea(point5, this.chartArea, this._minPadding);
    }
    getElementsAtEventForMode(e7, mode, options, useFinalPosition) {
      const method = Interaction.modes[mode];
      if (typeof method === "function") {
        return method(this, e7, options, useFinalPosition);
      }
      return [];
    }
    getDatasetMeta(datasetIndex) {
      const dataset = this.data.datasets[datasetIndex];
      const metasets = this._metasets;
      let meta = metasets.filter((x3) => x3 && x3._dataset === dataset).pop();
      if (!meta) {
        meta = {
          type: null,
          data: [],
          dataset: null,
          controller: null,
          hidden: null,
          xAxisID: null,
          yAxisID: null,
          order: dataset && dataset.order || 0,
          index: datasetIndex,
          _dataset: dataset,
          _parsed: [],
          _sorted: false
        };
        metasets.push(meta);
      }
      return meta;
    }
    getContext() {
      return this.$context || (this.$context = createContext(null, { chart: this, type: "chart" }));
    }
    getVisibleDatasetCount() {
      return this.getSortedVisibleDatasetMetas().length;
    }
    isDatasetVisible(datasetIndex) {
      const dataset = this.data.datasets[datasetIndex];
      if (!dataset) {
        return false;
      }
      const meta = this.getDatasetMeta(datasetIndex);
      return typeof meta.hidden === "boolean" ? !meta.hidden : !dataset.hidden;
    }
    setDatasetVisibility(datasetIndex, visible) {
      const meta = this.getDatasetMeta(datasetIndex);
      meta.hidden = !visible;
    }
    toggleDataVisibility(index) {
      this._hiddenIndices[index] = !this._hiddenIndices[index];
    }
    getDataVisibility(index) {
      return !this._hiddenIndices[index];
    }
    _updateVisibility(datasetIndex, dataIndex, visible) {
      const mode = visible ? "show" : "hide";
      const meta = this.getDatasetMeta(datasetIndex);
      const anims = meta.controller._resolveAnimations(void 0, mode);
      if (defined(dataIndex)) {
        meta.data[dataIndex].hidden = !visible;
        this.update();
      } else {
        this.setDatasetVisibility(datasetIndex, visible);
        anims.update(meta, { visible });
        this.update((ctx2) => ctx2.datasetIndex === datasetIndex ? mode : void 0);
      }
    }
    hide(datasetIndex, dataIndex) {
      this._updateVisibility(datasetIndex, dataIndex, false);
    }
    show(datasetIndex, dataIndex) {
      this._updateVisibility(datasetIndex, dataIndex, true);
    }
    _destroyDatasetMeta(datasetIndex) {
      const meta = this._metasets[datasetIndex];
      if (meta && meta.controller) {
        meta.controller._destroy();
      }
      delete this._metasets[datasetIndex];
    }
    _stop() {
      let i6, ilen;
      this.stop();
      animator.remove(this);
      for (i6 = 0, ilen = this.data.datasets.length; i6 < ilen; ++i6) {
        this._destroyDatasetMeta(i6);
      }
    }
    destroy() {
      this.notifyPlugins("beforeDestroy");
      const { canvas, ctx: ctx2 } = this;
      this._stop();
      this.config.clearCache();
      if (canvas) {
        this.unbindEvents();
        clearCanvas(canvas, ctx2);
        this.platform.releaseContext(ctx2);
        this.canvas = null;
        this.ctx = null;
      }
      this.notifyPlugins("destroy");
      delete instances[this.id];
      this.notifyPlugins("afterDestroy");
    }
    toBase64Image(...args) {
      return this.canvas.toDataURL(...args);
    }
    bindEvents() {
      this.bindUserEvents();
      if (this.options.responsive) {
        this.bindResponsiveEvents();
      } else {
        this.attached = true;
      }
    }
    bindUserEvents() {
      const listeners = this._listeners;
      const platform = this.platform;
      const _add = (type, listener2) => {
        platform.addEventListener(this, type, listener2);
        listeners[type] = listener2;
      };
      const listener = (e7, x3, y4) => {
        e7.offsetX = x3;
        e7.offsetY = y4;
        this._eventHandler(e7);
      };
      each(this.options.events, (type) => _add(type, listener));
    }
    bindResponsiveEvents() {
      if (!this._responsiveListeners) {
        this._responsiveListeners = {};
      }
      const listeners = this._responsiveListeners;
      const platform = this.platform;
      const _add = (type, listener2) => {
        platform.addEventListener(this, type, listener2);
        listeners[type] = listener2;
      };
      const _remove = (type, listener2) => {
        if (listeners[type]) {
          platform.removeEventListener(this, type, listener2);
          delete listeners[type];
        }
      };
      const listener = (width, height) => {
        if (this.canvas) {
          this.resize(width, height);
        }
      };
      let detached;
      const attached = () => {
        _remove("attach", attached);
        this.attached = true;
        this.resize();
        _add("resize", listener);
        _add("detach", detached);
      };
      detached = () => {
        this.attached = false;
        _remove("resize", listener);
        this._stop();
        this._resize(0, 0);
        _add("attach", attached);
      };
      if (platform.isAttached(this.canvas)) {
        attached();
      } else {
        detached();
      }
    }
    unbindEvents() {
      each(this._listeners, (listener, type) => {
        this.platform.removeEventListener(this, type, listener);
      });
      this._listeners = {};
      each(this._responsiveListeners, (listener, type) => {
        this.platform.removeEventListener(this, type, listener);
      });
      this._responsiveListeners = void 0;
    }
    updateHoverStyle(items, mode, enabled) {
      const prefix2 = enabled ? "set" : "remove";
      let meta, item, i6, ilen;
      if (mode === "dataset") {
        meta = this.getDatasetMeta(items[0].datasetIndex);
        meta.controller["_" + prefix2 + "DatasetHoverStyle"]();
      }
      for (i6 = 0, ilen = items.length; i6 < ilen; ++i6) {
        item = items[i6];
        const controller = item && this.getDatasetMeta(item.datasetIndex).controller;
        if (controller) {
          controller[prefix2 + "HoverStyle"](item.element, item.datasetIndex, item.index);
        }
      }
    }
    getActiveElements() {
      return this._active || [];
    }
    setActiveElements(activeElements) {
      const lastActive = this._active || [];
      const active = activeElements.map(({ datasetIndex, index }) => {
        const meta = this.getDatasetMeta(datasetIndex);
        if (!meta) {
          throw new Error("No dataset found at index " + datasetIndex);
        }
        return {
          datasetIndex,
          element: meta.data[index],
          index
        };
      });
      const changed = !_elementsEqual(active, lastActive);
      if (changed) {
        this._active = active;
        this._lastEvent = null;
        this._updateHoverStyles(active, lastActive);
      }
    }
    notifyPlugins(hook, args, filter) {
      return this._plugins.notify(this, hook, args, filter);
    }
    _updateHoverStyles(active, lastActive, replay) {
      const hoverOptions = this.options.hover;
      const diff = (a2, b3) => a2.filter((x3) => !b3.some((y4) => x3.datasetIndex === y4.datasetIndex && x3.index === y4.index));
      const deactivated = diff(lastActive, active);
      const activated = replay ? active : diff(active, lastActive);
      if (deactivated.length) {
        this.updateHoverStyle(deactivated, hoverOptions.mode, false);
      }
      if (activated.length && hoverOptions.mode) {
        this.updateHoverStyle(activated, hoverOptions.mode, true);
      }
    }
    _eventHandler(e7, replay) {
      const args = {
        event: e7,
        replay,
        cancelable: true,
        inChartArea: this.isPointInArea(e7)
      };
      const eventFilter = (plugin2) => (plugin2.options.events || this.options.events).includes(e7.native.type);
      if (this.notifyPlugins("beforeEvent", args, eventFilter) === false) {
        return;
      }
      const changed = this._handleEvent(e7, replay, args.inChartArea);
      args.cancelable = false;
      this.notifyPlugins("afterEvent", args, eventFilter);
      if (changed || args.changed) {
        this.render();
      }
      return this;
    }
    _handleEvent(e7, replay, inChartArea) {
      const { _active: lastActive = [], options } = this;
      const useFinalPosition = replay;
      const active = this._getActiveElements(e7, lastActive, inChartArea, useFinalPosition);
      const isClick = _isClickEvent(e7);
      const lastEvent = determineLastEvent(e7, this._lastEvent, inChartArea, isClick);
      if (inChartArea) {
        this._lastEvent = null;
        callback(options.onHover, [e7, active, this], this);
        if (isClick) {
          callback(options.onClick, [e7, active, this], this);
        }
      }
      const changed = !_elementsEqual(active, lastActive);
      if (changed || replay) {
        this._active = active;
        this._updateHoverStyles(active, lastActive, replay);
      }
      this._lastEvent = lastEvent;
      return changed;
    }
    _getActiveElements(e7, lastActive, inChartArea, useFinalPosition) {
      if (e7.type === "mouseout") {
        return [];
      }
      if (!inChartArea) {
        return lastActive;
      }
      const hoverOptions = this.options.hover;
      return this.getElementsAtEventForMode(e7, hoverOptions.mode, hoverOptions, useFinalPosition);
    }
  };
  var invalidatePlugins = () => each(Chart.instances, (chart) => chart._plugins.invalidate());
  var enumerable = true;
  Object.defineProperties(Chart, {
    defaults: {
      enumerable,
      value: defaults
    },
    instances: {
      enumerable,
      value: instances
    },
    overrides: {
      enumerable,
      value: overrides
    },
    registry: {
      enumerable,
      value: registry
    },
    version: {
      enumerable,
      value: version
    },
    getChart: {
      enumerable,
      value: getChart
    },
    register: {
      enumerable,
      value: (...items) => {
        registry.add(...items);
        invalidatePlugins();
      }
    },
    unregister: {
      enumerable,
      value: (...items) => {
        registry.remove(...items);
        invalidatePlugins();
      }
    }
  });
  function clipArc(ctx2, element, endAngle) {
    const { startAngle, pixelMargin, x: x3, y: y4, outerRadius, innerRadius } = element;
    let angleMargin = pixelMargin / outerRadius;
    ctx2.beginPath();
    ctx2.arc(x3, y4, outerRadius, startAngle - angleMargin, endAngle + angleMargin);
    if (innerRadius > pixelMargin) {
      angleMargin = pixelMargin / innerRadius;
      ctx2.arc(x3, y4, innerRadius, endAngle + angleMargin, startAngle - angleMargin, true);
    } else {
      ctx2.arc(x3, y4, pixelMargin, endAngle + HALF_PI, startAngle - HALF_PI);
    }
    ctx2.closePath();
    ctx2.clip();
  }
  function toRadiusCorners(value) {
    return _readValueToProps(value, ["outerStart", "outerEnd", "innerStart", "innerEnd"]);
  }
  function parseBorderRadius$1(arc, innerRadius, outerRadius, angleDelta) {
    const o6 = toRadiusCorners(arc.options.borderRadius);
    const halfThickness = (outerRadius - innerRadius) / 2;
    const innerLimit = Math.min(halfThickness, angleDelta * innerRadius / 2);
    const computeOuterLimit = (val2) => {
      const outerArcLimit = (outerRadius - Math.min(halfThickness, val2)) * angleDelta / 2;
      return _limitValue(val2, 0, Math.min(halfThickness, outerArcLimit));
    };
    return {
      outerStart: computeOuterLimit(o6.outerStart),
      outerEnd: computeOuterLimit(o6.outerEnd),
      innerStart: _limitValue(o6.innerStart, 0, innerLimit),
      innerEnd: _limitValue(o6.innerEnd, 0, innerLimit)
    };
  }
  function rThetaToXY(r6, theta, x3, y4) {
    return {
      x: x3 + r6 * Math.cos(theta),
      y: y4 + r6 * Math.sin(theta)
    };
  }
  function pathArc(ctx2, element, offset, spacing, end, circular) {
    const { x: x3, y: y4, startAngle: start2, pixelMargin, innerRadius: innerR } = element;
    const outerRadius = Math.max(element.outerRadius + spacing + offset - pixelMargin, 0);
    const innerRadius = innerR > 0 ? innerR + spacing + offset + pixelMargin : 0;
    let spacingOffset = 0;
    const alpha2 = end - start2;
    if (spacing) {
      const noSpacingInnerRadius = innerR > 0 ? innerR - spacing : 0;
      const noSpacingOuterRadius = outerRadius > 0 ? outerRadius - spacing : 0;
      const avNogSpacingRadius = (noSpacingInnerRadius + noSpacingOuterRadius) / 2;
      const adjustedAngle = avNogSpacingRadius !== 0 ? alpha2 * avNogSpacingRadius / (avNogSpacingRadius + spacing) : alpha2;
      spacingOffset = (alpha2 - adjustedAngle) / 2;
    }
    const beta = Math.max(1e-3, alpha2 * outerRadius - offset / PI) / outerRadius;
    const angleOffset = (alpha2 - beta) / 2;
    const startAngle = start2 + angleOffset + spacingOffset;
    const endAngle = end - angleOffset - spacingOffset;
    const { outerStart, outerEnd, innerStart, innerEnd } = parseBorderRadius$1(element, innerRadius, outerRadius, endAngle - startAngle);
    const outerStartAdjustedRadius = outerRadius - outerStart;
    const outerEndAdjustedRadius = outerRadius - outerEnd;
    const outerStartAdjustedAngle = startAngle + outerStart / outerStartAdjustedRadius;
    const outerEndAdjustedAngle = endAngle - outerEnd / outerEndAdjustedRadius;
    const innerStartAdjustedRadius = innerRadius + innerStart;
    const innerEndAdjustedRadius = innerRadius + innerEnd;
    const innerStartAdjustedAngle = startAngle + innerStart / innerStartAdjustedRadius;
    const innerEndAdjustedAngle = endAngle - innerEnd / innerEndAdjustedRadius;
    ctx2.beginPath();
    if (circular) {
      ctx2.arc(x3, y4, outerRadius, outerStartAdjustedAngle, outerEndAdjustedAngle);
      if (outerEnd > 0) {
        const pCenter = rThetaToXY(outerEndAdjustedRadius, outerEndAdjustedAngle, x3, y4);
        ctx2.arc(pCenter.x, pCenter.y, outerEnd, outerEndAdjustedAngle, endAngle + HALF_PI);
      }
      const p4 = rThetaToXY(innerEndAdjustedRadius, endAngle, x3, y4);
      ctx2.lineTo(p4.x, p4.y);
      if (innerEnd > 0) {
        const pCenter = rThetaToXY(innerEndAdjustedRadius, innerEndAdjustedAngle, x3, y4);
        ctx2.arc(pCenter.x, pCenter.y, innerEnd, endAngle + HALF_PI, innerEndAdjustedAngle + Math.PI);
      }
      ctx2.arc(x3, y4, innerRadius, endAngle - innerEnd / innerRadius, startAngle + innerStart / innerRadius, true);
      if (innerStart > 0) {
        const pCenter = rThetaToXY(innerStartAdjustedRadius, innerStartAdjustedAngle, x3, y4);
        ctx2.arc(pCenter.x, pCenter.y, innerStart, innerStartAdjustedAngle + Math.PI, startAngle - HALF_PI);
      }
      const p8 = rThetaToXY(outerStartAdjustedRadius, startAngle, x3, y4);
      ctx2.lineTo(p8.x, p8.y);
      if (outerStart > 0) {
        const pCenter = rThetaToXY(outerStartAdjustedRadius, outerStartAdjustedAngle, x3, y4);
        ctx2.arc(pCenter.x, pCenter.y, outerStart, startAngle - HALF_PI, outerStartAdjustedAngle);
      }
    } else {
      ctx2.moveTo(x3, y4);
      const outerStartX = Math.cos(outerStartAdjustedAngle) * outerRadius + x3;
      const outerStartY = Math.sin(outerStartAdjustedAngle) * outerRadius + y4;
      ctx2.lineTo(outerStartX, outerStartY);
      const outerEndX = Math.cos(outerEndAdjustedAngle) * outerRadius + x3;
      const outerEndY = Math.sin(outerEndAdjustedAngle) * outerRadius + y4;
      ctx2.lineTo(outerEndX, outerEndY);
    }
    ctx2.closePath();
  }
  function drawArc(ctx2, element, offset, spacing, circular) {
    const { fullCircles, startAngle, circumference } = element;
    let endAngle = element.endAngle;
    if (fullCircles) {
      pathArc(ctx2, element, offset, spacing, startAngle + TAU, circular);
      for (let i6 = 0; i6 < fullCircles; ++i6) {
        ctx2.fill();
      }
      if (!isNaN(circumference)) {
        endAngle = startAngle + circumference % TAU;
        if (circumference % TAU === 0) {
          endAngle += TAU;
        }
      }
    }
    pathArc(ctx2, element, offset, spacing, endAngle, circular);
    ctx2.fill();
    return endAngle;
  }
  function drawFullCircleBorders(ctx2, element, inner) {
    const { x: x3, y: y4, startAngle, pixelMargin, fullCircles } = element;
    const outerRadius = Math.max(element.outerRadius - pixelMargin, 0);
    const innerRadius = element.innerRadius + pixelMargin;
    let i6;
    if (inner) {
      clipArc(ctx2, element, startAngle + TAU);
    }
    ctx2.beginPath();
    ctx2.arc(x3, y4, innerRadius, startAngle + TAU, startAngle, true);
    for (i6 = 0; i6 < fullCircles; ++i6) {
      ctx2.stroke();
    }
    ctx2.beginPath();
    ctx2.arc(x3, y4, outerRadius, startAngle, startAngle + TAU);
    for (i6 = 0; i6 < fullCircles; ++i6) {
      ctx2.stroke();
    }
  }
  function drawBorder(ctx2, element, offset, spacing, endAngle, circular) {
    const { options } = element;
    const { borderWidth, borderJoinStyle } = options;
    const inner = options.borderAlign === "inner";
    if (!borderWidth) {
      return;
    }
    if (inner) {
      ctx2.lineWidth = borderWidth * 2;
      ctx2.lineJoin = borderJoinStyle || "round";
    } else {
      ctx2.lineWidth = borderWidth;
      ctx2.lineJoin = borderJoinStyle || "bevel";
    }
    if (element.fullCircles) {
      drawFullCircleBorders(ctx2, element, inner);
    }
    if (inner) {
      clipArc(ctx2, element, endAngle);
    }
    pathArc(ctx2, element, offset, spacing, endAngle, circular);
    ctx2.stroke();
  }
  var ArcElement = class extends Element {
    constructor(cfg) {
      super();
      this.options = void 0;
      this.circumference = void 0;
      this.startAngle = void 0;
      this.endAngle = void 0;
      this.innerRadius = void 0;
      this.outerRadius = void 0;
      this.pixelMargin = 0;
      this.fullCircles = 0;
      if (cfg) {
        Object.assign(this, cfg);
      }
    }
    inRange(chartX, chartY, useFinalPosition) {
      const point5 = this.getProps(["x", "y"], useFinalPosition);
      const { angle, distance } = getAngleFromPoint(point5, { x: chartX, y: chartY });
      const { startAngle, endAngle, innerRadius, outerRadius, circumference } = this.getProps([
        "startAngle",
        "endAngle",
        "innerRadius",
        "outerRadius",
        "circumference"
      ], useFinalPosition);
      const rAdjust = this.options.spacing / 2;
      const _circumference = valueOrDefault(circumference, endAngle - startAngle);
      const betweenAngles = _circumference >= TAU || _angleBetween(angle, startAngle, endAngle);
      const withinRadius = _isBetween(distance, innerRadius + rAdjust, outerRadius + rAdjust);
      return betweenAngles && withinRadius;
    }
    getCenterPoint(useFinalPosition) {
      const { x: x3, y: y4, startAngle, endAngle, innerRadius, outerRadius } = this.getProps([
        "x",
        "y",
        "startAngle",
        "endAngle",
        "innerRadius",
        "outerRadius",
        "circumference"
      ], useFinalPosition);
      const { offset, spacing } = this.options;
      const halfAngle = (startAngle + endAngle) / 2;
      const halfRadius = (innerRadius + outerRadius + spacing + offset) / 2;
      return {
        x: x3 + Math.cos(halfAngle) * halfRadius,
        y: y4 + Math.sin(halfAngle) * halfRadius
      };
    }
    tooltipPosition(useFinalPosition) {
      return this.getCenterPoint(useFinalPosition);
    }
    draw(ctx2) {
      const { options, circumference } = this;
      const offset = (options.offset || 0) / 2;
      const spacing = (options.spacing || 0) / 2;
      const circular = options.circular;
      this.pixelMargin = options.borderAlign === "inner" ? 0.33 : 0;
      this.fullCircles = circumference > TAU ? Math.floor(circumference / TAU) : 0;
      if (circumference === 0 || this.innerRadius < 0 || this.outerRadius < 0) {
        return;
      }
      ctx2.save();
      let radiusOffset = 0;
      if (offset) {
        radiusOffset = offset / 2;
        const halfAngle = (this.startAngle + this.endAngle) / 2;
        ctx2.translate(Math.cos(halfAngle) * radiusOffset, Math.sin(halfAngle) * radiusOffset);
        if (this.circumference >= PI) {
          radiusOffset = offset;
        }
      }
      ctx2.fillStyle = options.backgroundColor;
      ctx2.strokeStyle = options.borderColor;
      const endAngle = drawArc(ctx2, this, radiusOffset, spacing, circular);
      drawBorder(ctx2, this, radiusOffset, spacing, endAngle, circular);
      ctx2.restore();
    }
  };
  ArcElement.id = "arc";
  ArcElement.defaults = {
    borderAlign: "center",
    borderColor: "#fff",
    borderJoinStyle: void 0,
    borderRadius: 0,
    borderWidth: 2,
    offset: 0,
    spacing: 0,
    angle: void 0,
    circular: true
  };
  ArcElement.defaultRoutes = {
    backgroundColor: "backgroundColor"
  };
  function setStyle(ctx2, options, style = options) {
    ctx2.lineCap = valueOrDefault(style.borderCapStyle, options.borderCapStyle);
    ctx2.setLineDash(valueOrDefault(style.borderDash, options.borderDash));
    ctx2.lineDashOffset = valueOrDefault(style.borderDashOffset, options.borderDashOffset);
    ctx2.lineJoin = valueOrDefault(style.borderJoinStyle, options.borderJoinStyle);
    ctx2.lineWidth = valueOrDefault(style.borderWidth, options.borderWidth);
    ctx2.strokeStyle = valueOrDefault(style.borderColor, options.borderColor);
  }
  function lineTo(ctx2, previous, target) {
    ctx2.lineTo(target.x, target.y);
  }
  function getLineMethod(options) {
    if (options.stepped) {
      return _steppedLineTo;
    }
    if (options.tension || options.cubicInterpolationMode === "monotone") {
      return _bezierCurveTo;
    }
    return lineTo;
  }
  function pathVars(points, segment, params = {}) {
    const count2 = points.length;
    const { start: paramsStart = 0, end: paramsEnd = count2 - 1 } = params;
    const { start: segmentStart, end: segmentEnd } = segment;
    const start2 = Math.max(paramsStart, segmentStart);
    const end = Math.min(paramsEnd, segmentEnd);
    const outside = paramsStart < segmentStart && paramsEnd < segmentStart || paramsStart > segmentEnd && paramsEnd > segmentEnd;
    return {
      count: count2,
      start: start2,
      loop: segment.loop,
      ilen: end < start2 && !outside ? count2 + end - start2 : end - start2
    };
  }
  function pathSegment(ctx2, line, segment, params) {
    const { points, options } = line;
    const { count: count2, start: start2, loop: loop2, ilen } = pathVars(points, segment, params);
    const lineMethod = getLineMethod(options);
    let { move = true, reverse } = params || {};
    let i6, point5, prev;
    for (i6 = 0; i6 <= ilen; ++i6) {
      point5 = points[(start2 + (reverse ? ilen - i6 : i6)) % count2];
      if (point5.skip) {
        continue;
      } else if (move) {
        ctx2.moveTo(point5.x, point5.y);
        move = false;
      } else {
        lineMethod(ctx2, prev, point5, reverse, options.stepped);
      }
      prev = point5;
    }
    if (loop2) {
      point5 = points[(start2 + (reverse ? ilen : 0)) % count2];
      lineMethod(ctx2, prev, point5, reverse, options.stepped);
    }
    return !!loop2;
  }
  function fastPathSegment(ctx2, line, segment, params) {
    const points = line.points;
    const { count: count2, start: start2, ilen } = pathVars(points, segment, params);
    const { move = true, reverse } = params || {};
    let avgX = 0;
    let countX = 0;
    let i6, point5, prevX, minY, maxY2, lastY;
    const pointIndex = (index) => (start2 + (reverse ? ilen - index : index)) % count2;
    const drawX = () => {
      if (minY !== maxY2) {
        ctx2.lineTo(avgX, maxY2);
        ctx2.lineTo(avgX, minY);
        ctx2.lineTo(avgX, lastY);
      }
    };
    if (move) {
      point5 = points[pointIndex(0)];
      ctx2.moveTo(point5.x, point5.y);
    }
    for (i6 = 0; i6 <= ilen; ++i6) {
      point5 = points[pointIndex(i6)];
      if (point5.skip) {
        continue;
      }
      const x3 = point5.x;
      const y4 = point5.y;
      const truncX = x3 | 0;
      if (truncX === prevX) {
        if (y4 < minY) {
          minY = y4;
        } else if (y4 > maxY2) {
          maxY2 = y4;
        }
        avgX = (countX * avgX + x3) / ++countX;
      } else {
        drawX();
        ctx2.lineTo(x3, y4);
        prevX = truncX;
        countX = 0;
        minY = maxY2 = y4;
      }
      lastY = y4;
    }
    drawX();
  }
  function _getSegmentMethod(line) {
    const opts = line.options;
    const borderDash = opts.borderDash && opts.borderDash.length;
    const useFastPath = !line._decimated && !line._loop && !opts.tension && opts.cubicInterpolationMode !== "monotone" && !opts.stepped && !borderDash;
    return useFastPath ? fastPathSegment : pathSegment;
  }
  function _getInterpolationMethod(options) {
    if (options.stepped) {
      return _steppedInterpolation;
    }
    if (options.tension || options.cubicInterpolationMode === "monotone") {
      return _bezierInterpolation;
    }
    return _pointInLine;
  }
  function strokePathWithCache(ctx2, line, start2, count2) {
    let path2 = line._path;
    if (!path2) {
      path2 = line._path = new Path2D();
      if (line.path(path2, start2, count2)) {
        path2.closePath();
      }
    }
    setStyle(ctx2, line.options);
    ctx2.stroke(path2);
  }
  function strokePathDirect(ctx2, line, start2, count2) {
    const { segments, options } = line;
    const segmentMethod = _getSegmentMethod(line);
    for (const segment of segments) {
      setStyle(ctx2, options, segment.style);
      ctx2.beginPath();
      if (segmentMethod(ctx2, line, segment, { start: start2, end: start2 + count2 - 1 })) {
        ctx2.closePath();
      }
      ctx2.stroke();
    }
  }
  var usePath2D = typeof Path2D === "function";
  function draw(ctx2, line, start2, count2) {
    if (usePath2D && !line.options.segment) {
      strokePathWithCache(ctx2, line, start2, count2);
    } else {
      strokePathDirect(ctx2, line, start2, count2);
    }
  }
  var LineElement = class extends Element {
    constructor(cfg) {
      super();
      this.animated = true;
      this.options = void 0;
      this._chart = void 0;
      this._loop = void 0;
      this._fullLoop = void 0;
      this._path = void 0;
      this._points = void 0;
      this._segments = void 0;
      this._decimated = false;
      this._pointsUpdated = false;
      this._datasetIndex = void 0;
      if (cfg) {
        Object.assign(this, cfg);
      }
    }
    updateControlPoints(chartArea, indexAxis) {
      const options = this.options;
      if ((options.tension || options.cubicInterpolationMode === "monotone") && !options.stepped && !this._pointsUpdated) {
        const loop2 = options.spanGaps ? this._loop : this._fullLoop;
        _updateBezierControlPoints(this._points, options, chartArea, loop2, indexAxis);
        this._pointsUpdated = true;
      }
    }
    set points(points) {
      this._points = points;
      delete this._segments;
      delete this._path;
      this._pointsUpdated = false;
    }
    get points() {
      return this._points;
    }
    get segments() {
      return this._segments || (this._segments = _computeSegments(this, this.options.segment));
    }
    first() {
      const segments = this.segments;
      const points = this.points;
      return segments.length && points[segments[0].start];
    }
    last() {
      const segments = this.segments;
      const points = this.points;
      const count2 = segments.length;
      return count2 && points[segments[count2 - 1].end];
    }
    interpolate(point5, property) {
      const options = this.options;
      const value = point5[property];
      const points = this.points;
      const segments = _boundSegments(this, { property, start: value, end: value });
      if (!segments.length) {
        return;
      }
      const result = [];
      const _interpolate = _getInterpolationMethod(options);
      let i6, ilen;
      for (i6 = 0, ilen = segments.length; i6 < ilen; ++i6) {
        const { start: start2, end } = segments[i6];
        const p1 = points[start2];
        const p2 = points[end];
        if (p1 === p2) {
          result.push(p1);
          continue;
        }
        const t5 = Math.abs((value - p1[property]) / (p2[property] - p1[property]));
        const interpolated = _interpolate(p1, p2, t5, options.stepped);
        interpolated[property] = point5[property];
        result.push(interpolated);
      }
      return result.length === 1 ? result[0] : result;
    }
    pathSegment(ctx2, segment, params) {
      const segmentMethod = _getSegmentMethod(this);
      return segmentMethod(ctx2, this, segment, params);
    }
    path(ctx2, start2, count2) {
      const segments = this.segments;
      const segmentMethod = _getSegmentMethod(this);
      let loop2 = this._loop;
      start2 = start2 || 0;
      count2 = count2 || this.points.length - start2;
      for (const segment of segments) {
        loop2 &= segmentMethod(ctx2, this, segment, { start: start2, end: start2 + count2 - 1 });
      }
      return !!loop2;
    }
    draw(ctx2, chartArea, start2, count2) {
      const options = this.options || {};
      const points = this.points || [];
      if (points.length && options.borderWidth) {
        ctx2.save();
        draw(ctx2, this, start2, count2);
        ctx2.restore();
      }
      if (this.animated) {
        this._pointsUpdated = false;
        this._path = void 0;
      }
    }
  };
  LineElement.id = "line";
  LineElement.defaults = {
    borderCapStyle: "butt",
    borderDash: [],
    borderDashOffset: 0,
    borderJoinStyle: "miter",
    borderWidth: 3,
    capBezierPoints: true,
    cubicInterpolationMode: "default",
    fill: false,
    spanGaps: false,
    stepped: false,
    tension: 0
  };
  LineElement.defaultRoutes = {
    backgroundColor: "backgroundColor",
    borderColor: "borderColor"
  };
  LineElement.descriptors = {
    _scriptable: true,
    _indexable: (name) => name !== "borderDash" && name !== "fill"
  };
  function inRange$1(el, pos, axis, useFinalPosition) {
    const options = el.options;
    const { [axis]: value } = el.getProps([axis], useFinalPosition);
    return Math.abs(pos - value) < options.radius + options.hitRadius;
  }
  var PointElement = class extends Element {
    constructor(cfg) {
      super();
      this.options = void 0;
      this.parsed = void 0;
      this.skip = void 0;
      this.stop = void 0;
      if (cfg) {
        Object.assign(this, cfg);
      }
    }
    inRange(mouseX, mouseY, useFinalPosition) {
      const options = this.options;
      const { x: x3, y: y4 } = this.getProps(["x", "y"], useFinalPosition);
      return Math.pow(mouseX - x3, 2) + Math.pow(mouseY - y4, 2) < Math.pow(options.hitRadius + options.radius, 2);
    }
    inXRange(mouseX, useFinalPosition) {
      return inRange$1(this, mouseX, "x", useFinalPosition);
    }
    inYRange(mouseY, useFinalPosition) {
      return inRange$1(this, mouseY, "y", useFinalPosition);
    }
    getCenterPoint(useFinalPosition) {
      const { x: x3, y: y4 } = this.getProps(["x", "y"], useFinalPosition);
      return { x: x3, y: y4 };
    }
    size(options) {
      options = options || this.options || {};
      let radius = options.radius || 0;
      radius = Math.max(radius, radius && options.hoverRadius || 0);
      const borderWidth = radius && options.borderWidth || 0;
      return (radius + borderWidth) * 2;
    }
    draw(ctx2, area) {
      const options = this.options;
      if (this.skip || options.radius < 0.1 || !_isPointInArea(this, area, this.size(options) / 2)) {
        return;
      }
      ctx2.strokeStyle = options.borderColor;
      ctx2.lineWidth = options.borderWidth;
      ctx2.fillStyle = options.backgroundColor;
      drawPoint(ctx2, options, this.x, this.y);
    }
    getRange() {
      const options = this.options || {};
      return options.radius + options.hitRadius;
    }
  };
  PointElement.id = "point";
  PointElement.defaults = {
    borderWidth: 1,
    hitRadius: 1,
    hoverBorderWidth: 1,
    hoverRadius: 4,
    pointStyle: "circle",
    radius: 3,
    rotation: 0
  };
  PointElement.defaultRoutes = {
    backgroundColor: "backgroundColor",
    borderColor: "borderColor"
  };
  function getBarBounds(bar, useFinalPosition) {
    const { x: x3, y: y4, base, width, height } = bar.getProps(["x", "y", "base", "width", "height"], useFinalPosition);
    let left, right, top, bottom, half;
    if (bar.horizontal) {
      half = height / 2;
      left = Math.min(x3, base);
      right = Math.max(x3, base);
      top = y4 - half;
      bottom = y4 + half;
    } else {
      half = width / 2;
      left = x3 - half;
      right = x3 + half;
      top = Math.min(y4, base);
      bottom = Math.max(y4, base);
    }
    return { left, top, right, bottom };
  }
  function skipOrLimit(skip2, value, min, max) {
    return skip2 ? 0 : _limitValue(value, min, max);
  }
  function parseBorderWidth(bar, maxW, maxH) {
    const value = bar.options.borderWidth;
    const skip2 = bar.borderSkipped;
    const o6 = toTRBL(value);
    return {
      t: skipOrLimit(skip2.top, o6.top, 0, maxH),
      r: skipOrLimit(skip2.right, o6.right, 0, maxW),
      b: skipOrLimit(skip2.bottom, o6.bottom, 0, maxH),
      l: skipOrLimit(skip2.left, o6.left, 0, maxW)
    };
  }
  function parseBorderRadius(bar, maxW, maxH) {
    const { enableBorderRadius } = bar.getProps(["enableBorderRadius"]);
    const value = bar.options.borderRadius;
    const o6 = toTRBLCorners(value);
    const maxR = Math.min(maxW, maxH);
    const skip2 = bar.borderSkipped;
    const enableBorder = enableBorderRadius || isObject(value);
    return {
      topLeft: skipOrLimit(!enableBorder || skip2.top || skip2.left, o6.topLeft, 0, maxR),
      topRight: skipOrLimit(!enableBorder || skip2.top || skip2.right, o6.topRight, 0, maxR),
      bottomLeft: skipOrLimit(!enableBorder || skip2.bottom || skip2.left, o6.bottomLeft, 0, maxR),
      bottomRight: skipOrLimit(!enableBorder || skip2.bottom || skip2.right, o6.bottomRight, 0, maxR)
    };
  }
  function boundingRects(bar) {
    const bounds = getBarBounds(bar);
    const width = bounds.right - bounds.left;
    const height = bounds.bottom - bounds.top;
    const border = parseBorderWidth(bar, width / 2, height / 2);
    const radius = parseBorderRadius(bar, width / 2, height / 2);
    return {
      outer: {
        x: bounds.left,
        y: bounds.top,
        w: width,
        h: height,
        radius
      },
      inner: {
        x: bounds.left + border.l,
        y: bounds.top + border.t,
        w: width - border.l - border.r,
        h: height - border.t - border.b,
        radius: {
          topLeft: Math.max(0, radius.topLeft - Math.max(border.t, border.l)),
          topRight: Math.max(0, radius.topRight - Math.max(border.t, border.r)),
          bottomLeft: Math.max(0, radius.bottomLeft - Math.max(border.b, border.l)),
          bottomRight: Math.max(0, radius.bottomRight - Math.max(border.b, border.r))
        }
      }
    };
  }
  function inRange(bar, x3, y4, useFinalPosition) {
    const skipX = x3 === null;
    const skipY = y4 === null;
    const skipBoth = skipX && skipY;
    const bounds = bar && !skipBoth && getBarBounds(bar, useFinalPosition);
    return bounds && (skipX || _isBetween(x3, bounds.left, bounds.right)) && (skipY || _isBetween(y4, bounds.top, bounds.bottom));
  }
  function hasRadius(radius) {
    return radius.topLeft || radius.topRight || radius.bottomLeft || radius.bottomRight;
  }
  function addNormalRectPath(ctx2, rect) {
    ctx2.rect(rect.x, rect.y, rect.w, rect.h);
  }
  function inflateRect(rect, amount, refRect = {}) {
    const x3 = rect.x !== refRect.x ? -amount : 0;
    const y4 = rect.y !== refRect.y ? -amount : 0;
    const w3 = (rect.x + rect.w !== refRect.x + refRect.w ? amount : 0) - x3;
    const h = (rect.y + rect.h !== refRect.y + refRect.h ? amount : 0) - y4;
    return {
      x: rect.x + x3,
      y: rect.y + y4,
      w: rect.w + w3,
      h: rect.h + h,
      radius: rect.radius
    };
  }
  var BarElement = class extends Element {
    constructor(cfg) {
      super();
      this.options = void 0;
      this.horizontal = void 0;
      this.base = void 0;
      this.width = void 0;
      this.height = void 0;
      this.inflateAmount = void 0;
      if (cfg) {
        Object.assign(this, cfg);
      }
    }
    draw(ctx2) {
      const { inflateAmount, options: { borderColor, backgroundColor } } = this;
      const { inner, outer } = boundingRects(this);
      const addRectPath = hasRadius(outer.radius) ? addRoundedRectPath : addNormalRectPath;
      ctx2.save();
      if (outer.w !== inner.w || outer.h !== inner.h) {
        ctx2.beginPath();
        addRectPath(ctx2, inflateRect(outer, inflateAmount, inner));
        ctx2.clip();
        addRectPath(ctx2, inflateRect(inner, -inflateAmount, outer));
        ctx2.fillStyle = borderColor;
        ctx2.fill("evenodd");
      }
      ctx2.beginPath();
      addRectPath(ctx2, inflateRect(inner, inflateAmount));
      ctx2.fillStyle = backgroundColor;
      ctx2.fill();
      ctx2.restore();
    }
    inRange(mouseX, mouseY, useFinalPosition) {
      return inRange(this, mouseX, mouseY, useFinalPosition);
    }
    inXRange(mouseX, useFinalPosition) {
      return inRange(this, mouseX, null, useFinalPosition);
    }
    inYRange(mouseY, useFinalPosition) {
      return inRange(this, null, mouseY, useFinalPosition);
    }
    getCenterPoint(useFinalPosition) {
      const { x: x3, y: y4, base, horizontal } = this.getProps(["x", "y", "base", "horizontal"], useFinalPosition);
      return {
        x: horizontal ? (x3 + base) / 2 : x3,
        y: horizontal ? y4 : (y4 + base) / 2
      };
    }
    getRange(axis) {
      return axis === "x" ? this.width / 2 : this.height / 2;
    }
  };
  BarElement.id = "bar";
  BarElement.defaults = {
    borderSkipped: "start",
    borderWidth: 0,
    borderRadius: 0,
    inflateAmount: "auto",
    pointStyle: void 0
  };
  BarElement.defaultRoutes = {
    backgroundColor: "backgroundColor",
    borderColor: "borderColor"
  };
  var getBoxSize = (labelOpts, fontSize) => {
    let { boxHeight = fontSize, boxWidth = fontSize } = labelOpts;
    if (labelOpts.usePointStyle) {
      boxHeight = Math.min(boxHeight, fontSize);
      boxWidth = labelOpts.pointStyleWidth || Math.min(boxWidth, fontSize);
    }
    return {
      boxWidth,
      boxHeight,
      itemHeight: Math.max(fontSize, boxHeight)
    };
  };
  var itemsEqual = (a2, b3) => a2 !== null && b3 !== null && a2.datasetIndex === b3.datasetIndex && a2.index === b3.index;
  var Legend = class extends Element {
    constructor(config2) {
      super();
      this._added = false;
      this.legendHitBoxes = [];
      this._hoveredItem = null;
      this.doughnutMode = false;
      this.chart = config2.chart;
      this.options = config2.options;
      this.ctx = config2.ctx;
      this.legendItems = void 0;
      this.columnSizes = void 0;
      this.lineWidths = void 0;
      this.maxHeight = void 0;
      this.maxWidth = void 0;
      this.top = void 0;
      this.bottom = void 0;
      this.left = void 0;
      this.right = void 0;
      this.height = void 0;
      this.width = void 0;
      this._margins = void 0;
      this.position = void 0;
      this.weight = void 0;
      this.fullSize = void 0;
    }
    update(maxWidth, maxHeight, margins) {
      this.maxWidth = maxWidth;
      this.maxHeight = maxHeight;
      this._margins = margins;
      this.setDimensions();
      this.buildLabels();
      this.fit();
    }
    setDimensions() {
      if (this.isHorizontal()) {
        this.width = this.maxWidth;
        this.left = this._margins.left;
        this.right = this.width;
      } else {
        this.height = this.maxHeight;
        this.top = this._margins.top;
        this.bottom = this.height;
      }
    }
    buildLabels() {
      const labelOpts = this.options.labels || {};
      let legendItems = callback(labelOpts.generateLabels, [this.chart], this) || [];
      if (labelOpts.filter) {
        legendItems = legendItems.filter((item) => labelOpts.filter(item, this.chart.data));
      }
      if (labelOpts.sort) {
        legendItems = legendItems.sort((a2, b3) => labelOpts.sort(a2, b3, this.chart.data));
      }
      if (this.options.reverse) {
        legendItems.reverse();
      }
      this.legendItems = legendItems;
    }
    fit() {
      const { options, ctx: ctx2 } = this;
      if (!options.display) {
        this.width = this.height = 0;
        return;
      }
      const labelOpts = options.labels;
      const labelFont = toFont(labelOpts.font);
      const fontSize = labelFont.size;
      const titleHeight = this._computeTitleHeight();
      const { boxWidth, itemHeight } = getBoxSize(labelOpts, fontSize);
      let width, height;
      ctx2.font = labelFont.string;
      if (this.isHorizontal()) {
        width = this.maxWidth;
        height = this._fitRows(titleHeight, fontSize, boxWidth, itemHeight) + 10;
      } else {
        height = this.maxHeight;
        width = this._fitCols(titleHeight, fontSize, boxWidth, itemHeight) + 10;
      }
      this.width = Math.min(width, options.maxWidth || this.maxWidth);
      this.height = Math.min(height, options.maxHeight || this.maxHeight);
    }
    _fitRows(titleHeight, fontSize, boxWidth, itemHeight) {
      const { ctx: ctx2, maxWidth, options: { labels: { padding } } } = this;
      const hitboxes = this.legendHitBoxes = [];
      const lineWidths = this.lineWidths = [0];
      const lineHeight = itemHeight + padding;
      let totalHeight = titleHeight;
      ctx2.textAlign = "left";
      ctx2.textBaseline = "middle";
      let row = -1;
      let top = -lineHeight;
      this.legendItems.forEach((legendItem, i6) => {
        const itemWidth = boxWidth + fontSize / 2 + ctx2.measureText(legendItem.text).width;
        if (i6 === 0 || lineWidths[lineWidths.length - 1] + itemWidth + 2 * padding > maxWidth) {
          totalHeight += lineHeight;
          lineWidths[lineWidths.length - (i6 > 0 ? 0 : 1)] = 0;
          top += lineHeight;
          row++;
        }
        hitboxes[i6] = { left: 0, top, row, width: itemWidth, height: itemHeight };
        lineWidths[lineWidths.length - 1] += itemWidth + padding;
      });
      return totalHeight;
    }
    _fitCols(titleHeight, fontSize, boxWidth, itemHeight) {
      const { ctx: ctx2, maxHeight, options: { labels: { padding } } } = this;
      const hitboxes = this.legendHitBoxes = [];
      const columnSizes = this.columnSizes = [];
      const heightLimit = maxHeight - titleHeight;
      let totalWidth = padding;
      let currentColWidth = 0;
      let currentColHeight = 0;
      let left = 0;
      let col = 0;
      this.legendItems.forEach((legendItem, i6) => {
        const itemWidth = boxWidth + fontSize / 2 + ctx2.measureText(legendItem.text).width;
        if (i6 > 0 && currentColHeight + itemHeight + 2 * padding > heightLimit) {
          totalWidth += currentColWidth + padding;
          columnSizes.push({ width: currentColWidth, height: currentColHeight });
          left += currentColWidth + padding;
          col++;
          currentColWidth = currentColHeight = 0;
        }
        hitboxes[i6] = { left, top: currentColHeight, col, width: itemWidth, height: itemHeight };
        currentColWidth = Math.max(currentColWidth, itemWidth);
        currentColHeight += itemHeight + padding;
      });
      totalWidth += currentColWidth;
      columnSizes.push({ width: currentColWidth, height: currentColHeight });
      return totalWidth;
    }
    adjustHitBoxes() {
      if (!this.options.display) {
        return;
      }
      const titleHeight = this._computeTitleHeight();
      const { legendHitBoxes: hitboxes, options: { align, labels: { padding }, rtl } } = this;
      const rtlHelper = getRtlAdapter(rtl, this.left, this.width);
      if (this.isHorizontal()) {
        let row = 0;
        let left = _alignStartEnd(align, this.left + padding, this.right - this.lineWidths[row]);
        for (const hitbox of hitboxes) {
          if (row !== hitbox.row) {
            row = hitbox.row;
            left = _alignStartEnd(align, this.left + padding, this.right - this.lineWidths[row]);
          }
          hitbox.top += this.top + titleHeight + padding;
          hitbox.left = rtlHelper.leftForLtr(rtlHelper.x(left), hitbox.width);
          left += hitbox.width + padding;
        }
      } else {
        let col = 0;
        let top = _alignStartEnd(align, this.top + titleHeight + padding, this.bottom - this.columnSizes[col].height);
        for (const hitbox of hitboxes) {
          if (hitbox.col !== col) {
            col = hitbox.col;
            top = _alignStartEnd(align, this.top + titleHeight + padding, this.bottom - this.columnSizes[col].height);
          }
          hitbox.top = top;
          hitbox.left += this.left + padding;
          hitbox.left = rtlHelper.leftForLtr(rtlHelper.x(hitbox.left), hitbox.width);
          top += hitbox.height + padding;
        }
      }
    }
    isHorizontal() {
      return this.options.position === "top" || this.options.position === "bottom";
    }
    draw() {
      if (this.options.display) {
        const ctx2 = this.ctx;
        clipArea(ctx2, this);
        this._draw();
        unclipArea(ctx2);
      }
    }
    _draw() {
      const { options: opts, columnSizes, lineWidths, ctx: ctx2 } = this;
      const { align, labels: labelOpts } = opts;
      const defaultColor = defaults.color;
      const rtlHelper = getRtlAdapter(opts.rtl, this.left, this.width);
      const labelFont = toFont(labelOpts.font);
      const { color: fontColor, padding } = labelOpts;
      const fontSize = labelFont.size;
      const halfFontSize = fontSize / 2;
      let cursor;
      this.drawTitle();
      ctx2.textAlign = rtlHelper.textAlign("left");
      ctx2.textBaseline = "middle";
      ctx2.lineWidth = 0.5;
      ctx2.font = labelFont.string;
      const { boxWidth, boxHeight, itemHeight } = getBoxSize(labelOpts, fontSize);
      const drawLegendBox = function(x3, y4, legendItem) {
        if (isNaN(boxWidth) || boxWidth <= 0 || isNaN(boxHeight) || boxHeight < 0) {
          return;
        }
        ctx2.save();
        const lineWidth = valueOrDefault(legendItem.lineWidth, 1);
        ctx2.fillStyle = valueOrDefault(legendItem.fillStyle, defaultColor);
        ctx2.lineCap = valueOrDefault(legendItem.lineCap, "butt");
        ctx2.lineDashOffset = valueOrDefault(legendItem.lineDashOffset, 0);
        ctx2.lineJoin = valueOrDefault(legendItem.lineJoin, "miter");
        ctx2.lineWidth = lineWidth;
        ctx2.strokeStyle = valueOrDefault(legendItem.strokeStyle, defaultColor);
        ctx2.setLineDash(valueOrDefault(legendItem.lineDash, []));
        if (labelOpts.usePointStyle) {
          const drawOptions = {
            radius: boxHeight * Math.SQRT2 / 2,
            pointStyle: legendItem.pointStyle,
            rotation: legendItem.rotation,
            borderWidth: lineWidth
          };
          const centerX = rtlHelper.xPlus(x3, boxWidth / 2);
          const centerY = y4 + halfFontSize;
          drawPointLegend(ctx2, drawOptions, centerX, centerY, labelOpts.pointStyleWidth && boxWidth);
        } else {
          const yBoxTop = y4 + Math.max((fontSize - boxHeight) / 2, 0);
          const xBoxLeft = rtlHelper.leftForLtr(x3, boxWidth);
          const borderRadius = toTRBLCorners(legendItem.borderRadius);
          ctx2.beginPath();
          if (Object.values(borderRadius).some((v4) => v4 !== 0)) {
            addRoundedRectPath(ctx2, {
              x: xBoxLeft,
              y: yBoxTop,
              w: boxWidth,
              h: boxHeight,
              radius: borderRadius
            });
          } else {
            ctx2.rect(xBoxLeft, yBoxTop, boxWidth, boxHeight);
          }
          ctx2.fill();
          if (lineWidth !== 0) {
            ctx2.stroke();
          }
        }
        ctx2.restore();
      };
      const fillText = function(x3, y4, legendItem) {
        renderText(ctx2, legendItem.text, x3, y4 + itemHeight / 2, labelFont, {
          strikethrough: legendItem.hidden,
          textAlign: rtlHelper.textAlign(legendItem.textAlign)
        });
      };
      const isHorizontal = this.isHorizontal();
      const titleHeight = this._computeTitleHeight();
      if (isHorizontal) {
        cursor = {
          x: _alignStartEnd(align, this.left + padding, this.right - lineWidths[0]),
          y: this.top + padding + titleHeight,
          line: 0
        };
      } else {
        cursor = {
          x: this.left + padding,
          y: _alignStartEnd(align, this.top + titleHeight + padding, this.bottom - columnSizes[0].height),
          line: 0
        };
      }
      overrideTextDirection(this.ctx, opts.textDirection);
      const lineHeight = itemHeight + padding;
      this.legendItems.forEach((legendItem, i6) => {
        ctx2.strokeStyle = legendItem.fontColor || fontColor;
        ctx2.fillStyle = legendItem.fontColor || fontColor;
        const textWidth = ctx2.measureText(legendItem.text).width;
        const textAlign = rtlHelper.textAlign(legendItem.textAlign || (legendItem.textAlign = labelOpts.textAlign));
        const width = boxWidth + halfFontSize + textWidth;
        let x3 = cursor.x;
        let y4 = cursor.y;
        rtlHelper.setWidth(this.width);
        if (isHorizontal) {
          if (i6 > 0 && x3 + width + padding > this.right) {
            y4 = cursor.y += lineHeight;
            cursor.line++;
            x3 = cursor.x = _alignStartEnd(align, this.left + padding, this.right - lineWidths[cursor.line]);
          }
        } else if (i6 > 0 && y4 + lineHeight > this.bottom) {
          x3 = cursor.x = x3 + columnSizes[cursor.line].width + padding;
          cursor.line++;
          y4 = cursor.y = _alignStartEnd(align, this.top + titleHeight + padding, this.bottom - columnSizes[cursor.line].height);
        }
        const realX = rtlHelper.x(x3);
        drawLegendBox(realX, y4, legendItem);
        x3 = _textX(textAlign, x3 + boxWidth + halfFontSize, isHorizontal ? x3 + width : this.right, opts.rtl);
        fillText(rtlHelper.x(x3), y4, legendItem);
        if (isHorizontal) {
          cursor.x += width + padding;
        } else {
          cursor.y += lineHeight;
        }
      });
      restoreTextDirection(this.ctx, opts.textDirection);
    }
    drawTitle() {
      const opts = this.options;
      const titleOpts = opts.title;
      const titleFont = toFont(titleOpts.font);
      const titlePadding = toPadding(titleOpts.padding);
      if (!titleOpts.display) {
        return;
      }
      const rtlHelper = getRtlAdapter(opts.rtl, this.left, this.width);
      const ctx2 = this.ctx;
      const position = titleOpts.position;
      const halfFontSize = titleFont.size / 2;
      const topPaddingPlusHalfFontSize = titlePadding.top + halfFontSize;
      let y4;
      let left = this.left;
      let maxWidth = this.width;
      if (this.isHorizontal()) {
        maxWidth = Math.max(...this.lineWidths);
        y4 = this.top + topPaddingPlusHalfFontSize;
        left = _alignStartEnd(opts.align, left, this.right - maxWidth);
      } else {
        const maxHeight = this.columnSizes.reduce((acc, size) => Math.max(acc, size.height), 0);
        y4 = topPaddingPlusHalfFontSize + _alignStartEnd(opts.align, this.top, this.bottom - maxHeight - opts.labels.padding - this._computeTitleHeight());
      }
      const x3 = _alignStartEnd(position, left, left + maxWidth);
      ctx2.textAlign = rtlHelper.textAlign(_toLeftRightCenter(position));
      ctx2.textBaseline = "middle";
      ctx2.strokeStyle = titleOpts.color;
      ctx2.fillStyle = titleOpts.color;
      ctx2.font = titleFont.string;
      renderText(ctx2, titleOpts.text, x3, y4, titleFont);
    }
    _computeTitleHeight() {
      const titleOpts = this.options.title;
      const titleFont = toFont(titleOpts.font);
      const titlePadding = toPadding(titleOpts.padding);
      return titleOpts.display ? titleFont.lineHeight + titlePadding.height : 0;
    }
    _getLegendItemAt(x3, y4) {
      let i6, hitBox, lh;
      if (_isBetween(x3, this.left, this.right) && _isBetween(y4, this.top, this.bottom)) {
        lh = this.legendHitBoxes;
        for (i6 = 0; i6 < lh.length; ++i6) {
          hitBox = lh[i6];
          if (_isBetween(x3, hitBox.left, hitBox.left + hitBox.width) && _isBetween(y4, hitBox.top, hitBox.top + hitBox.height)) {
            return this.legendItems[i6];
          }
        }
      }
      return null;
    }
    handleEvent(e7) {
      const opts = this.options;
      if (!isListened(e7.type, opts)) {
        return;
      }
      const hoveredItem = this._getLegendItemAt(e7.x, e7.y);
      if (e7.type === "mousemove" || e7.type === "mouseout") {
        const previous = this._hoveredItem;
        const sameItem = itemsEqual(previous, hoveredItem);
        if (previous && !sameItem) {
          callback(opts.onLeave, [e7, previous, this], this);
        }
        this._hoveredItem = hoveredItem;
        if (hoveredItem && !sameItem) {
          callback(opts.onHover, [e7, hoveredItem, this], this);
        }
      } else if (hoveredItem) {
        callback(opts.onClick, [e7, hoveredItem, this], this);
      }
    }
  };
  function isListened(type, opts) {
    if ((type === "mousemove" || type === "mouseout") && (opts.onHover || opts.onLeave)) {
      return true;
    }
    if (opts.onClick && (type === "click" || type === "mouseup")) {
      return true;
    }
    return false;
  }
  var plugin_legend = {
    id: "legend",
    _element: Legend,
    start(chart, _args, options) {
      const legend = chart.legend = new Legend({ ctx: chart.ctx, options, chart });
      layouts.configure(chart, legend, options);
      layouts.addBox(chart, legend);
    },
    stop(chart) {
      layouts.removeBox(chart, chart.legend);
      delete chart.legend;
    },
    beforeUpdate(chart, _args, options) {
      const legend = chart.legend;
      layouts.configure(chart, legend, options);
      legend.options = options;
    },
    afterUpdate(chart) {
      const legend = chart.legend;
      legend.buildLabels();
      legend.adjustHitBoxes();
    },
    afterEvent(chart, args) {
      if (!args.replay) {
        chart.legend.handleEvent(args.event);
      }
    },
    defaults: {
      display: true,
      position: "top",
      align: "center",
      fullSize: true,
      reverse: false,
      weight: 1e3,
      onClick(e7, legendItem, legend) {
        const index = legendItem.datasetIndex;
        const ci = legend.chart;
        if (ci.isDatasetVisible(index)) {
          ci.hide(index);
          legendItem.hidden = true;
        } else {
          ci.show(index);
          legendItem.hidden = false;
        }
      },
      onHover: null,
      onLeave: null,
      labels: {
        color: (ctx2) => ctx2.chart.options.color,
        boxWidth: 40,
        padding: 10,
        generateLabels(chart) {
          const datasets = chart.data.datasets;
          const { labels: { usePointStyle, pointStyle, textAlign, color: color5 } } = chart.legend.options;
          return chart._getSortedDatasetMetas().map((meta) => {
            const style = meta.controller.getStyle(usePointStyle ? 0 : void 0);
            const borderWidth = toPadding(style.borderWidth);
            return {
              text: datasets[meta.index].label,
              fillStyle: style.backgroundColor,
              fontColor: color5,
              hidden: !meta.visible,
              lineCap: style.borderCapStyle,
              lineDash: style.borderDash,
              lineDashOffset: style.borderDashOffset,
              lineJoin: style.borderJoinStyle,
              lineWidth: (borderWidth.width + borderWidth.height) / 4,
              strokeStyle: style.borderColor,
              pointStyle: pointStyle || style.pointStyle,
              rotation: style.rotation,
              textAlign: textAlign || style.textAlign,
              borderRadius: 0,
              datasetIndex: meta.index
            };
          }, this);
        }
      },
      title: {
        color: (ctx2) => ctx2.chart.options.color,
        display: false,
        position: "center",
        text: ""
      }
    },
    descriptors: {
      _scriptable: (name) => !name.startsWith("on"),
      labels: {
        _scriptable: (name) => !["generateLabels", "filter", "sort"].includes(name)
      }
    }
  };
  var Title = class extends Element {
    constructor(config2) {
      super();
      this.chart = config2.chart;
      this.options = config2.options;
      this.ctx = config2.ctx;
      this._padding = void 0;
      this.top = void 0;
      this.bottom = void 0;
      this.left = void 0;
      this.right = void 0;
      this.width = void 0;
      this.height = void 0;
      this.position = void 0;
      this.weight = void 0;
      this.fullSize = void 0;
    }
    update(maxWidth, maxHeight) {
      const opts = this.options;
      this.left = 0;
      this.top = 0;
      if (!opts.display) {
        this.width = this.height = this.right = this.bottom = 0;
        return;
      }
      this.width = this.right = maxWidth;
      this.height = this.bottom = maxHeight;
      const lineCount = isArray(opts.text) ? opts.text.length : 1;
      this._padding = toPadding(opts.padding);
      const textSize = lineCount * toFont(opts.font).lineHeight + this._padding.height;
      if (this.isHorizontal()) {
        this.height = textSize;
      } else {
        this.width = textSize;
      }
    }
    isHorizontal() {
      const pos = this.options.position;
      return pos === "top" || pos === "bottom";
    }
    _drawArgs(offset) {
      const { top, left, bottom, right, options } = this;
      const align = options.align;
      let rotation = 0;
      let maxWidth, titleX, titleY;
      if (this.isHorizontal()) {
        titleX = _alignStartEnd(align, left, right);
        titleY = top + offset;
        maxWidth = right - left;
      } else {
        if (options.position === "left") {
          titleX = left + offset;
          titleY = _alignStartEnd(align, bottom, top);
          rotation = PI * -0.5;
        } else {
          titleX = right - offset;
          titleY = _alignStartEnd(align, top, bottom);
          rotation = PI * 0.5;
        }
        maxWidth = bottom - top;
      }
      return { titleX, titleY, maxWidth, rotation };
    }
    draw() {
      const ctx2 = this.ctx;
      const opts = this.options;
      if (!opts.display) {
        return;
      }
      const fontOpts = toFont(opts.font);
      const lineHeight = fontOpts.lineHeight;
      const offset = lineHeight / 2 + this._padding.top;
      const { titleX, titleY, maxWidth, rotation } = this._drawArgs(offset);
      renderText(ctx2, opts.text, 0, 0, fontOpts, {
        color: opts.color,
        maxWidth,
        rotation,
        textAlign: _toLeftRightCenter(opts.align),
        textBaseline: "middle",
        translation: [titleX, titleY]
      });
    }
  };
  function createTitle(chart, titleOpts) {
    const title = new Title({
      ctx: chart.ctx,
      options: titleOpts,
      chart
    });
    layouts.configure(chart, title, titleOpts);
    layouts.addBox(chart, title);
    chart.titleBlock = title;
  }
  var plugin_title = {
    id: "title",
    _element: Title,
    start(chart, _args, options) {
      createTitle(chart, options);
    },
    stop(chart) {
      const titleBlock = chart.titleBlock;
      layouts.removeBox(chart, titleBlock);
      delete chart.titleBlock;
    },
    beforeUpdate(chart, _args, options) {
      const title = chart.titleBlock;
      layouts.configure(chart, title, options);
      title.options = options;
    },
    defaults: {
      align: "center",
      display: false,
      font: {
        weight: "bold"
      },
      fullSize: true,
      padding: 10,
      position: "top",
      text: "",
      weight: 2e3
    },
    defaultRoutes: {
      color: "color"
    },
    descriptors: {
      _scriptable: true,
      _indexable: false
    }
  };
  var positioners = {
    average(items) {
      if (!items.length) {
        return false;
      }
      let i6, len;
      let x3 = 0;
      let y4 = 0;
      let count2 = 0;
      for (i6 = 0, len = items.length; i6 < len; ++i6) {
        const el = items[i6].element;
        if (el && el.hasValue()) {
          const pos = el.tooltipPosition();
          x3 += pos.x;
          y4 += pos.y;
          ++count2;
        }
      }
      return {
        x: x3 / count2,
        y: y4 / count2
      };
    },
    nearest(items, eventPosition) {
      if (!items.length) {
        return false;
      }
      let x3 = eventPosition.x;
      let y4 = eventPosition.y;
      let minDistance = Number.POSITIVE_INFINITY;
      let i6, len, nearestElement;
      for (i6 = 0, len = items.length; i6 < len; ++i6) {
        const el = items[i6].element;
        if (el && el.hasValue()) {
          const center = el.getCenterPoint();
          const d2 = distanceBetweenPoints(eventPosition, center);
          if (d2 < minDistance) {
            minDistance = d2;
            nearestElement = el;
          }
        }
      }
      if (nearestElement) {
        const tp = nearestElement.tooltipPosition();
        x3 = tp.x;
        y4 = tp.y;
      }
      return {
        x: x3,
        y: y4
      };
    }
  };
  function pushOrConcat(base, toPush) {
    if (toPush) {
      if (isArray(toPush)) {
        Array.prototype.push.apply(base, toPush);
      } else {
        base.push(toPush);
      }
    }
    return base;
  }
  function splitNewlines(str) {
    if ((typeof str === "string" || str instanceof String) && str.indexOf("\n") > -1) {
      return str.split("\n");
    }
    return str;
  }
  function createTooltipItem(chart, item) {
    const { element, datasetIndex, index } = item;
    const controller = chart.getDatasetMeta(datasetIndex).controller;
    const { label, value } = controller.getLabelAndValue(index);
    return {
      chart,
      label,
      parsed: controller.getParsed(index),
      raw: chart.data.datasets[datasetIndex].data[index],
      formattedValue: value,
      dataset: controller.getDataset(),
      dataIndex: index,
      datasetIndex,
      element
    };
  }
  function getTooltipSize(tooltip, options) {
    const ctx2 = tooltip.chart.ctx;
    const { body, footer, title } = tooltip;
    const { boxWidth, boxHeight } = options;
    const bodyFont = toFont(options.bodyFont);
    const titleFont = toFont(options.titleFont);
    const footerFont = toFont(options.footerFont);
    const titleLineCount = title.length;
    const footerLineCount = footer.length;
    const bodyLineItemCount = body.length;
    const padding = toPadding(options.padding);
    let height = padding.height;
    let width = 0;
    let combinedBodyLength = body.reduce((count2, bodyItem) => count2 + bodyItem.before.length + bodyItem.lines.length + bodyItem.after.length, 0);
    combinedBodyLength += tooltip.beforeBody.length + tooltip.afterBody.length;
    if (titleLineCount) {
      height += titleLineCount * titleFont.lineHeight + (titleLineCount - 1) * options.titleSpacing + options.titleMarginBottom;
    }
    if (combinedBodyLength) {
      const bodyLineHeight = options.displayColors ? Math.max(boxHeight, bodyFont.lineHeight) : bodyFont.lineHeight;
      height += bodyLineItemCount * bodyLineHeight + (combinedBodyLength - bodyLineItemCount) * bodyFont.lineHeight + (combinedBodyLength - 1) * options.bodySpacing;
    }
    if (footerLineCount) {
      height += options.footerMarginTop + footerLineCount * footerFont.lineHeight + (footerLineCount - 1) * options.footerSpacing;
    }
    let widthPadding = 0;
    const maxLineWidth = function(line) {
      width = Math.max(width, ctx2.measureText(line).width + widthPadding);
    };
    ctx2.save();
    ctx2.font = titleFont.string;
    each(tooltip.title, maxLineWidth);
    ctx2.font = bodyFont.string;
    each(tooltip.beforeBody.concat(tooltip.afterBody), maxLineWidth);
    widthPadding = options.displayColors ? boxWidth + 2 + options.boxPadding : 0;
    each(body, (bodyItem) => {
      each(bodyItem.before, maxLineWidth);
      each(bodyItem.lines, maxLineWidth);
      each(bodyItem.after, maxLineWidth);
    });
    widthPadding = 0;
    ctx2.font = footerFont.string;
    each(tooltip.footer, maxLineWidth);
    ctx2.restore();
    width += padding.width;
    return { width, height };
  }
  function determineYAlign(chart, size) {
    const { y: y4, height } = size;
    if (y4 < height / 2) {
      return "top";
    } else if (y4 > chart.height - height / 2) {
      return "bottom";
    }
    return "center";
  }
  function doesNotFitWithAlign(xAlign, chart, options, size) {
    const { x: x3, width } = size;
    const caret = options.caretSize + options.caretPadding;
    if (xAlign === "left" && x3 + width + caret > chart.width) {
      return true;
    }
    if (xAlign === "right" && x3 - width - caret < 0) {
      return true;
    }
  }
  function determineXAlign(chart, options, size, yAlign) {
    const { x: x3, width } = size;
    const { width: chartWidth, chartArea: { left, right } } = chart;
    let xAlign = "center";
    if (yAlign === "center") {
      xAlign = x3 <= (left + right) / 2 ? "left" : "right";
    } else if (x3 <= width / 2) {
      xAlign = "left";
    } else if (x3 >= chartWidth - width / 2) {
      xAlign = "right";
    }
    if (doesNotFitWithAlign(xAlign, chart, options, size)) {
      xAlign = "center";
    }
    return xAlign;
  }
  function determineAlignment(chart, options, size) {
    const yAlign = size.yAlign || options.yAlign || determineYAlign(chart, size);
    return {
      xAlign: size.xAlign || options.xAlign || determineXAlign(chart, options, size, yAlign),
      yAlign
    };
  }
  function alignX(size, xAlign) {
    let { x: x3, width } = size;
    if (xAlign === "right") {
      x3 -= width;
    } else if (xAlign === "center") {
      x3 -= width / 2;
    }
    return x3;
  }
  function alignY(size, yAlign, paddingAndSize) {
    let { y: y4, height } = size;
    if (yAlign === "top") {
      y4 += paddingAndSize;
    } else if (yAlign === "bottom") {
      y4 -= height + paddingAndSize;
    } else {
      y4 -= height / 2;
    }
    return y4;
  }
  function getBackgroundPoint(options, size, alignment, chart) {
    const { caretSize, caretPadding, cornerRadius } = options;
    const { xAlign, yAlign } = alignment;
    const paddingAndSize = caretSize + caretPadding;
    const { topLeft, topRight, bottomLeft, bottomRight } = toTRBLCorners(cornerRadius);
    let x3 = alignX(size, xAlign);
    const y4 = alignY(size, yAlign, paddingAndSize);
    if (yAlign === "center") {
      if (xAlign === "left") {
        x3 += paddingAndSize;
      } else if (xAlign === "right") {
        x3 -= paddingAndSize;
      }
    } else if (xAlign === "left") {
      x3 -= Math.max(topLeft, bottomLeft) + caretSize;
    } else if (xAlign === "right") {
      x3 += Math.max(topRight, bottomRight) + caretSize;
    }
    return {
      x: _limitValue(x3, 0, chart.width - size.width),
      y: _limitValue(y4, 0, chart.height - size.height)
    };
  }
  function getAlignedX(tooltip, align, options) {
    const padding = toPadding(options.padding);
    return align === "center" ? tooltip.x + tooltip.width / 2 : align === "right" ? tooltip.x + tooltip.width - padding.right : tooltip.x + padding.left;
  }
  function getBeforeAfterBodyLines(callback2) {
    return pushOrConcat([], splitNewlines(callback2));
  }
  function createTooltipContext(parent, tooltip, tooltipItems) {
    return createContext(parent, {
      tooltip,
      tooltipItems,
      type: "tooltip"
    });
  }
  function overrideCallbacks(callbacks, context) {
    const override = context && context.dataset && context.dataset.tooltip && context.dataset.tooltip.callbacks;
    return override ? callbacks.override(override) : callbacks;
  }
  var Tooltip2 = class extends Element {
    constructor(config2) {
      super();
      this.opacity = 0;
      this._active = [];
      this._eventPosition = void 0;
      this._size = void 0;
      this._cachedAnimations = void 0;
      this._tooltipItems = [];
      this.$animations = void 0;
      this.$context = void 0;
      this.chart = config2.chart || config2._chart;
      this._chart = this.chart;
      this.options = config2.options;
      this.dataPoints = void 0;
      this.title = void 0;
      this.beforeBody = void 0;
      this.body = void 0;
      this.afterBody = void 0;
      this.footer = void 0;
      this.xAlign = void 0;
      this.yAlign = void 0;
      this.x = void 0;
      this.y = void 0;
      this.height = void 0;
      this.width = void 0;
      this.caretX = void 0;
      this.caretY = void 0;
      this.labelColors = void 0;
      this.labelPointStyles = void 0;
      this.labelTextColors = void 0;
    }
    initialize(options) {
      this.options = options;
      this._cachedAnimations = void 0;
      this.$context = void 0;
    }
    _resolveAnimations() {
      const cached = this._cachedAnimations;
      if (cached) {
        return cached;
      }
      const chart = this.chart;
      const options = this.options.setContext(this.getContext());
      const opts = options.enabled && chart.options.animation && options.animations;
      const animations = new Animations(this.chart, opts);
      if (opts._cacheable) {
        this._cachedAnimations = Object.freeze(animations);
      }
      return animations;
    }
    getContext() {
      return this.$context || (this.$context = createTooltipContext(this.chart.getContext(), this, this._tooltipItems));
    }
    getTitle(context, options) {
      const { callbacks } = options;
      const beforeTitle = callbacks.beforeTitle.apply(this, [context]);
      const title = callbacks.title.apply(this, [context]);
      const afterTitle = callbacks.afterTitle.apply(this, [context]);
      let lines = [];
      lines = pushOrConcat(lines, splitNewlines(beforeTitle));
      lines = pushOrConcat(lines, splitNewlines(title));
      lines = pushOrConcat(lines, splitNewlines(afterTitle));
      return lines;
    }
    getBeforeBody(tooltipItems, options) {
      return getBeforeAfterBodyLines(options.callbacks.beforeBody.apply(this, [tooltipItems]));
    }
    getBody(tooltipItems, options) {
      const { callbacks } = options;
      const bodyItems = [];
      each(tooltipItems, (context) => {
        const bodyItem = {
          before: [],
          lines: [],
          after: []
        };
        const scoped = overrideCallbacks(callbacks, context);
        pushOrConcat(bodyItem.before, splitNewlines(scoped.beforeLabel.call(this, context)));
        pushOrConcat(bodyItem.lines, scoped.label.call(this, context));
        pushOrConcat(bodyItem.after, splitNewlines(scoped.afterLabel.call(this, context)));
        bodyItems.push(bodyItem);
      });
      return bodyItems;
    }
    getAfterBody(tooltipItems, options) {
      return getBeforeAfterBodyLines(options.callbacks.afterBody.apply(this, [tooltipItems]));
    }
    getFooter(tooltipItems, options) {
      const { callbacks } = options;
      const beforeFooter = callbacks.beforeFooter.apply(this, [tooltipItems]);
      const footer = callbacks.footer.apply(this, [tooltipItems]);
      const afterFooter = callbacks.afterFooter.apply(this, [tooltipItems]);
      let lines = [];
      lines = pushOrConcat(lines, splitNewlines(beforeFooter));
      lines = pushOrConcat(lines, splitNewlines(footer));
      lines = pushOrConcat(lines, splitNewlines(afterFooter));
      return lines;
    }
    _createItems(options) {
      const active = this._active;
      const data = this.chart.data;
      const labelColors = [];
      const labelPointStyles = [];
      const labelTextColors = [];
      let tooltipItems = [];
      let i6, len;
      for (i6 = 0, len = active.length; i6 < len; ++i6) {
        tooltipItems.push(createTooltipItem(this.chart, active[i6]));
      }
      if (options.filter) {
        tooltipItems = tooltipItems.filter((element, index, array) => options.filter(element, index, array, data));
      }
      if (options.itemSort) {
        tooltipItems = tooltipItems.sort((a2, b3) => options.itemSort(a2, b3, data));
      }
      each(tooltipItems, (context) => {
        const scoped = overrideCallbacks(options.callbacks, context);
        labelColors.push(scoped.labelColor.call(this, context));
        labelPointStyles.push(scoped.labelPointStyle.call(this, context));
        labelTextColors.push(scoped.labelTextColor.call(this, context));
      });
      this.labelColors = labelColors;
      this.labelPointStyles = labelPointStyles;
      this.labelTextColors = labelTextColors;
      this.dataPoints = tooltipItems;
      return tooltipItems;
    }
    update(changed, replay) {
      const options = this.options.setContext(this.getContext());
      const active = this._active;
      let properties;
      let tooltipItems = [];
      if (!active.length) {
        if (this.opacity !== 0) {
          properties = {
            opacity: 0
          };
        }
      } else {
        const position = positioners[options.position].call(this, active, this._eventPosition);
        tooltipItems = this._createItems(options);
        this.title = this.getTitle(tooltipItems, options);
        this.beforeBody = this.getBeforeBody(tooltipItems, options);
        this.body = this.getBody(tooltipItems, options);
        this.afterBody = this.getAfterBody(tooltipItems, options);
        this.footer = this.getFooter(tooltipItems, options);
        const size = this._size = getTooltipSize(this, options);
        const positionAndSize = Object.assign({}, position, size);
        const alignment = determineAlignment(this.chart, options, positionAndSize);
        const backgroundPoint = getBackgroundPoint(options, positionAndSize, alignment, this.chart);
        this.xAlign = alignment.xAlign;
        this.yAlign = alignment.yAlign;
        properties = {
          opacity: 1,
          x: backgroundPoint.x,
          y: backgroundPoint.y,
          width: size.width,
          height: size.height,
          caretX: position.x,
          caretY: position.y
        };
      }
      this._tooltipItems = tooltipItems;
      this.$context = void 0;
      if (properties) {
        this._resolveAnimations().update(this, properties);
      }
      if (changed && options.external) {
        options.external.call(this, { chart: this.chart, tooltip: this, replay });
      }
    }
    drawCaret(tooltipPoint, ctx2, size, options) {
      const caretPosition = this.getCaretPosition(tooltipPoint, size, options);
      ctx2.lineTo(caretPosition.x1, caretPosition.y1);
      ctx2.lineTo(caretPosition.x2, caretPosition.y2);
      ctx2.lineTo(caretPosition.x3, caretPosition.y3);
    }
    getCaretPosition(tooltipPoint, size, options) {
      const { xAlign, yAlign } = this;
      const { caretSize, cornerRadius } = options;
      const { topLeft, topRight, bottomLeft, bottomRight } = toTRBLCorners(cornerRadius);
      const { x: ptX, y: ptY } = tooltipPoint;
      const { width, height } = size;
      let x1, x22, x3, y1, y22, y32;
      if (yAlign === "center") {
        y22 = ptY + height / 2;
        if (xAlign === "left") {
          x1 = ptX;
          x22 = x1 - caretSize;
          y1 = y22 + caretSize;
          y32 = y22 - caretSize;
        } else {
          x1 = ptX + width;
          x22 = x1 + caretSize;
          y1 = y22 - caretSize;
          y32 = y22 + caretSize;
        }
        x3 = x1;
      } else {
        if (xAlign === "left") {
          x22 = ptX + Math.max(topLeft, bottomLeft) + caretSize;
        } else if (xAlign === "right") {
          x22 = ptX + width - Math.max(topRight, bottomRight) - caretSize;
        } else {
          x22 = this.caretX;
        }
        if (yAlign === "top") {
          y1 = ptY;
          y22 = y1 - caretSize;
          x1 = x22 - caretSize;
          x3 = x22 + caretSize;
        } else {
          y1 = ptY + height;
          y22 = y1 + caretSize;
          x1 = x22 + caretSize;
          x3 = x22 - caretSize;
        }
        y32 = y1;
      }
      return { x1, x2: x22, x3, y1, y2: y22, y3: y32 };
    }
    drawTitle(pt2, ctx2, options) {
      const title = this.title;
      const length = title.length;
      let titleFont, titleSpacing, i6;
      if (length) {
        const rtlHelper = getRtlAdapter(options.rtl, this.x, this.width);
        pt2.x = getAlignedX(this, options.titleAlign, options);
        ctx2.textAlign = rtlHelper.textAlign(options.titleAlign);
        ctx2.textBaseline = "middle";
        titleFont = toFont(options.titleFont);
        titleSpacing = options.titleSpacing;
        ctx2.fillStyle = options.titleColor;
        ctx2.font = titleFont.string;
        for (i6 = 0; i6 < length; ++i6) {
          ctx2.fillText(title[i6], rtlHelper.x(pt2.x), pt2.y + titleFont.lineHeight / 2);
          pt2.y += titleFont.lineHeight + titleSpacing;
          if (i6 + 1 === length) {
            pt2.y += options.titleMarginBottom - titleSpacing;
          }
        }
      }
    }
    _drawColorBox(ctx2, pt2, i6, rtlHelper, options) {
      const labelColors = this.labelColors[i6];
      const labelPointStyle = this.labelPointStyles[i6];
      const { boxHeight, boxWidth, boxPadding } = options;
      const bodyFont = toFont(options.bodyFont);
      const colorX = getAlignedX(this, "left", options);
      const rtlColorX = rtlHelper.x(colorX);
      const yOffSet = boxHeight < bodyFont.lineHeight ? (bodyFont.lineHeight - boxHeight) / 2 : 0;
      const colorY = pt2.y + yOffSet;
      if (options.usePointStyle) {
        const drawOptions = {
          radius: Math.min(boxWidth, boxHeight) / 2,
          pointStyle: labelPointStyle.pointStyle,
          rotation: labelPointStyle.rotation,
          borderWidth: 1
        };
        const centerX = rtlHelper.leftForLtr(rtlColorX, boxWidth) + boxWidth / 2;
        const centerY = colorY + boxHeight / 2;
        ctx2.strokeStyle = options.multiKeyBackground;
        ctx2.fillStyle = options.multiKeyBackground;
        drawPoint(ctx2, drawOptions, centerX, centerY);
        ctx2.strokeStyle = labelColors.borderColor;
        ctx2.fillStyle = labelColors.backgroundColor;
        drawPoint(ctx2, drawOptions, centerX, centerY);
      } else {
        ctx2.lineWidth = isObject(labelColors.borderWidth) ? Math.max(...Object.values(labelColors.borderWidth)) : labelColors.borderWidth || 1;
        ctx2.strokeStyle = labelColors.borderColor;
        ctx2.setLineDash(labelColors.borderDash || []);
        ctx2.lineDashOffset = labelColors.borderDashOffset || 0;
        const outerX = rtlHelper.leftForLtr(rtlColorX, boxWidth - boxPadding);
        const innerX = rtlHelper.leftForLtr(rtlHelper.xPlus(rtlColorX, 1), boxWidth - boxPadding - 2);
        const borderRadius = toTRBLCorners(labelColors.borderRadius);
        if (Object.values(borderRadius).some((v4) => v4 !== 0)) {
          ctx2.beginPath();
          ctx2.fillStyle = options.multiKeyBackground;
          addRoundedRectPath(ctx2, {
            x: outerX,
            y: colorY,
            w: boxWidth,
            h: boxHeight,
            radius: borderRadius
          });
          ctx2.fill();
          ctx2.stroke();
          ctx2.fillStyle = labelColors.backgroundColor;
          ctx2.beginPath();
          addRoundedRectPath(ctx2, {
            x: innerX,
            y: colorY + 1,
            w: boxWidth - 2,
            h: boxHeight - 2,
            radius: borderRadius
          });
          ctx2.fill();
        } else {
          ctx2.fillStyle = options.multiKeyBackground;
          ctx2.fillRect(outerX, colorY, boxWidth, boxHeight);
          ctx2.strokeRect(outerX, colorY, boxWidth, boxHeight);
          ctx2.fillStyle = labelColors.backgroundColor;
          ctx2.fillRect(innerX, colorY + 1, boxWidth - 2, boxHeight - 2);
        }
      }
      ctx2.fillStyle = this.labelTextColors[i6];
    }
    drawBody(pt2, ctx2, options) {
      const { body } = this;
      const { bodySpacing, bodyAlign, displayColors, boxHeight, boxWidth, boxPadding } = options;
      const bodyFont = toFont(options.bodyFont);
      let bodyLineHeight = bodyFont.lineHeight;
      let xLinePadding = 0;
      const rtlHelper = getRtlAdapter(options.rtl, this.x, this.width);
      const fillLineOfText = function(line) {
        ctx2.fillText(line, rtlHelper.x(pt2.x + xLinePadding), pt2.y + bodyLineHeight / 2);
        pt2.y += bodyLineHeight + bodySpacing;
      };
      const bodyAlignForCalculation = rtlHelper.textAlign(bodyAlign);
      let bodyItem, textColor, lines, i6, j3, ilen, jlen;
      ctx2.textAlign = bodyAlign;
      ctx2.textBaseline = "middle";
      ctx2.font = bodyFont.string;
      pt2.x = getAlignedX(this, bodyAlignForCalculation, options);
      ctx2.fillStyle = options.bodyColor;
      each(this.beforeBody, fillLineOfText);
      xLinePadding = displayColors && bodyAlignForCalculation !== "right" ? bodyAlign === "center" ? boxWidth / 2 + boxPadding : boxWidth + 2 + boxPadding : 0;
      for (i6 = 0, ilen = body.length; i6 < ilen; ++i6) {
        bodyItem = body[i6];
        textColor = this.labelTextColors[i6];
        ctx2.fillStyle = textColor;
        each(bodyItem.before, fillLineOfText);
        lines = bodyItem.lines;
        if (displayColors && lines.length) {
          this._drawColorBox(ctx2, pt2, i6, rtlHelper, options);
          bodyLineHeight = Math.max(bodyFont.lineHeight, boxHeight);
        }
        for (j3 = 0, jlen = lines.length; j3 < jlen; ++j3) {
          fillLineOfText(lines[j3]);
          bodyLineHeight = bodyFont.lineHeight;
        }
        each(bodyItem.after, fillLineOfText);
      }
      xLinePadding = 0;
      bodyLineHeight = bodyFont.lineHeight;
      each(this.afterBody, fillLineOfText);
      pt2.y -= bodySpacing;
    }
    drawFooter(pt2, ctx2, options) {
      const footer = this.footer;
      const length = footer.length;
      let footerFont, i6;
      if (length) {
        const rtlHelper = getRtlAdapter(options.rtl, this.x, this.width);
        pt2.x = getAlignedX(this, options.footerAlign, options);
        pt2.y += options.footerMarginTop;
        ctx2.textAlign = rtlHelper.textAlign(options.footerAlign);
        ctx2.textBaseline = "middle";
        footerFont = toFont(options.footerFont);
        ctx2.fillStyle = options.footerColor;
        ctx2.font = footerFont.string;
        for (i6 = 0; i6 < length; ++i6) {
          ctx2.fillText(footer[i6], rtlHelper.x(pt2.x), pt2.y + footerFont.lineHeight / 2);
          pt2.y += footerFont.lineHeight + options.footerSpacing;
        }
      }
    }
    drawBackground(pt2, ctx2, tooltipSize, options) {
      const { xAlign, yAlign } = this;
      const { x: x3, y: y4 } = pt2;
      const { width, height } = tooltipSize;
      const { topLeft, topRight, bottomLeft, bottomRight } = toTRBLCorners(options.cornerRadius);
      ctx2.fillStyle = options.backgroundColor;
      ctx2.strokeStyle = options.borderColor;
      ctx2.lineWidth = options.borderWidth;
      ctx2.beginPath();
      ctx2.moveTo(x3 + topLeft, y4);
      if (yAlign === "top") {
        this.drawCaret(pt2, ctx2, tooltipSize, options);
      }
      ctx2.lineTo(x3 + width - topRight, y4);
      ctx2.quadraticCurveTo(x3 + width, y4, x3 + width, y4 + topRight);
      if (yAlign === "center" && xAlign === "right") {
        this.drawCaret(pt2, ctx2, tooltipSize, options);
      }
      ctx2.lineTo(x3 + width, y4 + height - bottomRight);
      ctx2.quadraticCurveTo(x3 + width, y4 + height, x3 + width - bottomRight, y4 + height);
      if (yAlign === "bottom") {
        this.drawCaret(pt2, ctx2, tooltipSize, options);
      }
      ctx2.lineTo(x3 + bottomLeft, y4 + height);
      ctx2.quadraticCurveTo(x3, y4 + height, x3, y4 + height - bottomLeft);
      if (yAlign === "center" && xAlign === "left") {
        this.drawCaret(pt2, ctx2, tooltipSize, options);
      }
      ctx2.lineTo(x3, y4 + topLeft);
      ctx2.quadraticCurveTo(x3, y4, x3 + topLeft, y4);
      ctx2.closePath();
      ctx2.fill();
      if (options.borderWidth > 0) {
        ctx2.stroke();
      }
    }
    _updateAnimationTarget(options) {
      const chart = this.chart;
      const anims = this.$animations;
      const animX = anims && anims.x;
      const animY = anims && anims.y;
      if (animX || animY) {
        const position = positioners[options.position].call(this, this._active, this._eventPosition);
        if (!position) {
          return;
        }
        const size = this._size = getTooltipSize(this, options);
        const positionAndSize = Object.assign({}, position, this._size);
        const alignment = determineAlignment(chart, options, positionAndSize);
        const point5 = getBackgroundPoint(options, positionAndSize, alignment, chart);
        if (animX._to !== point5.x || animY._to !== point5.y) {
          this.xAlign = alignment.xAlign;
          this.yAlign = alignment.yAlign;
          this.width = size.width;
          this.height = size.height;
          this.caretX = position.x;
          this.caretY = position.y;
          this._resolveAnimations().update(this, point5);
        }
      }
    }
    _willRender() {
      return !!this.opacity;
    }
    draw(ctx2) {
      const options = this.options.setContext(this.getContext());
      let opacity = this.opacity;
      if (!opacity) {
        return;
      }
      this._updateAnimationTarget(options);
      const tooltipSize = {
        width: this.width,
        height: this.height
      };
      const pt2 = {
        x: this.x,
        y: this.y
      };
      opacity = Math.abs(opacity) < 1e-3 ? 0 : opacity;
      const padding = toPadding(options.padding);
      const hasTooltipContent = this.title.length || this.beforeBody.length || this.body.length || this.afterBody.length || this.footer.length;
      if (options.enabled && hasTooltipContent) {
        ctx2.save();
        ctx2.globalAlpha = opacity;
        this.drawBackground(pt2, ctx2, tooltipSize, options);
        overrideTextDirection(ctx2, options.textDirection);
        pt2.y += padding.top;
        this.drawTitle(pt2, ctx2, options);
        this.drawBody(pt2, ctx2, options);
        this.drawFooter(pt2, ctx2, options);
        restoreTextDirection(ctx2, options.textDirection);
        ctx2.restore();
      }
    }
    getActiveElements() {
      return this._active || [];
    }
    setActiveElements(activeElements, eventPosition) {
      const lastActive = this._active;
      const active = activeElements.map(({ datasetIndex, index }) => {
        const meta = this.chart.getDatasetMeta(datasetIndex);
        if (!meta) {
          throw new Error("Cannot find a dataset at index " + datasetIndex);
        }
        return {
          datasetIndex,
          element: meta.data[index],
          index
        };
      });
      const changed = !_elementsEqual(lastActive, active);
      const positionChanged = this._positionChanged(active, eventPosition);
      if (changed || positionChanged) {
        this._active = active;
        this._eventPosition = eventPosition;
        this._ignoreReplayEvents = true;
        this.update(true);
      }
    }
    handleEvent(e7, replay, inChartArea = true) {
      if (replay && this._ignoreReplayEvents) {
        return false;
      }
      this._ignoreReplayEvents = false;
      const options = this.options;
      const lastActive = this._active || [];
      const active = this._getActiveElements(e7, lastActive, replay, inChartArea);
      const positionChanged = this._positionChanged(active, e7);
      const changed = replay || !_elementsEqual(active, lastActive) || positionChanged;
      if (changed) {
        this._active = active;
        if (options.enabled || options.external) {
          this._eventPosition = {
            x: e7.x,
            y: e7.y
          };
          this.update(true, replay);
        }
      }
      return changed;
    }
    _getActiveElements(e7, lastActive, replay, inChartArea) {
      const options = this.options;
      if (e7.type === "mouseout") {
        return [];
      }
      if (!inChartArea) {
        return lastActive;
      }
      const active = this.chart.getElementsAtEventForMode(e7, options.mode, options, replay);
      if (options.reverse) {
        active.reverse();
      }
      return active;
    }
    _positionChanged(active, e7) {
      const { caretX, caretY, options } = this;
      const position = positioners[options.position].call(this, active, e7);
      return position !== false && (caretX !== position.x || caretY !== position.y);
    }
  };
  Tooltip2.positioners = positioners;
  var plugin_tooltip = {
    id: "tooltip",
    _element: Tooltip2,
    positioners,
    afterInit(chart, _args, options) {
      if (options) {
        chart.tooltip = new Tooltip2({ chart, options });
      }
    },
    beforeUpdate(chart, _args, options) {
      if (chart.tooltip) {
        chart.tooltip.initialize(options);
      }
    },
    reset(chart, _args, options) {
      if (chart.tooltip) {
        chart.tooltip.initialize(options);
      }
    },
    afterDraw(chart) {
      const tooltip = chart.tooltip;
      if (tooltip && tooltip._willRender()) {
        const args = {
          tooltip
        };
        if (chart.notifyPlugins("beforeTooltipDraw", args) === false) {
          return;
        }
        tooltip.draw(chart.ctx);
        chart.notifyPlugins("afterTooltipDraw", args);
      }
    },
    afterEvent(chart, args) {
      if (chart.tooltip) {
        const useFinalPosition = args.replay;
        if (chart.tooltip.handleEvent(args.event, useFinalPosition, args.inChartArea)) {
          args.changed = true;
        }
      }
    },
    defaults: {
      enabled: true,
      external: null,
      position: "average",
      backgroundColor: "rgba(0,0,0,0.8)",
      titleColor: "#fff",
      titleFont: {
        weight: "bold"
      },
      titleSpacing: 2,
      titleMarginBottom: 6,
      titleAlign: "left",
      bodyColor: "#fff",
      bodySpacing: 2,
      bodyFont: {},
      bodyAlign: "left",
      footerColor: "#fff",
      footerSpacing: 2,
      footerMarginTop: 6,
      footerFont: {
        weight: "bold"
      },
      footerAlign: "left",
      padding: 6,
      caretPadding: 2,
      caretSize: 5,
      cornerRadius: 6,
      boxHeight: (ctx2, opts) => opts.bodyFont.size,
      boxWidth: (ctx2, opts) => opts.bodyFont.size,
      multiKeyBackground: "#fff",
      displayColors: true,
      boxPadding: 0,
      borderColor: "rgba(0,0,0,0)",
      borderWidth: 0,
      animation: {
        duration: 400,
        easing: "easeOutQuart"
      },
      animations: {
        numbers: {
          type: "number",
          properties: ["x", "y", "width", "height", "caretX", "caretY"]
        },
        opacity: {
          easing: "linear",
          duration: 200
        }
      },
      callbacks: {
        beforeTitle: noop,
        title(tooltipItems) {
          if (tooltipItems.length > 0) {
            const item = tooltipItems[0];
            const labels = item.chart.data.labels;
            const labelCount = labels ? labels.length : 0;
            if (this && this.options && this.options.mode === "dataset") {
              return item.dataset.label || "";
            } else if (item.label) {
              return item.label;
            } else if (labelCount > 0 && item.dataIndex < labelCount) {
              return labels[item.dataIndex];
            }
          }
          return "";
        },
        afterTitle: noop,
        beforeBody: noop,
        beforeLabel: noop,
        label(tooltipItem) {
          if (this && this.options && this.options.mode === "dataset") {
            return tooltipItem.label + ": " + tooltipItem.formattedValue || tooltipItem.formattedValue;
          }
          let label = tooltipItem.dataset.label || "";
          if (label) {
            label += ": ";
          }
          const value = tooltipItem.formattedValue;
          if (!isNullOrUndef(value)) {
            label += value;
          }
          return label;
        },
        labelColor(tooltipItem) {
          const meta = tooltipItem.chart.getDatasetMeta(tooltipItem.datasetIndex);
          const options = meta.controller.getStyle(tooltipItem.dataIndex);
          return {
            borderColor: options.borderColor,
            backgroundColor: options.backgroundColor,
            borderWidth: options.borderWidth,
            borderDash: options.borderDash,
            borderDashOffset: options.borderDashOffset,
            borderRadius: 0
          };
        },
        labelTextColor() {
          return this.options.bodyColor;
        },
        labelPointStyle(tooltipItem) {
          const meta = tooltipItem.chart.getDatasetMeta(tooltipItem.datasetIndex);
          const options = meta.controller.getStyle(tooltipItem.dataIndex);
          return {
            pointStyle: options.pointStyle,
            rotation: options.rotation
          };
        },
        afterLabel: noop,
        afterBody: noop,
        beforeFooter: noop,
        footer: noop,
        afterFooter: noop
      }
    },
    defaultRoutes: {
      bodyFont: "font",
      footerFont: "font",
      titleFont: "font"
    },
    descriptors: {
      _scriptable: (name) => name !== "filter" && name !== "itemSort" && name !== "external",
      _indexable: false,
      callbacks: {
        _scriptable: false,
        _indexable: false
      },
      animation: {
        _fallback: false
      },
      animations: {
        _fallback: "animation"
      }
    },
    additionalOptionScopes: ["interaction"]
  };
  var addIfString = (labels, raw, index, addedLabels) => {
    if (typeof raw === "string") {
      index = labels.push(raw) - 1;
      addedLabels.unshift({ index, label: raw });
    } else if (isNaN(raw)) {
      index = null;
    }
    return index;
  };
  function findOrAddLabel(labels, raw, index, addedLabels) {
    const first = labels.indexOf(raw);
    if (first === -1) {
      return addIfString(labels, raw, index, addedLabels);
    }
    const last = labels.lastIndexOf(raw);
    return first !== last ? index : first;
  }
  var validIndex = (index, max) => index === null ? null : _limitValue(Math.round(index), 0, max);
  var CategoryScale = class extends Scale {
    constructor(cfg) {
      super(cfg);
      this._startValue = void 0;
      this._valueRange = 0;
      this._addedLabels = [];
    }
    init(scaleOptions) {
      const added = this._addedLabels;
      if (added.length) {
        const labels = this.getLabels();
        for (const { index, label } of added) {
          if (labels[index] === label) {
            labels.splice(index, 1);
          }
        }
        this._addedLabels = [];
      }
      super.init(scaleOptions);
    }
    parse(raw, index) {
      if (isNullOrUndef(raw)) {
        return null;
      }
      const labels = this.getLabels();
      index = isFinite(index) && labels[index] === raw ? index : findOrAddLabel(labels, raw, valueOrDefault(index, raw), this._addedLabels);
      return validIndex(index, labels.length - 1);
    }
    determineDataLimits() {
      const { minDefined, maxDefined } = this.getUserBounds();
      let { min, max } = this.getMinMax(true);
      if (this.options.bounds === "ticks") {
        if (!minDefined) {
          min = 0;
        }
        if (!maxDefined) {
          max = this.getLabels().length - 1;
        }
      }
      this.min = min;
      this.max = max;
    }
    buildTicks() {
      const min = this.min;
      const max = this.max;
      const offset = this.options.offset;
      const ticks2 = [];
      let labels = this.getLabels();
      labels = min === 0 && max === labels.length - 1 ? labels : labels.slice(min, max + 1);
      this._valueRange = Math.max(labels.length - (offset ? 0 : 1), 1);
      this._startValue = this.min - (offset ? 0.5 : 0);
      for (let value = min; value <= max; value++) {
        ticks2.push({ value });
      }
      return ticks2;
    }
    getLabelForValue(value) {
      const labels = this.getLabels();
      if (value >= 0 && value < labels.length) {
        return labels[value];
      }
      return value;
    }
    configure() {
      super.configure();
      if (!this.isHorizontal()) {
        this._reversePixels = !this._reversePixels;
      }
    }
    getPixelForValue(value) {
      if (typeof value !== "number") {
        value = this.parse(value);
      }
      return value === null ? NaN : this.getPixelForDecimal((value - this._startValue) / this._valueRange);
    }
    getPixelForTick(index) {
      const ticks2 = this.ticks;
      if (index < 0 || index > ticks2.length - 1) {
        return null;
      }
      return this.getPixelForValue(ticks2[index].value);
    }
    getValueForPixel(pixel) {
      return Math.round(this._startValue + this.getDecimalForPixel(pixel) * this._valueRange);
    }
    getBasePixel() {
      return this.bottom;
    }
  };
  CategoryScale.id = "category";
  CategoryScale.defaults = {
    ticks: {
      callback: CategoryScale.prototype.getLabelForValue
    }
  };
  function generateTicks$1(generationOptions, dataRange) {
    const ticks2 = [];
    const MIN_SPACING = 1e-14;
    const { bounds, step, min, max, precision, count: count2, maxTicks, maxDigits, includeBounds } = generationOptions;
    const unit2 = step || 1;
    const maxSpaces = maxTicks - 1;
    const { min: rmin, max: rmax } = dataRange;
    const minDefined = !isNullOrUndef(min);
    const maxDefined = !isNullOrUndef(max);
    const countDefined = !isNullOrUndef(count2);
    const minSpacing = (rmax - rmin) / (maxDigits + 1);
    let spacing = niceNum((rmax - rmin) / maxSpaces / unit2) * unit2;
    let factor, niceMin, niceMax, numSpaces;
    if (spacing < MIN_SPACING && !minDefined && !maxDefined) {
      return [{ value: rmin }, { value: rmax }];
    }
    numSpaces = Math.ceil(rmax / spacing) - Math.floor(rmin / spacing);
    if (numSpaces > maxSpaces) {
      spacing = niceNum(numSpaces * spacing / maxSpaces / unit2) * unit2;
    }
    if (!isNullOrUndef(precision)) {
      factor = Math.pow(10, precision);
      spacing = Math.ceil(spacing * factor) / factor;
    }
    if (bounds === "ticks") {
      niceMin = Math.floor(rmin / spacing) * spacing;
      niceMax = Math.ceil(rmax / spacing) * spacing;
    } else {
      niceMin = rmin;
      niceMax = rmax;
    }
    if (minDefined && maxDefined && step && almostWhole((max - min) / step, spacing / 1e3)) {
      numSpaces = Math.round(Math.min((max - min) / spacing, maxTicks));
      spacing = (max - min) / numSpaces;
      niceMin = min;
      niceMax = max;
    } else if (countDefined) {
      niceMin = minDefined ? min : niceMin;
      niceMax = maxDefined ? max : niceMax;
      numSpaces = count2 - 1;
      spacing = (niceMax - niceMin) / numSpaces;
    } else {
      numSpaces = (niceMax - niceMin) / spacing;
      if (almostEquals(numSpaces, Math.round(numSpaces), spacing / 1e3)) {
        numSpaces = Math.round(numSpaces);
      } else {
        numSpaces = Math.ceil(numSpaces);
      }
    }
    const decimalPlaces = Math.max(
      _decimalPlaces(spacing),
      _decimalPlaces(niceMin)
    );
    factor = Math.pow(10, isNullOrUndef(precision) ? decimalPlaces : precision);
    niceMin = Math.round(niceMin * factor) / factor;
    niceMax = Math.round(niceMax * factor) / factor;
    let j3 = 0;
    if (minDefined) {
      if (includeBounds && niceMin !== min) {
        ticks2.push({ value: min });
        if (niceMin < min) {
          j3++;
        }
        if (almostEquals(Math.round((niceMin + j3 * spacing) * factor) / factor, min, relativeLabelSize(min, minSpacing, generationOptions))) {
          j3++;
        }
      } else if (niceMin < min) {
        j3++;
      }
    }
    for (; j3 < numSpaces; ++j3) {
      ticks2.push({ value: Math.round((niceMin + j3 * spacing) * factor) / factor });
    }
    if (maxDefined && includeBounds && niceMax !== max) {
      if (ticks2.length && almostEquals(ticks2[ticks2.length - 1].value, max, relativeLabelSize(max, minSpacing, generationOptions))) {
        ticks2[ticks2.length - 1].value = max;
      } else {
        ticks2.push({ value: max });
      }
    } else if (!maxDefined || niceMax === max) {
      ticks2.push({ value: niceMax });
    }
    return ticks2;
  }
  function relativeLabelSize(value, minSpacing, { horizontal, minRotation }) {
    const rad = toRadians(minRotation);
    const ratio = (horizontal ? Math.sin(rad) : Math.cos(rad)) || 1e-3;
    const length = 0.75 * minSpacing * ("" + value).length;
    return Math.min(minSpacing / ratio, length);
  }
  var LinearScaleBase = class extends Scale {
    constructor(cfg) {
      super(cfg);
      this.start = void 0;
      this.end = void 0;
      this._startValue = void 0;
      this._endValue = void 0;
      this._valueRange = 0;
    }
    parse(raw, index) {
      if (isNullOrUndef(raw)) {
        return null;
      }
      if ((typeof raw === "number" || raw instanceof Number) && !isFinite(+raw)) {
        return null;
      }
      return +raw;
    }
    handleTickRangeOptions() {
      const { beginAtZero } = this.options;
      const { minDefined, maxDefined } = this.getUserBounds();
      let { min, max } = this;
      const setMin = (v4) => min = minDefined ? min : v4;
      const setMax = (v4) => max = maxDefined ? max : v4;
      if (beginAtZero) {
        const minSign = sign(min);
        const maxSign = sign(max);
        if (minSign < 0 && maxSign < 0) {
          setMax(0);
        } else if (minSign > 0 && maxSign > 0) {
          setMin(0);
        }
      }
      if (min === max) {
        let offset = 1;
        if (max >= Number.MAX_SAFE_INTEGER || min <= Number.MIN_SAFE_INTEGER) {
          offset = Math.abs(max * 0.05);
        }
        setMax(max + offset);
        if (!beginAtZero) {
          setMin(min - offset);
        }
      }
      this.min = min;
      this.max = max;
    }
    getTickLimit() {
      const tickOpts = this.options.ticks;
      let { maxTicksLimit, stepSize } = tickOpts;
      let maxTicks;
      if (stepSize) {
        maxTicks = Math.ceil(this.max / stepSize) - Math.floor(this.min / stepSize) + 1;
        if (maxTicks > 1e3) {
          console.warn(`scales.${this.id}.ticks.stepSize: ${stepSize} would result generating up to ${maxTicks} ticks. Limiting to 1000.`);
          maxTicks = 1e3;
        }
      } else {
        maxTicks = this.computeTickLimit();
        maxTicksLimit = maxTicksLimit || 11;
      }
      if (maxTicksLimit) {
        maxTicks = Math.min(maxTicksLimit, maxTicks);
      }
      return maxTicks;
    }
    computeTickLimit() {
      return Number.POSITIVE_INFINITY;
    }
    buildTicks() {
      const opts = this.options;
      const tickOpts = opts.ticks;
      let maxTicks = this.getTickLimit();
      maxTicks = Math.max(2, maxTicks);
      const numericGeneratorOptions = {
        maxTicks,
        bounds: opts.bounds,
        min: opts.min,
        max: opts.max,
        precision: tickOpts.precision,
        step: tickOpts.stepSize,
        count: tickOpts.count,
        maxDigits: this._maxDigits(),
        horizontal: this.isHorizontal(),
        minRotation: tickOpts.minRotation || 0,
        includeBounds: tickOpts.includeBounds !== false
      };
      const dataRange = this._range || this;
      const ticks2 = generateTicks$1(numericGeneratorOptions, dataRange);
      if (opts.bounds === "ticks") {
        _setMinAndMaxByKey(ticks2, this, "value");
      }
      if (opts.reverse) {
        ticks2.reverse();
        this.start = this.max;
        this.end = this.min;
      } else {
        this.start = this.min;
        this.end = this.max;
      }
      return ticks2;
    }
    configure() {
      const ticks2 = this.ticks;
      let start2 = this.min;
      let end = this.max;
      super.configure();
      if (this.options.offset && ticks2.length) {
        const offset = (end - start2) / Math.max(ticks2.length - 1, 1) / 2;
        start2 -= offset;
        end += offset;
      }
      this._startValue = start2;
      this._endValue = end;
      this._valueRange = end - start2;
    }
    getLabelForValue(value) {
      return formatNumber(value, this.chart.options.locale, this.options.ticks.format);
    }
  };
  var LinearScale = class extends LinearScaleBase {
    determineDataLimits() {
      const { min, max } = this.getMinMax(true);
      this.min = isNumberFinite(min) ? min : 0;
      this.max = isNumberFinite(max) ? max : 1;
      this.handleTickRangeOptions();
    }
    computeTickLimit() {
      const horizontal = this.isHorizontal();
      const length = horizontal ? this.width : this.height;
      const minRotation = toRadians(this.options.ticks.minRotation);
      const ratio = (horizontal ? Math.sin(minRotation) : Math.cos(minRotation)) || 1e-3;
      const tickFont = this._resolveTickFontOptions(0);
      return Math.ceil(length / Math.min(40, tickFont.lineHeight / ratio));
    }
    getPixelForValue(value) {
      return value === null ? NaN : this.getPixelForDecimal((value - this._startValue) / this._valueRange);
    }
    getValueForPixel(pixel) {
      return this._startValue + this.getDecimalForPixel(pixel) * this._valueRange;
    }
  };
  LinearScale.id = "linear";
  LinearScale.defaults = {
    ticks: {
      callback: Ticks.formatters.numeric
    }
  };
  function isMajor(tickVal) {
    const remain = tickVal / Math.pow(10, Math.floor(log10(tickVal)));
    return remain === 1;
  }
  function generateTicks(generationOptions, dataRange) {
    const endExp = Math.floor(log10(dataRange.max));
    const endSignificand = Math.ceil(dataRange.max / Math.pow(10, endExp));
    const ticks2 = [];
    let tickVal = finiteOrDefault(generationOptions.min, Math.pow(10, Math.floor(log10(dataRange.min))));
    let exp = Math.floor(log10(tickVal));
    let significand = Math.floor(tickVal / Math.pow(10, exp));
    let precision = exp < 0 ? Math.pow(10, Math.abs(exp)) : 1;
    do {
      ticks2.push({ value: tickVal, major: isMajor(tickVal) });
      ++significand;
      if (significand === 10) {
        significand = 1;
        ++exp;
        precision = exp >= 0 ? 1 : precision;
      }
      tickVal = Math.round(significand * Math.pow(10, exp) * precision) / precision;
    } while (exp < endExp || exp === endExp && significand < endSignificand);
    const lastTick = finiteOrDefault(generationOptions.max, tickVal);
    ticks2.push({ value: lastTick, major: isMajor(tickVal) });
    return ticks2;
  }
  var LogarithmicScale = class extends Scale {
    constructor(cfg) {
      super(cfg);
      this.start = void 0;
      this.end = void 0;
      this._startValue = void 0;
      this._valueRange = 0;
    }
    parse(raw, index) {
      const value = LinearScaleBase.prototype.parse.apply(this, [raw, index]);
      if (value === 0) {
        this._zero = true;
        return void 0;
      }
      return isNumberFinite(value) && value > 0 ? value : null;
    }
    determineDataLimits() {
      const { min, max } = this.getMinMax(true);
      this.min = isNumberFinite(min) ? Math.max(0, min) : null;
      this.max = isNumberFinite(max) ? Math.max(0, max) : null;
      if (this.options.beginAtZero) {
        this._zero = true;
      }
      this.handleTickRangeOptions();
    }
    handleTickRangeOptions() {
      const { minDefined, maxDefined } = this.getUserBounds();
      let min = this.min;
      let max = this.max;
      const setMin = (v4) => min = minDefined ? min : v4;
      const setMax = (v4) => max = maxDefined ? max : v4;
      const exp = (v4, m4) => Math.pow(10, Math.floor(log10(v4)) + m4);
      if (min === max) {
        if (min <= 0) {
          setMin(1);
          setMax(10);
        } else {
          setMin(exp(min, -1));
          setMax(exp(max, 1));
        }
      }
      if (min <= 0) {
        setMin(exp(max, -1));
      }
      if (max <= 0) {
        setMax(exp(min, 1));
      }
      if (this._zero && this.min !== this._suggestedMin && min === exp(this.min, 0)) {
        setMin(exp(min, -1));
      }
      this.min = min;
      this.max = max;
    }
    buildTicks() {
      const opts = this.options;
      const generationOptions = {
        min: this._userMin,
        max: this._userMax
      };
      const ticks2 = generateTicks(generationOptions, this);
      if (opts.bounds === "ticks") {
        _setMinAndMaxByKey(ticks2, this, "value");
      }
      if (opts.reverse) {
        ticks2.reverse();
        this.start = this.max;
        this.end = this.min;
      } else {
        this.start = this.min;
        this.end = this.max;
      }
      return ticks2;
    }
    getLabelForValue(value) {
      return value === void 0 ? "0" : formatNumber(value, this.chart.options.locale, this.options.ticks.format);
    }
    configure() {
      const start2 = this.min;
      super.configure();
      this._startValue = log10(start2);
      this._valueRange = log10(this.max) - log10(start2);
    }
    getPixelForValue(value) {
      if (value === void 0 || value === 0) {
        value = this.min;
      }
      if (value === null || isNaN(value)) {
        return NaN;
      }
      return this.getPixelForDecimal(value === this.min ? 0 : (log10(value) - this._startValue) / this._valueRange);
    }
    getValueForPixel(pixel) {
      const decimal = this.getDecimalForPixel(pixel);
      return Math.pow(10, this._startValue + decimal * this._valueRange);
    }
  };
  LogarithmicScale.id = "logarithmic";
  LogarithmicScale.defaults = {
    ticks: {
      callback: Ticks.formatters.logarithmic,
      major: {
        enabled: true
      }
    }
  };
  function getTickBackdropHeight(opts) {
    const tickOpts = opts.ticks;
    if (tickOpts.display && opts.display) {
      const padding = toPadding(tickOpts.backdropPadding);
      return valueOrDefault(tickOpts.font && tickOpts.font.size, defaults.font.size) + padding.height;
    }
    return 0;
  }
  function measureLabelSize(ctx2, font, label) {
    label = isArray(label) ? label : [label];
    return {
      w: _longestText(ctx2, font.string, label),
      h: label.length * font.lineHeight
    };
  }
  function determineLimits(angle, pos, size, min, max) {
    if (angle === min || angle === max) {
      return {
        start: pos - size / 2,
        end: pos + size / 2
      };
    } else if (angle < min || angle > max) {
      return {
        start: pos - size,
        end: pos
      };
    }
    return {
      start: pos,
      end: pos + size
    };
  }
  function fitWithPointLabels(scale2) {
    const orig = {
      l: scale2.left + scale2._padding.left,
      r: scale2.right - scale2._padding.right,
      t: scale2.top + scale2._padding.top,
      b: scale2.bottom - scale2._padding.bottom
    };
    const limits = Object.assign({}, orig);
    const labelSizes = [];
    const padding = [];
    const valueCount = scale2._pointLabels.length;
    const pointLabelOpts = scale2.options.pointLabels;
    const additionalAngle = pointLabelOpts.centerPointLabels ? PI / valueCount : 0;
    for (let i6 = 0; i6 < valueCount; i6++) {
      const opts = pointLabelOpts.setContext(scale2.getPointLabelContext(i6));
      padding[i6] = opts.padding;
      const pointPosition = scale2.getPointPosition(i6, scale2.drawingArea + padding[i6], additionalAngle);
      const plFont = toFont(opts.font);
      const textSize = measureLabelSize(scale2.ctx, plFont, scale2._pointLabels[i6]);
      labelSizes[i6] = textSize;
      const angleRadians = _normalizeAngle(scale2.getIndexAngle(i6) + additionalAngle);
      const angle = Math.round(toDegrees(angleRadians));
      const hLimits = determineLimits(angle, pointPosition.x, textSize.w, 0, 180);
      const vLimits = determineLimits(angle, pointPosition.y, textSize.h, 90, 270);
      updateLimits(limits, orig, angleRadians, hLimits, vLimits);
    }
    scale2.setCenterPoint(
      orig.l - limits.l,
      limits.r - orig.r,
      orig.t - limits.t,
      limits.b - orig.b
    );
    scale2._pointLabelItems = buildPointLabelItems(scale2, labelSizes, padding);
  }
  function updateLimits(limits, orig, angle, hLimits, vLimits) {
    const sin = Math.abs(Math.sin(angle));
    const cos = Math.abs(Math.cos(angle));
    let x3 = 0;
    let y4 = 0;
    if (hLimits.start < orig.l) {
      x3 = (orig.l - hLimits.start) / sin;
      limits.l = Math.min(limits.l, orig.l - x3);
    } else if (hLimits.end > orig.r) {
      x3 = (hLimits.end - orig.r) / sin;
      limits.r = Math.max(limits.r, orig.r + x3);
    }
    if (vLimits.start < orig.t) {
      y4 = (orig.t - vLimits.start) / cos;
      limits.t = Math.min(limits.t, orig.t - y4);
    } else if (vLimits.end > orig.b) {
      y4 = (vLimits.end - orig.b) / cos;
      limits.b = Math.max(limits.b, orig.b + y4);
    }
  }
  function buildPointLabelItems(scale2, labelSizes, padding) {
    const items = [];
    const valueCount = scale2._pointLabels.length;
    const opts = scale2.options;
    const extra = getTickBackdropHeight(opts) / 2;
    const outerDistance = scale2.drawingArea;
    const additionalAngle = opts.pointLabels.centerPointLabels ? PI / valueCount : 0;
    for (let i6 = 0; i6 < valueCount; i6++) {
      const pointLabelPosition = scale2.getPointPosition(i6, outerDistance + extra + padding[i6], additionalAngle);
      const angle = Math.round(toDegrees(_normalizeAngle(pointLabelPosition.angle + HALF_PI)));
      const size = labelSizes[i6];
      const y4 = yForAngle(pointLabelPosition.y, size.h, angle);
      const textAlign = getTextAlignForAngle(angle);
      const left = leftForTextAlign(pointLabelPosition.x, size.w, textAlign);
      items.push({
        x: pointLabelPosition.x,
        y: y4,
        textAlign,
        left,
        top: y4,
        right: left + size.w,
        bottom: y4 + size.h
      });
    }
    return items;
  }
  function getTextAlignForAngle(angle) {
    if (angle === 0 || angle === 180) {
      return "center";
    } else if (angle < 180) {
      return "left";
    }
    return "right";
  }
  function leftForTextAlign(x3, w3, align) {
    if (align === "right") {
      x3 -= w3;
    } else if (align === "center") {
      x3 -= w3 / 2;
    }
    return x3;
  }
  function yForAngle(y4, h, angle) {
    if (angle === 90 || angle === 270) {
      y4 -= h / 2;
    } else if (angle > 270 || angle < 90) {
      y4 -= h;
    }
    return y4;
  }
  function drawPointLabels(scale2, labelCount) {
    const { ctx: ctx2, options: { pointLabels } } = scale2;
    for (let i6 = labelCount - 1; i6 >= 0; i6--) {
      const optsAtIndex = pointLabels.setContext(scale2.getPointLabelContext(i6));
      const plFont = toFont(optsAtIndex.font);
      const { x: x3, y: y4, textAlign, left, top, right, bottom } = scale2._pointLabelItems[i6];
      const { backdropColor } = optsAtIndex;
      if (!isNullOrUndef(backdropColor)) {
        const borderRadius = toTRBLCorners(optsAtIndex.borderRadius);
        const padding = toPadding(optsAtIndex.backdropPadding);
        ctx2.fillStyle = backdropColor;
        const backdropLeft = left - padding.left;
        const backdropTop = top - padding.top;
        const backdropWidth = right - left + padding.width;
        const backdropHeight = bottom - top + padding.height;
        if (Object.values(borderRadius).some((v4) => v4 !== 0)) {
          ctx2.beginPath();
          addRoundedRectPath(ctx2, {
            x: backdropLeft,
            y: backdropTop,
            w: backdropWidth,
            h: backdropHeight,
            radius: borderRadius
          });
          ctx2.fill();
        } else {
          ctx2.fillRect(backdropLeft, backdropTop, backdropWidth, backdropHeight);
        }
      }
      renderText(
        ctx2,
        scale2._pointLabels[i6],
        x3,
        y4 + plFont.lineHeight / 2,
        plFont,
        {
          color: optsAtIndex.color,
          textAlign,
          textBaseline: "middle"
        }
      );
    }
  }
  function pathRadiusLine(scale2, radius, circular, labelCount) {
    const { ctx: ctx2 } = scale2;
    if (circular) {
      ctx2.arc(scale2.xCenter, scale2.yCenter, radius, 0, TAU);
    } else {
      let pointPosition = scale2.getPointPosition(0, radius);
      ctx2.moveTo(pointPosition.x, pointPosition.y);
      for (let i6 = 1; i6 < labelCount; i6++) {
        pointPosition = scale2.getPointPosition(i6, radius);
        ctx2.lineTo(pointPosition.x, pointPosition.y);
      }
    }
  }
  function drawRadiusLine(scale2, gridLineOpts, radius, labelCount) {
    const ctx2 = scale2.ctx;
    const circular = gridLineOpts.circular;
    const { color: color5, lineWidth } = gridLineOpts;
    if (!circular && !labelCount || !color5 || !lineWidth || radius < 0) {
      return;
    }
    ctx2.save();
    ctx2.strokeStyle = color5;
    ctx2.lineWidth = lineWidth;
    ctx2.setLineDash(gridLineOpts.borderDash);
    ctx2.lineDashOffset = gridLineOpts.borderDashOffset;
    ctx2.beginPath();
    pathRadiusLine(scale2, radius, circular, labelCount);
    ctx2.closePath();
    ctx2.stroke();
    ctx2.restore();
  }
  function createPointLabelContext(parent, index, label) {
    return createContext(parent, {
      label,
      index,
      type: "pointLabel"
    });
  }
  var RadialLinearScale = class extends LinearScaleBase {
    constructor(cfg) {
      super(cfg);
      this.xCenter = void 0;
      this.yCenter = void 0;
      this.drawingArea = void 0;
      this._pointLabels = [];
      this._pointLabelItems = [];
    }
    setDimensions() {
      const padding = this._padding = toPadding(getTickBackdropHeight(this.options) / 2);
      const w3 = this.width = this.maxWidth - padding.width;
      const h = this.height = this.maxHeight - padding.height;
      this.xCenter = Math.floor(this.left + w3 / 2 + padding.left);
      this.yCenter = Math.floor(this.top + h / 2 + padding.top);
      this.drawingArea = Math.floor(Math.min(w3, h) / 2);
    }
    determineDataLimits() {
      const { min, max } = this.getMinMax(false);
      this.min = isNumberFinite(min) && !isNaN(min) ? min : 0;
      this.max = isNumberFinite(max) && !isNaN(max) ? max : 0;
      this.handleTickRangeOptions();
    }
    computeTickLimit() {
      return Math.ceil(this.drawingArea / getTickBackdropHeight(this.options));
    }
    generateTickLabels(ticks2) {
      LinearScaleBase.prototype.generateTickLabels.call(this, ticks2);
      this._pointLabels = this.getLabels().map((value, index) => {
        const label = callback(this.options.pointLabels.callback, [value, index], this);
        return label || label === 0 ? label : "";
      }).filter((v4, i6) => this.chart.getDataVisibility(i6));
    }
    fit() {
      const opts = this.options;
      if (opts.display && opts.pointLabels.display) {
        fitWithPointLabels(this);
      } else {
        this.setCenterPoint(0, 0, 0, 0);
      }
    }
    setCenterPoint(leftMovement, rightMovement, topMovement, bottomMovement) {
      this.xCenter += Math.floor((leftMovement - rightMovement) / 2);
      this.yCenter += Math.floor((topMovement - bottomMovement) / 2);
      this.drawingArea -= Math.min(this.drawingArea / 2, Math.max(leftMovement, rightMovement, topMovement, bottomMovement));
    }
    getIndexAngle(index) {
      const angleMultiplier = TAU / (this._pointLabels.length || 1);
      const startAngle = this.options.startAngle || 0;
      return _normalizeAngle(index * angleMultiplier + toRadians(startAngle));
    }
    getDistanceFromCenterForValue(value) {
      if (isNullOrUndef(value)) {
        return NaN;
      }
      const scalingFactor = this.drawingArea / (this.max - this.min);
      if (this.options.reverse) {
        return (this.max - value) * scalingFactor;
      }
      return (value - this.min) * scalingFactor;
    }
    getValueForDistanceFromCenter(distance) {
      if (isNullOrUndef(distance)) {
        return NaN;
      }
      const scaledDistance = distance / (this.drawingArea / (this.max - this.min));
      return this.options.reverse ? this.max - scaledDistance : this.min + scaledDistance;
    }
    getPointLabelContext(index) {
      const pointLabels = this._pointLabels || [];
      if (index >= 0 && index < pointLabels.length) {
        const pointLabel = pointLabels[index];
        return createPointLabelContext(this.getContext(), index, pointLabel);
      }
    }
    getPointPosition(index, distanceFromCenter, additionalAngle = 0) {
      const angle = this.getIndexAngle(index) - HALF_PI + additionalAngle;
      return {
        x: Math.cos(angle) * distanceFromCenter + this.xCenter,
        y: Math.sin(angle) * distanceFromCenter + this.yCenter,
        angle
      };
    }
    getPointPositionForValue(index, value) {
      return this.getPointPosition(index, this.getDistanceFromCenterForValue(value));
    }
    getBasePosition(index) {
      return this.getPointPositionForValue(index || 0, this.getBaseValue());
    }
    getPointLabelPosition(index) {
      const { left, top, right, bottom } = this._pointLabelItems[index];
      return {
        left,
        top,
        right,
        bottom
      };
    }
    drawBackground() {
      const { backgroundColor, grid: { circular } } = this.options;
      if (backgroundColor) {
        const ctx2 = this.ctx;
        ctx2.save();
        ctx2.beginPath();
        pathRadiusLine(this, this.getDistanceFromCenterForValue(this._endValue), circular, this._pointLabels.length);
        ctx2.closePath();
        ctx2.fillStyle = backgroundColor;
        ctx2.fill();
        ctx2.restore();
      }
    }
    drawGrid() {
      const ctx2 = this.ctx;
      const opts = this.options;
      const { angleLines, grid } = opts;
      const labelCount = this._pointLabels.length;
      let i6, offset, position;
      if (opts.pointLabels.display) {
        drawPointLabels(this, labelCount);
      }
      if (grid.display) {
        this.ticks.forEach((tick, index) => {
          if (index !== 0) {
            offset = this.getDistanceFromCenterForValue(tick.value);
            const optsAtIndex = grid.setContext(this.getContext(index - 1));
            drawRadiusLine(this, optsAtIndex, offset, labelCount);
          }
        });
      }
      if (angleLines.display) {
        ctx2.save();
        for (i6 = labelCount - 1; i6 >= 0; i6--) {
          const optsAtIndex = angleLines.setContext(this.getPointLabelContext(i6));
          const { color: color5, lineWidth } = optsAtIndex;
          if (!lineWidth || !color5) {
            continue;
          }
          ctx2.lineWidth = lineWidth;
          ctx2.strokeStyle = color5;
          ctx2.setLineDash(optsAtIndex.borderDash);
          ctx2.lineDashOffset = optsAtIndex.borderDashOffset;
          offset = this.getDistanceFromCenterForValue(opts.ticks.reverse ? this.min : this.max);
          position = this.getPointPosition(i6, offset);
          ctx2.beginPath();
          ctx2.moveTo(this.xCenter, this.yCenter);
          ctx2.lineTo(position.x, position.y);
          ctx2.stroke();
        }
        ctx2.restore();
      }
    }
    drawBorder() {
    }
    drawLabels() {
      const ctx2 = this.ctx;
      const opts = this.options;
      const tickOpts = opts.ticks;
      if (!tickOpts.display) {
        return;
      }
      const startAngle = this.getIndexAngle(0);
      let offset, width;
      ctx2.save();
      ctx2.translate(this.xCenter, this.yCenter);
      ctx2.rotate(startAngle);
      ctx2.textAlign = "center";
      ctx2.textBaseline = "middle";
      this.ticks.forEach((tick, index) => {
        if (index === 0 && !opts.reverse) {
          return;
        }
        const optsAtIndex = tickOpts.setContext(this.getContext(index));
        const tickFont = toFont(optsAtIndex.font);
        offset = this.getDistanceFromCenterForValue(this.ticks[index].value);
        if (optsAtIndex.showLabelBackdrop) {
          ctx2.font = tickFont.string;
          width = ctx2.measureText(tick.label).width;
          ctx2.fillStyle = optsAtIndex.backdropColor;
          const padding = toPadding(optsAtIndex.backdropPadding);
          ctx2.fillRect(
            -width / 2 - padding.left,
            -offset - tickFont.size / 2 - padding.top,
            width + padding.width,
            tickFont.size + padding.height
          );
        }
        renderText(ctx2, tick.label, 0, -offset, tickFont, {
          color: optsAtIndex.color
        });
      });
      ctx2.restore();
    }
    drawTitle() {
    }
  };
  RadialLinearScale.id = "radialLinear";
  RadialLinearScale.defaults = {
    display: true,
    animate: true,
    position: "chartArea",
    angleLines: {
      display: true,
      lineWidth: 1,
      borderDash: [],
      borderDashOffset: 0
    },
    grid: {
      circular: false
    },
    startAngle: 0,
    ticks: {
      showLabelBackdrop: true,
      callback: Ticks.formatters.numeric
    },
    pointLabels: {
      backdropColor: void 0,
      backdropPadding: 2,
      display: true,
      font: {
        size: 10
      },
      callback(label) {
        return label;
      },
      padding: 5,
      centerPointLabels: false
    }
  };
  RadialLinearScale.defaultRoutes = {
    "angleLines.color": "borderColor",
    "pointLabels.color": "color",
    "ticks.color": "color"
  };
  RadialLinearScale.descriptors = {
    angleLines: {
      _fallback: "grid"
    }
  };
  var INTERVALS = {
    millisecond: { common: true, size: 1, steps: 1e3 },
    second: { common: true, size: 1e3, steps: 60 },
    minute: { common: true, size: 6e4, steps: 60 },
    hour: { common: true, size: 36e5, steps: 24 },
    day: { common: true, size: 864e5, steps: 30 },
    week: { common: false, size: 6048e5, steps: 4 },
    month: { common: true, size: 2628e6, steps: 12 },
    quarter: { common: false, size: 7884e6, steps: 4 },
    year: { common: true, size: 3154e7 }
  };
  var UNITS = Object.keys(INTERVALS);
  function sorter(a2, b3) {
    return a2 - b3;
  }
  function parse(scale2, input) {
    if (isNullOrUndef(input)) {
      return null;
    }
    const adapter = scale2._adapter;
    const { parser, round: round2, isoWeekday } = scale2._parseOpts;
    let value = input;
    if (typeof parser === "function") {
      value = parser(value);
    }
    if (!isNumberFinite(value)) {
      value = typeof parser === "string" ? adapter.parse(value, parser) : adapter.parse(value);
    }
    if (value === null) {
      return null;
    }
    if (round2) {
      value = round2 === "week" && (isNumber(isoWeekday) || isoWeekday === true) ? adapter.startOf(value, "isoWeek", isoWeekday) : adapter.startOf(value, round2);
    }
    return +value;
  }
  function determineUnitForAutoTicks(minUnit, min, max, capacity) {
    const ilen = UNITS.length;
    for (let i6 = UNITS.indexOf(minUnit); i6 < ilen - 1; ++i6) {
      const interval = INTERVALS[UNITS[i6]];
      const factor = interval.steps ? interval.steps : Number.MAX_SAFE_INTEGER;
      if (interval.common && Math.ceil((max - min) / (factor * interval.size)) <= capacity) {
        return UNITS[i6];
      }
    }
    return UNITS[ilen - 1];
  }
  function determineUnitForFormatting(scale2, numTicks, minUnit, min, max) {
    for (let i6 = UNITS.length - 1; i6 >= UNITS.indexOf(minUnit); i6--) {
      const unit2 = UNITS[i6];
      if (INTERVALS[unit2].common && scale2._adapter.diff(max, min, unit2) >= numTicks - 1) {
        return unit2;
      }
    }
    return UNITS[minUnit ? UNITS.indexOf(minUnit) : 0];
  }
  function determineMajorUnit(unit2) {
    for (let i6 = UNITS.indexOf(unit2) + 1, ilen = UNITS.length; i6 < ilen; ++i6) {
      if (INTERVALS[UNITS[i6]].common) {
        return UNITS[i6];
      }
    }
  }
  function addTick(ticks2, time, timestamps) {
    if (!timestamps) {
      ticks2[time] = true;
    } else if (timestamps.length) {
      const { lo, hi } = _lookup(timestamps, time);
      const timestamp = timestamps[lo] >= time ? timestamps[lo] : timestamps[hi];
      ticks2[timestamp] = true;
    }
  }
  function setMajorTicks(scale2, ticks2, map3, majorUnit) {
    const adapter = scale2._adapter;
    const first = +adapter.startOf(ticks2[0].value, majorUnit);
    const last = ticks2[ticks2.length - 1].value;
    let major, index;
    for (major = first; major <= last; major = +adapter.add(major, 1, majorUnit)) {
      index = map3[major];
      if (index >= 0) {
        ticks2[index].major = true;
      }
    }
    return ticks2;
  }
  function ticksFromTimestamps(scale2, values, majorUnit) {
    const ticks2 = [];
    const map3 = {};
    const ilen = values.length;
    let i6, value;
    for (i6 = 0; i6 < ilen; ++i6) {
      value = values[i6];
      map3[value] = i6;
      ticks2.push({
        value,
        major: false
      });
    }
    return ilen === 0 || !majorUnit ? ticks2 : setMajorTicks(scale2, ticks2, map3, majorUnit);
  }
  var TimeScale = class extends Scale {
    constructor(props) {
      super(props);
      this._cache = {
        data: [],
        labels: [],
        all: []
      };
      this._unit = "day";
      this._majorUnit = void 0;
      this._offsets = {};
      this._normalized = false;
      this._parseOpts = void 0;
    }
    init(scaleOpts, opts) {
      const time = scaleOpts.time || (scaleOpts.time = {});
      const adapter = this._adapter = new adapters._date(scaleOpts.adapters.date);
      adapter.init(opts);
      mergeIf(time.displayFormats, adapter.formats());
      this._parseOpts = {
        parser: time.parser,
        round: time.round,
        isoWeekday: time.isoWeekday
      };
      super.init(scaleOpts);
      this._normalized = opts.normalized;
    }
    parse(raw, index) {
      if (raw === void 0) {
        return null;
      }
      return parse(this, raw);
    }
    beforeLayout() {
      super.beforeLayout();
      this._cache = {
        data: [],
        labels: [],
        all: []
      };
    }
    determineDataLimits() {
      const options = this.options;
      const adapter = this._adapter;
      const unit2 = options.time.unit || "day";
      let { min, max, minDefined, maxDefined } = this.getUserBounds();
      function _applyBounds(bounds) {
        if (!minDefined && !isNaN(bounds.min)) {
          min = Math.min(min, bounds.min);
        }
        if (!maxDefined && !isNaN(bounds.max)) {
          max = Math.max(max, bounds.max);
        }
      }
      if (!minDefined || !maxDefined) {
        _applyBounds(this._getLabelBounds());
        if (options.bounds !== "ticks" || options.ticks.source !== "labels") {
          _applyBounds(this.getMinMax(false));
        }
      }
      min = isNumberFinite(min) && !isNaN(min) ? min : +adapter.startOf(Date.now(), unit2);
      max = isNumberFinite(max) && !isNaN(max) ? max : +adapter.endOf(Date.now(), unit2) + 1;
      this.min = Math.min(min, max - 1);
      this.max = Math.max(min + 1, max);
    }
    _getLabelBounds() {
      const arr = this.getLabelTimestamps();
      let min = Number.POSITIVE_INFINITY;
      let max = Number.NEGATIVE_INFINITY;
      if (arr.length) {
        min = arr[0];
        max = arr[arr.length - 1];
      }
      return { min, max };
    }
    buildTicks() {
      const options = this.options;
      const timeOpts = options.time;
      const tickOpts = options.ticks;
      const timestamps = tickOpts.source === "labels" ? this.getLabelTimestamps() : this._generate();
      if (options.bounds === "ticks" && timestamps.length) {
        this.min = this._userMin || timestamps[0];
        this.max = this._userMax || timestamps[timestamps.length - 1];
      }
      const min = this.min;
      const max = this.max;
      const ticks2 = _filterBetween(timestamps, min, max);
      this._unit = timeOpts.unit || (tickOpts.autoSkip ? determineUnitForAutoTicks(timeOpts.minUnit, this.min, this.max, this._getLabelCapacity(min)) : determineUnitForFormatting(this, ticks2.length, timeOpts.minUnit, this.min, this.max));
      this._majorUnit = !tickOpts.major.enabled || this._unit === "year" ? void 0 : determineMajorUnit(this._unit);
      this.initOffsets(timestamps);
      if (options.reverse) {
        ticks2.reverse();
      }
      return ticksFromTimestamps(this, ticks2, this._majorUnit);
    }
    afterAutoSkip() {
      if (this.options.offsetAfterAutoskip) {
        this.initOffsets(this.ticks.map((tick) => +tick.value));
      }
    }
    initOffsets(timestamps) {
      let start2 = 0;
      let end = 0;
      let first, last;
      if (this.options.offset && timestamps.length) {
        first = this.getDecimalForValue(timestamps[0]);
        if (timestamps.length === 1) {
          start2 = 1 - first;
        } else {
          start2 = (this.getDecimalForValue(timestamps[1]) - first) / 2;
        }
        last = this.getDecimalForValue(timestamps[timestamps.length - 1]);
        if (timestamps.length === 1) {
          end = last;
        } else {
          end = (last - this.getDecimalForValue(timestamps[timestamps.length - 2])) / 2;
        }
      }
      const limit = timestamps.length < 3 ? 0.5 : 0.25;
      start2 = _limitValue(start2, 0, limit);
      end = _limitValue(end, 0, limit);
      this._offsets = { start: start2, end, factor: 1 / (start2 + 1 + end) };
    }
    _generate() {
      const adapter = this._adapter;
      const min = this.min;
      const max = this.max;
      const options = this.options;
      const timeOpts = options.time;
      const minor = timeOpts.unit || determineUnitForAutoTicks(timeOpts.minUnit, min, max, this._getLabelCapacity(min));
      const stepSize = valueOrDefault(timeOpts.stepSize, 1);
      const weekday2 = minor === "week" ? timeOpts.isoWeekday : false;
      const hasWeekday = isNumber(weekday2) || weekday2 === true;
      const ticks2 = {};
      let first = min;
      let time, count2;
      if (hasWeekday) {
        first = +adapter.startOf(first, "isoWeek", weekday2);
      }
      first = +adapter.startOf(first, hasWeekday ? "day" : minor);
      if (adapter.diff(max, min, minor) > 1e5 * stepSize) {
        throw new Error(min + " and " + max + " are too far apart with stepSize of " + stepSize + " " + minor);
      }
      const timestamps = options.ticks.source === "data" && this.getDataTimestamps();
      for (time = first, count2 = 0; time < max; time = +adapter.add(time, stepSize, minor), count2++) {
        addTick(ticks2, time, timestamps);
      }
      if (time === max || options.bounds === "ticks" || count2 === 1) {
        addTick(ticks2, time, timestamps);
      }
      return Object.keys(ticks2).sort((a2, b3) => a2 - b3).map((x3) => +x3);
    }
    getLabelForValue(value) {
      const adapter = this._adapter;
      const timeOpts = this.options.time;
      if (timeOpts.tooltipFormat) {
        return adapter.format(value, timeOpts.tooltipFormat);
      }
      return adapter.format(value, timeOpts.displayFormats.datetime);
    }
    _tickFormatFunction(time, index, ticks2, format2) {
      const options = this.options;
      const formats = options.time.displayFormats;
      const unit2 = this._unit;
      const majorUnit = this._majorUnit;
      const minorFormat = unit2 && formats[unit2];
      const majorFormat = majorUnit && formats[majorUnit];
      const tick = ticks2[index];
      const major = majorUnit && majorFormat && tick && tick.major;
      const label = this._adapter.format(time, format2 || (major ? majorFormat : minorFormat));
      const formatter2 = options.ticks.callback;
      return formatter2 ? callback(formatter2, [label, index, ticks2], this) : label;
    }
    generateTickLabels(ticks2) {
      let i6, ilen, tick;
      for (i6 = 0, ilen = ticks2.length; i6 < ilen; ++i6) {
        tick = ticks2[i6];
        tick.label = this._tickFormatFunction(tick.value, i6, ticks2);
      }
    }
    getDecimalForValue(value) {
      return value === null ? NaN : (value - this.min) / (this.max - this.min);
    }
    getPixelForValue(value) {
      const offsets = this._offsets;
      const pos = this.getDecimalForValue(value);
      return this.getPixelForDecimal((offsets.start + pos) * offsets.factor);
    }
    getValueForPixel(pixel) {
      const offsets = this._offsets;
      const pos = this.getDecimalForPixel(pixel) / offsets.factor - offsets.end;
      return this.min + pos * (this.max - this.min);
    }
    _getLabelSize(label) {
      const ticksOpts = this.options.ticks;
      const tickLabelWidth = this.ctx.measureText(label).width;
      const angle = toRadians(this.isHorizontal() ? ticksOpts.maxRotation : ticksOpts.minRotation);
      const cosRotation = Math.cos(angle);
      const sinRotation = Math.sin(angle);
      const tickFontSize = this._resolveTickFontOptions(0).size;
      return {
        w: tickLabelWidth * cosRotation + tickFontSize * sinRotation,
        h: tickLabelWidth * sinRotation + tickFontSize * cosRotation
      };
    }
    _getLabelCapacity(exampleTime) {
      const timeOpts = this.options.time;
      const displayFormats = timeOpts.displayFormats;
      const format2 = displayFormats[timeOpts.unit] || displayFormats.millisecond;
      const exampleLabel = this._tickFormatFunction(exampleTime, 0, ticksFromTimestamps(this, [exampleTime], this._majorUnit), format2);
      const size = this._getLabelSize(exampleLabel);
      const capacity = Math.floor(this.isHorizontal() ? this.width / size.w : this.height / size.h) - 1;
      return capacity > 0 ? capacity : 1;
    }
    getDataTimestamps() {
      let timestamps = this._cache.data || [];
      let i6, ilen;
      if (timestamps.length) {
        return timestamps;
      }
      const metas = this.getMatchingVisibleMetas();
      if (this._normalized && metas.length) {
        return this._cache.data = metas[0].controller.getAllParsedValues(this);
      }
      for (i6 = 0, ilen = metas.length; i6 < ilen; ++i6) {
        timestamps = timestamps.concat(metas[i6].controller.getAllParsedValues(this));
      }
      return this._cache.data = this.normalize(timestamps);
    }
    getLabelTimestamps() {
      const timestamps = this._cache.labels || [];
      let i6, ilen;
      if (timestamps.length) {
        return timestamps;
      }
      const labels = this.getLabels();
      for (i6 = 0, ilen = labels.length; i6 < ilen; ++i6) {
        timestamps.push(parse(this, labels[i6]));
      }
      return this._cache.labels = this._normalized ? timestamps : this.normalize(timestamps);
    }
    normalize(values) {
      return _arrayUnique(values.sort(sorter));
    }
  };
  TimeScale.id = "time";
  TimeScale.defaults = {
    bounds: "data",
    adapters: {},
    time: {
      parser: false,
      unit: false,
      round: false,
      isoWeekday: false,
      minUnit: "millisecond",
      displayFormats: {}
    },
    ticks: {
      source: "auto",
      major: {
        enabled: false
      }
    }
  };
  function interpolate2(table, val2, reverse) {
    let lo = 0;
    let hi = table.length - 1;
    let prevSource, nextSource, prevTarget, nextTarget;
    if (reverse) {
      if (val2 >= table[lo].pos && val2 <= table[hi].pos) {
        ({ lo, hi } = _lookupByKey(table, "pos", val2));
      }
      ({ pos: prevSource, time: prevTarget } = table[lo]);
      ({ pos: nextSource, time: nextTarget } = table[hi]);
    } else {
      if (val2 >= table[lo].time && val2 <= table[hi].time) {
        ({ lo, hi } = _lookupByKey(table, "time", val2));
      }
      ({ time: prevSource, pos: prevTarget } = table[lo]);
      ({ time: nextSource, pos: nextTarget } = table[hi]);
    }
    const span = nextSource - prevSource;
    return span ? prevTarget + (nextTarget - prevTarget) * (val2 - prevSource) / span : prevTarget;
  }
  var TimeSeriesScale = class extends TimeScale {
    constructor(props) {
      super(props);
      this._table = [];
      this._minPos = void 0;
      this._tableRange = void 0;
    }
    initOffsets() {
      const timestamps = this._getTimestampsForTable();
      const table = this._table = this.buildLookupTable(timestamps);
      this._minPos = interpolate2(table, this.min);
      this._tableRange = interpolate2(table, this.max) - this._minPos;
      super.initOffsets(timestamps);
    }
    buildLookupTable(timestamps) {
      const { min, max } = this;
      const items = [];
      const table = [];
      let i6, ilen, prev, curr, next;
      for (i6 = 0, ilen = timestamps.length; i6 < ilen; ++i6) {
        curr = timestamps[i6];
        if (curr >= min && curr <= max) {
          items.push(curr);
        }
      }
      if (items.length < 2) {
        return [
          { time: min, pos: 0 },
          { time: max, pos: 1 }
        ];
      }
      for (i6 = 0, ilen = items.length; i6 < ilen; ++i6) {
        next = items[i6 + 1];
        prev = items[i6 - 1];
        curr = items[i6];
        if (Math.round((next + prev) / 2) !== curr) {
          table.push({ time: curr, pos: i6 / (ilen - 1) });
        }
      }
      return table;
    }
    _getTimestampsForTable() {
      let timestamps = this._cache.all || [];
      if (timestamps.length) {
        return timestamps;
      }
      const data = this.getDataTimestamps();
      const label = this.getLabelTimestamps();
      if (data.length && label.length) {
        timestamps = this.normalize(data.concat(label));
      } else {
        timestamps = data.length ? data : label;
      }
      timestamps = this._cache.all = timestamps;
      return timestamps;
    }
    getDecimalForValue(value) {
      return (interpolate2(this._table, value) - this._minPos) / this._tableRange;
    }
    getValueForPixel(pixel) {
      const offsets = this._offsets;
      const decimal = this.getDecimalForPixel(pixel) / offsets.factor - offsets.end;
      return interpolate2(this._table, decimal * this._tableRange + this._minPos, true);
    }
  };
  TimeSeriesScale.id = "timeseries";
  TimeSeriesScale.defaults = TimeScale.defaults;

  // node_modules/chartjs-plugin-datalabels/dist/chartjs-plugin-datalabels.esm.js
  var devicePixelRatio = function() {
    if (typeof window !== "undefined") {
      if (window.devicePixelRatio) {
        return window.devicePixelRatio;
      }
      var screen = window.screen;
      if (screen) {
        return (screen.deviceXDPI || 1) / (screen.logicalXDPI || 1);
      }
    }
    return 1;
  }();
  var utils = {
    toTextLines: function(inputs) {
      var lines = [];
      var input;
      inputs = [].concat(inputs);
      while (inputs.length) {
        input = inputs.pop();
        if (typeof input === "string") {
          lines.unshift.apply(lines, input.split("\n"));
        } else if (Array.isArray(input)) {
          inputs.push.apply(inputs, input);
        } else if (!isNullOrUndef(inputs)) {
          lines.unshift("" + input);
        }
      }
      return lines;
    },
    textSize: function(ctx2, lines, font) {
      var items = [].concat(lines);
      var ilen = items.length;
      var prev = ctx2.font;
      var width = 0;
      var i6;
      ctx2.font = font.string;
      for (i6 = 0; i6 < ilen; ++i6) {
        width = Math.max(ctx2.measureText(items[i6]).width, width);
      }
      ctx2.font = prev;
      return {
        height: ilen * font.lineHeight,
        width
      };
    },
    bound: function(min, value, max) {
      return Math.max(min, Math.min(value, max));
    },
    arrayDiff: function(a0, a1) {
      var prev = a0.slice();
      var updates = [];
      var i6, j3, ilen, v4;
      for (i6 = 0, ilen = a1.length; i6 < ilen; ++i6) {
        v4 = a1[i6];
        j3 = prev.indexOf(v4);
        if (j3 === -1) {
          updates.push([v4, 1]);
        } else {
          prev.splice(j3, 1);
        }
      }
      for (i6 = 0, ilen = prev.length; i6 < ilen; ++i6) {
        updates.push([prev[i6], -1]);
      }
      return updates;
    },
    rasterize: function(v4) {
      return Math.round(v4 * devicePixelRatio) / devicePixelRatio;
    }
  };
  function orient(point5, origin) {
    var x0 = origin.x;
    var y0 = origin.y;
    if (x0 === null) {
      return { x: 0, y: -1 };
    }
    if (y0 === null) {
      return { x: 1, y: 0 };
    }
    var dx = point5.x - x0;
    var dy = point5.y - y0;
    var ln = Math.sqrt(dx * dx + dy * dy);
    return {
      x: ln ? dx / ln : 0,
      y: ln ? dy / ln : -1
    };
  }
  function aligned(x3, y4, vx, vy, align) {
    switch (align) {
      case "center":
        vx = vy = 0;
        break;
      case "bottom":
        vx = 0;
        vy = 1;
        break;
      case "right":
        vx = 1;
        vy = 0;
        break;
      case "left":
        vx = -1;
        vy = 0;
        break;
      case "top":
        vx = 0;
        vy = -1;
        break;
      case "start":
        vx = -vx;
        vy = -vy;
        break;
      case "end":
        break;
      default:
        align *= Math.PI / 180;
        vx = Math.cos(align);
        vy = Math.sin(align);
        break;
    }
    return {
      x: x3,
      y: y4,
      vx,
      vy
    };
  }
  var R_INSIDE = 0;
  var R_LEFT = 1;
  var R_RIGHT = 2;
  var R_BOTTOM = 4;
  var R_TOP = 8;
  function region(x3, y4, rect) {
    var res = R_INSIDE;
    if (x3 < rect.left) {
      res |= R_LEFT;
    } else if (x3 > rect.right) {
      res |= R_RIGHT;
    }
    if (y4 < rect.top) {
      res |= R_TOP;
    } else if (y4 > rect.bottom) {
      res |= R_BOTTOM;
    }
    return res;
  }
  function clipped(segment, area) {
    var x0 = segment.x0;
    var y0 = segment.y0;
    var x1 = segment.x1;
    var y1 = segment.y1;
    var r0 = region(x0, y0, area);
    var r1 = region(x1, y1, area);
    var r6, x3, y4;
    while (true) {
      if (!(r0 | r1) || r0 & r1) {
        break;
      }
      r6 = r0 || r1;
      if (r6 & R_TOP) {
        x3 = x0 + (x1 - x0) * (area.top - y0) / (y1 - y0);
        y4 = area.top;
      } else if (r6 & R_BOTTOM) {
        x3 = x0 + (x1 - x0) * (area.bottom - y0) / (y1 - y0);
        y4 = area.bottom;
      } else if (r6 & R_RIGHT) {
        y4 = y0 + (y1 - y0) * (area.right - x0) / (x1 - x0);
        x3 = area.right;
      } else if (r6 & R_LEFT) {
        y4 = y0 + (y1 - y0) * (area.left - x0) / (x1 - x0);
        x3 = area.left;
      }
      if (r6 === r0) {
        x0 = x3;
        y0 = y4;
        r0 = region(x0, y0, area);
      } else {
        x1 = x3;
        y1 = y4;
        r1 = region(x1, y1, area);
      }
    }
    return {
      x0,
      x1,
      y0,
      y1
    };
  }
  function compute$1(range, config2) {
    var anchor = config2.anchor;
    var segment = range;
    var x3, y4;
    if (config2.clamp) {
      segment = clipped(segment, config2.area);
    }
    if (anchor === "start") {
      x3 = segment.x0;
      y4 = segment.y0;
    } else if (anchor === "end") {
      x3 = segment.x1;
      y4 = segment.y1;
    } else {
      x3 = (segment.x0 + segment.x1) / 2;
      y4 = (segment.y0 + segment.y1) / 2;
    }
    return aligned(x3, y4, range.vx, range.vy, config2.align);
  }
  var positioners2 = {
    arc: function(el, config2) {
      var angle = (el.startAngle + el.endAngle) / 2;
      var vx = Math.cos(angle);
      var vy = Math.sin(angle);
      var r0 = el.innerRadius;
      var r1 = el.outerRadius;
      return compute$1({
        x0: el.x + vx * r0,
        y0: el.y + vy * r0,
        x1: el.x + vx * r1,
        y1: el.y + vy * r1,
        vx,
        vy
      }, config2);
    },
    point: function(el, config2) {
      var v4 = orient(el, config2.origin);
      var rx = v4.x * el.options.radius;
      var ry = v4.y * el.options.radius;
      return compute$1({
        x0: el.x - rx,
        y0: el.y - ry,
        x1: el.x + rx,
        y1: el.y + ry,
        vx: v4.x,
        vy: v4.y
      }, config2);
    },
    bar: function(el, config2) {
      var v4 = orient(el, config2.origin);
      var x3 = el.x;
      var y4 = el.y;
      var sx = 0;
      var sy = 0;
      if (el.horizontal) {
        x3 = Math.min(el.x, el.base);
        sx = Math.abs(el.base - el.x);
      } else {
        y4 = Math.min(el.y, el.base);
        sy = Math.abs(el.base - el.y);
      }
      return compute$1({
        x0: x3,
        y0: y4 + sy,
        x1: x3 + sx,
        y1: y4,
        vx: v4.x,
        vy: v4.y
      }, config2);
    },
    fallback: function(el, config2) {
      var v4 = orient(el, config2.origin);
      return compute$1({
        x0: el.x,
        y0: el.y,
        x1: el.x + (el.width || 0),
        y1: el.y + (el.height || 0),
        vx: v4.x,
        vy: v4.y
      }, config2);
    }
  };
  var rasterize = utils.rasterize;
  function boundingRects2(model) {
    var borderWidth = model.borderWidth || 0;
    var padding = model.padding;
    var th = model.size.height;
    var tw = model.size.width;
    var tx = -tw / 2;
    var ty = -th / 2;
    return {
      frame: {
        x: tx - padding.left - borderWidth,
        y: ty - padding.top - borderWidth,
        w: tw + padding.width + borderWidth * 2,
        h: th + padding.height + borderWidth * 2
      },
      text: {
        x: tx,
        y: ty,
        w: tw,
        h: th
      }
    };
  }
  function getScaleOrigin(el, context) {
    var scale2 = context.chart.getDatasetMeta(context.datasetIndex).vScale;
    if (!scale2) {
      return null;
    }
    if (scale2.xCenter !== void 0 && scale2.yCenter !== void 0) {
      return { x: scale2.xCenter, y: scale2.yCenter };
    }
    var pixel = scale2.getBasePixel();
    return el.horizontal ? { x: pixel, y: null } : { x: null, y: pixel };
  }
  function getPositioner(el) {
    if (el instanceof ArcElement) {
      return positioners2.arc;
    }
    if (el instanceof PointElement) {
      return positioners2.point;
    }
    if (el instanceof BarElement) {
      return positioners2.bar;
    }
    return positioners2.fallback;
  }
  function drawRoundedRect(ctx2, x3, y4, w3, h, radius) {
    var HALF_PI2 = Math.PI / 2;
    if (radius) {
      var r6 = Math.min(radius, h / 2, w3 / 2);
      var left = x3 + r6;
      var top = y4 + r6;
      var right = x3 + w3 - r6;
      var bottom = y4 + h - r6;
      ctx2.moveTo(x3, top);
      if (left < right && top < bottom) {
        ctx2.arc(left, top, r6, -Math.PI, -HALF_PI2);
        ctx2.arc(right, top, r6, -HALF_PI2, 0);
        ctx2.arc(right, bottom, r6, 0, HALF_PI2);
        ctx2.arc(left, bottom, r6, HALF_PI2, Math.PI);
      } else if (left < right) {
        ctx2.moveTo(left, y4);
        ctx2.arc(right, top, r6, -HALF_PI2, HALF_PI2);
        ctx2.arc(left, top, r6, HALF_PI2, Math.PI + HALF_PI2);
      } else if (top < bottom) {
        ctx2.arc(left, top, r6, -Math.PI, 0);
        ctx2.arc(left, bottom, r6, 0, Math.PI);
      } else {
        ctx2.arc(left, top, r6, -Math.PI, Math.PI);
      }
      ctx2.closePath();
      ctx2.moveTo(x3, y4);
    } else {
      ctx2.rect(x3, y4, w3, h);
    }
  }
  function drawFrame(ctx2, rect, model) {
    var bgColor = model.backgroundColor;
    var borderColor = model.borderColor;
    var borderWidth = model.borderWidth;
    if (!bgColor && (!borderColor || !borderWidth)) {
      return;
    }
    ctx2.beginPath();
    drawRoundedRect(
      ctx2,
      rasterize(rect.x) + borderWidth / 2,
      rasterize(rect.y) + borderWidth / 2,
      rasterize(rect.w) - borderWidth,
      rasterize(rect.h) - borderWidth,
      model.borderRadius
    );
    ctx2.closePath();
    if (bgColor) {
      ctx2.fillStyle = bgColor;
      ctx2.fill();
    }
    if (borderColor && borderWidth) {
      ctx2.strokeStyle = borderColor;
      ctx2.lineWidth = borderWidth;
      ctx2.lineJoin = "miter";
      ctx2.stroke();
    }
  }
  function textGeometry(rect, align, font) {
    var h = font.lineHeight;
    var w3 = rect.w;
    var x3 = rect.x;
    var y4 = rect.y + h / 2;
    if (align === "center") {
      x3 += w3 / 2;
    } else if (align === "end" || align === "right") {
      x3 += w3;
    }
    return {
      h,
      w: w3,
      x: x3,
      y: y4
    };
  }
  function drawTextLine(ctx2, text, cfg) {
    var shadow = ctx2.shadowBlur;
    var stroked = cfg.stroked;
    var x3 = rasterize(cfg.x);
    var y4 = rasterize(cfg.y);
    var w3 = rasterize(cfg.w);
    if (stroked) {
      ctx2.strokeText(text, x3, y4, w3);
    }
    if (cfg.filled) {
      if (shadow && stroked) {
        ctx2.shadowBlur = 0;
      }
      ctx2.fillText(text, x3, y4, w3);
      if (shadow && stroked) {
        ctx2.shadowBlur = shadow;
      }
    }
  }
  function drawText(ctx2, lines, rect, model) {
    var align = model.textAlign;
    var color5 = model.color;
    var filled = !!color5;
    var font = model.font;
    var ilen = lines.length;
    var strokeColor = model.textStrokeColor;
    var strokeWidth = model.textStrokeWidth;
    var stroked = strokeColor && strokeWidth;
    var i6;
    if (!ilen || !filled && !stroked) {
      return;
    }
    rect = textGeometry(rect, align, font);
    ctx2.font = font.string;
    ctx2.textAlign = align;
    ctx2.textBaseline = "middle";
    ctx2.shadowBlur = model.textShadowBlur;
    ctx2.shadowColor = model.textShadowColor;
    if (filled) {
      ctx2.fillStyle = color5;
    }
    if (stroked) {
      ctx2.lineJoin = "round";
      ctx2.lineWidth = strokeWidth;
      ctx2.strokeStyle = strokeColor;
    }
    for (i6 = 0, ilen = lines.length; i6 < ilen; ++i6) {
      drawTextLine(ctx2, lines[i6], {
        stroked,
        filled,
        w: rect.w,
        x: rect.x,
        y: rect.y + rect.h * i6
      });
    }
  }
  var Label = function(config2, ctx2, el, index) {
    var me2 = this;
    me2._config = config2;
    me2._index = index;
    me2._model = null;
    me2._rects = null;
    me2._ctx = ctx2;
    me2._el = el;
  };
  merge(Label.prototype, {
    _modelize: function(display, lines, config2, context) {
      var me2 = this;
      var index = me2._index;
      var font = toFont(resolve([config2.font, {}], context, index));
      var color5 = resolve([config2.color, defaults.color], context, index);
      return {
        align: resolve([config2.align, "center"], context, index),
        anchor: resolve([config2.anchor, "center"], context, index),
        area: context.chart.chartArea,
        backgroundColor: resolve([config2.backgroundColor, null], context, index),
        borderColor: resolve([config2.borderColor, null], context, index),
        borderRadius: resolve([config2.borderRadius, 0], context, index),
        borderWidth: resolve([config2.borderWidth, 0], context, index),
        clamp: resolve([config2.clamp, false], context, index),
        clip: resolve([config2.clip, false], context, index),
        color: color5,
        display,
        font,
        lines,
        offset: resolve([config2.offset, 4], context, index),
        opacity: resolve([config2.opacity, 1], context, index),
        origin: getScaleOrigin(me2._el, context),
        padding: toPadding(resolve([config2.padding, 4], context, index)),
        positioner: getPositioner(me2._el),
        rotation: resolve([config2.rotation, 0], context, index) * (Math.PI / 180),
        size: utils.textSize(me2._ctx, lines, font),
        textAlign: resolve([config2.textAlign, "start"], context, index),
        textShadowBlur: resolve([config2.textShadowBlur, 0], context, index),
        textShadowColor: resolve([config2.textShadowColor, color5], context, index),
        textStrokeColor: resolve([config2.textStrokeColor, color5], context, index),
        textStrokeWidth: resolve([config2.textStrokeWidth, 0], context, index)
      };
    },
    update: function(context) {
      var me2 = this;
      var model = null;
      var rects = null;
      var index = me2._index;
      var config2 = me2._config;
      var value, label, lines;
      var display = resolve([config2.display, true], context, index);
      if (display) {
        value = context.dataset.data[index];
        label = valueOrDefault(callback(config2.formatter, [value, context]), value);
        lines = isNullOrUndef(label) ? [] : utils.toTextLines(label);
        if (lines.length) {
          model = me2._modelize(display, lines, config2, context);
          rects = boundingRects2(model);
        }
      }
      me2._model = model;
      me2._rects = rects;
    },
    geometry: function() {
      return this._rects ? this._rects.frame : {};
    },
    rotation: function() {
      return this._model ? this._model.rotation : 0;
    },
    visible: function() {
      return this._model && this._model.opacity;
    },
    model: function() {
      return this._model;
    },
    draw: function(chart, center) {
      var me2 = this;
      var ctx2 = chart.ctx;
      var model = me2._model;
      var rects = me2._rects;
      var area;
      if (!this.visible()) {
        return;
      }
      ctx2.save();
      if (model.clip) {
        area = model.area;
        ctx2.beginPath();
        ctx2.rect(
          area.left,
          area.top,
          area.right - area.left,
          area.bottom - area.top
        );
        ctx2.clip();
      }
      ctx2.globalAlpha = utils.bound(0, model.opacity, 1);
      ctx2.translate(rasterize(center.x), rasterize(center.y));
      ctx2.rotate(model.rotation);
      drawFrame(ctx2, rects.frame, model);
      drawText(ctx2, model.lines, rects.text, model);
      ctx2.restore();
    }
  });
  var MIN_INTEGER = Number.MIN_SAFE_INTEGER || -9007199254740991;
  var MAX_INTEGER = Number.MAX_SAFE_INTEGER || 9007199254740991;
  function rotated(point5, center, angle) {
    var cos = Math.cos(angle);
    var sin = Math.sin(angle);
    var cx = center.x;
    var cy = center.y;
    return {
      x: cx + cos * (point5.x - cx) - sin * (point5.y - cy),
      y: cy + sin * (point5.x - cx) + cos * (point5.y - cy)
    };
  }
  function projected(points, axis) {
    var min = MAX_INTEGER;
    var max = MIN_INTEGER;
    var origin = axis.origin;
    var i6, pt2, vx, vy, dp;
    for (i6 = 0; i6 < points.length; ++i6) {
      pt2 = points[i6];
      vx = pt2.x - origin.x;
      vy = pt2.y - origin.y;
      dp = axis.vx * vx + axis.vy * vy;
      min = Math.min(min, dp);
      max = Math.max(max, dp);
    }
    return {
      min,
      max
    };
  }
  function toAxis(p0, p1) {
    var vx = p1.x - p0.x;
    var vy = p1.y - p0.y;
    var ln = Math.sqrt(vx * vx + vy * vy);
    return {
      vx: (p1.x - p0.x) / ln,
      vy: (p1.y - p0.y) / ln,
      origin: p0,
      ln
    };
  }
  var HitBox = function() {
    this._rotation = 0;
    this._rect = {
      x: 0,
      y: 0,
      w: 0,
      h: 0
    };
  };
  merge(HitBox.prototype, {
    center: function() {
      var r6 = this._rect;
      return {
        x: r6.x + r6.w / 2,
        y: r6.y + r6.h / 2
      };
    },
    update: function(center, rect, rotation) {
      this._rotation = rotation;
      this._rect = {
        x: rect.x + center.x,
        y: rect.y + center.y,
        w: rect.w,
        h: rect.h
      };
    },
    contains: function(point5) {
      var me2 = this;
      var margin = 1;
      var rect = me2._rect;
      point5 = rotated(point5, me2.center(), -me2._rotation);
      return !(point5.x < rect.x - margin || point5.y < rect.y - margin || point5.x > rect.x + rect.w + margin * 2 || point5.y > rect.y + rect.h + margin * 2);
    },
    intersects: function(other) {
      var r0 = this._points();
      var r1 = other._points();
      var axes = [
        toAxis(r0[0], r0[1]),
        toAxis(r0[0], r0[3])
      ];
      var i6, pr0, pr1;
      if (this._rotation !== other._rotation) {
        axes.push(
          toAxis(r1[0], r1[1]),
          toAxis(r1[0], r1[3])
        );
      }
      for (i6 = 0; i6 < axes.length; ++i6) {
        pr0 = projected(r0, axes[i6]);
        pr1 = projected(r1, axes[i6]);
        if (pr0.max < pr1.min || pr1.max < pr0.min) {
          return false;
        }
      }
      return true;
    },
    _points: function() {
      var me2 = this;
      var rect = me2._rect;
      var angle = me2._rotation;
      var center = me2.center();
      return [
        rotated({ x: rect.x, y: rect.y }, center, angle),
        rotated({ x: rect.x + rect.w, y: rect.y }, center, angle),
        rotated({ x: rect.x + rect.w, y: rect.y + rect.h }, center, angle),
        rotated({ x: rect.x, y: rect.y + rect.h }, center, angle)
      ];
    }
  });
  function coordinates(el, model, geometry) {
    var point5 = model.positioner(el, model);
    var vx = point5.vx;
    var vy = point5.vy;
    if (!vx && !vy) {
      return { x: point5.x, y: point5.y };
    }
    var w3 = geometry.w;
    var h = geometry.h;
    var rotation = model.rotation;
    var dx = Math.abs(w3 / 2 * Math.cos(rotation)) + Math.abs(h / 2 * Math.sin(rotation));
    var dy = Math.abs(w3 / 2 * Math.sin(rotation)) + Math.abs(h / 2 * Math.cos(rotation));
    var vs = 1 / Math.max(Math.abs(vx), Math.abs(vy));
    dx *= vx * vs;
    dy *= vy * vs;
    dx += model.offset * vx;
    dy += model.offset * vy;
    return {
      x: point5.x + dx,
      y: point5.y + dy
    };
  }
  function collide(labels, collider) {
    var i6, j3, s0, s1;
    for (i6 = labels.length - 1; i6 >= 0; --i6) {
      s0 = labels[i6].$layout;
      for (j3 = i6 - 1; j3 >= 0 && s0._visible; --j3) {
        s1 = labels[j3].$layout;
        if (s1._visible && s0._box.intersects(s1._box)) {
          collider(s0, s1);
        }
      }
    }
    return labels;
  }
  function compute(labels) {
    var i6, ilen, label, state, geometry, center, proxy;
    for (i6 = 0, ilen = labels.length; i6 < ilen; ++i6) {
      label = labels[i6];
      state = label.$layout;
      if (state._visible) {
        proxy = new Proxy(label._el, { get: (el, p2) => el.getProps([p2], true)[p2] });
        geometry = label.geometry();
        center = coordinates(proxy, label.model(), geometry);
        state._box.update(center, geometry, label.rotation());
      }
    }
    return collide(labels, function(s0, s1) {
      var h0 = s0._hidable;
      var h12 = s1._hidable;
      if (h0 && h12 || h12) {
        s1._visible = false;
      } else if (h0) {
        s0._visible = false;
      }
    });
  }
  var layout = {
    prepare: function(datasets) {
      var labels = [];
      var i6, j3, ilen, jlen, label;
      for (i6 = 0, ilen = datasets.length; i6 < ilen; ++i6) {
        for (j3 = 0, jlen = datasets[i6].length; j3 < jlen; ++j3) {
          label = datasets[i6][j3];
          labels.push(label);
          label.$layout = {
            _box: new HitBox(),
            _hidable: false,
            _visible: true,
            _set: i6,
            _idx: label._index
          };
        }
      }
      labels.sort(function(a2, b3) {
        var sa = a2.$layout;
        var sb = b3.$layout;
        return sa._idx === sb._idx ? sb._set - sa._set : sb._idx - sa._idx;
      });
      this.update(labels);
      return labels;
    },
    update: function(labels) {
      var dirty = false;
      var i6, ilen, label, model, state;
      for (i6 = 0, ilen = labels.length; i6 < ilen; ++i6) {
        label = labels[i6];
        model = label.model();
        state = label.$layout;
        state._hidable = model && model.display === "auto";
        state._visible = label.visible();
        dirty |= state._hidable;
      }
      if (dirty) {
        compute(labels);
      }
    },
    lookup: function(labels, point5) {
      var i6, state;
      for (i6 = labels.length - 1; i6 >= 0; --i6) {
        state = labels[i6].$layout;
        if (state && state._visible && state._box.contains(point5)) {
          return labels[i6];
        }
      }
      return null;
    },
    draw: function(chart, labels) {
      var i6, ilen, label, state, geometry, center;
      for (i6 = 0, ilen = labels.length; i6 < ilen; ++i6) {
        label = labels[i6];
        state = label.$layout;
        if (state._visible) {
          geometry = label.geometry();
          center = coordinates(label._el, label.model(), geometry);
          state._box.update(center, geometry, label.rotation());
          label.draw(chart, center);
        }
      }
    }
  };
  var formatter = function(value) {
    if (isNullOrUndef(value)) {
      return null;
    }
    var label = value;
    var keys, klen, k2;
    if (isObject(value)) {
      if (!isNullOrUndef(value.label)) {
        label = value.label;
      } else if (!isNullOrUndef(value.r)) {
        label = value.r;
      } else {
        label = "";
        keys = Object.keys(value);
        for (k2 = 0, klen = keys.length; k2 < klen; ++k2) {
          label += (k2 !== 0 ? ", " : "") + keys[k2] + ": " + value[keys[k2]];
        }
      }
    }
    return "" + label;
  };
  var defaults2 = {
    align: "center",
    anchor: "center",
    backgroundColor: null,
    borderColor: null,
    borderRadius: 0,
    borderWidth: 0,
    clamp: false,
    clip: false,
    color: void 0,
    display: true,
    font: {
      family: void 0,
      lineHeight: 1.2,
      size: void 0,
      style: void 0,
      weight: null
    },
    formatter,
    labels: void 0,
    listeners: {},
    offset: 4,
    opacity: 1,
    padding: {
      top: 4,
      right: 4,
      bottom: 4,
      left: 4
    },
    rotation: 0,
    textAlign: "start",
    textStrokeColor: void 0,
    textStrokeWidth: 0,
    textShadowBlur: 0,
    textShadowColor: void 0
  };
  var EXPANDO_KEY2 = "$datalabels";
  var DEFAULT_KEY = "$default";
  function configure(dataset, options) {
    var override = dataset.datalabels;
    var listeners = {};
    var configs = [];
    var labels, keys;
    if (override === false) {
      return null;
    }
    if (override === true) {
      override = {};
    }
    options = merge({}, [options, override]);
    labels = options.labels || {};
    keys = Object.keys(labels);
    delete options.labels;
    if (keys.length) {
      keys.forEach(function(key) {
        if (labels[key]) {
          configs.push(merge({}, [
            options,
            labels[key],
            { _key: key }
          ]));
        }
      });
    } else {
      configs.push(options);
    }
    listeners = configs.reduce(function(target, config2) {
      each(config2.listeners || {}, function(fn2, event) {
        target[event] = target[event] || {};
        target[event][config2._key || DEFAULT_KEY] = fn2;
      });
      delete config2.listeners;
      return target;
    }, {});
    return {
      labels: configs,
      listeners
    };
  }
  function dispatchEvent(chart, listeners, label, event) {
    if (!listeners) {
      return;
    }
    var context = label.$context;
    var groups = label.$groups;
    var callback$1;
    if (!listeners[groups._set]) {
      return;
    }
    callback$1 = listeners[groups._set][groups._key];
    if (!callback$1) {
      return;
    }
    if (callback(callback$1, [context, event]) === true) {
      chart[EXPANDO_KEY2]._dirty = true;
      label.update(context);
    }
  }
  function dispatchMoveEvents(chart, listeners, previous, label, event) {
    var enter, leave;
    if (!previous && !label) {
      return;
    }
    if (!previous) {
      enter = true;
    } else if (!label) {
      leave = true;
    } else if (previous !== label) {
      leave = enter = true;
    }
    if (leave) {
      dispatchEvent(chart, listeners.leave, previous, event);
    }
    if (enter) {
      dispatchEvent(chart, listeners.enter, label, event);
    }
  }
  function handleMoveEvents(chart, event) {
    var expando = chart[EXPANDO_KEY2];
    var listeners = expando._listeners;
    var previous, label;
    if (!listeners.enter && !listeners.leave) {
      return;
    }
    if (event.type === "mousemove") {
      label = layout.lookup(expando._labels, event);
    } else if (event.type !== "mouseout") {
      return;
    }
    previous = expando._hovered;
    expando._hovered = label;
    dispatchMoveEvents(chart, listeners, previous, label, event);
  }
  function handleClickEvents(chart, event) {
    var expando = chart[EXPANDO_KEY2];
    var handlers = expando._listeners.click;
    var label = handlers && layout.lookup(expando._labels, event);
    if (label) {
      dispatchEvent(chart, handlers, label, event);
    }
  }
  var plugin = {
    id: "datalabels",
    defaults: defaults2,
    beforeInit: function(chart) {
      chart[EXPANDO_KEY2] = {
        _actives: []
      };
    },
    beforeUpdate: function(chart) {
      var expando = chart[EXPANDO_KEY2];
      expando._listened = false;
      expando._listeners = {};
      expando._datasets = [];
      expando._labels = [];
    },
    afterDatasetUpdate: function(chart, args, options) {
      var datasetIndex = args.index;
      var expando = chart[EXPANDO_KEY2];
      var labels = expando._datasets[datasetIndex] = [];
      var visible = chart.isDatasetVisible(datasetIndex);
      var dataset = chart.data.datasets[datasetIndex];
      var config2 = configure(dataset, options);
      var elements = args.meta.data || [];
      var ctx2 = chart.ctx;
      var i6, j3, ilen, jlen, cfg, key, el, label;
      ctx2.save();
      for (i6 = 0, ilen = elements.length; i6 < ilen; ++i6) {
        el = elements[i6];
        el[EXPANDO_KEY2] = [];
        if (visible && el && chart.getDataVisibility(i6) && !el.skip) {
          for (j3 = 0, jlen = config2.labels.length; j3 < jlen; ++j3) {
            cfg = config2.labels[j3];
            key = cfg._key;
            label = new Label(cfg, ctx2, el, i6);
            label.$groups = {
              _set: datasetIndex,
              _key: key || DEFAULT_KEY
            };
            label.$context = {
              active: false,
              chart,
              dataIndex: i6,
              dataset,
              datasetIndex
            };
            label.update(label.$context);
            el[EXPANDO_KEY2].push(label);
            labels.push(label);
          }
        }
      }
      ctx2.restore();
      merge(expando._listeners, config2.listeners, {
        merger: function(event, target, source) {
          target[event] = target[event] || {};
          target[event][args.index] = source[event];
          expando._listened = true;
        }
      });
    },
    afterUpdate: function(chart) {
      chart[EXPANDO_KEY2]._labels = layout.prepare(chart[EXPANDO_KEY2]._datasets);
    },
    afterDatasetsDraw: function(chart) {
      layout.draw(chart, chart[EXPANDO_KEY2]._labels);
    },
    beforeEvent: function(chart, args) {
      if (chart[EXPANDO_KEY2]._listened) {
        var event = args.event;
        switch (event.type) {
          case "mousemove":
          case "mouseout":
            handleMoveEvents(chart, event);
            break;
          case "click":
            handleClickEvents(chart, event);
            break;
        }
      }
    },
    afterEvent: function(chart) {
      var expando = chart[EXPANDO_KEY2];
      var previous = expando._actives;
      var actives = expando._actives = chart.getActiveElements();
      var updates = utils.arrayDiff(previous, actives);
      var i6, ilen, j3, jlen, update3, label, labels;
      for (i6 = 0, ilen = updates.length; i6 < ilen; ++i6) {
        update3 = updates[i6];
        if (update3[1]) {
          labels = update3[0].element[EXPANDO_KEY2] || [];
          for (j3 = 0, jlen = labels.length; j3 < jlen; ++j3) {
            label = labels[j3];
            label.$context.active = update3[1] === 1;
            label.update(label.$context);
          }
        }
      }
      if (expando._dirty || updates.length) {
        layout.update(expando._labels);
        chart.render();
      }
      delete expando._dirty;
    }
  };

  // node_modules/react-chartjs-2/dist/index.js
  var import_react = __toESM(require_react());
  var defaultDatasetIdKey = "label";
  function reforwardRef(ref, value) {
    if (typeof ref === "function") {
      ref(value);
    } else if (ref) {
      ref.current = value;
    }
  }
  function setOptions(chart, nextOptions) {
    Object.assign(chart.options, nextOptions);
  }
  function setLabels(currentData, nextLabels) {
    currentData.labels = nextLabels;
  }
  function setDatasets(currentData, nextDatasets) {
    let datasetIdKey = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : defaultDatasetIdKey;
    const addedDatasets = [];
    currentData.datasets = nextDatasets.map((nextDataset) => {
      const currentDataset = currentData.datasets.find(
        (dataset) => dataset[datasetIdKey] === nextDataset[datasetIdKey]
      );
      if (!currentDataset || !nextDataset.data || addedDatasets.includes(currentDataset)) {
        return {
          ...nextDataset
        };
      }
      addedDatasets.push(currentDataset);
      Object.assign(currentDataset, nextDataset);
      return currentDataset;
    });
  }
  function cloneData(data) {
    let datasetIdKey = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : defaultDatasetIdKey;
    const nextData = {
      labels: [],
      datasets: []
    };
    setLabels(nextData, data.labels);
    setDatasets(nextData, data.datasets, datasetIdKey);
    return nextData;
  }
  function ChartComponent(param, ref) {
    let { height = 150, width = 300, redraw = false, datasetIdKey, type, data, options, plugins = [], fallbackContent, updateMode, ...props } = param;
    const canvasRef = (0, import_react.useRef)(null);
    const chartRef = (0, import_react.useRef)();
    const renderChart = () => {
      if (!canvasRef.current)
        return;
      chartRef.current = new Chart(canvasRef.current, {
        type,
        data: cloneData(data, datasetIdKey),
        options: options && {
          ...options
        },
        plugins
      });
      reforwardRef(ref, chartRef.current);
    };
    const destroyChart = () => {
      reforwardRef(ref, null);
      if (chartRef.current) {
        chartRef.current.destroy();
        chartRef.current = null;
      }
    };
    (0, import_react.useEffect)(() => {
      if (!redraw && chartRef.current && options) {
        setOptions(chartRef.current, options);
      }
    }, [
      redraw,
      options
    ]);
    (0, import_react.useEffect)(() => {
      if (!redraw && chartRef.current) {
        setLabels(chartRef.current.config.data, data.labels);
      }
    }, [
      redraw,
      data.labels
    ]);
    (0, import_react.useEffect)(() => {
      if (!redraw && chartRef.current && data.datasets) {
        setDatasets(chartRef.current.config.data, data.datasets, datasetIdKey);
      }
    }, [
      redraw,
      data.datasets
    ]);
    (0, import_react.useEffect)(() => {
      if (!chartRef.current)
        return;
      if (redraw) {
        destroyChart();
        setTimeout(renderChart);
      } else {
        chartRef.current.update(updateMode);
      }
    }, [
      redraw,
      options,
      data.labels,
      data.datasets,
      updateMode
    ]);
    (0, import_react.useEffect)(() => {
      if (!chartRef.current)
        return;
      destroyChart();
      setTimeout(renderChart);
    }, [
      type
    ]);
    (0, import_react.useEffect)(() => {
      renderChart();
      return () => destroyChart();
    }, []);
    return /* @__PURE__ */ import_react.default.createElement("canvas", Object.assign({
      ref: canvasRef,
      role: "img",
      height,
      width
    }, props), fallbackContent);
  }
  var Chart2 = /* @__PURE__ */ (0, import_react.forwardRef)(ChartComponent);
  function createTypedChart(type, registerables) {
    Chart.register(registerables);
    return /* @__PURE__ */ (0, import_react.forwardRef)(
      (props, ref) => /* @__PURE__ */ import_react.default.createElement(Chart2, Object.assign({}, props, {
        ref,
        type
      }))
    );
  }
  var Bar = /* @__PURE__ */ createTypedChart("bar", BarController);

  // assets/src/admin/js/BlogWizard/SeoData/Keywords/SearchVolumeChart.js
  var { Empty } = window.antd;
  var { memo: memo2 } = window.React;
  var sidebar3 = wp.data.select("getgenie").sidebar();
  Chart.register(
    CategoryScale,
    LinearScale,
    BarElement,
    plugin_title,
    plugin_tooltip,
    plugin_legend,
    plugin
  );
  var SearchVolumeChart = memo2(({ data }) => {
    const options = {
      responsive: false,
      layout: {
        padding: {
          top: 25,
          right: 0,
          left: 0,
          bottom: 0
        }
      },
      plugins: {
        datalabels: {
          display: true,
          color: "#7999D0",
          align: "end",
          rotation: 270,
          anchor: "end",
          font: { size: "10" },
          formatter: function(value) {
            if (value < 1e3)
              return value;
            if (value >= 1e3 && value < 1e6)
              return +(value / 1e3).toFixed(1) + "K";
            if (value >= 1e6 && value < 1e9)
              return +(value / 1e6).toFixed(1) + "M";
            if (value >= 1e9 && value < 1e12)
              return +(value / 1e9).toFixed(1) + "B";
            if (value >= 1e12)
              return +(value / 1e12).toFixed(1) + "T";
          }
        },
        legend: {
          display: false
        }
      },
      scales: {
        x: {
          grid: {
            display: false
          },
          ticks: {
            autoSkip: true,
            maxRotation: 0,
            minRotation: 0
          }
        },
        y: {
          grid: {
            borderWidth: 0
          },
          ticks: {
            callback: function(value) {
              if (value < 1e3)
                return value;
              if (value >= 1e3 && value < 1e6)
                return +(value / 1e3).toFixed(1) + "K";
              if (value >= 1e6 && value < 1e9)
                return +(value / 1e6).toFixed(1) + "M";
              if (value >= 1e9 && value < 1e12)
                return +(value / 1e9).toFixed(1) + "B";
              if (value >= 1e12)
                return +(value / 1e12).toFixed(1) + "T";
            }
          }
        }
      }
    };
    const labels = data.map((item) => item?.date);
    const chartData = {
      labels,
      datasets: [
        {
          label: sidebar3.__("Volume", "getgenie"),
          data: data.map((item) => item?.volume),
          backgroundColor: "#DBE7FD"
        }
      ]
    };
    return data.length === 0 ? /* @__PURE__ */ React.createElement(Empty, {
      description: sidebar3.__(`No Search Volume Trend data found`, "getgenie"),
      className: "getgenie-chart empty"
    }) : /* @__PURE__ */ React.createElement(Bar, {
      className: "getgenie-chart",
      width: "298",
      height: "300",
      options,
      data: chartData
    });
  });

  // assets/src/admin/js/BlogWizard/SeoData/Keywords/OverviewChart.js
  var { Typography: Typography4 } = window.antd;
  var { Libs: Libs7 } = window.getGenie.Components.Common;
  var { useState: useState9, useEffect: useEffect7 } = window.React;
  var { ComposeComponents: ComposeComponents6 } = window.getGenie.Components.Common.ReduxManager;
  var OverviewChart = ComposeComponents6(({ setInput, getInputs, sidebar: sidebar4 }) => {
    const currentTab = getInputs["overviewChartTab"] || "searchVolTrend";
    const [data, setData] = useState9([]);
    const handleActiveKey = (key) => {
      setInput("overviewChartTab", key);
    };
    const tabPaneList = [
      {
        label: sidebar4.__("Search Vol. Trend", "getgenie"),
        key: "searchVolTrend",
        children: /* @__PURE__ */ React.createElement(SearchVolumeChart, {
          data
        })
      },
      {
        label: sidebar4.__("Google Trends", "getgenie"),
        key: "googleTrend",
        children: /* @__PURE__ */ React.createElement(GoogleTrendChart_default, {
          data: getInputs["searchVolume"]?.keyword || ""
        })
      }
    ];
    useEffect7(() => {
      if (sidebar4.currentTemplate !== "blogWizard" && sidebar4.currentScreen !== "keywordAnalysis") {
        return;
      }
      if (getInputs["searchVolume"]?.chart?.[currentTab]) {
        setData(getInputs["searchVolume"].chart[currentTab]);
      } else {
        setData([]);
        handleActiveKey("googleTrend");
      }
    }, [getInputs["searchVolume"]]);
    if (data.length === 0) {
      tabPaneList.shift();
    }
    return /* @__PURE__ */ React.createElement("div", {
      className: "getgenie-seo-result-chart-container"
    }, /* @__PURE__ */ React.createElement(Typography4.Title, {
      level: 5,
      className: "getgenie-title"
    }, sidebar4.__("Overview Chart", "getgenie")), /* @__PURE__ */ React.createElement(Libs7.Navbar, {
      tabPaneList,
      activeKey: currentTab,
      handleActiveKey,
      destroyInactiveTabPane: false,
      className: "keyword-analysis-chart"
    }));
  }, ["setInput", "getInputs", "sidebar"]);

  // assets/src/admin/js/AdminPages/KeywordResearchAdminPage/config/db.js
  var DB_NAME = "keyword_research";
  var STORE_NAME = "keywords_data_store";
  var DB_VERSION = 2;
  var openDB = () => {
    return new Promise((resolve2, reject) => {
      const request = window.indexedDB.open(DB_NAME, DB_VERSION);
      request.onupgradeneeded = (event) => {
        const db = event.target.result;
        if (!db.objectStoreNames.contains(STORE_NAME)) {
          db.createObjectStore(STORE_NAME, { keyPath: "key" });
        }
      };
      request.onsuccess = (event) => {
        resolve2(event.target.result);
      };
      request.onerror = (event) => {
        reject(event.target.error);
      };
    });
  };
  var saveData = async (key, data) => {
    try {
      const db = await openDB();
      const transaction = db.transaction(STORE_NAME, "readwrite");
      const store = transaction.objectStore(STORE_NAME);
      await store.put({ key, data });
      return transaction.complete;
    } catch (error) {
      console.error("Error saving data:", error);
    }
  };
  var getData = async (key) => {
    try {
      const db = await openDB();
      return new Promise((resolve2, reject) => {
        const transaction = db.transaction(STORE_NAME, "readonly");
        const store = transaction.objectStore(STORE_NAME);
        const request = store.get(key);
        request.onsuccess = (event) => {
          resolve2(event.target.result);
        };
        request.onerror = (event) => {
          reject(event.target.error);
        };
      });
    } catch (error) {
      console.error("Error getting data:", error);
    }
  };
  var clearData = async () => {
    try {
      const db = await openDB();
      const transaction = db.transaction(STORE_NAME, "readwrite");
      const store = transaction.objectStore(STORE_NAME);
      await store.clear();
      return transaction.complete;
    } catch (error) {
      console.error("Error clearing data:", error);
    }
  };

  // assets/src/admin/js/AdminPages/KeywordResearchAdminPage/KeywordCard.js
  var { useState: useState10, useEffect: useEffect8, Fragment } = window.React;
  var { Typography: Typography5, Modal: Modal2, Button: Button3, Tooltip: Tooltip3 } = window.antd;
  var { ComposeComponents: ComposeComponents7 } = window.getGenie.Components.Common.ReduxManager;
  var { Title: Title2, Paragraph } = Typography5;
  var KeywordCard = ComposeComponents7(({ keyword, volume, competitionValue, competition, mainKeyword = false, setSidebar, sidebar: sidebar4, setInput, currentScreen = "analyzeScreen", analyzeInput = "", disabled = true, subslimitUsage = {} }) => {
    const [isModalVisible, setIsModalVisible] = useState10(false);
    const isLimitedAccess = subslimitUsage?.nlp_keyword_details === "limited" || subslimitUsage?.semantic_keyword_details === "limited" || subslimitUsage?.related_keyword_details === "limited";
    const isNoDetails = subslimitUsage?.nlp_keyword_details == "0" || subslimitUsage?.semantic_keyword_details == "0" || subslimitUsage?.related_keyword_details == "0";
    const handleWriteForMe = () => {
      const url = new URL(window.getGenie.config?.wizardScreenUrl?.post);
      url.searchParams.set("keyword", keyword);
      window.open(url.toString(), "_blank");
    };
    const showModal = async () => {
      const keywordsData = await getData(
        analyzeInput?.toLowerCase() === keyword ? "analyzeKeywordData" : currentScreen === "analyzeScreen" ? "relatedKeywordsData" : currentScreen === "nlpScreen" ? "nlpKeywordsData" : "semanticKeywordsData"
      ) || [];
      const clickedKeywordData = keywordsData.data?.find((item) => item.keyword?.toLowerCase() == keyword?.toLowerCase()) || {};
      const { relatedKeywords = [], ...keywordsWithoutRelated } = clickedKeywordData;
      const searchVol = { ...keywordsWithoutRelated, keyword, country: "usa" };
      const wizardRelatedKeywords = [keywordsWithoutRelated, ...relatedKeywords];
      setIsModalVisible(true);
      if (isLimitedAccess) {
        searchVol.searchVolume = { ...searchVol.searchVolume, ...missingSearchVolumeData };
        searchVol.chart = demoOverviewChartData;
      }
      setInput("searchVolume", searchVol);
      setSidebar({
        currentScreen: "keywordAnalysis"
      });
      await saveData("searchVolume", searchVol);
      await saveData("wizardRelatedKeywords", wizardRelatedKeywords);
    };
    useEffect8(() => {
      const documentBody = document.body || {};
      if (isModalVisible) {
        documentBody.style.overflow = "hidden";
      } else {
        documentBody.style.overflow = "auto";
      }
    }, [isModalVisible]);
    const Wrapper = isNoDetails ? Tooltip3 : Fragment;
    const wrapperProps = isNoDetails ? { title: "Upgrade to Gain Access!" } : {};
    return /* @__PURE__ */ React.createElement("div", {
      className: "getgenie-keyword-card"
    }, /* @__PURE__ */ React.createElement(Typography5.Title, {
      label: 3,
      className: "title",
      ellipsis: { tooltip: { title: keyword } },
      ...!disabled && {
        onClick: showModal,
        style: { cursor: "pointer" }
      }
    }, mainKeyword ? /* @__PURE__ */ React.createElement(React.Fragment, null, /* @__PURE__ */ React.createElement("span", {
      className: "getgenie-icon-star"
    }), "\xA0", keyword) : keyword), /* @__PURE__ */ React.createElement("div", {
      className: "keyword-data"
    }, /* @__PURE__ */ React.createElement("div", {
      className: "keyword-volume"
    }, /* @__PURE__ */ React.createElement(Typography5.Text, {
      className: "volume-label"
    }, "SV\xA0"), /* @__PURE__ */ React.createElement(Wrapper, {
      ...wrapperProps
    }, /* @__PURE__ */ React.createElement(Typography5.Title, {
      label: 3,
      className: `title volume-title ${isNoDetails ? "access-denied" : ""}`
    }, volume || 0))), /* @__PURE__ */ React.createElement("div", {
      className: "keyword-comptetion"
    }, /* @__PURE__ */ React.createElement(Typography5.Text, {
      className: "volume-label"
    }, "Comp.\xA0"), /* @__PURE__ */ React.createElement(Wrapper, {
      ...wrapperProps
    }, /* @__PURE__ */ React.createElement(Typography5.Title, {
      label: 3,
      className: `title volume-title ${isNoDetails ? "access-denied" : ""}`
    }, competitionValue || 0, " (", competition || "low", ")")))), /* @__PURE__ */ React.createElement(Modal2, {
      visible: isModalVisible,
      onCancel: () => setIsModalVisible(false),
      className: "getgenie-keyword-analysis-modal",
      closeIcon: null,
      footer: [
        /* @__PURE__ */ React.createElement(Tooltip3, {
          title: isLimitedAccess ? "Upgrade to Gain Access!" : ""
        }, /* @__PURE__ */ React.createElement(Button3, {
          className: "write-for-me-btn",
          key: "submit",
          type: "primary",
          onClick: handleWriteForMe,
          disabled: isLimitedAccess,
          icon: /* @__PURE__ */ React.createElement("span", {
            className: "getgenie-icon-edit-2"
          })
        }, "WRITE FOR ME"))
      ],
      getContainer: () => sidebar4.rootContainer || document.body
    }, isModalVisible && /* @__PURE__ */ React.createElement(React.Fragment, null, /* @__PURE__ */ React.createElement("div", {
      className: "getgenie-keyword-analysis-modal-header"
    }, /* @__PURE__ */ React.createElement(Typography5.Title, {
      level: 4,
      style: { margin: 0 }
    }, "Keywords"), /* @__PURE__ */ React.createElement("span", {
      onClick: () => setIsModalVisible(false),
      className: "getgenie-icon-close1"
    })), /* @__PURE__ */ React.createElement("div", {
      className: "getgenie-seo-keyword-analysis"
    }, /* @__PURE__ */ React.createElement("div", {
      className: `keyword-analysis-content ${isLimitedAccess ? "keyword-analysis-limited-access" : ""}`
    }, /* @__PURE__ */ React.createElement(KeywordAnalysis, null), /* @__PURE__ */ React.createElement("div", {
      className: "chart-section"
    }, /* @__PURE__ */ React.createElement(OverviewChart, null)), isLimitedAccess && /* @__PURE__ */ React.createElement("div", {
      className: "blur-element-wrapper"
    }, /* @__PURE__ */ React.createElement(Title2, {
      className: "blur-element-title",
      level: 2
    }, "Switch to Premium Plan"), /* @__PURE__ */ React.createElement(Paragraph, {
      className: "blur-element-sub-title"
    }, "Available in select plans only! Upgrade your plan to view detailed insights."), /* @__PURE__ */ React.createElement(Button3, {
      className: "blur-element-pro-button",
      type: "primary",
      href: "https://getgenie.ai/pricing/",
      target: "_blank"
    }, "Upgrade Plan Now")))))));
  }, ["sidebar", "setSidebar", "setInput"]);
  var KeywordCard_default = KeywordCard;

  // assets/src/admin/js/AdminPages/KeywordResearchAdminPage/utilities/downloadUtils.js
  var import_file_saver = __toESM(require_FileSaver_min());
  var import_json_as_xlsx = __toESM(require_dist());
  var { Utilities: Utilities2 } = window.getGenie.Components.Common;
  var { GenieHelpers } = Utilities2;
  var formatData = (data) => {
    return data.map((item) => {
      const formattedItem = {
        keyword: item.keyword || item.baseKeyword
      };
      if (item.searchVolume) {
        formattedItem.searchVolume = item.searchVolume.total || 0;
        formattedItem.competition = item.searchVolume.competition || "Low";
      }
      return formattedItem;
    });
  };
  var downloadCSV = (data, fileName) => {
    let headers, csvContent;
    if (data.some((item) => item.searchVolume)) {
      headers = ["Keywords", "Search Volumes", "Competitions"];
      csvContent = [
        headers.join(","),
        ...data.map((item) => {
          const keyword = item.keyword || item.baseKeyword;
          return [keyword, item.searchVolume?.total || 0, item.searchVolume?.competition || "Low"].join(",");
        })
      ].join("\n");
    } else {
      headers = ["Keywords"];
      csvContent = [
        headers.join(","),
        ...data.map((item) => {
          const keyword = item.keyword || item.baseKeyword;
          return [keyword].join(",");
        })
      ].join("\n");
    }
    const blob = new Blob([csvContent], { type: "text/csv;charset=utf-8;" });
    (0, import_file_saver.saveAs)(blob, `${fileName}.csv`);
  };
  var copyToClipboard = (data) => {
    const formattedData = formatData(data);
    const text = JSON.stringify(formattedData, null, 2);
    GenieHelpers.copyToClipboard(text).then(() => {
    }).catch(() => {
      console.log("error");
    });
  };
  var downloadXLSX = (data, fileName) => {
    const formattedData = formatData(data);
    const xlsxData = [
      {
        sheet: "Keywords",
        columns: [
          { label: "Keywords", value: "keyword" },
          ...data.some((item) => item.searchVolume) ? [
            { label: "Search Volumes", value: "searchVolume" },
            { label: "Competitions", value: "competition" }
          ] : []
        ],
        content: formattedData
      }
    ];
    const settings = {
      fileName,
      extraLength: 3,
      writeMode: "writeFile",
      writeOptions: {
        cellStyles: true,
        cellHTML: true
      },
      RTL: false
    };
    (0, import_json_as_xlsx.default)(xlsxData, settings);
  };

  // assets/src/admin/js/AdminPages/KeywordResearchAdminPage/utilities/showLoadingText.js
  var waitFor = (delay) => new Promise((resolve2) => {
    setTimeout(resolve2, delay);
  });
  var showLoadingText = async (setLoadingText = () => "") => {
    setLoadingText("Fetching the Data");
    await waitFor(3e3);
    setLoadingText("Analyzing the Data");
    await waitFor(2500);
    setLoadingText("Generating the Output");
  };
  var showLoadingText_default = showLoadingText;

  // assets/src/admin/js/AdminPages/KeywordResearchAdminPage/utilities/topicalMapUtils.js
  var import_dom_to_image_more = __toESM(require_dom_to_image_more_min());
  var import_file_saver2 = __toESM(require_FileSaver_min());
  var convertToNivoData = (data) => {
    if (!data.topical_map) {
      throw new Error("Invalid data structure: Missing topical_map");
    }
    const transformNode = (node, isRoot = false, isSubtopic = false) => {
      const transformedNode = {
        name: node.topic_name,
        color: isRoot ? "red" : isSubtopic ? "blue" : "green",
        children: []
      };
      if (node?.related_keywords) {
        node.related_keywords.forEach((keyword) => {
          transformedNode.children.push({
            name: keyword,
            color: "purple",
            children: []
          });
        });
      }
      if (node?.subtopics) {
        node.subtopics.forEach((subtopic) => {
          transformedNode.children.push(transformNode(subtopic, false, !isRoot));
        });
      }
      if (node?.related_keywords) {
        transformedNode.children.sort((a2, b3) => {
          const indexA = node.related_keywords.indexOf(a2.name);
          const indexB = node.related_keywords.indexOf(b3.name);
          return indexB - indexA;
        });
      }
      if (node?.subtopics) {
        transformedNode.children.sort((a2, b3) => {
          const indexA = node.subtopics.findIndex((subtopic) => subtopic.topic_name === a2.name);
          const indexB = node.subtopics.findIndex((subtopic) => subtopic.topic_name === b3.name);
          return indexB - indexA;
        });
      }
      return transformedNode;
    };
    const rootNode = transformNode(data.topical_map, true);
    return [rootNode];
  };
  var downloadTreeAsPng = (treeRef) => {
    if (treeRef && treeRef.children?.length >= 1) {
      const firstDiv = treeRef.children[1];
      if (firstDiv) {
        const clone2 = firstDiv.cloneNode(true);
        clone2.style.width = `${firstDiv.scrollWidth}px`;
        clone2.style.height = `${firstDiv.scrollHeight}px`;
        import_dom_to_image_more.default.toPng(clone2, {
          width: firstDiv.scrollWidth * 2,
          height: firstDiv.scrollHeight * 2,
          quality: 1,
          bgcolor: "#ffffff",
          style: {
            transform: "scale(" + 2 + ")",
            transformOrigin: "top left"
          }
        }).then(function(dataUrl) {
          const link2 = document.createElement("a");
          link2.href = dataUrl;
          link2.download = "topical_map.png";
          link2.click();
        }).catch(function(error) {
          console.error("Error exporting chart:", error);
        });
      } else {
        console.error("First div not found");
      }
    }
  };
  var zoomTree = (treeRef, scaleFactor) => {
    if (treeRef) {
      const currentScale = treeRef.getAttribute("data-scale") || 1;
      const newScale = currentScale * scaleFactor;
      treeRef.style.transform = `scale(${newScale})`;
      treeRef.setAttribute("data-scale", newScale);
    }
  };
  var enableDrag = (treeRef) => {
    let isDragging = false;
    let startX, startY, initialX, initialY;
    const onMouseDown = (e7) => {
      isDragging = true;
      startX = e7.clientX;
      startY = e7.clientY;
      initialX = treeRef.offsetLeft;
      initialY = treeRef.offsetTop;
      document.addEventListener("mousemove", onMouseMove);
      document.addEventListener("mouseup", onMouseUp);
    };
    const onMouseMove = (e7) => {
      if (isDragging) {
        const dx = e7.clientX - startX;
        const dy = e7.clientY - startY;
        treeRef.style.left = `${initialX + dx}px`;
        treeRef.style.top = `${initialY + dy}px`;
      }
    };
    const onMouseUp = () => {
      isDragging = false;
      document.removeEventListener("mousemove", onMouseMove);
      document.removeEventListener("mouseup", onMouseUp);
    };
    treeRef.addEventListener("mousedown", onMouseDown);
  };
  var downloadTreeAsCSV = (data) => {
    if (!data?.[0]?.topical_map)
      return;
    const mainTopic = data[0].topical_map;
    const rows = [];
    const mainTopicKeywords = mainTopic.related_keywords.map((keyword) => `\u2022 ${keyword}`).join("\n");
    rows.push([mainTopic.topic_name, "", "", mainTopicKeywords]);
    const processSubtopics = (subtopics, level = 1) => {
      subtopics.forEach((subtopic) => {
        const subtopicKeywords = subtopic.related_keywords.map((keyword) => `\u2022 ${keyword}`).join("\n");
        if (level === 1) {
          rows.push(["", subtopic.topic_name, "", subtopicKeywords]);
        } else {
          rows.push(["", "", subtopic.topic_name, subtopicKeywords]);
        }
        if (subtopic.subtopics && subtopic.subtopics.length > 0) {
          processSubtopics(subtopic.subtopics, level + 1);
        }
      });
    };
    if (mainTopic.subtopics && mainTopic.subtopics.length > 0) {
      processSubtopics(mainTopic.subtopics);
    }
    const headers = ["Main Topic", "Subtopics", "Second-level Topics", "Related Keywords"];
    const csvContent = [
      headers.join(","),
      ...rows.map((row) => row.map((cell) => `"${cell}"`).join(","))
    ].join("\n");
    const blob = new Blob(["\uFEFF" + csvContent], { type: "text/csv;charset=utf-8;" });
    (0, import_file_saver2.saveAs)(blob, "topical_map.csv");
  };

  // node_modules/@nivo/tree/dist/nivo-tree.es.js
  var import_react20 = __toESM(require_react());

  // node_modules/@nivo/core/dist/nivo-core.es.js
  var import_react17 = __toESM(require_react());
  var import_prop_types = __toESM(require_prop_types());

  // node_modules/@nivo/tooltip/dist/nivo-tooltip.es.js
  var import_react16 = __toESM(require_react());

  // node_modules/@react-spring/rafz/dist/react-spring_rafz.modern.mjs
  var updateQueue = makeQueue();
  var raf = (fn2) => schedule(fn2, updateQueue);
  var writeQueue = makeQueue();
  raf.write = (fn2) => schedule(fn2, writeQueue);
  var onStartQueue = makeQueue();
  raf.onStart = (fn2) => schedule(fn2, onStartQueue);
  var onFrameQueue = makeQueue();
  raf.onFrame = (fn2) => schedule(fn2, onFrameQueue);
  var onFinishQueue = makeQueue();
  raf.onFinish = (fn2) => schedule(fn2, onFinishQueue);
  var timeouts = [];
  raf.setTimeout = (handler, ms) => {
    const time = raf.now() + ms;
    const cancel = () => {
      const i6 = timeouts.findIndex((t5) => t5.cancel == cancel);
      if (~i6)
        timeouts.splice(i6, 1);
      pendingCount -= ~i6 ? 1 : 0;
    };
    const timeout = { time, handler, cancel };
    timeouts.splice(findTimeout(time), 0, timeout);
    pendingCount += 1;
    start();
    return timeout;
  };
  var findTimeout = (time) => ~(~timeouts.findIndex((t5) => t5.time > time) || ~timeouts.length);
  raf.cancel = (fn2) => {
    onStartQueue.delete(fn2);
    onFrameQueue.delete(fn2);
    onFinishQueue.delete(fn2);
    updateQueue.delete(fn2);
    writeQueue.delete(fn2);
  };
  raf.sync = (fn2) => {
    sync = true;
    raf.batchedUpdates(fn2);
    sync = false;
  };
  raf.throttle = (fn2) => {
    let lastArgs;
    function queuedFn() {
      try {
        fn2(...lastArgs);
      } finally {
        lastArgs = null;
      }
    }
    function throttled2(...args) {
      lastArgs = args;
      raf.onStart(queuedFn);
    }
    throttled2.handler = fn2;
    throttled2.cancel = () => {
      onStartQueue.delete(queuedFn);
      lastArgs = null;
    };
    return throttled2;
  };
  var nativeRaf = typeof window != "undefined" ? window.requestAnimationFrame : () => {
  };
  raf.use = (impl) => nativeRaf = impl;
  raf.now = typeof performance != "undefined" ? () => performance.now() : Date.now;
  raf.batchedUpdates = (fn2) => fn2();
  raf.catch = console.error;
  raf.frameLoop = "always";
  raf.advance = () => {
    if (raf.frameLoop !== "demand") {
      console.warn(
        "Cannot call the manual advancement of rafz whilst frameLoop is not set as demand"
      );
    } else {
      update();
    }
  };
  var ts = -1;
  var pendingCount = 0;
  var sync = false;
  function schedule(fn2, queue) {
    if (sync) {
      queue.delete(fn2);
      fn2(0);
    } else {
      queue.add(fn2);
      start();
    }
  }
  function start() {
    if (ts < 0) {
      ts = 0;
      if (raf.frameLoop !== "demand") {
        nativeRaf(loop);
      }
    }
  }
  function stop() {
    ts = -1;
  }
  function loop() {
    if (~ts) {
      nativeRaf(loop);
      raf.batchedUpdates(update);
    }
  }
  function update() {
    const prevTs = ts;
    ts = raf.now();
    const count2 = findTimeout(ts);
    if (count2) {
      eachSafely(timeouts.splice(0, count2), (t5) => t5.handler());
      pendingCount -= count2;
    }
    if (!pendingCount) {
      stop();
      return;
    }
    onStartQueue.flush();
    updateQueue.flush(prevTs ? Math.min(64, ts - prevTs) : 16.667);
    onFrameQueue.flush();
    writeQueue.flush();
    onFinishQueue.flush();
  }
  function makeQueue() {
    let next = /* @__PURE__ */ new Set();
    let current = next;
    return {
      add(fn2) {
        pendingCount += current == next && !next.has(fn2) ? 1 : 0;
        next.add(fn2);
      },
      delete(fn2) {
        pendingCount -= current == next && next.has(fn2) ? 1 : 0;
        return next.delete(fn2);
      },
      flush(arg) {
        if (current.size) {
          next = /* @__PURE__ */ new Set();
          pendingCount -= current.size;
          eachSafely(current, (fn2) => fn2(arg) && next.add(fn2));
          pendingCount += next.size;
          current = next;
        }
      }
    };
  }
  function eachSafely(values, each3) {
    values.forEach((value) => {
      try {
        each3(value);
      } catch (e7) {
        raf.catch(e7);
      }
    });
  }

  // node_modules/@react-spring/shared/dist/react-spring_shared.modern.mjs
  var import_react2 = __toESM(require_react(), 1);
  var import_react3 = __toESM(require_react(), 1);
  var import_react4 = __toESM(require_react(), 1);
  var import_react5 = __toESM(require_react(), 1);
  var import_react6 = __toESM(require_react(), 1);
  var import_react7 = __toESM(require_react(), 1);
  var import_react8 = __toESM(require_react(), 1);
  var import_react9 = __toESM(require_react(), 1);
  var __defProp2 = Object.defineProperty;
  var __export = (target, all) => {
    for (var name in all)
      __defProp2(target, name, { get: all[name], enumerable: true });
  };
  var globals_exports = {};
  __export(globals_exports, {
    assign: () => assign,
    colors: () => colors2,
    createStringInterpolator: () => createStringInterpolator,
    skipAnimation: () => skipAnimation,
    to: () => to2,
    willAdvance: () => willAdvance
  });
  function noop2() {
  }
  var defineHidden = (obj, key, value) => Object.defineProperty(obj, key, { value, writable: true, configurable: true });
  var is = {
    arr: Array.isArray,
    obj: (a2) => !!a2 && a2.constructor.name === "Object",
    fun: (a2) => typeof a2 === "function",
    str: (a2) => typeof a2 === "string",
    num: (a2) => typeof a2 === "number",
    und: (a2) => a2 === void 0
  };
  function isEqual(a2, b3) {
    if (is.arr(a2)) {
      if (!is.arr(b3) || a2.length !== b3.length)
        return false;
      for (let i6 = 0; i6 < a2.length; i6++) {
        if (a2[i6] !== b3[i6])
          return false;
      }
      return true;
    }
    return a2 === b3;
  }
  var each2 = (obj, fn2) => obj.forEach(fn2);
  function eachProp(obj, fn2, ctx2) {
    if (is.arr(obj)) {
      for (let i6 = 0; i6 < obj.length; i6++) {
        fn2.call(ctx2, obj[i6], `${i6}`);
      }
      return;
    }
    for (const key in obj) {
      if (obj.hasOwnProperty(key)) {
        fn2.call(ctx2, obj[key], key);
      }
    }
  }
  var toArray = (a2) => is.und(a2) ? [] : is.arr(a2) ? a2 : [a2];
  function flush(queue, iterator) {
    if (queue.size) {
      const items = Array.from(queue);
      queue.clear();
      each2(items, iterator);
    }
  }
  var flushCalls = (queue, ...args) => flush(queue, (fn2) => fn2(...args));
  var isSSR = () => typeof window === "undefined" || !window.navigator || /ServerSideRendering|^Deno\//.test(window.navigator.userAgent);
  var createStringInterpolator;
  var to2;
  var colors2 = null;
  var skipAnimation = false;
  var willAdvance = noop2;
  var assign = (globals) => {
    if (globals.to)
      to2 = globals.to;
    if (globals.now)
      raf.now = globals.now;
    if (globals.colors !== void 0)
      colors2 = globals.colors;
    if (globals.skipAnimation != null)
      skipAnimation = globals.skipAnimation;
    if (globals.createStringInterpolator)
      createStringInterpolator = globals.createStringInterpolator;
    if (globals.requestAnimationFrame)
      raf.use(globals.requestAnimationFrame);
    if (globals.batchedUpdates)
      raf.batchedUpdates = globals.batchedUpdates;
    if (globals.willAdvance)
      willAdvance = globals.willAdvance;
    if (globals.frameLoop)
      raf.frameLoop = globals.frameLoop;
  };
  var startQueue = /* @__PURE__ */ new Set();
  var currentFrame = [];
  var prevFrame = [];
  var priority = 0;
  var frameLoop = {
    get idle() {
      return !startQueue.size && !currentFrame.length;
    },
    start(animation) {
      if (priority > animation.priority) {
        startQueue.add(animation);
        raf.onStart(flushStartQueue);
      } else {
        startSafely(animation);
        raf(advance);
      }
    },
    advance,
    sort(animation) {
      if (priority) {
        raf.onFrame(() => frameLoop.sort(animation));
      } else {
        const prevIndex = currentFrame.indexOf(animation);
        if (~prevIndex) {
          currentFrame.splice(prevIndex, 1);
          startUnsafely(animation);
        }
      }
    },
    clear() {
      currentFrame = [];
      startQueue.clear();
    }
  };
  function flushStartQueue() {
    startQueue.forEach(startSafely);
    startQueue.clear();
    raf(advance);
  }
  function startSafely(animation) {
    if (!currentFrame.includes(animation))
      startUnsafely(animation);
  }
  function startUnsafely(animation) {
    currentFrame.splice(
      findIndex(currentFrame, (other) => other.priority > animation.priority),
      0,
      animation
    );
  }
  function advance(dt2) {
    const nextFrame = prevFrame;
    for (let i6 = 0; i6 < currentFrame.length; i6++) {
      const animation = currentFrame[i6];
      priority = animation.priority;
      if (!animation.idle) {
        willAdvance(animation);
        animation.advance(dt2);
        if (!animation.idle) {
          nextFrame.push(animation);
        }
      }
    }
    priority = 0;
    prevFrame = currentFrame;
    prevFrame.length = 0;
    currentFrame = nextFrame;
    return currentFrame.length > 0;
  }
  function findIndex(arr, test) {
    const index = arr.findIndex(test);
    return index < 0 ? arr.length : index;
  }
  var clamp = (min, max, v4) => Math.min(Math.max(v4, min), max);
  var colors22 = {
    transparent: 0,
    aliceblue: 4042850303,
    antiquewhite: 4209760255,
    aqua: 16777215,
    aquamarine: 2147472639,
    azure: 4043309055,
    beige: 4126530815,
    bisque: 4293182719,
    black: 255,
    blanchedalmond: 4293643775,
    blue: 65535,
    blueviolet: 2318131967,
    brown: 2771004159,
    burlywood: 3736635391,
    burntsienna: 3934150143,
    cadetblue: 1604231423,
    chartreuse: 2147418367,
    chocolate: 3530104575,
    coral: 4286533887,
    cornflowerblue: 1687547391,
    cornsilk: 4294499583,
    crimson: 3692313855,
    cyan: 16777215,
    darkblue: 35839,
    darkcyan: 9145343,
    darkgoldenrod: 3095792639,
    darkgray: 2846468607,
    darkgreen: 6553855,
    darkgrey: 2846468607,
    darkkhaki: 3182914559,
    darkmagenta: 2332068863,
    darkolivegreen: 1433087999,
    darkorange: 4287365375,
    darkorchid: 2570243327,
    darkred: 2332033279,
    darksalmon: 3918953215,
    darkseagreen: 2411499519,
    darkslateblue: 1211993087,
    darkslategray: 793726975,
    darkslategrey: 793726975,
    darkturquoise: 13554175,
    darkviolet: 2483082239,
    deeppink: 4279538687,
    deepskyblue: 12582911,
    dimgray: 1768516095,
    dimgrey: 1768516095,
    dodgerblue: 512819199,
    firebrick: 2988581631,
    floralwhite: 4294635775,
    forestgreen: 579543807,
    fuchsia: 4278255615,
    gainsboro: 3705462015,
    ghostwhite: 4177068031,
    gold: 4292280575,
    goldenrod: 3668254975,
    gray: 2155905279,
    green: 8388863,
    greenyellow: 2919182335,
    grey: 2155905279,
    honeydew: 4043305215,
    hotpink: 4285117695,
    indianred: 3445382399,
    indigo: 1258324735,
    ivory: 4294963455,
    khaki: 4041641215,
    lavender: 3873897215,
    lavenderblush: 4293981695,
    lawngreen: 2096890111,
    lemonchiffon: 4294626815,
    lightblue: 2916673279,
    lightcoral: 4034953471,
    lightcyan: 3774873599,
    lightgoldenrodyellow: 4210742015,
    lightgray: 3553874943,
    lightgreen: 2431553791,
    lightgrey: 3553874943,
    lightpink: 4290167295,
    lightsalmon: 4288707327,
    lightseagreen: 548580095,
    lightskyblue: 2278488831,
    lightslategray: 2005441023,
    lightslategrey: 2005441023,
    lightsteelblue: 2965692159,
    lightyellow: 4294959359,
    lime: 16711935,
    limegreen: 852308735,
    linen: 4210091775,
    magenta: 4278255615,
    maroon: 2147483903,
    mediumaquamarine: 1724754687,
    mediumblue: 52735,
    mediumorchid: 3126187007,
    mediumpurple: 2473647103,
    mediumseagreen: 1018393087,
    mediumslateblue: 2070474495,
    mediumspringgreen: 16423679,
    mediumturquoise: 1221709055,
    mediumvioletred: 3340076543,
    midnightblue: 421097727,
    mintcream: 4127193855,
    mistyrose: 4293190143,
    moccasin: 4293178879,
    navajowhite: 4292783615,
    navy: 33023,
    oldlace: 4260751103,
    olive: 2155872511,
    olivedrab: 1804477439,
    orange: 4289003775,
    orangered: 4282712319,
    orchid: 3664828159,
    palegoldenrod: 4008225535,
    palegreen: 2566625535,
    paleturquoise: 2951671551,
    palevioletred: 3681588223,
    papayawhip: 4293907967,
    peachpuff: 4292524543,
    peru: 3448061951,
    pink: 4290825215,
    plum: 3718307327,
    powderblue: 2967529215,
    purple: 2147516671,
    rebeccapurple: 1714657791,
    red: 4278190335,
    rosybrown: 3163525119,
    royalblue: 1097458175,
    saddlebrown: 2336560127,
    salmon: 4202722047,
    sandybrown: 4104413439,
    seagreen: 780883967,
    seashell: 4294307583,
    sienna: 2689740287,
    silver: 3233857791,
    skyblue: 2278484991,
    slateblue: 1784335871,
    slategray: 1887473919,
    slategrey: 1887473919,
    snow: 4294638335,
    springgreen: 16744447,
    steelblue: 1182971135,
    tan: 3535047935,
    teal: 8421631,
    thistle: 3636451583,
    tomato: 4284696575,
    turquoise: 1088475391,
    violet: 4001558271,
    wheat: 4125012991,
    white: 4294967295,
    whitesmoke: 4126537215,
    yellow: 4294902015,
    yellowgreen: 2597139199
  };
  var NUMBER = "[-+]?\\d*\\.?\\d+";
  var PERCENTAGE = NUMBER + "%";
  function call(...parts) {
    return "\\(\\s*(" + parts.join(")\\s*,\\s*(") + ")\\s*\\)";
  }
  var rgb = new RegExp("rgb" + call(NUMBER, NUMBER, NUMBER));
  var rgba = new RegExp("rgba" + call(NUMBER, NUMBER, NUMBER, NUMBER));
  var hsl = new RegExp("hsl" + call(NUMBER, PERCENTAGE, PERCENTAGE));
  var hsla = new RegExp(
    "hsla" + call(NUMBER, PERCENTAGE, PERCENTAGE, NUMBER)
  );
  var hex3 = /^#([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/;
  var hex4 = /^#([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/;
  var hex6 = /^#([0-9a-fA-F]{6})$/;
  var hex8 = /^#([0-9a-fA-F]{8})$/;
  function normalizeColor(color5) {
    let match;
    if (typeof color5 === "number") {
      return color5 >>> 0 === color5 && color5 >= 0 && color5 <= 4294967295 ? color5 : null;
    }
    if (match = hex6.exec(color5))
      return parseInt(match[1] + "ff", 16) >>> 0;
    if (colors2 && colors2[color5] !== void 0) {
      return colors2[color5];
    }
    if (match = rgb.exec(color5)) {
      return (parse255(match[1]) << 24 | parse255(match[2]) << 16 | parse255(match[3]) << 8 | 255) >>> 0;
    }
    if (match = rgba.exec(color5)) {
      return (parse255(match[1]) << 24 | parse255(match[2]) << 16 | parse255(match[3]) << 8 | parse1(match[4])) >>> 0;
    }
    if (match = hex3.exec(color5)) {
      return parseInt(
        match[1] + match[1] + match[2] + match[2] + match[3] + match[3] + "ff",
        16
      ) >>> 0;
    }
    if (match = hex8.exec(color5))
      return parseInt(match[1], 16) >>> 0;
    if (match = hex4.exec(color5)) {
      return parseInt(
        match[1] + match[1] + match[2] + match[2] + match[3] + match[3] + match[4] + match[4],
        16
      ) >>> 0;
    }
    if (match = hsl.exec(color5)) {
      return (hslToRgb(
        parse360(match[1]),
        parsePercentage(match[2]),
        parsePercentage(match[3])
      ) | 255) >>> 0;
    }
    if (match = hsla.exec(color5)) {
      return (hslToRgb(
        parse360(match[1]),
        parsePercentage(match[2]),
        parsePercentage(match[3])
      ) | parse1(match[4])) >>> 0;
    }
    return null;
  }
  function hue2rgb(p2, q3, t5) {
    if (t5 < 0)
      t5 += 1;
    if (t5 > 1)
      t5 -= 1;
    if (t5 < 1 / 6)
      return p2 + (q3 - p2) * 6 * t5;
    if (t5 < 1 / 2)
      return q3;
    if (t5 < 2 / 3)
      return p2 + (q3 - p2) * (2 / 3 - t5) * 6;
    return p2;
  }
  function hslToRgb(h, s3, l5) {
    const q3 = l5 < 0.5 ? l5 * (1 + s3) : l5 + s3 - l5 * s3;
    const p2 = 2 * l5 - q3;
    const r6 = hue2rgb(p2, q3, h + 1 / 3);
    const g2 = hue2rgb(p2, q3, h);
    const b3 = hue2rgb(p2, q3, h - 1 / 3);
    return Math.round(r6 * 255) << 24 | Math.round(g2 * 255) << 16 | Math.round(b3 * 255) << 8;
  }
  function parse255(str) {
    const int = parseInt(str, 10);
    if (int < 0)
      return 0;
    if (int > 255)
      return 255;
    return int;
  }
  function parse360(str) {
    const int = parseFloat(str);
    return (int % 360 + 360) % 360 / 360;
  }
  function parse1(str) {
    const num = parseFloat(str);
    if (num < 0)
      return 0;
    if (num > 1)
      return 255;
    return Math.round(num * 255);
  }
  function parsePercentage(str) {
    const int = parseFloat(str);
    if (int < 0)
      return 0;
    if (int > 100)
      return 1;
    return int / 100;
  }
  function colorToRgba(input) {
    let int32Color = normalizeColor(input);
    if (int32Color === null)
      return input;
    int32Color = int32Color || 0;
    const r6 = (int32Color & 4278190080) >>> 24;
    const g2 = (int32Color & 16711680) >>> 16;
    const b3 = (int32Color & 65280) >>> 8;
    const a2 = (int32Color & 255) / 255;
    return `rgba(${r6}, ${g2}, ${b3}, ${a2})`;
  }
  var createInterpolator = (range, output, extrapolate) => {
    if (is.fun(range)) {
      return range;
    }
    if (is.arr(range)) {
      return createInterpolator({
        range,
        output,
        extrapolate
      });
    }
    if (is.str(range.output[0])) {
      return createStringInterpolator(range);
    }
    const config2 = range;
    const outputRange = config2.output;
    const inputRange = config2.range || [0, 1];
    const extrapolateLeft = config2.extrapolateLeft || config2.extrapolate || "extend";
    const extrapolateRight = config2.extrapolateRight || config2.extrapolate || "extend";
    const easing = config2.easing || ((t5) => t5);
    return (input) => {
      const range2 = findRange(input, inputRange);
      return interpolate3(
        input,
        inputRange[range2],
        inputRange[range2 + 1],
        outputRange[range2],
        outputRange[range2 + 1],
        easing,
        extrapolateLeft,
        extrapolateRight,
        config2.map
      );
    };
  };
  function interpolate3(input, inputMin, inputMax, outputMin, outputMax, easing, extrapolateLeft, extrapolateRight, map3) {
    let result = map3 ? map3(input) : input;
    if (result < inputMin) {
      if (extrapolateLeft === "identity")
        return result;
      else if (extrapolateLeft === "clamp")
        result = inputMin;
    }
    if (result > inputMax) {
      if (extrapolateRight === "identity")
        return result;
      else if (extrapolateRight === "clamp")
        result = inputMax;
    }
    if (outputMin === outputMax)
      return outputMin;
    if (inputMin === inputMax)
      return input <= inputMin ? outputMin : outputMax;
    if (inputMin === -Infinity)
      result = -result;
    else if (inputMax === Infinity)
      result = result - inputMin;
    else
      result = (result - inputMin) / (inputMax - inputMin);
    result = easing(result);
    if (outputMin === -Infinity)
      result = -result;
    else if (outputMax === Infinity)
      result = result + outputMin;
    else
      result = result * (outputMax - outputMin) + outputMin;
    return result;
  }
  function findRange(input, inputRange) {
    for (var i6 = 1; i6 < inputRange.length - 1; ++i6)
      if (inputRange[i6] >= input)
        break;
    return i6 - 1;
  }
  var steps = (steps2, direction = "end") => (progress2) => {
    progress2 = direction === "end" ? Math.min(progress2, 0.999) : Math.max(progress2, 1e-3);
    const expanded = progress2 * steps2;
    const rounded = direction === "end" ? Math.floor(expanded) : Math.ceil(expanded);
    return clamp(0, 1, rounded / steps2);
  };
  var c1 = 1.70158;
  var c2 = c1 * 1.525;
  var c3 = c1 + 1;
  var c4 = 2 * Math.PI / 3;
  var c5 = 2 * Math.PI / 4.5;
  var bounceOut = (x3) => {
    const n1 = 7.5625;
    const d1 = 2.75;
    if (x3 < 1 / d1) {
      return n1 * x3 * x3;
    } else if (x3 < 2 / d1) {
      return n1 * (x3 -= 1.5 / d1) * x3 + 0.75;
    } else if (x3 < 2.5 / d1) {
      return n1 * (x3 -= 2.25 / d1) * x3 + 0.9375;
    } else {
      return n1 * (x3 -= 2.625 / d1) * x3 + 0.984375;
    }
  };
  var easings = {
    linear: (x3) => x3,
    easeInQuad: (x3) => x3 * x3,
    easeOutQuad: (x3) => 1 - (1 - x3) * (1 - x3),
    easeInOutQuad: (x3) => x3 < 0.5 ? 2 * x3 * x3 : 1 - Math.pow(-2 * x3 + 2, 2) / 2,
    easeInCubic: (x3) => x3 * x3 * x3,
    easeOutCubic: (x3) => 1 - Math.pow(1 - x3, 3),
    easeInOutCubic: (x3) => x3 < 0.5 ? 4 * x3 * x3 * x3 : 1 - Math.pow(-2 * x3 + 2, 3) / 2,
    easeInQuart: (x3) => x3 * x3 * x3 * x3,
    easeOutQuart: (x3) => 1 - Math.pow(1 - x3, 4),
    easeInOutQuart: (x3) => x3 < 0.5 ? 8 * x3 * x3 * x3 * x3 : 1 - Math.pow(-2 * x3 + 2, 4) / 2,
    easeInQuint: (x3) => x3 * x3 * x3 * x3 * x3,
    easeOutQuint: (x3) => 1 - Math.pow(1 - x3, 5),
    easeInOutQuint: (x3) => x3 < 0.5 ? 16 * x3 * x3 * x3 * x3 * x3 : 1 - Math.pow(-2 * x3 + 2, 5) / 2,
    easeInSine: (x3) => 1 - Math.cos(x3 * Math.PI / 2),
    easeOutSine: (x3) => Math.sin(x3 * Math.PI / 2),
    easeInOutSine: (x3) => -(Math.cos(Math.PI * x3) - 1) / 2,
    easeInExpo: (x3) => x3 === 0 ? 0 : Math.pow(2, 10 * x3 - 10),
    easeOutExpo: (x3) => x3 === 1 ? 1 : 1 - Math.pow(2, -10 * x3),
    easeInOutExpo: (x3) => x3 === 0 ? 0 : x3 === 1 ? 1 : x3 < 0.5 ? Math.pow(2, 20 * x3 - 10) / 2 : (2 - Math.pow(2, -20 * x3 + 10)) / 2,
    easeInCirc: (x3) => 1 - Math.sqrt(1 - Math.pow(x3, 2)),
    easeOutCirc: (x3) => Math.sqrt(1 - Math.pow(x3 - 1, 2)),
    easeInOutCirc: (x3) => x3 < 0.5 ? (1 - Math.sqrt(1 - Math.pow(2 * x3, 2))) / 2 : (Math.sqrt(1 - Math.pow(-2 * x3 + 2, 2)) + 1) / 2,
    easeInBack: (x3) => c3 * x3 * x3 * x3 - c1 * x3 * x3,
    easeOutBack: (x3) => 1 + c3 * Math.pow(x3 - 1, 3) + c1 * Math.pow(x3 - 1, 2),
    easeInOutBack: (x3) => x3 < 0.5 ? Math.pow(2 * x3, 2) * ((c2 + 1) * 2 * x3 - c2) / 2 : (Math.pow(2 * x3 - 2, 2) * ((c2 + 1) * (x3 * 2 - 2) + c2) + 2) / 2,
    easeInElastic: (x3) => x3 === 0 ? 0 : x3 === 1 ? 1 : -Math.pow(2, 10 * x3 - 10) * Math.sin((x3 * 10 - 10.75) * c4),
    easeOutElastic: (x3) => x3 === 0 ? 0 : x3 === 1 ? 1 : Math.pow(2, -10 * x3) * Math.sin((x3 * 10 - 0.75) * c4) + 1,
    easeInOutElastic: (x3) => x3 === 0 ? 0 : x3 === 1 ? 1 : x3 < 0.5 ? -(Math.pow(2, 20 * x3 - 10) * Math.sin((20 * x3 - 11.125) * c5)) / 2 : Math.pow(2, -20 * x3 + 10) * Math.sin((20 * x3 - 11.125) * c5) / 2 + 1,
    easeInBounce: (x3) => 1 - bounceOut(1 - x3),
    easeOutBounce: bounceOut,
    easeInOutBounce: (x3) => x3 < 0.5 ? (1 - bounceOut(1 - 2 * x3)) / 2 : (1 + bounceOut(2 * x3 - 1)) / 2,
    steps
  };
  var $get = Symbol.for("FluidValue.get");
  var $observers = Symbol.for("FluidValue.observers");
  var hasFluidValue = (arg) => Boolean(arg && arg[$get]);
  var getFluidValue = (arg) => arg && arg[$get] ? arg[$get]() : arg;
  var getFluidObservers = (target) => target[$observers] || null;
  function callFluidObserver(observer2, event) {
    if (observer2.eventObserved) {
      observer2.eventObserved(event);
    } else {
      observer2(event);
    }
  }
  function callFluidObservers(target, event) {
    const observers = target[$observers];
    if (observers) {
      observers.forEach((observer2) => {
        callFluidObserver(observer2, event);
      });
    }
  }
  var FluidValue = class {
    constructor(get) {
      if (!get && !(get = this.get)) {
        throw Error("Unknown getter");
      }
      setFluidGetter(this, get);
    }
  };
  var setFluidGetter = (target, get) => setHidden(target, $get, get);
  function addFluidObserver(target, observer2) {
    if (target[$get]) {
      let observers = target[$observers];
      if (!observers) {
        setHidden(target, $observers, observers = /* @__PURE__ */ new Set());
      }
      if (!observers.has(observer2)) {
        observers.add(observer2);
        if (target.observerAdded) {
          target.observerAdded(observers.size, observer2);
        }
      }
    }
    return observer2;
  }
  function removeFluidObserver(target, observer2) {
    const observers = target[$observers];
    if (observers && observers.has(observer2)) {
      const count2 = observers.size - 1;
      if (count2) {
        observers.delete(observer2);
      } else {
        target[$observers] = null;
      }
      if (target.observerRemoved) {
        target.observerRemoved(count2, observer2);
      }
    }
  }
  var setHidden = (target, key, value) => Object.defineProperty(target, key, {
    value,
    writable: true,
    configurable: true
  });
  var numberRegex = /[+\-]?(?:0|[1-9]\d*)(?:\.\d*)?(?:[eE][+\-]?\d+)?/g;
  var colorRegex = /(#(?:[0-9a-f]{2}){2,4}|(#[0-9a-f]{3})|(rgb|hsl)a?\((-?\d+%?[,\s]+){2,3}\s*[\d\.]+%?\))/gi;
  var unitRegex = new RegExp(`(${numberRegex.source})(%|[a-z]+)`, "i");
  var rgbaRegex = /rgba\(([0-9\.-]+), ([0-9\.-]+), ([0-9\.-]+), ([0-9\.-]+)\)/gi;
  var cssVariableRegex = /var\((--[a-zA-Z0-9-_]+),? ?([a-zA-Z0-9 ()%#.,-]+)?\)/;
  var variableToRgba = (input) => {
    const [token, fallback] = parseCSSVariable(input);
    if (!token || isSSR()) {
      return input;
    }
    const value = window.getComputedStyle(document.documentElement).getPropertyValue(token);
    if (value) {
      return value.trim();
    } else if (fallback && fallback.startsWith("--")) {
      const value2 = window.getComputedStyle(document.documentElement).getPropertyValue(fallback);
      if (value2) {
        return value2;
      } else {
        return input;
      }
    } else if (fallback && cssVariableRegex.test(fallback)) {
      return variableToRgba(fallback);
    } else if (fallback) {
      return fallback;
    }
    return input;
  };
  var parseCSSVariable = (current) => {
    const match = cssVariableRegex.exec(current);
    if (!match)
      return [,];
    const [, token, fallback] = match;
    return [token, fallback];
  };
  var namedColorRegex;
  var rgbaRound = (_2, p1, p2, p3, p4) => `rgba(${Math.round(p1)}, ${Math.round(p2)}, ${Math.round(p3)}, ${p4})`;
  var createStringInterpolator2 = (config2) => {
    if (!namedColorRegex)
      namedColorRegex = colors2 ? new RegExp(`(${Object.keys(colors2).join("|")})(?!\\w)`, "g") : /^\b$/;
    const output = config2.output.map((value) => {
      return getFluidValue(value).replace(cssVariableRegex, variableToRgba).replace(colorRegex, colorToRgba).replace(namedColorRegex, colorToRgba);
    });
    const keyframes = output.map((value) => value.match(numberRegex).map(Number));
    const outputRanges = keyframes[0].map(
      (_2, i6) => keyframes.map((values) => {
        if (!(i6 in values)) {
          throw Error('The arity of each "output" value must be equal');
        }
        return values[i6];
      })
    );
    const interpolators2 = outputRanges.map(
      (output2) => createInterpolator({ ...config2, output: output2 })
    );
    return (input) => {
      const missingUnit = !unitRegex.test(output[0]) && output.find((value) => unitRegex.test(value))?.replace(numberRegex, "");
      let i6 = 0;
      return output[0].replace(
        numberRegex,
        () => `${interpolators2[i6++](input)}${missingUnit || ""}`
      ).replace(rgbaRegex, rgbaRound);
    };
  };
  var prefix = "react-spring: ";
  var once = (fn2) => {
    const func = fn2;
    let called = false;
    if (typeof func != "function") {
      throw new TypeError(`${prefix}once requires a function parameter`);
    }
    return (...args) => {
      if (!called) {
        func(...args);
        called = true;
      }
    };
  };
  var warnInterpolate = once(console.warn);
  function deprecateInterpolate() {
    warnInterpolate(
      `${prefix}The "interpolate" function is deprecated in v9 (use "to" instead)`
    );
  }
  var warnDirectCall = once(console.warn);
  function deprecateDirectCall() {
    warnDirectCall(
      `${prefix}Directly calling start instead of using the api object is deprecated in v9 (use ".start" instead), this will be removed in later 0.X.0 versions`
    );
  }
  function isAnimatedString(value) {
    return is.str(value) && (value[0] == "#" || /\d/.test(value) || !isSSR() && cssVariableRegex.test(value) || value in (colors2 || {}));
  }
  var useIsomorphicLayoutEffect = isSSR() ? import_react5.useEffect : import_react5.useLayoutEffect;
  var useIsMounted = () => {
    const isMounted = (0, import_react4.useRef)(false);
    useIsomorphicLayoutEffect(() => {
      isMounted.current = true;
      return () => {
        isMounted.current = false;
      };
    }, []);
    return isMounted;
  };
  function useForceUpdate() {
    const update3 = (0, import_react3.useState)()[1];
    const isMounted = useIsMounted();
    return () => {
      if (isMounted.current) {
        update3(Math.random());
      }
    };
  }
  function useMemoOne(getResult, inputs) {
    const [initial] = (0, import_react6.useState)(
      () => ({
        inputs,
        result: getResult()
      })
    );
    const committed = (0, import_react6.useRef)();
    const prevCache = committed.current;
    let cache = prevCache;
    if (cache) {
      const useCache = Boolean(
        inputs && cache.inputs && areInputsEqual(inputs, cache.inputs)
      );
      if (!useCache) {
        cache = {
          inputs,
          result: getResult()
        };
      }
    } else {
      cache = initial;
    }
    (0, import_react6.useEffect)(() => {
      committed.current = cache;
      if (prevCache == initial) {
        initial.inputs = initial.result = void 0;
      }
    }, [cache]);
    return cache.result;
  }
  function areInputsEqual(next, prev) {
    if (next.length !== prev.length) {
      return false;
    }
    for (let i6 = 0; i6 < next.length; i6++) {
      if (next[i6] !== prev[i6]) {
        return false;
      }
    }
    return true;
  }
  var useOnce = (effect) => (0, import_react7.useEffect)(effect, emptyDeps);
  var emptyDeps = [];
  function usePrev(value) {
    const prevRef = (0, import_react8.useRef)();
    (0, import_react8.useEffect)(() => {
      prevRef.current = value;
    });
    return prevRef.current;
  }

  // node_modules/@react-spring/core/dist/react-spring_core.modern.mjs
  var import_react11 = __toESM(require_react(), 1);

  // node_modules/@react-spring/animated/dist/react-spring_animated.modern.mjs
  var React3 = __toESM(require_react(), 1);
  var import_react10 = __toESM(require_react(), 1);
  var $node = Symbol.for("Animated:node");
  var isAnimated = (value) => !!value && value[$node] === value;
  var getAnimated = (owner) => owner && owner[$node];
  var setAnimated = (owner, node) => defineHidden(owner, $node, node);
  var getPayload = (owner) => owner && owner[$node] && owner[$node].getPayload();
  var Animated = class {
    constructor() {
      setAnimated(this, this);
    }
    getPayload() {
      return this.payload || [];
    }
  };
  var AnimatedValue = class extends Animated {
    constructor(_value) {
      super();
      this._value = _value;
      this.done = true;
      this.durationProgress = 0;
      if (is.num(this._value)) {
        this.lastPosition = this._value;
      }
    }
    static create(value) {
      return new AnimatedValue(value);
    }
    getPayload() {
      return [this];
    }
    getValue() {
      return this._value;
    }
    setValue(value, step) {
      if (is.num(value)) {
        this.lastPosition = value;
        if (step) {
          value = Math.round(value / step) * step;
          if (this.done) {
            this.lastPosition = value;
          }
        }
      }
      if (this._value === value) {
        return false;
      }
      this._value = value;
      return true;
    }
    reset() {
      const { done } = this;
      this.done = false;
      if (is.num(this._value)) {
        this.elapsedTime = 0;
        this.durationProgress = 0;
        this.lastPosition = this._value;
        if (done)
          this.lastVelocity = null;
        this.v0 = null;
      }
    }
  };
  var AnimatedString = class extends AnimatedValue {
    constructor(value) {
      super(0);
      this._string = null;
      this._toString = createInterpolator({
        output: [value, value]
      });
    }
    static create(value) {
      return new AnimatedString(value);
    }
    getValue() {
      const value = this._string;
      return value == null ? this._string = this._toString(this._value) : value;
    }
    setValue(value) {
      if (is.str(value)) {
        if (value == this._string) {
          return false;
        }
        this._string = value;
        this._value = 1;
      } else if (super.setValue(value)) {
        this._string = null;
      } else {
        return false;
      }
      return true;
    }
    reset(goal) {
      if (goal) {
        this._toString = createInterpolator({
          output: [this.getValue(), goal]
        });
      }
      this._value = 0;
      super.reset();
    }
  };
  var TreeContext = { dependencies: null };
  var AnimatedObject = class extends Animated {
    constructor(source) {
      super();
      this.source = source;
      this.setValue(source);
    }
    getValue(animated5) {
      const values = {};
      eachProp(this.source, (source, key) => {
        if (isAnimated(source)) {
          values[key] = source.getValue(animated5);
        } else if (hasFluidValue(source)) {
          values[key] = getFluidValue(source);
        } else if (!animated5) {
          values[key] = source;
        }
      });
      return values;
    }
    setValue(source) {
      this.source = source;
      this.payload = this._makePayload(source);
    }
    reset() {
      if (this.payload) {
        each2(this.payload, (node) => node.reset());
      }
    }
    _makePayload(source) {
      if (source) {
        const payload = /* @__PURE__ */ new Set();
        eachProp(source, this._addToPayload, payload);
        return Array.from(payload);
      }
    }
    _addToPayload(source) {
      if (TreeContext.dependencies && hasFluidValue(source)) {
        TreeContext.dependencies.add(source);
      }
      const payload = getPayload(source);
      if (payload) {
        each2(payload, (node) => this.add(node));
      }
    }
  };
  var AnimatedArray = class extends AnimatedObject {
    constructor(source) {
      super(source);
    }
    static create(source) {
      return new AnimatedArray(source);
    }
    getValue() {
      return this.source.map((node) => node.getValue());
    }
    setValue(source) {
      const payload = this.getPayload();
      if (source.length == payload.length) {
        return payload.map((node, i6) => node.setValue(source[i6])).some(Boolean);
      }
      super.setValue(source.map(makeAnimated));
      return true;
    }
  };
  function makeAnimated(value) {
    const nodeType = isAnimatedString(value) ? AnimatedString : AnimatedValue;
    return nodeType.create(value);
  }
  function getAnimatedType(value) {
    const parentNode = getAnimated(value);
    return parentNode ? parentNode.constructor : is.arr(value) ? AnimatedArray : isAnimatedString(value) ? AnimatedString : AnimatedValue;
  }
  var withAnimated = (Component, host5) => {
    const hasInstance = !is.fun(Component) || Component.prototype && Component.prototype.isReactComponent;
    return (0, import_react10.forwardRef)((givenProps, givenRef) => {
      const instanceRef = (0, import_react10.useRef)(null);
      const ref = hasInstance && (0, import_react10.useCallback)(
        (value) => {
          instanceRef.current = updateRef(givenRef, value);
        },
        [givenRef]
      );
      const [props, deps] = getAnimatedState(givenProps, host5);
      const forceUpdate = useForceUpdate();
      const callback2 = () => {
        const instance = instanceRef.current;
        if (hasInstance && !instance) {
          return;
        }
        const didUpdate = instance ? host5.applyAnimatedValues(instance, props.getValue(true)) : false;
        if (didUpdate === false) {
          forceUpdate();
        }
      };
      const observer = new PropsObserver(callback2, deps);
      const observerRef = (0, import_react10.useRef)();
      useIsomorphicLayoutEffect(() => {
        observerRef.current = observer;
        each2(deps, (dep) => addFluidObserver(dep, observer));
        return () => {
          if (observerRef.current) {
            each2(
              observerRef.current.deps,
              (dep) => removeFluidObserver(dep, observerRef.current)
            );
            raf.cancel(observerRef.current.update);
          }
        };
      });
      (0, import_react10.useEffect)(callback2, []);
      useOnce(() => () => {
        const observer2 = observerRef.current;
        each2(observer2.deps, (dep) => removeFluidObserver(dep, observer2));
      });
      const usedProps = host5.getComponentProps(props.getValue());
      return /* @__PURE__ */ React3.createElement(Component, { ...usedProps, ref });
    });
  };
  var PropsObserver = class {
    constructor(update3, deps) {
      this.update = update3;
      this.deps = deps;
    }
    eventObserved(event) {
      if (event.type == "change") {
        raf.write(this.update);
      }
    }
  };
  function getAnimatedState(props, host5) {
    const dependencies = /* @__PURE__ */ new Set();
    TreeContext.dependencies = dependencies;
    if (props.style)
      props = {
        ...props,
        style: host5.createAnimatedStyle(props.style)
      };
    props = new AnimatedObject(props);
    TreeContext.dependencies = null;
    return [props, dependencies];
  }
  function updateRef(ref, value) {
    if (ref) {
      if (is.fun(ref))
        ref(value);
      else
        ref.current = value;
    }
    return value;
  }
  var cacheKey = Symbol.for("AnimatedComponent");
  var createHost = (components, {
    applyAnimatedValues: applyAnimatedValues5 = () => false,
    createAnimatedStyle = (style) => new AnimatedObject(style),
    getComponentProps = (props) => props
  } = {}) => {
    const hostConfig = {
      applyAnimatedValues: applyAnimatedValues5,
      createAnimatedStyle,
      getComponentProps
    };
    const animated5 = (Component) => {
      const displayName = getDisplayName(Component) || "Anonymous";
      if (is.str(Component)) {
        Component = animated5[Component] || (animated5[Component] = withAnimated(Component, hostConfig));
      } else {
        Component = Component[cacheKey] || (Component[cacheKey] = withAnimated(Component, hostConfig));
      }
      Component.displayName = `Animated(${displayName})`;
      return Component;
    };
    eachProp(components, (Component, key) => {
      if (is.arr(components)) {
        key = getDisplayName(Component);
      }
      animated5[key] = animated5(Component);
    });
    return {
      animated: animated5
    };
  };
  var getDisplayName = (arg) => is.str(arg) ? arg : arg && is.str(arg.displayName) ? arg.displayName : is.fun(arg) && arg.name || null;

  // node_modules/@react-spring/core/dist/react-spring_core.modern.mjs
  var React4 = __toESM(require_react(), 1);
  var import_react12 = __toESM(require_react(), 1);
  var import_react13 = __toESM(require_react(), 1);
  var React22 = __toESM(require_react(), 1);
  var import_react14 = __toESM(require_react(), 1);
  var import_react15 = __toESM(require_react(), 1);
  function callProp(value, ...args) {
    return is.fun(value) ? value(...args) : value;
  }
  var matchProp = (value, key) => value === true || !!(key && value && (is.fun(value) ? value(key) : toArray(value).includes(key)));
  var resolveProp = (prop, key) => is.obj(prop) ? key && prop[key] : prop;
  var getDefaultProp = (props, key) => props.default === true ? props[key] : props.default ? props.default[key] : void 0;
  var noopTransform = (value) => value;
  var getDefaultProps = (props, transform = noopTransform) => {
    let keys = DEFAULT_PROPS;
    if (props.default && props.default !== true) {
      props = props.default;
      keys = Object.keys(props);
    }
    const defaults22 = {};
    for (const key of keys) {
      const value = transform(props[key], key);
      if (!is.und(value)) {
        defaults22[key] = value;
      }
    }
    return defaults22;
  };
  var DEFAULT_PROPS = [
    "config",
    "onProps",
    "onStart",
    "onChange",
    "onPause",
    "onResume",
    "onRest"
  ];
  var RESERVED_PROPS = {
    config: 1,
    from: 1,
    to: 1,
    ref: 1,
    loop: 1,
    reset: 1,
    pause: 1,
    cancel: 1,
    reverse: 1,
    immediate: 1,
    default: 1,
    delay: 1,
    onProps: 1,
    onStart: 1,
    onChange: 1,
    onPause: 1,
    onResume: 1,
    onRest: 1,
    onResolve: 1,
    items: 1,
    trail: 1,
    sort: 1,
    expires: 1,
    initial: 1,
    enter: 1,
    update: 1,
    leave: 1,
    children: 1,
    onDestroyed: 1,
    keys: 1,
    callId: 1,
    parentId: 1
  };
  function getForwardProps(props) {
    const forward = {};
    let count2 = 0;
    eachProp(props, (value, prop) => {
      if (!RESERVED_PROPS[prop]) {
        forward[prop] = value;
        count2++;
      }
    });
    if (count2) {
      return forward;
    }
  }
  function inferTo(props) {
    const to22 = getForwardProps(props);
    if (to22) {
      const out = { to: to22 };
      eachProp(props, (val2, key) => key in to22 || (out[key] = val2));
      return out;
    }
    return { ...props };
  }
  function computeGoal(value) {
    value = getFluidValue(value);
    return is.arr(value) ? value.map(computeGoal) : isAnimatedString(value) ? globals_exports.createStringInterpolator({
      range: [0, 1],
      output: [value, value]
    })(1) : value;
  }
  function hasProps(props) {
    for (const _2 in props)
      return true;
    return false;
  }
  function isAsyncTo(to22) {
    return is.fun(to22) || is.arr(to22) && is.obj(to22[0]);
  }
  function detachRefs(ctrl, ref) {
    ctrl.ref?.delete(ctrl);
    ref?.delete(ctrl);
  }
  function replaceRef(ctrl, ref) {
    if (ref && ctrl.ref !== ref) {
      ctrl.ref?.delete(ctrl);
      ref.add(ctrl);
      ctrl.ref = ref;
    }
  }
  var config = {
    default: { tension: 170, friction: 26 },
    gentle: { tension: 120, friction: 14 },
    wobbly: { tension: 180, friction: 12 },
    stiff: { tension: 210, friction: 20 },
    slow: { tension: 280, friction: 60 },
    molasses: { tension: 280, friction: 120 }
  };
  var defaults3 = {
    ...config.default,
    mass: 1,
    damping: 1,
    easing: easings.linear,
    clamp: false
  };
  var AnimationConfig = class {
    constructor() {
      this.velocity = 0;
      Object.assign(this, defaults3);
    }
  };
  function mergeConfig(config2, newConfig, defaultConfig) {
    if (defaultConfig) {
      defaultConfig = { ...defaultConfig };
      sanitizeConfig(defaultConfig, newConfig);
      newConfig = { ...defaultConfig, ...newConfig };
    }
    sanitizeConfig(config2, newConfig);
    Object.assign(config2, newConfig);
    for (const key in defaults3) {
      if (config2[key] == null) {
        config2[key] = defaults3[key];
      }
    }
    let { frequency, damping } = config2;
    const { mass } = config2;
    if (!is.und(frequency)) {
      if (frequency < 0.01)
        frequency = 0.01;
      if (damping < 0)
        damping = 0;
      config2.tension = Math.pow(2 * Math.PI / frequency, 2) * mass;
      config2.friction = 4 * Math.PI * damping * mass / frequency;
    }
    return config2;
  }
  function sanitizeConfig(config2, props) {
    if (!is.und(props.decay)) {
      config2.duration = void 0;
    } else {
      const isTensionConfig = !is.und(props.tension) || !is.und(props.friction);
      if (isTensionConfig || !is.und(props.frequency) || !is.und(props.damping) || !is.und(props.mass)) {
        config2.duration = void 0;
        config2.decay = void 0;
      }
      if (isTensionConfig) {
        config2.frequency = void 0;
      }
    }
  }
  var emptyArray = [];
  var Animation2 = class {
    constructor() {
      this.changed = false;
      this.values = emptyArray;
      this.toValues = null;
      this.fromValues = emptyArray;
      this.config = new AnimationConfig();
      this.immediate = false;
    }
  };
  function scheduleProps(callId, { key, props, defaultProps, state, actions }) {
    return new Promise((resolve2, reject) => {
      let delay;
      let timeout;
      let cancel = matchProp(props.cancel ?? defaultProps?.cancel, key);
      if (cancel) {
        onStart();
      } else {
        if (!is.und(props.pause)) {
          state.paused = matchProp(props.pause, key);
        }
        let pause = defaultProps?.pause;
        if (pause !== true) {
          pause = state.paused || matchProp(pause, key);
        }
        delay = callProp(props.delay || 0, key);
        if (pause) {
          state.resumeQueue.add(onResume);
          actions.pause();
        } else {
          actions.resume();
          onResume();
        }
      }
      function onPause() {
        state.resumeQueue.add(onResume);
        state.timeouts.delete(timeout);
        timeout.cancel();
        delay = timeout.time - raf.now();
      }
      function onResume() {
        if (delay > 0 && !globals_exports.skipAnimation) {
          state.delayed = true;
          timeout = raf.setTimeout(onStart, delay);
          state.pauseQueue.add(onPause);
          state.timeouts.add(timeout);
        } else {
          onStart();
        }
      }
      function onStart() {
        if (state.delayed) {
          state.delayed = false;
        }
        state.pauseQueue.delete(onPause);
        state.timeouts.delete(timeout);
        if (callId <= (state.cancelId || 0)) {
          cancel = true;
        }
        try {
          actions.start({ ...props, callId, cancel }, resolve2);
        } catch (err) {
          reject(err);
        }
      }
    });
  }
  var getCombinedResult = (target, results) => results.length == 1 ? results[0] : results.some((result) => result.cancelled) ? getCancelledResult(target.get()) : results.every((result) => result.noop) ? getNoopResult(target.get()) : getFinishedResult(
    target.get(),
    results.every((result) => result.finished)
  );
  var getNoopResult = (value) => ({
    value,
    noop: true,
    finished: true,
    cancelled: false
  });
  var getFinishedResult = (value, finished, cancelled = false) => ({
    value,
    finished,
    cancelled
  });
  var getCancelledResult = (value) => ({
    value,
    cancelled: true,
    finished: false
  });
  function runAsync(to22, props, state, target) {
    const { callId, parentId, onRest } = props;
    const { asyncTo: prevTo, promise: prevPromise } = state;
    if (!parentId && to22 === prevTo && !props.reset) {
      return prevPromise;
    }
    return state.promise = (async () => {
      state.asyncId = callId;
      state.asyncTo = to22;
      const defaultProps = getDefaultProps(
        props,
        (value, key) => key === "onRest" ? void 0 : value
      );
      let preventBail;
      let bail;
      const bailPromise = new Promise(
        (resolve2, reject) => (preventBail = resolve2, bail = reject)
      );
      const bailIfEnded = (bailSignal) => {
        const bailResult = callId <= (state.cancelId || 0) && getCancelledResult(target) || callId !== state.asyncId && getFinishedResult(target, false);
        if (bailResult) {
          bailSignal.result = bailResult;
          bail(bailSignal);
          throw bailSignal;
        }
      };
      const animate = (arg1, arg2) => {
        const bailSignal = new BailSignal();
        const skipAnimationSignal = new SkipAnimationSignal();
        return (async () => {
          if (globals_exports.skipAnimation) {
            stopAsync(state);
            skipAnimationSignal.result = getFinishedResult(target, false);
            bail(skipAnimationSignal);
            throw skipAnimationSignal;
          }
          bailIfEnded(bailSignal);
          const props2 = is.obj(arg1) ? { ...arg1 } : { ...arg2, to: arg1 };
          props2.parentId = callId;
          eachProp(defaultProps, (value, key) => {
            if (is.und(props2[key])) {
              props2[key] = value;
            }
          });
          const result2 = await target.start(props2);
          bailIfEnded(bailSignal);
          if (state.paused) {
            await new Promise((resume) => {
              state.resumeQueue.add(resume);
            });
          }
          return result2;
        })();
      };
      let result;
      if (globals_exports.skipAnimation) {
        stopAsync(state);
        return getFinishedResult(target, false);
      }
      try {
        let animating;
        if (is.arr(to22)) {
          animating = (async (queue) => {
            for (const props2 of queue) {
              await animate(props2);
            }
          })(to22);
        } else {
          animating = Promise.resolve(to22(animate, target.stop.bind(target)));
        }
        await Promise.all([animating.then(preventBail), bailPromise]);
        result = getFinishedResult(target.get(), true, false);
      } catch (err) {
        if (err instanceof BailSignal) {
          result = err.result;
        } else if (err instanceof SkipAnimationSignal) {
          result = err.result;
        } else {
          throw err;
        }
      } finally {
        if (callId == state.asyncId) {
          state.asyncId = parentId;
          state.asyncTo = parentId ? prevTo : void 0;
          state.promise = parentId ? prevPromise : void 0;
        }
      }
      if (is.fun(onRest)) {
        raf.batchedUpdates(() => {
          onRest(result, target, target.item);
        });
      }
      return result;
    })();
  }
  function stopAsync(state, cancelId) {
    flush(state.timeouts, (t5) => t5.cancel());
    state.pauseQueue.clear();
    state.resumeQueue.clear();
    state.asyncId = state.asyncTo = state.promise = void 0;
    if (cancelId)
      state.cancelId = cancelId;
  }
  var BailSignal = class extends Error {
    constructor() {
      super(
        "An async animation has been interrupted. You see this error because you forgot to use `await` or `.catch(...)` on its returned promise."
      );
    }
  };
  var SkipAnimationSignal = class extends Error {
    constructor() {
      super("SkipAnimationSignal");
    }
  };
  var isFrameValue = (value) => value instanceof FrameValue;
  var nextId = 1;
  var FrameValue = class extends FluidValue {
    constructor() {
      super(...arguments);
      this.id = nextId++;
      this._priority = 0;
    }
    get priority() {
      return this._priority;
    }
    set priority(priority2) {
      if (this._priority != priority2) {
        this._priority = priority2;
        this._onPriorityChange(priority2);
      }
    }
    get() {
      const node = getAnimated(this);
      return node && node.getValue();
    }
    to(...args) {
      return globals_exports.to(this, args);
    }
    interpolate(...args) {
      deprecateInterpolate();
      return globals_exports.to(this, args);
    }
    toJSON() {
      return this.get();
    }
    observerAdded(count2) {
      if (count2 == 1)
        this._attach();
    }
    observerRemoved(count2) {
      if (count2 == 0)
        this._detach();
    }
    _attach() {
    }
    _detach() {
    }
    _onChange(value, idle = false) {
      callFluidObservers(this, {
        type: "change",
        parent: this,
        value,
        idle
      });
    }
    _onPriorityChange(priority2) {
      if (!this.idle) {
        frameLoop.sort(this);
      }
      callFluidObservers(this, {
        type: "priority",
        parent: this,
        priority: priority2
      });
    }
  };
  var $P = Symbol.for("SpringPhase");
  var HAS_ANIMATED = 1;
  var IS_ANIMATING = 2;
  var IS_PAUSED = 4;
  var hasAnimated = (target) => (target[$P] & HAS_ANIMATED) > 0;
  var isAnimating = (target) => (target[$P] & IS_ANIMATING) > 0;
  var isPaused = (target) => (target[$P] & IS_PAUSED) > 0;
  var setActiveBit = (target, active) => active ? target[$P] |= IS_ANIMATING | HAS_ANIMATED : target[$P] &= ~IS_ANIMATING;
  var setPausedBit = (target, paused) => paused ? target[$P] |= IS_PAUSED : target[$P] &= ~IS_PAUSED;
  var SpringValue = class extends FrameValue {
    constructor(arg1, arg2) {
      super();
      this.animation = new Animation2();
      this.defaultProps = {};
      this._state = {
        paused: false,
        delayed: false,
        pauseQueue: /* @__PURE__ */ new Set(),
        resumeQueue: /* @__PURE__ */ new Set(),
        timeouts: /* @__PURE__ */ new Set()
      };
      this._pendingCalls = /* @__PURE__ */ new Set();
      this._lastCallId = 0;
      this._lastToId = 0;
      this._memoizedDuration = 0;
      if (!is.und(arg1) || !is.und(arg2)) {
        const props = is.obj(arg1) ? { ...arg1 } : { ...arg2, from: arg1 };
        if (is.und(props.default)) {
          props.default = true;
        }
        this.start(props);
      }
    }
    get idle() {
      return !(isAnimating(this) || this._state.asyncTo) || isPaused(this);
    }
    get goal() {
      return getFluidValue(this.animation.to);
    }
    get velocity() {
      const node = getAnimated(this);
      return node instanceof AnimatedValue ? node.lastVelocity || 0 : node.getPayload().map((node2) => node2.lastVelocity || 0);
    }
    get hasAnimated() {
      return hasAnimated(this);
    }
    get isAnimating() {
      return isAnimating(this);
    }
    get isPaused() {
      return isPaused(this);
    }
    get isDelayed() {
      return this._state.delayed;
    }
    advance(dt2) {
      let idle = true;
      let changed = false;
      const anim = this.animation;
      let { toValues } = anim;
      const { config: config2 } = anim;
      const payload = getPayload(anim.to);
      if (!payload && hasFluidValue(anim.to)) {
        toValues = toArray(getFluidValue(anim.to));
      }
      anim.values.forEach((node2, i6) => {
        if (node2.done)
          return;
        const to22 = node2.constructor == AnimatedString ? 1 : payload ? payload[i6].lastPosition : toValues[i6];
        let finished = anim.immediate;
        let position = to22;
        if (!finished) {
          position = node2.lastPosition;
          if (config2.tension <= 0) {
            node2.done = true;
            return;
          }
          let elapsed = node2.elapsedTime += dt2;
          const from2 = anim.fromValues[i6];
          const v0 = node2.v0 != null ? node2.v0 : node2.v0 = is.arr(config2.velocity) ? config2.velocity[i6] : config2.velocity;
          let velocity;
          const precision = config2.precision || (from2 == to22 ? 5e-3 : Math.min(1, Math.abs(to22 - from2) * 1e-3));
          if (!is.und(config2.duration)) {
            let p2 = 1;
            if (config2.duration > 0) {
              if (this._memoizedDuration !== config2.duration) {
                this._memoizedDuration = config2.duration;
                if (node2.durationProgress > 0) {
                  node2.elapsedTime = config2.duration * node2.durationProgress;
                  elapsed = node2.elapsedTime += dt2;
                }
              }
              p2 = (config2.progress || 0) + elapsed / this._memoizedDuration;
              p2 = p2 > 1 ? 1 : p2 < 0 ? 0 : p2;
              node2.durationProgress = p2;
            }
            position = from2 + config2.easing(p2) * (to22 - from2);
            velocity = (position - node2.lastPosition) / dt2;
            finished = p2 == 1;
          } else if (config2.decay) {
            const decay = config2.decay === true ? 0.998 : config2.decay;
            const e7 = Math.exp(-(1 - decay) * elapsed);
            position = from2 + v0 / (1 - decay) * (1 - e7);
            finished = Math.abs(node2.lastPosition - position) <= precision;
            velocity = v0 * e7;
          } else {
            velocity = node2.lastVelocity == null ? v0 : node2.lastVelocity;
            const restVelocity = config2.restVelocity || precision / 10;
            const bounceFactor = config2.clamp ? 0 : config2.bounce;
            const canBounce = !is.und(bounceFactor);
            const isGrowing = from2 == to22 ? node2.v0 > 0 : from2 < to22;
            let isMoving;
            let isBouncing = false;
            const step = 1;
            const numSteps = Math.ceil(dt2 / step);
            for (let n6 = 0; n6 < numSteps; ++n6) {
              isMoving = Math.abs(velocity) > restVelocity;
              if (!isMoving) {
                finished = Math.abs(to22 - position) <= precision;
                if (finished) {
                  break;
                }
              }
              if (canBounce) {
                isBouncing = position == to22 || position > to22 == isGrowing;
                if (isBouncing) {
                  velocity = -velocity * bounceFactor;
                  position = to22;
                }
              }
              const springForce = -config2.tension * 1e-6 * (position - to22);
              const dampingForce = -config2.friction * 1e-3 * velocity;
              const acceleration = (springForce + dampingForce) / config2.mass;
              velocity = velocity + acceleration * step;
              position = position + velocity * step;
            }
          }
          node2.lastVelocity = velocity;
          if (Number.isNaN(position)) {
            console.warn(`Got NaN while animating:`, this);
            finished = true;
          }
        }
        if (payload && !payload[i6].done) {
          finished = false;
        }
        if (finished) {
          node2.done = true;
        } else {
          idle = false;
        }
        if (node2.setValue(position, config2.round)) {
          changed = true;
        }
      });
      const node = getAnimated(this);
      const currVal = node.getValue();
      if (idle) {
        const finalVal = getFluidValue(anim.to);
        if ((currVal !== finalVal || changed) && !config2.decay) {
          node.setValue(finalVal);
          this._onChange(finalVal);
        } else if (changed && config2.decay) {
          this._onChange(currVal);
        }
        this._stop();
      } else if (changed) {
        this._onChange(currVal);
      }
    }
    set(value) {
      raf.batchedUpdates(() => {
        this._stop();
        this._focus(value);
        this._set(value);
      });
      return this;
    }
    pause() {
      this._update({ pause: true });
    }
    resume() {
      this._update({ pause: false });
    }
    finish() {
      if (isAnimating(this)) {
        const { to: to22, config: config2 } = this.animation;
        raf.batchedUpdates(() => {
          this._onStart();
          if (!config2.decay) {
            this._set(to22, false);
          }
          this._stop();
        });
      }
      return this;
    }
    update(props) {
      const queue = this.queue || (this.queue = []);
      queue.push(props);
      return this;
    }
    start(to22, arg2) {
      let queue;
      if (!is.und(to22)) {
        queue = [is.obj(to22) ? to22 : { ...arg2, to: to22 }];
      } else {
        queue = this.queue || [];
        this.queue = [];
      }
      return Promise.all(
        queue.map((props) => {
          const up = this._update(props);
          return up;
        })
      ).then((results) => getCombinedResult(this, results));
    }
    stop(cancel) {
      const { to: to22 } = this.animation;
      this._focus(this.get());
      stopAsync(this._state, cancel && this._lastCallId);
      raf.batchedUpdates(() => this._stop(to22, cancel));
      return this;
    }
    reset() {
      this._update({ reset: true });
    }
    eventObserved(event) {
      if (event.type == "change") {
        this._start();
      } else if (event.type == "priority") {
        this.priority = event.priority + 1;
      }
    }
    _prepareNode(props) {
      const key = this.key || "";
      let { to: to22, from: from2 } = props;
      to22 = is.obj(to22) ? to22[key] : to22;
      if (to22 == null || isAsyncTo(to22)) {
        to22 = void 0;
      }
      from2 = is.obj(from2) ? from2[key] : from2;
      if (from2 == null) {
        from2 = void 0;
      }
      const range = { to: to22, from: from2 };
      if (!hasAnimated(this)) {
        if (props.reverse)
          [to22, from2] = [from2, to22];
        from2 = getFluidValue(from2);
        if (!is.und(from2)) {
          this._set(from2);
        } else if (!getAnimated(this)) {
          this._set(to22);
        }
      }
      return range;
    }
    _update({ ...props }, isLoop) {
      const { key, defaultProps } = this;
      if (props.default)
        Object.assign(
          defaultProps,
          getDefaultProps(
            props,
            (value, prop) => /^on/.test(prop) ? resolveProp(value, key) : value
          )
        );
      mergeActiveFn(this, props, "onProps");
      sendEvent(this, "onProps", props, this);
      const range = this._prepareNode(props);
      if (Object.isFrozen(this)) {
        throw Error(
          "Cannot animate a `SpringValue` object that is frozen. Did you forget to pass your component to `animated(...)` before animating its props?"
        );
      }
      const state = this._state;
      return scheduleProps(++this._lastCallId, {
        key,
        props,
        defaultProps,
        state,
        actions: {
          pause: () => {
            if (!isPaused(this)) {
              setPausedBit(this, true);
              flushCalls(state.pauseQueue);
              sendEvent(
                this,
                "onPause",
                getFinishedResult(this, checkFinished(this, this.animation.to)),
                this
              );
            }
          },
          resume: () => {
            if (isPaused(this)) {
              setPausedBit(this, false);
              if (isAnimating(this)) {
                this._resume();
              }
              flushCalls(state.resumeQueue);
              sendEvent(
                this,
                "onResume",
                getFinishedResult(this, checkFinished(this, this.animation.to)),
                this
              );
            }
          },
          start: this._merge.bind(this, range)
        }
      }).then((result) => {
        if (props.loop && result.finished && !(isLoop && result.noop)) {
          const nextProps = createLoopUpdate(props);
          if (nextProps) {
            return this._update(nextProps, true);
          }
        }
        return result;
      });
    }
    _merge(range, props, resolve2) {
      if (props.cancel) {
        this.stop(true);
        return resolve2(getCancelledResult(this));
      }
      const hasToProp = !is.und(range.to);
      const hasFromProp = !is.und(range.from);
      if (hasToProp || hasFromProp) {
        if (props.callId > this._lastToId) {
          this._lastToId = props.callId;
        } else {
          return resolve2(getCancelledResult(this));
        }
      }
      const { key, defaultProps, animation: anim } = this;
      const { to: prevTo, from: prevFrom } = anim;
      let { to: to22 = prevTo, from: from2 = prevFrom } = range;
      if (hasFromProp && !hasToProp && (!props.default || is.und(to22))) {
        to22 = from2;
      }
      if (props.reverse)
        [to22, from2] = [from2, to22];
      const hasFromChanged = !isEqual(from2, prevFrom);
      if (hasFromChanged) {
        anim.from = from2;
      }
      from2 = getFluidValue(from2);
      const hasToChanged = !isEqual(to22, prevTo);
      if (hasToChanged) {
        this._focus(to22);
      }
      const hasAsyncTo = isAsyncTo(props.to);
      const { config: config2 } = anim;
      const { decay, velocity } = config2;
      if (hasToProp || hasFromProp) {
        config2.velocity = 0;
      }
      if (props.config && !hasAsyncTo) {
        mergeConfig(
          config2,
          callProp(props.config, key),
          props.config !== defaultProps.config ? callProp(defaultProps.config, key) : void 0
        );
      }
      let node = getAnimated(this);
      if (!node || is.und(to22)) {
        return resolve2(getFinishedResult(this, true));
      }
      const reset = is.und(props.reset) ? hasFromProp && !props.default : !is.und(from2) && matchProp(props.reset, key);
      const value = reset ? from2 : this.get();
      const goal = computeGoal(to22);
      const isAnimatable = is.num(goal) || is.arr(goal) || isAnimatedString(goal);
      const immediate = !hasAsyncTo && (!isAnimatable || matchProp(defaultProps.immediate || props.immediate, key));
      if (hasToChanged) {
        const nodeType = getAnimatedType(to22);
        if (nodeType !== node.constructor) {
          if (immediate) {
            node = this._set(goal);
          } else
            throw Error(
              `Cannot animate between ${node.constructor.name} and ${nodeType.name}, as the "to" prop suggests`
            );
        }
      }
      const goalType = node.constructor;
      let started = hasFluidValue(to22);
      let finished = false;
      if (!started) {
        const hasValueChanged = reset || !hasAnimated(this) && hasFromChanged;
        if (hasToChanged || hasValueChanged) {
          finished = isEqual(computeGoal(value), goal);
          started = !finished;
        }
        if (!isEqual(anim.immediate, immediate) && !immediate || !isEqual(config2.decay, decay) || !isEqual(config2.velocity, velocity)) {
          started = true;
        }
      }
      if (finished && isAnimating(this)) {
        if (anim.changed && !reset) {
          started = true;
        } else if (!started) {
          this._stop(prevTo);
        }
      }
      if (!hasAsyncTo) {
        if (started || hasFluidValue(prevTo)) {
          anim.values = node.getPayload();
          anim.toValues = hasFluidValue(to22) ? null : goalType == AnimatedString ? [1] : toArray(goal);
        }
        if (anim.immediate != immediate) {
          anim.immediate = immediate;
          if (!immediate && !reset) {
            this._set(prevTo);
          }
        }
        if (started) {
          const { onRest } = anim;
          each2(ACTIVE_EVENTS, (type) => mergeActiveFn(this, props, type));
          const result = getFinishedResult(this, checkFinished(this, prevTo));
          flushCalls(this._pendingCalls, result);
          this._pendingCalls.add(resolve2);
          if (anim.changed)
            raf.batchedUpdates(() => {
              anim.changed = !reset;
              onRest?.(result, this);
              if (reset) {
                callProp(defaultProps.onRest, result);
              } else {
                anim.onStart?.(result, this);
              }
            });
        }
      }
      if (reset) {
        this._set(value);
      }
      if (hasAsyncTo) {
        resolve2(runAsync(props.to, props, this._state, this));
      } else if (started) {
        this._start();
      } else if (isAnimating(this) && !hasToChanged) {
        this._pendingCalls.add(resolve2);
      } else {
        resolve2(getNoopResult(value));
      }
    }
    _focus(value) {
      const anim = this.animation;
      if (value !== anim.to) {
        if (getFluidObservers(this)) {
          this._detach();
        }
        anim.to = value;
        if (getFluidObservers(this)) {
          this._attach();
        }
      }
    }
    _attach() {
      let priority2 = 0;
      const { to: to22 } = this.animation;
      if (hasFluidValue(to22)) {
        addFluidObserver(to22, this);
        if (isFrameValue(to22)) {
          priority2 = to22.priority + 1;
        }
      }
      this.priority = priority2;
    }
    _detach() {
      const { to: to22 } = this.animation;
      if (hasFluidValue(to22)) {
        removeFluidObserver(to22, this);
      }
    }
    _set(arg, idle = true) {
      const value = getFluidValue(arg);
      if (!is.und(value)) {
        const oldNode = getAnimated(this);
        if (!oldNode || !isEqual(value, oldNode.getValue())) {
          const nodeType = getAnimatedType(value);
          if (!oldNode || oldNode.constructor != nodeType) {
            setAnimated(this, nodeType.create(value));
          } else {
            oldNode.setValue(value);
          }
          if (oldNode) {
            raf.batchedUpdates(() => {
              this._onChange(value, idle);
            });
          }
        }
      }
      return getAnimated(this);
    }
    _onStart() {
      const anim = this.animation;
      if (!anim.changed) {
        anim.changed = true;
        sendEvent(
          this,
          "onStart",
          getFinishedResult(this, checkFinished(this, anim.to)),
          this
        );
      }
    }
    _onChange(value, idle) {
      if (!idle) {
        this._onStart();
        callProp(this.animation.onChange, value, this);
      }
      callProp(this.defaultProps.onChange, value, this);
      super._onChange(value, idle);
    }
    _start() {
      const anim = this.animation;
      getAnimated(this).reset(getFluidValue(anim.to));
      if (!anim.immediate) {
        anim.fromValues = anim.values.map((node) => node.lastPosition);
      }
      if (!isAnimating(this)) {
        setActiveBit(this, true);
        if (!isPaused(this)) {
          this._resume();
        }
      }
    }
    _resume() {
      if (globals_exports.skipAnimation) {
        this.finish();
      } else {
        frameLoop.start(this);
      }
    }
    _stop(goal, cancel) {
      if (isAnimating(this)) {
        setActiveBit(this, false);
        const anim = this.animation;
        each2(anim.values, (node) => {
          node.done = true;
        });
        if (anim.toValues) {
          anim.onChange = anim.onPause = anim.onResume = void 0;
        }
        callFluidObservers(this, {
          type: "idle",
          parent: this
        });
        const result = cancel ? getCancelledResult(this.get()) : getFinishedResult(this.get(), checkFinished(this, goal ?? anim.to));
        flushCalls(this._pendingCalls, result);
        if (anim.changed) {
          anim.changed = false;
          sendEvent(this, "onRest", result, this);
        }
      }
    }
  };
  function checkFinished(target, to22) {
    const goal = computeGoal(to22);
    const value = computeGoal(target.get());
    return isEqual(value, goal);
  }
  function createLoopUpdate(props, loop2 = props.loop, to22 = props.to) {
    const loopRet = callProp(loop2);
    if (loopRet) {
      const overrides2 = loopRet !== true && inferTo(loopRet);
      const reverse = (overrides2 || props).reverse;
      const reset = !overrides2 || overrides2.reset;
      return createUpdate({
        ...props,
        loop: loop2,
        default: false,
        pause: void 0,
        to: !reverse || isAsyncTo(to22) ? to22 : void 0,
        from: reset ? props.from : void 0,
        reset,
        ...overrides2
      });
    }
  }
  function createUpdate(props) {
    const { to: to22, from: from2 } = props = inferTo(props);
    const keys = /* @__PURE__ */ new Set();
    if (is.obj(to22))
      findDefined(to22, keys);
    if (is.obj(from2))
      findDefined(from2, keys);
    props.keys = keys.size ? Array.from(keys) : null;
    return props;
  }
  function declareUpdate(props) {
    const update22 = createUpdate(props);
    if (is.und(update22.default)) {
      update22.default = getDefaultProps(update22);
    }
    return update22;
  }
  function findDefined(values, keys) {
    eachProp(values, (value, key) => value != null && keys.add(key));
  }
  var ACTIVE_EVENTS = [
    "onStart",
    "onRest",
    "onChange",
    "onPause",
    "onResume"
  ];
  function mergeActiveFn(target, props, type) {
    target.animation[type] = props[type] !== getDefaultProp(props, type) ? resolveProp(props[type], target.key) : void 0;
  }
  function sendEvent(target, type, ...args) {
    target.animation[type]?.(...args);
    target.defaultProps[type]?.(...args);
  }
  var BATCHED_EVENTS = ["onStart", "onChange", "onRest"];
  var nextId2 = 1;
  var Controller = class {
    constructor(props, flush3) {
      this.id = nextId2++;
      this.springs = {};
      this.queue = [];
      this._lastAsyncId = 0;
      this._active = /* @__PURE__ */ new Set();
      this._changed = /* @__PURE__ */ new Set();
      this._started = false;
      this._state = {
        paused: false,
        pauseQueue: /* @__PURE__ */ new Set(),
        resumeQueue: /* @__PURE__ */ new Set(),
        timeouts: /* @__PURE__ */ new Set()
      };
      this._events = {
        onStart: /* @__PURE__ */ new Map(),
        onChange: /* @__PURE__ */ new Map(),
        onRest: /* @__PURE__ */ new Map()
      };
      this._onFrame = this._onFrame.bind(this);
      if (flush3) {
        this._flush = flush3;
      }
      if (props) {
        this.start({ default: true, ...props });
      }
    }
    get idle() {
      return !this._state.asyncTo && Object.values(this.springs).every((spring) => {
        return spring.idle && !spring.isDelayed && !spring.isPaused;
      });
    }
    get item() {
      return this._item;
    }
    set item(item) {
      this._item = item;
    }
    get() {
      const values = {};
      this.each((spring, key) => values[key] = spring.get());
      return values;
    }
    set(values) {
      for (const key in values) {
        const value = values[key];
        if (!is.und(value)) {
          this.springs[key].set(value);
        }
      }
    }
    update(props) {
      if (props) {
        this.queue.push(createUpdate(props));
      }
      return this;
    }
    start(props) {
      let { queue } = this;
      if (props) {
        queue = toArray(props).map(createUpdate);
      } else {
        this.queue = [];
      }
      if (this._flush) {
        return this._flush(this, queue);
      }
      prepareKeys(this, queue);
      return flushUpdateQueue(this, queue);
    }
    stop(arg, keys) {
      if (arg !== !!arg) {
        keys = arg;
      }
      if (keys) {
        const springs = this.springs;
        each2(toArray(keys), (key) => springs[key].stop(!!arg));
      } else {
        stopAsync(this._state, this._lastAsyncId);
        this.each((spring) => spring.stop(!!arg));
      }
      return this;
    }
    pause(keys) {
      if (is.und(keys)) {
        this.start({ pause: true });
      } else {
        const springs = this.springs;
        each2(toArray(keys), (key) => springs[key].pause());
      }
      return this;
    }
    resume(keys) {
      if (is.und(keys)) {
        this.start({ pause: false });
      } else {
        const springs = this.springs;
        each2(toArray(keys), (key) => springs[key].resume());
      }
      return this;
    }
    each(iterator) {
      eachProp(this.springs, iterator);
    }
    _onFrame() {
      const { onStart, onChange, onRest } = this._events;
      const active = this._active.size > 0;
      const changed = this._changed.size > 0;
      if (active && !this._started || changed && !this._started) {
        this._started = true;
        flush(onStart, ([onStart2, result]) => {
          result.value = this.get();
          onStart2(result, this, this._item);
        });
      }
      const idle = !active && this._started;
      const values = changed || idle && onRest.size ? this.get() : null;
      if (changed && onChange.size) {
        flush(onChange, ([onChange2, result]) => {
          result.value = values;
          onChange2(result, this, this._item);
        });
      }
      if (idle) {
        this._started = false;
        flush(onRest, ([onRest2, result]) => {
          result.value = values;
          onRest2(result, this, this._item);
        });
      }
    }
    eventObserved(event) {
      if (event.type == "change") {
        this._changed.add(event.parent);
        if (!event.idle) {
          this._active.add(event.parent);
        }
      } else if (event.type == "idle") {
        this._active.delete(event.parent);
      } else
        return;
      raf.onFrame(this._onFrame);
    }
  };
  function flushUpdateQueue(ctrl, queue) {
    return Promise.all(queue.map((props) => flushUpdate(ctrl, props))).then(
      (results) => getCombinedResult(ctrl, results)
    );
  }
  async function flushUpdate(ctrl, props, isLoop) {
    const { keys, to: to22, from: from2, loop: loop2, onRest, onResolve } = props;
    const defaults22 = is.obj(props.default) && props.default;
    if (loop2) {
      props.loop = false;
    }
    if (to22 === false)
      props.to = null;
    if (from2 === false)
      props.from = null;
    const asyncTo = is.arr(to22) || is.fun(to22) ? to22 : void 0;
    if (asyncTo) {
      props.to = void 0;
      props.onRest = void 0;
      if (defaults22) {
        defaults22.onRest = void 0;
      }
    } else {
      each2(BATCHED_EVENTS, (key) => {
        const handler = props[key];
        if (is.fun(handler)) {
          const queue = ctrl["_events"][key];
          props[key] = ({ finished, cancelled }) => {
            const result2 = queue.get(handler);
            if (result2) {
              if (!finished)
                result2.finished = false;
              if (cancelled)
                result2.cancelled = true;
            } else {
              queue.set(handler, {
                value: null,
                finished: finished || false,
                cancelled: cancelled || false
              });
            }
          };
          if (defaults22) {
            defaults22[key] = props[key];
          }
        }
      });
    }
    const state = ctrl["_state"];
    if (props.pause === !state.paused) {
      state.paused = props.pause;
      flushCalls(props.pause ? state.pauseQueue : state.resumeQueue);
    } else if (state.paused) {
      props.pause = true;
    }
    const promises = (keys || Object.keys(ctrl.springs)).map(
      (key) => ctrl.springs[key].start(props)
    );
    const cancel = props.cancel === true || getDefaultProp(props, "cancel") === true;
    if (asyncTo || cancel && state.asyncId) {
      promises.push(
        scheduleProps(++ctrl["_lastAsyncId"], {
          props,
          state,
          actions: {
            pause: noop2,
            resume: noop2,
            start(props2, resolve2) {
              if (cancel) {
                stopAsync(state, ctrl["_lastAsyncId"]);
                resolve2(getCancelledResult(ctrl));
              } else {
                props2.onRest = onRest;
                resolve2(
                  runAsync(
                    asyncTo,
                    props2,
                    state,
                    ctrl
                  )
                );
              }
            }
          }
        })
      );
    }
    if (state.paused) {
      await new Promise((resume) => {
        state.resumeQueue.add(resume);
      });
    }
    const result = getCombinedResult(ctrl, await Promise.all(promises));
    if (loop2 && result.finished && !(isLoop && result.noop)) {
      const nextProps = createLoopUpdate(props, loop2, to22);
      if (nextProps) {
        prepareKeys(ctrl, [nextProps]);
        return flushUpdate(ctrl, nextProps, true);
      }
    }
    if (onResolve) {
      raf.batchedUpdates(() => onResolve(result, ctrl, ctrl.item));
    }
    return result;
  }
  function getSprings(ctrl, props) {
    const springs = { ...ctrl.springs };
    if (props) {
      each2(toArray(props), (props2) => {
        if (is.und(props2.keys)) {
          props2 = createUpdate(props2);
        }
        if (!is.obj(props2.to)) {
          props2 = { ...props2, to: void 0 };
        }
        prepareSprings(springs, props2, (key) => {
          return createSpring(key);
        });
      });
    }
    setSprings(ctrl, springs);
    return springs;
  }
  function setSprings(ctrl, springs) {
    eachProp(springs, (spring, key) => {
      if (!ctrl.springs[key]) {
        ctrl.springs[key] = spring;
        addFluidObserver(spring, ctrl);
      }
    });
  }
  function createSpring(key, observer) {
    const spring = new SpringValue();
    spring.key = key;
    if (observer) {
      addFluidObserver(spring, observer);
    }
    return spring;
  }
  function prepareSprings(springs, props, create) {
    if (props.keys) {
      each2(props.keys, (key) => {
        const spring = springs[key] || (springs[key] = create(key));
        spring["_prepareNode"](props);
      });
    }
  }
  function prepareKeys(ctrl, queue) {
    each2(queue, (props) => {
      prepareSprings(ctrl.springs, props, (key) => {
        return createSpring(key, ctrl);
      });
    });
  }
  var SpringContext = ({
    children,
    ...props
  }) => {
    const inherited = (0, import_react12.useContext)(ctx);
    const pause = props.pause || !!inherited.pause, immediate = props.immediate || !!inherited.immediate;
    props = useMemoOne(() => ({ pause, immediate }), [pause, immediate]);
    const { Provider } = ctx;
    return /* @__PURE__ */ React4.createElement(Provider, { value: props }, children);
  };
  var ctx = makeContext(SpringContext, {});
  SpringContext.Provider = ctx.Provider;
  SpringContext.Consumer = ctx.Consumer;
  function makeContext(target, init) {
    Object.assign(target, React4.createContext(init));
    target.Provider._context = target;
    target.Consumer._context = target;
    return target;
  }
  var SpringRef = () => {
    const current = [];
    const SpringRef2 = function(props) {
      deprecateDirectCall();
      const results = [];
      each2(current, (ctrl, i6) => {
        if (is.und(props)) {
          results.push(ctrl.start());
        } else {
          const update22 = _getProps(props, ctrl, i6);
          if (update22) {
            results.push(ctrl.start(update22));
          }
        }
      });
      return results;
    };
    SpringRef2.current = current;
    SpringRef2.add = function(ctrl) {
      if (!current.includes(ctrl)) {
        current.push(ctrl);
      }
    };
    SpringRef2.delete = function(ctrl) {
      const i6 = current.indexOf(ctrl);
      if (~i6)
        current.splice(i6, 1);
    };
    SpringRef2.pause = function() {
      each2(current, (ctrl) => ctrl.pause(...arguments));
      return this;
    };
    SpringRef2.resume = function() {
      each2(current, (ctrl) => ctrl.resume(...arguments));
      return this;
    };
    SpringRef2.set = function(values) {
      each2(current, (ctrl, i6) => {
        const update22 = is.fun(values) ? values(i6, ctrl) : values;
        if (update22) {
          ctrl.set(update22);
        }
      });
    };
    SpringRef2.start = function(props) {
      const results = [];
      each2(current, (ctrl, i6) => {
        if (is.und(props)) {
          results.push(ctrl.start());
        } else {
          const update22 = this._getProps(props, ctrl, i6);
          if (update22) {
            results.push(ctrl.start(update22));
          }
        }
      });
      return results;
    };
    SpringRef2.stop = function() {
      each2(current, (ctrl) => ctrl.stop(...arguments));
      return this;
    };
    SpringRef2.update = function(props) {
      each2(current, (ctrl, i6) => ctrl.update(this._getProps(props, ctrl, i6)));
      return this;
    };
    const _getProps = function(arg, ctrl, index) {
      return is.fun(arg) ? arg(index, ctrl) : arg;
    };
    SpringRef2._getProps = _getProps;
    return SpringRef2;
  };
  function useSprings(length, props, deps) {
    const propsFn = is.fun(props) && props;
    if (propsFn && !deps)
      deps = [];
    const ref = (0, import_react11.useMemo)(
      () => propsFn || arguments.length == 3 ? SpringRef() : void 0,
      []
    );
    const layoutId = (0, import_react11.useRef)(0);
    const forceUpdate = useForceUpdate();
    const state = (0, import_react11.useMemo)(
      () => ({
        ctrls: [],
        queue: [],
        flush(ctrl, updates2) {
          const springs2 = getSprings(ctrl, updates2);
          const canFlushSync = layoutId.current > 0 && !state.queue.length && !Object.keys(springs2).some((key) => !ctrl.springs[key]);
          return canFlushSync ? flushUpdateQueue(ctrl, updates2) : new Promise((resolve2) => {
            setSprings(ctrl, springs2);
            state.queue.push(() => {
              resolve2(flushUpdateQueue(ctrl, updates2));
            });
            forceUpdate();
          });
        }
      }),
      []
    );
    const ctrls = (0, import_react11.useRef)([...state.ctrls]);
    const updates = [];
    const prevLength = usePrev(length) || 0;
    (0, import_react11.useMemo)(() => {
      each2(ctrls.current.slice(length, prevLength), (ctrl) => {
        detachRefs(ctrl, ref);
        ctrl.stop(true);
      });
      ctrls.current.length = length;
      declareUpdates(prevLength, length);
    }, [length]);
    (0, import_react11.useMemo)(() => {
      declareUpdates(0, Math.min(prevLength, length));
    }, deps);
    function declareUpdates(startIndex, endIndex) {
      for (let i6 = startIndex; i6 < endIndex; i6++) {
        const ctrl = ctrls.current[i6] || (ctrls.current[i6] = new Controller(null, state.flush));
        const update22 = propsFn ? propsFn(i6, ctrl) : props[i6];
        if (update22) {
          updates[i6] = declareUpdate(update22);
        }
      }
    }
    const springs = ctrls.current.map((ctrl, i6) => getSprings(ctrl, updates[i6]));
    const context = (0, import_react11.useContext)(SpringContext);
    const prevContext = usePrev(context);
    const hasContext = context !== prevContext && hasProps(context);
    useIsomorphicLayoutEffect(() => {
      layoutId.current++;
      state.ctrls = ctrls.current;
      const { queue } = state;
      if (queue.length) {
        state.queue = [];
        each2(queue, (cb) => cb());
      }
      each2(ctrls.current, (ctrl, i6) => {
        ref?.add(ctrl);
        if (hasContext) {
          ctrl.start({ default: context });
        }
        const update22 = updates[i6];
        if (update22) {
          replaceRef(ctrl, update22.ref);
          if (ctrl.ref) {
            ctrl.queue.push(update22);
          } else {
            ctrl.start(update22);
          }
        }
      });
    });
    useOnce(() => () => {
      each2(state.ctrls, (ctrl) => ctrl.stop(true));
    });
    const values = springs.map((x3) => ({ ...x3 }));
    return ref ? [values, ref] : values;
  }
  function useSpring(props, deps) {
    const isFn = is.fun(props);
    const [[values], ref] = useSprings(
      1,
      isFn ? props : [props],
      isFn ? deps || [] : deps
    );
    return isFn || arguments.length == 2 ? [values, ref] : values;
  }
  function useTransition(data, props, deps) {
    const propsFn = is.fun(props) && props;
    const {
      reset,
      sort,
      trail = 0,
      expires = true,
      exitBeforeEnter = false,
      onDestroyed,
      ref: propsRef,
      config: propsConfig
    } = propsFn ? propsFn() : props;
    const ref = (0, import_react14.useMemo)(
      () => propsFn || arguments.length == 3 ? SpringRef() : void 0,
      []
    );
    const items = toArray(data);
    const transitions = [];
    const usedTransitions = (0, import_react14.useRef)(null);
    const prevTransitions = reset ? null : usedTransitions.current;
    useIsomorphicLayoutEffect(() => {
      usedTransitions.current = transitions;
    });
    useOnce(() => {
      each2(transitions, (t5) => {
        ref?.add(t5.ctrl);
        t5.ctrl.ref = ref;
      });
      return () => {
        each2(usedTransitions.current, (t5) => {
          if (t5.expired) {
            clearTimeout(t5.expirationId);
          }
          detachRefs(t5.ctrl, ref);
          t5.ctrl.stop(true);
        });
      };
    });
    const keys = getKeys(items, propsFn ? propsFn() : props, prevTransitions);
    const expired = reset && usedTransitions.current || [];
    useIsomorphicLayoutEffect(
      () => each2(expired, ({ ctrl, item, key }) => {
        detachRefs(ctrl, ref);
        callProp(onDestroyed, item, key);
      })
    );
    const reused = [];
    if (prevTransitions)
      each2(prevTransitions, (t5, i6) => {
        if (t5.expired) {
          clearTimeout(t5.expirationId);
          expired.push(t5);
        } else {
          i6 = reused[i6] = keys.indexOf(t5.key);
          if (~i6)
            transitions[i6] = t5;
        }
      });
    each2(items, (item, i6) => {
      if (!transitions[i6]) {
        transitions[i6] = {
          key: keys[i6],
          item,
          phase: "mount",
          ctrl: new Controller()
        };
        transitions[i6].ctrl.item = item;
      }
    });
    if (reused.length) {
      let i6 = -1;
      const { leave } = propsFn ? propsFn() : props;
      each2(reused, (keyIndex, prevIndex) => {
        const t5 = prevTransitions[prevIndex];
        if (~keyIndex) {
          i6 = transitions.indexOf(t5);
          transitions[i6] = { ...t5, item: items[keyIndex] };
        } else if (leave) {
          transitions.splice(++i6, 0, t5);
        }
      });
    }
    if (is.fun(sort)) {
      transitions.sort((a2, b3) => sort(a2.item, b3.item));
    }
    let delay = -trail;
    const forceUpdate = useForceUpdate();
    const defaultProps = getDefaultProps(props);
    const changes = /* @__PURE__ */ new Map();
    const exitingTransitions = (0, import_react14.useRef)(/* @__PURE__ */ new Map());
    const forceChange = (0, import_react14.useRef)(false);
    each2(transitions, (t5, i6) => {
      const key = t5.key;
      const prevPhase = t5.phase;
      const p2 = propsFn ? propsFn() : props;
      let to22;
      let phase;
      const propsDelay = callProp(p2.delay || 0, key);
      if (prevPhase == "mount") {
        to22 = p2.enter;
        phase = "enter";
      } else {
        const isLeave = keys.indexOf(key) < 0;
        if (prevPhase != "leave") {
          if (isLeave) {
            to22 = p2.leave;
            phase = "leave";
          } else if (to22 = p2.update) {
            phase = "update";
          } else
            return;
        } else if (!isLeave) {
          to22 = p2.enter;
          phase = "enter";
        } else
          return;
      }
      to22 = callProp(to22, t5.item, i6);
      to22 = is.obj(to22) ? inferTo(to22) : { to: to22 };
      if (!to22.config) {
        const config2 = propsConfig || defaultProps.config;
        to22.config = callProp(config2, t5.item, i6, phase);
      }
      delay += trail;
      const payload = {
        ...defaultProps,
        delay: propsDelay + delay,
        ref: propsRef,
        immediate: p2.immediate,
        reset: false,
        ...to22
      };
      if (phase == "enter" && is.und(payload.from)) {
        const p22 = propsFn ? propsFn() : props;
        const from2 = is.und(p22.initial) || prevTransitions ? p22.from : p22.initial;
        payload.from = callProp(from2, t5.item, i6);
      }
      const { onResolve } = payload;
      payload.onResolve = (result) => {
        callProp(onResolve, result);
        const transitions2 = usedTransitions.current;
        const t22 = transitions2.find((t32) => t32.key === key);
        if (!t22)
          return;
        if (result.cancelled && t22.phase != "update") {
          return;
        }
        if (t22.ctrl.idle) {
          const idle = transitions2.every((t32) => t32.ctrl.idle);
          if (t22.phase == "leave") {
            const expiry = callProp(expires, t22.item);
            if (expiry !== false) {
              const expiryMs = expiry === true ? 0 : expiry;
              t22.expired = true;
              if (!idle && expiryMs > 0) {
                if (expiryMs <= 2147483647)
                  t22.expirationId = setTimeout(forceUpdate, expiryMs);
                return;
              }
            }
          }
          if (idle && transitions2.some((t32) => t32.expired)) {
            exitingTransitions.current.delete(t22);
            if (exitBeforeEnter) {
              forceChange.current = true;
            }
            forceUpdate();
          }
        }
      };
      const springs = getSprings(t5.ctrl, payload);
      if (phase === "leave" && exitBeforeEnter) {
        exitingTransitions.current.set(t5, { phase, springs, payload });
      } else {
        changes.set(t5, { phase, springs, payload });
      }
    });
    const context = (0, import_react14.useContext)(SpringContext);
    const prevContext = usePrev(context);
    const hasContext = context !== prevContext && hasProps(context);
    useIsomorphicLayoutEffect(() => {
      if (hasContext) {
        each2(transitions, (t5) => {
          t5.ctrl.start({ default: context });
        });
      }
    }, [context]);
    each2(changes, (_2, t5) => {
      if (exitingTransitions.current.size) {
        const ind = transitions.findIndex((state) => state.key === t5.key);
        transitions.splice(ind, 1);
      }
    });
    useIsomorphicLayoutEffect(
      () => {
        each2(
          exitingTransitions.current.size ? exitingTransitions.current : changes,
          ({ phase, payload }, t5) => {
            const { ctrl } = t5;
            t5.phase = phase;
            ref?.add(ctrl);
            if (hasContext && phase == "enter") {
              ctrl.start({ default: context });
            }
            if (payload) {
              replaceRef(ctrl, payload.ref);
              if ((ctrl.ref || ref) && !forceChange.current) {
                ctrl.update(payload);
              } else {
                ctrl.start(payload);
                if (forceChange.current) {
                  forceChange.current = false;
                }
              }
            }
          }
        );
      },
      reset ? void 0 : deps
    );
    const renderTransitions = (render) => /* @__PURE__ */ React22.createElement(React22.Fragment, null, transitions.map((t5, i6) => {
      const { springs } = changes.get(t5) || t5.ctrl;
      const elem = render({ ...springs }, t5.item, t5, i6);
      return elem && elem.type ? /* @__PURE__ */ React22.createElement(
        elem.type,
        {
          ...elem.props,
          key: is.str(t5.key) || is.num(t5.key) ? t5.key : t5.ctrl.id,
          ref: elem.ref
        }
      ) : elem;
    }));
    return ref ? [renderTransitions, ref] : renderTransitions;
  }
  var nextKey = 1;
  function getKeys(items, { key, keys = key }, prevTransitions) {
    if (keys === null) {
      const reused = /* @__PURE__ */ new Set();
      return items.map((item) => {
        const t5 = prevTransitions && prevTransitions.find(
          (t22) => t22.item === item && t22.phase !== "leave" && !reused.has(t22)
        );
        if (t5) {
          reused.add(t5);
          return t5.key;
        }
        return nextKey++;
      });
    }
    return is.und(keys) ? items : is.fun(keys) ? items.map(keys) : toArray(keys);
  }
  var Interpolation = class extends FrameValue {
    constructor(source, args) {
      super();
      this.source = source;
      this.idle = true;
      this._active = /* @__PURE__ */ new Set();
      this.calc = createInterpolator(...args);
      const value = this._get();
      const nodeType = getAnimatedType(value);
      setAnimated(this, nodeType.create(value));
    }
    advance(_dt) {
      const value = this._get();
      const oldValue = this.get();
      if (!isEqual(value, oldValue)) {
        getAnimated(this).setValue(value);
        this._onChange(value, this.idle);
      }
      if (!this.idle && checkIdle(this._active)) {
        becomeIdle(this);
      }
    }
    _get() {
      const inputs = is.arr(this.source) ? this.source.map(getFluidValue) : toArray(getFluidValue(this.source));
      return this.calc(...inputs);
    }
    _start() {
      if (this.idle && !checkIdle(this._active)) {
        this.idle = false;
        each2(getPayload(this), (node) => {
          node.done = false;
        });
        if (globals_exports.skipAnimation) {
          raf.batchedUpdates(() => this.advance());
          becomeIdle(this);
        } else {
          frameLoop.start(this);
        }
      }
    }
    _attach() {
      let priority2 = 1;
      each2(toArray(this.source), (source) => {
        if (hasFluidValue(source)) {
          addFluidObserver(source, this);
        }
        if (isFrameValue(source)) {
          if (!source.idle) {
            this._active.add(source);
          }
          priority2 = Math.max(priority2, source.priority + 1);
        }
      });
      this.priority = priority2;
      this._start();
    }
    _detach() {
      each2(toArray(this.source), (source) => {
        if (hasFluidValue(source)) {
          removeFluidObserver(source, this);
        }
      });
      this._active.clear();
      becomeIdle(this);
    }
    eventObserved(event) {
      if (event.type == "change") {
        if (event.idle) {
          this.advance();
        } else {
          this._active.add(event.parent);
          this._start();
        }
      } else if (event.type == "idle") {
        this._active.delete(event.parent);
      } else if (event.type == "priority") {
        this.priority = toArray(this.source).reduce(
          (highest, parent) => Math.max(highest, (isFrameValue(parent) ? parent.priority : 0) + 1),
          0
        );
      }
    }
  };
  function isIdle(source) {
    return source.idle !== false;
  }
  function checkIdle(active) {
    return !active.size || Array.from(active).every(isIdle);
  }
  function becomeIdle(self2) {
    if (!self2.idle) {
      self2.idle = true;
      each2(getPayload(self2), (node) => {
        node.done = true;
      });
      callFluidObservers(self2, {
        type: "idle",
        parent: self2
      });
    }
  }
  var to3 = (source, ...args) => new Interpolation(source, args);
  globals_exports.assign({
    createStringInterpolator: createStringInterpolator2,
    to: (source, args) => new Interpolation(source, args)
  });
  var update2 = frameLoop.advance;

  // node_modules/@nivo/tooltip/node_modules/@react-spring/web/dist/react-spring_web.modern.mjs
  var import_react_dom = __toESM(require_react_dom(), 1);
  var isCustomPropRE = /^--/;
  function dangerousStyleValue(name, value) {
    if (value == null || typeof value === "boolean" || value === "")
      return "";
    if (typeof value === "number" && value !== 0 && !isCustomPropRE.test(name) && !(isUnitlessNumber.hasOwnProperty(name) && isUnitlessNumber[name]))
      return value + "px";
    return ("" + value).trim();
  }
  var attributeCache = {};
  function applyAnimatedValues(instance, props) {
    if (!instance.nodeType || !instance.setAttribute) {
      return false;
    }
    const isFilterElement = instance.nodeName === "filter" || instance.parentNode && instance.parentNode.nodeName === "filter";
    const {
      className,
      style,
      children,
      scrollTop,
      scrollLeft,
      viewBox,
      ...attributes
    } = props;
    const values = Object.values(attributes);
    const names2 = Object.keys(attributes).map(
      (name) => isFilterElement || instance.hasAttribute(name) ? name : attributeCache[name] || (attributeCache[name] = name.replace(
        /([A-Z])/g,
        (n6) => "-" + n6.toLowerCase()
      ))
    );
    if (children !== void 0) {
      instance.textContent = children;
    }
    for (const name in style) {
      if (style.hasOwnProperty(name)) {
        const value = dangerousStyleValue(name, style[name]);
        if (isCustomPropRE.test(name)) {
          instance.style.setProperty(name, value);
        } else {
          instance.style[name] = value;
        }
      }
    }
    names2.forEach((name, i6) => {
      instance.setAttribute(name, values[i6]);
    });
    if (className !== void 0) {
      instance.className = className;
    }
    if (scrollTop !== void 0) {
      instance.scrollTop = scrollTop;
    }
    if (scrollLeft !== void 0) {
      instance.scrollLeft = scrollLeft;
    }
    if (viewBox !== void 0) {
      instance.setAttribute("viewBox", viewBox);
    }
  }
  var isUnitlessNumber = {
    animationIterationCount: true,
    borderImageOutset: true,
    borderImageSlice: true,
    borderImageWidth: true,
    boxFlex: true,
    boxFlexGroup: true,
    boxOrdinalGroup: true,
    columnCount: true,
    columns: true,
    flex: true,
    flexGrow: true,
    flexPositive: true,
    flexShrink: true,
    flexNegative: true,
    flexOrder: true,
    gridRow: true,
    gridRowEnd: true,
    gridRowSpan: true,
    gridRowStart: true,
    gridColumn: true,
    gridColumnEnd: true,
    gridColumnSpan: true,
    gridColumnStart: true,
    fontWeight: true,
    lineClamp: true,
    lineHeight: true,
    opacity: true,
    order: true,
    orphans: true,
    tabSize: true,
    widows: true,
    zIndex: true,
    zoom: true,
    fillOpacity: true,
    floodOpacity: true,
    stopOpacity: true,
    strokeDasharray: true,
    strokeDashoffset: true,
    strokeMiterlimit: true,
    strokeOpacity: true,
    strokeWidth: true
  };
  var prefixKey = (prefix2, key) => prefix2 + key.charAt(0).toUpperCase() + key.substring(1);
  var prefixes = ["Webkit", "Ms", "Moz", "O"];
  isUnitlessNumber = Object.keys(isUnitlessNumber).reduce((acc, prop) => {
    prefixes.forEach((prefix2) => acc[prefixKey(prefix2, prop)] = acc[prop]);
    return acc;
  }, isUnitlessNumber);
  var domTransforms = /^(matrix|translate|scale|rotate|skew)/;
  var pxTransforms = /^(translate)/;
  var degTransforms = /^(rotate|skew)/;
  var addUnit = (value, unit2) => is.num(value) && value !== 0 ? value + unit2 : value;
  var isValueIdentity = (value, id) => is.arr(value) ? value.every((v4) => isValueIdentity(v4, id)) : is.num(value) ? value === id : parseFloat(value) === id;
  var AnimatedStyle = class extends AnimatedObject {
    constructor({ x: x3, y: y4, z: z3, ...style }) {
      const inputs = [];
      const transforms = [];
      if (x3 || y4 || z3) {
        inputs.push([x3 || 0, y4 || 0, z3 || 0]);
        transforms.push((xyz) => [
          `translate3d(${xyz.map((v4) => addUnit(v4, "px")).join(",")})`,
          isValueIdentity(xyz, 0)
        ]);
      }
      eachProp(style, (value, key) => {
        if (key === "transform") {
          inputs.push([value || ""]);
          transforms.push((transform) => [transform, transform === ""]);
        } else if (domTransforms.test(key)) {
          delete style[key];
          if (is.und(value))
            return;
          const unit2 = pxTransforms.test(key) ? "px" : degTransforms.test(key) ? "deg" : "";
          inputs.push(toArray(value));
          transforms.push(
            key === "rotate3d" ? ([x22, y22, z22, deg]) => [
              `rotate3d(${x22},${y22},${z22},${addUnit(deg, unit2)})`,
              isValueIdentity(deg, 0)
            ] : (input) => [
              `${key}(${input.map((v4) => addUnit(v4, unit2)).join(",")})`,
              isValueIdentity(input, key.startsWith("scale") ? 1 : 0)
            ]
          );
        }
      });
      if (inputs.length) {
        style.transform = new FluidTransform(inputs, transforms);
      }
      super(style);
    }
  };
  var FluidTransform = class extends FluidValue {
    constructor(inputs, transforms) {
      super();
      this.inputs = inputs;
      this.transforms = transforms;
      this._value = null;
    }
    get() {
      return this._value || (this._value = this._get());
    }
    _get() {
      let transform = "";
      let identity2 = true;
      each2(this.inputs, (input, i6) => {
        const arg1 = getFluidValue(input[0]);
        const [t5, id] = this.transforms[i6](
          is.arr(arg1) ? arg1 : input.map(getFluidValue)
        );
        transform += " " + t5;
        identity2 = identity2 && id;
      });
      return identity2 ? "none" : transform;
    }
    observerAdded(count2) {
      if (count2 == 1)
        each2(
          this.inputs,
          (input) => each2(
            input,
            (value) => hasFluidValue(value) && addFluidObserver(value, this)
          )
        );
    }
    observerRemoved(count2) {
      if (count2 == 0)
        each2(
          this.inputs,
          (input) => each2(
            input,
            (value) => hasFluidValue(value) && removeFluidObserver(value, this)
          )
        );
    }
    eventObserved(event) {
      if (event.type == "change") {
        this._value = null;
      }
      callFluidObservers(this, event);
    }
  };
  var primitives = [
    "a",
    "abbr",
    "address",
    "area",
    "article",
    "aside",
    "audio",
    "b",
    "base",
    "bdi",
    "bdo",
    "big",
    "blockquote",
    "body",
    "br",
    "button",
    "canvas",
    "caption",
    "cite",
    "code",
    "col",
    "colgroup",
    "data",
    "datalist",
    "dd",
    "del",
    "details",
    "dfn",
    "dialog",
    "div",
    "dl",
    "dt",
    "em",
    "embed",
    "fieldset",
    "figcaption",
    "figure",
    "footer",
    "form",
    "h1",
    "h2",
    "h3",
    "h4",
    "h5",
    "h6",
    "head",
    "header",
    "hgroup",
    "hr",
    "html",
    "i",
    "iframe",
    "img",
    "input",
    "ins",
    "kbd",
    "keygen",
    "label",
    "legend",
    "li",
    "link",
    "main",
    "map",
    "mark",
    "menu",
    "menuitem",
    "meta",
    "meter",
    "nav",
    "noscript",
    "object",
    "ol",
    "optgroup",
    "option",
    "output",
    "p",
    "param",
    "picture",
    "pre",
    "progress",
    "q",
    "rp",
    "rt",
    "ruby",
    "s",
    "samp",
    "script",
    "section",
    "select",
    "small",
    "source",
    "span",
    "strong",
    "style",
    "sub",
    "summary",
    "sup",
    "table",
    "tbody",
    "td",
    "textarea",
    "tfoot",
    "th",
    "thead",
    "time",
    "title",
    "tr",
    "track",
    "u",
    "ul",
    "var",
    "video",
    "wbr",
    "circle",
    "clipPath",
    "defs",
    "ellipse",
    "foreignObject",
    "g",
    "image",
    "line",
    "linearGradient",
    "mask",
    "path",
    "pattern",
    "polygon",
    "polyline",
    "radialGradient",
    "rect",
    "stop",
    "svg",
    "text",
    "tspan"
  ];
  globals_exports.assign({
    batchedUpdates: import_react_dom.unstable_batchedUpdates,
    createStringInterpolator: createStringInterpolator2,
    colors: colors22
  });
  var host = createHost(primitives, {
    applyAnimatedValues,
    createAnimatedStyle: (style) => new AnimatedStyle(style),
    getComponentProps: ({ scrollTop, scrollLeft, ...props }) => props
  });
  var animated = host.animated;

  // node_modules/@nivo/tooltip/dist/nivo-tooltip.es.js
  var import_jsx_runtime = __toESM(require_jsx_runtime());
  function v() {
    return v = Object.assign ? Object.assign.bind() : function(t5) {
      for (var i6 = 1; i6 < arguments.length; i6++) {
        var o6 = arguments[i6];
        for (var n6 in o6)
          Object.prototype.hasOwnProperty.call(o6, n6) && (t5[n6] = o6[n6]);
      }
      return t5;
    }, v.apply(this, arguments);
  }
  var x = { pointerEvents: "none", position: "absolute", zIndex: 10, top: 0, left: 0 };
  var m = function(t5, i6) {
    return "translate(" + t5 + "px, " + i6 + "px)";
  };
  var b = (0, import_react16.memo)(function(t5) {
    var o6, n6 = t5.position, r6 = t5.anchor, e7 = t5.children, l5 = zt(), d2 = Ur(), y4 = d2.animate, f2 = d2.config, b3 = kt(), g2 = b3[0], w3 = b3[1], T3 = (0, import_react16.useRef)(false), C6 = void 0, E6 = false, P3 = w3.width > 0 && w3.height > 0, j3 = Math.round(n6[0]), N2 = Math.round(n6[1]);
    P3 && ("top" === r6 ? (j3 -= w3.width / 2, N2 -= w3.height + 14) : "right" === r6 ? (j3 += 14, N2 -= w3.height / 2) : "bottom" === r6 ? (j3 -= w3.width / 2, N2 += 14) : "left" === r6 ? (j3 -= w3.width + 14, N2 -= w3.height / 2) : "center" === r6 && (j3 -= w3.width / 2, N2 -= w3.height / 2), C6 = { transform: m(j3, N2) }, T3.current || (E6 = true), T3.current = [j3, N2]);
    var O3 = useSpring({ to: C6, config: f2, immediate: !y4 || E6 }), V3 = v({}, x, l5.tooltip.wrapper, { transform: null != (o6 = O3.transform) ? o6 : m(j3, N2), opacity: O3.transform ? 1 : 0 });
    return (0, import_jsx_runtime.jsx)(animated.div, { ref: g2, style: V3, children: e7 });
  });
  b.displayName = "TooltipWrapper";
  var g = (0, import_react16.memo)(function(t5) {
    var i6 = t5.size, o6 = void 0 === i6 ? 12 : i6, n6 = t5.color, r6 = t5.style;
    return (0, import_jsx_runtime.jsx)("span", { style: v({ display: "block", width: o6, height: o6, background: n6 }, void 0 === r6 ? {} : r6) });
  });
  var w = (0, import_react16.memo)(function(t5) {
    var i6, o6 = t5.id, n6 = t5.value, r6 = t5.format, e7 = t5.enableChip, l5 = void 0 !== e7 && e7, a2 = t5.color, c8 = t5.renderContent, h = zt(), u5 = Ot(r6);
    if ("function" == typeof c8)
      i6 = c8();
    else {
      var f2 = n6;
      void 0 !== u5 && void 0 !== f2 && (f2 = u5(f2)), i6 = (0, import_jsx_runtime.jsxs)("div", { style: h.tooltip.basic, children: [l5 && (0, import_jsx_runtime.jsx)(g, { color: a2, style: h.tooltip.chip }), void 0 !== f2 ? (0, import_jsx_runtime.jsxs)("span", { children: [o6, ": ", (0, import_jsx_runtime.jsx)("strong", { children: "" + f2 })] }) : o6] });
    }
    return (0, import_jsx_runtime.jsx)("div", { style: h.tooltip.container, children: i6 });
  });
  var T = { width: "100%", borderCollapse: "collapse" };
  var C = (0, import_react16.memo)(function(t5) {
    var i6, o6 = t5.title, n6 = t5.rows, r6 = void 0 === n6 ? [] : n6, e7 = t5.renderContent, l5 = zt();
    return r6.length ? (i6 = "function" == typeof e7 ? e7() : (0, import_jsx_runtime.jsxs)("div", { children: [o6 && o6, (0, import_jsx_runtime.jsx)("table", { style: v({}, T, l5.tooltip.table), children: (0, import_jsx_runtime.jsx)("tbody", { children: r6.map(function(t6, i7) {
      return (0, import_jsx_runtime.jsx)("tr", { children: t6.map(function(t7, i8) {
        return (0, import_jsx_runtime.jsx)("td", { style: l5.tooltip.tableCell, children: t7 }, i8);
      }) }, i7);
    }) }) })] }), (0, import_jsx_runtime.jsx)("div", { style: l5.tooltip.container, children: i6 })) : null;
  });
  C.displayName = "TableTooltip";
  var E = (0, import_react16.memo)(function(t5) {
    var i6 = t5.x0, n6 = t5.x1, r6 = t5.y0, e7 = t5.y1, l5 = zt(), u5 = Ur(), d2 = u5.animate, y4 = u5.config, f2 = (0, import_react16.useMemo)(function() {
      return v({}, l5.crosshair.line, { pointerEvents: "none" });
    }, [l5.crosshair.line]), x3 = useSpring({ x1: i6, x2: n6, y1: r6, y2: e7, config: y4, immediate: !d2 });
    return (0, import_jsx_runtime.jsx)(animated.line, v({}, x3, { fill: "none", style: f2 }));
  });
  E.displayName = "CrosshairLine";
  var P = (0, import_react16.memo)(function(t5) {
    var i6, o6, n6 = t5.width, r6 = t5.height, e7 = t5.type, l5 = t5.x, a2 = t5.y;
    return "cross" === e7 ? (i6 = { x0: l5, x1: l5, y0: 0, y1: r6 }, o6 = { x0: 0, x1: n6, y0: a2, y1: a2 }) : "top-left" === e7 ? (i6 = { x0: l5, x1: l5, y0: 0, y1: a2 }, o6 = { x0: 0, x1: l5, y0: a2, y1: a2 }) : "top" === e7 ? i6 = { x0: l5, x1: l5, y0: 0, y1: a2 } : "top-right" === e7 ? (i6 = { x0: l5, x1: l5, y0: 0, y1: a2 }, o6 = { x0: l5, x1: n6, y0: a2, y1: a2 }) : "right" === e7 ? o6 = { x0: l5, x1: n6, y0: a2, y1: a2 } : "bottom-right" === e7 ? (i6 = { x0: l5, x1: l5, y0: a2, y1: r6 }, o6 = { x0: l5, x1: n6, y0: a2, y1: a2 }) : "bottom" === e7 ? i6 = { x0: l5, x1: l5, y0: a2, y1: r6 } : "bottom-left" === e7 ? (i6 = { x0: l5, x1: l5, y0: a2, y1: r6 }, o6 = { x0: 0, x1: l5, y0: a2, y1: a2 }) : "left" === e7 ? o6 = { x0: 0, x1: l5, y0: a2, y1: a2 } : "x" === e7 ? i6 = { x0: l5, x1: l5, y0: 0, y1: r6 } : "y" === e7 && (o6 = { x0: 0, x1: n6, y0: a2, y1: a2 }), (0, import_jsx_runtime.jsxs)(import_jsx_runtime.Fragment, { children: [i6 && (0, import_jsx_runtime.jsx)(E, { x0: i6.x0, x1: i6.x1, y0: i6.y0, y1: i6.y1 }), o6 && (0, import_jsx_runtime.jsx)(E, { x0: o6.x0, x1: o6.x1, y0: o6.y0, y1: o6.y1 })] });
  });
  P.displayName = "Crosshair";
  var j = (0, import_react16.createContext)({ showTooltipAt: function() {
  }, showTooltipFromEvent: function() {
  }, hideTooltip: function() {
  } });
  var N = { isVisible: false, position: [null, null], content: null, anchor: null };
  var O = (0, import_react16.createContext)(N);
  var V = function(t5) {
    var i6 = (0, import_react16.useState)(N), n6 = i6[0], l5 = i6[1], a2 = (0, import_react16.useCallback)(function(t6, i7, o6) {
      var n7 = i7[0], r6 = i7[1];
      void 0 === o6 && (o6 = "top"), l5({ isVisible: true, position: [n7, r6], anchor: o6, content: t6 });
    }, [l5]), c8 = (0, import_react16.useCallback)(function(i7, o6, n7) {
      void 0 === n7 && (n7 = "top");
      var r6 = t5.current.getBoundingClientRect(), e7 = t5.current.offsetWidth, a3 = e7 === r6.width ? 1 : e7 / r6.width, c9 = "touches" in o6 ? o6.touches[0] : o6, s4 = c9.clientX, h = c9.clientY, u5 = (s4 - r6.left) * a3, d2 = (h - r6.top) * a3;
      "left" !== n7 && "right" !== n7 || (n7 = u5 < r6.width / 2 ? "right" : "left"), l5({ isVisible: true, position: [u5, d2], anchor: n7, content: i7 });
    }, [t5, l5]), s3 = (0, import_react16.useCallback)(function() {
      l5(N);
    }, [l5]);
    return { actions: (0, import_react16.useMemo)(function() {
      return { showTooltipAt: a2, showTooltipFromEvent: c8, hideTooltip: s3 };
    }, [a2, c8, s3]), state: n6 };
  };
  var k = function() {
    var t5 = (0, import_react16.useContext)(j);
    if (void 0 === t5)
      throw new Error("useTooltip must be used within a TooltipProvider");
    return t5;
  };
  var z = function() {
    var t5 = (0, import_react16.useContext)(O);
    if (void 0 === t5)
      throw new Error("useTooltipState must be used within a TooltipProvider");
    return t5;
  };
  var A = function(t5) {
    return t5.isVisible;
  };
  var F = function() {
    var t5 = z();
    return A(t5) ? (0, import_jsx_runtime.jsx)(b, { position: t5.position, anchor: t5.anchor, children: t5.content }) : null;
  };
  var M = function(t5) {
    var i6 = t5.container, o6 = t5.children, n6 = V(i6), r6 = n6.actions, e7 = n6.state;
    return (0, import_jsx_runtime.jsx)(j.Provider, { value: r6, children: (0, import_jsx_runtime.jsx)(O.Provider, { value: e7, children: o6 }) });
  };

  // node_modules/@nivo/core/dist/nivo-core.es.js
  var import_merge = __toESM(require_merge());
  var import_get = __toESM(require_get());
  var import_set = __toESM(require_set());

  // node_modules/@nivo/core/node_modules/d3-color/src/define.js
  function define_default(constructor, factory, prototype) {
    constructor.prototype = factory.prototype = prototype;
    prototype.constructor = constructor;
  }
  function extend(parent, definition) {
    var prototype = Object.create(parent.prototype);
    for (var key in definition)
      prototype[key] = definition[key];
    return prototype;
  }

  // node_modules/@nivo/core/node_modules/d3-color/src/color.js
  function Color2() {
  }
  var darker = 0.7;
  var brighter = 1 / darker;
  var reI = "\\s*([+-]?\\d+)\\s*";
  var reN = "\\s*([+-]?(?:\\d*\\.)?\\d+(?:[eE][+-]?\\d+)?)\\s*";
  var reP = "\\s*([+-]?(?:\\d*\\.)?\\d+(?:[eE][+-]?\\d+)?)%\\s*";
  var reHex = /^#([0-9a-f]{3,8})$/;
  var reRgbInteger = new RegExp(`^rgb\\(${reI},${reI},${reI}\\)$`);
  var reRgbPercent = new RegExp(`^rgb\\(${reP},${reP},${reP}\\)$`);
  var reRgbaInteger = new RegExp(`^rgba\\(${reI},${reI},${reI},${reN}\\)$`);
  var reRgbaPercent = new RegExp(`^rgba\\(${reP},${reP},${reP},${reN}\\)$`);
  var reHslPercent = new RegExp(`^hsl\\(${reN},${reP},${reP}\\)$`);
  var reHslaPercent = new RegExp(`^hsla\\(${reN},${reP},${reP},${reN}\\)$`);
  var named = {
    aliceblue: 15792383,
    antiquewhite: 16444375,
    aqua: 65535,
    aquamarine: 8388564,
    azure: 15794175,
    beige: 16119260,
    bisque: 16770244,
    black: 0,
    blanchedalmond: 16772045,
    blue: 255,
    blueviolet: 9055202,
    brown: 10824234,
    burlywood: 14596231,
    cadetblue: 6266528,
    chartreuse: 8388352,
    chocolate: 13789470,
    coral: 16744272,
    cornflowerblue: 6591981,
    cornsilk: 16775388,
    crimson: 14423100,
    cyan: 65535,
    darkblue: 139,
    darkcyan: 35723,
    darkgoldenrod: 12092939,
    darkgray: 11119017,
    darkgreen: 25600,
    darkgrey: 11119017,
    darkkhaki: 12433259,
    darkmagenta: 9109643,
    darkolivegreen: 5597999,
    darkorange: 16747520,
    darkorchid: 10040012,
    darkred: 9109504,
    darksalmon: 15308410,
    darkseagreen: 9419919,
    darkslateblue: 4734347,
    darkslategray: 3100495,
    darkslategrey: 3100495,
    darkturquoise: 52945,
    darkviolet: 9699539,
    deeppink: 16716947,
    deepskyblue: 49151,
    dimgray: 6908265,
    dimgrey: 6908265,
    dodgerblue: 2003199,
    firebrick: 11674146,
    floralwhite: 16775920,
    forestgreen: 2263842,
    fuchsia: 16711935,
    gainsboro: 14474460,
    ghostwhite: 16316671,
    gold: 16766720,
    goldenrod: 14329120,
    gray: 8421504,
    green: 32768,
    greenyellow: 11403055,
    grey: 8421504,
    honeydew: 15794160,
    hotpink: 16738740,
    indianred: 13458524,
    indigo: 4915330,
    ivory: 16777200,
    khaki: 15787660,
    lavender: 15132410,
    lavenderblush: 16773365,
    lawngreen: 8190976,
    lemonchiffon: 16775885,
    lightblue: 11393254,
    lightcoral: 15761536,
    lightcyan: 14745599,
    lightgoldenrodyellow: 16448210,
    lightgray: 13882323,
    lightgreen: 9498256,
    lightgrey: 13882323,
    lightpink: 16758465,
    lightsalmon: 16752762,
    lightseagreen: 2142890,
    lightskyblue: 8900346,
    lightslategray: 7833753,
    lightslategrey: 7833753,
    lightsteelblue: 11584734,
    lightyellow: 16777184,
    lime: 65280,
    limegreen: 3329330,
    linen: 16445670,
    magenta: 16711935,
    maroon: 8388608,
    mediumaquamarine: 6737322,
    mediumblue: 205,
    mediumorchid: 12211667,
    mediumpurple: 9662683,
    mediumseagreen: 3978097,
    mediumslateblue: 8087790,
    mediumspringgreen: 64154,
    mediumturquoise: 4772300,
    mediumvioletred: 13047173,
    midnightblue: 1644912,
    mintcream: 16121850,
    mistyrose: 16770273,
    moccasin: 16770229,
    navajowhite: 16768685,
    navy: 128,
    oldlace: 16643558,
    olive: 8421376,
    olivedrab: 7048739,
    orange: 16753920,
    orangered: 16729344,
    orchid: 14315734,
    palegoldenrod: 15657130,
    palegreen: 10025880,
    paleturquoise: 11529966,
    palevioletred: 14381203,
    papayawhip: 16773077,
    peachpuff: 16767673,
    peru: 13468991,
    pink: 16761035,
    plum: 14524637,
    powderblue: 11591910,
    purple: 8388736,
    rebeccapurple: 6697881,
    red: 16711680,
    rosybrown: 12357519,
    royalblue: 4286945,
    saddlebrown: 9127187,
    salmon: 16416882,
    sandybrown: 16032864,
    seagreen: 3050327,
    seashell: 16774638,
    sienna: 10506797,
    silver: 12632256,
    skyblue: 8900331,
    slateblue: 6970061,
    slategray: 7372944,
    slategrey: 7372944,
    snow: 16775930,
    springgreen: 65407,
    steelblue: 4620980,
    tan: 13808780,
    teal: 32896,
    thistle: 14204888,
    tomato: 16737095,
    turquoise: 4251856,
    violet: 15631086,
    wheat: 16113331,
    white: 16777215,
    whitesmoke: 16119285,
    yellow: 16776960,
    yellowgreen: 10145074
  };
  define_default(Color2, color2, {
    copy(channels) {
      return Object.assign(new this.constructor(), this, channels);
    },
    displayable() {
      return this.rgb().displayable();
    },
    hex: color_formatHex,
    formatHex: color_formatHex,
    formatHex8: color_formatHex8,
    formatHsl: color_formatHsl,
    formatRgb: color_formatRgb,
    toString: color_formatRgb
  });
  function color_formatHex() {
    return this.rgb().formatHex();
  }
  function color_formatHex8() {
    return this.rgb().formatHex8();
  }
  function color_formatHsl() {
    return hslConvert(this).formatHsl();
  }
  function color_formatRgb() {
    return this.rgb().formatRgb();
  }
  function color2(format2) {
    var m4, l5;
    format2 = (format2 + "").trim().toLowerCase();
    return (m4 = reHex.exec(format2)) ? (l5 = m4[1].length, m4 = parseInt(m4[1], 16), l5 === 6 ? rgbn(m4) : l5 === 3 ? new Rgb(m4 >> 8 & 15 | m4 >> 4 & 240, m4 >> 4 & 15 | m4 & 240, (m4 & 15) << 4 | m4 & 15, 1) : l5 === 8 ? rgba2(m4 >> 24 & 255, m4 >> 16 & 255, m4 >> 8 & 255, (m4 & 255) / 255) : l5 === 4 ? rgba2(m4 >> 12 & 15 | m4 >> 8 & 240, m4 >> 8 & 15 | m4 >> 4 & 240, m4 >> 4 & 15 | m4 & 240, ((m4 & 15) << 4 | m4 & 15) / 255) : null) : (m4 = reRgbInteger.exec(format2)) ? new Rgb(m4[1], m4[2], m4[3], 1) : (m4 = reRgbPercent.exec(format2)) ? new Rgb(m4[1] * 255 / 100, m4[2] * 255 / 100, m4[3] * 255 / 100, 1) : (m4 = reRgbaInteger.exec(format2)) ? rgba2(m4[1], m4[2], m4[3], m4[4]) : (m4 = reRgbaPercent.exec(format2)) ? rgba2(m4[1] * 255 / 100, m4[2] * 255 / 100, m4[3] * 255 / 100, m4[4]) : (m4 = reHslPercent.exec(format2)) ? hsla2(m4[1], m4[2] / 100, m4[3] / 100, 1) : (m4 = reHslaPercent.exec(format2)) ? hsla2(m4[1], m4[2] / 100, m4[3] / 100, m4[4]) : named.hasOwnProperty(format2) ? rgbn(named[format2]) : format2 === "transparent" ? new Rgb(NaN, NaN, NaN, 0) : null;
  }
  function rgbn(n6) {
    return new Rgb(n6 >> 16 & 255, n6 >> 8 & 255, n6 & 255, 1);
  }
  function rgba2(r6, g2, b3, a2) {
    if (a2 <= 0)
      r6 = g2 = b3 = NaN;
    return new Rgb(r6, g2, b3, a2);
  }
  function rgbConvert(o6) {
    if (!(o6 instanceof Color2))
      o6 = color2(o6);
    if (!o6)
      return new Rgb();
    o6 = o6.rgb();
    return new Rgb(o6.r, o6.g, o6.b, o6.opacity);
  }
  function rgb2(r6, g2, b3, opacity) {
    return arguments.length === 1 ? rgbConvert(r6) : new Rgb(r6, g2, b3, opacity == null ? 1 : opacity);
  }
  function Rgb(r6, g2, b3, opacity) {
    this.r = +r6;
    this.g = +g2;
    this.b = +b3;
    this.opacity = +opacity;
  }
  define_default(Rgb, rgb2, extend(Color2, {
    brighter(k2) {
      k2 = k2 == null ? brighter : Math.pow(brighter, k2);
      return new Rgb(this.r * k2, this.g * k2, this.b * k2, this.opacity);
    },
    darker(k2) {
      k2 = k2 == null ? darker : Math.pow(darker, k2);
      return new Rgb(this.r * k2, this.g * k2, this.b * k2, this.opacity);
    },
    rgb() {
      return this;
    },
    clamp() {
      return new Rgb(clampi(this.r), clampi(this.g), clampi(this.b), clampa(this.opacity));
    },
    displayable() {
      return -0.5 <= this.r && this.r < 255.5 && (-0.5 <= this.g && this.g < 255.5) && (-0.5 <= this.b && this.b < 255.5) && (0 <= this.opacity && this.opacity <= 1);
    },
    hex: rgb_formatHex,
    formatHex: rgb_formatHex,
    formatHex8: rgb_formatHex8,
    formatRgb: rgb_formatRgb,
    toString: rgb_formatRgb
  }));
  function rgb_formatHex() {
    return `#${hex2(this.r)}${hex2(this.g)}${hex2(this.b)}`;
  }
  function rgb_formatHex8() {
    return `#${hex2(this.r)}${hex2(this.g)}${hex2(this.b)}${hex2((isNaN(this.opacity) ? 1 : this.opacity) * 255)}`;
  }
  function rgb_formatRgb() {
    const a2 = clampa(this.opacity);
    return `${a2 === 1 ? "rgb(" : "rgba("}${clampi(this.r)}, ${clampi(this.g)}, ${clampi(this.b)}${a2 === 1 ? ")" : `, ${a2})`}`;
  }
  function clampa(opacity) {
    return isNaN(opacity) ? 1 : Math.max(0, Math.min(1, opacity));
  }
  function clampi(value) {
    return Math.max(0, Math.min(255, Math.round(value) || 0));
  }
  function hex2(value) {
    value = clampi(value);
    return (value < 16 ? "0" : "") + value.toString(16);
  }
  function hsla2(h, s3, l5, a2) {
    if (a2 <= 0)
      h = s3 = l5 = NaN;
    else if (l5 <= 0 || l5 >= 1)
      h = s3 = NaN;
    else if (s3 <= 0)
      h = NaN;
    return new Hsl(h, s3, l5, a2);
  }
  function hslConvert(o6) {
    if (o6 instanceof Hsl)
      return new Hsl(o6.h, o6.s, o6.l, o6.opacity);
    if (!(o6 instanceof Color2))
      o6 = color2(o6);
    if (!o6)
      return new Hsl();
    if (o6 instanceof Hsl)
      return o6;
    o6 = o6.rgb();
    var r6 = o6.r / 255, g2 = o6.g / 255, b3 = o6.b / 255, min = Math.min(r6, g2, b3), max = Math.max(r6, g2, b3), h = NaN, s3 = max - min, l5 = (max + min) / 2;
    if (s3) {
      if (r6 === max)
        h = (g2 - b3) / s3 + (g2 < b3) * 6;
      else if (g2 === max)
        h = (b3 - r6) / s3 + 2;
      else
        h = (r6 - g2) / s3 + 4;
      s3 /= l5 < 0.5 ? max + min : 2 - max - min;
      h *= 60;
    } else {
      s3 = l5 > 0 && l5 < 1 ? 0 : h;
    }
    return new Hsl(h, s3, l5, o6.opacity);
  }
  function hsl2(h, s3, l5, opacity) {
    return arguments.length === 1 ? hslConvert(h) : new Hsl(h, s3, l5, opacity == null ? 1 : opacity);
  }
  function Hsl(h, s3, l5, opacity) {
    this.h = +h;
    this.s = +s3;
    this.l = +l5;
    this.opacity = +opacity;
  }
  define_default(Hsl, hsl2, extend(Color2, {
    brighter(k2) {
      k2 = k2 == null ? brighter : Math.pow(brighter, k2);
      return new Hsl(this.h, this.s, this.l * k2, this.opacity);
    },
    darker(k2) {
      k2 = k2 == null ? darker : Math.pow(darker, k2);
      return new Hsl(this.h, this.s, this.l * k2, this.opacity);
    },
    rgb() {
      var h = this.h % 360 + (this.h < 0) * 360, s3 = isNaN(h) || isNaN(this.s) ? 0 : this.s, l5 = this.l, m22 = l5 + (l5 < 0.5 ? l5 : 1 - l5) * s3, m1 = 2 * l5 - m22;
      return new Rgb(
        hsl2rgb2(h >= 240 ? h - 240 : h + 120, m1, m22),
        hsl2rgb2(h, m1, m22),
        hsl2rgb2(h < 120 ? h + 240 : h - 120, m1, m22),
        this.opacity
      );
    },
    clamp() {
      return new Hsl(clamph(this.h), clampt(this.s), clampt(this.l), clampa(this.opacity));
    },
    displayable() {
      return (0 <= this.s && this.s <= 1 || isNaN(this.s)) && (0 <= this.l && this.l <= 1) && (0 <= this.opacity && this.opacity <= 1);
    },
    formatHsl() {
      const a2 = clampa(this.opacity);
      return `${a2 === 1 ? "hsl(" : "hsla("}${clamph(this.h)}, ${clampt(this.s) * 100}%, ${clampt(this.l) * 100}%${a2 === 1 ? ")" : `, ${a2})`}`;
    }
  }));
  function clamph(value) {
    value = (value || 0) % 360;
    return value < 0 ? value + 360 : value;
  }
  function clampt(value) {
    return Math.max(0, Math.min(1, value || 0));
  }
  function hsl2rgb2(h, m1, m22) {
    return (h < 60 ? m1 + (m22 - m1) * h / 60 : h < 180 ? m22 : h < 240 ? m1 + (m22 - m1) * (240 - h) / 60 : m1) * 255;
  }

  // node_modules/@nivo/core/node_modules/d3-interpolate/src/basis.js
  function basis(t12, v0, v1, v22, v32) {
    var t22 = t12 * t12, t32 = t22 * t12;
    return ((1 - 3 * t12 + 3 * t22 - t32) * v0 + (4 - 6 * t22 + 3 * t32) * v1 + (1 + 3 * t12 + 3 * t22 - 3 * t32) * v22 + t32 * v32) / 6;
  }
  function basis_default(values) {
    var n6 = values.length - 1;
    return function(t5) {
      var i6 = t5 <= 0 ? t5 = 0 : t5 >= 1 ? (t5 = 1, n6 - 1) : Math.floor(t5 * n6), v1 = values[i6], v22 = values[i6 + 1], v0 = i6 > 0 ? values[i6 - 1] : 2 * v1 - v22, v32 = i6 < n6 - 1 ? values[i6 + 2] : 2 * v22 - v1;
      return basis((t5 - i6 / n6) * n6, v0, v1, v22, v32);
    };
  }

  // node_modules/@nivo/core/node_modules/d3-interpolate/src/basisClosed.js
  function basisClosed_default(values) {
    var n6 = values.length;
    return function(t5) {
      var i6 = Math.floor(((t5 %= 1) < 0 ? ++t5 : t5) * n6), v0 = values[(i6 + n6 - 1) % n6], v1 = values[i6 % n6], v22 = values[(i6 + 1) % n6], v32 = values[(i6 + 2) % n6];
      return basis((t5 - i6 / n6) * n6, v0, v1, v22, v32);
    };
  }

  // node_modules/@nivo/core/node_modules/d3-interpolate/src/constant.js
  var constant_default = (x3) => () => x3;

  // node_modules/@nivo/core/node_modules/d3-interpolate/src/color.js
  function linear(a2, d2) {
    return function(t5) {
      return a2 + t5 * d2;
    };
  }
  function exponential(a2, b3, y4) {
    return a2 = Math.pow(a2, y4), b3 = Math.pow(b3, y4) - a2, y4 = 1 / y4, function(t5) {
      return Math.pow(a2 + t5 * b3, y4);
    };
  }
  function gamma(y4) {
    return (y4 = +y4) === 1 ? nogamma : function(a2, b3) {
      return b3 - a2 ? exponential(a2, b3, y4) : constant_default(isNaN(a2) ? b3 : a2);
    };
  }
  function nogamma(a2, b3) {
    var d2 = b3 - a2;
    return d2 ? linear(a2, d2) : constant_default(isNaN(a2) ? b3 : a2);
  }

  // node_modules/@nivo/core/node_modules/d3-interpolate/src/rgb.js
  var rgb_default = function rgbGamma(y4) {
    var color5 = gamma(y4);
    function rgb5(start2, end) {
      var r6 = color5((start2 = rgb2(start2)).r, (end = rgb2(end)).r), g2 = color5(start2.g, end.g), b3 = color5(start2.b, end.b), opacity = nogamma(start2.opacity, end.opacity);
      return function(t5) {
        start2.r = r6(t5);
        start2.g = g2(t5);
        start2.b = b3(t5);
        start2.opacity = opacity(t5);
        return start2 + "";
      };
    }
    rgb5.gamma = rgbGamma;
    return rgb5;
  }(1);
  function rgbSpline(spline) {
    return function(colors3) {
      var n6 = colors3.length, r6 = new Array(n6), g2 = new Array(n6), b3 = new Array(n6), i6, color5;
      for (i6 = 0; i6 < n6; ++i6) {
        color5 = rgb2(colors3[i6]);
        r6[i6] = color5.r || 0;
        g2[i6] = color5.g || 0;
        b3[i6] = color5.b || 0;
      }
      r6 = spline(r6);
      g2 = spline(g2);
      b3 = spline(b3);
      color5.opacity = 1;
      return function(t5) {
        color5.r = r6(t5);
        color5.g = g2(t5);
        color5.b = b3(t5);
        return color5 + "";
      };
    };
  }
  var rgbBasis = rgbSpline(basis_default);
  var rgbBasisClosed = rgbSpline(basisClosed_default);

  // node_modules/@nivo/core/node_modules/@react-spring/web/dist/react-spring_web.modern.mjs
  var import_react_dom2 = __toESM(require_react_dom(), 1);
  var isCustomPropRE2 = /^--/;
  function dangerousStyleValue2(name, value) {
    if (value == null || typeof value === "boolean" || value === "")
      return "";
    if (typeof value === "number" && value !== 0 && !isCustomPropRE2.test(name) && !(isUnitlessNumber2.hasOwnProperty(name) && isUnitlessNumber2[name]))
      return value + "px";
    return ("" + value).trim();
  }
  var attributeCache2 = {};
  function applyAnimatedValues2(instance, props) {
    if (!instance.nodeType || !instance.setAttribute) {
      return false;
    }
    const isFilterElement = instance.nodeName === "filter" || instance.parentNode && instance.parentNode.nodeName === "filter";
    const {
      className,
      style,
      children,
      scrollTop,
      scrollLeft,
      viewBox,
      ...attributes
    } = props;
    const values = Object.values(attributes);
    const names2 = Object.keys(attributes).map(
      (name) => isFilterElement || instance.hasAttribute(name) ? name : attributeCache2[name] || (attributeCache2[name] = name.replace(
        /([A-Z])/g,
        (n6) => "-" + n6.toLowerCase()
      ))
    );
    if (children !== void 0) {
      instance.textContent = children;
    }
    for (const name in style) {
      if (style.hasOwnProperty(name)) {
        const value = dangerousStyleValue2(name, style[name]);
        if (isCustomPropRE2.test(name)) {
          instance.style.setProperty(name, value);
        } else {
          instance.style[name] = value;
        }
      }
    }
    names2.forEach((name, i6) => {
      instance.setAttribute(name, values[i6]);
    });
    if (className !== void 0) {
      instance.className = className;
    }
    if (scrollTop !== void 0) {
      instance.scrollTop = scrollTop;
    }
    if (scrollLeft !== void 0) {
      instance.scrollLeft = scrollLeft;
    }
    if (viewBox !== void 0) {
      instance.setAttribute("viewBox", viewBox);
    }
  }
  var isUnitlessNumber2 = {
    animationIterationCount: true,
    borderImageOutset: true,
    borderImageSlice: true,
    borderImageWidth: true,
    boxFlex: true,
    boxFlexGroup: true,
    boxOrdinalGroup: true,
    columnCount: true,
    columns: true,
    flex: true,
    flexGrow: true,
    flexPositive: true,
    flexShrink: true,
    flexNegative: true,
    flexOrder: true,
    gridRow: true,
    gridRowEnd: true,
    gridRowSpan: true,
    gridRowStart: true,
    gridColumn: true,
    gridColumnEnd: true,
    gridColumnSpan: true,
    gridColumnStart: true,
    fontWeight: true,
    lineClamp: true,
    lineHeight: true,
    opacity: true,
    order: true,
    orphans: true,
    tabSize: true,
    widows: true,
    zIndex: true,
    zoom: true,
    fillOpacity: true,
    floodOpacity: true,
    stopOpacity: true,
    strokeDasharray: true,
    strokeDashoffset: true,
    strokeMiterlimit: true,
    strokeOpacity: true,
    strokeWidth: true
  };
  var prefixKey2 = (prefix2, key) => prefix2 + key.charAt(0).toUpperCase() + key.substring(1);
  var prefixes2 = ["Webkit", "Ms", "Moz", "O"];
  isUnitlessNumber2 = Object.keys(isUnitlessNumber2).reduce((acc, prop) => {
    prefixes2.forEach((prefix2) => acc[prefixKey2(prefix2, prop)] = acc[prop]);
    return acc;
  }, isUnitlessNumber2);
  var domTransforms2 = /^(matrix|translate|scale|rotate|skew)/;
  var pxTransforms2 = /^(translate)/;
  var degTransforms2 = /^(rotate|skew)/;
  var addUnit2 = (value, unit2) => is.num(value) && value !== 0 ? value + unit2 : value;
  var isValueIdentity2 = (value, id) => is.arr(value) ? value.every((v4) => isValueIdentity2(v4, id)) : is.num(value) ? value === id : parseFloat(value) === id;
  var AnimatedStyle2 = class extends AnimatedObject {
    constructor({ x: x3, y: y4, z: z3, ...style }) {
      const inputs = [];
      const transforms = [];
      if (x3 || y4 || z3) {
        inputs.push([x3 || 0, y4 || 0, z3 || 0]);
        transforms.push((xyz) => [
          `translate3d(${xyz.map((v4) => addUnit2(v4, "px")).join(",")})`,
          isValueIdentity2(xyz, 0)
        ]);
      }
      eachProp(style, (value, key) => {
        if (key === "transform") {
          inputs.push([value || ""]);
          transforms.push((transform) => [transform, transform === ""]);
        } else if (domTransforms2.test(key)) {
          delete style[key];
          if (is.und(value))
            return;
          const unit2 = pxTransforms2.test(key) ? "px" : degTransforms2.test(key) ? "deg" : "";
          inputs.push(toArray(value));
          transforms.push(
            key === "rotate3d" ? ([x22, y22, z22, deg]) => [
              `rotate3d(${x22},${y22},${z22},${addUnit2(deg, unit2)})`,
              isValueIdentity2(deg, 0)
            ] : (input) => [
              `${key}(${input.map((v4) => addUnit2(v4, unit2)).join(",")})`,
              isValueIdentity2(input, key.startsWith("scale") ? 1 : 0)
            ]
          );
        }
      });
      if (inputs.length) {
        style.transform = new FluidTransform2(inputs, transforms);
      }
      super(style);
    }
  };
  var FluidTransform2 = class extends FluidValue {
    constructor(inputs, transforms) {
      super();
      this.inputs = inputs;
      this.transforms = transforms;
      this._value = null;
    }
    get() {
      return this._value || (this._value = this._get());
    }
    _get() {
      let transform = "";
      let identity2 = true;
      each2(this.inputs, (input, i6) => {
        const arg1 = getFluidValue(input[0]);
        const [t5, id] = this.transforms[i6](
          is.arr(arg1) ? arg1 : input.map(getFluidValue)
        );
        transform += " " + t5;
        identity2 = identity2 && id;
      });
      return identity2 ? "none" : transform;
    }
    observerAdded(count2) {
      if (count2 == 1)
        each2(
          this.inputs,
          (input) => each2(
            input,
            (value) => hasFluidValue(value) && addFluidObserver(value, this)
          )
        );
    }
    observerRemoved(count2) {
      if (count2 == 0)
        each2(
          this.inputs,
          (input) => each2(
            input,
            (value) => hasFluidValue(value) && removeFluidObserver(value, this)
          )
        );
    }
    eventObserved(event) {
      if (event.type == "change") {
        this._value = null;
      }
      callFluidObservers(this, event);
    }
  };
  var primitives2 = [
    "a",
    "abbr",
    "address",
    "area",
    "article",
    "aside",
    "audio",
    "b",
    "base",
    "bdi",
    "bdo",
    "big",
    "blockquote",
    "body",
    "br",
    "button",
    "canvas",
    "caption",
    "cite",
    "code",
    "col",
    "colgroup",
    "data",
    "datalist",
    "dd",
    "del",
    "details",
    "dfn",
    "dialog",
    "div",
    "dl",
    "dt",
    "em",
    "embed",
    "fieldset",
    "figcaption",
    "figure",
    "footer",
    "form",
    "h1",
    "h2",
    "h3",
    "h4",
    "h5",
    "h6",
    "head",
    "header",
    "hgroup",
    "hr",
    "html",
    "i",
    "iframe",
    "img",
    "input",
    "ins",
    "kbd",
    "keygen",
    "label",
    "legend",
    "li",
    "link",
    "main",
    "map",
    "mark",
    "menu",
    "menuitem",
    "meta",
    "meter",
    "nav",
    "noscript",
    "object",
    "ol",
    "optgroup",
    "option",
    "output",
    "p",
    "param",
    "picture",
    "pre",
    "progress",
    "q",
    "rp",
    "rt",
    "ruby",
    "s",
    "samp",
    "script",
    "section",
    "select",
    "small",
    "source",
    "span",
    "strong",
    "style",
    "sub",
    "summary",
    "sup",
    "table",
    "tbody",
    "td",
    "textarea",
    "tfoot",
    "th",
    "thead",
    "time",
    "title",
    "tr",
    "track",
    "u",
    "ul",
    "var",
    "video",
    "wbr",
    "circle",
    "clipPath",
    "defs",
    "ellipse",
    "foreignObject",
    "g",
    "image",
    "line",
    "linearGradient",
    "mask",
    "path",
    "pattern",
    "polygon",
    "polyline",
    "radialGradient",
    "rect",
    "stop",
    "svg",
    "text",
    "tspan"
  ];
  globals_exports.assign({
    batchedUpdates: import_react_dom2.unstable_batchedUpdates,
    createStringInterpolator: createStringInterpolator2,
    colors: colors22
  });
  var host2 = createHost(primitives2, {
    applyAnimatedValues: applyAnimatedValues2,
    createAnimatedStyle: (style) => new AnimatedStyle2(style),
    getComponentProps: ({ scrollTop, scrollLeft, ...props }) => props
  });
  var animated2 = host2.animated;

  // node_modules/@nivo/core/dist/nivo-core.es.js
  var import_isString = __toESM(require_isString());
  var import_jsx_runtime2 = __toESM(require_jsx_runtime());
  var import_last = __toESM(require_last());
  var import_isArray = __toESM(require_isArray());

  // node_modules/internmap/src/index.js
  var InternMap = class extends Map {
    constructor(entries, key = keyof) {
      super();
      Object.defineProperties(this, { _intern: { value: /* @__PURE__ */ new Map() }, _key: { value: key } });
      if (entries != null)
        for (const [key2, value] of entries)
          this.set(key2, value);
    }
    get(key) {
      return super.get(intern_get(this, key));
    }
    has(key) {
      return super.has(intern_get(this, key));
    }
    set(key, value) {
      return super.set(intern_set(this, key), value);
    }
    delete(key) {
      return super.delete(intern_delete(this, key));
    }
  };
  function intern_get({ _intern, _key }, value) {
    const key = _key(value);
    return _intern.has(key) ? _intern.get(key) : value;
  }
  function intern_set({ _intern, _key }, value) {
    const key = _key(value);
    if (_intern.has(key))
      return _intern.get(key);
    _intern.set(key, value);
    return value;
  }
  function intern_delete({ _intern, _key }, value) {
    const key = _key(value);
    if (_intern.has(key)) {
      value = _intern.get(key);
      _intern.delete(key);
    }
    return value;
  }
  function keyof(value) {
    return value !== null && typeof value === "object" ? value.valueOf() : value;
  }

  // node_modules/@nivo/core/node_modules/d3-scale/src/init.js
  function initRange(domain, range) {
    switch (arguments.length) {
      case 0:
        break;
      case 1:
        this.range(domain);
        break;
      default:
        this.range(range).domain(domain);
        break;
    }
    return this;
  }

  // node_modules/@nivo/core/node_modules/d3-scale/src/ordinal.js
  var implicit = Symbol("implicit");
  function ordinal() {
    var index = new InternMap(), domain = [], range = [], unknown = implicit;
    function scale2(d2) {
      let i6 = index.get(d2);
      if (i6 === void 0) {
        if (unknown !== implicit)
          return unknown;
        index.set(d2, i6 = domain.push(d2) - 1);
      }
      return range[i6 % range.length];
    }
    scale2.domain = function(_2) {
      if (!arguments.length)
        return domain.slice();
      domain = [], index = new InternMap();
      for (const value of _2) {
        if (index.has(value))
          continue;
        index.set(value, domain.push(value) - 1);
      }
      return scale2;
    };
    scale2.range = function(_2) {
      return arguments.length ? (range = Array.from(_2), scale2) : range.slice();
    };
    scale2.unknown = function(_2) {
      return arguments.length ? (unknown = _2, scale2) : unknown;
    };
    scale2.copy = function() {
      return ordinal(domain, range).unknown(unknown);
    };
    initRange.apply(scale2, arguments);
    return scale2;
  }

  // node_modules/d3-format/src/formatDecimal.js
  function formatDecimal_default(x3) {
    return Math.abs(x3 = Math.round(x3)) >= 1e21 ? x3.toLocaleString("en").replace(/,/g, "") : x3.toString(10);
  }
  function formatDecimalParts(x3, p2) {
    if ((i6 = (x3 = p2 ? x3.toExponential(p2 - 1) : x3.toExponential()).indexOf("e")) < 0)
      return null;
    var i6, coefficient = x3.slice(0, i6);
    return [
      coefficient.length > 1 ? coefficient[0] + coefficient.slice(2) : coefficient,
      +x3.slice(i6 + 1)
    ];
  }

  // node_modules/d3-format/src/exponent.js
  function exponent_default(x3) {
    return x3 = formatDecimalParts(Math.abs(x3)), x3 ? x3[1] : NaN;
  }

  // node_modules/d3-format/src/formatGroup.js
  function formatGroup_default(grouping, thousands) {
    return function(value, width) {
      var i6 = value.length, t5 = [], j3 = 0, g2 = grouping[0], length = 0;
      while (i6 > 0 && g2 > 0) {
        if (length + g2 + 1 > width)
          g2 = Math.max(1, width - length);
        t5.push(value.substring(i6 -= g2, i6 + g2));
        if ((length += g2 + 1) > width)
          break;
        g2 = grouping[j3 = (j3 + 1) % grouping.length];
      }
      return t5.reverse().join(thousands);
    };
  }

  // node_modules/d3-format/src/formatNumerals.js
  function formatNumerals_default(numerals) {
    return function(value) {
      return value.replace(/[0-9]/g, function(i6) {
        return numerals[+i6];
      });
    };
  }

  // node_modules/d3-format/src/formatSpecifier.js
  var re = /^(?:(.)?([<>=^]))?([+\-( ])?([$#])?(0)?(\d+)?(,)?(\.\d+)?(~)?([a-z%])?$/i;
  function formatSpecifier(specifier) {
    if (!(match = re.exec(specifier)))
      throw new Error("invalid format: " + specifier);
    var match;
    return new FormatSpecifier({
      fill: match[1],
      align: match[2],
      sign: match[3],
      symbol: match[4],
      zero: match[5],
      width: match[6],
      comma: match[7],
      precision: match[8] && match[8].slice(1),
      trim: match[9],
      type: match[10]
    });
  }
  formatSpecifier.prototype = FormatSpecifier.prototype;
  function FormatSpecifier(specifier) {
    this.fill = specifier.fill === void 0 ? " " : specifier.fill + "";
    this.align = specifier.align === void 0 ? ">" : specifier.align + "";
    this.sign = specifier.sign === void 0 ? "-" : specifier.sign + "";
    this.symbol = specifier.symbol === void 0 ? "" : specifier.symbol + "";
    this.zero = !!specifier.zero;
    this.width = specifier.width === void 0 ? void 0 : +specifier.width;
    this.comma = !!specifier.comma;
    this.precision = specifier.precision === void 0 ? void 0 : +specifier.precision;
    this.trim = !!specifier.trim;
    this.type = specifier.type === void 0 ? "" : specifier.type + "";
  }
  FormatSpecifier.prototype.toString = function() {
    return this.fill + this.align + this.sign + this.symbol + (this.zero ? "0" : "") + (this.width === void 0 ? "" : Math.max(1, this.width | 0)) + (this.comma ? "," : "") + (this.precision === void 0 ? "" : "." + Math.max(0, this.precision | 0)) + (this.trim ? "~" : "") + this.type;
  };

  // node_modules/d3-format/src/formatTrim.js
  function formatTrim_default(s3) {
    out:
      for (var n6 = s3.length, i6 = 1, i0 = -1, i1; i6 < n6; ++i6) {
        switch (s3[i6]) {
          case ".":
            i0 = i1 = i6;
            break;
          case "0":
            if (i0 === 0)
              i0 = i6;
            i1 = i6;
            break;
          default:
            if (!+s3[i6])
              break out;
            if (i0 > 0)
              i0 = 0;
            break;
        }
      }
    return i0 > 0 ? s3.slice(0, i0) + s3.slice(i1 + 1) : s3;
  }

  // node_modules/d3-format/src/formatPrefixAuto.js
  var prefixExponent;
  function formatPrefixAuto_default(x3, p2) {
    var d2 = formatDecimalParts(x3, p2);
    if (!d2)
      return x3 + "";
    var coefficient = d2[0], exponent = d2[1], i6 = exponent - (prefixExponent = Math.max(-8, Math.min(8, Math.floor(exponent / 3))) * 3) + 1, n6 = coefficient.length;
    return i6 === n6 ? coefficient : i6 > n6 ? coefficient + new Array(i6 - n6 + 1).join("0") : i6 > 0 ? coefficient.slice(0, i6) + "." + coefficient.slice(i6) : "0." + new Array(1 - i6).join("0") + formatDecimalParts(x3, Math.max(0, p2 + i6 - 1))[0];
  }

  // node_modules/d3-format/src/formatRounded.js
  function formatRounded_default(x3, p2) {
    var d2 = formatDecimalParts(x3, p2);
    if (!d2)
      return x3 + "";
    var coefficient = d2[0], exponent = d2[1];
    return exponent < 0 ? "0." + new Array(-exponent).join("0") + coefficient : coefficient.length > exponent + 1 ? coefficient.slice(0, exponent + 1) + "." + coefficient.slice(exponent + 1) : coefficient + new Array(exponent - coefficient.length + 2).join("0");
  }

  // node_modules/d3-format/src/formatTypes.js
  var formatTypes_default = {
    "%": function(x3, p2) {
      return (x3 * 100).toFixed(p2);
    },
    "b": function(x3) {
      return Math.round(x3).toString(2);
    },
    "c": function(x3) {
      return x3 + "";
    },
    "d": formatDecimal_default,
    "e": function(x3, p2) {
      return x3.toExponential(p2);
    },
    "f": function(x3, p2) {
      return x3.toFixed(p2);
    },
    "g": function(x3, p2) {
      return x3.toPrecision(p2);
    },
    "o": function(x3) {
      return Math.round(x3).toString(8);
    },
    "p": function(x3, p2) {
      return formatRounded_default(x3 * 100, p2);
    },
    "r": formatRounded_default,
    "s": formatPrefixAuto_default,
    "X": function(x3) {
      return Math.round(x3).toString(16).toUpperCase();
    },
    "x": function(x3) {
      return Math.round(x3).toString(16);
    }
  };

  // node_modules/d3-format/src/identity.js
  function identity_default(x3) {
    return x3;
  }

  // node_modules/d3-format/src/locale.js
  var map2 = Array.prototype.map;
  var prefixes3 = ["y", "z", "a", "f", "p", "n", "\xB5", "m", "", "k", "M", "G", "T", "P", "E", "Z", "Y"];
  function locale_default(locale3) {
    var group = locale3.grouping === void 0 || locale3.thousands === void 0 ? identity_default : formatGroup_default(map2.call(locale3.grouping, Number), locale3.thousands + ""), currencyPrefix = locale3.currency === void 0 ? "" : locale3.currency[0] + "", currencySuffix = locale3.currency === void 0 ? "" : locale3.currency[1] + "", decimal = locale3.decimal === void 0 ? "." : locale3.decimal + "", numerals = locale3.numerals === void 0 ? identity_default : formatNumerals_default(map2.call(locale3.numerals, String)), percent = locale3.percent === void 0 ? "%" : locale3.percent + "", minus = locale3.minus === void 0 ? "-" : locale3.minus + "", nan = locale3.nan === void 0 ? "NaN" : locale3.nan + "";
    function newFormat(specifier) {
      specifier = formatSpecifier(specifier);
      var fill = specifier.fill, align = specifier.align, sign3 = specifier.sign, symbol = specifier.symbol, zero3 = specifier.zero, width = specifier.width, comma = specifier.comma, precision = specifier.precision, trim = specifier.trim, type = specifier.type;
      if (type === "n")
        comma = true, type = "g";
      else if (!formatTypes_default[type])
        precision === void 0 && (precision = 12), trim = true, type = "g";
      if (zero3 || fill === "0" && align === "=")
        zero3 = true, fill = "0", align = "=";
      var prefix2 = symbol === "$" ? currencyPrefix : symbol === "#" && /[boxX]/.test(type) ? "0" + type.toLowerCase() : "", suffix = symbol === "$" ? currencySuffix : /[%p]/.test(type) ? percent : "";
      var formatType = formatTypes_default[type], maybeSuffix = /[defgprs%]/.test(type);
      precision = precision === void 0 ? 6 : /[gprs]/.test(type) ? Math.max(1, Math.min(21, precision)) : Math.max(0, Math.min(20, precision));
      function format2(value) {
        var valuePrefix = prefix2, valueSuffix = suffix, i6, n6, c8;
        if (type === "c") {
          valueSuffix = formatType(value) + valueSuffix;
          value = "";
        } else {
          value = +value;
          var valueNegative = value < 0 || 1 / value < 0;
          value = isNaN(value) ? nan : formatType(Math.abs(value), precision);
          if (trim)
            value = formatTrim_default(value);
          if (valueNegative && +value === 0 && sign3 !== "+")
            valueNegative = false;
          valuePrefix = (valueNegative ? sign3 === "(" ? sign3 : minus : sign3 === "-" || sign3 === "(" ? "" : sign3) + valuePrefix;
          valueSuffix = (type === "s" ? prefixes3[8 + prefixExponent / 3] : "") + valueSuffix + (valueNegative && sign3 === "(" ? ")" : "");
          if (maybeSuffix) {
            i6 = -1, n6 = value.length;
            while (++i6 < n6) {
              if (c8 = value.charCodeAt(i6), 48 > c8 || c8 > 57) {
                valueSuffix = (c8 === 46 ? decimal + value.slice(i6 + 1) : value.slice(i6)) + valueSuffix;
                value = value.slice(0, i6);
                break;
              }
            }
          }
        }
        if (comma && !zero3)
          value = group(value, Infinity);
        var length = valuePrefix.length + value.length + valueSuffix.length, padding = length < width ? new Array(width - length + 1).join(fill) : "";
        if (comma && zero3)
          value = group(padding + value, padding.length ? width - valueSuffix.length : Infinity), padding = "";
        switch (align) {
          case "<":
            value = valuePrefix + value + valueSuffix + padding;
            break;
          case "=":
            value = valuePrefix + padding + value + valueSuffix;
            break;
          case "^":
            value = padding.slice(0, length = padding.length >> 1) + valuePrefix + value + valueSuffix + padding.slice(length);
            break;
          default:
            value = padding + valuePrefix + value + valueSuffix;
            break;
        }
        return numerals(value);
      }
      format2.toString = function() {
        return specifier + "";
      };
      return format2;
    }
    function formatPrefix2(specifier, value) {
      var f2 = newFormat((specifier = formatSpecifier(specifier), specifier.type = "f", specifier)), e7 = Math.max(-8, Math.min(8, Math.floor(exponent_default(value) / 3))) * 3, k2 = Math.pow(10, -e7), prefix2 = prefixes3[8 + e7 / 3];
      return function(value2) {
        return f2(k2 * value2) + prefix2;
      };
    }
    return {
      format: newFormat,
      formatPrefix: formatPrefix2
    };
  }

  // node_modules/d3-format/src/defaultLocale.js
  var locale;
  var format;
  var formatPrefix;
  defaultLocale({
    decimal: ".",
    thousands: ",",
    grouping: [3],
    currency: ["$", ""],
    minus: "-"
  });
  function defaultLocale(definition) {
    locale = locale_default(definition);
    format = locale.format;
    formatPrefix = locale.formatPrefix;
    return locale;
  }

  // node_modules/d3-format/src/precisionFixed.js
  function precisionFixed_default(step) {
    return Math.max(0, -exponent_default(Math.abs(step)));
  }

  // node_modules/d3-format/src/precisionPrefix.js
  function precisionPrefix_default(step, value) {
    return Math.max(0, Math.max(-8, Math.min(8, Math.floor(exponent_default(value) / 3))) * 3 - exponent_default(Math.abs(step)));
  }

  // node_modules/d3-format/src/precisionRound.js
  function precisionRound_default(step, max) {
    step = Math.abs(step), max = Math.abs(max) - step;
    return Math.max(0, exponent_default(max) - exponent_default(step)) + 1;
  }

  // node_modules/d3-time/src/interval.js
  var t0 = new Date();
  var t1 = new Date();
  function newInterval(floori, offseti, count2, field) {
    function interval(date) {
      return floori(date = arguments.length === 0 ? new Date() : new Date(+date)), date;
    }
    interval.floor = function(date) {
      return floori(date = new Date(+date)), date;
    };
    interval.ceil = function(date) {
      return floori(date = new Date(date - 1)), offseti(date, 1), floori(date), date;
    };
    interval.round = function(date) {
      var d0 = interval(date), d1 = interval.ceil(date);
      return date - d0 < d1 - date ? d0 : d1;
    };
    interval.offset = function(date, step) {
      return offseti(date = new Date(+date), step == null ? 1 : Math.floor(step)), date;
    };
    interval.range = function(start2, stop2, step) {
      var range = [], previous;
      start2 = interval.ceil(start2);
      step = step == null ? 1 : Math.floor(step);
      if (!(start2 < stop2) || !(step > 0))
        return range;
      do
        range.push(previous = new Date(+start2)), offseti(start2, step), floori(start2);
      while (previous < start2 && start2 < stop2);
      return range;
    };
    interval.filter = function(test) {
      return newInterval(function(date) {
        if (date >= date)
          while (floori(date), !test(date))
            date.setTime(date - 1);
      }, function(date, step) {
        if (date >= date) {
          if (step < 0)
            while (++step <= 0) {
              while (offseti(date, -1), !test(date)) {
              }
            }
          else
            while (--step >= 0) {
              while (offseti(date, 1), !test(date)) {
              }
            }
        }
      });
    };
    if (count2) {
      interval.count = function(start2, end) {
        t0.setTime(+start2), t1.setTime(+end);
        floori(t0), floori(t1);
        return Math.floor(count2(t0, t1));
      };
      interval.every = function(step) {
        step = Math.floor(step);
        return !isFinite(step) || !(step > 0) ? null : !(step > 1) ? interval : interval.filter(field ? function(d2) {
          return field(d2) % step === 0;
        } : function(d2) {
          return interval.count(0, d2) % step === 0;
        });
      };
    }
    return interval;
  }

  // node_modules/d3-time/src/duration.js
  var durationMinute = 6e4;
  var durationDay = 864e5;
  var durationWeek = 6048e5;

  // node_modules/d3-time/src/day.js
  var day = newInterval(function(date) {
    date.setHours(0, 0, 0, 0);
  }, function(date, step) {
    date.setDate(date.getDate() + step);
  }, function(start2, end) {
    return (end - start2 - (end.getTimezoneOffset() - start2.getTimezoneOffset()) * durationMinute) / durationDay;
  }, function(date) {
    return date.getDate() - 1;
  });
  var day_default = day;
  var days = day.range;

  // node_modules/d3-time/src/week.js
  function weekday(i6) {
    return newInterval(function(date) {
      date.setDate(date.getDate() - (date.getDay() + 7 - i6) % 7);
      date.setHours(0, 0, 0, 0);
    }, function(date, step) {
      date.setDate(date.getDate() + step * 7);
    }, function(start2, end) {
      return (end - start2 - (end.getTimezoneOffset() - start2.getTimezoneOffset()) * durationMinute) / durationWeek;
    });
  }
  var sunday = weekday(0);
  var monday = weekday(1);
  var tuesday = weekday(2);
  var wednesday = weekday(3);
  var thursday = weekday(4);
  var friday = weekday(5);
  var saturday = weekday(6);
  var sundays = sunday.range;
  var mondays = monday.range;
  var tuesdays = tuesday.range;
  var wednesdays = wednesday.range;
  var thursdays = thursday.range;
  var fridays = friday.range;
  var saturdays = saturday.range;

  // node_modules/d3-time/src/year.js
  var year = newInterval(function(date) {
    date.setMonth(0, 1);
    date.setHours(0, 0, 0, 0);
  }, function(date, step) {
    date.setFullYear(date.getFullYear() + step);
  }, function(start2, end) {
    return end.getFullYear() - start2.getFullYear();
  }, function(date) {
    return date.getFullYear();
  });
  year.every = function(k2) {
    return !isFinite(k2 = Math.floor(k2)) || !(k2 > 0) ? null : newInterval(function(date) {
      date.setFullYear(Math.floor(date.getFullYear() / k2) * k2);
      date.setMonth(0, 1);
      date.setHours(0, 0, 0, 0);
    }, function(date, step) {
      date.setFullYear(date.getFullYear() + step * k2);
    });
  };
  var year_default = year;
  var years = year.range;

  // node_modules/d3-time/src/utcDay.js
  var utcDay = newInterval(function(date) {
    date.setUTCHours(0, 0, 0, 0);
  }, function(date, step) {
    date.setUTCDate(date.getUTCDate() + step);
  }, function(start2, end) {
    return (end - start2) / durationDay;
  }, function(date) {
    return date.getUTCDate() - 1;
  });
  var utcDay_default = utcDay;
  var utcDays = utcDay.range;

  // node_modules/d3-time/src/utcWeek.js
  function utcWeekday(i6) {
    return newInterval(function(date) {
      date.setUTCDate(date.getUTCDate() - (date.getUTCDay() + 7 - i6) % 7);
      date.setUTCHours(0, 0, 0, 0);
    }, function(date, step) {
      date.setUTCDate(date.getUTCDate() + step * 7);
    }, function(start2, end) {
      return (end - start2) / durationWeek;
    });
  }
  var utcSunday = utcWeekday(0);
  var utcMonday = utcWeekday(1);
  var utcTuesday = utcWeekday(2);
  var utcWednesday = utcWeekday(3);
  var utcThursday = utcWeekday(4);
  var utcFriday = utcWeekday(5);
  var utcSaturday = utcWeekday(6);
  var utcSundays = utcSunday.range;
  var utcMondays = utcMonday.range;
  var utcTuesdays = utcTuesday.range;
  var utcWednesdays = utcWednesday.range;
  var utcThursdays = utcThursday.range;
  var utcFridays = utcFriday.range;
  var utcSaturdays = utcSaturday.range;

  // node_modules/d3-time/src/utcYear.js
  var utcYear = newInterval(function(date) {
    date.setUTCMonth(0, 1);
    date.setUTCHours(0, 0, 0, 0);
  }, function(date, step) {
    date.setUTCFullYear(date.getUTCFullYear() + step);
  }, function(start2, end) {
    return end.getUTCFullYear() - start2.getUTCFullYear();
  }, function(date) {
    return date.getUTCFullYear();
  });
  utcYear.every = function(k2) {
    return !isFinite(k2 = Math.floor(k2)) || !(k2 > 0) ? null : newInterval(function(date) {
      date.setUTCFullYear(Math.floor(date.getUTCFullYear() / k2) * k2);
      date.setUTCMonth(0, 1);
      date.setUTCHours(0, 0, 0, 0);
    }, function(date, step) {
      date.setUTCFullYear(date.getUTCFullYear() + step * k2);
    });
  };
  var utcYear_default = utcYear;
  var utcYears = utcYear.range;

  // node_modules/@nivo/core/node_modules/d3-time-format/src/locale.js
  function localDate(d2) {
    if (0 <= d2.y && d2.y < 100) {
      var date = new Date(-1, d2.m, d2.d, d2.H, d2.M, d2.S, d2.L);
      date.setFullYear(d2.y);
      return date;
    }
    return new Date(d2.y, d2.m, d2.d, d2.H, d2.M, d2.S, d2.L);
  }
  function utcDate(d2) {
    if (0 <= d2.y && d2.y < 100) {
      var date = new Date(Date.UTC(-1, d2.m, d2.d, d2.H, d2.M, d2.S, d2.L));
      date.setUTCFullYear(d2.y);
      return date;
    }
    return new Date(Date.UTC(d2.y, d2.m, d2.d, d2.H, d2.M, d2.S, d2.L));
  }
  function newDate(y4, m4, d2) {
    return { y: y4, m: m4, d: d2, H: 0, M: 0, S: 0, L: 0 };
  }
  function formatLocale(locale3) {
    var locale_dateTime = locale3.dateTime, locale_date = locale3.date, locale_time = locale3.time, locale_periods = locale3.periods, locale_weekdays = locale3.days, locale_shortWeekdays = locale3.shortDays, locale_months = locale3.months, locale_shortMonths = locale3.shortMonths;
    var periodRe = formatRe(locale_periods), periodLookup = formatLookup(locale_periods), weekdayRe = formatRe(locale_weekdays), weekdayLookup = formatLookup(locale_weekdays), shortWeekdayRe = formatRe(locale_shortWeekdays), shortWeekdayLookup = formatLookup(locale_shortWeekdays), monthRe = formatRe(locale_months), monthLookup = formatLookup(locale_months), shortMonthRe = formatRe(locale_shortMonths), shortMonthLookup = formatLookup(locale_shortMonths);
    var formats = {
      "a": formatShortWeekday,
      "A": formatWeekday,
      "b": formatShortMonth,
      "B": formatMonth,
      "c": null,
      "d": formatDayOfMonth,
      "e": formatDayOfMonth,
      "f": formatMicroseconds,
      "g": formatYearISO,
      "G": formatFullYearISO,
      "H": formatHour24,
      "I": formatHour12,
      "j": formatDayOfYear,
      "L": formatMilliseconds,
      "m": formatMonthNumber,
      "M": formatMinutes,
      "p": formatPeriod,
      "q": formatQuarter,
      "Q": formatUnixTimestamp,
      "s": formatUnixTimestampSeconds,
      "S": formatSeconds,
      "u": formatWeekdayNumberMonday,
      "U": formatWeekNumberSunday,
      "V": formatWeekNumberISO,
      "w": formatWeekdayNumberSunday,
      "W": formatWeekNumberMonday,
      "x": null,
      "X": null,
      "y": formatYear,
      "Y": formatFullYear,
      "Z": formatZone,
      "%": formatLiteralPercent
    };
    var utcFormats = {
      "a": formatUTCShortWeekday,
      "A": formatUTCWeekday,
      "b": formatUTCShortMonth,
      "B": formatUTCMonth,
      "c": null,
      "d": formatUTCDayOfMonth,
      "e": formatUTCDayOfMonth,
      "f": formatUTCMicroseconds,
      "g": formatUTCYearISO,
      "G": formatUTCFullYearISO,
      "H": formatUTCHour24,
      "I": formatUTCHour12,
      "j": formatUTCDayOfYear,
      "L": formatUTCMilliseconds,
      "m": formatUTCMonthNumber,
      "M": formatUTCMinutes,
      "p": formatUTCPeriod,
      "q": formatUTCQuarter,
      "Q": formatUnixTimestamp,
      "s": formatUnixTimestampSeconds,
      "S": formatUTCSeconds,
      "u": formatUTCWeekdayNumberMonday,
      "U": formatUTCWeekNumberSunday,
      "V": formatUTCWeekNumberISO,
      "w": formatUTCWeekdayNumberSunday,
      "W": formatUTCWeekNumberMonday,
      "x": null,
      "X": null,
      "y": formatUTCYear,
      "Y": formatUTCFullYear,
      "Z": formatUTCZone,
      "%": formatLiteralPercent
    };
    var parses = {
      "a": parseShortWeekday,
      "A": parseWeekday,
      "b": parseShortMonth,
      "B": parseMonth,
      "c": parseLocaleDateTime,
      "d": parseDayOfMonth,
      "e": parseDayOfMonth,
      "f": parseMicroseconds,
      "g": parseYear,
      "G": parseFullYear,
      "H": parseHour24,
      "I": parseHour24,
      "j": parseDayOfYear,
      "L": parseMilliseconds,
      "m": parseMonthNumber,
      "M": parseMinutes,
      "p": parsePeriod,
      "q": parseQuarter,
      "Q": parseUnixTimestamp,
      "s": parseUnixTimestampSeconds,
      "S": parseSeconds,
      "u": parseWeekdayNumberMonday,
      "U": parseWeekNumberSunday,
      "V": parseWeekNumberISO,
      "w": parseWeekdayNumberSunday,
      "W": parseWeekNumberMonday,
      "x": parseLocaleDate,
      "X": parseLocaleTime,
      "y": parseYear,
      "Y": parseFullYear,
      "Z": parseZone,
      "%": parseLiteralPercent
    };
    formats.x = newFormat(locale_date, formats);
    formats.X = newFormat(locale_time, formats);
    formats.c = newFormat(locale_dateTime, formats);
    utcFormats.x = newFormat(locale_date, utcFormats);
    utcFormats.X = newFormat(locale_time, utcFormats);
    utcFormats.c = newFormat(locale_dateTime, utcFormats);
    function newFormat(specifier, formats2) {
      return function(date) {
        var string = [], i6 = -1, j3 = 0, n6 = specifier.length, c8, pad2, format2;
        if (!(date instanceof Date))
          date = new Date(+date);
        while (++i6 < n6) {
          if (specifier.charCodeAt(i6) === 37) {
            string.push(specifier.slice(j3, i6));
            if ((pad2 = pads[c8 = specifier.charAt(++i6)]) != null)
              c8 = specifier.charAt(++i6);
            else
              pad2 = c8 === "e" ? " " : "0";
            if (format2 = formats2[c8])
              c8 = format2(date, pad2);
            string.push(c8);
            j3 = i6 + 1;
          }
        }
        string.push(specifier.slice(j3, i6));
        return string.join("");
      };
    }
    function newParse(specifier, Z2) {
      return function(string) {
        var d2 = newDate(1900, void 0, 1), i6 = parseSpecifier(d2, specifier, string += "", 0), week, day2;
        if (i6 != string.length)
          return null;
        if ("Q" in d2)
          return new Date(d2.Q);
        if ("s" in d2)
          return new Date(d2.s * 1e3 + ("L" in d2 ? d2.L : 0));
        if (Z2 && !("Z" in d2))
          d2.Z = 0;
        if ("p" in d2)
          d2.H = d2.H % 12 + d2.p * 12;
        if (d2.m === void 0)
          d2.m = "q" in d2 ? d2.q : 0;
        if ("V" in d2) {
          if (d2.V < 1 || d2.V > 53)
            return null;
          if (!("w" in d2))
            d2.w = 1;
          if ("Z" in d2) {
            week = utcDate(newDate(d2.y, 0, 1)), day2 = week.getUTCDay();
            week = day2 > 4 || day2 === 0 ? utcMonday.ceil(week) : utcMonday(week);
            week = utcDay_default.offset(week, (d2.V - 1) * 7);
            d2.y = week.getUTCFullYear();
            d2.m = week.getUTCMonth();
            d2.d = week.getUTCDate() + (d2.w + 6) % 7;
          } else {
            week = localDate(newDate(d2.y, 0, 1)), day2 = week.getDay();
            week = day2 > 4 || day2 === 0 ? monday.ceil(week) : monday(week);
            week = day_default.offset(week, (d2.V - 1) * 7);
            d2.y = week.getFullYear();
            d2.m = week.getMonth();
            d2.d = week.getDate() + (d2.w + 6) % 7;
          }
        } else if ("W" in d2 || "U" in d2) {
          if (!("w" in d2))
            d2.w = "u" in d2 ? d2.u % 7 : "W" in d2 ? 1 : 0;
          day2 = "Z" in d2 ? utcDate(newDate(d2.y, 0, 1)).getUTCDay() : localDate(newDate(d2.y, 0, 1)).getDay();
          d2.m = 0;
          d2.d = "W" in d2 ? (d2.w + 6) % 7 + d2.W * 7 - (day2 + 5) % 7 : d2.w + d2.U * 7 - (day2 + 6) % 7;
        }
        if ("Z" in d2) {
          d2.H += d2.Z / 100 | 0;
          d2.M += d2.Z % 100;
          return utcDate(d2);
        }
        return localDate(d2);
      };
    }
    function parseSpecifier(d2, specifier, string, j3) {
      var i6 = 0, n6 = specifier.length, m4 = string.length, c8, parse2;
      while (i6 < n6) {
        if (j3 >= m4)
          return -1;
        c8 = specifier.charCodeAt(i6++);
        if (c8 === 37) {
          c8 = specifier.charAt(i6++);
          parse2 = parses[c8 in pads ? specifier.charAt(i6++) : c8];
          if (!parse2 || (j3 = parse2(d2, string, j3)) < 0)
            return -1;
        } else if (c8 != string.charCodeAt(j3++)) {
          return -1;
        }
      }
      return j3;
    }
    function parsePeriod(d2, string, i6) {
      var n6 = periodRe.exec(string.slice(i6));
      return n6 ? (d2.p = periodLookup.get(n6[0].toLowerCase()), i6 + n6[0].length) : -1;
    }
    function parseShortWeekday(d2, string, i6) {
      var n6 = shortWeekdayRe.exec(string.slice(i6));
      return n6 ? (d2.w = shortWeekdayLookup.get(n6[0].toLowerCase()), i6 + n6[0].length) : -1;
    }
    function parseWeekday(d2, string, i6) {
      var n6 = weekdayRe.exec(string.slice(i6));
      return n6 ? (d2.w = weekdayLookup.get(n6[0].toLowerCase()), i6 + n6[0].length) : -1;
    }
    function parseShortMonth(d2, string, i6) {
      var n6 = shortMonthRe.exec(string.slice(i6));
      return n6 ? (d2.m = shortMonthLookup.get(n6[0].toLowerCase()), i6 + n6[0].length) : -1;
    }
    function parseMonth(d2, string, i6) {
      var n6 = monthRe.exec(string.slice(i6));
      return n6 ? (d2.m = monthLookup.get(n6[0].toLowerCase()), i6 + n6[0].length) : -1;
    }
    function parseLocaleDateTime(d2, string, i6) {
      return parseSpecifier(d2, locale_dateTime, string, i6);
    }
    function parseLocaleDate(d2, string, i6) {
      return parseSpecifier(d2, locale_date, string, i6);
    }
    function parseLocaleTime(d2, string, i6) {
      return parseSpecifier(d2, locale_time, string, i6);
    }
    function formatShortWeekday(d2) {
      return locale_shortWeekdays[d2.getDay()];
    }
    function formatWeekday(d2) {
      return locale_weekdays[d2.getDay()];
    }
    function formatShortMonth(d2) {
      return locale_shortMonths[d2.getMonth()];
    }
    function formatMonth(d2) {
      return locale_months[d2.getMonth()];
    }
    function formatPeriod(d2) {
      return locale_periods[+(d2.getHours() >= 12)];
    }
    function formatQuarter(d2) {
      return 1 + ~~(d2.getMonth() / 3);
    }
    function formatUTCShortWeekday(d2) {
      return locale_shortWeekdays[d2.getUTCDay()];
    }
    function formatUTCWeekday(d2) {
      return locale_weekdays[d2.getUTCDay()];
    }
    function formatUTCShortMonth(d2) {
      return locale_shortMonths[d2.getUTCMonth()];
    }
    function formatUTCMonth(d2) {
      return locale_months[d2.getUTCMonth()];
    }
    function formatUTCPeriod(d2) {
      return locale_periods[+(d2.getUTCHours() >= 12)];
    }
    function formatUTCQuarter(d2) {
      return 1 + ~~(d2.getUTCMonth() / 3);
    }
    return {
      format: function(specifier) {
        var f2 = newFormat(specifier += "", formats);
        f2.toString = function() {
          return specifier;
        };
        return f2;
      },
      parse: function(specifier) {
        var p2 = newParse(specifier += "", false);
        p2.toString = function() {
          return specifier;
        };
        return p2;
      },
      utcFormat: function(specifier) {
        var f2 = newFormat(specifier += "", utcFormats);
        f2.toString = function() {
          return specifier;
        };
        return f2;
      },
      utcParse: function(specifier) {
        var p2 = newParse(specifier += "", true);
        p2.toString = function() {
          return specifier;
        };
        return p2;
      }
    };
  }
  var pads = { "-": "", "_": " ", "0": "0" };
  var numberRe = /^\s*\d+/;
  var percentRe = /^%/;
  var requoteRe = /[\\^$*+?|[\]().{}]/g;
  function pad(value, fill, width) {
    var sign3 = value < 0 ? "-" : "", string = (sign3 ? -value : value) + "", length = string.length;
    return sign3 + (length < width ? new Array(width - length + 1).join(fill) + string : string);
  }
  function requote(s3) {
    return s3.replace(requoteRe, "\\$&");
  }
  function formatRe(names2) {
    return new RegExp("^(?:" + names2.map(requote).join("|") + ")", "i");
  }
  function formatLookup(names2) {
    return new Map(names2.map((name, i6) => [name.toLowerCase(), i6]));
  }
  function parseWeekdayNumberSunday(d2, string, i6) {
    var n6 = numberRe.exec(string.slice(i6, i6 + 1));
    return n6 ? (d2.w = +n6[0], i6 + n6[0].length) : -1;
  }
  function parseWeekdayNumberMonday(d2, string, i6) {
    var n6 = numberRe.exec(string.slice(i6, i6 + 1));
    return n6 ? (d2.u = +n6[0], i6 + n6[0].length) : -1;
  }
  function parseWeekNumberSunday(d2, string, i6) {
    var n6 = numberRe.exec(string.slice(i6, i6 + 2));
    return n6 ? (d2.U = +n6[0], i6 + n6[0].length) : -1;
  }
  function parseWeekNumberISO(d2, string, i6) {
    var n6 = numberRe.exec(string.slice(i6, i6 + 2));
    return n6 ? (d2.V = +n6[0], i6 + n6[0].length) : -1;
  }
  function parseWeekNumberMonday(d2, string, i6) {
    var n6 = numberRe.exec(string.slice(i6, i6 + 2));
    return n6 ? (d2.W = +n6[0], i6 + n6[0].length) : -1;
  }
  function parseFullYear(d2, string, i6) {
    var n6 = numberRe.exec(string.slice(i6, i6 + 4));
    return n6 ? (d2.y = +n6[0], i6 + n6[0].length) : -1;
  }
  function parseYear(d2, string, i6) {
    var n6 = numberRe.exec(string.slice(i6, i6 + 2));
    return n6 ? (d2.y = +n6[0] + (+n6[0] > 68 ? 1900 : 2e3), i6 + n6[0].length) : -1;
  }
  function parseZone(d2, string, i6) {
    var n6 = /^(Z)|([+-]\d\d)(?::?(\d\d))?/.exec(string.slice(i6, i6 + 6));
    return n6 ? (d2.Z = n6[1] ? 0 : -(n6[2] + (n6[3] || "00")), i6 + n6[0].length) : -1;
  }
  function parseQuarter(d2, string, i6) {
    var n6 = numberRe.exec(string.slice(i6, i6 + 1));
    return n6 ? (d2.q = n6[0] * 3 - 3, i6 + n6[0].length) : -1;
  }
  function parseMonthNumber(d2, string, i6) {
    var n6 = numberRe.exec(string.slice(i6, i6 + 2));
    return n6 ? (d2.m = n6[0] - 1, i6 + n6[0].length) : -1;
  }
  function parseDayOfMonth(d2, string, i6) {
    var n6 = numberRe.exec(string.slice(i6, i6 + 2));
    return n6 ? (d2.d = +n6[0], i6 + n6[0].length) : -1;
  }
  function parseDayOfYear(d2, string, i6) {
    var n6 = numberRe.exec(string.slice(i6, i6 + 3));
    return n6 ? (d2.m = 0, d2.d = +n6[0], i6 + n6[0].length) : -1;
  }
  function parseHour24(d2, string, i6) {
    var n6 = numberRe.exec(string.slice(i6, i6 + 2));
    return n6 ? (d2.H = +n6[0], i6 + n6[0].length) : -1;
  }
  function parseMinutes(d2, string, i6) {
    var n6 = numberRe.exec(string.slice(i6, i6 + 2));
    return n6 ? (d2.M = +n6[0], i6 + n6[0].length) : -1;
  }
  function parseSeconds(d2, string, i6) {
    var n6 = numberRe.exec(string.slice(i6, i6 + 2));
    return n6 ? (d2.S = +n6[0], i6 + n6[0].length) : -1;
  }
  function parseMilliseconds(d2, string, i6) {
    var n6 = numberRe.exec(string.slice(i6, i6 + 3));
    return n6 ? (d2.L = +n6[0], i6 + n6[0].length) : -1;
  }
  function parseMicroseconds(d2, string, i6) {
    var n6 = numberRe.exec(string.slice(i6, i6 + 6));
    return n6 ? (d2.L = Math.floor(n6[0] / 1e3), i6 + n6[0].length) : -1;
  }
  function parseLiteralPercent(d2, string, i6) {
    var n6 = percentRe.exec(string.slice(i6, i6 + 1));
    return n6 ? i6 + n6[0].length : -1;
  }
  function parseUnixTimestamp(d2, string, i6) {
    var n6 = numberRe.exec(string.slice(i6));
    return n6 ? (d2.Q = +n6[0], i6 + n6[0].length) : -1;
  }
  function parseUnixTimestampSeconds(d2, string, i6) {
    var n6 = numberRe.exec(string.slice(i6));
    return n6 ? (d2.s = +n6[0], i6 + n6[0].length) : -1;
  }
  function formatDayOfMonth(d2, p2) {
    return pad(d2.getDate(), p2, 2);
  }
  function formatHour24(d2, p2) {
    return pad(d2.getHours(), p2, 2);
  }
  function formatHour12(d2, p2) {
    return pad(d2.getHours() % 12 || 12, p2, 2);
  }
  function formatDayOfYear(d2, p2) {
    return pad(1 + day_default.count(year_default(d2), d2), p2, 3);
  }
  function formatMilliseconds(d2, p2) {
    return pad(d2.getMilliseconds(), p2, 3);
  }
  function formatMicroseconds(d2, p2) {
    return formatMilliseconds(d2, p2) + "000";
  }
  function formatMonthNumber(d2, p2) {
    return pad(d2.getMonth() + 1, p2, 2);
  }
  function formatMinutes(d2, p2) {
    return pad(d2.getMinutes(), p2, 2);
  }
  function formatSeconds(d2, p2) {
    return pad(d2.getSeconds(), p2, 2);
  }
  function formatWeekdayNumberMonday(d2) {
    var day2 = d2.getDay();
    return day2 === 0 ? 7 : day2;
  }
  function formatWeekNumberSunday(d2, p2) {
    return pad(sunday.count(year_default(d2) - 1, d2), p2, 2);
  }
  function dISO(d2) {
    var day2 = d2.getDay();
    return day2 >= 4 || day2 === 0 ? thursday(d2) : thursday.ceil(d2);
  }
  function formatWeekNumberISO(d2, p2) {
    d2 = dISO(d2);
    return pad(thursday.count(year_default(d2), d2) + (year_default(d2).getDay() === 4), p2, 2);
  }
  function formatWeekdayNumberSunday(d2) {
    return d2.getDay();
  }
  function formatWeekNumberMonday(d2, p2) {
    return pad(monday.count(year_default(d2) - 1, d2), p2, 2);
  }
  function formatYear(d2, p2) {
    return pad(d2.getFullYear() % 100, p2, 2);
  }
  function formatYearISO(d2, p2) {
    d2 = dISO(d2);
    return pad(d2.getFullYear() % 100, p2, 2);
  }
  function formatFullYear(d2, p2) {
    return pad(d2.getFullYear() % 1e4, p2, 4);
  }
  function formatFullYearISO(d2, p2) {
    var day2 = d2.getDay();
    d2 = day2 >= 4 || day2 === 0 ? thursday(d2) : thursday.ceil(d2);
    return pad(d2.getFullYear() % 1e4, p2, 4);
  }
  function formatZone(d2) {
    var z3 = d2.getTimezoneOffset();
    return (z3 > 0 ? "-" : (z3 *= -1, "+")) + pad(z3 / 60 | 0, "0", 2) + pad(z3 % 60, "0", 2);
  }
  function formatUTCDayOfMonth(d2, p2) {
    return pad(d2.getUTCDate(), p2, 2);
  }
  function formatUTCHour24(d2, p2) {
    return pad(d2.getUTCHours(), p2, 2);
  }
  function formatUTCHour12(d2, p2) {
    return pad(d2.getUTCHours() % 12 || 12, p2, 2);
  }
  function formatUTCDayOfYear(d2, p2) {
    return pad(1 + utcDay_default.count(utcYear_default(d2), d2), p2, 3);
  }
  function formatUTCMilliseconds(d2, p2) {
    return pad(d2.getUTCMilliseconds(), p2, 3);
  }
  function formatUTCMicroseconds(d2, p2) {
    return formatUTCMilliseconds(d2, p2) + "000";
  }
  function formatUTCMonthNumber(d2, p2) {
    return pad(d2.getUTCMonth() + 1, p2, 2);
  }
  function formatUTCMinutes(d2, p2) {
    return pad(d2.getUTCMinutes(), p2, 2);
  }
  function formatUTCSeconds(d2, p2) {
    return pad(d2.getUTCSeconds(), p2, 2);
  }
  function formatUTCWeekdayNumberMonday(d2) {
    var dow = d2.getUTCDay();
    return dow === 0 ? 7 : dow;
  }
  function formatUTCWeekNumberSunday(d2, p2) {
    return pad(utcSunday.count(utcYear_default(d2) - 1, d2), p2, 2);
  }
  function UTCdISO(d2) {
    var day2 = d2.getUTCDay();
    return day2 >= 4 || day2 === 0 ? utcThursday(d2) : utcThursday.ceil(d2);
  }
  function formatUTCWeekNumberISO(d2, p2) {
    d2 = UTCdISO(d2);
    return pad(utcThursday.count(utcYear_default(d2), d2) + (utcYear_default(d2).getUTCDay() === 4), p2, 2);
  }
  function formatUTCWeekdayNumberSunday(d2) {
    return d2.getUTCDay();
  }
  function formatUTCWeekNumberMonday(d2, p2) {
    return pad(utcMonday.count(utcYear_default(d2) - 1, d2), p2, 2);
  }
  function formatUTCYear(d2, p2) {
    return pad(d2.getUTCFullYear() % 100, p2, 2);
  }
  function formatUTCYearISO(d2, p2) {
    d2 = UTCdISO(d2);
    return pad(d2.getUTCFullYear() % 100, p2, 2);
  }
  function formatUTCFullYear(d2, p2) {
    return pad(d2.getUTCFullYear() % 1e4, p2, 4);
  }
  function formatUTCFullYearISO(d2, p2) {
    var day2 = d2.getUTCDay();
    d2 = day2 >= 4 || day2 === 0 ? utcThursday(d2) : utcThursday.ceil(d2);
    return pad(d2.getUTCFullYear() % 1e4, p2, 4);
  }
  function formatUTCZone() {
    return "+0000";
  }
  function formatLiteralPercent() {
    return "%";
  }
  function formatUnixTimestamp(d2) {
    return +d2;
  }
  function formatUnixTimestampSeconds(d2) {
    return Math.floor(+d2 / 1e3);
  }

  // node_modules/@nivo/core/node_modules/d3-time-format/src/defaultLocale.js
  var locale2;
  var timeFormat;
  var timeParse;
  var utcFormat;
  var utcParse;
  defaultLocale2({
    dateTime: "%x, %X",
    date: "%-m/%-d/%Y",
    time: "%-I:%M:%S %p",
    periods: ["AM", "PM"],
    days: ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"],
    shortDays: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"],
    months: ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"],
    shortMonths: ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"]
  });
  function defaultLocale2(definition) {
    locale2 = formatLocale(definition);
    timeFormat = locale2.format;
    timeParse = locale2.parse;
    utcFormat = locale2.utcFormat;
    utcParse = locale2.utcParse;
    return locale2;
  }

  // node_modules/@nivo/core/node_modules/d3-scale-chromatic/src/colors.js
  function colors_default(specifier) {
    var n6 = specifier.length / 6 | 0, colors3 = new Array(n6), i6 = 0;
    while (i6 < n6)
      colors3[i6] = "#" + specifier.slice(i6 * 6, ++i6 * 6);
    return colors3;
  }

  // node_modules/@nivo/core/node_modules/d3-scale-chromatic/src/categorical/category10.js
  var category10_default = colors_default("1f77b4ff7f0e2ca02cd627289467bd8c564be377c27f7f7fbcbd2217becf");

  // node_modules/@nivo/core/node_modules/d3-scale-chromatic/src/categorical/Accent.js
  var Accent_default = colors_default("7fc97fbeaed4fdc086ffff99386cb0f0027fbf5b17666666");

  // node_modules/@nivo/core/node_modules/d3-scale-chromatic/src/categorical/Dark2.js
  var Dark2_default = colors_default("1b9e77d95f027570b3e7298a66a61ee6ab02a6761d666666");

  // node_modules/@nivo/core/node_modules/d3-scale-chromatic/src/categorical/Paired.js
  var Paired_default = colors_default("a6cee31f78b4b2df8a33a02cfb9a99e31a1cfdbf6fff7f00cab2d66a3d9affff99b15928");

  // node_modules/@nivo/core/node_modules/d3-scale-chromatic/src/categorical/Pastel1.js
  var Pastel1_default = colors_default("fbb4aeb3cde3ccebc5decbe4fed9a6ffffcce5d8bdfddaecf2f2f2");

  // node_modules/@nivo/core/node_modules/d3-scale-chromatic/src/categorical/Pastel2.js
  var Pastel2_default = colors_default("b3e2cdfdcdaccbd5e8f4cae4e6f5c9fff2aef1e2cccccccc");

  // node_modules/@nivo/core/node_modules/d3-scale-chromatic/src/categorical/Set1.js
  var Set1_default = colors_default("e41a1c377eb84daf4a984ea3ff7f00ffff33a65628f781bf999999");

  // node_modules/@nivo/core/node_modules/d3-scale-chromatic/src/categorical/Set2.js
  var Set2_default = colors_default("66c2a5fc8d628da0cbe78ac3a6d854ffd92fe5c494b3b3b3");

  // node_modules/@nivo/core/node_modules/d3-scale-chromatic/src/categorical/Set3.js
  var Set3_default = colors_default("8dd3c7ffffb3bebadafb807280b1d3fdb462b3de69fccde5d9d9d9bc80bdccebc5ffed6f");

  // node_modules/@nivo/core/node_modules/d3-scale-chromatic/src/ramp.js
  var ramp_default = (scheme55) => rgbBasis(scheme55[scheme55.length - 1]);

  // node_modules/@nivo/core/node_modules/d3-scale-chromatic/src/diverging/BrBG.js
  var scheme = new Array(3).concat(
    "d8b365f5f5f55ab4ac",
    "a6611adfc27d80cdc1018571",
    "a6611adfc27df5f5f580cdc1018571",
    "8c510ad8b365f6e8c3c7eae55ab4ac01665e",
    "8c510ad8b365f6e8c3f5f5f5c7eae55ab4ac01665e",
    "8c510abf812ddfc27df6e8c3c7eae580cdc135978f01665e",
    "8c510abf812ddfc27df6e8c3f5f5f5c7eae580cdc135978f01665e",
    "5430058c510abf812ddfc27df6e8c3c7eae580cdc135978f01665e003c30",
    "5430058c510abf812ddfc27df6e8c3f5f5f5c7eae580cdc135978f01665e003c30"
  ).map(colors_default);
  var BrBG_default = ramp_default(scheme);

  // node_modules/@nivo/core/node_modules/d3-scale-chromatic/src/diverging/PRGn.js
  var scheme2 = new Array(3).concat(
    "af8dc3f7f7f77fbf7b",
    "7b3294c2a5cfa6dba0008837",
    "7b3294c2a5cff7f7f7a6dba0008837",
    "762a83af8dc3e7d4e8d9f0d37fbf7b1b7837",
    "762a83af8dc3e7d4e8f7f7f7d9f0d37fbf7b1b7837",
    "762a839970abc2a5cfe7d4e8d9f0d3a6dba05aae611b7837",
    "762a839970abc2a5cfe7d4e8f7f7f7d9f0d3a6dba05aae611b7837",
    "40004b762a839970abc2a5cfe7d4e8d9f0d3a6dba05aae611b783700441b",
    "40004b762a839970abc2a5cfe7d4e8f7f7f7d9f0d3a6dba05aae611b783700441b"
  ).map(colors_default);
  var PRGn_default = ramp_default(scheme2);

  // node_modules/@nivo/core/node_modules/d3-scale-chromatic/src/diverging/PiYG.js
  var scheme3 = new Array(3).concat(
    "e9a3c9f7f7f7a1d76a",
    "d01c8bf1b6dab8e1864dac26",
    "d01c8bf1b6daf7f7f7b8e1864dac26",
    "c51b7de9a3c9fde0efe6f5d0a1d76a4d9221",
    "c51b7de9a3c9fde0eff7f7f7e6f5d0a1d76a4d9221",
    "c51b7dde77aef1b6dafde0efe6f5d0b8e1867fbc414d9221",
    "c51b7dde77aef1b6dafde0eff7f7f7e6f5d0b8e1867fbc414d9221",
    "8e0152c51b7dde77aef1b6dafde0efe6f5d0b8e1867fbc414d9221276419",
    "8e0152c51b7dde77aef1b6dafde0eff7f7f7e6f5d0b8e1867fbc414d9221276419"
  ).map(colors_default);
  var PiYG_default = ramp_default(scheme3);

  // node_modules/@nivo/core/node_modules/d3-scale-chromatic/src/diverging/PuOr.js
  var scheme4 = new Array(3).concat(
    "998ec3f7f7f7f1a340",
    "5e3c99b2abd2fdb863e66101",
    "5e3c99b2abd2f7f7f7fdb863e66101",
    "542788998ec3d8daebfee0b6f1a340b35806",
    "542788998ec3d8daebf7f7f7fee0b6f1a340b35806",
    "5427888073acb2abd2d8daebfee0b6fdb863e08214b35806",
    "5427888073acb2abd2d8daebf7f7f7fee0b6fdb863e08214b35806",
    "2d004b5427888073acb2abd2d8daebfee0b6fdb863e08214b358067f3b08",
    "2d004b5427888073acb2abd2d8daebf7f7f7fee0b6fdb863e08214b358067f3b08"
  ).map(colors_default);
  var PuOr_default = ramp_default(scheme4);

  // node_modules/@nivo/core/node_modules/d3-scale-chromatic/src/diverging/RdBu.js
  var scheme5 = new Array(3).concat(
    "ef8a62f7f7f767a9cf",
    "ca0020f4a58292c5de0571b0",
    "ca0020f4a582f7f7f792c5de0571b0",
    "b2182bef8a62fddbc7d1e5f067a9cf2166ac",
    "b2182bef8a62fddbc7f7f7f7d1e5f067a9cf2166ac",
    "b2182bd6604df4a582fddbc7d1e5f092c5de4393c32166ac",
    "b2182bd6604df4a582fddbc7f7f7f7d1e5f092c5de4393c32166ac",
    "67001fb2182bd6604df4a582fddbc7d1e5f092c5de4393c32166ac053061",
    "67001fb2182bd6604df4a582fddbc7f7f7f7d1e5f092c5de4393c32166ac053061"
  ).map(colors_default);
  var RdBu_default = ramp_default(scheme5);

  // node_modules/@nivo/core/node_modules/d3-scale-chromatic/src/diverging/RdGy.js
  var scheme6 = new Array(3).concat(
    "ef8a62ffffff999999",
    "ca0020f4a582bababa404040",
    "ca0020f4a582ffffffbababa404040",
    "b2182bef8a62fddbc7e0e0e09999994d4d4d",
    "b2182bef8a62fddbc7ffffffe0e0e09999994d4d4d",
    "b2182bd6604df4a582fddbc7e0e0e0bababa8787874d4d4d",
    "b2182bd6604df4a582fddbc7ffffffe0e0e0bababa8787874d4d4d",
    "67001fb2182bd6604df4a582fddbc7e0e0e0bababa8787874d4d4d1a1a1a",
    "67001fb2182bd6604df4a582fddbc7ffffffe0e0e0bababa8787874d4d4d1a1a1a"
  ).map(colors_default);
  var RdGy_default = ramp_default(scheme6);

  // node_modules/@nivo/core/node_modules/d3-scale-chromatic/src/diverging/RdYlBu.js
  var scheme7 = new Array(3).concat(
    "fc8d59ffffbf91bfdb",
    "d7191cfdae61abd9e92c7bb6",
    "d7191cfdae61ffffbfabd9e92c7bb6",
    "d73027fc8d59fee090e0f3f891bfdb4575b4",
    "d73027fc8d59fee090ffffbfe0f3f891bfdb4575b4",
    "d73027f46d43fdae61fee090e0f3f8abd9e974add14575b4",
    "d73027f46d43fdae61fee090ffffbfe0f3f8abd9e974add14575b4",
    "a50026d73027f46d43fdae61fee090e0f3f8abd9e974add14575b4313695",
    "a50026d73027f46d43fdae61fee090ffffbfe0f3f8abd9e974add14575b4313695"
  ).map(colors_default);
  var RdYlBu_default = ramp_default(scheme7);

  // node_modules/@nivo/core/node_modules/d3-scale-chromatic/src/diverging/RdYlGn.js
  var scheme8 = new Array(3).concat(
    "fc8d59ffffbf91cf60",
    "d7191cfdae61a6d96a1a9641",
    "d7191cfdae61ffffbfa6d96a1a9641",
    "d73027fc8d59fee08bd9ef8b91cf601a9850",
    "d73027fc8d59fee08bffffbfd9ef8b91cf601a9850",
    "d73027f46d43fdae61fee08bd9ef8ba6d96a66bd631a9850",
    "d73027f46d43fdae61fee08bffffbfd9ef8ba6d96a66bd631a9850",
    "a50026d73027f46d43fdae61fee08bd9ef8ba6d96a66bd631a9850006837",
    "a50026d73027f46d43fdae61fee08bffffbfd9ef8ba6d96a66bd631a9850006837"
  ).map(colors_default);
  var RdYlGn_default = ramp_default(scheme8);

  // node_modules/@nivo/core/node_modules/d3-scale-chromatic/src/diverging/Spectral.js
  var scheme9 = new Array(3).concat(
    "fc8d59ffffbf99d594",
    "d7191cfdae61abdda42b83ba",
    "d7191cfdae61ffffbfabdda42b83ba",
    "d53e4ffc8d59fee08be6f59899d5943288bd",
    "d53e4ffc8d59fee08bffffbfe6f59899d5943288bd",
    "d53e4ff46d43fdae61fee08be6f598abdda466c2a53288bd",
    "d53e4ff46d43fdae61fee08bffffbfe6f598abdda466c2a53288bd",
    "9e0142d53e4ff46d43fdae61fee08be6f598abdda466c2a53288bd5e4fa2",
    "9e0142d53e4ff46d43fdae61fee08bffffbfe6f598abdda466c2a53288bd5e4fa2"
  ).map(colors_default);
  var Spectral_default = ramp_default(scheme9);

  // node_modules/@nivo/core/node_modules/d3-scale-chromatic/src/sequential-multi/BuGn.js
  var scheme10 = new Array(3).concat(
    "e5f5f999d8c92ca25f",
    "edf8fbb2e2e266c2a4238b45",
    "edf8fbb2e2e266c2a42ca25f006d2c",
    "edf8fbccece699d8c966c2a42ca25f006d2c",
    "edf8fbccece699d8c966c2a441ae76238b45005824",
    "f7fcfde5f5f9ccece699d8c966c2a441ae76238b45005824",
    "f7fcfde5f5f9ccece699d8c966c2a441ae76238b45006d2c00441b"
  ).map(colors_default);
  var BuGn_default = ramp_default(scheme10);

  // node_modules/@nivo/core/node_modules/d3-scale-chromatic/src/sequential-multi/BuPu.js
  var scheme11 = new Array(3).concat(
    "e0ecf49ebcda8856a7",
    "edf8fbb3cde38c96c688419d",
    "edf8fbb3cde38c96c68856a7810f7c",
    "edf8fbbfd3e69ebcda8c96c68856a7810f7c",
    "edf8fbbfd3e69ebcda8c96c68c6bb188419d6e016b",
    "f7fcfde0ecf4bfd3e69ebcda8c96c68c6bb188419d6e016b",
    "f7fcfde0ecf4bfd3e69ebcda8c96c68c6bb188419d810f7c4d004b"
  ).map(colors_default);
  var BuPu_default = ramp_default(scheme11);

  // node_modules/@nivo/core/node_modules/d3-scale-chromatic/src/sequential-multi/GnBu.js
  var scheme12 = new Array(3).concat(
    "e0f3dba8ddb543a2ca",
    "f0f9e8bae4bc7bccc42b8cbe",
    "f0f9e8bae4bc7bccc443a2ca0868ac",
    "f0f9e8ccebc5a8ddb57bccc443a2ca0868ac",
    "f0f9e8ccebc5a8ddb57bccc44eb3d32b8cbe08589e",
    "f7fcf0e0f3dbccebc5a8ddb57bccc44eb3d32b8cbe08589e",
    "f7fcf0e0f3dbccebc5a8ddb57bccc44eb3d32b8cbe0868ac084081"
  ).map(colors_default);
  var GnBu_default = ramp_default(scheme12);

  // node_modules/@nivo/core/node_modules/d3-scale-chromatic/src/sequential-multi/OrRd.js
  var scheme13 = new Array(3).concat(
    "fee8c8fdbb84e34a33",
    "fef0d9fdcc8afc8d59d7301f",
    "fef0d9fdcc8afc8d59e34a33b30000",
    "fef0d9fdd49efdbb84fc8d59e34a33b30000",
    "fef0d9fdd49efdbb84fc8d59ef6548d7301f990000",
    "fff7ecfee8c8fdd49efdbb84fc8d59ef6548d7301f990000",
    "fff7ecfee8c8fdd49efdbb84fc8d59ef6548d7301fb300007f0000"
  ).map(colors_default);
  var OrRd_default = ramp_default(scheme13);

  // node_modules/@nivo/core/node_modules/d3-scale-chromatic/src/sequential-multi/PuBuGn.js
  var scheme14 = new Array(3).concat(
    "ece2f0a6bddb1c9099",
    "f6eff7bdc9e167a9cf02818a",
    "f6eff7bdc9e167a9cf1c9099016c59",
    "f6eff7d0d1e6a6bddb67a9cf1c9099016c59",
    "f6eff7d0d1e6a6bddb67a9cf3690c002818a016450",
    "fff7fbece2f0d0d1e6a6bddb67a9cf3690c002818a016450",
    "fff7fbece2f0d0d1e6a6bddb67a9cf3690c002818a016c59014636"
  ).map(colors_default);
  var PuBuGn_default = ramp_default(scheme14);

  // node_modules/@nivo/core/node_modules/d3-scale-chromatic/src/sequential-multi/PuBu.js
  var scheme15 = new Array(3).concat(
    "ece7f2a6bddb2b8cbe",
    "f1eef6bdc9e174a9cf0570b0",
    "f1eef6bdc9e174a9cf2b8cbe045a8d",
    "f1eef6d0d1e6a6bddb74a9cf2b8cbe045a8d",
    "f1eef6d0d1e6a6bddb74a9cf3690c00570b0034e7b",
    "fff7fbece7f2d0d1e6a6bddb74a9cf3690c00570b0034e7b",
    "fff7fbece7f2d0d1e6a6bddb74a9cf3690c00570b0045a8d023858"
  ).map(colors_default);
  var PuBu_default = ramp_default(scheme15);

  // node_modules/@nivo/core/node_modules/d3-scale-chromatic/src/sequential-multi/PuRd.js
  var scheme16 = new Array(3).concat(
    "e7e1efc994c7dd1c77",
    "f1eef6d7b5d8df65b0ce1256",
    "f1eef6d7b5d8df65b0dd1c77980043",
    "f1eef6d4b9dac994c7df65b0dd1c77980043",
    "f1eef6d4b9dac994c7df65b0e7298ace125691003f",
    "f7f4f9e7e1efd4b9dac994c7df65b0e7298ace125691003f",
    "f7f4f9e7e1efd4b9dac994c7df65b0e7298ace125698004367001f"
  ).map(colors_default);
  var PuRd_default = ramp_default(scheme16);

  // node_modules/@nivo/core/node_modules/d3-scale-chromatic/src/sequential-multi/RdPu.js
  var scheme17 = new Array(3).concat(
    "fde0ddfa9fb5c51b8a",
    "feebe2fbb4b9f768a1ae017e",
    "feebe2fbb4b9f768a1c51b8a7a0177",
    "feebe2fcc5c0fa9fb5f768a1c51b8a7a0177",
    "feebe2fcc5c0fa9fb5f768a1dd3497ae017e7a0177",
    "fff7f3fde0ddfcc5c0fa9fb5f768a1dd3497ae017e7a0177",
    "fff7f3fde0ddfcc5c0fa9fb5f768a1dd3497ae017e7a017749006a"
  ).map(colors_default);
  var RdPu_default = ramp_default(scheme17);

  // node_modules/@nivo/core/node_modules/d3-scale-chromatic/src/sequential-multi/YlGnBu.js
  var scheme18 = new Array(3).concat(
    "edf8b17fcdbb2c7fb8",
    "ffffcca1dab441b6c4225ea8",
    "ffffcca1dab441b6c42c7fb8253494",
    "ffffccc7e9b47fcdbb41b6c42c7fb8253494",
    "ffffccc7e9b47fcdbb41b6c41d91c0225ea80c2c84",
    "ffffd9edf8b1c7e9b47fcdbb41b6c41d91c0225ea80c2c84",
    "ffffd9edf8b1c7e9b47fcdbb41b6c41d91c0225ea8253494081d58"
  ).map(colors_default);
  var YlGnBu_default = ramp_default(scheme18);

  // node_modules/@nivo/core/node_modules/d3-scale-chromatic/src/sequential-multi/YlGn.js
  var scheme19 = new Array(3).concat(
    "f7fcb9addd8e31a354",
    "ffffccc2e69978c679238443",
    "ffffccc2e69978c67931a354006837",
    "ffffccd9f0a3addd8e78c67931a354006837",
    "ffffccd9f0a3addd8e78c67941ab5d238443005a32",
    "ffffe5f7fcb9d9f0a3addd8e78c67941ab5d238443005a32",
    "ffffe5f7fcb9d9f0a3addd8e78c67941ab5d238443006837004529"
  ).map(colors_default);
  var YlGn_default = ramp_default(scheme19);

  // node_modules/@nivo/core/node_modules/d3-scale-chromatic/src/sequential-multi/YlOrBr.js
  var scheme20 = new Array(3).concat(
    "fff7bcfec44fd95f0e",
    "ffffd4fed98efe9929cc4c02",
    "ffffd4fed98efe9929d95f0e993404",
    "ffffd4fee391fec44ffe9929d95f0e993404",
    "ffffd4fee391fec44ffe9929ec7014cc4c028c2d04",
    "ffffe5fff7bcfee391fec44ffe9929ec7014cc4c028c2d04",
    "ffffe5fff7bcfee391fec44ffe9929ec7014cc4c02993404662506"
  ).map(colors_default);
  var YlOrBr_default = ramp_default(scheme20);

  // node_modules/@nivo/core/node_modules/d3-scale-chromatic/src/sequential-multi/YlOrRd.js
  var scheme21 = new Array(3).concat(
    "ffeda0feb24cf03b20",
    "ffffb2fecc5cfd8d3ce31a1c",
    "ffffb2fecc5cfd8d3cf03b20bd0026",
    "ffffb2fed976feb24cfd8d3cf03b20bd0026",
    "ffffb2fed976feb24cfd8d3cfc4e2ae31a1cb10026",
    "ffffccffeda0fed976feb24cfd8d3cfc4e2ae31a1cb10026",
    "ffffccffeda0fed976feb24cfd8d3cfc4e2ae31a1cbd0026800026"
  ).map(colors_default);
  var YlOrRd_default = ramp_default(scheme21);

  // node_modules/@nivo/core/node_modules/d3-scale-chromatic/src/sequential-single/Blues.js
  var scheme22 = new Array(3).concat(
    "deebf79ecae13182bd",
    "eff3ffbdd7e76baed62171b5",
    "eff3ffbdd7e76baed63182bd08519c",
    "eff3ffc6dbef9ecae16baed63182bd08519c",
    "eff3ffc6dbef9ecae16baed64292c62171b5084594",
    "f7fbffdeebf7c6dbef9ecae16baed64292c62171b5084594",
    "f7fbffdeebf7c6dbef9ecae16baed64292c62171b508519c08306b"
  ).map(colors_default);
  var Blues_default = ramp_default(scheme22);

  // node_modules/@nivo/core/node_modules/d3-scale-chromatic/src/sequential-single/Greens.js
  var scheme23 = new Array(3).concat(
    "e5f5e0a1d99b31a354",
    "edf8e9bae4b374c476238b45",
    "edf8e9bae4b374c47631a354006d2c",
    "edf8e9c7e9c0a1d99b74c47631a354006d2c",
    "edf8e9c7e9c0a1d99b74c47641ab5d238b45005a32",
    "f7fcf5e5f5e0c7e9c0a1d99b74c47641ab5d238b45005a32",
    "f7fcf5e5f5e0c7e9c0a1d99b74c47641ab5d238b45006d2c00441b"
  ).map(colors_default);
  var Greens_default = ramp_default(scheme23);

  // node_modules/@nivo/core/node_modules/d3-scale-chromatic/src/sequential-single/Greys.js
  var scheme24 = new Array(3).concat(
    "f0f0f0bdbdbd636363",
    "f7f7f7cccccc969696525252",
    "f7f7f7cccccc969696636363252525",
    "f7f7f7d9d9d9bdbdbd969696636363252525",
    "f7f7f7d9d9d9bdbdbd969696737373525252252525",
    "fffffff0f0f0d9d9d9bdbdbd969696737373525252252525",
    "fffffff0f0f0d9d9d9bdbdbd969696737373525252252525000000"
  ).map(colors_default);
  var Greys_default = ramp_default(scheme24);

  // node_modules/@nivo/core/node_modules/d3-scale-chromatic/src/sequential-single/Purples.js
  var scheme25 = new Array(3).concat(
    "efedf5bcbddc756bb1",
    "f2f0f7cbc9e29e9ac86a51a3",
    "f2f0f7cbc9e29e9ac8756bb154278f",
    "f2f0f7dadaebbcbddc9e9ac8756bb154278f",
    "f2f0f7dadaebbcbddc9e9ac8807dba6a51a34a1486",
    "fcfbfdefedf5dadaebbcbddc9e9ac8807dba6a51a34a1486",
    "fcfbfdefedf5dadaebbcbddc9e9ac8807dba6a51a354278f3f007d"
  ).map(colors_default);
  var Purples_default = ramp_default(scheme25);

  // node_modules/@nivo/core/node_modules/d3-scale-chromatic/src/sequential-single/Reds.js
  var scheme26 = new Array(3).concat(
    "fee0d2fc9272de2d26",
    "fee5d9fcae91fb6a4acb181d",
    "fee5d9fcae91fb6a4ade2d26a50f15",
    "fee5d9fcbba1fc9272fb6a4ade2d26a50f15",
    "fee5d9fcbba1fc9272fb6a4aef3b2ccb181d99000d",
    "fff5f0fee0d2fcbba1fc9272fb6a4aef3b2ccb181d99000d",
    "fff5f0fee0d2fcbba1fc9272fb6a4aef3b2ccb181da50f1567000d"
  ).map(colors_default);
  var Reds_default = ramp_default(scheme26);

  // node_modules/@nivo/core/node_modules/d3-scale-chromatic/src/sequential-single/Oranges.js
  var scheme27 = new Array(3).concat(
    "fee6cefdae6be6550d",
    "feeddefdbe85fd8d3cd94701",
    "feeddefdbe85fd8d3ce6550da63603",
    "feeddefdd0a2fdae6bfd8d3ce6550da63603",
    "feeddefdd0a2fdae6bfd8d3cf16913d948018c2d04",
    "fff5ebfee6cefdd0a2fdae6bfd8d3cf16913d948018c2d04",
    "fff5ebfee6cefdd0a2fdae6bfd8d3cf16913d94801a636037f2704"
  ).map(colors_default);
  var Oranges_default = ramp_default(scheme27);

  // node_modules/@nivo/core/dist/nivo-core.es.js
  var import_isFunction = __toESM(require_isFunction());
  var import_without = __toESM(require_without());

  // node_modules/@nivo/core/node_modules/d3-shape/src/math.js
  var epsilon = 1e-12;
  var pi = Math.PI;
  var halfPi = pi / 2;
  var tau = 2 * pi;

  // node_modules/@nivo/core/node_modules/d3-shape/src/curve/linear.js
  function Linear(context) {
    this._context = context;
  }
  Linear.prototype = {
    areaStart: function() {
      this._line = 0;
    },
    areaEnd: function() {
      this._line = NaN;
    },
    lineStart: function() {
      this._point = 0;
    },
    lineEnd: function() {
      if (this._line || this._line !== 0 && this._point === 1)
        this._context.closePath();
      this._line = 1 - this._line;
    },
    point: function(x3, y4) {
      x3 = +x3, y4 = +y4;
      switch (this._point) {
        case 0:
          this._point = 1;
          this._line ? this._context.lineTo(x3, y4) : this._context.moveTo(x3, y4);
          break;
        case 1:
          this._point = 2;
        default:
          this._context.lineTo(x3, y4);
          break;
      }
    }
  };
  function linear_default(context) {
    return new Linear(context);
  }

  // node_modules/@nivo/core/node_modules/d3-shape/src/noop.js
  function noop_default() {
  }

  // node_modules/@nivo/core/node_modules/d3-shape/src/curve/basis.js
  function point(that, x3, y4) {
    that._context.bezierCurveTo(
      (2 * that._x0 + that._x1) / 3,
      (2 * that._y0 + that._y1) / 3,
      (that._x0 + 2 * that._x1) / 3,
      (that._y0 + 2 * that._y1) / 3,
      (that._x0 + 4 * that._x1 + x3) / 6,
      (that._y0 + 4 * that._y1 + y4) / 6
    );
  }
  function Basis(context) {
    this._context = context;
  }
  Basis.prototype = {
    areaStart: function() {
      this._line = 0;
    },
    areaEnd: function() {
      this._line = NaN;
    },
    lineStart: function() {
      this._x0 = this._x1 = this._y0 = this._y1 = NaN;
      this._point = 0;
    },
    lineEnd: function() {
      switch (this._point) {
        case 3:
          point(this, this._x1, this._y1);
        case 2:
          this._context.lineTo(this._x1, this._y1);
          break;
      }
      if (this._line || this._line !== 0 && this._point === 1)
        this._context.closePath();
      this._line = 1 - this._line;
    },
    point: function(x3, y4) {
      x3 = +x3, y4 = +y4;
      switch (this._point) {
        case 0:
          this._point = 1;
          this._line ? this._context.lineTo(x3, y4) : this._context.moveTo(x3, y4);
          break;
        case 1:
          this._point = 2;
          break;
        case 2:
          this._point = 3;
          this._context.lineTo((5 * this._x0 + this._x1) / 6, (5 * this._y0 + this._y1) / 6);
        default:
          point(this, x3, y4);
          break;
      }
      this._x0 = this._x1, this._x1 = x3;
      this._y0 = this._y1, this._y1 = y4;
    }
  };
  function basis_default2(context) {
    return new Basis(context);
  }

  // node_modules/@nivo/core/node_modules/d3-shape/src/curve/basisClosed.js
  function BasisClosed(context) {
    this._context = context;
  }
  BasisClosed.prototype = {
    areaStart: noop_default,
    areaEnd: noop_default,
    lineStart: function() {
      this._x0 = this._x1 = this._x2 = this._x3 = this._x4 = this._y0 = this._y1 = this._y2 = this._y3 = this._y4 = NaN;
      this._point = 0;
    },
    lineEnd: function() {
      switch (this._point) {
        case 1: {
          this._context.moveTo(this._x2, this._y2);
          this._context.closePath();
          break;
        }
        case 2: {
          this._context.moveTo((this._x2 + 2 * this._x3) / 3, (this._y2 + 2 * this._y3) / 3);
          this._context.lineTo((this._x3 + 2 * this._x2) / 3, (this._y3 + 2 * this._y2) / 3);
          this._context.closePath();
          break;
        }
        case 3: {
          this.point(this._x2, this._y2);
          this.point(this._x3, this._y3);
          this.point(this._x4, this._y4);
          break;
        }
      }
    },
    point: function(x3, y4) {
      x3 = +x3, y4 = +y4;
      switch (this._point) {
        case 0:
          this._point = 1;
          this._x2 = x3, this._y2 = y4;
          break;
        case 1:
          this._point = 2;
          this._x3 = x3, this._y3 = y4;
          break;
        case 2:
          this._point = 3;
          this._x4 = x3, this._y4 = y4;
          this._context.moveTo((this._x0 + 4 * this._x1 + x3) / 6, (this._y0 + 4 * this._y1 + y4) / 6);
          break;
        default:
          point(this, x3, y4);
          break;
      }
      this._x0 = this._x1, this._x1 = x3;
      this._y0 = this._y1, this._y1 = y4;
    }
  };
  function basisClosed_default2(context) {
    return new BasisClosed(context);
  }

  // node_modules/@nivo/core/node_modules/d3-shape/src/curve/basisOpen.js
  function BasisOpen(context) {
    this._context = context;
  }
  BasisOpen.prototype = {
    areaStart: function() {
      this._line = 0;
    },
    areaEnd: function() {
      this._line = NaN;
    },
    lineStart: function() {
      this._x0 = this._x1 = this._y0 = this._y1 = NaN;
      this._point = 0;
    },
    lineEnd: function() {
      if (this._line || this._line !== 0 && this._point === 3)
        this._context.closePath();
      this._line = 1 - this._line;
    },
    point: function(x3, y4) {
      x3 = +x3, y4 = +y4;
      switch (this._point) {
        case 0:
          this._point = 1;
          break;
        case 1:
          this._point = 2;
          break;
        case 2:
          this._point = 3;
          var x0 = (this._x0 + 4 * this._x1 + x3) / 6, y0 = (this._y0 + 4 * this._y1 + y4) / 6;
          this._line ? this._context.lineTo(x0, y0) : this._context.moveTo(x0, y0);
          break;
        case 3:
          this._point = 4;
        default:
          point(this, x3, y4);
          break;
      }
      this._x0 = this._x1, this._x1 = x3;
      this._y0 = this._y1, this._y1 = y4;
    }
  };
  function basisOpen_default(context) {
    return new BasisOpen(context);
  }

  // node_modules/@nivo/core/node_modules/d3-shape/src/curve/bundle.js
  function Bundle(context, beta) {
    this._basis = new Basis(context);
    this._beta = beta;
  }
  Bundle.prototype = {
    lineStart: function() {
      this._x = [];
      this._y = [];
      this._basis.lineStart();
    },
    lineEnd: function() {
      var x3 = this._x, y4 = this._y, j3 = x3.length - 1;
      if (j3 > 0) {
        var x0 = x3[0], y0 = y4[0], dx = x3[j3] - x0, dy = y4[j3] - y0, i6 = -1, t5;
        while (++i6 <= j3) {
          t5 = i6 / j3;
          this._basis.point(
            this._beta * x3[i6] + (1 - this._beta) * (x0 + t5 * dx),
            this._beta * y4[i6] + (1 - this._beta) * (y0 + t5 * dy)
          );
        }
      }
      this._x = this._y = null;
      this._basis.lineEnd();
    },
    point: function(x3, y4) {
      this._x.push(+x3);
      this._y.push(+y4);
    }
  };
  var bundle_default = function custom(beta) {
    function bundle(context) {
      return beta === 1 ? new Basis(context) : new Bundle(context, beta);
    }
    bundle.beta = function(beta2) {
      return custom(+beta2);
    };
    return bundle;
  }(0.85);

  // node_modules/@nivo/core/node_modules/d3-shape/src/curve/cardinal.js
  function point2(that, x3, y4) {
    that._context.bezierCurveTo(
      that._x1 + that._k * (that._x2 - that._x0),
      that._y1 + that._k * (that._y2 - that._y0),
      that._x2 + that._k * (that._x1 - x3),
      that._y2 + that._k * (that._y1 - y4),
      that._x2,
      that._y2
    );
  }
  function Cardinal(context, tension) {
    this._context = context;
    this._k = (1 - tension) / 6;
  }
  Cardinal.prototype = {
    areaStart: function() {
      this._line = 0;
    },
    areaEnd: function() {
      this._line = NaN;
    },
    lineStart: function() {
      this._x0 = this._x1 = this._x2 = this._y0 = this._y1 = this._y2 = NaN;
      this._point = 0;
    },
    lineEnd: function() {
      switch (this._point) {
        case 2:
          this._context.lineTo(this._x2, this._y2);
          break;
        case 3:
          point2(this, this._x1, this._y1);
          break;
      }
      if (this._line || this._line !== 0 && this._point === 1)
        this._context.closePath();
      this._line = 1 - this._line;
    },
    point: function(x3, y4) {
      x3 = +x3, y4 = +y4;
      switch (this._point) {
        case 0:
          this._point = 1;
          this._line ? this._context.lineTo(x3, y4) : this._context.moveTo(x3, y4);
          break;
        case 1:
          this._point = 2;
          this._x1 = x3, this._y1 = y4;
          break;
        case 2:
          this._point = 3;
        default:
          point2(this, x3, y4);
          break;
      }
      this._x0 = this._x1, this._x1 = this._x2, this._x2 = x3;
      this._y0 = this._y1, this._y1 = this._y2, this._y2 = y4;
    }
  };
  var cardinal_default = function custom2(tension) {
    function cardinal(context) {
      return new Cardinal(context, tension);
    }
    cardinal.tension = function(tension2) {
      return custom2(+tension2);
    };
    return cardinal;
  }(0);

  // node_modules/@nivo/core/node_modules/d3-shape/src/curve/cardinalClosed.js
  function CardinalClosed(context, tension) {
    this._context = context;
    this._k = (1 - tension) / 6;
  }
  CardinalClosed.prototype = {
    areaStart: noop_default,
    areaEnd: noop_default,
    lineStart: function() {
      this._x0 = this._x1 = this._x2 = this._x3 = this._x4 = this._x5 = this._y0 = this._y1 = this._y2 = this._y3 = this._y4 = this._y5 = NaN;
      this._point = 0;
    },
    lineEnd: function() {
      switch (this._point) {
        case 1: {
          this._context.moveTo(this._x3, this._y3);
          this._context.closePath();
          break;
        }
        case 2: {
          this._context.lineTo(this._x3, this._y3);
          this._context.closePath();
          break;
        }
        case 3: {
          this.point(this._x3, this._y3);
          this.point(this._x4, this._y4);
          this.point(this._x5, this._y5);
          break;
        }
      }
    },
    point: function(x3, y4) {
      x3 = +x3, y4 = +y4;
      switch (this._point) {
        case 0:
          this._point = 1;
          this._x3 = x3, this._y3 = y4;
          break;
        case 1:
          this._point = 2;
          this._context.moveTo(this._x4 = x3, this._y4 = y4);
          break;
        case 2:
          this._point = 3;
          this._x5 = x3, this._y5 = y4;
          break;
        default:
          point2(this, x3, y4);
          break;
      }
      this._x0 = this._x1, this._x1 = this._x2, this._x2 = x3;
      this._y0 = this._y1, this._y1 = this._y2, this._y2 = y4;
    }
  };
  var cardinalClosed_default = function custom3(tension) {
    function cardinal(context) {
      return new CardinalClosed(context, tension);
    }
    cardinal.tension = function(tension2) {
      return custom3(+tension2);
    };
    return cardinal;
  }(0);

  // node_modules/@nivo/core/node_modules/d3-shape/src/curve/cardinalOpen.js
  function CardinalOpen(context, tension) {
    this._context = context;
    this._k = (1 - tension) / 6;
  }
  CardinalOpen.prototype = {
    areaStart: function() {
      this._line = 0;
    },
    areaEnd: function() {
      this._line = NaN;
    },
    lineStart: function() {
      this._x0 = this._x1 = this._x2 = this._y0 = this._y1 = this._y2 = NaN;
      this._point = 0;
    },
    lineEnd: function() {
      if (this._line || this._line !== 0 && this._point === 3)
        this._context.closePath();
      this._line = 1 - this._line;
    },
    point: function(x3, y4) {
      x3 = +x3, y4 = +y4;
      switch (this._point) {
        case 0:
          this._point = 1;
          break;
        case 1:
          this._point = 2;
          break;
        case 2:
          this._point = 3;
          this._line ? this._context.lineTo(this._x2, this._y2) : this._context.moveTo(this._x2, this._y2);
          break;
        case 3:
          this._point = 4;
        default:
          point2(this, x3, y4);
          break;
      }
      this._x0 = this._x1, this._x1 = this._x2, this._x2 = x3;
      this._y0 = this._y1, this._y1 = this._y2, this._y2 = y4;
    }
  };
  var cardinalOpen_default = function custom4(tension) {
    function cardinal(context) {
      return new CardinalOpen(context, tension);
    }
    cardinal.tension = function(tension2) {
      return custom4(+tension2);
    };
    return cardinal;
  }(0);

  // node_modules/@nivo/core/node_modules/d3-shape/src/curve/catmullRom.js
  function point3(that, x3, y4) {
    var x1 = that._x1, y1 = that._y1, x22 = that._x2, y22 = that._y2;
    if (that._l01_a > epsilon) {
      var a2 = 2 * that._l01_2a + 3 * that._l01_a * that._l12_a + that._l12_2a, n6 = 3 * that._l01_a * (that._l01_a + that._l12_a);
      x1 = (x1 * a2 - that._x0 * that._l12_2a + that._x2 * that._l01_2a) / n6;
      y1 = (y1 * a2 - that._y0 * that._l12_2a + that._y2 * that._l01_2a) / n6;
    }
    if (that._l23_a > epsilon) {
      var b3 = 2 * that._l23_2a + 3 * that._l23_a * that._l12_a + that._l12_2a, m4 = 3 * that._l23_a * (that._l23_a + that._l12_a);
      x22 = (x22 * b3 + that._x1 * that._l23_2a - x3 * that._l12_2a) / m4;
      y22 = (y22 * b3 + that._y1 * that._l23_2a - y4 * that._l12_2a) / m4;
    }
    that._context.bezierCurveTo(x1, y1, x22, y22, that._x2, that._y2);
  }
  function CatmullRom(context, alpha2) {
    this._context = context;
    this._alpha = alpha2;
  }
  CatmullRom.prototype = {
    areaStart: function() {
      this._line = 0;
    },
    areaEnd: function() {
      this._line = NaN;
    },
    lineStart: function() {
      this._x0 = this._x1 = this._x2 = this._y0 = this._y1 = this._y2 = NaN;
      this._l01_a = this._l12_a = this._l23_a = this._l01_2a = this._l12_2a = this._l23_2a = this._point = 0;
    },
    lineEnd: function() {
      switch (this._point) {
        case 2:
          this._context.lineTo(this._x2, this._y2);
          break;
        case 3:
          this.point(this._x2, this._y2);
          break;
      }
      if (this._line || this._line !== 0 && this._point === 1)
        this._context.closePath();
      this._line = 1 - this._line;
    },
    point: function(x3, y4) {
      x3 = +x3, y4 = +y4;
      if (this._point) {
        var x23 = this._x2 - x3, y23 = this._y2 - y4;
        this._l23_a = Math.sqrt(this._l23_2a = Math.pow(x23 * x23 + y23 * y23, this._alpha));
      }
      switch (this._point) {
        case 0:
          this._point = 1;
          this._line ? this._context.lineTo(x3, y4) : this._context.moveTo(x3, y4);
          break;
        case 1:
          this._point = 2;
          break;
        case 2:
          this._point = 3;
        default:
          point3(this, x3, y4);
          break;
      }
      this._l01_a = this._l12_a, this._l12_a = this._l23_a;
      this._l01_2a = this._l12_2a, this._l12_2a = this._l23_2a;
      this._x0 = this._x1, this._x1 = this._x2, this._x2 = x3;
      this._y0 = this._y1, this._y1 = this._y2, this._y2 = y4;
    }
  };
  var catmullRom_default = function custom5(alpha2) {
    function catmullRom(context) {
      return alpha2 ? new CatmullRom(context, alpha2) : new Cardinal(context, 0);
    }
    catmullRom.alpha = function(alpha3) {
      return custom5(+alpha3);
    };
    return catmullRom;
  }(0.5);

  // node_modules/@nivo/core/node_modules/d3-shape/src/curve/catmullRomClosed.js
  function CatmullRomClosed(context, alpha2) {
    this._context = context;
    this._alpha = alpha2;
  }
  CatmullRomClosed.prototype = {
    areaStart: noop_default,
    areaEnd: noop_default,
    lineStart: function() {
      this._x0 = this._x1 = this._x2 = this._x3 = this._x4 = this._x5 = this._y0 = this._y1 = this._y2 = this._y3 = this._y4 = this._y5 = NaN;
      this._l01_a = this._l12_a = this._l23_a = this._l01_2a = this._l12_2a = this._l23_2a = this._point = 0;
    },
    lineEnd: function() {
      switch (this._point) {
        case 1: {
          this._context.moveTo(this._x3, this._y3);
          this._context.closePath();
          break;
        }
        case 2: {
          this._context.lineTo(this._x3, this._y3);
          this._context.closePath();
          break;
        }
        case 3: {
          this.point(this._x3, this._y3);
          this.point(this._x4, this._y4);
          this.point(this._x5, this._y5);
          break;
        }
      }
    },
    point: function(x3, y4) {
      x3 = +x3, y4 = +y4;
      if (this._point) {
        var x23 = this._x2 - x3, y23 = this._y2 - y4;
        this._l23_a = Math.sqrt(this._l23_2a = Math.pow(x23 * x23 + y23 * y23, this._alpha));
      }
      switch (this._point) {
        case 0:
          this._point = 1;
          this._x3 = x3, this._y3 = y4;
          break;
        case 1:
          this._point = 2;
          this._context.moveTo(this._x4 = x3, this._y4 = y4);
          break;
        case 2:
          this._point = 3;
          this._x5 = x3, this._y5 = y4;
          break;
        default:
          point3(this, x3, y4);
          break;
      }
      this._l01_a = this._l12_a, this._l12_a = this._l23_a;
      this._l01_2a = this._l12_2a, this._l12_2a = this._l23_2a;
      this._x0 = this._x1, this._x1 = this._x2, this._x2 = x3;
      this._y0 = this._y1, this._y1 = this._y2, this._y2 = y4;
    }
  };
  var catmullRomClosed_default = function custom6(alpha2) {
    function catmullRom(context) {
      return alpha2 ? new CatmullRomClosed(context, alpha2) : new CardinalClosed(context, 0);
    }
    catmullRom.alpha = function(alpha3) {
      return custom6(+alpha3);
    };
    return catmullRom;
  }(0.5);

  // node_modules/@nivo/core/node_modules/d3-shape/src/curve/catmullRomOpen.js
  function CatmullRomOpen(context, alpha2) {
    this._context = context;
    this._alpha = alpha2;
  }
  CatmullRomOpen.prototype = {
    areaStart: function() {
      this._line = 0;
    },
    areaEnd: function() {
      this._line = NaN;
    },
    lineStart: function() {
      this._x0 = this._x1 = this._x2 = this._y0 = this._y1 = this._y2 = NaN;
      this._l01_a = this._l12_a = this._l23_a = this._l01_2a = this._l12_2a = this._l23_2a = this._point = 0;
    },
    lineEnd: function() {
      if (this._line || this._line !== 0 && this._point === 3)
        this._context.closePath();
      this._line = 1 - this._line;
    },
    point: function(x3, y4) {
      x3 = +x3, y4 = +y4;
      if (this._point) {
        var x23 = this._x2 - x3, y23 = this._y2 - y4;
        this._l23_a = Math.sqrt(this._l23_2a = Math.pow(x23 * x23 + y23 * y23, this._alpha));
      }
      switch (this._point) {
        case 0:
          this._point = 1;
          break;
        case 1:
          this._point = 2;
          break;
        case 2:
          this._point = 3;
          this._line ? this._context.lineTo(this._x2, this._y2) : this._context.moveTo(this._x2, this._y2);
          break;
        case 3:
          this._point = 4;
        default:
          point3(this, x3, y4);
          break;
      }
      this._l01_a = this._l12_a, this._l12_a = this._l23_a;
      this._l01_2a = this._l12_2a, this._l12_2a = this._l23_2a;
      this._x0 = this._x1, this._x1 = this._x2, this._x2 = x3;
      this._y0 = this._y1, this._y1 = this._y2, this._y2 = y4;
    }
  };
  var catmullRomOpen_default = function custom7(alpha2) {
    function catmullRom(context) {
      return alpha2 ? new CatmullRomOpen(context, alpha2) : new CardinalOpen(context, 0);
    }
    catmullRom.alpha = function(alpha3) {
      return custom7(+alpha3);
    };
    return catmullRom;
  }(0.5);

  // node_modules/@nivo/core/node_modules/d3-shape/src/curve/linearClosed.js
  function LinearClosed(context) {
    this._context = context;
  }
  LinearClosed.prototype = {
    areaStart: noop_default,
    areaEnd: noop_default,
    lineStart: function() {
      this._point = 0;
    },
    lineEnd: function() {
      if (this._point)
        this._context.closePath();
    },
    point: function(x3, y4) {
      x3 = +x3, y4 = +y4;
      if (this._point)
        this._context.lineTo(x3, y4);
      else
        this._point = 1, this._context.moveTo(x3, y4);
    }
  };
  function linearClosed_default(context) {
    return new LinearClosed(context);
  }

  // node_modules/@nivo/core/node_modules/d3-shape/src/curve/monotone.js
  function sign2(x3) {
    return x3 < 0 ? -1 : 1;
  }
  function slope3(that, x22, y22) {
    var h0 = that._x1 - that._x0, h12 = x22 - that._x1, s0 = (that._y1 - that._y0) / (h0 || h12 < 0 && -0), s1 = (y22 - that._y1) / (h12 || h0 < 0 && -0), p2 = (s0 * h12 + s1 * h0) / (h0 + h12);
    return (sign2(s0) + sign2(s1)) * Math.min(Math.abs(s0), Math.abs(s1), 0.5 * Math.abs(p2)) || 0;
  }
  function slope2(that, t5) {
    var h = that._x1 - that._x0;
    return h ? (3 * (that._y1 - that._y0) / h - t5) / 2 : t5;
  }
  function point4(that, t02, t12) {
    var x0 = that._x0, y0 = that._y0, x1 = that._x1, y1 = that._y1, dx = (x1 - x0) / 3;
    that._context.bezierCurveTo(x0 + dx, y0 + dx * t02, x1 - dx, y1 - dx * t12, x1, y1);
  }
  function MonotoneX(context) {
    this._context = context;
  }
  MonotoneX.prototype = {
    areaStart: function() {
      this._line = 0;
    },
    areaEnd: function() {
      this._line = NaN;
    },
    lineStart: function() {
      this._x0 = this._x1 = this._y0 = this._y1 = this._t0 = NaN;
      this._point = 0;
    },
    lineEnd: function() {
      switch (this._point) {
        case 2:
          this._context.lineTo(this._x1, this._y1);
          break;
        case 3:
          point4(this, this._t0, slope2(this, this._t0));
          break;
      }
      if (this._line || this._line !== 0 && this._point === 1)
        this._context.closePath();
      this._line = 1 - this._line;
    },
    point: function(x3, y4) {
      var t12 = NaN;
      x3 = +x3, y4 = +y4;
      if (x3 === this._x1 && y4 === this._y1)
        return;
      switch (this._point) {
        case 0:
          this._point = 1;
          this._line ? this._context.lineTo(x3, y4) : this._context.moveTo(x3, y4);
          break;
        case 1:
          this._point = 2;
          break;
        case 2:
          this._point = 3;
          point4(this, slope2(this, t12 = slope3(this, x3, y4)), t12);
          break;
        default:
          point4(this, this._t0, t12 = slope3(this, x3, y4));
          break;
      }
      this._x0 = this._x1, this._x1 = x3;
      this._y0 = this._y1, this._y1 = y4;
      this._t0 = t12;
    }
  };
  function MonotoneY(context) {
    this._context = new ReflectContext(context);
  }
  (MonotoneY.prototype = Object.create(MonotoneX.prototype)).point = function(x3, y4) {
    MonotoneX.prototype.point.call(this, y4, x3);
  };
  function ReflectContext(context) {
    this._context = context;
  }
  ReflectContext.prototype = {
    moveTo: function(x3, y4) {
      this._context.moveTo(y4, x3);
    },
    closePath: function() {
      this._context.closePath();
    },
    lineTo: function(x3, y4) {
      this._context.lineTo(y4, x3);
    },
    bezierCurveTo: function(x1, y1, x22, y22, x3, y4) {
      this._context.bezierCurveTo(y1, x1, y22, x22, y4, x3);
    }
  };
  function monotoneX(context) {
    return new MonotoneX(context);
  }
  function monotoneY(context) {
    return new MonotoneY(context);
  }

  // node_modules/@nivo/core/node_modules/d3-shape/src/curve/natural.js
  function Natural(context) {
    this._context = context;
  }
  Natural.prototype = {
    areaStart: function() {
      this._line = 0;
    },
    areaEnd: function() {
      this._line = NaN;
    },
    lineStart: function() {
      this._x = [];
      this._y = [];
    },
    lineEnd: function() {
      var x3 = this._x, y4 = this._y, n6 = x3.length;
      if (n6) {
        this._line ? this._context.lineTo(x3[0], y4[0]) : this._context.moveTo(x3[0], y4[0]);
        if (n6 === 2) {
          this._context.lineTo(x3[1], y4[1]);
        } else {
          var px = controlPoints(x3), py = controlPoints(y4);
          for (var i0 = 0, i1 = 1; i1 < n6; ++i0, ++i1) {
            this._context.bezierCurveTo(px[0][i0], py[0][i0], px[1][i0], py[1][i0], x3[i1], y4[i1]);
          }
        }
      }
      if (this._line || this._line !== 0 && n6 === 1)
        this._context.closePath();
      this._line = 1 - this._line;
      this._x = this._y = null;
    },
    point: function(x3, y4) {
      this._x.push(+x3);
      this._y.push(+y4);
    }
  };
  function controlPoints(x3) {
    var i6, n6 = x3.length - 1, m4, a2 = new Array(n6), b3 = new Array(n6), r6 = new Array(n6);
    a2[0] = 0, b3[0] = 2, r6[0] = x3[0] + 2 * x3[1];
    for (i6 = 1; i6 < n6 - 1; ++i6)
      a2[i6] = 1, b3[i6] = 4, r6[i6] = 4 * x3[i6] + 2 * x3[i6 + 1];
    a2[n6 - 1] = 2, b3[n6 - 1] = 7, r6[n6 - 1] = 8 * x3[n6 - 1] + x3[n6];
    for (i6 = 1; i6 < n6; ++i6)
      m4 = a2[i6] / b3[i6 - 1], b3[i6] -= m4, r6[i6] -= m4 * r6[i6 - 1];
    a2[n6 - 1] = r6[n6 - 1] / b3[n6 - 1];
    for (i6 = n6 - 2; i6 >= 0; --i6)
      a2[i6] = (r6[i6] - a2[i6 + 1]) / b3[i6];
    b3[n6 - 1] = (x3[n6] + a2[n6 - 1]) / 2;
    for (i6 = 0; i6 < n6 - 1; ++i6)
      b3[i6] = 2 * x3[i6 + 1] - a2[i6 + 1];
    return [a2, b3];
  }
  function natural_default(context) {
    return new Natural(context);
  }

  // node_modules/@nivo/core/node_modules/d3-shape/src/curve/step.js
  function Step(context, t5) {
    this._context = context;
    this._t = t5;
  }
  Step.prototype = {
    areaStart: function() {
      this._line = 0;
    },
    areaEnd: function() {
      this._line = NaN;
    },
    lineStart: function() {
      this._x = this._y = NaN;
      this._point = 0;
    },
    lineEnd: function() {
      if (0 < this._t && this._t < 1 && this._point === 2)
        this._context.lineTo(this._x, this._y);
      if (this._line || this._line !== 0 && this._point === 1)
        this._context.closePath();
      if (this._line >= 0)
        this._t = 1 - this._t, this._line = 1 - this._line;
    },
    point: function(x3, y4) {
      x3 = +x3, y4 = +y4;
      switch (this._point) {
        case 0:
          this._point = 1;
          this._line ? this._context.lineTo(x3, y4) : this._context.moveTo(x3, y4);
          break;
        case 1:
          this._point = 2;
        default: {
          if (this._t <= 0) {
            this._context.lineTo(this._x, y4);
            this._context.lineTo(x3, y4);
          } else {
            var x1 = this._x * (1 - this._t) + x3 * this._t;
            this._context.lineTo(x1, this._y);
            this._context.lineTo(x1, y4);
          }
          break;
        }
      }
      this._x = x3, this._y = y4;
    }
  };
  function step_default(context) {
    return new Step(context, 0.5);
  }
  function stepBefore(context) {
    return new Step(context, 0);
  }
  function stepAfter(context) {
    return new Step(context, 1);
  }

  // node_modules/@nivo/core/node_modules/d3-shape/src/offset/none.js
  function none_default(series, order) {
    if (!((n6 = series.length) > 1))
      return;
    for (var i6 = 1, j3, s0, s1 = series[order[0]], n6, m4 = s1.length; i6 < n6; ++i6) {
      s0 = s1, s1 = series[order[i6]];
      for (j3 = 0; j3 < m4; ++j3) {
        s1[j3][1] += s1[j3][0] = isNaN(s0[j3][1]) ? s0[j3][0] : s0[j3][1];
      }
    }
  }

  // node_modules/@nivo/core/node_modules/d3-shape/src/order/none.js
  function none_default2(series) {
    var n6 = series.length, o6 = new Array(n6);
    while (--n6 >= 0)
      o6[n6] = n6;
    return o6;
  }

  // node_modules/@nivo/core/node_modules/d3-shape/src/offset/expand.js
  function expand_default(series, order) {
    if (!((n6 = series.length) > 0))
      return;
    for (var i6, n6, j3 = 0, m4 = series[0].length, y4; j3 < m4; ++j3) {
      for (y4 = i6 = 0; i6 < n6; ++i6)
        y4 += series[i6][j3][1] || 0;
      if (y4)
        for (i6 = 0; i6 < n6; ++i6)
          series[i6][j3][1] /= y4;
    }
    none_default(series, order);
  }

  // node_modules/@nivo/core/node_modules/d3-shape/src/offset/diverging.js
  function diverging_default(series, order) {
    if (!((n6 = series.length) > 0))
      return;
    for (var i6, j3 = 0, d2, dy, yp, yn2, n6, m4 = series[order[0]].length; j3 < m4; ++j3) {
      for (yp = yn2 = 0, i6 = 0; i6 < n6; ++i6) {
        if ((dy = (d2 = series[order[i6]][j3])[1] - d2[0]) > 0) {
          d2[0] = yp, d2[1] = yp += dy;
        } else if (dy < 0) {
          d2[1] = yn2, d2[0] = yn2 += dy;
        } else {
          d2[0] = 0, d2[1] = dy;
        }
      }
    }
  }

  // node_modules/@nivo/core/node_modules/d3-shape/src/offset/silhouette.js
  function silhouette_default(series, order) {
    if (!((n6 = series.length) > 0))
      return;
    for (var j3 = 0, s0 = series[order[0]], n6, m4 = s0.length; j3 < m4; ++j3) {
      for (var i6 = 0, y4 = 0; i6 < n6; ++i6)
        y4 += series[i6][j3][1] || 0;
      s0[j3][1] += s0[j3][0] = -y4 / 2;
    }
    none_default(series, order);
  }

  // node_modules/@nivo/core/node_modules/d3-shape/src/offset/wiggle.js
  function wiggle_default(series, order) {
    if (!((n6 = series.length) > 0) || !((m4 = (s0 = series[order[0]]).length) > 0))
      return;
    for (var y4 = 0, j3 = 1, s0, m4, n6; j3 < m4; ++j3) {
      for (var i6 = 0, s1 = 0, s22 = 0; i6 < n6; ++i6) {
        var si = series[order[i6]], sij0 = si[j3][1] || 0, sij1 = si[j3 - 1][1] || 0, s3 = (sij0 - sij1) / 2;
        for (var k2 = 0; k2 < i6; ++k2) {
          var sk = series[order[k2]], skj0 = sk[j3][1] || 0, skj1 = sk[j3 - 1][1] || 0;
          s3 += skj0 - skj1;
        }
        s1 += sij0, s22 += s3 * sij0;
      }
      s0[j3 - 1][1] += s0[j3 - 1][0] = y4;
      if (s1)
        y4 -= s22 / s1;
    }
    s0[j3 - 1][1] += s0[j3 - 1][0] = y4;
    none_default(series, order);
  }

  // node_modules/@nivo/core/node_modules/d3-shape/src/order/appearance.js
  function appearance_default(series) {
    var peaks = series.map(peak);
    return none_default2(series).sort(function(a2, b3) {
      return peaks[a2] - peaks[b3];
    });
  }
  function peak(series) {
    var i6 = -1, j3 = 0, n6 = series.length, vi, vj = -Infinity;
    while (++i6 < n6)
      if ((vi = +series[i6][1]) > vj)
        vj = vi, j3 = i6;
    return j3;
  }

  // node_modules/@nivo/core/node_modules/d3-shape/src/order/ascending.js
  function ascending_default(series) {
    var sums = series.map(sum);
    return none_default2(series).sort(function(a2, b3) {
      return sums[a2] - sums[b3];
    });
  }
  function sum(series) {
    var s3 = 0, i6 = -1, n6 = series.length, v4;
    while (++i6 < n6)
      if (v4 = +series[i6][1])
        s3 += v4;
    return s3;
  }

  // node_modules/@nivo/core/node_modules/d3-shape/src/order/descending.js
  function descending_default(series) {
    return ascending_default(series).reverse();
  }

  // node_modules/@nivo/core/node_modules/d3-shape/src/order/insideOut.js
  function insideOut_default(series) {
    var n6 = series.length, i6, j3, sums = series.map(sum), order = appearance_default(series), top = 0, bottom = 0, tops = [], bottoms = [];
    for (i6 = 0; i6 < n6; ++i6) {
      j3 = order[i6];
      if (top < bottom) {
        top += sums[j3];
        tops.push(j3);
      } else {
        bottom += sums[j3];
        bottoms.push(j3);
      }
    }
    return bottoms.reverse().concat(tops);
  }

  // node_modules/@nivo/core/node_modules/d3-shape/src/order/reverse.js
  function reverse_default(series) {
    return none_default2(series).reverse();
  }

  // node_modules/@nivo/core/dist/nivo-core.es.js
  var import_isPlainObject = __toESM(require_isPlainObject());
  var import_pick = __toESM(require_pick());
  var import_isEqual = __toESM(require_isEqual());
  var Pr = { background: "transparent", text: { fontFamily: "sans-serif", fontSize: 11, fill: "#333333", outlineWidth: 0, outlineColor: "transparent", outlineOpacity: 1 }, axis: { domain: { line: { stroke: "transparent", strokeWidth: 1 } }, ticks: { line: { stroke: "#777777", strokeWidth: 1 }, text: {} }, legend: { text: { fontSize: 12 } } }, grid: { line: { stroke: "#dddddd", strokeWidth: 1 } }, legends: { hidden: { symbol: { fill: "#333333", opacity: 0.6 }, text: { fill: "#333333", opacity: 0.6 } }, text: {}, ticks: { line: { stroke: "#777777", strokeWidth: 1 }, text: { fontSize: 10 } }, title: { text: {} } }, labels: { text: {} }, markers: { lineColor: "#000000", lineStrokeWidth: 1, text: {} }, dots: { text: {} }, tooltip: { container: { background: "white", color: "inherit", fontSize: "inherit", borderRadius: "2px", boxShadow: "0 1px 2px rgba(0, 0, 0, 0.25)", padding: "5px 9px" }, basic: { whiteSpace: "pre", display: "flex", alignItems: "center" }, chip: { marginRight: 7 }, table: {}, tableCell: { padding: "3px 5px" }, tableCellValue: { fontWeight: "bold" } }, crosshair: { line: { stroke: "#000000", strokeWidth: 1, strokeOpacity: 0.75, strokeDasharray: "6 6" } }, annotations: { text: { fontSize: 13, outlineWidth: 2, outlineColor: "#ffffff", outlineOpacity: 1 }, link: { stroke: "#000000", strokeWidth: 1, outlineWidth: 2, outlineColor: "#ffffff", outlineOpacity: 1 }, outline: { fill: "none", stroke: "#000000", strokeWidth: 2, outlineWidth: 2, outlineColor: "#ffffff", outlineOpacity: 1 }, symbol: { fill: "#000000", outlineWidth: 2, outlineColor: "#ffffff", outlineOpacity: 1 } } };
  function jr() {
    return jr = Object.assign ? Object.assign.bind() : function(e7) {
      for (var r6 = 1; r6 < arguments.length; r6++) {
        var t5 = arguments[r6];
        for (var n6 in t5)
          Object.prototype.hasOwnProperty.call(t5, n6) && (e7[n6] = t5[n6]);
      }
      return e7;
    }, jr.apply(this, arguments);
  }
  function Br(e7, r6) {
    if (null == e7)
      return {};
    var t5, n6, i6 = {}, o6 = Object.keys(e7);
    for (n6 = 0; n6 < o6.length; n6++)
      t5 = o6[n6], r6.indexOf(t5) >= 0 || (i6[t5] = e7[t5]);
    return i6;
  }
  var Gr = ["axis.ticks.text", "axis.legend.text", "legends.title.text", "legends.text", "legends.ticks.text", "legends.title.text", "labels.text", "dots.text", "markers.text", "annotations.text"];
  var Lr = function(e7, r6) {
    return jr({}, r6, e7);
  };
  var Ir = function(e7, r6) {
    var t5 = (0, import_merge.default)({}, e7, r6);
    return Gr.forEach(function(e8) {
      (0, import_set.default)(t5, e8, Lr((0, import_get.default)(t5, e8), t5.text));
    }), t5;
  };
  var Yr = (0, import_react17.createContext)();
  var Ar = function(e7) {
    var t5 = e7.children, n6 = e7.animate, i6 = void 0 === n6 || n6, o6 = e7.config, l5 = void 0 === o6 ? "default" : o6, a2 = (0, import_react17.useMemo)(function() {
      var e8 = (0, import_isString.default)(l5) ? config[l5] : l5;
      return { animate: i6, config: e8 };
    }, [i6, l5]);
    return (0, import_jsx_runtime2.jsx)(Yr.Provider, { value: a2, children: t5 });
  };
  var Er = { animate: import_prop_types.default.bool, motionConfig: import_prop_types.default.oneOfType([import_prop_types.default.oneOf(Object.keys(config)), import_prop_types.default.shape({ mass: import_prop_types.default.number, tension: import_prop_types.default.number, friction: import_prop_types.default.number, clamp: import_prop_types.default.bool, precision: import_prop_types.default.number, velocity: import_prop_types.default.number, duration: import_prop_types.default.number, easing: import_prop_types.default.func })]) };
  Ar.propTypes = { children: import_prop_types.default.node.isRequired, animate: Er.animate, config: Er.motionConfig };
  var Ur = function() {
    return (0, import_react17.useContext)(Yr);
  };
  var Xr = { nivo: ["#d76445", "#f47560", "#e8c1a0", "#97e3d5", "#61cdbb", "#00b0a7"], BrBG: (0, import_last.default)(scheme), PRGn: (0, import_last.default)(scheme2), PiYG: (0, import_last.default)(scheme3), PuOr: (0, import_last.default)(scheme4), RdBu: (0, import_last.default)(scheme5), RdGy: (0, import_last.default)(scheme6), RdYlBu: (0, import_last.default)(scheme7), RdYlGn: (0, import_last.default)(scheme8), spectral: (0, import_last.default)(scheme9), blues: (0, import_last.default)(scheme22), greens: (0, import_last.default)(scheme23), greys: (0, import_last.default)(scheme24), oranges: (0, import_last.default)(scheme27), purples: (0, import_last.default)(scheme25), reds: (0, import_last.default)(scheme26), BuGn: (0, import_last.default)(scheme10), BuPu: (0, import_last.default)(scheme11), GnBu: (0, import_last.default)(scheme12), OrRd: (0, import_last.default)(scheme13), PuBuGn: (0, import_last.default)(scheme14), PuBu: (0, import_last.default)(scheme15), PuRd: (0, import_last.default)(scheme16), RdPu: (0, import_last.default)(scheme17), YlGnBu: (0, import_last.default)(scheme18), YlGn: (0, import_last.default)(scheme19), YlOrBr: (0, import_last.default)(scheme20), YlOrRd: (0, import_last.default)(scheme21) };
  var Nr = Object.keys(Xr);
  var Kr = { nivo: ["#e8c1a0", "#f47560", "#f1e15b", "#e8a838", "#61cdbb", "#97e3d5"], category10: category10_default, accent: Accent_default, dark2: Dark2_default, paired: Paired_default, pastel1: Pastel1_default, pastel2: Pastel2_default, set1: Set1_default, set2: Set2_default, set3: Set3_default, brown_blueGreen: (0, import_last.default)(scheme), purpleRed_green: (0, import_last.default)(scheme2), pink_yellowGreen: (0, import_last.default)(scheme3), purple_orange: (0, import_last.default)(scheme4), red_blue: (0, import_last.default)(scheme5), red_grey: (0, import_last.default)(scheme6), red_yellow_blue: (0, import_last.default)(scheme7), red_yellow_green: (0, import_last.default)(scheme8), spectral: (0, import_last.default)(scheme9), blues: (0, import_last.default)(scheme22), greens: (0, import_last.default)(scheme23), greys: (0, import_last.default)(scheme24), oranges: (0, import_last.default)(scheme27), purples: (0, import_last.default)(scheme25), reds: (0, import_last.default)(scheme26), blue_green: (0, import_last.default)(scheme10), blue_purple: (0, import_last.default)(scheme11), green_blue: (0, import_last.default)(scheme12), orange_red: (0, import_last.default)(scheme13), purple_blue_green: (0, import_last.default)(scheme14), purple_blue: (0, import_last.default)(scheme15), purple_red: (0, import_last.default)(scheme16), red_purple: (0, import_last.default)(scheme17), yellow_green_blue: (0, import_last.default)(scheme18), yellow_green: (0, import_last.default)(scheme19), yellow_orange_brown: (0, import_last.default)(scheme20), yellow_orange_red: (0, import_last.default)(scheme21) };
  var et = import_prop_types.default.oneOfType([import_prop_types.default.oneOf(Nr), import_prop_types.default.func, import_prop_types.default.arrayOf(import_prop_types.default.string)]);
  var rt = { basis: basis_default2, basisClosed: basisClosed_default2, basisOpen: basisOpen_default, bundle: bundle_default, cardinal: cardinal_default, cardinalClosed: cardinalClosed_default, cardinalOpen: cardinalOpen_default, catmullRom: catmullRom_default, catmullRomClosed: catmullRomClosed_default, catmullRomOpen: catmullRomOpen_default, linear: linear_default, linearClosed: linearClosed_default, monotoneX, monotoneY, natural: natural_default, step: step_default, stepAfter, stepBefore };
  var tt = Object.keys(rt);
  var nt = tt.filter(function(e7) {
    return e7.endsWith("Closed");
  });
  var it = (0, import_without.default)(tt, "bundle", "basisClosed", "basisOpen", "cardinalClosed", "cardinalOpen", "catmullRomClosed", "catmullRomOpen", "linearClosed");
  var ot = (0, import_without.default)(tt, "bundle", "basisClosed", "basisOpen", "cardinalClosed", "cardinalOpen", "catmullRomClosed", "catmullRomOpen", "linearClosed");
  var at = { ascending: ascending_default, descending: descending_default, insideOut: insideOut_default, none: none_default2, reverse: reverse_default };
  var dt = Object.keys(at);
  var ut = { expand: expand_default, diverging: diverging_default, none: none_default, silhouette: silhouette_default, wiggle: wiggle_default };
  var ct = Object.keys(ut);
  var pt = import_prop_types.default.shape({ top: import_prop_types.default.number, right: import_prop_types.default.number, bottom: import_prop_types.default.number, left: import_prop_types.default.number }).isRequired;
  var ht = ["normal", "multiply", "screen", "overlay", "darken", "lighten", "color-dodge", "color-burn", "hard-light", "soft-light", "difference", "exclusion", "hue", "saturation", "color", "luminosity"];
  var gt = import_prop_types.default.oneOf(ht);
  var vt = ordinal(Set3_default);
  var _t = { top: 0, right: 0, bottom: 0, left: 0 };
  var wt = function(e7, t5, n6) {
    return void 0 === n6 && (n6 = {}), (0, import_react17.useMemo)(function() {
      var r6 = jr({}, _t, n6);
      return { margin: r6, innerWidth: e7 - r6.left - r6.right, innerHeight: t5 - r6.top - r6.bottom, outerWidth: e7, outerHeight: t5 };
    }, [e7, t5, n6.top, n6.right, n6.bottom, n6.left]);
  };
  var kt = function() {
    var e7 = (0, import_react17.useRef)(null), r6 = (0, import_react17.useState)({ left: 0, top: 0, width: 0, height: 0 }), t5 = r6[0], l5 = r6[1], a2 = (0, import_react17.useState)(function() {
      return "undefined" == typeof ResizeObserver ? null : new ResizeObserver(function(e8) {
        var r7 = e8[0];
        return l5(r7.contentRect);
      });
    })[0];
    return (0, import_react17.useEffect)(function() {
      return e7.current && null !== a2 && a2.observe(e7.current), function() {
        null !== a2 && a2.disconnect();
      };
    }, []), [e7, t5];
  };
  var Rt = function(e7) {
    return (0, import_react17.useMemo)(function() {
      return Ir(Pr, e7);
    }, [e7]);
  };
  var xt = function(e7) {
    return "function" == typeof e7 ? e7 : "string" == typeof e7 ? 0 === e7.indexOf("time:") ? timeFormat(e7.slice("5")) : format(e7) : function(e8) {
      return "" + e8;
    };
  };
  var Ot = function(e7) {
    return (0, import_react17.useMemo)(function() {
      return xt(e7);
    }, [e7]);
  };
  var qt = (0, import_react17.createContext)();
  var Ct = {};
  var Wt = function(e7) {
    var r6 = e7.theme, t5 = void 0 === r6 ? Ct : r6, n6 = e7.children, i6 = Rt(t5);
    return (0, import_jsx_runtime2.jsx)(qt.Provider, { value: i6, children: n6 });
  };
  Wt.propTypes = { children: import_prop_types.default.node.isRequired, theme: import_prop_types.default.object };
  var zt = function() {
    return (0, import_react17.useContext)(qt);
  };
  var Tt = ["outlineWidth", "outlineColor", "outlineOpacity"];
  var Mt = function(e7) {
    return e7.outlineWidth, e7.outlineColor, e7.outlineOpacity, Br(e7, Tt);
  };
  var Pt = function(e7) {
    var r6 = e7.children, t5 = e7.condition, n6 = e7.wrapper;
    return t5 ? (0, import_react17.cloneElement)(n6, {}, r6) : r6;
  };
  Pt.propTypes = { children: import_prop_types.default.node.isRequired, condition: import_prop_types.default.bool.isRequired, wrapper: import_prop_types.default.element.isRequired };
  var jt = { position: "relative" };
  var St = function(e7) {
    var r6 = e7.children, t5 = e7.theme, i6 = e7.renderWrapper, o6 = void 0 === i6 || i6, l5 = e7.isInteractive, a2 = void 0 === l5 || l5, d2 = e7.animate, s3 = e7.motionConfig, u5 = (0, import_react17.useRef)(null);
    return (0, import_jsx_runtime2.jsx)(Wt, { theme: t5, children: (0, import_jsx_runtime2.jsx)(Ar, { animate: d2, config: s3, children: (0, import_jsx_runtime2.jsx)(M, { container: u5, children: (0, import_jsx_runtime2.jsxs)(Pt, { condition: o6, wrapper: (0, import_jsx_runtime2.jsx)("div", { style: jt, ref: u5 }), children: [r6, a2 && (0, import_jsx_runtime2.jsx)(F, {})] }) }) }) });
  };
  St.propTypes = { children: import_prop_types.default.element.isRequired, isInteractive: import_prop_types.default.bool, renderWrapper: import_prop_types.default.bool, theme: import_prop_types.default.object, animate: import_prop_types.default.bool, motionConfig: import_prop_types.default.oneOfType([import_prop_types.default.string, Er.motionConfig]) };
  var Bt = function() {
  };
  var Gt = { position: "relative" };
  var Lt = function(e7) {
    var t5 = e7.children, i6 = e7.theme, o6 = e7.isInteractive, l5 = void 0 === o6 || o6, d2 = e7.renderWrapper, s3 = void 0 === d2 || d2, u5 = e7.animate, c8 = e7.motionConfig, f2 = (0, import_react17.useRef)(null), m4 = V(f2), y4 = m4.actions, v4 = m4.state, _2 = (0, import_react17.useCallback)(function(e8, r6) {
      return y4.showTooltipFromEvent(e8, r6);
    }, [y4.showTooltipFromEvent]), w3 = (0, import_react17.useMemo)(function() {
      return { showTooltip: l5 ? _2 : Bt, hideTooltip: l5 ? y4.hideTooltip : Bt };
    }, [y4.hideTooltip, l5, _2]);
    return (0, import_jsx_runtime2.jsx)(Wt, { theme: i6, children: (0, import_jsx_runtime2.jsx)(Ar, { animate: u5, config: c8, children: (0, import_jsx_runtime2.jsx)(j.Provider, { value: y4, children: (0, import_jsx_runtime2.jsx)(O.Provider, { value: v4, children: (0, import_jsx_runtime2.jsxs)(Pt, { condition: s3, wrapper: (0, import_jsx_runtime2.jsx)("div", { style: Gt, ref: f2 }), children: [t5(w3), l5 && (0, import_jsx_runtime2.jsx)(F, {})] }) }) }) }) });
  };
  Lt.propTypes = { children: import_prop_types.default.func.isRequired, isInteractive: import_prop_types.default.bool, renderWrapper: import_prop_types.default.bool, theme: import_prop_types.default.object.isRequired, animate: import_prop_types.default.bool.isRequired, motionConfig: import_prop_types.default.oneOfType([import_prop_types.default.string, Er.motionConfig]) };
  var It = function(e7) {
    var r6 = e7.children, t5 = kt(), n6 = t5[0], i6 = t5[1], o6 = i6.width > 0 && i6.height > 0;
    return (0, import_jsx_runtime2.jsx)("div", { ref: n6, style: { width: "100%", height: "100%" }, children: o6 && r6({ width: i6.width, height: i6.height }) });
  };
  It.propTypes = { children: import_prop_types.default.func.isRequired };
  var Yt = ["id", "colors"];
  var Dt = function(e7) {
    var r6 = e7.id, t5 = e7.colors, n6 = Br(e7, Yt);
    return (0, import_jsx_runtime2.jsx)("linearGradient", jr({ id: r6, x1: 0, x2: 0, y1: 0, y2: 1 }, n6, { children: t5.map(function(e8) {
      var r7 = e8.offset, t6 = e8.color, n7 = e8.opacity;
      return (0, import_jsx_runtime2.jsx)("stop", { offset: r7 + "%", stopColor: t6, stopOpacity: void 0 !== n7 ? n7 : 1 }, r7);
    }) }));
  };
  Dt.propTypes = { id: import_prop_types.default.string.isRequired, colors: import_prop_types.default.arrayOf(import_prop_types.default.shape({ offset: import_prop_types.default.number.isRequired, color: import_prop_types.default.string.isRequired, opacity: import_prop_types.default.number })).isRequired, gradientTransform: import_prop_types.default.string };
  var Et = { linearGradient: Dt };
  var Ut = { color: "#000000", background: "#ffffff", size: 4, padding: 4, stagger: false };
  var Ft = (0, import_react17.memo)(function(e7) {
    var r6 = e7.id, t5 = e7.background, n6 = void 0 === t5 ? Ut.background : t5, i6 = e7.color, o6 = void 0 === i6 ? Ut.color : i6, l5 = e7.size, a2 = void 0 === l5 ? Ut.size : l5, d2 = e7.padding, s3 = void 0 === d2 ? Ut.padding : d2, u5 = e7.stagger, c8 = void 0 === u5 ? Ut.stagger : u5, f2 = a2 + s3, p2 = a2 / 2, h = s3 / 2;
    return true === c8 && (f2 = 2 * a2 + 2 * s3), (0, import_jsx_runtime2.jsxs)("pattern", { id: r6, width: f2, height: f2, patternUnits: "userSpaceOnUse", children: [(0, import_jsx_runtime2.jsx)("rect", { width: f2, height: f2, fill: n6 }), (0, import_jsx_runtime2.jsx)("circle", { cx: h + p2, cy: h + p2, r: p2, fill: o6 }), c8 && (0, import_jsx_runtime2.jsx)("circle", { cx: 1.5 * s3 + a2 + p2, cy: 1.5 * s3 + a2 + p2, r: p2, fill: o6 })] });
  });
  Ft.displayName = "PatternDots", Ft.propTypes = { id: import_prop_types.default.string.isRequired, color: import_prop_types.default.string.isRequired, background: import_prop_types.default.string.isRequired, size: import_prop_types.default.number.isRequired, padding: import_prop_types.default.number.isRequired, stagger: import_prop_types.default.bool.isRequired };
  var Nt = 2 * Math.PI;
  var Ht = function(e7) {
    return e7 * Math.PI / 180;
  };
  var nn = { spacing: 5, rotation: 0, background: "#000000", color: "#ffffff", lineWidth: 2 };
  var on = (0, import_react17.memo)(function(e7) {
    var r6 = e7.id, t5 = e7.spacing, n6 = void 0 === t5 ? nn.spacing : t5, i6 = e7.rotation, o6 = void 0 === i6 ? nn.rotation : i6, l5 = e7.background, a2 = void 0 === l5 ? nn.background : l5, d2 = e7.color, s3 = void 0 === d2 ? nn.color : d2, u5 = e7.lineWidth, c8 = void 0 === u5 ? nn.lineWidth : u5, f2 = Math.round(o6) % 360, p2 = Math.abs(n6);
    f2 > 180 ? f2 -= 360 : f2 > 90 ? f2 -= 180 : f2 < -180 ? f2 += 360 : f2 < -90 && (f2 += 180);
    var h, g2 = p2, b3 = p2;
    return 0 === f2 ? h = "\n                M 0 0 L " + g2 + " 0\n                M 0 " + b3 + " L " + g2 + " " + b3 + "\n            " : 90 === f2 ? h = "\n                M 0 0 L 0 " + b3 + "\n                M " + g2 + " 0 L " + g2 + " " + b3 + "\n            " : (g2 = Math.abs(p2 / Math.sin(Ht(f2))), b3 = p2 / Math.sin(Ht(90 - f2)), h = f2 > 0 ? "\n                    M 0 " + -b3 + " L " + 2 * g2 + " " + b3 + "\n                    M " + -g2 + " " + -b3 + " L " + g2 + " " + b3 + "\n                    M " + -g2 + " 0 L " + g2 + " " + 2 * b3 + "\n                " : "\n                    M " + -g2 + " " + b3 + " L " + g2 + " " + -b3 + "\n                    M " + -g2 + " " + 2 * b3 + " L " + 2 * g2 + " " + -b3 + "\n                    M 0 " + 2 * b3 + " L " + 2 * g2 + " 0\n                "), (0, import_jsx_runtime2.jsxs)("pattern", { id: r6, width: g2, height: b3, patternUnits: "userSpaceOnUse", children: [(0, import_jsx_runtime2.jsx)("rect", { width: g2, height: b3, fill: a2, stroke: "rgba(255, 0, 0, 0.1)", strokeWidth: 0 }), (0, import_jsx_runtime2.jsx)("path", { d: h, strokeWidth: c8, stroke: s3, strokeLinecap: "square" })] });
  });
  on.displayName = "PatternLines", on.propTypes = { id: import_prop_types.default.string.isRequired, spacing: import_prop_types.default.number.isRequired, rotation: import_prop_types.default.number.isRequired, background: import_prop_types.default.string.isRequired, color: import_prop_types.default.string.isRequired, lineWidth: import_prop_types.default.number.isRequired };
  var an = { color: "#000000", background: "#ffffff", size: 4, padding: 4, stagger: false };
  var dn = (0, import_react17.memo)(function(e7) {
    var r6 = e7.id, t5 = e7.color, n6 = void 0 === t5 ? an.color : t5, i6 = e7.background, o6 = void 0 === i6 ? an.background : i6, l5 = e7.size, a2 = void 0 === l5 ? an.size : l5, d2 = e7.padding, s3 = void 0 === d2 ? an.padding : d2, u5 = e7.stagger, c8 = void 0 === u5 ? an.stagger : u5, f2 = a2 + s3, p2 = s3 / 2;
    return true === c8 && (f2 = 2 * a2 + 2 * s3), (0, import_jsx_runtime2.jsxs)("pattern", { id: r6, width: f2, height: f2, patternUnits: "userSpaceOnUse", children: [(0, import_jsx_runtime2.jsx)("rect", { width: f2, height: f2, fill: o6 }), (0, import_jsx_runtime2.jsx)("rect", { x: p2, y: p2, width: a2, height: a2, fill: n6 }), c8 && (0, import_jsx_runtime2.jsx)("rect", { x: 1.5 * s3 + a2, y: 1.5 * s3 + a2, width: a2, height: a2, fill: n6 })] });
  });
  dn.displayName = "PatternSquares", dn.propTypes = { id: import_prop_types.default.string.isRequired, color: import_prop_types.default.string.isRequired, background: import_prop_types.default.string.isRequired, size: import_prop_types.default.number.isRequired, padding: import_prop_types.default.number.isRequired, stagger: import_prop_types.default.bool.isRequired };
  var un = { patternDots: Ft, patternLines: on, patternSquares: dn };
  var cn = ["type"];
  var fn = jr({}, Et, un);
  var pn = function(e7) {
    var r6 = e7.defs;
    return !r6 || r6.length < 1 ? null : (0, import_jsx_runtime2.jsx)("defs", { "aria-hidden": true, children: r6.map(function(e8) {
      var r7 = e8.type, t5 = Br(e8, cn);
      return fn[r7] ? (0, import_react17.createElement)(fn[r7], jr({ key: t5.id }, t5)) : null;
    }) });
  };
  pn.propTypes = { defs: import_prop_types.default.arrayOf(import_prop_types.default.shape({ type: import_prop_types.default.oneOf(Object.keys(fn)).isRequired, id: import_prop_types.default.string.isRequired })) };
  var hn = (0, import_react17.memo)(pn);
  var gn = function(e7) {
    var r6 = e7.width, t5 = e7.height, n6 = e7.margin, i6 = e7.defs, o6 = e7.children, l5 = e7.role, a2 = e7.ariaLabel, d2 = e7.ariaLabelledBy, s3 = e7.ariaDescribedBy, u5 = e7.isFocusable, c8 = zt();
    return (0, import_jsx_runtime2.jsxs)("svg", { xmlns: "http://www.w3.org/2000/svg", width: r6, height: t5, role: l5, "aria-label": a2, "aria-labelledby": d2, "aria-describedby": s3, focusable: u5, tabIndex: u5 ? 0 : void 0, children: [(0, import_jsx_runtime2.jsx)(hn, { defs: i6 }), (0, import_jsx_runtime2.jsx)("rect", { width: r6, height: t5, fill: c8.background }), (0, import_jsx_runtime2.jsx)("g", { transform: "translate(" + n6.left + "," + n6.top + ")", children: o6 })] });
  };
  gn.propTypes = { width: import_prop_types.default.number.isRequired, height: import_prop_types.default.number.isRequired, margin: import_prop_types.default.shape({ top: import_prop_types.default.number.isRequired, left: import_prop_types.default.number.isRequired }).isRequired, defs: import_prop_types.default.array, children: import_prop_types.default.oneOfType([import_prop_types.default.arrayOf(import_prop_types.default.node), import_prop_types.default.node]).isRequired, role: import_prop_types.default.string, isFocusable: import_prop_types.default.bool, ariaLabel: import_prop_types.default.string, ariaLabelledBy: import_prop_types.default.string, ariaDescribedBy: import_prop_types.default.string };
  var bn = function(e7) {
    var r6 = e7.size, t5 = e7.color, n6 = e7.borderWidth, i6 = e7.borderColor;
    return (0, import_jsx_runtime2.jsx)("circle", { r: r6 / 2, fill: t5, stroke: i6, strokeWidth: n6, style: { pointerEvents: "none" } });
  };
  bn.propTypes = { size: import_prop_types.default.number.isRequired, color: import_prop_types.default.string.isRequired, borderWidth: import_prop_types.default.number.isRequired, borderColor: import_prop_types.default.string.isRequired };
  var mn = (0, import_react17.memo)(bn);
  var yn = function(e7) {
    var r6 = e7.x, t5 = e7.y, n6 = e7.symbol, i6 = void 0 === n6 ? mn : n6, o6 = e7.size, l5 = e7.datum, a2 = e7.color, d2 = e7.borderWidth, u5 = e7.borderColor, c8 = e7.label, f2 = e7.labelTextAnchor, p2 = void 0 === f2 ? "middle" : f2, h = e7.labelYOffset, g2 = void 0 === h ? -12 : h, b3 = zt(), m4 = Ur(), y4 = m4.animate, v4 = m4.config, _2 = useSpring({ transform: "translate(" + r6 + ", " + t5 + ")", config: v4, immediate: !y4 });
    return (0, import_jsx_runtime2.jsxs)(animated2.g, { transform: _2.transform, style: { pointerEvents: "none" }, children: [(0, import_react17.createElement)(i6, { size: o6, color: a2, datum: l5, borderWidth: d2, borderColor: u5 }), c8 && (0, import_jsx_runtime2.jsx)("text", { textAnchor: p2, y: g2, style: Mt(b3.dots.text), children: c8 })] });
  };
  yn.propTypes = { x: import_prop_types.default.number.isRequired, y: import_prop_types.default.number.isRequired, datum: import_prop_types.default.object.isRequired, size: import_prop_types.default.number.isRequired, color: import_prop_types.default.string.isRequired, borderWidth: import_prop_types.default.number.isRequired, borderColor: import_prop_types.default.string.isRequired, symbol: import_prop_types.default.oneOfType([import_prop_types.default.func, import_prop_types.default.object]), label: import_prop_types.default.oneOfType([import_prop_types.default.string, import_prop_types.default.number]), labelTextAnchor: import_prop_types.default.oneOf(["start", "middle", "end"]), labelYOffset: import_prop_types.default.number };
  var vn = (0, import_react17.memo)(yn);
  var _n = function(e7) {
    var r6 = e7.width, t5 = e7.height, n6 = e7.axis, i6 = e7.scale, o6 = e7.value, l5 = e7.lineStyle, a2 = e7.textStyle, d2 = e7.legend, s3 = e7.legendNode, u5 = e7.legendPosition, c8 = void 0 === u5 ? "top-right" : u5, f2 = e7.legendOffsetX, p2 = void 0 === f2 ? 14 : f2, h = e7.legendOffsetY, g2 = void 0 === h ? 14 : h, b3 = e7.legendOrientation, m4 = void 0 === b3 ? "horizontal" : b3, y4 = zt(), v4 = 0, _2 = 0, w3 = 0, k2 = 0;
    if ("y" === n6 ? (w3 = i6(o6), _2 = r6) : (v4 = i6(o6), k2 = t5), d2 && !s3) {
      var R2 = function(e8) {
        var r7 = e8.axis, t6 = e8.width, n7 = e8.height, i7 = e8.position, o7 = e8.offsetX, l6 = e8.offsetY, a3 = e8.orientation, d3 = 0, s4 = 0, u6 = "vertical" === a3 ? -90 : 0, c9 = "start";
        if ("x" === r7)
          switch (i7) {
            case "top-left":
              d3 = -o7, s4 = l6, c9 = "end";
              break;
            case "top":
              s4 = -l6, c9 = "horizontal" === a3 ? "middle" : "start";
              break;
            case "top-right":
              d3 = o7, s4 = l6, c9 = "horizontal" === a3 ? "start" : "end";
              break;
            case "right":
              d3 = o7, s4 = n7 / 2, c9 = "horizontal" === a3 ? "start" : "middle";
              break;
            case "bottom-right":
              d3 = o7, s4 = n7 - l6, c9 = "start";
              break;
            case "bottom":
              s4 = n7 + l6, c9 = "horizontal" === a3 ? "middle" : "end";
              break;
            case "bottom-left":
              s4 = n7 - l6, d3 = -o7, c9 = "horizontal" === a3 ? "end" : "start";
              break;
            case "left":
              d3 = -o7, s4 = n7 / 2, c9 = "horizontal" === a3 ? "end" : "middle";
          }
        else
          switch (i7) {
            case "top-left":
              d3 = o7, s4 = -l6, c9 = "start";
              break;
            case "top":
              d3 = t6 / 2, s4 = -l6, c9 = "horizontal" === a3 ? "middle" : "start";
              break;
            case "top-right":
              d3 = t6 - o7, s4 = -l6, c9 = "horizontal" === a3 ? "end" : "start";
              break;
            case "right":
              d3 = t6 + o7, c9 = "horizontal" === a3 ? "start" : "middle";
              break;
            case "bottom-right":
              d3 = t6 - o7, s4 = l6, c9 = "end";
              break;
            case "bottom":
              d3 = t6 / 2, s4 = l6, c9 = "horizontal" === a3 ? "middle" : "end";
              break;
            case "bottom-left":
              d3 = o7, s4 = l6, c9 = "horizontal" === a3 ? "start" : "end";
              break;
            case "left":
              d3 = -o7, c9 = "horizontal" === a3 ? "end" : "middle";
          }
        return { x: d3, y: s4, rotation: u6, textAnchor: c9 };
      }({ axis: n6, width: r6, height: t5, position: c8, offsetX: p2, offsetY: g2, orientation: m4 });
      s3 = (0, import_jsx_runtime2.jsx)("text", { transform: "translate(" + R2.x + ", " + R2.y + ") rotate(" + R2.rotation + ")", textAnchor: R2.textAnchor, dominantBaseline: "central", style: a2, children: d2 });
    }
    return (0, import_jsx_runtime2.jsxs)("g", { transform: "translate(" + v4 + ", " + w3 + ")", children: [(0, import_jsx_runtime2.jsx)("line", { x1: 0, x2: _2, y1: 0, y2: k2, stroke: y4.markers.lineColor, strokeWidth: y4.markers.lineStrokeWidth, style: l5 }), s3] });
  };
  _n.propTypes = { width: import_prop_types.default.number.isRequired, height: import_prop_types.default.number.isRequired, axis: import_prop_types.default.oneOf(["x", "y"]).isRequired, scale: import_prop_types.default.func.isRequired, value: import_prop_types.default.oneOfType([import_prop_types.default.number, import_prop_types.default.string, import_prop_types.default.instanceOf(Date)]).isRequired, lineStyle: import_prop_types.default.object, textStyle: import_prop_types.default.object, legend: import_prop_types.default.string, legendPosition: import_prop_types.default.oneOf(["top-left", "top", "top-right", "right", "bottom-right", "bottom", "bottom-left", "left"]), legendOffsetX: import_prop_types.default.number.isRequired, legendOffsetY: import_prop_types.default.number.isRequired, legendOrientation: import_prop_types.default.oneOf(["horizontal", "vertical"]).isRequired };
  var wn = (0, import_react17.memo)(_n);
  var kn = function(e7) {
    var r6 = e7.markers, t5 = e7.width, n6 = e7.height, i6 = e7.xScale, o6 = e7.yScale;
    return r6 && 0 !== r6.length ? r6.map(function(e8, r7) {
      return (0, import_jsx_runtime2.jsx)(wn, jr({}, e8, { width: t5, height: n6, scale: "y" === e8.axis ? o6 : i6 }), r7);
    }) : null;
  };
  kn.propTypes = { width: import_prop_types.default.number.isRequired, height: import_prop_types.default.number.isRequired, xScale: import_prop_types.default.func.isRequired, yScale: import_prop_types.default.func.isRequired, markers: import_prop_types.default.arrayOf(import_prop_types.default.shape({ axis: import_prop_types.default.oneOf(["x", "y"]).isRequired, value: import_prop_types.default.oneOfType([import_prop_types.default.number, import_prop_types.default.string, import_prop_types.default.instanceOf(Date)]).isRequired, lineStyle: import_prop_types.default.object, textStyle: import_prop_types.default.object })) };
  var Rn = (0, import_react17.memo)(kn);
  var Cn = function(e7) {
    return (0, import_isFunction.default)(e7) ? e7 : function(r6) {
      return (0, import_get.default)(r6, e7);
    };
  };
  var Wn = function(e7) {
    return (0, import_react17.useMemo)(function() {
      return Cn(e7);
    }, [e7]);
  };
  var Mn = function(e7, r6, t5, n6) {
    var i6 = t5 - e7, o6 = n6 - r6;
    return i6 *= i6, o6 *= o6, Math.sqrt(i6 + o6);
  };
  var Sn = function(e7, r6) {
    var t5, n6 = "touches" in r6 ? r6.touches[0] : r6, i6 = n6.clientX, o6 = n6.clientY, l5 = e7.getBoundingClientRect(), a2 = (t5 = void 0 !== e7.getBBox ? e7.getBBox() : { width: e7.offsetWidth || 0, height: e7.offsetHeight || 0 }).width === l5.width ? 1 : t5.width / l5.width;
    return [(i6 - l5.left) * a2, (o6 - l5.top) * a2];
  };
  var Bn = Object.keys(Et);
  var Gn = Object.keys(un);

  // node_modules/@nivo/tree/node_modules/@react-spring/web/dist/react-spring_web.modern.mjs
  var import_react_dom3 = __toESM(require_react_dom(), 1);
  var isCustomPropRE3 = /^--/;
  function dangerousStyleValue3(name, value) {
    if (value == null || typeof value === "boolean" || value === "")
      return "";
    if (typeof value === "number" && value !== 0 && !isCustomPropRE3.test(name) && !(isUnitlessNumber3.hasOwnProperty(name) && isUnitlessNumber3[name]))
      return value + "px";
    return ("" + value).trim();
  }
  var attributeCache3 = {};
  function applyAnimatedValues3(instance, props) {
    if (!instance.nodeType || !instance.setAttribute) {
      return false;
    }
    const isFilterElement = instance.nodeName === "filter" || instance.parentNode && instance.parentNode.nodeName === "filter";
    const {
      className,
      style,
      children,
      scrollTop,
      scrollLeft,
      viewBox,
      ...attributes
    } = props;
    const values = Object.values(attributes);
    const names2 = Object.keys(attributes).map(
      (name) => isFilterElement || instance.hasAttribute(name) ? name : attributeCache3[name] || (attributeCache3[name] = name.replace(
        /([A-Z])/g,
        (n6) => "-" + n6.toLowerCase()
      ))
    );
    if (children !== void 0) {
      instance.textContent = children;
    }
    for (const name in style) {
      if (style.hasOwnProperty(name)) {
        const value = dangerousStyleValue3(name, style[name]);
        if (isCustomPropRE3.test(name)) {
          instance.style.setProperty(name, value);
        } else {
          instance.style[name] = value;
        }
      }
    }
    names2.forEach((name, i6) => {
      instance.setAttribute(name, values[i6]);
    });
    if (className !== void 0) {
      instance.className = className;
    }
    if (scrollTop !== void 0) {
      instance.scrollTop = scrollTop;
    }
    if (scrollLeft !== void 0) {
      instance.scrollLeft = scrollLeft;
    }
    if (viewBox !== void 0) {
      instance.setAttribute("viewBox", viewBox);
    }
  }
  var isUnitlessNumber3 = {
    animationIterationCount: true,
    borderImageOutset: true,
    borderImageSlice: true,
    borderImageWidth: true,
    boxFlex: true,
    boxFlexGroup: true,
    boxOrdinalGroup: true,
    columnCount: true,
    columns: true,
    flex: true,
    flexGrow: true,
    flexPositive: true,
    flexShrink: true,
    flexNegative: true,
    flexOrder: true,
    gridRow: true,
    gridRowEnd: true,
    gridRowSpan: true,
    gridRowStart: true,
    gridColumn: true,
    gridColumnEnd: true,
    gridColumnSpan: true,
    gridColumnStart: true,
    fontWeight: true,
    lineClamp: true,
    lineHeight: true,
    opacity: true,
    order: true,
    orphans: true,
    tabSize: true,
    widows: true,
    zIndex: true,
    zoom: true,
    fillOpacity: true,
    floodOpacity: true,
    stopOpacity: true,
    strokeDasharray: true,
    strokeDashoffset: true,
    strokeMiterlimit: true,
    strokeOpacity: true,
    strokeWidth: true
  };
  var prefixKey3 = (prefix2, key) => prefix2 + key.charAt(0).toUpperCase() + key.substring(1);
  var prefixes4 = ["Webkit", "Ms", "Moz", "O"];
  isUnitlessNumber3 = Object.keys(isUnitlessNumber3).reduce((acc, prop) => {
    prefixes4.forEach((prefix2) => acc[prefixKey3(prefix2, prop)] = acc[prop]);
    return acc;
  }, isUnitlessNumber3);
  var domTransforms3 = /^(matrix|translate|scale|rotate|skew)/;
  var pxTransforms3 = /^(translate)/;
  var degTransforms3 = /^(rotate|skew)/;
  var addUnit3 = (value, unit2) => is.num(value) && value !== 0 ? value + unit2 : value;
  var isValueIdentity3 = (value, id) => is.arr(value) ? value.every((v4) => isValueIdentity3(v4, id)) : is.num(value) ? value === id : parseFloat(value) === id;
  var AnimatedStyle3 = class extends AnimatedObject {
    constructor({ x: x3, y: y4, z: z3, ...style }) {
      const inputs = [];
      const transforms = [];
      if (x3 || y4 || z3) {
        inputs.push([x3 || 0, y4 || 0, z3 || 0]);
        transforms.push((xyz) => [
          `translate3d(${xyz.map((v4) => addUnit3(v4, "px")).join(",")})`,
          isValueIdentity3(xyz, 0)
        ]);
      }
      eachProp(style, (value, key) => {
        if (key === "transform") {
          inputs.push([value || ""]);
          transforms.push((transform) => [transform, transform === ""]);
        } else if (domTransforms3.test(key)) {
          delete style[key];
          if (is.und(value))
            return;
          const unit2 = pxTransforms3.test(key) ? "px" : degTransforms3.test(key) ? "deg" : "";
          inputs.push(toArray(value));
          transforms.push(
            key === "rotate3d" ? ([x22, y22, z22, deg]) => [
              `rotate3d(${x22},${y22},${z22},${addUnit3(deg, unit2)})`,
              isValueIdentity3(deg, 0)
            ] : (input) => [
              `${key}(${input.map((v4) => addUnit3(v4, unit2)).join(",")})`,
              isValueIdentity3(input, key.startsWith("scale") ? 1 : 0)
            ]
          );
        }
      });
      if (inputs.length) {
        style.transform = new FluidTransform3(inputs, transforms);
      }
      super(style);
    }
  };
  var FluidTransform3 = class extends FluidValue {
    constructor(inputs, transforms) {
      super();
      this.inputs = inputs;
      this.transforms = transforms;
      this._value = null;
    }
    get() {
      return this._value || (this._value = this._get());
    }
    _get() {
      let transform = "";
      let identity2 = true;
      each2(this.inputs, (input, i6) => {
        const arg1 = getFluidValue(input[0]);
        const [t5, id] = this.transforms[i6](
          is.arr(arg1) ? arg1 : input.map(getFluidValue)
        );
        transform += " " + t5;
        identity2 = identity2 && id;
      });
      return identity2 ? "none" : transform;
    }
    observerAdded(count2) {
      if (count2 == 1)
        each2(
          this.inputs,
          (input) => each2(
            input,
            (value) => hasFluidValue(value) && addFluidObserver(value, this)
          )
        );
    }
    observerRemoved(count2) {
      if (count2 == 0)
        each2(
          this.inputs,
          (input) => each2(
            input,
            (value) => hasFluidValue(value) && removeFluidObserver(value, this)
          )
        );
    }
    eventObserved(event) {
      if (event.type == "change") {
        this._value = null;
      }
      callFluidObservers(this, event);
    }
  };
  var primitives3 = [
    "a",
    "abbr",
    "address",
    "area",
    "article",
    "aside",
    "audio",
    "b",
    "base",
    "bdi",
    "bdo",
    "big",
    "blockquote",
    "body",
    "br",
    "button",
    "canvas",
    "caption",
    "cite",
    "code",
    "col",
    "colgroup",
    "data",
    "datalist",
    "dd",
    "del",
    "details",
    "dfn",
    "dialog",
    "div",
    "dl",
    "dt",
    "em",
    "embed",
    "fieldset",
    "figcaption",
    "figure",
    "footer",
    "form",
    "h1",
    "h2",
    "h3",
    "h4",
    "h5",
    "h6",
    "head",
    "header",
    "hgroup",
    "hr",
    "html",
    "i",
    "iframe",
    "img",
    "input",
    "ins",
    "kbd",
    "keygen",
    "label",
    "legend",
    "li",
    "link",
    "main",
    "map",
    "mark",
    "menu",
    "menuitem",
    "meta",
    "meter",
    "nav",
    "noscript",
    "object",
    "ol",
    "optgroup",
    "option",
    "output",
    "p",
    "param",
    "picture",
    "pre",
    "progress",
    "q",
    "rp",
    "rt",
    "ruby",
    "s",
    "samp",
    "script",
    "section",
    "select",
    "small",
    "source",
    "span",
    "strong",
    "style",
    "sub",
    "summary",
    "sup",
    "table",
    "tbody",
    "td",
    "textarea",
    "tfoot",
    "th",
    "thead",
    "time",
    "title",
    "tr",
    "track",
    "u",
    "ul",
    "var",
    "video",
    "wbr",
    "circle",
    "clipPath",
    "defs",
    "ellipse",
    "foreignObject",
    "g",
    "image",
    "line",
    "linearGradient",
    "mask",
    "path",
    "pattern",
    "polygon",
    "polyline",
    "radialGradient",
    "rect",
    "stop",
    "svg",
    "text",
    "tspan"
  ];
  globals_exports.assign({
    batchedUpdates: import_react_dom3.unstable_batchedUpdates,
    createStringInterpolator: createStringInterpolator2,
    colors: colors22
  });
  var host3 = createHost(primitives3, {
    applyAnimatedValues: applyAnimatedValues3,
    createAnimatedStyle: (style) => new AnimatedStyle3(style),
    getComponentProps: ({ scrollTop, scrollLeft, ...props }) => props
  });
  var animated3 = host3.animated;

  // node_modules/@nivo/tree/node_modules/d3-hierarchy/src/cluster.js
  function defaultSeparation(a2, b3) {
    return a2.parent === b3.parent ? 1 : 2;
  }
  function meanX(children) {
    return children.reduce(meanXReduce, 0) / children.length;
  }
  function meanXReduce(x3, c8) {
    return x3 + c8.x;
  }
  function maxY(children) {
    return 1 + children.reduce(maxYReduce, 0);
  }
  function maxYReduce(y4, c8) {
    return Math.max(y4, c8.y);
  }
  function leafLeft(node) {
    var children;
    while (children = node.children)
      node = children[0];
    return node;
  }
  function leafRight(node) {
    var children;
    while (children = node.children)
      node = children[children.length - 1];
    return node;
  }
  function cluster_default() {
    var separation = defaultSeparation, dx = 1, dy = 1, nodeSize = false;
    function cluster(root) {
      var previousNode, x3 = 0;
      root.eachAfter(function(node) {
        var children = node.children;
        if (children) {
          node.x = meanX(children);
          node.y = maxY(children);
        } else {
          node.x = previousNode ? x3 += separation(node, previousNode) : 0;
          node.y = 0;
          previousNode = node;
        }
      });
      var left = leafLeft(root), right = leafRight(root), x0 = left.x - separation(left, right) / 2, x1 = right.x + separation(right, left) / 2;
      return root.eachAfter(nodeSize ? function(node) {
        node.x = (node.x - root.x) * dx;
        node.y = (root.y - node.y) * dy;
      } : function(node) {
        node.x = (node.x - x0) / (x1 - x0) * dx;
        node.y = (1 - (root.y ? node.y / root.y : 1)) * dy;
      });
    }
    cluster.separation = function(x3) {
      return arguments.length ? (separation = x3, cluster) : separation;
    };
    cluster.size = function(x3) {
      return arguments.length ? (nodeSize = false, dx = +x3[0], dy = +x3[1], cluster) : nodeSize ? null : [dx, dy];
    };
    cluster.nodeSize = function(x3) {
      return arguments.length ? (nodeSize = true, dx = +x3[0], dy = +x3[1], cluster) : nodeSize ? [dx, dy] : null;
    };
    return cluster;
  }

  // node_modules/@nivo/tree/node_modules/d3-hierarchy/src/hierarchy/count.js
  function count(node) {
    var sum3 = 0, children = node.children, i6 = children && children.length;
    if (!i6)
      sum3 = 1;
    else
      while (--i6 >= 0)
        sum3 += children[i6].value;
    node.value = sum3;
  }
  function count_default() {
    return this.eachAfter(count);
  }

  // node_modules/@nivo/tree/node_modules/d3-hierarchy/src/hierarchy/each.js
  function each_default(callback2, that) {
    let index = -1;
    for (const node of this) {
      callback2.call(that, node, ++index, this);
    }
    return this;
  }

  // node_modules/@nivo/tree/node_modules/d3-hierarchy/src/hierarchy/eachBefore.js
  function eachBefore_default(callback2, that) {
    var node = this, nodes = [node], children, i6, index = -1;
    while (node = nodes.pop()) {
      callback2.call(that, node, ++index, this);
      if (children = node.children) {
        for (i6 = children.length - 1; i6 >= 0; --i6) {
          nodes.push(children[i6]);
        }
      }
    }
    return this;
  }

  // node_modules/@nivo/tree/node_modules/d3-hierarchy/src/hierarchy/eachAfter.js
  function eachAfter_default(callback2, that) {
    var node = this, nodes = [node], next = [], children, i6, n6, index = -1;
    while (node = nodes.pop()) {
      next.push(node);
      if (children = node.children) {
        for (i6 = 0, n6 = children.length; i6 < n6; ++i6) {
          nodes.push(children[i6]);
        }
      }
    }
    while (node = next.pop()) {
      callback2.call(that, node, ++index, this);
    }
    return this;
  }

  // node_modules/@nivo/tree/node_modules/d3-hierarchy/src/hierarchy/find.js
  function find_default(callback2, that) {
    let index = -1;
    for (const node of this) {
      if (callback2.call(that, node, ++index, this)) {
        return node;
      }
    }
  }

  // node_modules/@nivo/tree/node_modules/d3-hierarchy/src/hierarchy/sum.js
  function sum_default(value) {
    return this.eachAfter(function(node) {
      var sum3 = +value(node.data) || 0, children = node.children, i6 = children && children.length;
      while (--i6 >= 0)
        sum3 += children[i6].value;
      node.value = sum3;
    });
  }

  // node_modules/@nivo/tree/node_modules/d3-hierarchy/src/hierarchy/sort.js
  function sort_default(compare) {
    return this.eachBefore(function(node) {
      if (node.children) {
        node.children.sort(compare);
      }
    });
  }

  // node_modules/@nivo/tree/node_modules/d3-hierarchy/src/hierarchy/path.js
  function path_default(end) {
    var start2 = this, ancestor = leastCommonAncestor(start2, end), nodes = [start2];
    while (start2 !== ancestor) {
      start2 = start2.parent;
      nodes.push(start2);
    }
    var k2 = nodes.length;
    while (end !== ancestor) {
      nodes.splice(k2, 0, end);
      end = end.parent;
    }
    return nodes;
  }
  function leastCommonAncestor(a2, b3) {
    if (a2 === b3)
      return a2;
    var aNodes = a2.ancestors(), bNodes = b3.ancestors(), c8 = null;
    a2 = aNodes.pop();
    b3 = bNodes.pop();
    while (a2 === b3) {
      c8 = a2;
      a2 = aNodes.pop();
      b3 = bNodes.pop();
    }
    return c8;
  }

  // node_modules/@nivo/tree/node_modules/d3-hierarchy/src/hierarchy/ancestors.js
  function ancestors_default() {
    var node = this, nodes = [node];
    while (node = node.parent) {
      nodes.push(node);
    }
    return nodes;
  }

  // node_modules/@nivo/tree/node_modules/d3-hierarchy/src/hierarchy/descendants.js
  function descendants_default() {
    return Array.from(this);
  }

  // node_modules/@nivo/tree/node_modules/d3-hierarchy/src/hierarchy/leaves.js
  function leaves_default() {
    var leaves = [];
    this.eachBefore(function(node) {
      if (!node.children) {
        leaves.push(node);
      }
    });
    return leaves;
  }

  // node_modules/@nivo/tree/node_modules/d3-hierarchy/src/hierarchy/links.js
  function links_default() {
    var root = this, links = [];
    root.each(function(node) {
      if (node !== root) {
        links.push({ source: node.parent, target: node });
      }
    });
    return links;
  }

  // node_modules/@nivo/tree/node_modules/d3-hierarchy/src/hierarchy/iterator.js
  function* iterator_default() {
    var node = this, current, next = [node], children, i6, n6;
    do {
      current = next.reverse(), next = [];
      while (node = current.pop()) {
        yield node;
        if (children = node.children) {
          for (i6 = 0, n6 = children.length; i6 < n6; ++i6) {
            next.push(children[i6]);
          }
        }
      }
    } while (next.length);
  }

  // node_modules/@nivo/tree/node_modules/d3-hierarchy/src/hierarchy/index.js
  function hierarchy(data, children) {
    if (data instanceof Map) {
      data = [void 0, data];
      if (children === void 0)
        children = mapChildren;
    } else if (children === void 0) {
      children = objectChildren;
    }
    var root = new Node2(data), node, nodes = [root], child, childs, i6, n6;
    while (node = nodes.pop()) {
      if ((childs = children(node.data)) && (n6 = (childs = Array.from(childs)).length)) {
        node.children = childs;
        for (i6 = n6 - 1; i6 >= 0; --i6) {
          nodes.push(child = childs[i6] = new Node2(childs[i6]));
          child.parent = node;
          child.depth = node.depth + 1;
        }
      }
    }
    return root.eachBefore(computeHeight);
  }
  function node_copy() {
    return hierarchy(this).eachBefore(copyData);
  }
  function objectChildren(d2) {
    return d2.children;
  }
  function mapChildren(d2) {
    return Array.isArray(d2) ? d2[1] : null;
  }
  function copyData(node) {
    if (node.data.value !== void 0)
      node.value = node.data.value;
    node.data = node.data.data;
  }
  function computeHeight(node) {
    var height = 0;
    do
      node.height = height;
    while ((node = node.parent) && node.height < ++height);
  }
  function Node2(data) {
    this.data = data;
    this.depth = this.height = 0;
    this.parent = null;
  }
  Node2.prototype = hierarchy.prototype = {
    constructor: Node2,
    count: count_default,
    each: each_default,
    eachAfter: eachAfter_default,
    eachBefore: eachBefore_default,
    find: find_default,
    sum: sum_default,
    sort: sort_default,
    path: path_default,
    ancestors: ancestors_default,
    descendants: descendants_default,
    leaves: leaves_default,
    links: links_default,
    copy: node_copy,
    [Symbol.iterator]: iterator_default
  };

  // node_modules/@nivo/tree/node_modules/d3-hierarchy/src/tree.js
  function defaultSeparation2(a2, b3) {
    return a2.parent === b3.parent ? 1 : 2;
  }
  function nextLeft(v4) {
    var children = v4.children;
    return children ? children[0] : v4.t;
  }
  function nextRight(v4) {
    var children = v4.children;
    return children ? children[children.length - 1] : v4.t;
  }
  function moveSubtree(wm, wp2, shift) {
    var change = shift / (wp2.i - wm.i);
    wp2.c -= change;
    wp2.s += shift;
    wm.c += change;
    wp2.z += shift;
    wp2.m += shift;
  }
  function executeShifts(v4) {
    var shift = 0, change = 0, children = v4.children, i6 = children.length, w3;
    while (--i6 >= 0) {
      w3 = children[i6];
      w3.z += shift;
      w3.m += shift;
      shift += w3.s + (change += w3.c);
    }
  }
  function nextAncestor(vim, v4, ancestor) {
    return vim.a.parent === v4.parent ? vim.a : ancestor;
  }
  function TreeNode(node, i6) {
    this._ = node;
    this.parent = null;
    this.children = null;
    this.A = null;
    this.a = this;
    this.z = 0;
    this.m = 0;
    this.c = 0;
    this.s = 0;
    this.t = null;
    this.i = i6;
  }
  TreeNode.prototype = Object.create(Node2.prototype);
  function treeRoot(root) {
    var tree = new TreeNode(root, 0), node, nodes = [tree], child, children, i6, n6;
    while (node = nodes.pop()) {
      if (children = node._.children) {
        node.children = new Array(n6 = children.length);
        for (i6 = n6 - 1; i6 >= 0; --i6) {
          nodes.push(child = node.children[i6] = new TreeNode(children[i6], i6));
          child.parent = node;
        }
      }
    }
    (tree.parent = new TreeNode(null, 0)).children = [tree];
    return tree;
  }
  function tree_default() {
    var separation = defaultSeparation2, dx = 1, dy = 1, nodeSize = null;
    function tree(root) {
      var t5 = treeRoot(root);
      t5.eachAfter(firstWalk), t5.parent.m = -t5.z;
      t5.eachBefore(secondWalk);
      if (nodeSize)
        root.eachBefore(sizeNode);
      else {
        var left = root, right = root, bottom = root;
        root.eachBefore(function(node) {
          if (node.x < left.x)
            left = node;
          if (node.x > right.x)
            right = node;
          if (node.depth > bottom.depth)
            bottom = node;
        });
        var s3 = left === right ? 1 : separation(left, right) / 2, tx = s3 - left.x, kx = dx / (right.x + s3 + tx), ky = dy / (bottom.depth || 1);
        root.eachBefore(function(node) {
          node.x = (node.x + tx) * kx;
          node.y = node.depth * ky;
        });
      }
      return root;
    }
    function firstWalk(v4) {
      var children = v4.children, siblings = v4.parent.children, w3 = v4.i ? siblings[v4.i - 1] : null;
      if (children) {
        executeShifts(v4);
        var midpoint = (children[0].z + children[children.length - 1].z) / 2;
        if (w3) {
          v4.z = w3.z + separation(v4._, w3._);
          v4.m = v4.z - midpoint;
        } else {
          v4.z = midpoint;
        }
      } else if (w3) {
        v4.z = w3.z + separation(v4._, w3._);
      }
      v4.parent.A = apportion(v4, w3, v4.parent.A || siblings[0]);
    }
    function secondWalk(v4) {
      v4._.x = v4.z + v4.parent.m;
      v4.m += v4.parent.m;
    }
    function apportion(v4, w3, ancestor) {
      if (w3) {
        var vip = v4, vop = v4, vim = w3, vom = vip.parent.children[0], sip = vip.m, sop = vop.m, sim = vim.m, som = vom.m, shift;
        while (vim = nextRight(vim), vip = nextLeft(vip), vim && vip) {
          vom = nextLeft(vom);
          vop = nextRight(vop);
          vop.a = v4;
          shift = vim.z + sim - vip.z - sip + separation(vim._, vip._);
          if (shift > 0) {
            moveSubtree(nextAncestor(vim, v4, ancestor), v4, shift);
            sip += shift;
            sop += shift;
          }
          sim += vim.m;
          sip += vip.m;
          som += vom.m;
          sop += vop.m;
        }
        if (vim && !nextRight(vop)) {
          vop.t = vim;
          vop.m += sim - sop;
        }
        if (vip && !nextLeft(vom)) {
          vom.t = vip;
          vom.m += sip - som;
          ancestor = v4;
        }
      }
      return ancestor;
    }
    function sizeNode(node) {
      node.x *= dx;
      node.y = node.depth * dy;
    }
    tree.separation = function(x3) {
      return arguments.length ? (separation = x3, tree) : separation;
    };
    tree.size = function(x3) {
      return arguments.length ? (nodeSize = false, dx = +x3[0], dy = +x3[1], tree) : nodeSize ? null : [dx, dy];
    };
    tree.nodeSize = function(x3) {
      return arguments.length ? (nodeSize = true, dx = +x3[0], dy = +x3[1], tree) : nodeSize ? [dx, dy] : null;
    };
    return tree;
  }

  // node_modules/@nivo/tree/node_modules/d3-array/src/ascending.js
  function ascending(a2, b3) {
    return a2 == null || b3 == null ? NaN : a2 < b3 ? -1 : a2 > b3 ? 1 : a2 >= b3 ? 0 : NaN;
  }

  // node_modules/@nivo/tree/node_modules/d3-array/src/descending.js
  function descending(a2, b3) {
    return a2 == null || b3 == null ? NaN : b3 < a2 ? -1 : b3 > a2 ? 1 : b3 >= a2 ? 0 : NaN;
  }

  // node_modules/@nivo/tree/node_modules/d3-array/src/bisector.js
  function bisector(f2) {
    let compare1, compare2, delta;
    if (f2.length !== 2) {
      compare1 = ascending;
      compare2 = (d2, x3) => ascending(f2(d2), x3);
      delta = (d2, x3) => f2(d2) - x3;
    } else {
      compare1 = f2 === ascending || f2 === descending ? f2 : zero;
      compare2 = f2;
      delta = f2;
    }
    function left(a2, x3, lo = 0, hi = a2.length) {
      if (lo < hi) {
        if (compare1(x3, x3) !== 0)
          return hi;
        do {
          const mid = lo + hi >>> 1;
          if (compare2(a2[mid], x3) < 0)
            lo = mid + 1;
          else
            hi = mid;
        } while (lo < hi);
      }
      return lo;
    }
    function right(a2, x3, lo = 0, hi = a2.length) {
      if (lo < hi) {
        if (compare1(x3, x3) !== 0)
          return hi;
        do {
          const mid = lo + hi >>> 1;
          if (compare2(a2[mid], x3) <= 0)
            lo = mid + 1;
          else
            hi = mid;
        } while (lo < hi);
      }
      return lo;
    }
    function center(a2, x3, lo = 0, hi = a2.length) {
      const i6 = left(a2, x3, lo, hi - 1);
      return i6 > lo && delta(a2[i6 - 1], x3) > -delta(a2[i6], x3) ? i6 - 1 : i6;
    }
    return { left, center, right };
  }
  function zero() {
    return 0;
  }

  // node_modules/@nivo/tree/node_modules/d3-array/src/number.js
  function number(x3) {
    return x3 === null ? NaN : +x3;
  }

  // node_modules/@nivo/tree/node_modules/d3-array/src/bisect.js
  var ascendingBisect = bisector(ascending);
  var bisectRight = ascendingBisect.right;
  var bisectLeft = ascendingBisect.left;
  var bisectCenter = bisector(number).center;
  var bisect_default = bisectRight;

  // node_modules/@nivo/tree/node_modules/d3-array/src/ticks.js
  var e10 = Math.sqrt(50);
  var e5 = Math.sqrt(10);
  var e22 = Math.sqrt(2);
  function tickSpec(start2, stop2, count2) {
    const step = (stop2 - start2) / Math.max(0, count2), power = Math.floor(Math.log10(step)), error = step / Math.pow(10, power), factor = error >= e10 ? 10 : error >= e5 ? 5 : error >= e22 ? 2 : 1;
    let i1, i22, inc;
    if (power < 0) {
      inc = Math.pow(10, -power) / factor;
      i1 = Math.round(start2 * inc);
      i22 = Math.round(stop2 * inc);
      if (i1 / inc < start2)
        ++i1;
      if (i22 / inc > stop2)
        --i22;
      inc = -inc;
    } else {
      inc = Math.pow(10, power) * factor;
      i1 = Math.round(start2 / inc);
      i22 = Math.round(stop2 / inc);
      if (i1 * inc < start2)
        ++i1;
      if (i22 * inc > stop2)
        --i22;
    }
    if (i22 < i1 && 0.5 <= count2 && count2 < 2)
      return tickSpec(start2, stop2, count2 * 2);
    return [i1, i22, inc];
  }
  function ticks(start2, stop2, count2) {
    stop2 = +stop2, start2 = +start2, count2 = +count2;
    if (!(count2 > 0))
      return [];
    if (start2 === stop2)
      return [start2];
    const reverse = stop2 < start2, [i1, i22, inc] = reverse ? tickSpec(stop2, start2, count2) : tickSpec(start2, stop2, count2);
    if (!(i22 >= i1))
      return [];
    const n6 = i22 - i1 + 1, ticks2 = new Array(n6);
    if (reverse) {
      if (inc < 0)
        for (let i6 = 0; i6 < n6; ++i6)
          ticks2[i6] = (i22 - i6) / -inc;
      else
        for (let i6 = 0; i6 < n6; ++i6)
          ticks2[i6] = (i22 - i6) * inc;
    } else {
      if (inc < 0)
        for (let i6 = 0; i6 < n6; ++i6)
          ticks2[i6] = (i1 + i6) / -inc;
      else
        for (let i6 = 0; i6 < n6; ++i6)
          ticks2[i6] = (i1 + i6) * inc;
    }
    return ticks2;
  }
  function tickIncrement(start2, stop2, count2) {
    stop2 = +stop2, start2 = +start2, count2 = +count2;
    return tickSpec(start2, stop2, count2)[2];
  }
  function tickStep(start2, stop2, count2) {
    stop2 = +stop2, start2 = +start2, count2 = +count2;
    const reverse = stop2 < start2, inc = reverse ? tickIncrement(stop2, start2, count2) : tickIncrement(start2, stop2, count2);
    return (reverse ? -1 : 1) * (inc < 0 ? 1 / -inc : inc);
  }

  // node_modules/@nivo/tree/node_modules/d3-scale/src/init.js
  function initRange2(domain, range) {
    switch (arguments.length) {
      case 0:
        break;
      case 1:
        this.range(domain);
        break;
      default:
        this.range(range).domain(domain);
        break;
    }
    return this;
  }

  // node_modules/d3-color/src/define.js
  function define_default2(constructor, factory, prototype) {
    constructor.prototype = factory.prototype = prototype;
    prototype.constructor = constructor;
  }
  function extend2(parent, definition) {
    var prototype = Object.create(parent.prototype);
    for (var key in definition)
      prototype[key] = definition[key];
    return prototype;
  }

  // node_modules/d3-color/src/color.js
  function Color3() {
  }
  var darker2 = 0.7;
  var brighter2 = 1 / darker2;
  var reI2 = "\\s*([+-]?\\d+)\\s*";
  var reN2 = "\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)\\s*";
  var reP2 = "\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)%\\s*";
  var reHex2 = /^#([0-9a-f]{3,8})$/;
  var reRgbInteger2 = new RegExp("^rgb\\(" + [reI2, reI2, reI2] + "\\)$");
  var reRgbPercent2 = new RegExp("^rgb\\(" + [reP2, reP2, reP2] + "\\)$");
  var reRgbaInteger2 = new RegExp("^rgba\\(" + [reI2, reI2, reI2, reN2] + "\\)$");
  var reRgbaPercent2 = new RegExp("^rgba\\(" + [reP2, reP2, reP2, reN2] + "\\)$");
  var reHslPercent2 = new RegExp("^hsl\\(" + [reN2, reP2, reP2] + "\\)$");
  var reHslaPercent2 = new RegExp("^hsla\\(" + [reN2, reP2, reP2, reN2] + "\\)$");
  var named2 = {
    aliceblue: 15792383,
    antiquewhite: 16444375,
    aqua: 65535,
    aquamarine: 8388564,
    azure: 15794175,
    beige: 16119260,
    bisque: 16770244,
    black: 0,
    blanchedalmond: 16772045,
    blue: 255,
    blueviolet: 9055202,
    brown: 10824234,
    burlywood: 14596231,
    cadetblue: 6266528,
    chartreuse: 8388352,
    chocolate: 13789470,
    coral: 16744272,
    cornflowerblue: 6591981,
    cornsilk: 16775388,
    crimson: 14423100,
    cyan: 65535,
    darkblue: 139,
    darkcyan: 35723,
    darkgoldenrod: 12092939,
    darkgray: 11119017,
    darkgreen: 25600,
    darkgrey: 11119017,
    darkkhaki: 12433259,
    darkmagenta: 9109643,
    darkolivegreen: 5597999,
    darkorange: 16747520,
    darkorchid: 10040012,
    darkred: 9109504,
    darksalmon: 15308410,
    darkseagreen: 9419919,
    darkslateblue: 4734347,
    darkslategray: 3100495,
    darkslategrey: 3100495,
    darkturquoise: 52945,
    darkviolet: 9699539,
    deeppink: 16716947,
    deepskyblue: 49151,
    dimgray: 6908265,
    dimgrey: 6908265,
    dodgerblue: 2003199,
    firebrick: 11674146,
    floralwhite: 16775920,
    forestgreen: 2263842,
    fuchsia: 16711935,
    gainsboro: 14474460,
    ghostwhite: 16316671,
    gold: 16766720,
    goldenrod: 14329120,
    gray: 8421504,
    green: 32768,
    greenyellow: 11403055,
    grey: 8421504,
    honeydew: 15794160,
    hotpink: 16738740,
    indianred: 13458524,
    indigo: 4915330,
    ivory: 16777200,
    khaki: 15787660,
    lavender: 15132410,
    lavenderblush: 16773365,
    lawngreen: 8190976,
    lemonchiffon: 16775885,
    lightblue: 11393254,
    lightcoral: 15761536,
    lightcyan: 14745599,
    lightgoldenrodyellow: 16448210,
    lightgray: 13882323,
    lightgreen: 9498256,
    lightgrey: 13882323,
    lightpink: 16758465,
    lightsalmon: 16752762,
    lightseagreen: 2142890,
    lightskyblue: 8900346,
    lightslategray: 7833753,
    lightslategrey: 7833753,
    lightsteelblue: 11584734,
    lightyellow: 16777184,
    lime: 65280,
    limegreen: 3329330,
    linen: 16445670,
    magenta: 16711935,
    maroon: 8388608,
    mediumaquamarine: 6737322,
    mediumblue: 205,
    mediumorchid: 12211667,
    mediumpurple: 9662683,
    mediumseagreen: 3978097,
    mediumslateblue: 8087790,
    mediumspringgreen: 64154,
    mediumturquoise: 4772300,
    mediumvioletred: 13047173,
    midnightblue: 1644912,
    mintcream: 16121850,
    mistyrose: 16770273,
    moccasin: 16770229,
    navajowhite: 16768685,
    navy: 128,
    oldlace: 16643558,
    olive: 8421376,
    olivedrab: 7048739,
    orange: 16753920,
    orangered: 16729344,
    orchid: 14315734,
    palegoldenrod: 15657130,
    palegreen: 10025880,
    paleturquoise: 11529966,
    palevioletred: 14381203,
    papayawhip: 16773077,
    peachpuff: 16767673,
    peru: 13468991,
    pink: 16761035,
    plum: 14524637,
    powderblue: 11591910,
    purple: 8388736,
    rebeccapurple: 6697881,
    red: 16711680,
    rosybrown: 12357519,
    royalblue: 4286945,
    saddlebrown: 9127187,
    salmon: 16416882,
    sandybrown: 16032864,
    seagreen: 3050327,
    seashell: 16774638,
    sienna: 10506797,
    silver: 12632256,
    skyblue: 8900331,
    slateblue: 6970061,
    slategray: 7372944,
    slategrey: 7372944,
    snow: 16775930,
    springgreen: 65407,
    steelblue: 4620980,
    tan: 13808780,
    teal: 32896,
    thistle: 14204888,
    tomato: 16737095,
    turquoise: 4251856,
    violet: 15631086,
    wheat: 16113331,
    white: 16777215,
    whitesmoke: 16119285,
    yellow: 16776960,
    yellowgreen: 10145074
  };
  define_default2(Color3, color3, {
    copy: function(channels) {
      return Object.assign(new this.constructor(), this, channels);
    },
    displayable: function() {
      return this.rgb().displayable();
    },
    hex: color_formatHex2,
    formatHex: color_formatHex2,
    formatHsl: color_formatHsl2,
    formatRgb: color_formatRgb2,
    toString: color_formatRgb2
  });
  function color_formatHex2() {
    return this.rgb().formatHex();
  }
  function color_formatHsl2() {
    return hslConvert2(this).formatHsl();
  }
  function color_formatRgb2() {
    return this.rgb().formatRgb();
  }
  function color3(format2) {
    var m4, l5;
    format2 = (format2 + "").trim().toLowerCase();
    return (m4 = reHex2.exec(format2)) ? (l5 = m4[1].length, m4 = parseInt(m4[1], 16), l5 === 6 ? rgbn2(m4) : l5 === 3 ? new Rgb2(m4 >> 8 & 15 | m4 >> 4 & 240, m4 >> 4 & 15 | m4 & 240, (m4 & 15) << 4 | m4 & 15, 1) : l5 === 8 ? rgba3(m4 >> 24 & 255, m4 >> 16 & 255, m4 >> 8 & 255, (m4 & 255) / 255) : l5 === 4 ? rgba3(m4 >> 12 & 15 | m4 >> 8 & 240, m4 >> 8 & 15 | m4 >> 4 & 240, m4 >> 4 & 15 | m4 & 240, ((m4 & 15) << 4 | m4 & 15) / 255) : null) : (m4 = reRgbInteger2.exec(format2)) ? new Rgb2(m4[1], m4[2], m4[3], 1) : (m4 = reRgbPercent2.exec(format2)) ? new Rgb2(m4[1] * 255 / 100, m4[2] * 255 / 100, m4[3] * 255 / 100, 1) : (m4 = reRgbaInteger2.exec(format2)) ? rgba3(m4[1], m4[2], m4[3], m4[4]) : (m4 = reRgbaPercent2.exec(format2)) ? rgba3(m4[1] * 255 / 100, m4[2] * 255 / 100, m4[3] * 255 / 100, m4[4]) : (m4 = reHslPercent2.exec(format2)) ? hsla3(m4[1], m4[2] / 100, m4[3] / 100, 1) : (m4 = reHslaPercent2.exec(format2)) ? hsla3(m4[1], m4[2] / 100, m4[3] / 100, m4[4]) : named2.hasOwnProperty(format2) ? rgbn2(named2[format2]) : format2 === "transparent" ? new Rgb2(NaN, NaN, NaN, 0) : null;
  }
  function rgbn2(n6) {
    return new Rgb2(n6 >> 16 & 255, n6 >> 8 & 255, n6 & 255, 1);
  }
  function rgba3(r6, g2, b3, a2) {
    if (a2 <= 0)
      r6 = g2 = b3 = NaN;
    return new Rgb2(r6, g2, b3, a2);
  }
  function rgbConvert2(o6) {
    if (!(o6 instanceof Color3))
      o6 = color3(o6);
    if (!o6)
      return new Rgb2();
    o6 = o6.rgb();
    return new Rgb2(o6.r, o6.g, o6.b, o6.opacity);
  }
  function rgb3(r6, g2, b3, opacity) {
    return arguments.length === 1 ? rgbConvert2(r6) : new Rgb2(r6, g2, b3, opacity == null ? 1 : opacity);
  }
  function Rgb2(r6, g2, b3, opacity) {
    this.r = +r6;
    this.g = +g2;
    this.b = +b3;
    this.opacity = +opacity;
  }
  define_default2(Rgb2, rgb3, extend2(Color3, {
    brighter: function(k2) {
      k2 = k2 == null ? brighter2 : Math.pow(brighter2, k2);
      return new Rgb2(this.r * k2, this.g * k2, this.b * k2, this.opacity);
    },
    darker: function(k2) {
      k2 = k2 == null ? darker2 : Math.pow(darker2, k2);
      return new Rgb2(this.r * k2, this.g * k2, this.b * k2, this.opacity);
    },
    rgb: function() {
      return this;
    },
    displayable: function() {
      return -0.5 <= this.r && this.r < 255.5 && (-0.5 <= this.g && this.g < 255.5) && (-0.5 <= this.b && this.b < 255.5) && (0 <= this.opacity && this.opacity <= 1);
    },
    hex: rgb_formatHex2,
    formatHex: rgb_formatHex2,
    formatRgb: rgb_formatRgb2,
    toString: rgb_formatRgb2
  }));
  function rgb_formatHex2() {
    return "#" + hex5(this.r) + hex5(this.g) + hex5(this.b);
  }
  function rgb_formatRgb2() {
    var a2 = this.opacity;
    a2 = isNaN(a2) ? 1 : Math.max(0, Math.min(1, a2));
    return (a2 === 1 ? "rgb(" : "rgba(") + Math.max(0, Math.min(255, Math.round(this.r) || 0)) + ", " + Math.max(0, Math.min(255, Math.round(this.g) || 0)) + ", " + Math.max(0, Math.min(255, Math.round(this.b) || 0)) + (a2 === 1 ? ")" : ", " + a2 + ")");
  }
  function hex5(value) {
    value = Math.max(0, Math.min(255, Math.round(value) || 0));
    return (value < 16 ? "0" : "") + value.toString(16);
  }
  function hsla3(h, s3, l5, a2) {
    if (a2 <= 0)
      h = s3 = l5 = NaN;
    else if (l5 <= 0 || l5 >= 1)
      h = s3 = NaN;
    else if (s3 <= 0)
      h = NaN;
    return new Hsl2(h, s3, l5, a2);
  }
  function hslConvert2(o6) {
    if (o6 instanceof Hsl2)
      return new Hsl2(o6.h, o6.s, o6.l, o6.opacity);
    if (!(o6 instanceof Color3))
      o6 = color3(o6);
    if (!o6)
      return new Hsl2();
    if (o6 instanceof Hsl2)
      return o6;
    o6 = o6.rgb();
    var r6 = o6.r / 255, g2 = o6.g / 255, b3 = o6.b / 255, min = Math.min(r6, g2, b3), max = Math.max(r6, g2, b3), h = NaN, s3 = max - min, l5 = (max + min) / 2;
    if (s3) {
      if (r6 === max)
        h = (g2 - b3) / s3 + (g2 < b3) * 6;
      else if (g2 === max)
        h = (b3 - r6) / s3 + 2;
      else
        h = (r6 - g2) / s3 + 4;
      s3 /= l5 < 0.5 ? max + min : 2 - max - min;
      h *= 60;
    } else {
      s3 = l5 > 0 && l5 < 1 ? 0 : h;
    }
    return new Hsl2(h, s3, l5, o6.opacity);
  }
  function hsl3(h, s3, l5, opacity) {
    return arguments.length === 1 ? hslConvert2(h) : new Hsl2(h, s3, l5, opacity == null ? 1 : opacity);
  }
  function Hsl2(h, s3, l5, opacity) {
    this.h = +h;
    this.s = +s3;
    this.l = +l5;
    this.opacity = +opacity;
  }
  define_default2(Hsl2, hsl3, extend2(Color3, {
    brighter: function(k2) {
      k2 = k2 == null ? brighter2 : Math.pow(brighter2, k2);
      return new Hsl2(this.h, this.s, this.l * k2, this.opacity);
    },
    darker: function(k2) {
      k2 = k2 == null ? darker2 : Math.pow(darker2, k2);
      return new Hsl2(this.h, this.s, this.l * k2, this.opacity);
    },
    rgb: function() {
      var h = this.h % 360 + (this.h < 0) * 360, s3 = isNaN(h) || isNaN(this.s) ? 0 : this.s, l5 = this.l, m22 = l5 + (l5 < 0.5 ? l5 : 1 - l5) * s3, m1 = 2 * l5 - m22;
      return new Rgb2(
        hsl2rgb3(h >= 240 ? h - 240 : h + 120, m1, m22),
        hsl2rgb3(h, m1, m22),
        hsl2rgb3(h < 120 ? h + 240 : h - 120, m1, m22),
        this.opacity
      );
    },
    displayable: function() {
      return (0 <= this.s && this.s <= 1 || isNaN(this.s)) && (0 <= this.l && this.l <= 1) && (0 <= this.opacity && this.opacity <= 1);
    },
    formatHsl: function() {
      var a2 = this.opacity;
      a2 = isNaN(a2) ? 1 : Math.max(0, Math.min(1, a2));
      return (a2 === 1 ? "hsl(" : "hsla(") + (this.h || 0) + ", " + (this.s || 0) * 100 + "%, " + (this.l || 0) * 100 + "%" + (a2 === 1 ? ")" : ", " + a2 + ")");
    }
  }));
  function hsl2rgb3(h, m1, m22) {
    return (h < 60 ? m1 + (m22 - m1) * h / 60 : h < 180 ? m22 : h < 240 ? m1 + (m22 - m1) * (240 - h) / 60 : m1) * 255;
  }

  // node_modules/d3-color/src/math.js
  var deg2rad = Math.PI / 180;
  var rad2deg = 180 / Math.PI;

  // node_modules/d3-color/src/cubehelix.js
  var A2 = -0.14861;
  var B = 1.78277;
  var C3 = -0.29227;
  var D = -0.90649;
  var E2 = 1.97294;
  var ED = E2 * D;
  var EB = E2 * B;
  var BC_DA = B * C3 - D * A2;
  function cubehelixConvert(o6) {
    if (o6 instanceof Cubehelix)
      return new Cubehelix(o6.h, o6.s, o6.l, o6.opacity);
    if (!(o6 instanceof Rgb2))
      o6 = rgbConvert2(o6);
    var r6 = o6.r / 255, g2 = o6.g / 255, b3 = o6.b / 255, l5 = (BC_DA * b3 + ED * r6 - EB * g2) / (BC_DA + ED - EB), bl = b3 - l5, k2 = (E2 * (g2 - l5) - C3 * bl) / D, s3 = Math.sqrt(k2 * k2 + bl * bl) / (E2 * l5 * (1 - l5)), h = s3 ? Math.atan2(k2, bl) * rad2deg - 120 : NaN;
    return new Cubehelix(h < 0 ? h + 360 : h, s3, l5, o6.opacity);
  }
  function cubehelix(h, s3, l5, opacity) {
    return arguments.length === 1 ? cubehelixConvert(h) : new Cubehelix(h, s3, l5, opacity == null ? 1 : opacity);
  }
  function Cubehelix(h, s3, l5, opacity) {
    this.h = +h;
    this.s = +s3;
    this.l = +l5;
    this.opacity = +opacity;
  }
  define_default2(Cubehelix, cubehelix, extend2(Color3, {
    brighter: function(k2) {
      k2 = k2 == null ? brighter2 : Math.pow(brighter2, k2);
      return new Cubehelix(this.h, this.s, this.l * k2, this.opacity);
    },
    darker: function(k2) {
      k2 = k2 == null ? darker2 : Math.pow(darker2, k2);
      return new Cubehelix(this.h, this.s, this.l * k2, this.opacity);
    },
    rgb: function() {
      var h = isNaN(this.h) ? 0 : (this.h + 120) * deg2rad, l5 = +this.l, a2 = isNaN(this.s) ? 0 : this.s * l5 * (1 - l5), cosh = Math.cos(h), sinh = Math.sin(h);
      return new Rgb2(
        255 * (l5 + a2 * (A2 * cosh + B * sinh)),
        255 * (l5 + a2 * (C3 * cosh + D * sinh)),
        255 * (l5 + a2 * (E2 * cosh)),
        this.opacity
      );
    }
  }));

  // node_modules/d3-interpolate/src/basis.js
  function basis2(t12, v0, v1, v22, v32) {
    var t22 = t12 * t12, t32 = t22 * t12;
    return ((1 - 3 * t12 + 3 * t22 - t32) * v0 + (4 - 6 * t22 + 3 * t32) * v1 + (1 + 3 * t12 + 3 * t22 - 3 * t32) * v22 + t32 * v32) / 6;
  }
  function basis_default3(values) {
    var n6 = values.length - 1;
    return function(t5) {
      var i6 = t5 <= 0 ? t5 = 0 : t5 >= 1 ? (t5 = 1, n6 - 1) : Math.floor(t5 * n6), v1 = values[i6], v22 = values[i6 + 1], v0 = i6 > 0 ? values[i6 - 1] : 2 * v1 - v22, v32 = i6 < n6 - 1 ? values[i6 + 2] : 2 * v22 - v1;
      return basis2((t5 - i6 / n6) * n6, v0, v1, v22, v32);
    };
  }

  // node_modules/d3-interpolate/src/basisClosed.js
  function basisClosed_default3(values) {
    var n6 = values.length;
    return function(t5) {
      var i6 = Math.floor(((t5 %= 1) < 0 ? ++t5 : t5) * n6), v0 = values[(i6 + n6 - 1) % n6], v1 = values[i6 % n6], v22 = values[(i6 + 1) % n6], v32 = values[(i6 + 2) % n6];
      return basis2((t5 - i6 / n6) * n6, v0, v1, v22, v32);
    };
  }

  // node_modules/d3-interpolate/src/constant.js
  function constant_default2(x3) {
    return function() {
      return x3;
    };
  }

  // node_modules/d3-interpolate/src/color.js
  function linear2(a2, d2) {
    return function(t5) {
      return a2 + t5 * d2;
    };
  }
  function exponential2(a2, b3, y4) {
    return a2 = Math.pow(a2, y4), b3 = Math.pow(b3, y4) - a2, y4 = 1 / y4, function(t5) {
      return Math.pow(a2 + t5 * b3, y4);
    };
  }
  function hue2(a2, b3) {
    var d2 = b3 - a2;
    return d2 ? linear2(a2, d2 > 180 || d2 < -180 ? d2 - 360 * Math.round(d2 / 360) : d2) : constant_default2(isNaN(a2) ? b3 : a2);
  }
  function gamma2(y4) {
    return (y4 = +y4) === 1 ? nogamma2 : function(a2, b3) {
      return b3 - a2 ? exponential2(a2, b3, y4) : constant_default2(isNaN(a2) ? b3 : a2);
    };
  }
  function nogamma2(a2, b3) {
    var d2 = b3 - a2;
    return d2 ? linear2(a2, d2) : constant_default2(isNaN(a2) ? b3 : a2);
  }

  // node_modules/d3-interpolate/src/rgb.js
  var rgb_default2 = function rgbGamma2(y4) {
    var color5 = gamma2(y4);
    function rgb5(start2, end) {
      var r6 = color5((start2 = rgb3(start2)).r, (end = rgb3(end)).r), g2 = color5(start2.g, end.g), b3 = color5(start2.b, end.b), opacity = nogamma2(start2.opacity, end.opacity);
      return function(t5) {
        start2.r = r6(t5);
        start2.g = g2(t5);
        start2.b = b3(t5);
        start2.opacity = opacity(t5);
        return start2 + "";
      };
    }
    rgb5.gamma = rgbGamma2;
    return rgb5;
  }(1);
  function rgbSpline2(spline) {
    return function(colors3) {
      var n6 = colors3.length, r6 = new Array(n6), g2 = new Array(n6), b3 = new Array(n6), i6, color5;
      for (i6 = 0; i6 < n6; ++i6) {
        color5 = rgb3(colors3[i6]);
        r6[i6] = color5.r || 0;
        g2[i6] = color5.g || 0;
        b3[i6] = color5.b || 0;
      }
      r6 = spline(r6);
      g2 = spline(g2);
      b3 = spline(b3);
      color5.opacity = 1;
      return function(t5) {
        color5.r = r6(t5);
        color5.g = g2(t5);
        color5.b = b3(t5);
        return color5 + "";
      };
    };
  }
  var rgbBasis2 = rgbSpline2(basis_default3);
  var rgbBasisClosed2 = rgbSpline2(basisClosed_default3);

  // node_modules/d3-interpolate/src/numberArray.js
  function numberArray_default(a2, b3) {
    if (!b3)
      b3 = [];
    var n6 = a2 ? Math.min(b3.length, a2.length) : 0, c8 = b3.slice(), i6;
    return function(t5) {
      for (i6 = 0; i6 < n6; ++i6)
        c8[i6] = a2[i6] * (1 - t5) + b3[i6] * t5;
      return c8;
    };
  }
  function isNumberArray(x3) {
    return ArrayBuffer.isView(x3) && !(x3 instanceof DataView);
  }

  // node_modules/d3-interpolate/src/array.js
  function genericArray(a2, b3) {
    var nb = b3 ? b3.length : 0, na = a2 ? Math.min(nb, a2.length) : 0, x3 = new Array(na), c8 = new Array(nb), i6;
    for (i6 = 0; i6 < na; ++i6)
      x3[i6] = value_default(a2[i6], b3[i6]);
    for (; i6 < nb; ++i6)
      c8[i6] = b3[i6];
    return function(t5) {
      for (i6 = 0; i6 < na; ++i6)
        c8[i6] = x3[i6](t5);
      return c8;
    };
  }

  // node_modules/d3-interpolate/src/date.js
  function date_default(a2, b3) {
    var d2 = new Date();
    return a2 = +a2, b3 = +b3, function(t5) {
      return d2.setTime(a2 * (1 - t5) + b3 * t5), d2;
    };
  }

  // node_modules/d3-interpolate/src/number.js
  function number_default(a2, b3) {
    return a2 = +a2, b3 = +b3, function(t5) {
      return a2 * (1 - t5) + b3 * t5;
    };
  }

  // node_modules/d3-interpolate/src/object.js
  function object_default(a2, b3) {
    var i6 = {}, c8 = {}, k2;
    if (a2 === null || typeof a2 !== "object")
      a2 = {};
    if (b3 === null || typeof b3 !== "object")
      b3 = {};
    for (k2 in b3) {
      if (k2 in a2) {
        i6[k2] = value_default(a2[k2], b3[k2]);
      } else {
        c8[k2] = b3[k2];
      }
    }
    return function(t5) {
      for (k2 in i6)
        c8[k2] = i6[k2](t5);
      return c8;
    };
  }

  // node_modules/d3-interpolate/src/string.js
  var reA = /[-+]?(?:\d+\.?\d*|\.?\d+)(?:[eE][-+]?\d+)?/g;
  var reB = new RegExp(reA.source, "g");
  function zero2(b3) {
    return function() {
      return b3;
    };
  }
  function one(b3) {
    return function(t5) {
      return b3(t5) + "";
    };
  }
  function string_default(a2, b3) {
    var bi = reA.lastIndex = reB.lastIndex = 0, am, bm, bs, i6 = -1, s3 = [], q3 = [];
    a2 = a2 + "", b3 = b3 + "";
    while ((am = reA.exec(a2)) && (bm = reB.exec(b3))) {
      if ((bs = bm.index) > bi) {
        bs = b3.slice(bi, bs);
        if (s3[i6])
          s3[i6] += bs;
        else
          s3[++i6] = bs;
      }
      if ((am = am[0]) === (bm = bm[0])) {
        if (s3[i6])
          s3[i6] += bm;
        else
          s3[++i6] = bm;
      } else {
        s3[++i6] = null;
        q3.push({ i: i6, x: number_default(am, bm) });
      }
      bi = reB.lastIndex;
    }
    if (bi < b3.length) {
      bs = b3.slice(bi);
      if (s3[i6])
        s3[i6] += bs;
      else
        s3[++i6] = bs;
    }
    return s3.length < 2 ? q3[0] ? one(q3[0].x) : zero2(b3) : (b3 = q3.length, function(t5) {
      for (var i7 = 0, o6; i7 < b3; ++i7)
        s3[(o6 = q3[i7]).i] = o6.x(t5);
      return s3.join("");
    });
  }

  // node_modules/d3-interpolate/src/value.js
  function value_default(a2, b3) {
    var t5 = typeof b3, c8;
    return b3 == null || t5 === "boolean" ? constant_default2(b3) : (t5 === "number" ? number_default : t5 === "string" ? (c8 = color3(b3)) ? (b3 = c8, rgb_default2) : string_default : b3 instanceof color3 ? rgb_default2 : b3 instanceof Date ? date_default : isNumberArray(b3) ? numberArray_default : Array.isArray(b3) ? genericArray : typeof b3.valueOf !== "function" && typeof b3.toString !== "function" || isNaN(b3) ? object_default : number_default)(a2, b3);
  }

  // node_modules/d3-interpolate/src/round.js
  function round_default(a2, b3) {
    return a2 = +a2, b3 = +b3, function(t5) {
      return Math.round(a2 * (1 - t5) + b3 * t5);
    };
  }

  // node_modules/d3-interpolate/src/cubehelix.js
  function cubehelix2(hue3) {
    return function cubehelixGamma(y4) {
      y4 = +y4;
      function cubehelix4(start2, end) {
        var h = hue3((start2 = cubehelix(start2)).h, (end = cubehelix(end)).h), s3 = nogamma2(start2.s, end.s), l5 = nogamma2(start2.l, end.l), opacity = nogamma2(start2.opacity, end.opacity);
        return function(t5) {
          start2.h = h(t5);
          start2.s = s3(t5);
          start2.l = l5(Math.pow(t5, y4));
          start2.opacity = opacity(t5);
          return start2 + "";
        };
      }
      cubehelix4.gamma = cubehelixGamma;
      return cubehelix4;
    }(1);
  }
  var cubehelix_default2 = cubehelix2(hue2);
  var cubehelixLong = cubehelix2(nogamma2);

  // node_modules/@nivo/tree/node_modules/d3-scale/src/constant.js
  function constants(x3) {
    return function() {
      return x3;
    };
  }

  // node_modules/@nivo/tree/node_modules/d3-scale/src/number.js
  function number2(x3) {
    return +x3;
  }

  // node_modules/@nivo/tree/node_modules/d3-scale/src/continuous.js
  var unit = [0, 1];
  function identity(x3) {
    return x3;
  }
  function normalize(a2, b3) {
    return (b3 -= a2 = +a2) ? function(x3) {
      return (x3 - a2) / b3;
    } : constants(isNaN(b3) ? NaN : 0.5);
  }
  function clamper(a2, b3) {
    var t5;
    if (a2 > b3)
      t5 = a2, a2 = b3, b3 = t5;
    return function(x3) {
      return Math.max(a2, Math.min(b3, x3));
    };
  }
  function bimap(domain, range, interpolate4) {
    var d0 = domain[0], d1 = domain[1], r0 = range[0], r1 = range[1];
    if (d1 < d0)
      d0 = normalize(d1, d0), r0 = interpolate4(r1, r0);
    else
      d0 = normalize(d0, d1), r0 = interpolate4(r0, r1);
    return function(x3) {
      return r0(d0(x3));
    };
  }
  function polymap(domain, range, interpolate4) {
    var j3 = Math.min(domain.length, range.length) - 1, d2 = new Array(j3), r6 = new Array(j3), i6 = -1;
    if (domain[j3] < domain[0]) {
      domain = domain.slice().reverse();
      range = range.slice().reverse();
    }
    while (++i6 < j3) {
      d2[i6] = normalize(domain[i6], domain[i6 + 1]);
      r6[i6] = interpolate4(range[i6], range[i6 + 1]);
    }
    return function(x3) {
      var i7 = bisect_default(domain, x3, 1, j3) - 1;
      return r6[i7](d2[i7](x3));
    };
  }
  function copy(source, target) {
    return target.domain(source.domain()).range(source.range()).interpolate(source.interpolate()).clamp(source.clamp()).unknown(source.unknown());
  }
  function transformer() {
    var domain = unit, range = unit, interpolate4 = value_default, transform, untransform, unknown, clamp2 = identity, piecewise, output, input;
    function rescale() {
      var n6 = Math.min(domain.length, range.length);
      if (clamp2 !== identity)
        clamp2 = clamper(domain[0], domain[n6 - 1]);
      piecewise = n6 > 2 ? polymap : bimap;
      output = input = null;
      return scale2;
    }
    function scale2(x3) {
      return x3 == null || isNaN(x3 = +x3) ? unknown : (output || (output = piecewise(domain.map(transform), range, interpolate4)))(transform(clamp2(x3)));
    }
    scale2.invert = function(y4) {
      return clamp2(untransform((input || (input = piecewise(range, domain.map(transform), number_default)))(y4)));
    };
    scale2.domain = function(_2) {
      return arguments.length ? (domain = Array.from(_2, number2), rescale()) : domain.slice();
    };
    scale2.range = function(_2) {
      return arguments.length ? (range = Array.from(_2), rescale()) : range.slice();
    };
    scale2.rangeRound = function(_2) {
      return range = Array.from(_2), interpolate4 = round_default, rescale();
    };
    scale2.clamp = function(_2) {
      return arguments.length ? (clamp2 = _2 ? true : identity, rescale()) : clamp2 !== identity;
    };
    scale2.interpolate = function(_2) {
      return arguments.length ? (interpolate4 = _2, rescale()) : interpolate4;
    };
    scale2.unknown = function(_2) {
      return arguments.length ? (unknown = _2, scale2) : unknown;
    };
    return function(t5, u5) {
      transform = t5, untransform = u5;
      return rescale();
    };
  }
  function continuous() {
    return transformer()(identity, identity);
  }

  // node_modules/@nivo/tree/node_modules/d3-scale/src/tickFormat.js
  function tickFormat(start2, stop2, count2, specifier) {
    var step = tickStep(start2, stop2, count2), precision;
    specifier = formatSpecifier(specifier == null ? ",f" : specifier);
    switch (specifier.type) {
      case "s": {
        var value = Math.max(Math.abs(start2), Math.abs(stop2));
        if (specifier.precision == null && !isNaN(precision = precisionPrefix_default(step, value)))
          specifier.precision = precision;
        return formatPrefix(specifier, value);
      }
      case "":
      case "e":
      case "g":
      case "p":
      case "r": {
        if (specifier.precision == null && !isNaN(precision = precisionRound_default(step, Math.max(Math.abs(start2), Math.abs(stop2)))))
          specifier.precision = precision - (specifier.type === "e");
        break;
      }
      case "f":
      case "%": {
        if (specifier.precision == null && !isNaN(precision = precisionFixed_default(step)))
          specifier.precision = precision - (specifier.type === "%") * 2;
        break;
      }
    }
    return format(specifier);
  }

  // node_modules/@nivo/tree/node_modules/d3-scale/src/linear.js
  function linearish(scale2) {
    var domain = scale2.domain;
    scale2.ticks = function(count2) {
      var d2 = domain();
      return ticks(d2[0], d2[d2.length - 1], count2 == null ? 10 : count2);
    };
    scale2.tickFormat = function(count2, specifier) {
      var d2 = domain();
      return tickFormat(d2[0], d2[d2.length - 1], count2 == null ? 10 : count2, specifier);
    };
    scale2.nice = function(count2) {
      if (count2 == null)
        count2 = 10;
      var d2 = domain();
      var i0 = 0;
      var i1 = d2.length - 1;
      var start2 = d2[i0];
      var stop2 = d2[i1];
      var prestep;
      var step;
      var maxIter = 10;
      if (stop2 < start2) {
        step = start2, start2 = stop2, stop2 = step;
        step = i0, i0 = i1, i1 = step;
      }
      while (maxIter-- > 0) {
        step = tickIncrement(start2, stop2, count2);
        if (step === prestep) {
          d2[i0] = start2;
          d2[i1] = stop2;
          return domain(d2);
        } else if (step > 0) {
          start2 = Math.floor(start2 / step) * step;
          stop2 = Math.ceil(stop2 / step) * step;
        } else if (step < 0) {
          start2 = Math.ceil(start2 * step) / step;
          stop2 = Math.floor(stop2 * step) / step;
        } else {
          break;
        }
        prestep = step;
      }
      return scale2;
    };
    return scale2;
  }
  function linear3() {
    var scale2 = continuous();
    scale2.copy = function() {
      return copy(scale2, linear3());
    };
    initRange2.apply(scale2, arguments);
    return linearish(scale2);
  }

  // node_modules/@nivo/tree/node_modules/d3-shape/src/constant.js
  function constant_default3(x3) {
    return function constant() {
      return x3;
    };
  }

  // node_modules/@nivo/tree/node_modules/d3-path/src/path.js
  var pi2 = Math.PI;
  var tau2 = 2 * pi2;
  var epsilon2 = 1e-6;
  var tauEpsilon = tau2 - epsilon2;
  function append(strings) {
    this._ += strings[0];
    for (let i6 = 1, n6 = strings.length; i6 < n6; ++i6) {
      this._ += arguments[i6] + strings[i6];
    }
  }
  function appendRound(digits) {
    let d2 = Math.floor(digits);
    if (!(d2 >= 0))
      throw new Error(`invalid digits: ${digits}`);
    if (d2 > 15)
      return append;
    const k2 = 10 ** d2;
    return function(strings) {
      this._ += strings[0];
      for (let i6 = 1, n6 = strings.length; i6 < n6; ++i6) {
        this._ += Math.round(arguments[i6] * k2) / k2 + strings[i6];
      }
    };
  }
  var Path = class {
    constructor(digits) {
      this._x0 = this._y0 = this._x1 = this._y1 = null;
      this._ = "";
      this._append = digits == null ? append : appendRound(digits);
    }
    moveTo(x3, y4) {
      this._append`M${this._x0 = this._x1 = +x3},${this._y0 = this._y1 = +y4}`;
    }
    closePath() {
      if (this._x1 !== null) {
        this._x1 = this._x0, this._y1 = this._y0;
        this._append`Z`;
      }
    }
    lineTo(x3, y4) {
      this._append`L${this._x1 = +x3},${this._y1 = +y4}`;
    }
    quadraticCurveTo(x1, y1, x3, y4) {
      this._append`Q${+x1},${+y1},${this._x1 = +x3},${this._y1 = +y4}`;
    }
    bezierCurveTo(x1, y1, x22, y22, x3, y4) {
      this._append`C${+x1},${+y1},${+x22},${+y22},${this._x1 = +x3},${this._y1 = +y4}`;
    }
    arcTo(x1, y1, x22, y22, r6) {
      x1 = +x1, y1 = +y1, x22 = +x22, y22 = +y22, r6 = +r6;
      if (r6 < 0)
        throw new Error(`negative radius: ${r6}`);
      let x0 = this._x1, y0 = this._y1, x21 = x22 - x1, y21 = y22 - y1, x01 = x0 - x1, y01 = y0 - y1, l01_2 = x01 * x01 + y01 * y01;
      if (this._x1 === null) {
        this._append`M${this._x1 = x1},${this._y1 = y1}`;
      } else if (!(l01_2 > epsilon2))
        ;
      else if (!(Math.abs(y01 * x21 - y21 * x01) > epsilon2) || !r6) {
        this._append`L${this._x1 = x1},${this._y1 = y1}`;
      } else {
        let x20 = x22 - x0, y20 = y22 - y0, l21_2 = x21 * x21 + y21 * y21, l20_2 = x20 * x20 + y20 * y20, l21 = Math.sqrt(l21_2), l01 = Math.sqrt(l01_2), l5 = r6 * Math.tan((pi2 - Math.acos((l21_2 + l01_2 - l20_2) / (2 * l21 * l01))) / 2), t01 = l5 / l01, t21 = l5 / l21;
        if (Math.abs(t01 - 1) > epsilon2) {
          this._append`L${x1 + t01 * x01},${y1 + t01 * y01}`;
        }
        this._append`A${r6},${r6},0,0,${+(y01 * x20 > x01 * y20)},${this._x1 = x1 + t21 * x21},${this._y1 = y1 + t21 * y21}`;
      }
    }
    arc(x3, y4, r6, a0, a1, ccw) {
      x3 = +x3, y4 = +y4, r6 = +r6, ccw = !!ccw;
      if (r6 < 0)
        throw new Error(`negative radius: ${r6}`);
      let dx = r6 * Math.cos(a0), dy = r6 * Math.sin(a0), x0 = x3 + dx, y0 = y4 + dy, cw = 1 ^ ccw, da2 = ccw ? a0 - a1 : a1 - a0;
      if (this._x1 === null) {
        this._append`M${x0},${y0}`;
      } else if (Math.abs(this._x1 - x0) > epsilon2 || Math.abs(this._y1 - y0) > epsilon2) {
        this._append`L${x0},${y0}`;
      }
      if (!r6)
        return;
      if (da2 < 0)
        da2 = da2 % tau2 + tau2;
      if (da2 > tauEpsilon) {
        this._append`A${r6},${r6},0,1,${cw},${x3 - dx},${y4 - dy}A${r6},${r6},0,1,${cw},${this._x1 = x0},${this._y1 = y0}`;
      } else if (da2 > epsilon2) {
        this._append`A${r6},${r6},0,${+(da2 >= pi2)},${cw},${this._x1 = x3 + r6 * Math.cos(a1)},${this._y1 = y4 + r6 * Math.sin(a1)}`;
      }
    }
    rect(x3, y4, w3, h) {
      this._append`M${this._x0 = this._x1 = +x3},${this._y0 = this._y1 = +y4}h${w3 = +w3}v${+h}h${-w3}Z`;
    }
    toString() {
      return this._;
    }
  };
  function path() {
    return new Path();
  }
  path.prototype = Path.prototype;

  // node_modules/@nivo/tree/node_modules/d3-shape/src/path.js
  function withPath(shape) {
    let digits = 3;
    shape.digits = function(_2) {
      if (!arguments.length)
        return digits;
      if (_2 == null) {
        digits = null;
      } else {
        const d2 = Math.floor(_2);
        if (!(d2 >= 0))
          throw new RangeError(`invalid digits: ${_2}`);
        digits = d2;
      }
      return shape;
    };
    return () => new Path(digits);
  }

  // node_modules/@nivo/tree/node_modules/d3-shape/src/array.js
  var slice = Array.prototype.slice;

  // node_modules/@nivo/tree/node_modules/d3-shape/src/curve/linear.js
  function Linear2(context) {
    this._context = context;
  }
  Linear2.prototype = {
    areaStart: function() {
      this._line = 0;
    },
    areaEnd: function() {
      this._line = NaN;
    },
    lineStart: function() {
      this._point = 0;
    },
    lineEnd: function() {
      if (this._line || this._line !== 0 && this._point === 1)
        this._context.closePath();
      this._line = 1 - this._line;
    },
    point: function(x3, y4) {
      x3 = +x3, y4 = +y4;
      switch (this._point) {
        case 0:
          this._point = 1;
          this._line ? this._context.lineTo(x3, y4) : this._context.moveTo(x3, y4);
          break;
        case 1:
          this._point = 2;
        default:
          this._context.lineTo(x3, y4);
          break;
      }
    }
  };
  function linear_default2(context) {
    return new Linear2(context);
  }

  // node_modules/@nivo/tree/node_modules/d3-shape/src/point.js
  function x2(p2) {
    return p2[0];
  }
  function y3(p2) {
    return p2[1];
  }

  // node_modules/@nivo/tree/node_modules/d3-shape/src/curve/bump.js
  var Bump = class {
    constructor(context, x3) {
      this._context = context;
      this._x = x3;
    }
    areaStart() {
      this._line = 0;
    }
    areaEnd() {
      this._line = NaN;
    }
    lineStart() {
      this._point = 0;
    }
    lineEnd() {
      if (this._line || this._line !== 0 && this._point === 1)
        this._context.closePath();
      this._line = 1 - this._line;
    }
    point(x3, y4) {
      x3 = +x3, y4 = +y4;
      switch (this._point) {
        case 0: {
          this._point = 1;
          if (this._line)
            this._context.lineTo(x3, y4);
          else
            this._context.moveTo(x3, y4);
          break;
        }
        case 1:
          this._point = 2;
        default: {
          if (this._x)
            this._context.bezierCurveTo(this._x0 = (this._x0 + x3) / 2, this._y0, this._x0, y4, x3, y4);
          else
            this._context.bezierCurveTo(this._x0, this._y0 = (this._y0 + y4) / 2, x3, this._y0, x3, y4);
          break;
        }
      }
      this._x0 = x3, this._y0 = y4;
    }
  };
  function bumpX(context) {
    return new Bump(context, true);
  }
  function bumpY(context) {
    return new Bump(context, false);
  }

  // node_modules/@nivo/tree/node_modules/d3-shape/src/link.js
  function linkSource(d2) {
    return d2.source;
  }
  function linkTarget(d2) {
    return d2.target;
  }
  function link(curve) {
    let source = linkSource, target = linkTarget, x3 = x2, y4 = y3, context = null, output = null, path2 = withPath(link2);
    function link2() {
      let buffer;
      const argv = slice.call(arguments);
      const s3 = source.apply(this, argv);
      const t5 = target.apply(this, argv);
      if (context == null)
        output = curve(buffer = path2());
      output.lineStart();
      argv[0] = s3, output.point(+x3.apply(this, argv), +y4.apply(this, argv));
      argv[0] = t5, output.point(+x3.apply(this, argv), +y4.apply(this, argv));
      output.lineEnd();
      if (buffer)
        return output = null, buffer + "" || null;
    }
    link2.source = function(_2) {
      return arguments.length ? (source = _2, link2) : source;
    };
    link2.target = function(_2) {
      return arguments.length ? (target = _2, link2) : target;
    };
    link2.x = function(_2) {
      return arguments.length ? (x3 = typeof _2 === "function" ? _2 : constant_default3(+_2), link2) : x3;
    };
    link2.y = function(_2) {
      return arguments.length ? (y4 = typeof _2 === "function" ? _2 : constant_default3(+_2), link2) : y4;
    };
    link2.context = function(_2) {
      return arguments.length ? (_2 == null ? context = output = null : output = curve(context = _2), link2) : context;
    };
    return link2;
  }

  // node_modules/@nivo/tree/node_modules/d3-shape/src/curve/step.js
  function Step2(context, t5) {
    this._context = context;
    this._t = t5;
  }
  Step2.prototype = {
    areaStart: function() {
      this._line = 0;
    },
    areaEnd: function() {
      this._line = NaN;
    },
    lineStart: function() {
      this._x = this._y = NaN;
      this._point = 0;
    },
    lineEnd: function() {
      if (0 < this._t && this._t < 1 && this._point === 2)
        this._context.lineTo(this._x, this._y);
      if (this._line || this._line !== 0 && this._point === 1)
        this._context.closePath();
      if (this._line >= 0)
        this._t = 1 - this._t, this._line = 1 - this._line;
    },
    point: function(x3, y4) {
      x3 = +x3, y4 = +y4;
      switch (this._point) {
        case 0:
          this._point = 1;
          this._line ? this._context.lineTo(x3, y4) : this._context.moveTo(x3, y4);
          break;
        case 1:
          this._point = 2;
        default: {
          if (this._t <= 0) {
            this._context.lineTo(this._x, y4);
            this._context.lineTo(x3, y4);
          } else {
            var x1 = this._x * (1 - this._t) + x3 * this._t;
            this._context.lineTo(x1, this._y);
            this._context.lineTo(x1, y4);
          }
          break;
        }
      }
      this._x = x3, this._y = y4;
    }
  };
  function step_default2(context) {
    return new Step2(context, 0.5);
  }
  function stepBefore2(context) {
    return new Step2(context, 0);
  }
  function stepAfter2(context) {
    return new Step2(context, 1);
  }

  // node_modules/@nivo/colors/node_modules/d3-scale-chromatic/src/colors.js
  function colors_default2(specifier) {
    var n6 = specifier.length / 6 | 0, colors3 = new Array(n6), i6 = 0;
    while (i6 < n6)
      colors3[i6] = "#" + specifier.slice(i6 * 6, ++i6 * 6);
    return colors3;
  }

  // node_modules/@nivo/colors/node_modules/d3-scale-chromatic/src/categorical/category10.js
  var category10_default2 = colors_default2("1f77b4ff7f0e2ca02cd627289467bd8c564be377c27f7f7fbcbd2217becf");

  // node_modules/@nivo/colors/node_modules/d3-scale-chromatic/src/categorical/Accent.js
  var Accent_default2 = colors_default2("7fc97fbeaed4fdc086ffff99386cb0f0027fbf5b17666666");

  // node_modules/@nivo/colors/node_modules/d3-scale-chromatic/src/categorical/Dark2.js
  var Dark2_default2 = colors_default2("1b9e77d95f027570b3e7298a66a61ee6ab02a6761d666666");

  // node_modules/@nivo/colors/node_modules/d3-scale-chromatic/src/categorical/Paired.js
  var Paired_default2 = colors_default2("a6cee31f78b4b2df8a33a02cfb9a99e31a1cfdbf6fff7f00cab2d66a3d9affff99b15928");

  // node_modules/@nivo/colors/node_modules/d3-scale-chromatic/src/categorical/Pastel1.js
  var Pastel1_default2 = colors_default2("fbb4aeb3cde3ccebc5decbe4fed9a6ffffcce5d8bdfddaecf2f2f2");

  // node_modules/@nivo/colors/node_modules/d3-scale-chromatic/src/categorical/Pastel2.js
  var Pastel2_default2 = colors_default2("b3e2cdfdcdaccbd5e8f4cae4e6f5c9fff2aef1e2cccccccc");

  // node_modules/@nivo/colors/node_modules/d3-scale-chromatic/src/categorical/Set1.js
  var Set1_default2 = colors_default2("e41a1c377eb84daf4a984ea3ff7f00ffff33a65628f781bf999999");

  // node_modules/@nivo/colors/node_modules/d3-scale-chromatic/src/categorical/Set2.js
  var Set2_default2 = colors_default2("66c2a5fc8d628da0cbe78ac3a6d854ffd92fe5c494b3b3b3");

  // node_modules/@nivo/colors/node_modules/d3-scale-chromatic/src/categorical/Set3.js
  var Set3_default2 = colors_default2("8dd3c7ffffb3bebadafb807280b1d3fdb462b3de69fccde5d9d9d9bc80bdccebc5ffed6f");

  // node_modules/@nivo/colors/node_modules/d3-scale-chromatic/src/categorical/Tableau10.js
  var Tableau10_default = colors_default2("4e79a7f28e2ce1575976b7b259a14fedc949af7aa1ff9da79c755fbab0ab");

  // node_modules/@nivo/colors/node_modules/d3-scale-chromatic/src/ramp.js
  var ramp_default2 = (scheme55) => rgbBasis2(scheme55[scheme55.length - 1]);

  // node_modules/@nivo/colors/node_modules/d3-scale-chromatic/src/diverging/BrBG.js
  var scheme28 = new Array(3).concat(
    "d8b365f5f5f55ab4ac",
    "a6611adfc27d80cdc1018571",
    "a6611adfc27df5f5f580cdc1018571",
    "8c510ad8b365f6e8c3c7eae55ab4ac01665e",
    "8c510ad8b365f6e8c3f5f5f5c7eae55ab4ac01665e",
    "8c510abf812ddfc27df6e8c3c7eae580cdc135978f01665e",
    "8c510abf812ddfc27df6e8c3f5f5f5c7eae580cdc135978f01665e",
    "5430058c510abf812ddfc27df6e8c3c7eae580cdc135978f01665e003c30",
    "5430058c510abf812ddfc27df6e8c3f5f5f5c7eae580cdc135978f01665e003c30"
  ).map(colors_default2);
  var BrBG_default2 = ramp_default2(scheme28);

  // node_modules/@nivo/colors/node_modules/d3-scale-chromatic/src/diverging/PRGn.js
  var scheme29 = new Array(3).concat(
    "af8dc3f7f7f77fbf7b",
    "7b3294c2a5cfa6dba0008837",
    "7b3294c2a5cff7f7f7a6dba0008837",
    "762a83af8dc3e7d4e8d9f0d37fbf7b1b7837",
    "762a83af8dc3e7d4e8f7f7f7d9f0d37fbf7b1b7837",
    "762a839970abc2a5cfe7d4e8d9f0d3a6dba05aae611b7837",
    "762a839970abc2a5cfe7d4e8f7f7f7d9f0d3a6dba05aae611b7837",
    "40004b762a839970abc2a5cfe7d4e8d9f0d3a6dba05aae611b783700441b",
    "40004b762a839970abc2a5cfe7d4e8f7f7f7d9f0d3a6dba05aae611b783700441b"
  ).map(colors_default2);
  var PRGn_default2 = ramp_default2(scheme29);

  // node_modules/@nivo/colors/node_modules/d3-scale-chromatic/src/diverging/PiYG.js
  var scheme30 = new Array(3).concat(
    "e9a3c9f7f7f7a1d76a",
    "d01c8bf1b6dab8e1864dac26",
    "d01c8bf1b6daf7f7f7b8e1864dac26",
    "c51b7de9a3c9fde0efe6f5d0a1d76a4d9221",
    "c51b7de9a3c9fde0eff7f7f7e6f5d0a1d76a4d9221",
    "c51b7dde77aef1b6dafde0efe6f5d0b8e1867fbc414d9221",
    "c51b7dde77aef1b6dafde0eff7f7f7e6f5d0b8e1867fbc414d9221",
    "8e0152c51b7dde77aef1b6dafde0efe6f5d0b8e1867fbc414d9221276419",
    "8e0152c51b7dde77aef1b6dafde0eff7f7f7e6f5d0b8e1867fbc414d9221276419"
  ).map(colors_default2);
  var PiYG_default2 = ramp_default2(scheme30);

  // node_modules/@nivo/colors/node_modules/d3-scale-chromatic/src/diverging/PuOr.js
  var scheme31 = new Array(3).concat(
    "998ec3f7f7f7f1a340",
    "5e3c99b2abd2fdb863e66101",
    "5e3c99b2abd2f7f7f7fdb863e66101",
    "542788998ec3d8daebfee0b6f1a340b35806",
    "542788998ec3d8daebf7f7f7fee0b6f1a340b35806",
    "5427888073acb2abd2d8daebfee0b6fdb863e08214b35806",
    "5427888073acb2abd2d8daebf7f7f7fee0b6fdb863e08214b35806",
    "2d004b5427888073acb2abd2d8daebfee0b6fdb863e08214b358067f3b08",
    "2d004b5427888073acb2abd2d8daebf7f7f7fee0b6fdb863e08214b358067f3b08"
  ).map(colors_default2);
  var PuOr_default2 = ramp_default2(scheme31);

  // node_modules/@nivo/colors/node_modules/d3-scale-chromatic/src/diverging/RdBu.js
  var scheme32 = new Array(3).concat(
    "ef8a62f7f7f767a9cf",
    "ca0020f4a58292c5de0571b0",
    "ca0020f4a582f7f7f792c5de0571b0",
    "b2182bef8a62fddbc7d1e5f067a9cf2166ac",
    "b2182bef8a62fddbc7f7f7f7d1e5f067a9cf2166ac",
    "b2182bd6604df4a582fddbc7d1e5f092c5de4393c32166ac",
    "b2182bd6604df4a582fddbc7f7f7f7d1e5f092c5de4393c32166ac",
    "67001fb2182bd6604df4a582fddbc7d1e5f092c5de4393c32166ac053061",
    "67001fb2182bd6604df4a582fddbc7f7f7f7d1e5f092c5de4393c32166ac053061"
  ).map(colors_default2);
  var RdBu_default2 = ramp_default2(scheme32);

  // node_modules/@nivo/colors/node_modules/d3-scale-chromatic/src/diverging/RdGy.js
  var scheme33 = new Array(3).concat(
    "ef8a62ffffff999999",
    "ca0020f4a582bababa404040",
    "ca0020f4a582ffffffbababa404040",
    "b2182bef8a62fddbc7e0e0e09999994d4d4d",
    "b2182bef8a62fddbc7ffffffe0e0e09999994d4d4d",
    "b2182bd6604df4a582fddbc7e0e0e0bababa8787874d4d4d",
    "b2182bd6604df4a582fddbc7ffffffe0e0e0bababa8787874d4d4d",
    "67001fb2182bd6604df4a582fddbc7e0e0e0bababa8787874d4d4d1a1a1a",
    "67001fb2182bd6604df4a582fddbc7ffffffe0e0e0bababa8787874d4d4d1a1a1a"
  ).map(colors_default2);
  var RdGy_default2 = ramp_default2(scheme33);

  // node_modules/@nivo/colors/node_modules/d3-scale-chromatic/src/diverging/RdYlBu.js
  var scheme34 = new Array(3).concat(
    "fc8d59ffffbf91bfdb",
    "d7191cfdae61abd9e92c7bb6",
    "d7191cfdae61ffffbfabd9e92c7bb6",
    "d73027fc8d59fee090e0f3f891bfdb4575b4",
    "d73027fc8d59fee090ffffbfe0f3f891bfdb4575b4",
    "d73027f46d43fdae61fee090e0f3f8abd9e974add14575b4",
    "d73027f46d43fdae61fee090ffffbfe0f3f8abd9e974add14575b4",
    "a50026d73027f46d43fdae61fee090e0f3f8abd9e974add14575b4313695",
    "a50026d73027f46d43fdae61fee090ffffbfe0f3f8abd9e974add14575b4313695"
  ).map(colors_default2);
  var RdYlBu_default2 = ramp_default2(scheme34);

  // node_modules/@nivo/colors/node_modules/d3-scale-chromatic/src/diverging/RdYlGn.js
  var scheme35 = new Array(3).concat(
    "fc8d59ffffbf91cf60",
    "d7191cfdae61a6d96a1a9641",
    "d7191cfdae61ffffbfa6d96a1a9641",
    "d73027fc8d59fee08bd9ef8b91cf601a9850",
    "d73027fc8d59fee08bffffbfd9ef8b91cf601a9850",
    "d73027f46d43fdae61fee08bd9ef8ba6d96a66bd631a9850",
    "d73027f46d43fdae61fee08bffffbfd9ef8ba6d96a66bd631a9850",
    "a50026d73027f46d43fdae61fee08bd9ef8ba6d96a66bd631a9850006837",
    "a50026d73027f46d43fdae61fee08bffffbfd9ef8ba6d96a66bd631a9850006837"
  ).map(colors_default2);
  var RdYlGn_default2 = ramp_default2(scheme35);

  // node_modules/@nivo/colors/node_modules/d3-scale-chromatic/src/diverging/Spectral.js
  var scheme36 = new Array(3).concat(
    "fc8d59ffffbf99d594",
    "d7191cfdae61abdda42b83ba",
    "d7191cfdae61ffffbfabdda42b83ba",
    "d53e4ffc8d59fee08be6f59899d5943288bd",
    "d53e4ffc8d59fee08bffffbfe6f59899d5943288bd",
    "d53e4ff46d43fdae61fee08be6f598abdda466c2a53288bd",
    "d53e4ff46d43fdae61fee08bffffbfe6f598abdda466c2a53288bd",
    "9e0142d53e4ff46d43fdae61fee08be6f598abdda466c2a53288bd5e4fa2",
    "9e0142d53e4ff46d43fdae61fee08bffffbfe6f598abdda466c2a53288bd5e4fa2"
  ).map(colors_default2);
  var Spectral_default2 = ramp_default2(scheme36);

  // node_modules/@nivo/colors/node_modules/d3-scale-chromatic/src/sequential-multi/BuGn.js
  var scheme37 = new Array(3).concat(
    "e5f5f999d8c92ca25f",
    "edf8fbb2e2e266c2a4238b45",
    "edf8fbb2e2e266c2a42ca25f006d2c",
    "edf8fbccece699d8c966c2a42ca25f006d2c",
    "edf8fbccece699d8c966c2a441ae76238b45005824",
    "f7fcfde5f5f9ccece699d8c966c2a441ae76238b45005824",
    "f7fcfde5f5f9ccece699d8c966c2a441ae76238b45006d2c00441b"
  ).map(colors_default2);
  var BuGn_default2 = ramp_default2(scheme37);

  // node_modules/@nivo/colors/node_modules/d3-scale-chromatic/src/sequential-multi/BuPu.js
  var scheme38 = new Array(3).concat(
    "e0ecf49ebcda8856a7",
    "edf8fbb3cde38c96c688419d",
    "edf8fbb3cde38c96c68856a7810f7c",
    "edf8fbbfd3e69ebcda8c96c68856a7810f7c",
    "edf8fbbfd3e69ebcda8c96c68c6bb188419d6e016b",
    "f7fcfde0ecf4bfd3e69ebcda8c96c68c6bb188419d6e016b",
    "f7fcfde0ecf4bfd3e69ebcda8c96c68c6bb188419d810f7c4d004b"
  ).map(colors_default2);
  var BuPu_default2 = ramp_default2(scheme38);

  // node_modules/@nivo/colors/node_modules/d3-scale-chromatic/src/sequential-multi/GnBu.js
  var scheme39 = new Array(3).concat(
    "e0f3dba8ddb543a2ca",
    "f0f9e8bae4bc7bccc42b8cbe",
    "f0f9e8bae4bc7bccc443a2ca0868ac",
    "f0f9e8ccebc5a8ddb57bccc443a2ca0868ac",
    "f0f9e8ccebc5a8ddb57bccc44eb3d32b8cbe08589e",
    "f7fcf0e0f3dbccebc5a8ddb57bccc44eb3d32b8cbe08589e",
    "f7fcf0e0f3dbccebc5a8ddb57bccc44eb3d32b8cbe0868ac084081"
  ).map(colors_default2);
  var GnBu_default2 = ramp_default2(scheme39);

  // node_modules/@nivo/colors/node_modules/d3-scale-chromatic/src/sequential-multi/OrRd.js
  var scheme40 = new Array(3).concat(
    "fee8c8fdbb84e34a33",
    "fef0d9fdcc8afc8d59d7301f",
    "fef0d9fdcc8afc8d59e34a33b30000",
    "fef0d9fdd49efdbb84fc8d59e34a33b30000",
    "fef0d9fdd49efdbb84fc8d59ef6548d7301f990000",
    "fff7ecfee8c8fdd49efdbb84fc8d59ef6548d7301f990000",
    "fff7ecfee8c8fdd49efdbb84fc8d59ef6548d7301fb300007f0000"
  ).map(colors_default2);
  var OrRd_default2 = ramp_default2(scheme40);

  // node_modules/@nivo/colors/node_modules/d3-scale-chromatic/src/sequential-multi/PuBuGn.js
  var scheme41 = new Array(3).concat(
    "ece2f0a6bddb1c9099",
    "f6eff7bdc9e167a9cf02818a",
    "f6eff7bdc9e167a9cf1c9099016c59",
    "f6eff7d0d1e6a6bddb67a9cf1c9099016c59",
    "f6eff7d0d1e6a6bddb67a9cf3690c002818a016450",
    "fff7fbece2f0d0d1e6a6bddb67a9cf3690c002818a016450",
    "fff7fbece2f0d0d1e6a6bddb67a9cf3690c002818a016c59014636"
  ).map(colors_default2);
  var PuBuGn_default2 = ramp_default2(scheme41);

  // node_modules/@nivo/colors/node_modules/d3-scale-chromatic/src/sequential-multi/PuBu.js
  var scheme42 = new Array(3).concat(
    "ece7f2a6bddb2b8cbe",
    "f1eef6bdc9e174a9cf0570b0",
    "f1eef6bdc9e174a9cf2b8cbe045a8d",
    "f1eef6d0d1e6a6bddb74a9cf2b8cbe045a8d",
    "f1eef6d0d1e6a6bddb74a9cf3690c00570b0034e7b",
    "fff7fbece7f2d0d1e6a6bddb74a9cf3690c00570b0034e7b",
    "fff7fbece7f2d0d1e6a6bddb74a9cf3690c00570b0045a8d023858"
  ).map(colors_default2);
  var PuBu_default2 = ramp_default2(scheme42);

  // node_modules/@nivo/colors/node_modules/d3-scale-chromatic/src/sequential-multi/PuRd.js
  var scheme43 = new Array(3).concat(
    "e7e1efc994c7dd1c77",
    "f1eef6d7b5d8df65b0ce1256",
    "f1eef6d7b5d8df65b0dd1c77980043",
    "f1eef6d4b9dac994c7df65b0dd1c77980043",
    "f1eef6d4b9dac994c7df65b0e7298ace125691003f",
    "f7f4f9e7e1efd4b9dac994c7df65b0e7298ace125691003f",
    "f7f4f9e7e1efd4b9dac994c7df65b0e7298ace125698004367001f"
  ).map(colors_default2);
  var PuRd_default2 = ramp_default2(scheme43);

  // node_modules/@nivo/colors/node_modules/d3-scale-chromatic/src/sequential-multi/RdPu.js
  var scheme44 = new Array(3).concat(
    "fde0ddfa9fb5c51b8a",
    "feebe2fbb4b9f768a1ae017e",
    "feebe2fbb4b9f768a1c51b8a7a0177",
    "feebe2fcc5c0fa9fb5f768a1c51b8a7a0177",
    "feebe2fcc5c0fa9fb5f768a1dd3497ae017e7a0177",
    "fff7f3fde0ddfcc5c0fa9fb5f768a1dd3497ae017e7a0177",
    "fff7f3fde0ddfcc5c0fa9fb5f768a1dd3497ae017e7a017749006a"
  ).map(colors_default2);
  var RdPu_default2 = ramp_default2(scheme44);

  // node_modules/@nivo/colors/node_modules/d3-scale-chromatic/src/sequential-multi/YlGnBu.js
  var scheme45 = new Array(3).concat(
    "edf8b17fcdbb2c7fb8",
    "ffffcca1dab441b6c4225ea8",
    "ffffcca1dab441b6c42c7fb8253494",
    "ffffccc7e9b47fcdbb41b6c42c7fb8253494",
    "ffffccc7e9b47fcdbb41b6c41d91c0225ea80c2c84",
    "ffffd9edf8b1c7e9b47fcdbb41b6c41d91c0225ea80c2c84",
    "ffffd9edf8b1c7e9b47fcdbb41b6c41d91c0225ea8253494081d58"
  ).map(colors_default2);
  var YlGnBu_default2 = ramp_default2(scheme45);

  // node_modules/@nivo/colors/node_modules/d3-scale-chromatic/src/sequential-multi/YlGn.js
  var scheme46 = new Array(3).concat(
    "f7fcb9addd8e31a354",
    "ffffccc2e69978c679238443",
    "ffffccc2e69978c67931a354006837",
    "ffffccd9f0a3addd8e78c67931a354006837",
    "ffffccd9f0a3addd8e78c67941ab5d238443005a32",
    "ffffe5f7fcb9d9f0a3addd8e78c67941ab5d238443005a32",
    "ffffe5f7fcb9d9f0a3addd8e78c67941ab5d238443006837004529"
  ).map(colors_default2);
  var YlGn_default2 = ramp_default2(scheme46);

  // node_modules/@nivo/colors/node_modules/d3-scale-chromatic/src/sequential-multi/YlOrBr.js
  var scheme47 = new Array(3).concat(
    "fff7bcfec44fd95f0e",
    "ffffd4fed98efe9929cc4c02",
    "ffffd4fed98efe9929d95f0e993404",
    "ffffd4fee391fec44ffe9929d95f0e993404",
    "ffffd4fee391fec44ffe9929ec7014cc4c028c2d04",
    "ffffe5fff7bcfee391fec44ffe9929ec7014cc4c028c2d04",
    "ffffe5fff7bcfee391fec44ffe9929ec7014cc4c02993404662506"
  ).map(colors_default2);
  var YlOrBr_default2 = ramp_default2(scheme47);

  // node_modules/@nivo/colors/node_modules/d3-scale-chromatic/src/sequential-multi/YlOrRd.js
  var scheme48 = new Array(3).concat(
    "ffeda0feb24cf03b20",
    "ffffb2fecc5cfd8d3ce31a1c",
    "ffffb2fecc5cfd8d3cf03b20bd0026",
    "ffffb2fed976feb24cfd8d3cf03b20bd0026",
    "ffffb2fed976feb24cfd8d3cfc4e2ae31a1cb10026",
    "ffffccffeda0fed976feb24cfd8d3cfc4e2ae31a1cb10026",
    "ffffccffeda0fed976feb24cfd8d3cfc4e2ae31a1cbd0026800026"
  ).map(colors_default2);
  var YlOrRd_default2 = ramp_default2(scheme48);

  // node_modules/@nivo/colors/node_modules/d3-scale-chromatic/src/sequential-single/Blues.js
  var scheme49 = new Array(3).concat(
    "deebf79ecae13182bd",
    "eff3ffbdd7e76baed62171b5",
    "eff3ffbdd7e76baed63182bd08519c",
    "eff3ffc6dbef9ecae16baed63182bd08519c",
    "eff3ffc6dbef9ecae16baed64292c62171b5084594",
    "f7fbffdeebf7c6dbef9ecae16baed64292c62171b5084594",
    "f7fbffdeebf7c6dbef9ecae16baed64292c62171b508519c08306b"
  ).map(colors_default2);
  var Blues_default2 = ramp_default2(scheme49);

  // node_modules/@nivo/colors/node_modules/d3-scale-chromatic/src/sequential-single/Greens.js
  var scheme50 = new Array(3).concat(
    "e5f5e0a1d99b31a354",
    "edf8e9bae4b374c476238b45",
    "edf8e9bae4b374c47631a354006d2c",
    "edf8e9c7e9c0a1d99b74c47631a354006d2c",
    "edf8e9c7e9c0a1d99b74c47641ab5d238b45005a32",
    "f7fcf5e5f5e0c7e9c0a1d99b74c47641ab5d238b45005a32",
    "f7fcf5e5f5e0c7e9c0a1d99b74c47641ab5d238b45006d2c00441b"
  ).map(colors_default2);
  var Greens_default2 = ramp_default2(scheme50);

  // node_modules/@nivo/colors/node_modules/d3-scale-chromatic/src/sequential-single/Greys.js
  var scheme51 = new Array(3).concat(
    "f0f0f0bdbdbd636363",
    "f7f7f7cccccc969696525252",
    "f7f7f7cccccc969696636363252525",
    "f7f7f7d9d9d9bdbdbd969696636363252525",
    "f7f7f7d9d9d9bdbdbd969696737373525252252525",
    "fffffff0f0f0d9d9d9bdbdbd969696737373525252252525",
    "fffffff0f0f0d9d9d9bdbdbd969696737373525252252525000000"
  ).map(colors_default2);
  var Greys_default2 = ramp_default2(scheme51);

  // node_modules/@nivo/colors/node_modules/d3-scale-chromatic/src/sequential-single/Purples.js
  var scheme52 = new Array(3).concat(
    "efedf5bcbddc756bb1",
    "f2f0f7cbc9e29e9ac86a51a3",
    "f2f0f7cbc9e29e9ac8756bb154278f",
    "f2f0f7dadaebbcbddc9e9ac8756bb154278f",
    "f2f0f7dadaebbcbddc9e9ac8807dba6a51a34a1486",
    "fcfbfdefedf5dadaebbcbddc9e9ac8807dba6a51a34a1486",
    "fcfbfdefedf5dadaebbcbddc9e9ac8807dba6a51a354278f3f007d"
  ).map(colors_default2);
  var Purples_default2 = ramp_default2(scheme52);

  // node_modules/@nivo/colors/node_modules/d3-scale-chromatic/src/sequential-single/Reds.js
  var scheme53 = new Array(3).concat(
    "fee0d2fc9272de2d26",
    "fee5d9fcae91fb6a4acb181d",
    "fee5d9fcae91fb6a4ade2d26a50f15",
    "fee5d9fcbba1fc9272fb6a4ade2d26a50f15",
    "fee5d9fcbba1fc9272fb6a4aef3b2ccb181d99000d",
    "fff5f0fee0d2fcbba1fc9272fb6a4aef3b2ccb181d99000d",
    "fff5f0fee0d2fcbba1fc9272fb6a4aef3b2ccb181da50f1567000d"
  ).map(colors_default2);
  var Reds_default2 = ramp_default2(scheme53);

  // node_modules/@nivo/colors/node_modules/d3-scale-chromatic/src/sequential-single/Oranges.js
  var scheme54 = new Array(3).concat(
    "fee6cefdae6be6550d",
    "feeddefdbe85fd8d3cd94701",
    "feeddefdbe85fd8d3ce6550da63603",
    "feeddefdd0a2fdae6bfd8d3ce6550da63603",
    "feeddefdd0a2fdae6bfd8d3cf16913d948018c2d04",
    "fff5ebfee6cefdd0a2fdae6bfd8d3cf16913d948018c2d04",
    "fff5ebfee6cefdd0a2fdae6bfd8d3cf16913d94801a636037f2704"
  ).map(colors_default2);
  var Oranges_default2 = ramp_default2(scheme54);

  // node_modules/@nivo/colors/node_modules/d3-scale-chromatic/src/sequential-multi/cividis.js
  function cividis_default(t5) {
    t5 = Math.max(0, Math.min(1, t5));
    return "rgb(" + Math.max(0, Math.min(255, Math.round(-4.54 - t5 * (35.34 - t5 * (2381.73 - t5 * (6402.7 - t5 * (7024.72 - t5 * 2710.57))))))) + ", " + Math.max(0, Math.min(255, Math.round(32.49 + t5 * (170.73 + t5 * (52.82 - t5 * (131.46 - t5 * (176.58 - t5 * 67.37))))))) + ", " + Math.max(0, Math.min(255, Math.round(81.24 + t5 * (442.36 - t5 * (2482.43 - t5 * (6167.24 - t5 * (6614.94 - t5 * 2475.67))))))) + ")";
  }

  // node_modules/@nivo/colors/node_modules/d3-color/src/define.js
  function define_default3(constructor, factory, prototype) {
    constructor.prototype = factory.prototype = prototype;
    prototype.constructor = constructor;
  }
  function extend3(parent, definition) {
    var prototype = Object.create(parent.prototype);
    for (var key in definition)
      prototype[key] = definition[key];
    return prototype;
  }

  // node_modules/@nivo/colors/node_modules/d3-color/src/color.js
  function Color4() {
  }
  var darker3 = 0.7;
  var brighter3 = 1 / darker3;
  var reI3 = "\\s*([+-]?\\d+)\\s*";
  var reN3 = "\\s*([+-]?(?:\\d*\\.)?\\d+(?:[eE][+-]?\\d+)?)\\s*";
  var reP3 = "\\s*([+-]?(?:\\d*\\.)?\\d+(?:[eE][+-]?\\d+)?)%\\s*";
  var reHex3 = /^#([0-9a-f]{3,8})$/;
  var reRgbInteger3 = new RegExp(`^rgb\\(${reI3},${reI3},${reI3}\\)$`);
  var reRgbPercent3 = new RegExp(`^rgb\\(${reP3},${reP3},${reP3}\\)$`);
  var reRgbaInteger3 = new RegExp(`^rgba\\(${reI3},${reI3},${reI3},${reN3}\\)$`);
  var reRgbaPercent3 = new RegExp(`^rgba\\(${reP3},${reP3},${reP3},${reN3}\\)$`);
  var reHslPercent3 = new RegExp(`^hsl\\(${reN3},${reP3},${reP3}\\)$`);
  var reHslaPercent3 = new RegExp(`^hsla\\(${reN3},${reP3},${reP3},${reN3}\\)$`);
  var named3 = {
    aliceblue: 15792383,
    antiquewhite: 16444375,
    aqua: 65535,
    aquamarine: 8388564,
    azure: 15794175,
    beige: 16119260,
    bisque: 16770244,
    black: 0,
    blanchedalmond: 16772045,
    blue: 255,
    blueviolet: 9055202,
    brown: 10824234,
    burlywood: 14596231,
    cadetblue: 6266528,
    chartreuse: 8388352,
    chocolate: 13789470,
    coral: 16744272,
    cornflowerblue: 6591981,
    cornsilk: 16775388,
    crimson: 14423100,
    cyan: 65535,
    darkblue: 139,
    darkcyan: 35723,
    darkgoldenrod: 12092939,
    darkgray: 11119017,
    darkgreen: 25600,
    darkgrey: 11119017,
    darkkhaki: 12433259,
    darkmagenta: 9109643,
    darkolivegreen: 5597999,
    darkorange: 16747520,
    darkorchid: 10040012,
    darkred: 9109504,
    darksalmon: 15308410,
    darkseagreen: 9419919,
    darkslateblue: 4734347,
    darkslategray: 3100495,
    darkslategrey: 3100495,
    darkturquoise: 52945,
    darkviolet: 9699539,
    deeppink: 16716947,
    deepskyblue: 49151,
    dimgray: 6908265,
    dimgrey: 6908265,
    dodgerblue: 2003199,
    firebrick: 11674146,
    floralwhite: 16775920,
    forestgreen: 2263842,
    fuchsia: 16711935,
    gainsboro: 14474460,
    ghostwhite: 16316671,
    gold: 16766720,
    goldenrod: 14329120,
    gray: 8421504,
    green: 32768,
    greenyellow: 11403055,
    grey: 8421504,
    honeydew: 15794160,
    hotpink: 16738740,
    indianred: 13458524,
    indigo: 4915330,
    ivory: 16777200,
    khaki: 15787660,
    lavender: 15132410,
    lavenderblush: 16773365,
    lawngreen: 8190976,
    lemonchiffon: 16775885,
    lightblue: 11393254,
    lightcoral: 15761536,
    lightcyan: 14745599,
    lightgoldenrodyellow: 16448210,
    lightgray: 13882323,
    lightgreen: 9498256,
    lightgrey: 13882323,
    lightpink: 16758465,
    lightsalmon: 16752762,
    lightseagreen: 2142890,
    lightskyblue: 8900346,
    lightslategray: 7833753,
    lightslategrey: 7833753,
    lightsteelblue: 11584734,
    lightyellow: 16777184,
    lime: 65280,
    limegreen: 3329330,
    linen: 16445670,
    magenta: 16711935,
    maroon: 8388608,
    mediumaquamarine: 6737322,
    mediumblue: 205,
    mediumorchid: 12211667,
    mediumpurple: 9662683,
    mediumseagreen: 3978097,
    mediumslateblue: 8087790,
    mediumspringgreen: 64154,
    mediumturquoise: 4772300,
    mediumvioletred: 13047173,
    midnightblue: 1644912,
    mintcream: 16121850,
    mistyrose: 16770273,
    moccasin: 16770229,
    navajowhite: 16768685,
    navy: 128,
    oldlace: 16643558,
    olive: 8421376,
    olivedrab: 7048739,
    orange: 16753920,
    orangered: 16729344,
    orchid: 14315734,
    palegoldenrod: 15657130,
    palegreen: 10025880,
    paleturquoise: 11529966,
    palevioletred: 14381203,
    papayawhip: 16773077,
    peachpuff: 16767673,
    peru: 13468991,
    pink: 16761035,
    plum: 14524637,
    powderblue: 11591910,
    purple: 8388736,
    rebeccapurple: 6697881,
    red: 16711680,
    rosybrown: 12357519,
    royalblue: 4286945,
    saddlebrown: 9127187,
    salmon: 16416882,
    sandybrown: 16032864,
    seagreen: 3050327,
    seashell: 16774638,
    sienna: 10506797,
    silver: 12632256,
    skyblue: 8900331,
    slateblue: 6970061,
    slategray: 7372944,
    slategrey: 7372944,
    snow: 16775930,
    springgreen: 65407,
    steelblue: 4620980,
    tan: 13808780,
    teal: 32896,
    thistle: 14204888,
    tomato: 16737095,
    turquoise: 4251856,
    violet: 15631086,
    wheat: 16113331,
    white: 16777215,
    whitesmoke: 16119285,
    yellow: 16776960,
    yellowgreen: 10145074
  };
  define_default3(Color4, color4, {
    copy(channels) {
      return Object.assign(new this.constructor(), this, channels);
    },
    displayable() {
      return this.rgb().displayable();
    },
    hex: color_formatHex3,
    formatHex: color_formatHex3,
    formatHex8: color_formatHex82,
    formatHsl: color_formatHsl3,
    formatRgb: color_formatRgb3,
    toString: color_formatRgb3
  });
  function color_formatHex3() {
    return this.rgb().formatHex();
  }
  function color_formatHex82() {
    return this.rgb().formatHex8();
  }
  function color_formatHsl3() {
    return hslConvert3(this).formatHsl();
  }
  function color_formatRgb3() {
    return this.rgb().formatRgb();
  }
  function color4(format2) {
    var m4, l5;
    format2 = (format2 + "").trim().toLowerCase();
    return (m4 = reHex3.exec(format2)) ? (l5 = m4[1].length, m4 = parseInt(m4[1], 16), l5 === 6 ? rgbn3(m4) : l5 === 3 ? new Rgb3(m4 >> 8 & 15 | m4 >> 4 & 240, m4 >> 4 & 15 | m4 & 240, (m4 & 15) << 4 | m4 & 15, 1) : l5 === 8 ? rgba4(m4 >> 24 & 255, m4 >> 16 & 255, m4 >> 8 & 255, (m4 & 255) / 255) : l5 === 4 ? rgba4(m4 >> 12 & 15 | m4 >> 8 & 240, m4 >> 8 & 15 | m4 >> 4 & 240, m4 >> 4 & 15 | m4 & 240, ((m4 & 15) << 4 | m4 & 15) / 255) : null) : (m4 = reRgbInteger3.exec(format2)) ? new Rgb3(m4[1], m4[2], m4[3], 1) : (m4 = reRgbPercent3.exec(format2)) ? new Rgb3(m4[1] * 255 / 100, m4[2] * 255 / 100, m4[3] * 255 / 100, 1) : (m4 = reRgbaInteger3.exec(format2)) ? rgba4(m4[1], m4[2], m4[3], m4[4]) : (m4 = reRgbaPercent3.exec(format2)) ? rgba4(m4[1] * 255 / 100, m4[2] * 255 / 100, m4[3] * 255 / 100, m4[4]) : (m4 = reHslPercent3.exec(format2)) ? hsla4(m4[1], m4[2] / 100, m4[3] / 100, 1) : (m4 = reHslaPercent3.exec(format2)) ? hsla4(m4[1], m4[2] / 100, m4[3] / 100, m4[4]) : named3.hasOwnProperty(format2) ? rgbn3(named3[format2]) : format2 === "transparent" ? new Rgb3(NaN, NaN, NaN, 0) : null;
  }
  function rgbn3(n6) {
    return new Rgb3(n6 >> 16 & 255, n6 >> 8 & 255, n6 & 255, 1);
  }
  function rgba4(r6, g2, b3, a2) {
    if (a2 <= 0)
      r6 = g2 = b3 = NaN;
    return new Rgb3(r6, g2, b3, a2);
  }
  function rgbConvert3(o6) {
    if (!(o6 instanceof Color4))
      o6 = color4(o6);
    if (!o6)
      return new Rgb3();
    o6 = o6.rgb();
    return new Rgb3(o6.r, o6.g, o6.b, o6.opacity);
  }
  function rgb4(r6, g2, b3, opacity) {
    return arguments.length === 1 ? rgbConvert3(r6) : new Rgb3(r6, g2, b3, opacity == null ? 1 : opacity);
  }
  function Rgb3(r6, g2, b3, opacity) {
    this.r = +r6;
    this.g = +g2;
    this.b = +b3;
    this.opacity = +opacity;
  }
  define_default3(Rgb3, rgb4, extend3(Color4, {
    brighter(k2) {
      k2 = k2 == null ? brighter3 : Math.pow(brighter3, k2);
      return new Rgb3(this.r * k2, this.g * k2, this.b * k2, this.opacity);
    },
    darker(k2) {
      k2 = k2 == null ? darker3 : Math.pow(darker3, k2);
      return new Rgb3(this.r * k2, this.g * k2, this.b * k2, this.opacity);
    },
    rgb() {
      return this;
    },
    clamp() {
      return new Rgb3(clampi2(this.r), clampi2(this.g), clampi2(this.b), clampa2(this.opacity));
    },
    displayable() {
      return -0.5 <= this.r && this.r < 255.5 && (-0.5 <= this.g && this.g < 255.5) && (-0.5 <= this.b && this.b < 255.5) && (0 <= this.opacity && this.opacity <= 1);
    },
    hex: rgb_formatHex3,
    formatHex: rgb_formatHex3,
    formatHex8: rgb_formatHex82,
    formatRgb: rgb_formatRgb3,
    toString: rgb_formatRgb3
  }));
  function rgb_formatHex3() {
    return `#${hex7(this.r)}${hex7(this.g)}${hex7(this.b)}`;
  }
  function rgb_formatHex82() {
    return `#${hex7(this.r)}${hex7(this.g)}${hex7(this.b)}${hex7((isNaN(this.opacity) ? 1 : this.opacity) * 255)}`;
  }
  function rgb_formatRgb3() {
    const a2 = clampa2(this.opacity);
    return `${a2 === 1 ? "rgb(" : "rgba("}${clampi2(this.r)}, ${clampi2(this.g)}, ${clampi2(this.b)}${a2 === 1 ? ")" : `, ${a2})`}`;
  }
  function clampa2(opacity) {
    return isNaN(opacity) ? 1 : Math.max(0, Math.min(1, opacity));
  }
  function clampi2(value) {
    return Math.max(0, Math.min(255, Math.round(value) || 0));
  }
  function hex7(value) {
    value = clampi2(value);
    return (value < 16 ? "0" : "") + value.toString(16);
  }
  function hsla4(h, s3, l5, a2) {
    if (a2 <= 0)
      h = s3 = l5 = NaN;
    else if (l5 <= 0 || l5 >= 1)
      h = s3 = NaN;
    else if (s3 <= 0)
      h = NaN;
    return new Hsl3(h, s3, l5, a2);
  }
  function hslConvert3(o6) {
    if (o6 instanceof Hsl3)
      return new Hsl3(o6.h, o6.s, o6.l, o6.opacity);
    if (!(o6 instanceof Color4))
      o6 = color4(o6);
    if (!o6)
      return new Hsl3();
    if (o6 instanceof Hsl3)
      return o6;
    o6 = o6.rgb();
    var r6 = o6.r / 255, g2 = o6.g / 255, b3 = o6.b / 255, min = Math.min(r6, g2, b3), max = Math.max(r6, g2, b3), h = NaN, s3 = max - min, l5 = (max + min) / 2;
    if (s3) {
      if (r6 === max)
        h = (g2 - b3) / s3 + (g2 < b3) * 6;
      else if (g2 === max)
        h = (b3 - r6) / s3 + 2;
      else
        h = (r6 - g2) / s3 + 4;
      s3 /= l5 < 0.5 ? max + min : 2 - max - min;
      h *= 60;
    } else {
      s3 = l5 > 0 && l5 < 1 ? 0 : h;
    }
    return new Hsl3(h, s3, l5, o6.opacity);
  }
  function hsl4(h, s3, l5, opacity) {
    return arguments.length === 1 ? hslConvert3(h) : new Hsl3(h, s3, l5, opacity == null ? 1 : opacity);
  }
  function Hsl3(h, s3, l5, opacity) {
    this.h = +h;
    this.s = +s3;
    this.l = +l5;
    this.opacity = +opacity;
  }
  define_default3(Hsl3, hsl4, extend3(Color4, {
    brighter(k2) {
      k2 = k2 == null ? brighter3 : Math.pow(brighter3, k2);
      return new Hsl3(this.h, this.s, this.l * k2, this.opacity);
    },
    darker(k2) {
      k2 = k2 == null ? darker3 : Math.pow(darker3, k2);
      return new Hsl3(this.h, this.s, this.l * k2, this.opacity);
    },
    rgb() {
      var h = this.h % 360 + (this.h < 0) * 360, s3 = isNaN(h) || isNaN(this.s) ? 0 : this.s, l5 = this.l, m22 = l5 + (l5 < 0.5 ? l5 : 1 - l5) * s3, m1 = 2 * l5 - m22;
      return new Rgb3(
        hsl2rgb4(h >= 240 ? h - 240 : h + 120, m1, m22),
        hsl2rgb4(h, m1, m22),
        hsl2rgb4(h < 120 ? h + 240 : h - 120, m1, m22),
        this.opacity
      );
    },
    clamp() {
      return new Hsl3(clamph2(this.h), clampt2(this.s), clampt2(this.l), clampa2(this.opacity));
    },
    displayable() {
      return (0 <= this.s && this.s <= 1 || isNaN(this.s)) && (0 <= this.l && this.l <= 1) && (0 <= this.opacity && this.opacity <= 1);
    },
    formatHsl() {
      const a2 = clampa2(this.opacity);
      return `${a2 === 1 ? "hsl(" : "hsla("}${clamph2(this.h)}, ${clampt2(this.s) * 100}%, ${clampt2(this.l) * 100}%${a2 === 1 ? ")" : `, ${a2})`}`;
    }
  }));
  function clamph2(value) {
    value = (value || 0) % 360;
    return value < 0 ? value + 360 : value;
  }
  function clampt2(value) {
    return Math.max(0, Math.min(1, value || 0));
  }
  function hsl2rgb4(h, m1, m22) {
    return (h < 60 ? m1 + (m22 - m1) * h / 60 : h < 180 ? m22 : h < 240 ? m1 + (m22 - m1) * (240 - h) / 60 : m1) * 255;
  }

  // node_modules/@nivo/colors/node_modules/d3-color/src/math.js
  var radians = Math.PI / 180;
  var degrees = 180 / Math.PI;

  // node_modules/@nivo/colors/node_modules/d3-color/src/cubehelix.js
  var A3 = -0.14861;
  var B2 = 1.78277;
  var C4 = -0.29227;
  var D2 = -0.90649;
  var E3 = 1.97294;
  var ED2 = E3 * D2;
  var EB2 = E3 * B2;
  var BC_DA2 = B2 * C4 - D2 * A3;
  function cubehelixConvert2(o6) {
    if (o6 instanceof Cubehelix2)
      return new Cubehelix2(o6.h, o6.s, o6.l, o6.opacity);
    if (!(o6 instanceof Rgb3))
      o6 = rgbConvert3(o6);
    var r6 = o6.r / 255, g2 = o6.g / 255, b3 = o6.b / 255, l5 = (BC_DA2 * b3 + ED2 * r6 - EB2 * g2) / (BC_DA2 + ED2 - EB2), bl = b3 - l5, k2 = (E3 * (g2 - l5) - C4 * bl) / D2, s3 = Math.sqrt(k2 * k2 + bl * bl) / (E3 * l5 * (1 - l5)), h = s3 ? Math.atan2(k2, bl) * degrees - 120 : NaN;
    return new Cubehelix2(h < 0 ? h + 360 : h, s3, l5, o6.opacity);
  }
  function cubehelix3(h, s3, l5, opacity) {
    return arguments.length === 1 ? cubehelixConvert2(h) : new Cubehelix2(h, s3, l5, opacity == null ? 1 : opacity);
  }
  function Cubehelix2(h, s3, l5, opacity) {
    this.h = +h;
    this.s = +s3;
    this.l = +l5;
    this.opacity = +opacity;
  }
  define_default3(Cubehelix2, cubehelix3, extend3(Color4, {
    brighter(k2) {
      k2 = k2 == null ? brighter3 : Math.pow(brighter3, k2);
      return new Cubehelix2(this.h, this.s, this.l * k2, this.opacity);
    },
    darker(k2) {
      k2 = k2 == null ? darker3 : Math.pow(darker3, k2);
      return new Cubehelix2(this.h, this.s, this.l * k2, this.opacity);
    },
    rgb() {
      var h = isNaN(this.h) ? 0 : (this.h + 120) * radians, l5 = +this.l, a2 = isNaN(this.s) ? 0 : this.s * l5 * (1 - l5), cosh = Math.cos(h), sinh = Math.sin(h);
      return new Rgb3(
        255 * (l5 + a2 * (A3 * cosh + B2 * sinh)),
        255 * (l5 + a2 * (C4 * cosh + D2 * sinh)),
        255 * (l5 + a2 * (E3 * cosh)),
        this.opacity
      );
    }
  }));

  // node_modules/@nivo/colors/node_modules/d3-scale-chromatic/src/sequential-multi/cubehelix.js
  var cubehelix_default3 = cubehelixLong(cubehelix3(300, 0.5, 0), cubehelix3(-240, 0.5, 1));

  // node_modules/@nivo/colors/node_modules/d3-scale-chromatic/src/sequential-multi/rainbow.js
  var warm2 = cubehelixLong(cubehelix3(-100, 0.75, 0.35), cubehelix3(80, 1.5, 0.8));
  var cool2 = cubehelixLong(cubehelix3(260, 0.75, 0.35), cubehelix3(80, 1.5, 0.8));
  var c6 = cubehelix3();
  function rainbow_default2(t5) {
    if (t5 < 0 || t5 > 1)
      t5 -= Math.floor(t5);
    var ts2 = Math.abs(t5 - 0.5);
    c6.h = 360 * t5 - 100;
    c6.s = 1.5 - 1.5 * ts2;
    c6.l = 0.8 - 0.9 * ts2;
    return c6 + "";
  }

  // node_modules/@nivo/colors/node_modules/d3-scale-chromatic/src/sequential-multi/sinebow.js
  var c7 = rgb4();
  var pi_1_3 = Math.PI / 3;
  var pi_2_3 = Math.PI * 2 / 3;
  function sinebow_default2(t5) {
    var x3;
    t5 = (0.5 - t5) * Math.PI;
    c7.r = 255 * (x3 = Math.sin(t5)) * x3;
    c7.g = 255 * (x3 = Math.sin(t5 + pi_1_3)) * x3;
    c7.b = 255 * (x3 = Math.sin(t5 + pi_2_3)) * x3;
    return c7 + "";
  }

  // node_modules/@nivo/colors/node_modules/d3-scale-chromatic/src/sequential-multi/turbo.js
  function turbo_default(t5) {
    t5 = Math.max(0, Math.min(1, t5));
    return "rgb(" + Math.max(0, Math.min(255, Math.round(34.61 + t5 * (1172.33 - t5 * (10793.56 - t5 * (33300.12 - t5 * (38394.49 - t5 * 14825.05))))))) + ", " + Math.max(0, Math.min(255, Math.round(23.31 + t5 * (557.33 + t5 * (1225.33 - t5 * (3574.96 - t5 * (1073.77 + t5 * 707.56))))))) + ", " + Math.max(0, Math.min(255, Math.round(27.2 + t5 * (3211.1 - t5 * (15327.97 - t5 * (27814 - t5 * (22569.18 - t5 * 6838.66))))))) + ")";
  }

  // node_modules/@nivo/colors/node_modules/d3-scale-chromatic/src/sequential-multi/viridis.js
  function ramp(range) {
    var n6 = range.length;
    return function(t5) {
      return range[Math.max(0, Math.min(n6 - 1, Math.floor(t5 * n6)))];
    };
  }
  var viridis_default2 = ramp(colors_default2("44015444025645045745055946075a46085c460a5d460b5e470d60470e6147106347116447136548146748166848176948186a481a6c481b6d481c6e481d6f481f70482071482173482374482475482576482677482878482979472a7a472c7a472d7b472e7c472f7d46307e46327e46337f463480453581453781453882443983443a83443b84433d84433e85423f854240864241864142874144874045884046883f47883f48893e49893e4a893e4c8a3d4d8a3d4e8a3c4f8a3c508b3b518b3b528b3a538b3a548c39558c39568c38588c38598c375a8c375b8d365c8d365d8d355e8d355f8d34608d34618d33628d33638d32648e32658e31668e31678e31688e30698e306a8e2f6b8e2f6c8e2e6d8e2e6e8e2e6f8e2d708e2d718e2c718e2c728e2c738e2b748e2b758e2a768e2a778e2a788e29798e297a8e297b8e287c8e287d8e277e8e277f8e27808e26818e26828e26828e25838e25848e25858e24868e24878e23888e23898e238a8d228b8d228c8d228d8d218e8d218f8d21908d21918c20928c20928c20938c1f948c1f958b1f968b1f978b1f988b1f998a1f9a8a1e9b8a1e9c891e9d891f9e891f9f881fa0881fa1881fa1871fa28720a38620a48621a58521a68522a78522a88423a98324aa8325ab8225ac8226ad8127ad8128ae8029af7f2ab07f2cb17e2db27d2eb37c2fb47c31b57b32b67a34b67935b77937b87838b9773aba763bbb753dbc743fbc7340bd7242be7144bf7046c06f48c16e4ac16d4cc26c4ec36b50c46a52c56954c56856c66758c7655ac8645cc8635ec96260ca6063cb5f65cb5e67cc5c69cd5b6ccd5a6ece5870cf5773d05675d05477d1537ad1517cd2507fd34e81d34d84d44b86d54989d5488bd6468ed64590d74393d74195d84098d83e9bd93c9dd93ba0da39a2da37a5db36a8db34aadc32addc30b0dd2fb2dd2db5de2bb8de29bade28bddf26c0df25c2df23c5e021c8e020cae11fcde11dd0e11cd2e21bd5e21ad8e219dae319dde318dfe318e2e418e5e419e7e419eae51aece51befe51cf1e51df4e61ef6e620f8e621fbe723fde725"));
  var magma2 = ramp(colors_default2("00000401000501010601010802010902020b02020d03030f03031204041405041606051806051a07061c08071e0907200a08220b09240c09260d0a290e0b2b100b2d110c2f120d31130d34140e36150e38160f3b180f3d19103f1a10421c10441d11471e114920114b21114e22115024125325125527125829115a2a115c2c115f2d11612f116331116533106734106936106b38106c390f6e3b0f703d0f713f0f72400f74420f75440f764510774710784910784a10794c117a4e117b4f127b51127c52137c54137d56147d57157e59157e5a167e5c167f5d177f5f187f601880621980641a80651a80671b80681c816a1c816b1d816d1d816e1e81701f81721f817320817521817621817822817922827b23827c23827e24828025828125818326818426818627818827818928818b29818c29818e2a81902a81912b81932b80942c80962c80982d80992d809b2e7f9c2e7f9e2f7fa02f7fa1307ea3307ea5317ea6317da8327daa337dab337cad347cae347bb0357bb2357bb3367ab5367ab73779b83779ba3878bc3978bd3977bf3a77c03a76c23b75c43c75c53c74c73d73c83e73ca3e72cc3f71cd4071cf4070d0416fd2426fd3436ed5446dd6456cd8456cd9466bdb476adc4869de4968df4a68e04c67e24d66e34e65e44f64e55064e75263e85362e95462ea5661eb5760ec5860ed5a5fee5b5eef5d5ef05f5ef1605df2625df2645cf3655cf4675cf4695cf56b5cf66c5cf66e5cf7705cf7725cf8745cf8765cf9785df9795df97b5dfa7d5efa7f5efa815ffb835ffb8560fb8761fc8961fc8a62fc8c63fc8e64fc9065fd9266fd9467fd9668fd9869fd9a6afd9b6bfe9d6cfe9f6dfea16efea36ffea571fea772fea973feaa74feac76feae77feb078feb27afeb47bfeb67cfeb77efeb97ffebb81febd82febf84fec185fec287fec488fec68afec88cfeca8dfecc8ffecd90fecf92fed194fed395fed597fed799fed89afdda9cfddc9efddea0fde0a1fde2a3fde3a5fde5a7fde7a9fde9aafdebacfcecaefceeb0fcf0b2fcf2b4fcf4b6fcf6b8fcf7b9fcf9bbfcfbbdfcfdbf"));
  var inferno2 = ramp(colors_default2("00000401000501010601010802010a02020c02020e03021004031204031405041706041907051b08051d09061f0a07220b07240c08260d08290e092b10092d110a30120a32140b34150b37160b39180c3c190c3e1b0c411c0c431e0c451f0c48210c4a230c4c240c4f260c51280b53290b552b0b572d0b592f0a5b310a5c320a5e340a5f3609613809623909633b09643d09653e0966400a67420a68440a68450a69470b6a490b6a4a0c6b4c0c6b4d0d6c4f0d6c510e6c520e6d540f6d550f6d57106e59106e5a116e5c126e5d126e5f136e61136e62146e64156e65156e67166e69166e6a176e6c186e6d186e6f196e71196e721a6e741a6e751b6e771c6d781c6d7a1d6d7c1d6d7d1e6d7f1e6c801f6c82206c84206b85216b87216b88226a8a226a8c23698d23698f24699025689225689326679526679727669827669a28659b29649d29649f2a63a02a63a22b62a32c61a52c60a62d60a82e5fa92e5eab2f5ead305dae305cb0315bb1325ab3325ab43359b63458b73557b93556ba3655bc3754bd3853bf3952c03a51c13a50c33b4fc43c4ec63d4dc73e4cc83f4bca404acb4149cc4248ce4347cf4446d04545d24644d34743d44842d54a41d74b3fd84c3ed94d3dda4e3cdb503bdd513ade5238df5337e05536e15635e25734e35933e45a31e55c30e65d2fe75e2ee8602de9612bea632aeb6429eb6628ec6726ed6925ee6a24ef6c23ef6e21f06f20f1711ff1731df2741cf3761bf37819f47918f57b17f57d15f67e14f68013f78212f78410f8850ff8870ef8890cf98b0bf98c0af98e09fa9008fa9207fa9407fb9606fb9706fb9906fb9b06fb9d07fc9f07fca108fca309fca50afca60cfca80dfcaa0ffcac11fcae12fcb014fcb216fcb418fbb61afbb81dfbba1ffbbc21fbbe23fac026fac228fac42afac62df9c72ff9c932f9cb35f8cd37f8cf3af7d13df7d340f6d543f6d746f5d949f5db4cf4dd4ff4df53f4e156f3e35af3e55df2e661f2e865f2ea69f1ec6df1ed71f1ef75f1f179f2f27df2f482f3f586f3f68af4f88ef5f992f6fa96f8fb9af9fc9dfafda1fcffa4"));
  var plasma2 = ramp(colors_default2("0d088710078813078916078a19068c1b068d1d068e20068f2206902406912605912805922a05932c05942e05952f059631059733059735049837049938049a3a049a3c049b3e049c3f049c41049d43039e44039e46039f48039f4903a04b03a14c02a14e02a25002a25102a35302a35502a45601a45801a45901a55b01a55c01a65e01a66001a66100a76300a76400a76600a76700a86900a86a00a86c00a86e00a86f00a87100a87201a87401a87501a87701a87801a87a02a87b02a87d03a87e03a88004a88104a78305a78405a78606a68707a68808a68a09a58b0aa58d0ba58e0ca48f0da4910ea3920fa39410a29511a19613a19814a099159f9a169f9c179e9d189d9e199da01a9ca11b9ba21d9aa31e9aa51f99a62098a72197a82296aa2395ab2494ac2694ad2793ae2892b02991b12a90b22b8fb32c8eb42e8db52f8cb6308bb7318ab83289ba3388bb3488bc3587bd3786be3885bf3984c03a83c13b82c23c81c33d80c43e7fc5407ec6417dc7427cc8437bc9447aca457acb4679cc4778cc4977cd4a76ce4b75cf4c74d04d73d14e72d24f71d35171d45270d5536fd5546ed6556dd7566cd8576bd9586ada5a6ada5b69db5c68dc5d67dd5e66de5f65de6164df6263e06363e16462e26561e26660e3685fe4695ee56a5de56b5de66c5ce76e5be76f5ae87059e97158e97257ea7457eb7556eb7655ec7754ed7953ed7a52ee7b51ef7c51ef7e50f07f4ff0804ef1814df1834cf2844bf3854bf3874af48849f48948f58b47f58c46f68d45f68f44f79044f79143f79342f89441f89540f9973ff9983ef99a3efa9b3dfa9c3cfa9e3bfb9f3afba139fba238fca338fca537fca636fca835fca934fdab33fdac33fdae32fdaf31fdb130fdb22ffdb42ffdb52efeb72dfeb82cfeba2cfebb2bfebd2afebe2afec029fdc229fdc328fdc527fdc627fdc827fdca26fdcb26fccd25fcce25fcd025fcd225fbd324fbd524fbd724fad824fada24f9dc24f9dd25f8df25f8e125f7e225f7e425f6e626f6e826f5e926f5eb27f4ed27f3ee27f3f027f2f227f1f426f1f525f0f724f0f921"));

  // node_modules/@nivo/colors/dist/nivo-colors.es.js
  var import_react18 = __toESM(require_react());
  var import_get2 = __toESM(require_get());
  var import_isPlainObject2 = __toESM(require_isPlainObject());
  var import_prop_types2 = __toESM(require_prop_types());

  // node_modules/@nivo/colors/node_modules/d3-scale/src/init.js
  function initRange3(domain, range) {
    switch (arguments.length) {
      case 0:
        break;
      case 1:
        this.range(domain);
        break;
      default:
        this.range(range).domain(domain);
        break;
    }
    return this;
  }

  // node_modules/@nivo/colors/node_modules/d3-scale/src/ordinal.js
  var implicit2 = Symbol("implicit");
  function ordinal2() {
    var index = new InternMap(), domain = [], range = [], unknown = implicit2;
    function scale2(d2) {
      let i6 = index.get(d2);
      if (i6 === void 0) {
        if (unknown !== implicit2)
          return unknown;
        index.set(d2, i6 = domain.push(d2) - 1);
      }
      return range[i6 % range.length];
    }
    scale2.domain = function(_2) {
      if (!arguments.length)
        return domain.slice();
      domain = [], index = new InternMap();
      for (const value of _2) {
        if (index.has(value))
          continue;
        index.set(value, domain.push(value) - 1);
      }
      return scale2;
    };
    scale2.range = function(_2) {
      return arguments.length ? (range = Array.from(_2), scale2) : range.slice();
    };
    scale2.unknown = function(_2) {
      return arguments.length ? (unknown = _2, scale2) : unknown;
    };
    scale2.copy = function() {
      return ordinal2(domain, range).unknown(unknown);
    };
    initRange3.apply(scale2, arguments);
    return scale2;
  }

  // node_modules/@nivo/colors/dist/nivo-colors.es.js
  function qe() {
    return qe = Object.assign ? Object.assign.bind() : function(e7) {
      for (var r6 = 1; r6 < arguments.length; r6++) {
        var n6 = arguments[r6];
        for (var t5 in n6)
          Object.prototype.hasOwnProperty.call(n6, t5) && (e7[t5] = n6[t5]);
      }
      return e7;
    }, qe.apply(this, arguments);
  }
  function Ce(e7, r6) {
    (null == r6 || r6 > e7.length) && (r6 = e7.length);
    for (var n6 = 0, t5 = new Array(r6); n6 < r6; n6++)
      t5[n6] = e7[n6];
    return t5;
  }
  function Ge(e7, r6) {
    var n6 = "undefined" != typeof Symbol && e7[Symbol.iterator] || e7["@@iterator"];
    if (n6)
      return (n6 = n6.call(e7)).next.bind(n6);
    if (Array.isArray(e7) || (n6 = function(e8, r7) {
      if (e8) {
        if ("string" == typeof e8)
          return Ce(e8, r7);
        var n7 = Object.prototype.toString.call(e8).slice(8, -1);
        return "Object" === n7 && e8.constructor && (n7 = e8.constructor.name), "Map" === n7 || "Set" === n7 ? Array.from(e8) : "Arguments" === n7 || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n7) ? Ce(e8, r7) : void 0;
      }
    }(e7)) || r6 && e7 && "number" == typeof e7.length) {
      n6 && (e7 = n6);
      var t5 = 0;
      return function() {
        return t5 >= e7.length ? { done: true } : { done: false, value: e7[t5++] };
      };
    }
    throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }
  var Re = { nivo: ["#e8c1a0", "#f47560", "#f1e15b", "#e8a838", "#61cdbb", "#97e3d5"], category10: category10_default2, accent: Accent_default2, dark2: Dark2_default2, paired: Paired_default2, pastel1: Pastel1_default2, pastel2: Pastel2_default2, set1: Set1_default2, set2: Set2_default2, set3: Set3_default2, tableau10: Tableau10_default };
  var Ve = Object.keys(Re);
  var Pe = { brown_blueGreen: scheme28, purpleRed_green: scheme29, pink_yellowGreen: scheme30, purple_orange: scheme31, red_blue: scheme32, red_grey: scheme33, red_yellow_blue: scheme34, red_yellow_green: scheme35, spectral: scheme36 };
  var Te = Object.keys(Pe);
  var Ue = { brown_blueGreen: BrBG_default2, purpleRed_green: PRGn_default2, pink_yellowGreen: PiYG_default2, purple_orange: PuOr_default2, red_blue: RdBu_default2, red_grey: RdGy_default2, red_yellow_blue: RdYlBu_default2, red_yellow_green: RdYlGn_default2, spectral: Spectral_default2 };
  var De = { blues: scheme49, greens: scheme50, greys: scheme51, oranges: scheme54, purples: scheme52, reds: scheme53, blue_green: scheme37, blue_purple: scheme38, green_blue: scheme39, orange_red: scheme40, purple_blue_green: scheme41, purple_blue: scheme42, purple_red: scheme43, red_purple: scheme44, yellow_green_blue: scheme45, yellow_green: scheme46, yellow_orange_brown: scheme47, yellow_orange_red: scheme48 };
  var Me = Object.keys(De);
  var $e = { blues: Blues_default2, greens: Greens_default2, greys: Greys_default2, oranges: Oranges_default2, purples: Purples_default2, reds: Reds_default2, turbo: turbo_default, viridis: viridis_default2, inferno: inferno2, magma: magma2, plasma: plasma2, cividis: cividis_default, warm: warm2, cool: cool2, cubehelixDefault: cubehelix_default3, blue_green: BuGn_default2, blue_purple: BuPu_default2, green_blue: GnBu_default2, orange_red: OrRd_default2, purple_blue_green: PuBuGn_default2, purple_blue: PuBu_default2, purple_red: PuRd_default2, red_purple: RdPu_default2, yellow_green_blue: YlGnBu_default2, yellow_green: YlGn_default2, yellow_orange_brown: YlOrBr_default2, yellow_orange_red: YlOrRd_default2 };
  var Be = qe({}, Re, Pe, De);
  var Fe = Object.keys(Be);
  var He = function(e7) {
    return Ve.includes(e7);
  };
  var Je = function(e7) {
    return Te.includes(e7);
  };
  var Ke = function(e7) {
    return Me.includes(e7);
  };
  var Le = { rainbow: rainbow_default2, sinebow: sinebow_default2 };
  var Ne = qe({}, Ue, $e, Le);
  var Qe2 = Object.keys(Ne);
  var We = function(e7, r6) {
    if ("function" == typeof e7)
      return e7;
    if ((0, import_isPlainObject2.default)(e7)) {
      if (function(e8) {
        return void 0 !== e8.theme;
      }(e7)) {
        if (void 0 === r6)
          throw new Error("Unable to use color from theme as no theme was provided");
        var n6 = (0, import_get2.default)(r6, e7.theme);
        if (void 0 === n6)
          throw new Error("Color from theme is undefined at path: '" + e7.theme + "'");
        return function() {
          return n6;
        };
      }
      if (function(e8) {
        return void 0 !== e8.from;
      }(e7)) {
        var t5 = function(r7) {
          return (0, import_get2.default)(r7, e7.from);
        };
        if (Array.isArray(e7.modifiers)) {
          for (var o6, i6 = [], u5 = function() {
            var e8 = o6.value, r7 = e8[0], n7 = e8[1];
            if ("brighter" === r7)
              i6.push(function(e9) {
                return e9.brighter(n7);
              });
            else if ("darker" === r7)
              i6.push(function(e9) {
                return e9.darker(n7);
              });
            else {
              if ("opacity" !== r7)
                throw new Error("Invalid color modifier: '" + r7 + "', must be one of: 'brighter', 'darker', 'opacity'");
              i6.push(function(e9) {
                return e9.opacity = n7, e9;
              });
            }
          }, a2 = Ge(e7.modifiers); !(o6 = a2()).done; )
            u5();
          return 0 === i6.length ? t5 : function(e8) {
            return i6.reduce(function(e9, r7) {
              return r7(e9);
            }, rgb4(t5(e8))).toString();
          };
        }
        return t5;
      }
      throw new Error("Invalid color spec, you should either specify 'theme' or 'from' when using a config object");
    }
    return function() {
      return e7;
    };
  };
  var Xe = function(e7, r6) {
    return (0, import_react18.useMemo)(function() {
      return We(e7, r6);
    }, [e7, r6]);
  };
  var Ye = import_prop_types2.default.oneOfType([import_prop_types2.default.string, import_prop_types2.default.func, import_prop_types2.default.shape({ theme: import_prop_types2.default.string.isRequired }), import_prop_types2.default.shape({ from: import_prop_types2.default.string.isRequired, modifiers: import_prop_types2.default.arrayOf(import_prop_types2.default.array) })]);
  var fr = function(e7, r6) {
    if ("function" == typeof e7)
      return e7;
    var n6 = "function" == typeof r6 ? r6 : function(e8) {
      return (0, import_get2.default)(e8, r6);
    };
    if (Array.isArray(e7)) {
      var t5 = ordinal2(e7), o6 = function(e8) {
        return t5(n6(e8));
      };
      return o6.scale = t5, o6;
    }
    if ((0, import_isPlainObject2.default)(e7)) {
      if (function(e8) {
        return void 0 !== e8.datum;
      }(e7))
        return function(r7) {
          return (0, import_get2.default)(r7, e7.datum);
        };
      if (function(e8) {
        return void 0 !== e8.scheme;
      }(e7)) {
        if (He(e7.scheme)) {
          var i6 = ordinal2(Be[e7.scheme]), u5 = function(e8) {
            return i6(n6(e8));
          };
          return u5.scale = i6, u5;
        }
        if (Je(e7.scheme)) {
          if (void 0 !== e7.size && (e7.size < 3 || e7.size > 11))
            throw new Error("Invalid size '" + e7.size + "' for diverging color scheme '" + e7.scheme + "', must be between 3~11");
          var a2 = ordinal2(Be[e7.scheme][e7.size || 11]), l5 = function(e8) {
            return a2(n6(e8));
          };
          return l5.scale = a2, l5;
        }
        if (Ke(e7.scheme)) {
          if (void 0 !== e7.size && (e7.size < 3 || e7.size > 9))
            throw new Error("Invalid size '" + e7.size + "' for sequential color scheme '" + e7.scheme + "', must be between 3~9");
          var c8 = ordinal2(Be[e7.scheme][e7.size || 9]), s3 = function(e8) {
            return c8(n6(e8));
          };
          return s3.scale = c8, s3;
        }
      }
      throw new Error("Invalid colors, when using an object, you should either pass a 'datum' or a 'scheme' property");
    }
    return function() {
      return e7;
    };
  };
  var pr = function(e7, r6) {
    return (0, import_react18.useMemo)(function() {
      return fr(e7, r6);
    }, [e7, r6]);
  };

  // node_modules/@nivo/tree/dist/nivo-tree.es.js
  var import_jsx_runtime5 = __toESM(require_jsx_runtime());

  // node_modules/@nivo/text/node_modules/@react-spring/web/dist/react-spring_web.modern.mjs
  var import_react_dom4 = __toESM(require_react_dom(), 1);
  var isCustomPropRE4 = /^--/;
  function dangerousStyleValue4(name, value) {
    if (value == null || typeof value === "boolean" || value === "")
      return "";
    if (typeof value === "number" && value !== 0 && !isCustomPropRE4.test(name) && !(isUnitlessNumber4.hasOwnProperty(name) && isUnitlessNumber4[name]))
      return value + "px";
    return ("" + value).trim();
  }
  var attributeCache4 = {};
  function applyAnimatedValues4(instance, props) {
    if (!instance.nodeType || !instance.setAttribute) {
      return false;
    }
    const isFilterElement = instance.nodeName === "filter" || instance.parentNode && instance.parentNode.nodeName === "filter";
    const {
      className,
      style,
      children,
      scrollTop,
      scrollLeft,
      viewBox,
      ...attributes
    } = props;
    const values = Object.values(attributes);
    const names2 = Object.keys(attributes).map(
      (name) => isFilterElement || instance.hasAttribute(name) ? name : attributeCache4[name] || (attributeCache4[name] = name.replace(
        /([A-Z])/g,
        (n6) => "-" + n6.toLowerCase()
      ))
    );
    if (children !== void 0) {
      instance.textContent = children;
    }
    for (const name in style) {
      if (style.hasOwnProperty(name)) {
        const value = dangerousStyleValue4(name, style[name]);
        if (isCustomPropRE4.test(name)) {
          instance.style.setProperty(name, value);
        } else {
          instance.style[name] = value;
        }
      }
    }
    names2.forEach((name, i6) => {
      instance.setAttribute(name, values[i6]);
    });
    if (className !== void 0) {
      instance.className = className;
    }
    if (scrollTop !== void 0) {
      instance.scrollTop = scrollTop;
    }
    if (scrollLeft !== void 0) {
      instance.scrollLeft = scrollLeft;
    }
    if (viewBox !== void 0) {
      instance.setAttribute("viewBox", viewBox);
    }
  }
  var isUnitlessNumber4 = {
    animationIterationCount: true,
    borderImageOutset: true,
    borderImageSlice: true,
    borderImageWidth: true,
    boxFlex: true,
    boxFlexGroup: true,
    boxOrdinalGroup: true,
    columnCount: true,
    columns: true,
    flex: true,
    flexGrow: true,
    flexPositive: true,
    flexShrink: true,
    flexNegative: true,
    flexOrder: true,
    gridRow: true,
    gridRowEnd: true,
    gridRowSpan: true,
    gridRowStart: true,
    gridColumn: true,
    gridColumnEnd: true,
    gridColumnSpan: true,
    gridColumnStart: true,
    fontWeight: true,
    lineClamp: true,
    lineHeight: true,
    opacity: true,
    order: true,
    orphans: true,
    tabSize: true,
    widows: true,
    zIndex: true,
    zoom: true,
    fillOpacity: true,
    floodOpacity: true,
    stopOpacity: true,
    strokeDasharray: true,
    strokeDashoffset: true,
    strokeMiterlimit: true,
    strokeOpacity: true,
    strokeWidth: true
  };
  var prefixKey4 = (prefix2, key) => prefix2 + key.charAt(0).toUpperCase() + key.substring(1);
  var prefixes5 = ["Webkit", "Ms", "Moz", "O"];
  isUnitlessNumber4 = Object.keys(isUnitlessNumber4).reduce((acc, prop) => {
    prefixes5.forEach((prefix2) => acc[prefixKey4(prefix2, prop)] = acc[prop]);
    return acc;
  }, isUnitlessNumber4);
  var domTransforms4 = /^(matrix|translate|scale|rotate|skew)/;
  var pxTransforms4 = /^(translate)/;
  var degTransforms4 = /^(rotate|skew)/;
  var addUnit4 = (value, unit2) => is.num(value) && value !== 0 ? value + unit2 : value;
  var isValueIdentity4 = (value, id) => is.arr(value) ? value.every((v4) => isValueIdentity4(v4, id)) : is.num(value) ? value === id : parseFloat(value) === id;
  var AnimatedStyle4 = class extends AnimatedObject {
    constructor({ x: x3, y: y4, z: z3, ...style }) {
      const inputs = [];
      const transforms = [];
      if (x3 || y4 || z3) {
        inputs.push([x3 || 0, y4 || 0, z3 || 0]);
        transforms.push((xyz) => [
          `translate3d(${xyz.map((v4) => addUnit4(v4, "px")).join(",")})`,
          isValueIdentity4(xyz, 0)
        ]);
      }
      eachProp(style, (value, key) => {
        if (key === "transform") {
          inputs.push([value || ""]);
          transforms.push((transform) => [transform, transform === ""]);
        } else if (domTransforms4.test(key)) {
          delete style[key];
          if (is.und(value))
            return;
          const unit2 = pxTransforms4.test(key) ? "px" : degTransforms4.test(key) ? "deg" : "";
          inputs.push(toArray(value));
          transforms.push(
            key === "rotate3d" ? ([x22, y22, z22, deg]) => [
              `rotate3d(${x22},${y22},${z22},${addUnit4(deg, unit2)})`,
              isValueIdentity4(deg, 0)
            ] : (input) => [
              `${key}(${input.map((v4) => addUnit4(v4, unit2)).join(",")})`,
              isValueIdentity4(input, key.startsWith("scale") ? 1 : 0)
            ]
          );
        }
      });
      if (inputs.length) {
        style.transform = new FluidTransform4(inputs, transforms);
      }
      super(style);
    }
  };
  var FluidTransform4 = class extends FluidValue {
    constructor(inputs, transforms) {
      super();
      this.inputs = inputs;
      this.transforms = transforms;
      this._value = null;
    }
    get() {
      return this._value || (this._value = this._get());
    }
    _get() {
      let transform = "";
      let identity2 = true;
      each2(this.inputs, (input, i6) => {
        const arg1 = getFluidValue(input[0]);
        const [t5, id] = this.transforms[i6](
          is.arr(arg1) ? arg1 : input.map(getFluidValue)
        );
        transform += " " + t5;
        identity2 = identity2 && id;
      });
      return identity2 ? "none" : transform;
    }
    observerAdded(count2) {
      if (count2 == 1)
        each2(
          this.inputs,
          (input) => each2(
            input,
            (value) => hasFluidValue(value) && addFluidObserver(value, this)
          )
        );
    }
    observerRemoved(count2) {
      if (count2 == 0)
        each2(
          this.inputs,
          (input) => each2(
            input,
            (value) => hasFluidValue(value) && removeFluidObserver(value, this)
          )
        );
    }
    eventObserved(event) {
      if (event.type == "change") {
        this._value = null;
      }
      callFluidObservers(this, event);
    }
  };
  var primitives4 = [
    "a",
    "abbr",
    "address",
    "area",
    "article",
    "aside",
    "audio",
    "b",
    "base",
    "bdi",
    "bdo",
    "big",
    "blockquote",
    "body",
    "br",
    "button",
    "canvas",
    "caption",
    "cite",
    "code",
    "col",
    "colgroup",
    "data",
    "datalist",
    "dd",
    "del",
    "details",
    "dfn",
    "dialog",
    "div",
    "dl",
    "dt",
    "em",
    "embed",
    "fieldset",
    "figcaption",
    "figure",
    "footer",
    "form",
    "h1",
    "h2",
    "h3",
    "h4",
    "h5",
    "h6",
    "head",
    "header",
    "hgroup",
    "hr",
    "html",
    "i",
    "iframe",
    "img",
    "input",
    "ins",
    "kbd",
    "keygen",
    "label",
    "legend",
    "li",
    "link",
    "main",
    "map",
    "mark",
    "menu",
    "menuitem",
    "meta",
    "meter",
    "nav",
    "noscript",
    "object",
    "ol",
    "optgroup",
    "option",
    "output",
    "p",
    "param",
    "picture",
    "pre",
    "progress",
    "q",
    "rp",
    "rt",
    "ruby",
    "s",
    "samp",
    "script",
    "section",
    "select",
    "small",
    "source",
    "span",
    "strong",
    "style",
    "sub",
    "summary",
    "sup",
    "table",
    "tbody",
    "td",
    "textarea",
    "tfoot",
    "th",
    "thead",
    "time",
    "title",
    "tr",
    "track",
    "u",
    "ul",
    "var",
    "video",
    "wbr",
    "circle",
    "clipPath",
    "defs",
    "ellipse",
    "foreignObject",
    "g",
    "image",
    "line",
    "linearGradient",
    "mask",
    "path",
    "pattern",
    "polygon",
    "polyline",
    "radialGradient",
    "rect",
    "stop",
    "svg",
    "text",
    "tspan"
  ];
  globals_exports.assign({
    batchedUpdates: import_react_dom4.unstable_batchedUpdates,
    createStringInterpolator: createStringInterpolator2,
    colors: colors22
  });
  var host4 = createHost(primitives4, {
    applyAnimatedValues: applyAnimatedValues4,
    createAnimatedStyle: (style) => new AnimatedStyle4(style),
    getComponentProps: ({ scrollTop, scrollLeft, ...props }) => props
  });
  var animated4 = host4.animated;

  // node_modules/@nivo/text/dist/nivo-text.es.js
  var import_jsx_runtime3 = __toESM(require_jsx_runtime());
  var r3 = function(t5, e7, i6, n6, o6) {
    void 0 === n6 && (n6 = 0), void 0 === o6 && (o6 = 0), e7.outlineWidth > 0 && (t5.strokeStyle = e7.outlineColor, t5.lineWidth = 2 * e7.outlineWidth, t5.lineJoin = "round", t5.strokeText(i6, n6, o6)), t5.fillStyle = e7.fill, t5.fillText(i6, n6, o6);
  };

  // node_modules/@nivo/voronoi/dist/nivo-voronoi.es.js
  var import_react19 = __toESM(require_react());

  // node_modules/robust-predicates/esm/util.js
  var epsilon3 = 11102230246251565e-32;
  var splitter = 134217729;
  var resulterrbound = (3 + 8 * epsilon3) * epsilon3;
  function sum2(elen, e7, flen, f2, h) {
    let Q2, Qnew, hh, bvirt;
    let enow = e7[0];
    let fnow = f2[0];
    let eindex = 0;
    let findex = 0;
    if (fnow > enow === fnow > -enow) {
      Q2 = enow;
      enow = e7[++eindex];
    } else {
      Q2 = fnow;
      fnow = f2[++findex];
    }
    let hindex = 0;
    if (eindex < elen && findex < flen) {
      if (fnow > enow === fnow > -enow) {
        Qnew = enow + Q2;
        hh = Q2 - (Qnew - enow);
        enow = e7[++eindex];
      } else {
        Qnew = fnow + Q2;
        hh = Q2 - (Qnew - fnow);
        fnow = f2[++findex];
      }
      Q2 = Qnew;
      if (hh !== 0) {
        h[hindex++] = hh;
      }
      while (eindex < elen && findex < flen) {
        if (fnow > enow === fnow > -enow) {
          Qnew = Q2 + enow;
          bvirt = Qnew - Q2;
          hh = Q2 - (Qnew - bvirt) + (enow - bvirt);
          enow = e7[++eindex];
        } else {
          Qnew = Q2 + fnow;
          bvirt = Qnew - Q2;
          hh = Q2 - (Qnew - bvirt) + (fnow - bvirt);
          fnow = f2[++findex];
        }
        Q2 = Qnew;
        if (hh !== 0) {
          h[hindex++] = hh;
        }
      }
    }
    while (eindex < elen) {
      Qnew = Q2 + enow;
      bvirt = Qnew - Q2;
      hh = Q2 - (Qnew - bvirt) + (enow - bvirt);
      enow = e7[++eindex];
      Q2 = Qnew;
      if (hh !== 0) {
        h[hindex++] = hh;
      }
    }
    while (findex < flen) {
      Qnew = Q2 + fnow;
      bvirt = Qnew - Q2;
      hh = Q2 - (Qnew - bvirt) + (fnow - bvirt);
      fnow = f2[++findex];
      Q2 = Qnew;
      if (hh !== 0) {
        h[hindex++] = hh;
      }
    }
    if (Q2 !== 0 || hindex === 0) {
      h[hindex++] = Q2;
    }
    return hindex;
  }
  function estimate(elen, e7) {
    let Q2 = e7[0];
    for (let i6 = 1; i6 < elen; i6++)
      Q2 += e7[i6];
    return Q2;
  }
  function vec(n6) {
    return new Float64Array(n6);
  }

  // node_modules/robust-predicates/esm/orient2d.js
  var ccwerrboundA = (3 + 16 * epsilon3) * epsilon3;
  var ccwerrboundB = (2 + 12 * epsilon3) * epsilon3;
  var ccwerrboundC = (9 + 64 * epsilon3) * epsilon3 * epsilon3;
  var B3 = vec(4);
  var C1 = vec(8);
  var C22 = vec(12);
  var D3 = vec(16);
  var u2 = vec(4);
  function orient2dadapt(ax, ay, bx, by, cx, cy, detsum) {
    let acxtail, acytail, bcxtail, bcytail;
    let bvirt, c8, ahi, alo, bhi, blo, _i, _j, _0, s1, s0, t12, t02, u32;
    const acx = ax - cx;
    const bcx = bx - cx;
    const acy = ay - cy;
    const bcy = by - cy;
    s1 = acx * bcy;
    c8 = splitter * acx;
    ahi = c8 - (c8 - acx);
    alo = acx - ahi;
    c8 = splitter * bcy;
    bhi = c8 - (c8 - bcy);
    blo = bcy - bhi;
    s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);
    t12 = acy * bcx;
    c8 = splitter * acy;
    ahi = c8 - (c8 - acy);
    alo = acy - ahi;
    c8 = splitter * bcx;
    bhi = c8 - (c8 - bcx);
    blo = bcx - bhi;
    t02 = alo * blo - (t12 - ahi * bhi - alo * bhi - ahi * blo);
    _i = s0 - t02;
    bvirt = s0 - _i;
    B3[0] = s0 - (_i + bvirt) + (bvirt - t02);
    _j = s1 + _i;
    bvirt = _j - s1;
    _0 = s1 - (_j - bvirt) + (_i - bvirt);
    _i = _0 - t12;
    bvirt = _0 - _i;
    B3[1] = _0 - (_i + bvirt) + (bvirt - t12);
    u32 = _j + _i;
    bvirt = u32 - _j;
    B3[2] = _j - (u32 - bvirt) + (_i - bvirt);
    B3[3] = u32;
    let det = estimate(4, B3);
    let errbound = ccwerrboundB * detsum;
    if (det >= errbound || -det >= errbound) {
      return det;
    }
    bvirt = ax - acx;
    acxtail = ax - (acx + bvirt) + (bvirt - cx);
    bvirt = bx - bcx;
    bcxtail = bx - (bcx + bvirt) + (bvirt - cx);
    bvirt = ay - acy;
    acytail = ay - (acy + bvirt) + (bvirt - cy);
    bvirt = by - bcy;
    bcytail = by - (bcy + bvirt) + (bvirt - cy);
    if (acxtail === 0 && acytail === 0 && bcxtail === 0 && bcytail === 0) {
      return det;
    }
    errbound = ccwerrboundC * detsum + resulterrbound * Math.abs(det);
    det += acx * bcytail + bcy * acxtail - (acy * bcxtail + bcx * acytail);
    if (det >= errbound || -det >= errbound)
      return det;
    s1 = acxtail * bcy;
    c8 = splitter * acxtail;
    ahi = c8 - (c8 - acxtail);
    alo = acxtail - ahi;
    c8 = splitter * bcy;
    bhi = c8 - (c8 - bcy);
    blo = bcy - bhi;
    s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);
    t12 = acytail * bcx;
    c8 = splitter * acytail;
    ahi = c8 - (c8 - acytail);
    alo = acytail - ahi;
    c8 = splitter * bcx;
    bhi = c8 - (c8 - bcx);
    blo = bcx - bhi;
    t02 = alo * blo - (t12 - ahi * bhi - alo * bhi - ahi * blo);
    _i = s0 - t02;
    bvirt = s0 - _i;
    u2[0] = s0 - (_i + bvirt) + (bvirt - t02);
    _j = s1 + _i;
    bvirt = _j - s1;
    _0 = s1 - (_j - bvirt) + (_i - bvirt);
    _i = _0 - t12;
    bvirt = _0 - _i;
    u2[1] = _0 - (_i + bvirt) + (bvirt - t12);
    u32 = _j + _i;
    bvirt = u32 - _j;
    u2[2] = _j - (u32 - bvirt) + (_i - bvirt);
    u2[3] = u32;
    const C1len = sum2(4, B3, 4, u2, C1);
    s1 = acx * bcytail;
    c8 = splitter * acx;
    ahi = c8 - (c8 - acx);
    alo = acx - ahi;
    c8 = splitter * bcytail;
    bhi = c8 - (c8 - bcytail);
    blo = bcytail - bhi;
    s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);
    t12 = acy * bcxtail;
    c8 = splitter * acy;
    ahi = c8 - (c8 - acy);
    alo = acy - ahi;
    c8 = splitter * bcxtail;
    bhi = c8 - (c8 - bcxtail);
    blo = bcxtail - bhi;
    t02 = alo * blo - (t12 - ahi * bhi - alo * bhi - ahi * blo);
    _i = s0 - t02;
    bvirt = s0 - _i;
    u2[0] = s0 - (_i + bvirt) + (bvirt - t02);
    _j = s1 + _i;
    bvirt = _j - s1;
    _0 = s1 - (_j - bvirt) + (_i - bvirt);
    _i = _0 - t12;
    bvirt = _0 - _i;
    u2[1] = _0 - (_i + bvirt) + (bvirt - t12);
    u32 = _j + _i;
    bvirt = u32 - _j;
    u2[2] = _j - (u32 - bvirt) + (_i - bvirt);
    u2[3] = u32;
    const C2len = sum2(C1len, C1, 4, u2, C22);
    s1 = acxtail * bcytail;
    c8 = splitter * acxtail;
    ahi = c8 - (c8 - acxtail);
    alo = acxtail - ahi;
    c8 = splitter * bcytail;
    bhi = c8 - (c8 - bcytail);
    blo = bcytail - bhi;
    s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);
    t12 = acytail * bcxtail;
    c8 = splitter * acytail;
    ahi = c8 - (c8 - acytail);
    alo = acytail - ahi;
    c8 = splitter * bcxtail;
    bhi = c8 - (c8 - bcxtail);
    blo = bcxtail - bhi;
    t02 = alo * blo - (t12 - ahi * bhi - alo * bhi - ahi * blo);
    _i = s0 - t02;
    bvirt = s0 - _i;
    u2[0] = s0 - (_i + bvirt) + (bvirt - t02);
    _j = s1 + _i;
    bvirt = _j - s1;
    _0 = s1 - (_j - bvirt) + (_i - bvirt);
    _i = _0 - t12;
    bvirt = _0 - _i;
    u2[1] = _0 - (_i + bvirt) + (bvirt - t12);
    u32 = _j + _i;
    bvirt = u32 - _j;
    u2[2] = _j - (u32 - bvirt) + (_i - bvirt);
    u2[3] = u32;
    const Dlen = sum2(C2len, C22, 4, u2, D3);
    return D3[Dlen - 1];
  }
  function orient2d(ax, ay, bx, by, cx, cy) {
    const detleft = (ay - cy) * (bx - cx);
    const detright = (ax - cx) * (by - cy);
    const det = detleft - detright;
    const detsum = Math.abs(detleft + detright);
    if (Math.abs(det) >= ccwerrboundA * detsum)
      return det;
    return -orient2dadapt(ax, ay, bx, by, cx, cy, detsum);
  }

  // node_modules/robust-predicates/esm/orient3d.js
  var o3derrboundA = (7 + 56 * epsilon3) * epsilon3;
  var o3derrboundB = (3 + 28 * epsilon3) * epsilon3;
  var o3derrboundC = (26 + 288 * epsilon3) * epsilon3 * epsilon3;
  var bc = vec(4);
  var ca = vec(4);
  var ab = vec(4);
  var at_b = vec(4);
  var at_c = vec(4);
  var bt_c = vec(4);
  var bt_a = vec(4);
  var ct_a = vec(4);
  var ct_b = vec(4);
  var bct = vec(8);
  var cat = vec(8);
  var abt = vec(8);
  var u3 = vec(4);
  var _8 = vec(8);
  var _8b = vec(8);
  var _16 = vec(8);
  var _12 = vec(12);
  var fin = vec(192);
  var fin2 = vec(192);

  // node_modules/robust-predicates/esm/incircle.js
  var iccerrboundA = (10 + 96 * epsilon3) * epsilon3;
  var iccerrboundB = (4 + 48 * epsilon3) * epsilon3;
  var iccerrboundC = (44 + 576 * epsilon3) * epsilon3 * epsilon3;
  var bc2 = vec(4);
  var ca2 = vec(4);
  var ab2 = vec(4);
  var aa = vec(4);
  var bb = vec(4);
  var cc = vec(4);
  var u4 = vec(4);
  var v3 = vec(4);
  var axtbc = vec(8);
  var aytbc = vec(8);
  var bxtca = vec(8);
  var bytca = vec(8);
  var cxtab = vec(8);
  var cytab = vec(8);
  var abt2 = vec(8);
  var bct2 = vec(8);
  var cat2 = vec(8);
  var abtt = vec(4);
  var bctt = vec(4);
  var catt = vec(4);
  var _82 = vec(8);
  var _162 = vec(16);
  var _16b = vec(16);
  var _16c = vec(16);
  var _32 = vec(32);
  var _32b = vec(32);
  var _48 = vec(48);
  var _64 = vec(64);
  var fin3 = vec(1152);
  var fin22 = vec(1152);

  // node_modules/robust-predicates/esm/insphere.js
  var isperrboundA = (16 + 224 * epsilon3) * epsilon3;
  var isperrboundB = (5 + 72 * epsilon3) * epsilon3;
  var isperrboundC = (71 + 1408 * epsilon3) * epsilon3 * epsilon3;
  var ab3 = vec(4);
  var bc3 = vec(4);
  var cd = vec(4);
  var de = vec(4);
  var ea = vec(4);
  var ac = vec(4);
  var bd = vec(4);
  var ce = vec(4);
  var da = vec(4);
  var eb = vec(4);
  var abc = vec(24);
  var bcd = vec(24);
  var cde = vec(24);
  var dea = vec(24);
  var eab = vec(24);
  var abd = vec(24);
  var bce = vec(24);
  var cda = vec(24);
  var deb = vec(24);
  var eac = vec(24);
  var adet = vec(1152);
  var bdet = vec(1152);
  var cdet = vec(1152);
  var ddet = vec(1152);
  var edet = vec(1152);
  var abdet = vec(2304);
  var cddet = vec(2304);
  var cdedet = vec(3456);
  var deter = vec(5760);
  var _83 = vec(8);
  var _8b2 = vec(8);
  var _8c = vec(8);
  var _163 = vec(16);
  var _24 = vec(24);
  var _482 = vec(48);
  var _48b = vec(48);
  var _96 = vec(96);
  var _192 = vec(192);
  var _384x = vec(384);
  var _384y = vec(384);
  var _384z = vec(384);
  var _768 = vec(768);
  var xdet = vec(96);
  var ydet = vec(96);
  var zdet = vec(96);
  var fin4 = vec(1152);

  // node_modules/delaunator/index.js
  var EPSILON2 = Math.pow(2, -52);
  var EDGE_STACK = new Uint32Array(512);
  var Delaunator = class {
    static from(points, getX = defaultGetX, getY = defaultGetY) {
      const n6 = points.length;
      const coords = new Float64Array(n6 * 2);
      for (let i6 = 0; i6 < n6; i6++) {
        const p2 = points[i6];
        coords[2 * i6] = getX(p2);
        coords[2 * i6 + 1] = getY(p2);
      }
      return new Delaunator(coords);
    }
    constructor(coords) {
      const n6 = coords.length >> 1;
      if (n6 > 0 && typeof coords[0] !== "number")
        throw new Error("Expected coords to contain numbers.");
      this.coords = coords;
      const maxTriangles = Math.max(2 * n6 - 5, 0);
      this._triangles = new Uint32Array(maxTriangles * 3);
      this._halfedges = new Int32Array(maxTriangles * 3);
      this._hashSize = Math.ceil(Math.sqrt(n6));
      this._hullPrev = new Uint32Array(n6);
      this._hullNext = new Uint32Array(n6);
      this._hullTri = new Uint32Array(n6);
      this._hullHash = new Int32Array(this._hashSize);
      this._ids = new Uint32Array(n6);
      this._dists = new Float64Array(n6);
      this.update();
    }
    update() {
      const { coords, _hullPrev: hullPrev, _hullNext: hullNext, _hullTri: hullTri, _hullHash: hullHash } = this;
      const n6 = coords.length >> 1;
      let minX = Infinity;
      let minY = Infinity;
      let maxX = -Infinity;
      let maxY2 = -Infinity;
      for (let i6 = 0; i6 < n6; i6++) {
        const x3 = coords[2 * i6];
        const y4 = coords[2 * i6 + 1];
        if (x3 < minX)
          minX = x3;
        if (y4 < minY)
          minY = y4;
        if (x3 > maxX)
          maxX = x3;
        if (y4 > maxY2)
          maxY2 = y4;
        this._ids[i6] = i6;
      }
      const cx = (minX + maxX) / 2;
      const cy = (minY + maxY2) / 2;
      let i0, i1, i22;
      for (let i6 = 0, minDist = Infinity; i6 < n6; i6++) {
        const d2 = dist(cx, cy, coords[2 * i6], coords[2 * i6 + 1]);
        if (d2 < minDist) {
          i0 = i6;
          minDist = d2;
        }
      }
      const i0x = coords[2 * i0];
      const i0y = coords[2 * i0 + 1];
      for (let i6 = 0, minDist = Infinity; i6 < n6; i6++) {
        if (i6 === i0)
          continue;
        const d2 = dist(i0x, i0y, coords[2 * i6], coords[2 * i6 + 1]);
        if (d2 < minDist && d2 > 0) {
          i1 = i6;
          minDist = d2;
        }
      }
      let i1x = coords[2 * i1];
      let i1y = coords[2 * i1 + 1];
      let minRadius = Infinity;
      for (let i6 = 0; i6 < n6; i6++) {
        if (i6 === i0 || i6 === i1)
          continue;
        const r6 = circumradius(i0x, i0y, i1x, i1y, coords[2 * i6], coords[2 * i6 + 1]);
        if (r6 < minRadius) {
          i22 = i6;
          minRadius = r6;
        }
      }
      let i2x = coords[2 * i22];
      let i2y = coords[2 * i22 + 1];
      if (minRadius === Infinity) {
        for (let i6 = 0; i6 < n6; i6++) {
          this._dists[i6] = coords[2 * i6] - coords[0] || coords[2 * i6 + 1] - coords[1];
        }
        quicksort(this._ids, this._dists, 0, n6 - 1);
        const hull = new Uint32Array(n6);
        let j3 = 0;
        for (let i6 = 0, d0 = -Infinity; i6 < n6; i6++) {
          const id = this._ids[i6];
          const d2 = this._dists[id];
          if (d2 > d0) {
            hull[j3++] = id;
            d0 = d2;
          }
        }
        this.hull = hull.subarray(0, j3);
        this.triangles = new Uint32Array(0);
        this.halfedges = new Uint32Array(0);
        return;
      }
      if (orient2d(i0x, i0y, i1x, i1y, i2x, i2y) < 0) {
        const i6 = i1;
        const x3 = i1x;
        const y4 = i1y;
        i1 = i22;
        i1x = i2x;
        i1y = i2y;
        i22 = i6;
        i2x = x3;
        i2y = y4;
      }
      const center = circumcenter(i0x, i0y, i1x, i1y, i2x, i2y);
      this._cx = center.x;
      this._cy = center.y;
      for (let i6 = 0; i6 < n6; i6++) {
        this._dists[i6] = dist(coords[2 * i6], coords[2 * i6 + 1], center.x, center.y);
      }
      quicksort(this._ids, this._dists, 0, n6 - 1);
      this._hullStart = i0;
      let hullSize = 3;
      hullNext[i0] = hullPrev[i22] = i1;
      hullNext[i1] = hullPrev[i0] = i22;
      hullNext[i22] = hullPrev[i1] = i0;
      hullTri[i0] = 0;
      hullTri[i1] = 1;
      hullTri[i22] = 2;
      hullHash.fill(-1);
      hullHash[this._hashKey(i0x, i0y)] = i0;
      hullHash[this._hashKey(i1x, i1y)] = i1;
      hullHash[this._hashKey(i2x, i2y)] = i22;
      this.trianglesLen = 0;
      this._addTriangle(i0, i1, i22, -1, -1, -1);
      for (let k2 = 0, xp, yp; k2 < this._ids.length; k2++) {
        const i6 = this._ids[k2];
        const x3 = coords[2 * i6];
        const y4 = coords[2 * i6 + 1];
        if (k2 > 0 && Math.abs(x3 - xp) <= EPSILON2 && Math.abs(y4 - yp) <= EPSILON2)
          continue;
        xp = x3;
        yp = y4;
        if (i6 === i0 || i6 === i1 || i6 === i22)
          continue;
        let start2 = 0;
        for (let j3 = 0, key = this._hashKey(x3, y4); j3 < this._hashSize; j3++) {
          start2 = hullHash[(key + j3) % this._hashSize];
          if (start2 !== -1 && start2 !== hullNext[start2])
            break;
        }
        start2 = hullPrev[start2];
        let e7 = start2, q3;
        while (q3 = hullNext[e7], orient2d(x3, y4, coords[2 * e7], coords[2 * e7 + 1], coords[2 * q3], coords[2 * q3 + 1]) >= 0) {
          e7 = q3;
          if (e7 === start2) {
            e7 = -1;
            break;
          }
        }
        if (e7 === -1)
          continue;
        let t5 = this._addTriangle(e7, i6, hullNext[e7], -1, -1, hullTri[e7]);
        hullTri[i6] = this._legalize(t5 + 2);
        hullTri[e7] = t5;
        hullSize++;
        let n7 = hullNext[e7];
        while (q3 = hullNext[n7], orient2d(x3, y4, coords[2 * n7], coords[2 * n7 + 1], coords[2 * q3], coords[2 * q3 + 1]) < 0) {
          t5 = this._addTriangle(n7, i6, q3, hullTri[i6], -1, hullTri[n7]);
          hullTri[i6] = this._legalize(t5 + 2);
          hullNext[n7] = n7;
          hullSize--;
          n7 = q3;
        }
        if (e7 === start2) {
          while (q3 = hullPrev[e7], orient2d(x3, y4, coords[2 * q3], coords[2 * q3 + 1], coords[2 * e7], coords[2 * e7 + 1]) < 0) {
            t5 = this._addTriangle(q3, i6, e7, -1, hullTri[e7], hullTri[q3]);
            this._legalize(t5 + 2);
            hullTri[q3] = t5;
            hullNext[e7] = e7;
            hullSize--;
            e7 = q3;
          }
        }
        this._hullStart = hullPrev[i6] = e7;
        hullNext[e7] = hullPrev[n7] = i6;
        hullNext[i6] = n7;
        hullHash[this._hashKey(x3, y4)] = i6;
        hullHash[this._hashKey(coords[2 * e7], coords[2 * e7 + 1])] = e7;
      }
      this.hull = new Uint32Array(hullSize);
      for (let i6 = 0, e7 = this._hullStart; i6 < hullSize; i6++) {
        this.hull[i6] = e7;
        e7 = hullNext[e7];
      }
      this.triangles = this._triangles.subarray(0, this.trianglesLen);
      this.halfedges = this._halfedges.subarray(0, this.trianglesLen);
    }
    _hashKey(x3, y4) {
      return Math.floor(pseudoAngle(x3 - this._cx, y4 - this._cy) * this._hashSize) % this._hashSize;
    }
    _legalize(a2) {
      const { _triangles: triangles, _halfedges: halfedges, coords } = this;
      let i6 = 0;
      let ar = 0;
      while (true) {
        const b3 = halfedges[a2];
        const a0 = a2 - a2 % 3;
        ar = a0 + (a2 + 2) % 3;
        if (b3 === -1) {
          if (i6 === 0)
            break;
          a2 = EDGE_STACK[--i6];
          continue;
        }
        const b0 = b3 - b3 % 3;
        const al = a0 + (a2 + 1) % 3;
        const bl = b0 + (b3 + 2) % 3;
        const p0 = triangles[ar];
        const pr2 = triangles[a2];
        const pl = triangles[al];
        const p1 = triangles[bl];
        const illegal = inCircle(
          coords[2 * p0],
          coords[2 * p0 + 1],
          coords[2 * pr2],
          coords[2 * pr2 + 1],
          coords[2 * pl],
          coords[2 * pl + 1],
          coords[2 * p1],
          coords[2 * p1 + 1]
        );
        if (illegal) {
          triangles[a2] = p1;
          triangles[b3] = p0;
          const hbl = halfedges[bl];
          if (hbl === -1) {
            let e7 = this._hullStart;
            do {
              if (this._hullTri[e7] === bl) {
                this._hullTri[e7] = a2;
                break;
              }
              e7 = this._hullPrev[e7];
            } while (e7 !== this._hullStart);
          }
          this._link(a2, hbl);
          this._link(b3, halfedges[ar]);
          this._link(ar, bl);
          const br = b0 + (b3 + 1) % 3;
          if (i6 < EDGE_STACK.length) {
            EDGE_STACK[i6++] = br;
          }
        } else {
          if (i6 === 0)
            break;
          a2 = EDGE_STACK[--i6];
        }
      }
      return ar;
    }
    _link(a2, b3) {
      this._halfedges[a2] = b3;
      if (b3 !== -1)
        this._halfedges[b3] = a2;
    }
    _addTriangle(i0, i1, i22, a2, b3, c8) {
      const t5 = this.trianglesLen;
      this._triangles[t5] = i0;
      this._triangles[t5 + 1] = i1;
      this._triangles[t5 + 2] = i22;
      this._link(t5, a2);
      this._link(t5 + 1, b3);
      this._link(t5 + 2, c8);
      this.trianglesLen += 3;
      return t5;
    }
  };
  function pseudoAngle(dx, dy) {
    const p2 = dx / (Math.abs(dx) + Math.abs(dy));
    return (dy > 0 ? 3 - p2 : 1 + p2) / 4;
  }
  function dist(ax, ay, bx, by) {
    const dx = ax - bx;
    const dy = ay - by;
    return dx * dx + dy * dy;
  }
  function inCircle(ax, ay, bx, by, cx, cy, px, py) {
    const dx = ax - px;
    const dy = ay - py;
    const ex = bx - px;
    const ey = by - py;
    const fx = cx - px;
    const fy = cy - py;
    const ap = dx * dx + dy * dy;
    const bp = ex * ex + ey * ey;
    const cp = fx * fx + fy * fy;
    return dx * (ey * cp - bp * fy) - dy * (ex * cp - bp * fx) + ap * (ex * fy - ey * fx) < 0;
  }
  function circumradius(ax, ay, bx, by, cx, cy) {
    const dx = bx - ax;
    const dy = by - ay;
    const ex = cx - ax;
    const ey = cy - ay;
    const bl = dx * dx + dy * dy;
    const cl = ex * ex + ey * ey;
    const d2 = 0.5 / (dx * ey - dy * ex);
    const x3 = (ey * bl - dy * cl) * d2;
    const y4 = (dx * cl - ex * bl) * d2;
    return x3 * x3 + y4 * y4;
  }
  function circumcenter(ax, ay, bx, by, cx, cy) {
    const dx = bx - ax;
    const dy = by - ay;
    const ex = cx - ax;
    const ey = cy - ay;
    const bl = dx * dx + dy * dy;
    const cl = ex * ex + ey * ey;
    const d2 = 0.5 / (dx * ey - dy * ex);
    const x3 = ax + (ey * bl - dy * cl) * d2;
    const y4 = ay + (dx * cl - ex * bl) * d2;
    return { x: x3, y: y4 };
  }
  function quicksort(ids, dists, left, right) {
    if (right - left <= 20) {
      for (let i6 = left + 1; i6 <= right; i6++) {
        const temp = ids[i6];
        const tempDist = dists[temp];
        let j3 = i6 - 1;
        while (j3 >= left && dists[ids[j3]] > tempDist)
          ids[j3 + 1] = ids[j3--];
        ids[j3 + 1] = temp;
      }
    } else {
      const median = left + right >> 1;
      let i6 = left + 1;
      let j3 = right;
      swap2(ids, median, i6);
      if (dists[ids[left]] > dists[ids[right]])
        swap2(ids, left, right);
      if (dists[ids[i6]] > dists[ids[right]])
        swap2(ids, i6, right);
      if (dists[ids[left]] > dists[ids[i6]])
        swap2(ids, left, i6);
      const temp = ids[i6];
      const tempDist = dists[temp];
      while (true) {
        do
          i6++;
        while (dists[ids[i6]] < tempDist);
        do
          j3--;
        while (dists[ids[j3]] > tempDist);
        if (j3 < i6)
          break;
        swap2(ids, i6, j3);
      }
      ids[left + 1] = ids[j3];
      ids[j3] = temp;
      if (right - i6 + 1 >= j3 - left) {
        quicksort(ids, dists, i6, right);
        quicksort(ids, dists, left, j3 - 1);
      } else {
        quicksort(ids, dists, left, j3 - 1);
        quicksort(ids, dists, i6, right);
      }
    }
  }
  function swap2(arr, i6, j3) {
    const tmp = arr[i6];
    arr[i6] = arr[j3];
    arr[j3] = tmp;
  }
  function defaultGetX(p2) {
    return p2[0];
  }
  function defaultGetY(p2) {
    return p2[1];
  }

  // node_modules/d3-delaunay/src/path.js
  var epsilon4 = 1e-6;
  var Path2 = class {
    constructor() {
      this._x0 = this._y0 = this._x1 = this._y1 = null;
      this._ = "";
    }
    moveTo(x3, y4) {
      this._ += `M${this._x0 = this._x1 = +x3},${this._y0 = this._y1 = +y4}`;
    }
    closePath() {
      if (this._x1 !== null) {
        this._x1 = this._x0, this._y1 = this._y0;
        this._ += "Z";
      }
    }
    lineTo(x3, y4) {
      this._ += `L${this._x1 = +x3},${this._y1 = +y4}`;
    }
    arc(x3, y4, r6) {
      x3 = +x3, y4 = +y4, r6 = +r6;
      const x0 = x3 + r6;
      const y0 = y4;
      if (r6 < 0)
        throw new Error("negative radius");
      if (this._x1 === null)
        this._ += `M${x0},${y0}`;
      else if (Math.abs(this._x1 - x0) > epsilon4 || Math.abs(this._y1 - y0) > epsilon4)
        this._ += "L" + x0 + "," + y0;
      if (!r6)
        return;
      this._ += `A${r6},${r6},0,1,1,${x3 - r6},${y4}A${r6},${r6},0,1,1,${this._x1 = x0},${this._y1 = y0}`;
    }
    rect(x3, y4, w3, h) {
      this._ += `M${this._x0 = this._x1 = +x3},${this._y0 = this._y1 = +y4}h${+w3}v${+h}h${-w3}Z`;
    }
    value() {
      return this._ || null;
    }
  };

  // node_modules/d3-delaunay/src/polygon.js
  var Polygon = class {
    constructor() {
      this._ = [];
    }
    moveTo(x3, y4) {
      this._.push([x3, y4]);
    }
    closePath() {
      this._.push(this._[0].slice());
    }
    lineTo(x3, y4) {
      this._.push([x3, y4]);
    }
    value() {
      return this._.length ? this._ : null;
    }
  };

  // node_modules/d3-delaunay/src/voronoi.js
  var Voronoi = class {
    constructor(delaunay, [xmin, ymin, xmax, ymax] = [0, 0, 960, 500]) {
      if (!((xmax = +xmax) >= (xmin = +xmin)) || !((ymax = +ymax) >= (ymin = +ymin)))
        throw new Error("invalid bounds");
      this.delaunay = delaunay;
      this._circumcenters = new Float64Array(delaunay.points.length * 2);
      this.vectors = new Float64Array(delaunay.points.length * 2);
      this.xmax = xmax, this.xmin = xmin;
      this.ymax = ymax, this.ymin = ymin;
      this._init();
    }
    update() {
      this.delaunay.update();
      this._init();
      return this;
    }
    _init() {
      const { delaunay: { points, hull, triangles }, vectors } = this;
      let bx, by;
      const circumcenters = this.circumcenters = this._circumcenters.subarray(0, triangles.length / 3 * 2);
      for (let i6 = 0, j3 = 0, n6 = triangles.length, x3, y4; i6 < n6; i6 += 3, j3 += 2) {
        const t12 = triangles[i6] * 2;
        const t22 = triangles[i6 + 1] * 2;
        const t32 = triangles[i6 + 2] * 2;
        const x12 = points[t12];
        const y12 = points[t12 + 1];
        const x22 = points[t22];
        const y22 = points[t22 + 1];
        const x32 = points[t32];
        const y32 = points[t32 + 1];
        const dx = x22 - x12;
        const dy = y22 - y12;
        const ex = x32 - x12;
        const ey = y32 - y12;
        const ab4 = (dx * ey - dy * ex) * 2;
        if (Math.abs(ab4) < 1e-9) {
          if (bx === void 0) {
            bx = by = 0;
            for (const i7 of hull)
              bx += points[i7 * 2], by += points[i7 * 2 + 1];
            bx /= hull.length, by /= hull.length;
          }
          const a2 = 1e9 * Math.sign((bx - x12) * ey - (by - y12) * ex);
          x3 = (x12 + x32) / 2 - a2 * ey;
          y4 = (y12 + y32) / 2 + a2 * ex;
        } else {
          const d2 = 1 / ab4;
          const bl = dx * dx + dy * dy;
          const cl = ex * ex + ey * ey;
          x3 = x12 + (ey * bl - dy * cl) * d2;
          y4 = y12 + (dx * cl - ex * bl) * d2;
        }
        circumcenters[j3] = x3;
        circumcenters[j3 + 1] = y4;
      }
      let h = hull[hull.length - 1];
      let p0, p1 = h * 4;
      let x0, x1 = points[2 * h];
      let y0, y1 = points[2 * h + 1];
      vectors.fill(0);
      for (let i6 = 0; i6 < hull.length; ++i6) {
        h = hull[i6];
        p0 = p1, x0 = x1, y0 = y1;
        p1 = h * 4, x1 = points[2 * h], y1 = points[2 * h + 1];
        vectors[p0 + 2] = vectors[p1] = y0 - y1;
        vectors[p0 + 3] = vectors[p1 + 1] = x1 - x0;
      }
    }
    render(context) {
      const buffer = context == null ? context = new Path2() : void 0;
      const { delaunay: { halfedges, inedges, hull }, circumcenters, vectors } = this;
      if (hull.length <= 1)
        return null;
      for (let i6 = 0, n6 = halfedges.length; i6 < n6; ++i6) {
        const j3 = halfedges[i6];
        if (j3 < i6)
          continue;
        const ti = Math.floor(i6 / 3) * 2;
        const tj = Math.floor(j3 / 3) * 2;
        const xi = circumcenters[ti];
        const yi = circumcenters[ti + 1];
        const xj = circumcenters[tj];
        const yj = circumcenters[tj + 1];
        this._renderSegment(xi, yi, xj, yj, context);
      }
      let h0, h12 = hull[hull.length - 1];
      for (let i6 = 0; i6 < hull.length; ++i6) {
        h0 = h12, h12 = hull[i6];
        const t5 = Math.floor(inedges[h12] / 3) * 2;
        const x3 = circumcenters[t5];
        const y4 = circumcenters[t5 + 1];
        const v4 = h0 * 4;
        const p2 = this._project(x3, y4, vectors[v4 + 2], vectors[v4 + 3]);
        if (p2)
          this._renderSegment(x3, y4, p2[0], p2[1], context);
      }
      return buffer && buffer.value();
    }
    renderBounds(context) {
      const buffer = context == null ? context = new Path2() : void 0;
      context.rect(this.xmin, this.ymin, this.xmax - this.xmin, this.ymax - this.ymin);
      return buffer && buffer.value();
    }
    renderCell(i6, context) {
      const buffer = context == null ? context = new Path2() : void 0;
      const points = this._clip(i6);
      if (points === null || !points.length)
        return;
      context.moveTo(points[0], points[1]);
      let n6 = points.length;
      while (points[0] === points[n6 - 2] && points[1] === points[n6 - 1] && n6 > 1)
        n6 -= 2;
      for (let i7 = 2; i7 < n6; i7 += 2) {
        if (points[i7] !== points[i7 - 2] || points[i7 + 1] !== points[i7 - 1])
          context.lineTo(points[i7], points[i7 + 1]);
      }
      context.closePath();
      return buffer && buffer.value();
    }
    *cellPolygons() {
      const { delaunay: { points } } = this;
      for (let i6 = 0, n6 = points.length / 2; i6 < n6; ++i6) {
        const cell = this.cellPolygon(i6);
        if (cell)
          cell.index = i6, yield cell;
      }
    }
    cellPolygon(i6) {
      const polygon = new Polygon();
      this.renderCell(i6, polygon);
      return polygon.value();
    }
    _renderSegment(x0, y0, x1, y1, context) {
      let S2;
      const c0 = this._regioncode(x0, y0);
      const c12 = this._regioncode(x1, y1);
      if (c0 === 0 && c12 === 0) {
        context.moveTo(x0, y0);
        context.lineTo(x1, y1);
      } else if (S2 = this._clipSegment(x0, y0, x1, y1, c0, c12)) {
        context.moveTo(S2[0], S2[1]);
        context.lineTo(S2[2], S2[3]);
      }
    }
    contains(i6, x3, y4) {
      if ((x3 = +x3, x3 !== x3) || (y4 = +y4, y4 !== y4))
        return false;
      return this.delaunay._step(i6, x3, y4) === i6;
    }
    *neighbors(i6) {
      const ci = this._clip(i6);
      if (ci)
        for (const j3 of this.delaunay.neighbors(i6)) {
          const cj = this._clip(j3);
          if (cj)
            loop:
              for (let ai = 0, li = ci.length; ai < li; ai += 2) {
                for (let aj = 0, lj = cj.length; aj < lj; aj += 2) {
                  if (ci[ai] === cj[aj] && ci[ai + 1] === cj[aj + 1] && ci[(ai + 2) % li] === cj[(aj + lj - 2) % lj] && ci[(ai + 3) % li] === cj[(aj + lj - 1) % lj]) {
                    yield j3;
                    break loop;
                  }
                }
              }
        }
    }
    _cell(i6) {
      const { circumcenters, delaunay: { inedges, halfedges, triangles } } = this;
      const e0 = inedges[i6];
      if (e0 === -1)
        return null;
      const points = [];
      let e7 = e0;
      do {
        const t5 = Math.floor(e7 / 3);
        points.push(circumcenters[t5 * 2], circumcenters[t5 * 2 + 1]);
        e7 = e7 % 3 === 2 ? e7 - 2 : e7 + 1;
        if (triangles[e7] !== i6)
          break;
        e7 = halfedges[e7];
      } while (e7 !== e0 && e7 !== -1);
      return points;
    }
    _clip(i6) {
      if (i6 === 0 && this.delaunay.hull.length === 1) {
        return [this.xmax, this.ymin, this.xmax, this.ymax, this.xmin, this.ymax, this.xmin, this.ymin];
      }
      const points = this._cell(i6);
      if (points === null)
        return null;
      const { vectors: V3 } = this;
      const v4 = i6 * 4;
      return this._simplify(V3[v4] || V3[v4 + 1] ? this._clipInfinite(i6, points, V3[v4], V3[v4 + 1], V3[v4 + 2], V3[v4 + 3]) : this._clipFinite(i6, points));
    }
    _clipFinite(i6, points) {
      const n6 = points.length;
      let P3 = null;
      let x0, y0, x1 = points[n6 - 2], y1 = points[n6 - 1];
      let c0, c12 = this._regioncode(x1, y1);
      let e0, e1 = 0;
      for (let j3 = 0; j3 < n6; j3 += 2) {
        x0 = x1, y0 = y1, x1 = points[j3], y1 = points[j3 + 1];
        c0 = c12, c12 = this._regioncode(x1, y1);
        if (c0 === 0 && c12 === 0) {
          e0 = e1, e1 = 0;
          if (P3)
            P3.push(x1, y1);
          else
            P3 = [x1, y1];
        } else {
          let S2, sx0, sy0, sx1, sy1;
          if (c0 === 0) {
            if ((S2 = this._clipSegment(x0, y0, x1, y1, c0, c12)) === null)
              continue;
            [sx0, sy0, sx1, sy1] = S2;
          } else {
            if ((S2 = this._clipSegment(x1, y1, x0, y0, c12, c0)) === null)
              continue;
            [sx1, sy1, sx0, sy0] = S2;
            e0 = e1, e1 = this._edgecode(sx0, sy0);
            if (e0 && e1)
              this._edge(i6, e0, e1, P3, P3.length);
            if (P3)
              P3.push(sx0, sy0);
            else
              P3 = [sx0, sy0];
          }
          e0 = e1, e1 = this._edgecode(sx1, sy1);
          if (e0 && e1)
            this._edge(i6, e0, e1, P3, P3.length);
          if (P3)
            P3.push(sx1, sy1);
          else
            P3 = [sx1, sy1];
        }
      }
      if (P3) {
        e0 = e1, e1 = this._edgecode(P3[0], P3[1]);
        if (e0 && e1)
          this._edge(i6, e0, e1, P3, P3.length);
      } else if (this.contains(i6, (this.xmin + this.xmax) / 2, (this.ymin + this.ymax) / 2)) {
        return [this.xmax, this.ymin, this.xmax, this.ymax, this.xmin, this.ymax, this.xmin, this.ymin];
      }
      return P3;
    }
    _clipSegment(x0, y0, x1, y1, c0, c12) {
      const flip = c0 < c12;
      if (flip)
        [x0, y0, x1, y1, c0, c12] = [x1, y1, x0, y0, c12, c0];
      while (true) {
        if (c0 === 0 && c12 === 0)
          return flip ? [x1, y1, x0, y0] : [x0, y0, x1, y1];
        if (c0 & c12)
          return null;
        let x3, y4, c8 = c0 || c12;
        if (c8 & 8)
          x3 = x0 + (x1 - x0) * (this.ymax - y0) / (y1 - y0), y4 = this.ymax;
        else if (c8 & 4)
          x3 = x0 + (x1 - x0) * (this.ymin - y0) / (y1 - y0), y4 = this.ymin;
        else if (c8 & 2)
          y4 = y0 + (y1 - y0) * (this.xmax - x0) / (x1 - x0), x3 = this.xmax;
        else
          y4 = y0 + (y1 - y0) * (this.xmin - x0) / (x1 - x0), x3 = this.xmin;
        if (c0)
          x0 = x3, y0 = y4, c0 = this._regioncode(x0, y0);
        else
          x1 = x3, y1 = y4, c12 = this._regioncode(x1, y1);
      }
    }
    _clipInfinite(i6, points, vx0, vy0, vxn, vyn) {
      let P3 = Array.from(points), p2;
      if (p2 = this._project(P3[0], P3[1], vx0, vy0))
        P3.unshift(p2[0], p2[1]);
      if (p2 = this._project(P3[P3.length - 2], P3[P3.length - 1], vxn, vyn))
        P3.push(p2[0], p2[1]);
      if (P3 = this._clipFinite(i6, P3)) {
        for (let j3 = 0, n6 = P3.length, c0, c12 = this._edgecode(P3[n6 - 2], P3[n6 - 1]); j3 < n6; j3 += 2) {
          c0 = c12, c12 = this._edgecode(P3[j3], P3[j3 + 1]);
          if (c0 && c12)
            j3 = this._edge(i6, c0, c12, P3, j3), n6 = P3.length;
        }
      } else if (this.contains(i6, (this.xmin + this.xmax) / 2, (this.ymin + this.ymax) / 2)) {
        P3 = [this.xmin, this.ymin, this.xmax, this.ymin, this.xmax, this.ymax, this.xmin, this.ymax];
      }
      return P3;
    }
    _edge(i6, e0, e1, P3, j3) {
      while (e0 !== e1) {
        let x3, y4;
        switch (e0) {
          case 5:
            e0 = 4;
            continue;
          case 4:
            e0 = 6, x3 = this.xmax, y4 = this.ymin;
            break;
          case 6:
            e0 = 2;
            continue;
          case 2:
            e0 = 10, x3 = this.xmax, y4 = this.ymax;
            break;
          case 10:
            e0 = 8;
            continue;
          case 8:
            e0 = 9, x3 = this.xmin, y4 = this.ymax;
            break;
          case 9:
            e0 = 1;
            continue;
          case 1:
            e0 = 5, x3 = this.xmin, y4 = this.ymin;
            break;
        }
        if ((P3[j3] !== x3 || P3[j3 + 1] !== y4) && this.contains(i6, x3, y4)) {
          P3.splice(j3, 0, x3, y4), j3 += 2;
        }
      }
      return j3;
    }
    _project(x0, y0, vx, vy) {
      let t5 = Infinity, c8, x3, y4;
      if (vy < 0) {
        if (y0 <= this.ymin)
          return null;
        if ((c8 = (this.ymin - y0) / vy) < t5)
          y4 = this.ymin, x3 = x0 + (t5 = c8) * vx;
      } else if (vy > 0) {
        if (y0 >= this.ymax)
          return null;
        if ((c8 = (this.ymax - y0) / vy) < t5)
          y4 = this.ymax, x3 = x0 + (t5 = c8) * vx;
      }
      if (vx > 0) {
        if (x0 >= this.xmax)
          return null;
        if ((c8 = (this.xmax - x0) / vx) < t5)
          x3 = this.xmax, y4 = y0 + (t5 = c8) * vy;
      } else if (vx < 0) {
        if (x0 <= this.xmin)
          return null;
        if ((c8 = (this.xmin - x0) / vx) < t5)
          x3 = this.xmin, y4 = y0 + (t5 = c8) * vy;
      }
      return [x3, y4];
    }
    _edgecode(x3, y4) {
      return (x3 === this.xmin ? 1 : x3 === this.xmax ? 2 : 0) | (y4 === this.ymin ? 4 : y4 === this.ymax ? 8 : 0);
    }
    _regioncode(x3, y4) {
      return (x3 < this.xmin ? 1 : x3 > this.xmax ? 2 : 0) | (y4 < this.ymin ? 4 : y4 > this.ymax ? 8 : 0);
    }
    _simplify(P3) {
      if (P3 && P3.length > 4) {
        for (let i6 = 0; i6 < P3.length; i6 += 2) {
          const j3 = (i6 + 2) % P3.length, k2 = (i6 + 4) % P3.length;
          if (P3[i6] === P3[j3] && P3[j3] === P3[k2] || P3[i6 + 1] === P3[j3 + 1] && P3[j3 + 1] === P3[k2 + 1]) {
            P3.splice(j3, 2), i6 -= 2;
          }
        }
        if (!P3.length)
          P3 = null;
      }
      return P3;
    }
  };

  // node_modules/d3-delaunay/src/delaunay.js
  var tau3 = 2 * Math.PI;
  var pow = Math.pow;
  function pointX(p2) {
    return p2[0];
  }
  function pointY(p2) {
    return p2[1];
  }
  function collinear(d2) {
    const { triangles, coords } = d2;
    for (let i6 = 0; i6 < triangles.length; i6 += 3) {
      const a2 = 2 * triangles[i6], b3 = 2 * triangles[i6 + 1], c8 = 2 * triangles[i6 + 2], cross = (coords[c8] - coords[a2]) * (coords[b3 + 1] - coords[a2 + 1]) - (coords[b3] - coords[a2]) * (coords[c8 + 1] - coords[a2 + 1]);
      if (cross > 1e-10)
        return false;
    }
    return true;
  }
  function jitter(x3, y4, r6) {
    return [x3 + Math.sin(x3 + y4) * r6, y4 + Math.cos(x3 - y4) * r6];
  }
  var Delaunay = class {
    static from(points, fx = pointX, fy = pointY, that) {
      return new Delaunay("length" in points ? flatArray(points, fx, fy, that) : Float64Array.from(flatIterable(points, fx, fy, that)));
    }
    constructor(points) {
      this._delaunator = new Delaunator(points);
      this.inedges = new Int32Array(points.length / 2);
      this._hullIndex = new Int32Array(points.length / 2);
      this.points = this._delaunator.coords;
      this._init();
    }
    update() {
      this._delaunator.update();
      this._init();
      return this;
    }
    _init() {
      const d2 = this._delaunator, points = this.points;
      if (d2.hull && d2.hull.length > 2 && collinear(d2)) {
        this.collinear = Int32Array.from({ length: points.length / 2 }, (_2, i6) => i6).sort((i6, j3) => points[2 * i6] - points[2 * j3] || points[2 * i6 + 1] - points[2 * j3 + 1]);
        const e7 = this.collinear[0], f2 = this.collinear[this.collinear.length - 1], bounds = [points[2 * e7], points[2 * e7 + 1], points[2 * f2], points[2 * f2 + 1]], r6 = 1e-8 * Math.hypot(bounds[3] - bounds[1], bounds[2] - bounds[0]);
        for (let i6 = 0, n6 = points.length / 2; i6 < n6; ++i6) {
          const p2 = jitter(points[2 * i6], points[2 * i6 + 1], r6);
          points[2 * i6] = p2[0];
          points[2 * i6 + 1] = p2[1];
        }
        this._delaunator = new Delaunator(points);
      } else {
        delete this.collinear;
      }
      const halfedges = this.halfedges = this._delaunator.halfedges;
      const hull = this.hull = this._delaunator.hull;
      const triangles = this.triangles = this._delaunator.triangles;
      const inedges = this.inedges.fill(-1);
      const hullIndex = this._hullIndex.fill(-1);
      for (let e7 = 0, n6 = halfedges.length; e7 < n6; ++e7) {
        const p2 = triangles[e7 % 3 === 2 ? e7 - 2 : e7 + 1];
        if (halfedges[e7] === -1 || inedges[p2] === -1)
          inedges[p2] = e7;
      }
      for (let i6 = 0, n6 = hull.length; i6 < n6; ++i6) {
        hullIndex[hull[i6]] = i6;
      }
      if (hull.length <= 2 && hull.length > 0) {
        this.triangles = new Int32Array(3).fill(-1);
        this.halfedges = new Int32Array(3).fill(-1);
        this.triangles[0] = hull[0];
        inedges[hull[0]] = 1;
        if (hull.length === 2) {
          inedges[hull[1]] = 0;
          this.triangles[1] = hull[1];
          this.triangles[2] = hull[1];
        }
      }
    }
    voronoi(bounds) {
      return new Voronoi(this, bounds);
    }
    *neighbors(i6) {
      const { inedges, hull, _hullIndex, halfedges, triangles, collinear: collinear2 } = this;
      if (collinear2) {
        const l5 = collinear2.indexOf(i6);
        if (l5 > 0)
          yield collinear2[l5 - 1];
        if (l5 < collinear2.length - 1)
          yield collinear2[l5 + 1];
        return;
      }
      const e0 = inedges[i6];
      if (e0 === -1)
        return;
      let e7 = e0, p0 = -1;
      do {
        yield p0 = triangles[e7];
        e7 = e7 % 3 === 2 ? e7 - 2 : e7 + 1;
        if (triangles[e7] !== i6)
          return;
        e7 = halfedges[e7];
        if (e7 === -1) {
          const p2 = hull[(_hullIndex[i6] + 1) % hull.length];
          if (p2 !== p0)
            yield p2;
          return;
        }
      } while (e7 !== e0);
    }
    find(x3, y4, i6 = 0) {
      if ((x3 = +x3, x3 !== x3) || (y4 = +y4, y4 !== y4))
        return -1;
      const i0 = i6;
      let c8;
      while ((c8 = this._step(i6, x3, y4)) >= 0 && c8 !== i6 && c8 !== i0)
        i6 = c8;
      return c8;
    }
    _step(i6, x3, y4) {
      const { inedges, hull, _hullIndex, halfedges, triangles, points } = this;
      if (inedges[i6] === -1 || !points.length)
        return (i6 + 1) % (points.length >> 1);
      let c8 = i6;
      let dc = pow(x3 - points[i6 * 2], 2) + pow(y4 - points[i6 * 2 + 1], 2);
      const e0 = inedges[i6];
      let e7 = e0;
      do {
        let t5 = triangles[e7];
        const dt2 = pow(x3 - points[t5 * 2], 2) + pow(y4 - points[t5 * 2 + 1], 2);
        if (dt2 < dc)
          dc = dt2, c8 = t5;
        e7 = e7 % 3 === 2 ? e7 - 2 : e7 + 1;
        if (triangles[e7] !== i6)
          break;
        e7 = halfedges[e7];
        if (e7 === -1) {
          e7 = hull[(_hullIndex[i6] + 1) % hull.length];
          if (e7 !== t5) {
            if (pow(x3 - points[e7 * 2], 2) + pow(y4 - points[e7 * 2 + 1], 2) < dc)
              return e7;
          }
          break;
        }
      } while (e7 !== e0);
      return c8;
    }
    render(context) {
      const buffer = context == null ? context = new Path2() : void 0;
      const { points, halfedges, triangles } = this;
      for (let i6 = 0, n6 = halfedges.length; i6 < n6; ++i6) {
        const j3 = halfedges[i6];
        if (j3 < i6)
          continue;
        const ti = triangles[i6] * 2;
        const tj = triangles[j3] * 2;
        context.moveTo(points[ti], points[ti + 1]);
        context.lineTo(points[tj], points[tj + 1]);
      }
      this.renderHull(context);
      return buffer && buffer.value();
    }
    renderPoints(context, r6) {
      if (r6 === void 0 && (!context || typeof context.moveTo !== "function"))
        r6 = context, context = null;
      r6 = r6 == void 0 ? 2 : +r6;
      const buffer = context == null ? context = new Path2() : void 0;
      const { points } = this;
      for (let i6 = 0, n6 = points.length; i6 < n6; i6 += 2) {
        const x3 = points[i6], y4 = points[i6 + 1];
        context.moveTo(x3 + r6, y4);
        context.arc(x3, y4, r6, 0, tau3);
      }
      return buffer && buffer.value();
    }
    renderHull(context) {
      const buffer = context == null ? context = new Path2() : void 0;
      const { hull, points } = this;
      const h = hull[0] * 2, n6 = hull.length;
      context.moveTo(points[h], points[h + 1]);
      for (let i6 = 1; i6 < n6; ++i6) {
        const h3 = 2 * hull[i6];
        context.lineTo(points[h3], points[h3 + 1]);
      }
      context.closePath();
      return buffer && buffer.value();
    }
    hullPolygon() {
      const polygon = new Polygon();
      this.renderHull(polygon);
      return polygon.value();
    }
    renderTriangle(i6, context) {
      const buffer = context == null ? context = new Path2() : void 0;
      const { points, triangles } = this;
      const t02 = triangles[i6 *= 3] * 2;
      const t12 = triangles[i6 + 1] * 2;
      const t22 = triangles[i6 + 2] * 2;
      context.moveTo(points[t02], points[t02 + 1]);
      context.lineTo(points[t12], points[t12 + 1]);
      context.lineTo(points[t22], points[t22 + 1]);
      context.closePath();
      return buffer && buffer.value();
    }
    *trianglePolygons() {
      const { triangles } = this;
      for (let i6 = 0, n6 = triangles.length / 3; i6 < n6; ++i6) {
        yield this.trianglePolygon(i6);
      }
    }
    trianglePolygon(i6) {
      const polygon = new Polygon();
      this.renderTriangle(i6, polygon);
      return polygon.value();
    }
  };
  function flatArray(points, fx, fy, that) {
    const n6 = points.length;
    const array = new Float64Array(n6 * 2);
    for (let i6 = 0; i6 < n6; ++i6) {
      const p2 = points[i6];
      array[i6 * 2] = fx.call(that, p2, i6, points);
      array[i6 * 2 + 1] = fy.call(that, p2, i6, points);
    }
    return array;
  }
  function* flatIterable(points, fx, fy, that) {
    let i6 = 0;
    for (const p2 of points) {
      yield fx.call(that, p2, i6, points);
      yield fy.call(that, p2, i6, points);
      ++i6;
    }
  }

  // node_modules/@nivo/voronoi/dist/nivo-voronoi.es.js
  var import_jsx_runtime4 = __toESM(require_jsx_runtime());
  var C5 = function(n6) {
    return [n6.x, n6.y];
  };
  var L = _t;
  var T2 = "cursor";
  var P2 = "top";
  var w2 = function(n6) {
    var o6 = n6.points, e7 = n6.getNodePosition, i6 = void 0 === e7 ? C5 : e7, t5 = n6.margin, r6 = void 0 === t5 ? L : t5;
    return o6.map(function(n7) {
      var o7 = i6(n7), e8 = o7[0], t6 = o7[1];
      return [e8 + r6.left, t6 + r6.top];
    });
  };
  var E4 = function(n6) {
    var o6 = n6.points, e7 = n6.width, i6 = n6.height, t5 = n6.margin, r6 = void 0 === t5 ? L : t5, l5 = n6.debug, u5 = Delaunay.from(o6), a2 = l5 ? u5.voronoi([0, 0, r6.left + e7 + r6.right, r6.top + i6 + r6.bottom]) : void 0;
    return { points: o6, delaunay: u5, voronoi: a2 };
  };
  var W2 = function(o6) {
    var e7 = o6.points, i6 = o6.getNodePosition, t5 = void 0 === i6 ? C5 : i6, r6 = o6.width, l5 = o6.height, u5 = o6.margin, a2 = void 0 === u5 ? L : u5, d2 = o6.debug;
    return (0, import_react19.useMemo)(function() {
      return E4({ points: w2({ points: e7, margin: a2, getNodePosition: t5 }), width: r6, height: l5, margin: a2, debug: d2 });
    }, [e7, r6, l5, a2, d2]);
  };
  var D4 = function(r6) {
    var l5 = r6.elementRef, u5 = r6.nodes, s3 = r6.getNodePosition, c8 = void 0 === s3 ? C5 : s3, h = r6.delaunay, v4 = r6.setCurrent, f2 = r6.margin, p2 = void 0 === f2 ? L : f2, m4 = r6.detectionRadius, M3 = void 0 === m4 ? 1 / 0 : m4, b3 = r6.isInteractive, k2 = void 0 === b3 || b3, y4 = r6.onMouseEnter, w3 = r6.onMouseMove, E6 = r6.onMouseLeave, W3 = r6.onClick, x3 = r6.onTouchStart, S2 = r6.onTouchMove, D5 = r6.onTouchEnd, R2 = r6.enableTouchCrosshair, A4 = void 0 !== R2 && R2, N2 = r6.tooltip, O3 = r6.tooltipPosition, j3 = void 0 === O3 ? T2 : O3, I2 = r6.tooltipAnchor, z3 = void 0 === I2 ? P2 : I2, F3 = (0, import_react19.useState)(null), H2 = F3[0], B5 = F3[1], q3 = (0, import_react19.useRef)(null);
    (0, import_react19.useEffect)(function() {
      q3.current = H2;
    }, [q3, H2]);
    var G = (0, import_react19.useCallback)(function(n6) {
      if (!l5.current)
        return null;
      var o6 = Sn(l5.current, n6), e7 = o6[0], i6 = o6[1], t5 = h.find(e7, i6), r7 = void 0 !== t5 ? u5[t5] : null;
      if (r7 && M3 !== 1 / 0) {
        var s4 = c8(r7), v5 = s4[0], f3 = s4[1];
        Mn(e7, i6, v5 + p2.left, f3 + p2.top) > M3 && (t5 = null, r7 = null);
      }
      return null === t5 || null === r7 ? null : [t5, r7];
    }, [l5, h, u5, c8, p2, M3]), J2 = k(), K2 = J2.showTooltipAt, Q2 = J2.showTooltipFromEvent, U2 = J2.hideTooltip, V3 = (0, import_react19.useMemo)(function() {
      if (N2)
        return "cursor" === j3 ? function(n6, o6) {
          Q2(N2(n6), o6, z3);
        } : function(n6) {
          var o6 = c8(n6), e7 = o6[0], i6 = o6[1];
          K2(N2(n6), [e7 + p2.left, i6 + p2.top], z3);
        };
    }, [K2, Q2, N2, j3, z3, c8, p2]), X2 = (0, import_react19.useCallback)(function(n6) {
      var o6 = G(n6);
      if (B5(o6), null == v4 || v4(o6 ? o6[1] : null), o6) {
        var e7 = o6[1];
        null == V3 || V3(e7, n6), null == y4 || y4(o6[1], n6);
      }
    }, [G, B5, v4, V3, y4]), Y2 = (0, import_react19.useCallback)(function(n6) {
      var o6 = G(n6);
      if (B5(o6), o6) {
        var e7 = o6[0], i6 = o6[1];
        if (null == v4 || v4(i6), null == V3 || V3(i6, n6), q3.current) {
          var t5 = q3.current, r7 = t5[0], l6 = t5[1];
          e7 !== r7 ? null == E6 || E6(l6, n6) : null == w3 || w3(i6, n6);
        } else
          null == y4 || y4(i6, n6);
      } else
        null == v4 || v4(null), null == U2 || U2(), q3.current && (null == E6 || E6(q3.current[1], n6));
    }, [G, B5, q3, y4, w3, E6, V3, U2]), Z2 = (0, import_react19.useCallback)(function(n6) {
      B5(null), null == v4 || v4(null), U2(), E6 && q3.current && E6(q3.current[1], n6);
    }, [B5, v4, q3, U2, E6]), $3 = (0, import_react19.useCallback)(function(n6) {
      var o6 = G(n6);
      B5(o6), o6 && (null == W3 || W3(o6[1], n6));
    }, [G, B5, W3]), _2 = (0, import_react19.useCallback)(function(n6) {
      var o6 = G(n6);
      A4 && (B5(o6), null == v4 || v4(o6 ? o6[1] : null)), o6 && (null == x3 || x3(o6[1], n6));
    }, [G, B5, v4, A4, x3]), nn2 = (0, import_react19.useCallback)(function(n6) {
      var o6 = G(n6);
      A4 && (B5(o6), null == v4 || v4(o6 ? o6[1] : null)), o6 && (null == S2 || S2(o6[1], n6));
    }, [G, B5, v4, A4, S2]), on2 = (0, import_react19.useCallback)(function(n6) {
      A4 && (B5(null), null == v4 || v4(null)), D5 && q3.current && D5(q3.current[1], n6);
    }, [A4, B5, v4, D5, q3]);
    return { current: H2, handleMouseEnter: k2 ? X2 : void 0, handleMouseMove: k2 ? Y2 : void 0, handleMouseLeave: k2 ? Z2 : void 0, handleClick: k2 ? $3 : void 0, handleTouchStart: k2 ? _2 : void 0, handleTouchMove: k2 ? nn2 : void 0, handleTouchEnd: k2 ? on2 : void 0 };
  };
  var I = function(o6) {
    var i6 = o6.nodes, t5 = o6.width, r6 = o6.height, l5 = o6.margin, u5 = void 0 === l5 ? L : l5, a2 = o6.getNodePosition, d2 = o6.setCurrent, s3 = o6.onMouseEnter, c8 = o6.onMouseMove, h = o6.onMouseLeave, v4 = o6.onClick, f2 = o6.onTouchStart, p2 = o6.onTouchMove, g2 = o6.onTouchEnd, k2 = o6.enableTouchCrosshair, y4 = void 0 !== k2 && k2, C6 = o6.detectionRadius, w3 = void 0 === C6 ? 1 / 0 : C6, E6 = o6.tooltip, x3 = o6.tooltipPosition, S2 = void 0 === x3 ? T2 : x3, R2 = o6.tooltipAnchor, A4 = void 0 === R2 ? P2 : R2, N2 = o6.debug, O3 = (0, import_react19.useRef)(null), j3 = W2({ points: i6, getNodePosition: a2, width: t5, height: r6, margin: u5, debug: N2 }), I2 = j3.delaunay, z3 = j3.voronoi, F3 = D4({ elementRef: O3, nodes: i6, delaunay: I2, margin: u5, detectionRadius: w3, setCurrent: d2, onMouseEnter: s3, onMouseMove: c8, onMouseLeave: h, onClick: v4, onTouchStart: f2, onTouchMove: p2, onTouchEnd: g2, enableTouchCrosshair: y4, tooltip: E6, tooltipPosition: S2, tooltipAnchor: A4 }), H2 = F3.current, B5 = F3.handleMouseEnter, q3 = F3.handleMouseMove, G = F3.handleMouseLeave, J2 = F3.handleClick, K2 = F3.handleTouchStart, Q2 = F3.handleTouchMove, U2 = F3.handleTouchEnd, V3 = (0, import_react19.useMemo)(function() {
      if (N2 && z3)
        return z3.render();
    }, [N2, z3]);
    return (0, import_jsx_runtime4.jsxs)("g", { ref: O3, transform: "translate(" + -u5.left + "," + -u5.top + ")", children: [N2 && z3 && (0, import_jsx_runtime4.jsxs)(import_jsx_runtime4.Fragment, { children: [(0, import_jsx_runtime4.jsx)("path", { d: V3, stroke: "red", strokeWidth: 1, opacity: 0.75 }), w3 < 1 / 0 && (0, import_jsx_runtime4.jsx)("path", { stroke: "red", strokeWidth: 0.35, fill: "none", d: I2.renderPoints(void 0, w3) }), H2 && (0, import_jsx_runtime4.jsx)("path", { fill: "pink", opacity: 0.35, d: z3.renderCell(H2[0]) })] }), (0, import_jsx_runtime4.jsx)("rect", { "data-ref": "mesh-interceptor", width: u5.left + t5 + u5.right, height: u5.top + r6 + u5.bottom, fill: "red", opacity: 0, style: { cursor: "auto" }, onMouseEnter: B5, onMouseMove: q3, onMouseLeave: G, onTouchStart: K2, onTouchMove: Q2, onTouchEnd: U2, onClick: J2 })] });
  };

  // node_modules/@nivo/tree/dist/nivo-tree.es.js
  function j2() {
    return j2 = Object.assign ? Object.assign.bind() : function(e7) {
      for (var o6 = 1; o6 < arguments.length; o6++) {
        var n6 = arguments[o6];
        for (var t5 in n6)
          Object.prototype.hasOwnProperty.call(n6, t5) && (e7[t5] = n6[t5]);
      }
      return e7;
    }, j2.apply(this, arguments);
  }
  function H(e7, o6) {
    if (null == e7)
      return {};
    var n6, t5, i6 = {}, r6 = Object.keys(e7);
    for (t5 = 0; t5 < r6.length; t5++)
      n6 = r6[t5], o6.indexOf(n6) >= 0 || (i6[n6] = e7[n6]);
    return i6;
  }
  var X = function(o6) {
    var n6 = o6.data, t5 = o6.mode, i6 = o6.getIdentity;
    return (0, import_react20.useMemo)(function() {
      var e7 = hierarchy(n6), o7 = "tree" === t5 ? tree_default() : cluster_default();
      return e7.eachBefore(function(e8) {
        var o8 = e8.ancestors().filter(function(o9) {
          return o9 !== e8;
        }).reverse(), n7 = o8.map(function(e9) {
          return i6(e9.data);
        });
        e8.ancestorIds = n7, e8.uid = [].concat(n7, [i6(e8.data)]).join("."), e8.ancestorUids = o8.map(function(e9) {
          return e9.uid;
        });
      }), e7.each(function(e8) {
        e8.descendantUids = e8.descendants().filter(function(o8) {
          return o8 !== e8;
        }).map(function(e9) {
          return e9.uid;
        });
      }), o7(e7), e7;
    }, [n6, t5, i6]);
  };
  var Y = function(o6) {
    return (0, import_react20.useMemo)(function() {
      return void 0 === o6 ? function(e7) {
        return e7.size;
      } : "function" == typeof o6 ? o6 : function() {
        return o6;
      };
    }, [o6]);
  };
  var F2 = function(o6) {
    var n6, i6 = o6.root, r6 = o6.xScale, l5 = o6.yScale, s3 = o6.layout, a2 = o6.getIdentity, d2 = o6.nodeSize, u5 = o6.activeNodeSize, c8 = o6.inactiveNodeSize, h = o6.nodeColor, f2 = o6.fixNodeColorAtDepth, v4 = (0, import_react20.useMemo)(function() {
      return i6.descendants().map(function(e7) {
        var o7, n7;
        "top-to-bottom" === s3 || "bottom-to-top" === s3 ? (o7 = r6(e7.x), n7 = l5(e7.y)) : (o7 = r6(e7.y), n7 = l5(e7.x));
        var t5 = a2(e7.data);
        return { path: [].concat(e7.ancestorIds, [t5]), uid: e7.uid, isRoot: 0 === e7.depth, isLeaf: 0 === e7.height, ancestorIds: e7.ancestorIds, ancestorUids: e7.ancestorUids, descendantUids: e7.descendantUids, id: t5, data: e7.data, depth: e7.depth, height: e7.height, x: o7, y: n7 };
      });
    }, [i6, a2, s3, r6, l5]), g2 = (0, import_react20.useMemo)(function() {
      return "function" == typeof n6 ? n6 : function() {
        return n6;
      };
    }, [n6 = d2]), k2 = Y(u5), p2 = Y(c8), m4 = pr(h, "uid"), b3 = (0, import_react20.useMemo)(function() {
      return f2 === 1 / 0 ? m4 : function(e7, o7) {
        if (e7.depth <= 0 || e7.depth <= f2 || 0 === e7.ancestorUids.length)
          return m4(e7);
        var n7 = o7[e7.ancestorUids[e7.ancestorUids.length - 1]];
        return void 0 === n7 ? m4(e7) : n7.color;
      };
    }, [m4, f2]), y4 = (0, import_react20.useState)([]), C6 = y4[0], L2 = y4[1], M3 = (0, import_react20.useMemo)(function() {
      var e7 = {};
      return { nodes: v4.map(function(o7) {
        var n7 = j2({}, o7, { size: g2(o7), color: b3(o7, e7), isActive: null });
        return C6.length > 0 && (n7.isActive = C6.includes(n7.uid), n7.isActive ? n7.size = k2(n7) : n7.size = p2(n7)), e7[n7.uid] = n7, n7;
      }), nodeByUid: e7 };
    }, [v4, g2, k2, p2, b3, C6]);
    return j2({}, M3, { activeNodeUids: C6, setActiveNodeUids: L2 });
  };
  var q2 = function(o6) {
    return (0, import_react20.useMemo)(function() {
      return void 0 === o6 ? function(e7) {
        return e7.thickness;
      } : "function" == typeof o6 ? o6 : function() {
        return o6;
      };
    }, [o6]);
  };
  var J = function(o6) {
    var i6 = o6.data, r6 = o6.width, l5 = o6.height, s3 = o6.identity, u5 = void 0 === s3 ? V2.identity : s3, c8 = o6.mode, h = void 0 === c8 ? V2.mode : c8, f2 = o6.layout, v4 = void 0 === f2 ? V2.layout : f2, g2 = o6.nodeSize, k2 = void 0 === g2 ? V2.nodeSize : g2, p2 = o6.activeNodeSize, m4 = o6.inactiveNodeSize, b3 = o6.nodeColor, y4 = void 0 === b3 ? V2.nodeColor : b3, C6 = o6.fixNodeColorAtDepth, I2 = void 0 === C6 ? V2.fixNodeColorAtDepth : C6, w3 = o6.highlightAncestorNodes, S2 = void 0 === w3 ? V2.highlightAncestorNodes : w3, E6 = o6.highlightDescendantNodes, U2 = void 0 === E6 ? V2.highlightDescendantNodes : E6, B5 = o6.linkCurve, O3 = void 0 === B5 ? V2.linkCurve : B5, R2 = o6.linkThickness, W3 = void 0 === R2 ? V2.linkThickness : R2, G = o6.linkColor, H2 = void 0 === G ? V2.linkColor : G, Y2 = o6.activeLinkThickness, J2 = o6.inactiveLinkThickness, K2 = o6.highlightAncestorLinks, Q2 = void 0 === K2 ? V2.highlightAncestorLinks : K2, Z2 = o6.highlightDescendantLinks, $3 = void 0 === Z2 ? V2.highlightDescendantLinks : Z2, _2 = Wn(u5), ee2 = X({ data: i6, mode: h, getIdentity: _2 }), oe2 = function(o7) {
      var n6 = o7.width, t5 = o7.height, i7 = o7.layout;
      return (0, import_react20.useMemo)(function() {
        var e7 = linear3().domain([0, 1]), o8 = linear3().domain([0, 1]);
        return "top-to-bottom" === i7 ? (e7.range([0, n6]), o8.range([0, t5])) : "right-to-left" === i7 ? (e7.range([n6, 0]), o8.range([0, t5])) : "bottom-to-top" === i7 ? (e7.range([n6, 0]), o8.range([t5, 0])) : "left-to-right" === i7 && (e7.range([0, n6]), o8.range([t5, 0])), { xScale: e7, yScale: o8 };
      }, [n6, t5, i7]);
    }({ width: r6, height: l5, layout: v4 }), ne2 = oe2.xScale, te2 = oe2.yScale, ie2 = F2({ root: ee2, xScale: ne2, yScale: te2, layout: v4, getIdentity: _2, nodeSize: k2, activeNodeSize: p2, inactiveNodeSize: m4, nodeColor: y4, fixNodeColorAtDepth: I2 }), re3 = ie2.nodes, le2 = ie2.nodeByUid, se2 = ie2.activeNodeUids, ae2 = ie2.setActiveNodeUids, de3 = function(o7) {
      var n6 = o7.layout, t5 = o7.curve;
      return (0, import_react20.useMemo)(function() {
        var e7 = linear_default2;
        return "bump" === t5 ? e7 = "top-to-bottom" === n6 || "bottom-to-top" === n6 ? bumpY : bumpX : "step" === t5 ? e7 = step_default2 : "step-before" === t5 ? e7 = stepBefore2 : "step-after" === t5 && (e7 = stepAfter2), link(e7);
      }, [n6, t5]);
    }({ layout: v4, curve: O3 }), ue2 = function(o7) {
      var n6 = o7.root, i7 = o7.nodeByUid, r7 = o7.activeNodeUids, l6 = o7.linkThickness, s4 = o7.activeLinkThickness, a2 = o7.inactiveLinkThickness, u6 = o7.linkColor, c9 = (0, import_react20.useMemo)(function() {
        return n6.links().map(function(e7) {
          return { id: e7.source.uid + ":" + e7.target.uid, source: i7[e7.source.uid], target: i7[e7.target.uid] };
        });
      }, [n6, i7]), h3 = (0, import_react20.useMemo)(function() {
        return "function" == typeof l6 ? l6 : function() {
          return l6;
        };
      }, [l6]), f3 = q2(s4), v5 = q2(a2), g3 = zt(), k3 = Xe(u6, g3), p3 = (0, import_react20.useState)([]), m5 = p3[0], b4 = p3[1];
      return { links: (0, import_react20.useMemo)(function() {
        return c9.map(function(e7) {
          var o8 = j2({}, e7, { thickness: h3(e7), color: k3(e7), isActive: null });
          return r7.length > 0 && (o8.isActive = m5.includes(o8.id), o8.isActive ? o8.thickness = f3(o8) : o8.thickness = v5(o8)), o8;
        });
      }, [c9, h3, f3, v5, k3, r7.length, m5]), setActiveLinkIds: b4 };
    }({ root: ee2, nodeByUid: le2, activeNodeUids: se2, linkThickness: W3, activeLinkThickness: Y2, inactiveLinkThickness: J2, linkColor: H2 }), ce3 = ue2.links, he2 = function(e7) {
      var o7 = e7.setActiveNodeUids, t5 = e7.highlightAncestorNodes, i7 = e7.highlightDescendantNodes, r7 = e7.links, l6 = e7.setActiveLinkIds, s4 = e7.highlightAncestorLinks, a2 = e7.highlightDescendantLinks;
      return (0, import_react20.useCallback)(function(e8) {
        if (null === e8)
          o7([]), l6([]);
        else {
          var n6 = [e8.uid];
          t5 && (n6 = [].concat(n6, e8.ancestorUids)), i7 && (n6 = [].concat(n6, e8.descendantUids)), o7(n6);
          var d2 = [];
          s4 && r7.filter(function(o8) {
            return o8.target.uid === e8.uid || e8.ancestorUids.includes(o8.target.uid);
          }).forEach(function(e9) {
            d2.push(e9.id);
          }), a2 && r7.filter(function(o8) {
            return o8.source.uid === e8.uid || e8.descendantUids.includes(o8.source.uid);
          }).forEach(function(e9) {
            d2.push(e9.id);
          }), l6(d2);
        }
      }, [o7, t5, i7, r7, l6, s4, a2]);
    }({ setActiveNodeUids: ae2, highlightAncestorNodes: S2, highlightDescendantNodes: U2, links: ce3, setActiveLinkIds: ue2.setActiveLinkIds, highlightAncestorLinks: Q2, highlightDescendantLinks: $3 });
    return { nodes: re3, nodeByUid: le2, links: ce3, linkGenerator: de3, setCurrentNode: he2 };
  };
  var K = function(t5, i6) {
    var r6 = i6.isInteractive, l5 = i6.onMouseEnter, s3 = i6.onMouseMove, a2 = i6.onMouseLeave, d2 = i6.onClick, u5 = i6.setCurrentNode, c8 = i6.tooltip, h = i6.tooltipPosition, f2 = i6.tooltipAnchor, v4 = i6.margin, g2 = k(), k2 = g2.showTooltipFromEvent, p2 = g2.showTooltipAt, m4 = g2.hideTooltip, b3 = (0, import_react20.useMemo)(function() {
      if (c8)
        return "fixed" === h ? function() {
          var e7 = t5.x, n6 = t5.y;
          p2((0, import_react20.createElement)(c8, { node: t5 }), [e7 + v4.left, n6 + v4.top], f2);
        } : function(e7) {
          k2((0, import_react20.createElement)(c8, { node: t5 }), e7, f2);
        };
    }, [t5, c8, k2, p2, h, f2, v4]), y4 = (0, import_react20.useCallback)(function(e7) {
      u5(t5), null == b3 || b3(e7), null == l5 || l5(t5, e7);
    }, [t5, b3, u5, l5]), C6 = (0, import_react20.useCallback)(function(e7) {
      null == b3 || b3(e7), null == s3 || s3(t5, e7);
    }, [t5, b3, s3]), L2 = (0, import_react20.useCallback)(function(e7) {
      u5(null), m4(), null == a2 || a2(t5, e7);
    }, [t5, m4, u5, a2]), M3 = (0, import_react20.useCallback)(function(e7) {
      null == d2 || d2(t5, e7);
    }, [t5, d2]);
    return { onMouseEnter: r6 ? y4 : void 0, onMouseMove: r6 ? C6 : void 0, onMouseLeave: r6 ? L2 : void 0, onClick: r6 ? M3 : void 0 };
  };
  var Q = function(t5, i6) {
    var r6 = i6.isInteractive, l5 = i6.onMouseEnter, s3 = i6.onMouseMove, a2 = i6.onMouseLeave, d2 = i6.onClick, u5 = i6.tooltip, c8 = i6.tooltipAnchor, h = k(), f2 = h.showTooltipFromEvent, v4 = h.hideTooltip, g2 = (0, import_react20.useMemo)(function() {
      if (u5)
        return function(e7) {
          f2((0, import_react20.createElement)(u5, { link: t5 }), e7, c8);
        };
    }, [t5, u5, f2, c8]), k2 = (0, import_react20.useCallback)(function(e7) {
      null == g2 || g2(e7), null == l5 || l5(t5, e7);
    }, [t5, g2, l5]), p2 = (0, import_react20.useCallback)(function(e7) {
      null == g2 || g2(e7), null == s3 || s3(t5, e7);
    }, [t5, g2, s3]), m4 = (0, import_react20.useCallback)(function(e7) {
      v4(), null == a2 || a2(t5, e7);
    }, [t5, v4, a2]), b3 = (0, import_react20.useCallback)(function(e7) {
      null == d2 || d2(t5, e7);
    }, [t5, d2]);
    return { onMouseEnter: r6 ? k2 : void 0, onMouseMove: r6 ? p2 : void 0, onMouseLeave: r6 ? m4 : void 0, onClick: r6 ? b3 : void 0 };
  };
  var V2 = { identity: "id", mode: "dendogram", layout: "top-to-bottom", nodeSize: 12, nodeColor: { scheme: "nivo" }, fixNodeColorAtDepth: 1 / 0, linkCurve: "bump", linkThickness: 1, linkColor: { from: "source.color", modifiers: [["opacity", 0.4]] }, enableLabel: true, label: "id", labelsPosition: "outward", orientLabel: true, labelOffset: 6, isInteractive: true, useMesh: true, meshDetectionRadius: 1 / 0, debugMesh: false, highlightAncestorNodes: true, highlightDescendantNodes: false, highlightAncestorLinks: true, highlightDescendantLinks: false, nodeTooltipPosition: "fixed", nodeTooltipAnchor: "top", role: "img", animate: true, motionConfig: "gentle" };
  var Z = j2({}, V2, { layers: ["links", "nodes", "labels", "mesh"], nodeComponent: function(e7) {
    var o6 = e7.node, n6 = e7.isInteractive, t5 = e7.onMouseEnter, i6 = e7.onMouseMove, r6 = e7.onMouseLeave, l5 = e7.onClick, s3 = e7.setCurrentNode, a2 = e7.tooltip, d2 = e7.tooltipPosition, u5 = e7.tooltipAnchor, c8 = e7.margin, h = e7.animatedProps, f2 = K(o6, { isInteractive: n6, onMouseEnter: t5, onMouseMove: i6, onMouseLeave: r6, onClick: l5, setCurrentNode: s3, tooltip: a2, tooltipPosition: d2, tooltipAnchor: u5, margin: c8 });
    return (0, import_jsx_runtime5.jsx)(animated3.circle, j2({ "data-testid": "node." + o6.uid, r: h.size.to(function(e8) {
      return e8 / 2;
    }), fill: h.color, cx: h.x, cy: h.y }, f2));
  }, linkComponent: function(e7) {
    var o6 = e7.link, n6 = e7.linkGenerator, t5 = e7.isInteractive, i6 = e7.onMouseEnter, r6 = e7.onMouseMove, l5 = e7.onMouseLeave, s3 = e7.onClick, a2 = e7.tooltip, d2 = e7.tooltipAnchor, u5 = e7.animatedProps, c8 = Q(o6, { isInteractive: t5, onMouseEnter: i6, onMouseMove: r6, onMouseLeave: l5, onClick: s3, tooltip: a2, tooltipAnchor: d2 });
    return (0, import_jsx_runtime5.jsx)(animated3.path, j2({ "data-testid": "link." + o6.id, d: to3([u5.sourceX, u5.sourceY, u5.targetX, u5.targetY], function(e8, o7, t6, i7) {
      return n6({ source: [e8, o7], target: [t6, i7] });
    }), fill: "none", strokeWidth: u5.thickness, stroke: u5.color }, c8));
  }, labelComponent: function(e7) {
    var o6 = e7.label, n6 = e7.animatedProps, t5 = zt();
    return (0, import_jsx_runtime5.jsx)(animated3.g, { "data-testid": "label." + o6.id, transform: to3([n6.x, n6.y], function(e8, o7) {
      return "translate(" + e8 + "," + o7 + ")";
    }), children: (0, import_jsx_runtime5.jsxs)(animated3.g, { transform: n6.rotation.to(function(e8) {
      return "rotate(" + e8 + ")";
    }), children: [t5.labels.text.outlineWidth > 0 && (0, import_jsx_runtime5.jsx)("text", { style: j2({}, t5.labels.text, { fill: t5.labels.text.outlineColor }), stroke: t5.labels.text.outlineColor, strokeWidth: 2 * t5.labels.text.outlineWidth, strokeLinejoin: "round", textAnchor: o6.textAnchor, dominantBaseline: o6.baseline, children: o6.label }), (0, import_jsx_runtime5.jsx)("text", { "data-testid": "label." + o6.id + ".label", style: t5.labels.text, textAnchor: o6.textAnchor, dominantBaseline: o6.baseline, children: o6.label })] }) });
  }, linkTooltipAnchor: "top" });
  var $2 = j2({}, V2, { layers: ["links", "nodes", "labels", "mesh"], renderNode: function(e7, o6) {
    var n6 = o6.node;
    e7.beginPath(), e7.arc(n6.x, n6.y, n6.size / 2, 0, 2 * Math.PI), e7.fillStyle = n6.color, e7.fill();
  }, renderLink: function(e7, o6) {
    var n6 = o6.link, t5 = o6.linkGenerator;
    e7.strokeStyle = n6.color, e7.lineWidth = n6.thickness, e7.beginPath(), t5({ source: [n6.source.x, n6.source.y], target: [n6.target.x, n6.target.y] }), e7.stroke();
  }, renderLabel: function(e7, o6) {
    var n6 = o6.label, t5 = o6.theme;
    e7.save(), e7.translate(n6.x, n6.y), e7.rotate(Ht(n6.rotation)), e7.textBaseline = "middle", e7.textAlign = "middle" === n6.textAnchor ? "center" : n6.textAnchor, e7.fillStyle = "#000", r3(e7, t5.labels.text, n6.label), e7.restore();
  }, pixelRatio: "undefined" != typeof window && window.devicePixelRatio || 1 });
  var _ = function(e7) {
    return { sourceX: e7.source.x, sourceY: e7.source.y, targetX: e7.target.x, targetY: e7.target.y, thickness: e7.thickness, color: e7.color };
  };
  var ee = function(e7) {
    return { sourceX: e7.source.x, sourceY: e7.source.y, targetX: e7.target.x, targetY: e7.target.y, thickness: e7.thickness, color: e7.color };
  };
  var oe = function(e7) {
    var n6 = e7.links, t5 = e7.linkComponent, i6 = e7.linkGenerator, r6 = e7.isInteractive, l5 = e7.onMouseEnter, s3 = e7.onMouseMove, a2 = e7.onMouseLeave, d2 = e7.onClick, u5 = e7.tooltip, h = e7.tooltipAnchor, f2 = Ur(), v4 = f2.animate, g2 = f2.config, k2 = useTransition(n6, { keys: function(e8) {
      return e8.id;
    }, from: _, enter: _, update: _, leave: ee, config: g2, immediate: !v4 });
    return (0, import_jsx_runtime5.jsx)(import_jsx_runtime5.Fragment, { children: k2(function(e8, n7) {
      return (0, import_react20.createElement)(t5, { link: n7, linkGenerator: i6, animatedProps: e8, isInteractive: r6, onMouseEnter: l5, onMouseMove: s3, onMouseLeave: a2, onClick: d2, tooltip: u5, tooltipAnchor: h });
    }) });
  };
  var ne = function(e7) {
    return { x: e7.x, y: e7.y, size: e7.size, color: e7.color };
  };
  var te = function(e7) {
    return { x: e7.x, y: e7.y, size: 0, color: e7.color };
  };
  var ie = function(e7) {
    var n6 = e7.nodes, t5 = e7.nodeComponent, i6 = e7.isInteractive, r6 = e7.onMouseEnter, l5 = e7.onMouseMove, s3 = e7.onMouseLeave, a2 = e7.onClick, d2 = e7.setCurrentNode, u5 = e7.tooltip, h = e7.tooltipPosition, f2 = e7.tooltipAnchor, v4 = e7.margin, g2 = Ur(), k2 = g2.animate, p2 = g2.config, b3 = useTransition(n6, { keys: function(e8) {
      return e8.uid;
    }, from: ne, enter: ne, update: ne, leave: te, config: p2, immediate: !k2 });
    return (0, import_jsx_runtime5.jsx)(import_jsx_runtime5.Fragment, { children: b3(function(e8, n7) {
      return (0, import_react20.createElement)(t5, { node: n7, isInteractive: i6, onMouseEnter: r6, onMouseMove: l5, onMouseLeave: s3, onClick: a2, setCurrentNode: d2, tooltip: u5, tooltipPosition: h, tooltipAnchor: f2, margin: v4, animatedProps: e8 });
    }) });
  };
  var re2 = function(e7, o6, n6) {
    return { x: e7 - n6, y: o6, rotation: 0, textAnchor: "end", baseline: "middle" };
  };
  var le = function(e7, o6, n6) {
    return { x: e7 + n6, y: o6, rotation: 0, textAnchor: "start", baseline: "middle" };
  };
  var se = function(e7, o6, n6) {
    return { x: e7, y: o6 - n6, rotation: 0, textAnchor: "middle", baseline: "auto" };
  };
  var ae = function(e7, o6, n6) {
    return { x: e7, y: o6 - n6, rotation: -90, textAnchor: "start", baseline: "middle" };
  };
  var de2 = function(e7, o6, n6) {
    return { x: e7, y: o6 + n6, rotation: 0, textAnchor: "middle", baseline: "hanging" };
  };
  var ue = function(e7, o6, n6) {
    return { x: e7, y: o6 + n6, rotation: -90, textAnchor: "end", baseline: "middle" };
  };
  var ce2 = function(e7) {
    var o6 = e7.orient, n6 = e7.offset;
    return function(e8) {
      var t5 = e8.size / 2 + n6;
      return e8.isLeaf ? o6 ? ae(e8.x, e8.y, t5) : se(e8.x, e8.y, t5) : o6 ? ue(e8.x, e8.y, t5) : de2(e8.x, e8.y, t5);
    };
  };
  var he = function(e7) {
    var o6 = e7.orient, n6 = e7.offset;
    return function(e8) {
      var t5 = e8.size / 2 + n6;
      return e8.isLeaf ? o6 ? ue(e8.x, e8.y, t5) : de2(e8.x, e8.y, t5) : o6 ? ae(e8.x, e8.y, t5) : se(e8.x, e8.y, t5);
    };
  };
  var fe = function(e7) {
    var o6 = e7.orient, n6 = e7.offset;
    return function(e8) {
      var t5 = e8.size / 2 + n6;
      return o6 ? ae(e8.x, e8.y, t5) : se(e8.x, e8.y, t5);
    };
  };
  var ve = function(e7) {
    var o6 = e7.orient, n6 = e7.offset;
    return function(e8) {
      var t5 = e8.size / 2 + n6;
      return o6 ? ue(e8.x, e8.y, t5) : de2(e8.x, e8.y, t5);
    };
  };
  var ge = function(e7) {
    var o6 = e7.offset;
    return function(e8) {
      var n6 = e8.size / 2 + o6;
      return e8.isLeaf ? re2(e8.x, e8.y, n6) : le(e8.x, e8.y, n6);
    };
  };
  var ke2 = function(e7) {
    var o6 = e7.offset;
    return function(e8) {
      var n6 = e8.size / 2 + o6;
      return e8.isLeaf ? le(e8.x, e8.y, n6) : re2(e8.x, e8.y, n6);
    };
  };
  var pe = function(e7) {
    var o6 = e7.offset;
    return function(e8) {
      return re2(e8.x, e8.y, e8.size / 2 + o6);
    };
  };
  var me = function(e7) {
    var o6 = e7.offset;
    return function(e8) {
      return le(e8.x, e8.y, e8.size / 2 + o6);
    };
  };
  var be = function(o6) {
    var n6 = o6.nodes, t5 = o6.label, i6 = o6.layout, r6 = o6.labelsPosition, l5 = o6.orientLabel, s3 = o6.labelOffset, d2 = Wn(t5), u5 = function(o7) {
      var n7 = o7.layout, t6 = o7.labelsPosition, i7 = o7.orientLabel, r7 = o7.labelOffset;
      return (0, import_react20.useMemo)(function() {
        var e7 = { orient: i7, offset: r7 };
        if ("top-to-bottom" === n7) {
          if ("outward" === t6)
            return he(e7);
          if ("inward" === t6)
            return ce2(e7);
          if ("layout" === t6)
            return ve(e7);
          if ("layout-opposite" === t6)
            return fe(e7);
        }
        if ("bottom-to-top" === n7) {
          if ("outward" === t6)
            return ce2(e7);
          if ("inward" === t6)
            return he(e7);
          if ("layout" === t6)
            return fe(e7);
          if ("layout-opposite" === t6)
            return ve(e7);
        }
        if ("right-to-left" === n7) {
          if ("outward" === t6)
            return ge(e7);
          if ("inward" === t6)
            return ke2(e7);
          if ("layout" === t6)
            return pe(e7);
          if ("layout-opposite" === t6)
            return me(e7);
        }
        if ("left-to-right" === n7) {
          if ("outward" === t6)
            return ke2(e7);
          if ("inward" === t6)
            return ge(e7);
          if ("layout" === t6)
            return me(e7);
          if ("layout-opposite" === t6)
            return pe(e7);
        }
      }, [n7, t6, i7, r7]);
    }({ layout: i6, labelsPosition: r6, orientLabel: l5, labelOffset: s3 });
    if (void 0 === u5)
      throw new Error("Unable to determine the logic to compute labels position");
    return (0, import_react20.useMemo)(function() {
      return n6.map(function(e7) {
        return j2({ id: e7.uid, node: e7, label: d2(e7) }, u5(e7));
      });
    }, [n6, d2, u5]);
  };
  var ye = function(e7) {
    return { x: e7.x, y: e7.y, rotation: e7.rotation };
  };
  var Ce2 = function(e7) {
    return { x: e7.x, y: e7.y, rotation: e7.rotation };
  };
  var Le2 = function(e7) {
    var n6 = e7.nodes, t5 = e7.label, i6 = e7.layout, r6 = e7.labelsPosition, l5 = e7.orientLabel, s3 = e7.labelOffset, a2 = e7.labelComponent, d2 = be({ nodes: n6, label: t5, layout: i6, labelsPosition: r6, orientLabel: l5, labelOffset: s3 }), u5 = Ur(), h = u5.animate, f2 = u5.config, v4 = useTransition(d2, { keys: function(e8) {
      return e8.id;
    }, from: ye, enter: ye, update: ye, leave: Ce2, config: f2, immediate: !h });
    return (0, import_jsx_runtime5.jsx)("g", { style: { pointerEvents: "none" }, children: v4(function(e8, n7) {
      return (0, import_react20.createElement)(a2, { label: n7, animatedProps: e8 });
    }) });
  };
  var Me2 = (0, import_react20.memo)(function(n6) {
    var t5 = n6.nodes, i6 = n6.width, r6 = n6.height, l5 = n6.margin, s3 = n6.onMouseEnter, a2 = n6.onMouseMove, d2 = n6.onMouseLeave, u5 = n6.onClick, c8 = n6.setCurrentNode, h = n6.tooltip, f2 = n6.tooltipPosition, v4 = n6.tooltipAnchor, g2 = n6.detectionRadius, k2 = n6.debug, p2 = (0, import_react20.useMemo)(function() {
      if (h)
        return function(e7) {
          return (0, import_react20.createElement)(h, { node: e7 });
        };
    }, [h]);
    return (0, import_jsx_runtime5.jsx)(I, { nodes: t5, width: i6, height: r6, margin: l5, detectionRadius: g2, setCurrent: c8, onMouseEnter: s3, onMouseMove: a2, onMouseLeave: d2, onClick: u5, tooltip: p2, tooltipPosition: f2, tooltipAnchor: v4, debug: k2 });
  });
  var xe = ["isInteractive", "animate", "motionConfig", "theme", "renderWrapper"];
  var Ae = function(n6) {
    var t5 = n6.width, i6 = n6.height, l5 = n6.margin, s3 = n6.data, a2 = n6.identity, d2 = n6.mode, u5 = void 0 === d2 ? Z.mode : d2, c8 = n6.layout, h = void 0 === c8 ? Z.layout : c8, g2 = n6.nodeSize, k2 = void 0 === g2 ? Z.nodeSize : g2, p2 = n6.activeNodeSize, m4 = n6.inactiveNodeSize, b3 = n6.nodeColor, y4 = void 0 === b3 ? Z.nodeColor : b3, C6 = n6.fixNodeColorAtDepth, L2 = void 0 === C6 ? Z.fixNodeColorAtDepth : C6, M3 = n6.nodeComponent, x3 = void 0 === M3 ? Z.nodeComponent : M3, A4 = n6.linkCurve, N2 = void 0 === A4 ? Z.linkCurve : A4, T3 = n6.linkThickness, z3 = void 0 === T3 ? Z.linkThickness : T3, D5 = n6.activeLinkThickness, I2 = n6.inactiveLinkThickness, w3 = n6.linkColor, P3 = void 0 === w3 ? Z.linkColor : w3, E6 = n6.linkComponent, U2 = void 0 === E6 ? Z.linkComponent : E6, B5 = n6.enableLabel, O3 = void 0 === B5 ? Z.enableLabel : B5, R2 = n6.label, W3 = void 0 === R2 ? Z.label : R2, G = n6.labelsPosition, j3 = void 0 === G ? Z.labelsPosition : G, H2 = n6.orientLabel, X2 = void 0 === H2 ? Z.orientLabel : H2, Y2 = n6.labelOffset, F3 = void 0 === Y2 ? Z.labelOffset : Y2, q3 = n6.labelComponent, K2 = void 0 === q3 ? Z.labelComponent : q3, Q2 = n6.layers, V3 = void 0 === Q2 ? Z.layers : Q2, $3 = n6.isInteractive, _2 = void 0 === $3 ? Z.isInteractive : $3, ee2 = n6.useMesh, ne2 = void 0 === ee2 ? Z.useMesh : ee2, te2 = n6.meshDetectionRadius, re3 = void 0 === te2 ? Z.meshDetectionRadius : te2, le2 = n6.debugMesh, se2 = void 0 === le2 ? Z.debugMesh : le2, ae2 = n6.highlightAncestorNodes, de3 = void 0 === ae2 ? Z.highlightAncestorNodes : ae2, ue2 = n6.highlightDescendantNodes, ce3 = void 0 === ue2 ? Z.highlightDescendantNodes : ue2, he2 = n6.highlightAncestorLinks, fe2 = void 0 === he2 ? Z.highlightAncestorLinks : he2, ve2 = n6.highlightDescendantLinks, ge2 = void 0 === ve2 ? Z.highlightDescendantLinks : ve2, ke3 = n6.onNodeMouseEnter, pe2 = n6.onNodeMouseMove, me2 = n6.onNodeMouseLeave, be2 = n6.onNodeClick, ye2 = n6.nodeTooltip, Ce3 = n6.nodeTooltipPosition, xe2 = void 0 === Ce3 ? Z.nodeTooltipPosition : Ce3, Ae2 = n6.nodeTooltipAnchor, Ne3 = void 0 === Ae2 ? Z.nodeTooltipAnchor : Ae2, Te3 = n6.onLinkMouseEnter, ze = n6.onLinkMouseMove, De2 = n6.onLinkMouseLeave, Ie = n6.onLinkClick, we2 = n6.linkTooltip, Pe2 = n6.linkTooltipAnchor, Se = void 0 === Pe2 ? Z.linkTooltipAnchor : Pe2, Ee = n6.role, Ue2 = void 0 === Ee ? Z.role : Ee, Be2 = n6.ariaLabel, Oe2 = n6.ariaLabelledBy, Re2 = n6.ariaDescribedBy, We2 = wt(t5, i6, l5), Ge2 = We2.outerWidth, je2 = We2.outerHeight, He2 = We2.margin, Xe2 = We2.innerWidth, Ye2 = We2.innerHeight, Fe2 = J({ data: s3, identity: a2, layout: h, mode: u5, width: Xe2, height: Ye2, nodeSize: k2, activeNodeSize: p2, inactiveNodeSize: m4, nodeColor: y4, fixNodeColorAtDepth: L2, highlightAncestorNodes: de3, highlightDescendantNodes: ce3, linkCurve: N2, linkThickness: z3, activeLinkThickness: D5, inactiveLinkThickness: I2, linkColor: P3, highlightAncestorLinks: fe2, highlightDescendantLinks: ge2 }), qe2 = Fe2.nodes, Je2 = Fe2.nodeByUid, Ke2 = Fe2.links, Qe3 = Fe2.linkGenerator, Ve2 = Fe2.setCurrentNode, Ze2 = { links: null, nodes: null, labels: null, mesh: null };
    V3.includes("links") && (Ze2.links = (0, import_jsx_runtime5.jsx)(oe, { links: Ke2, linkComponent: U2, linkGenerator: Qe3, isInteractive: _2, onMouseEnter: Te3, onMouseMove: ze, onMouseLeave: De2, onClick: Ie, tooltip: we2, tooltipAnchor: Se }, "links")), V3.includes("nodes") && (Ze2.nodes = (0, import_jsx_runtime5.jsx)(ie, { nodes: qe2, nodeComponent: x3, isInteractive: _2, onMouseEnter: ke3, onMouseMove: pe2, onMouseLeave: me2, onClick: be2, setCurrentNode: Ve2, tooltip: ye2, tooltipPosition: xe2, tooltipAnchor: Ne3, margin: He2 }, "nodes")), V3.includes("labels") && O3 && (Ze2.labels = (0, import_jsx_runtime5.jsx)(Le2, { label: W3, nodes: qe2, layout: h, labelsPosition: j3, orientLabel: X2, labelOffset: F3, labelComponent: K2 }, "labels")), V3.includes("mesh") && _2 && ne2 && (Ze2.mesh = (0, import_jsx_runtime5.jsx)(Me2, { nodes: qe2, width: Xe2, height: Ye2, margin: He2, detectionRadius: re3, debug: se2, onMouseEnter: ke3, onMouseMove: pe2, onMouseLeave: me2, onClick: be2, tooltip: ye2, tooltipPosition: xe2, tooltipAnchor: Ne3, setCurrentNode: Ve2 }, "mesh"));
    var $e2 = (0, import_react20.useMemo)(function() {
      return { nodes: qe2, nodeByUid: Je2, links: Ke2, innerWidth: Xe2, innerHeight: Ye2, linkGenerator: Qe3, setCurrentNode: Ve2 };
    }, [qe2, Je2, Ke2, Xe2, Ye2, Qe3, Ve2]);
    return (0, import_jsx_runtime5.jsx)(gn, { width: Ge2, height: je2, margin: He2, role: Ue2, ariaLabel: Be2, ariaLabelledBy: Oe2, ariaDescribedBy: Re2, children: V3.map(function(e7, n7) {
      var t6;
      return "function" == typeof e7 ? (0, import_jsx_runtime5.jsx)(import_react20.Fragment, { children: (0, import_react20.createElement)(e7, $e2) }, n7) : null != (t6 = null == Ze2 ? void 0 : Ze2[e7]) ? t6 : null;
    }) });
  };
  var Ne2 = function(e7) {
    var o6 = e7.isInteractive, n6 = void 0 === o6 ? Z.isInteractive : o6, t5 = e7.animate, i6 = void 0 === t5 ? Z.animate : t5, r6 = e7.motionConfig, l5 = void 0 === r6 ? Z.motionConfig : r6, s3 = e7.theme, a2 = e7.renderWrapper, d2 = H(e7, xe);
    return (0, import_jsx_runtime5.jsx)(St, { animate: i6, isInteractive: n6, motionConfig: l5, renderWrapper: a2, theme: s3, children: (0, import_jsx_runtime5.jsx)(Ae, j2({ isInteractive: n6 }, d2)) });
  };
  var Te2 = function(e7) {
    return (0, import_jsx_runtime5.jsx)(It, { children: function(o6) {
      var n6 = o6.width, t5 = o6.height;
      return (0, import_jsx_runtime5.jsx)(Ne2, j2({ width: n6, height: t5 }, e7));
    } });
  };

  // assets/src/admin/js/AdminPages/KeywordResearchAdminPage/AnalyzeScreen.js
  var { Utilities: Utilities3 } = window.getGenie.Components.Common;
  var { useState: useState13, useRef: useRef7, useEffect: useEffect11 } = window.React;
  var { Spin, Empty: Empty2 } = window.antd;
  var { GenieHelpers: GenieHelpers2 } = Utilities3;
  var { Button: Button4, Image: Image2, Tooltip: Tooltip4 } = window.antd;
  var { HandleFetch: HandleFetch3, HandleResponse: HandleResponse3 } = window.getGenie.Components.Common.RequestManager;
  var { ComposeComponents: ComposeComponents8 } = window.getGenie.Components.Common.ReduxManager;
  var ActionButton = ({ icon, ...props }) => {
    return /* @__PURE__ */ React.createElement(Button4, {
      icon: /* @__PURE__ */ React.createElement("span", {
        className: `getgenie-icon-${icon}`
      }),
      type: "link",
      ...props
    });
  };
  var AnalyzeScreen = ComposeComponents8(({ setInput, subslimitUsage, relatedKeywordsData, analyzeInput, loading, loadingText, isRefetch }) => {
    const [topicalMapLoading, setTopicalMapLoading] = useState13(false);
    const [previewTopicalMap, setPreviewTopicalMap] = useState13(false);
    const [topicalMapData, setTopicalMapData] = useState13([]);
    const [topicalLoadingText, setTopicalLoadingText] = useState13("Fetching the Data");
    useEffect11(() => {
      const fetchData = async () => {
        const { data: topicalMapData2 } = await getData("topicalMapData") || {};
        if (topicalMapData2?.length) {
          setTopicalMapData(topicalMapData2);
        } else {
          setTopicalMapData([]);
        }
      };
      fetchData();
    }, [isRefetch]);
    const handleCreateTopicalMap = () => {
      if (!analyzeInput)
        return;
      setTopicalMapLoading(true);
      setPreviewTopicalMap(true);
      showLoadingText_default(setTopicalLoadingText);
      setInput("currentScreenStatus", {
        currentScreen: "analyzeScreen",
        isDataFetching: true
      });
      HandleFetch3((res) => {
        HandleResponse3(res, async () => {
          const topicalMapData2 = res?.data || [];
          if (Array.isArray(topicalMapData2)) {
            setTopicalMapData(topicalMapData2);
            await saveData("topicalMapData", topicalMapData2);
          }
        });
        setInput("currentScreenStatus", {
          currentScreen: "analyzeScreen",
          isDataFetching: false
        });
        setTopicalMapLoading(false);
      }, "topicalMap", { keyword: analyzeInput });
    };
    return /* @__PURE__ */ React.createElement(Spin, {
      spinning: loading || topicalMapLoading,
      tip: loading ? loadingText : topicalLoadingText
    }, /* @__PURE__ */ React.createElement("div", {
      className: "getgenie-analyze-screen"
    }, relatedKeywordsData?.length ? /* @__PURE__ */ React.createElement(React.Fragment, null, /* @__PURE__ */ React.createElement("div", {
      className: "getgenie-grid-layout"
    }, relatedKeywordsData?.map((keyword, index) => /* @__PURE__ */ React.createElement(KeywordCard_default, {
      key: index,
      keyword: keyword?.keyword || keyword?.baseKeyword,
      ...keyword?.searchVolume && {
        volume: keyword.searchVolume.total || "0",
        competitionValue: keyword.searchVolume.competitionValue || "0",
        competition: keyword.searchVolume.competition || "Low",
        disabled: false
      },
      currentScreen: "analyzeScreen",
      analyzeInput,
      subslimitUsage
    }))), subslimitUsage?.topical_map_generate === "0" ? /* @__PURE__ */ React.createElement(Tooltip4, {
      placement: "bottom",
      zIndex: 99999,
      title: "Go Pro to Enable the Feature."
    }, /* @__PURE__ */ React.createElement(ActionButton, {
      icon: "plus",
      disabled: true,
      className: "getgenie-keyword-research-action-btn"
    }, "Create a Topical Map")) : !!topicalMapData?.length ? /* @__PURE__ */ React.createElement(ActionButton, {
      icon: "plus",
      onClick: () => setPreviewTopicalMap(true),
      className: "getgenie-keyword-research-action-btn"
    }, "View Topical Map") : /* @__PURE__ */ React.createElement(Tooltip4, {
      placement: "bottom",
      zIndex: 99999,
      title: "Creates a topical map for your seed keyword",
      ...!analyzeInput && { open: false }
    }, /* @__PURE__ */ React.createElement(ActionButton, {
      disabled: !analyzeInput,
      icon: "plus",
      onClick: handleCreateTopicalMap,
      className: "getgenie-keyword-research-action-btn"
    }, "Create a Topical Map"))) : /* @__PURE__ */ React.createElement(Empty2, {
      image: Empty2.PRESENTED_IMAGE_SIMPLE
    }), !!topicalMapData?.length && subslimitUsage?.topical_map_generate !== "0" && /* @__PURE__ */ React.createElement(PreviewTopicalMap, {
      topicalMapData,
      previewTopicalMap,
      setPreviewTopicalMap,
      subslimitUsage
    })));
  }, ["setInput"]);
  var AnalyzeScreen_default = AnalyzeScreen;
  var PreviewTopicalMap = ({ topicalMapData, previewTopicalMap, setPreviewTopicalMap, subslimitUsage }) => {
    const [tooltip, setTooltip] = useState13("");
    const treeRef = useRef7(null);
    useEffect11(() => {
      if (treeRef.current) {
        enableDrag(treeRef.current);
      }
    }, [treeRef]);
    const handleNivoTreeActions = (action) => {
      switch (action) {
        case "download-png":
          downloadTreeAsPng(treeRef.current);
          break;
        case "download-csv":
          downloadTreeAsCSV(topicalMapData);
          break;
        case "zoom-in":
          zoomTree(treeRef.current, 1.2);
          break;
        case "zoom-out":
          zoomTree(treeRef.current, 0.8);
          break;
        default:
      }
    };
    return /* @__PURE__ */ React.createElement("div", {
      style: { display: previewTopicalMap ? "block" : "none" }
    }, topicalMapData?.length > 0 && /* @__PURE__ */ React.createElement(Image2, {
      preview: {
        visible: previewTopicalMap,
        toolbarRender: () => /* @__PURE__ */ React.createElement("div", {
          className: "getgenie-topical-map-chart-action-btns"
        }, /* @__PURE__ */ React.createElement(Tooltip4, {
          placement: "bottom",
          zIndex: 99999,
          title: subslimitUsage?.export_topical_map_image === "0" ? "Go Pro to Enable the Feature." : ""
        }, /* @__PURE__ */ React.createElement(ActionButton, {
          onClick: () => handleNivoTreeActions("download-png"),
          disabled: subslimitUsage?.export_topical_map_image === "0",
          className: "getgenie-icon-download-01-liner"
        }, "PNG")), /* @__PURE__ */ React.createElement(Tooltip4, {
          placement: "bottom",
          zIndex: 99999,
          title: subslimitUsage?.export_topical_map_csv === "0" ? "Go Pro to Enable the Feature." : ""
        }, /* @__PURE__ */ React.createElement(ActionButton, {
          onClick: () => handleNivoTreeActions("download-csv"),
          disabled: subslimitUsage?.export_topical_map_csv === "0",
          className: "getgenie-icon-download-01-liner"
        }, "CSV")), /* @__PURE__ */ React.createElement(ActionButton, {
          onClick: () => handleNivoTreeActions("zoom-in"),
          className: "getgenie-icon-zoom-in-liner"
        }), /* @__PURE__ */ React.createElement(ActionButton, {
          onClick: () => handleNivoTreeActions("zoom-out"),
          className: "getgenie-icon-zoom-out-liner"
        })),
        onVisibleChange: (visible) => setPreviewTopicalMap(visible),
        imageRender: () => /* @__PURE__ */ React.createElement("div", {
          ref: treeRef,
          className: "getgenie-topical-map-chart"
        }, /* @__PURE__ */ React.createElement("div", {
          className: "getgenie-topical-map-chart-legend"
        }, /* @__PURE__ */ React.createElement("div", null, /* @__PURE__ */ React.createElement("span", {
          style: { color: "red" }
        }, "\u25A0"), " Main Topic"), /* @__PURE__ */ React.createElement("div", null, /* @__PURE__ */ React.createElement("span", {
          style: { color: "green" }
        }, "\u25A0"), " Subtopics"), /* @__PURE__ */ React.createElement("div", null, /* @__PURE__ */ React.createElement("span", {
          style: { color: "blue" }
        }, "\u25A0"), " Second-level Topics "), /* @__PURE__ */ React.createElement("div", null, /* @__PURE__ */ React.createElement("span", {
          style: { color: "purple" }
        }, "\u25A0"), " Related Keywords")), /* @__PURE__ */ React.createElement(Tooltip4, {
          placement: "bottom",
          zIndex: 99999,
          title: tooltip,
          visible: !!tooltip
        }, /* @__PURE__ */ React.createElement(TopicalMapTreeChart, {
          topicalMapData,
          setTooltip
        }))),
        maskClassName: "ant-image-preview-close"
      }
    }));
  };
  var TopicalMapTreeChart = ({ topicalMapData, setTooltip }) => {
    const nivoData = convertToNivoData(topicalMapData[0]);
    const handleNodeClick = (node) => {
      const keyword = node.data.name;
      GenieHelpers2.copyToClipboard(keyword).then(() => {
        setTooltip("Copied");
        setTimeout(() => setTooltip(""), 2e3);
      }).catch(() => {
        console.log("error");
        setTooltip("Failed to copy");
        setTimeout(() => setTooltip(""), 2e3);
      });
    };
    return /* @__PURE__ */ React.createElement(Te2, {
      data: nivoData[0],
      mode: "dendogram",
      identity: "name",
      orientation: "horizontal",
      activeNodeSize: 24,
      inactiveNodeSize: 12,
      nodeColor: (node) => node.data.color,
      fixNodeColorAtDepth: 10,
      linkThickness: 2,
      activeLinkThickness: 8,
      inactiveLinkThickness: 2,
      layout: "left-to-right",
      labelsPosition: "outward",
      orientLabel: true,
      linkColor: {
        from: "target.color",
        modifiers: [["opacity", 0.4]]
      },
      margin: {
        top: 100,
        right: 200,
        bottom: 100,
        left: 295
      },
      motionConfig: "stiff",
      height: 1e3,
      meshDetectionRadius: 80,
      onNodeClick: handleNodeClick,
      renderLabel: ({ node, x: x3, y: y4 }) => /* @__PURE__ */ React.createElement("foreignObject", {
        x: x3,
        y: y4 - 15,
        width: 180,
        height: 30,
        style: { overflow: "visible" }
      }, /* @__PURE__ */ React.createElement("div", {
        style: {
          fontSize: "12px",
          color: "#333",
          backgroundColor: "rgba(255, 255, 255, 0.95)",
          padding: "4px 8px",
          borderRadius: "4px",
          whiteSpace: "nowrap",
          overflow: "hidden",
          textOverflow: "ellipsis",
          boxShadow: "0 1px 3px rgba(0,0,0,0.1)"
        }
      }, node.data.name))
    });
  };

  // assets/src/admin/js/AdminPages/KeywordResearchAdminPage/NLPScreen.js
  var { Spin: Spin2, Empty: Empty3 } = window.antd;
  var { useEffect: useEffect12, useState: useState14 } = window.React;
  var { HandleFetch: HandleFetch4, HandleResponse: HandleResponse4 } = window.getGenie.Components.Common.RequestManager;
  var { ComposeComponents: ComposeComponents9 } = window.getGenie.Components.Common.ReduxManager;
  var NLPScreen = ComposeComponents9(({ setInput, subslimitUsage, analyzeInput, nlpKeywordsData, setNlpKeywordsData }) => {
    const [loading, setLoading] = useState14(false);
    const [loadingText, setLoadingText] = useState14("Fetching the Data");
    useEffect12(() => {
      const fetchData = async () => {
        const { data: nlpKeywordsData2 } = await getData("nlpKeywordsData") || {};
        if (Array.isArray(nlpKeywordsData2)) {
          setNlpKeywordsData(nlpKeywordsData2);
          return;
        }
        if (!analyzeInput)
          return;
        setInput("currentScreenStatus", {
          currentScreen: "nlpScreen",
          isDataFetching: true
        });
        setLoading(true);
        showLoadingText_default(setLoadingText);
        HandleFetch4((res) => {
          HandleResponse4(res, async () => {
            const responseData = res?.data || [];
            if (Array.isArray(responseData)) {
              await saveData("nlpKeywordsData", responseData);
              setNlpKeywordsData(responseData);
            }
          });
          setInput("currentScreenStatus", {
            currentScreen: "nlpScreen",
            isDataFetching: false
          });
          setLoading(false);
        }, "nlpKeywords", { keyword: analyzeInput });
      };
      fetchData();
    }, []);
    return /* @__PURE__ */ React.createElement(Spin2, {
      spinning: loading,
      tip: loadingText
    }, /* @__PURE__ */ React.createElement("div", {
      className: "getgenie-nlp-screen"
    }, nlpKeywordsData.length ? /* @__PURE__ */ React.createElement("div", {
      className: "getgenie-grid-layout"
    }, nlpKeywordsData?.map((keyword, index) => /* @__PURE__ */ React.createElement(KeywordCard_default, {
      key: index,
      keyword: keyword?.keyword || keyword?.baseKeyword,
      ...keyword?.searchVolume && {
        volume: keyword.searchVolume.total || "0",
        competitionValue: keyword.searchVolume.competitionValue || "0",
        competition: keyword.searchVolume.competition || "Low",
        disabled: false
      },
      currentScreen: "nlpScreen",
      analyzeInput,
      subslimitUsage
    }))) : /* @__PURE__ */ React.createElement(Empty3, {
      image: Empty3.PRESENTED_IMAGE_SIMPLE
    })));
  }, ["setInput"]);
  var NLPScreen_default = NLPScreen;

  // assets/src/admin/js/AdminPages/KeywordResearchAdminPage/SemanticScreen.js
  var { Spin: Spin3, Empty: Empty4 } = window.antd;
  var { useEffect: useEffect13, useState: useState15 } = window.React;
  var { HandleFetch: HandleFetch5, HandleResponse: HandleResponse5 } = window.getGenie.Components.Common.RequestManager;
  var { ComposeComponents: ComposeComponents10 } = window.getGenie.Components.Common.ReduxManager;
  var SemanticScreen = ComposeComponents10(({ setInput, subslimitUsage, analyzeInput, semanticKeywordsData, setSemanticKeywordsData }) => {
    const [loading, setLoading] = useState15(false);
    const [loadingText, setLoadingText] = useState15("Fetching the Data");
    useEffect13(() => {
      const fetchData = async () => {
        const { data: semanticKeywordsData2 } = await getData("semanticKeywordsData") || {};
        if (Array.isArray(semanticKeywordsData2)) {
          setSemanticKeywordsData(semanticKeywordsData2);
          return;
        }
        if (!analyzeInput)
          return;
        setInput("currentScreenStatus", {
          currentScreen: "semanticScreen",
          isDataFetching: true
        });
        setLoading(true);
        showLoadingText_default(setLoadingText);
        HandleFetch5((res) => {
          HandleResponse5(res, async () => {
            const responseData = res?.data || [];
            if (Array.isArray(responseData)) {
              await saveData("semanticKeywordsData", responseData);
              setSemanticKeywordsData(responseData);
            }
          });
          setInput("currentScreenStatus", {
            currentScreen: "semanticScreen",
            isDataFetching: false
          });
          setLoading(false);
        }, "semanticKeywords", { keyword: analyzeInput });
      };
      fetchData();
    }, []);
    return /* @__PURE__ */ React.createElement(Spin3, {
      spinning: loading,
      tip: loadingText
    }, /* @__PURE__ */ React.createElement("div", {
      className: "getgenie-semantic-screen"
    }, semanticKeywordsData?.length ? /* @__PURE__ */ React.createElement("div", {
      className: "getgenie-grid-layout"
    }, semanticKeywordsData?.map((keyword, index) => /* @__PURE__ */ React.createElement(KeywordCard_default, {
      key: index,
      keyword: keyword?.keyword || keyword?.baseKeyword,
      ...keyword?.searchVolume && {
        volume: keyword.searchVolume.total || "0",
        competitionValue: keyword.searchVolume.competitionValue || "0",
        competition: keyword.searchVolume.competition || "Low",
        disabled: false
      },
      currentScreen: "semanticScreen",
      analyzeInput,
      subslimitUsage
    }))) : /* @__PURE__ */ React.createElement(Empty4, {
      image: Empty4.PRESENTED_IMAGE_SIMPLE
    })));
  }, ["setInput"]);
  var SemanticScreen_default = SemanticScreen;

  // assets/src/admin/js/AdminPages/KeywordResearchAdminPage/index.js
  var { ComposeComponents: ComposeComponents11 } = window.getGenie.Components.Common.ReduxManager;
  var { useState: useState16, useEffect: useEffect14 } = window.React;
  var { HandleFetch: HandleFetch6, HandleResponse: HandleResponse6 } = window.getGenie.Components.Common.RequestManager;
  var { Button: Button5, Form: Form3, Dropdown, Input: Input3, Typography: Typography6, Tooltip: Tooltip5, Skeleton } = window.antd;
  var { Libs: Libs8 } = window.getGenie.Components.Common;
  var KeywordResearchAdminPage = ComposeComponents11(({ getInputs, setInput, limitUsage }) => {
    const [loading, setLoading] = useState16(false);
    const [loadingText, setLoadingText] = useState16("Fetching the Data");
    const [showTooltip, setShowTooltip] = useState16("");
    const [nlpKeywordsData, setNlpKeywordsData] = useState16([]);
    const [semanticKeywordsData, setSemanticKeywordsData] = useState16([]);
    const [prevKeyword, setPrevKeyword] = useState16("");
    const [analyzeInput, setAnalyzeInput] = useState16("");
    const [currentScreen, setCurrentScreen] = useState16("analyzeScreen");
    const [analyzeKeywordData, setAnalyzeKeywordData] = useState16([]);
    const [relatedKeywordsData, setRelatedKeywordsData] = useState16([]);
    const [isRefetch, setIsRefetch] = useState16(false);
    const [form] = Form3.useForm();
    const { currentScreen: dataFetchingScreen, isDataFetching } = getInputs["currentScreenStatus"] || {};
    const subscriptionKey = Object.keys(limitUsage.subscriptionUsagesLimit || {})[0];
    const subslimitUsage = limitUsage.subscriptionUsagesLimit?.[subscriptionKey]?.limits;
    useEffect14(() => {
      const fetchData = async () => {
        const { data: keyword } = await getData("analyzeInput") || {};
        if (keyword) {
          form.setFieldsValue({ keyword });
          setAnalyzeInput(keyword);
          setPrevKeyword(keyword);
        }
        const { data: analyzeKeyword } = await getData("analyzeKeywordData") || {};
        Array.isArray(analyzeKeyword) && setAnalyzeKeywordData(analyzeKeyword);
        const { data: relatedKeywordsData2 } = await getData("relatedKeywordsData") || {};
        Array.isArray(relatedKeywordsData2) && setRelatedKeywordsData(relatedKeywordsData2);
      };
      fetchData();
    }, []);
    const items = [
      {
        label: /* @__PURE__ */ React.createElement("div", {
          gap: 5,
          onClick: () => downloadXLSX(getCurrentKeywordsData().keywordsData, getCurrentKeywordsData().fileName)
        }, /* @__PURE__ */ React.createElement("span", {
          style: { marginRight: 5, fontSize: 14 },
          className: "getgenie-icon-xlsx"
        }), /* @__PURE__ */ React.createElement("span", null, "Download XLSX")),
        key: "xlsx"
      },
      {
        label: /* @__PURE__ */ React.createElement("div", {
          gap: 5,
          onClick: () => downloadCSV(getCurrentKeywordsData().keywordsData, getCurrentKeywordsData().fileName)
        }, /* @__PURE__ */ React.createElement("span", {
          style: { marginRight: 5, fontSize: 14 },
          className: "getgenie-icon-csv"
        }), /* @__PURE__ */ React.createElement("span", null, "Download CSV")),
        key: "csv"
      },
      {
        label: /* @__PURE__ */ React.createElement(Tooltip5, {
          placement: "bottom",
          zIndex: 99999,
          title: showTooltip === "Copied" ? "Copied" : "",
          visible: showTooltip === "Copied"
        }, /* @__PURE__ */ React.createElement("div", {
          gap: 5,
          onClick: (e7) => {
            e7.stopPropagation();
            handleCopyToClipboard(getCurrentKeywordsData().keywordsData);
          }
        }, /* @__PURE__ */ React.createElement("span", {
          style: { marginRight: 5, fontSize: 14 },
          className: "getgenie-icon-copy-to-clipboard"
        }), /* @__PURE__ */ React.createElement("span", null, "Copy to clipboard"))),
        key: "clipboard"
      }
    ];
    const navigationList = [
      {
        label: "Related Keywords",
        key: "analyzeScreen",
        children: /* @__PURE__ */ React.createElement(AnalyzeScreen_default, {
          subslimitUsage,
          relatedKeywordsData,
          analyzeInput,
          loading,
          loadingText,
          setLoadingText,
          isRefetch
        }),
        disabled: isDataFetching && dataFetchingScreen !== "analyzeScreen"
      },
      {
        label: "NLP Keywords",
        key: "nlpScreen",
        children: /* @__PURE__ */ React.createElement(NLPScreen_default, {
          subslimitUsage,
          analyzeInput,
          isRefetch,
          nlpKeywordsData,
          setNlpKeywordsData
        }),
        disabled: isDataFetching && dataFetchingScreen !== "nlpScreen" || loading || relatedKeywordsData?.length === 0
      },
      {
        label: "Semantic Keywords",
        key: "semanticScreen",
        children: /* @__PURE__ */ React.createElement(SemanticScreen_default, {
          subslimitUsage,
          analyzeInput,
          isRefetch,
          semanticKeywordsData,
          setSemanticKeywordsData
        }),
        disabled: isDataFetching && dataFetchingScreen !== "semanticScreen" || loading || relatedKeywordsData?.length === 0
      }
    ];
    const handleAnalyzeKeyword = async () => {
      if (!analyzeInput)
        return;
      setLoading(true);
      setCurrentScreen("analyzeScreen");
      setRelatedKeywordsData([]);
      setNlpKeywordsData([]);
      setSemanticKeywordsData([]);
      await clearData();
      setInput("currentScreenStatus", {
        currentScreen: "analyzeScreen",
        isDataFetching: true
      });
      setIsRefetch((prev) => !prev);
      showLoadingText_default(setLoadingText);
      HandleFetch6(async (res) => {
        HandleResponse6(res, async () => {
          if (Array.isArray(res?.data)) {
            const responseData = res.data || [];
            const analyzePrimaryKeyword = responseData.find((item) => item?.keyword?.toLowerCase() === analyzeInput?.toLowerCase());
            const analyzeKeywordArr = responseData.filter((item) => item?.keyword?.toLowerCase() !== analyzeInput?.toLowerCase());
            await saveData("analyzeInput", analyzeInput);
            await saveData("analyzeKeywordData", [analyzePrimaryKeyword]);
            await saveData("relatedKeywordsData", analyzeKeywordArr);
            setPrevKeyword(analyzeInput);
            setAnalyzeKeywordData([analyzePrimaryKeyword]);
            setRelatedKeywordsData(analyzeKeywordArr);
          }
        });
        setInput("currentScreenStatus", {
          currentScreen: "analyzeScreen",
          isDataFetching: false
        });
        setLoading(false);
      }, "relatedKeywords", { keyword: analyzeInput });
    };
    const handleCopyToClipboard = (data) => {
      copyToClipboard(data);
      setShowTooltip("Copied");
      setTimeout(() => setShowTooltip(""), 2e3);
    };
    const getCurrentKeywordsData = () => {
      switch (currentScreen) {
        case "nlpScreen":
          return { keywordsData: nlpKeywordsData, fileName: "nlp-keywords" };
        case "semanticScreen":
          return { keywordsData: semanticKeywordsData, fileName: "semantic-keywords" };
        default:
          return { keywordsData: relatedKeywordsData, fileName: "related-keywords" };
      }
    };
    const isDropdownDisabled = () => {
      return getCurrentKeywordsData().keywordsData?.length <= 0;
    };
    const handleKeywordChange = (e7) => {
      const { value } = e7.target;
      setAnalyzeInput(value.trim());
    };
    return /* @__PURE__ */ React.createElement("div", {
      className: "getgenie-keyword-research"
    }, /* @__PURE__ */ React.createElement(HeaderAdminPage, null), /* @__PURE__ */ React.createElement("div", {
      className: "getgenie-keyword-research-wrapper"
    }, /* @__PURE__ */ React.createElement("div", {
      className: `getgenie-keyword-research-page ${relatedKeywordsData?.length === 0 && !loading ? "empty-related-keyword" : ""}`
    }, /* @__PURE__ */ React.createElement("div", {
      className: "getgenie-keyword-research-header"
    }, /* @__PURE__ */ React.createElement("div", null, /* @__PURE__ */ React.createElement(Typography6.Title, {
      level: 3,
      className: "header-title"
    }, "Keyword Research"), /* @__PURE__ */ React.createElement(Typography6.Text, {
      className: "header-sub-title"
    }, "Find advanced and untapped keywords")), /* @__PURE__ */ React.createElement(Dropdown, {
      menu: {
        items
      },
      trigger: ["click"],
      placement: "bottomRight",
      overlayStyle: { width: 200 },
      disabled: isDropdownDisabled()
    }, /* @__PURE__ */ React.createElement(Button5, {
      className: "download-button"
    }, /* @__PURE__ */ React.createElement("span", {
      style: { marginRight: 5, fontSize: 14 },
      className: "getgenie-icon-outline-download"
    }), /* @__PURE__ */ React.createElement("span", null, "Download"), /* @__PURE__ */ React.createElement("span", {
      style: { marginLeft: 5 },
      className: "getgenie-icon-arrow_down"
    })))), /* @__PURE__ */ React.createElement(Form3, {
      form,
      onFinish: handleAnalyzeKeyword,
      className: "getgenie-keyword-research-form",
      colon: false,
      size: "large"
    }, /* @__PURE__ */ React.createElement("div", {
      gap: 12,
      className: "getgenie-keyword-research-form-item"
    }, /* @__PURE__ */ React.createElement(Form3.Item, {
      onChange: handleKeywordChange,
      name: "keyword",
      label: "Keyword",
      className: "getgenie-keyword-research-input"
    }, /* @__PURE__ */ React.createElement(Input3, {
      style: { minHeight: 40 },
      placeholder: "Enter a keyword"
    })), /* @__PURE__ */ React.createElement(Form3.Item, {
      label: /* @__PURE__ */ React.createElement("span", {
        style: { opacity: 0 }
      }, "analyze button")
    }, /* @__PURE__ */ React.createElement(Button5, {
      loading,
      className: "getgenie-keyword-research-analyze-btn",
      type: "primary",
      htmlType: "submit",
      disabled: loading || !analyzeInput || prevKeyword === analyzeInput
    }, "Analyze keyword"))))), (loading || !!relatedKeywordsData?.length) && /* @__PURE__ */ React.createElement("div", {
      className: "keyword-analyze-wrapper"
    }, /* @__PURE__ */ React.createElement("div", {
      className: "primary-keyword"
    }, /* @__PURE__ */ React.createElement(Typography6.Title, {
      className: "report-title"
    }, "Your Primary Keyword Data"), /* @__PURE__ */ React.createElement(React.Fragment, null, loading ? /* @__PURE__ */ React.createElement(Skeleton, {
      active: true,
      paragraph: { rows: 1 }
    }) : /* @__PURE__ */ React.createElement(React.Fragment, null, !!analyzeKeywordData?.length ? /* @__PURE__ */ React.createElement("div", {
      className: "getgenie-grid-layout"
    }, analyzeKeywordData?.map((keyword, index) => /* @__PURE__ */ React.createElement(KeywordCard_default, {
      key: index,
      keyword: keyword?.keyword || keyword?.baseKeyword,
      ...keyword?.searchVolume && {
        volume: keyword.searchVolume.total || "0",
        competitionValue: keyword.searchVolume.competitionValue || "0",
        competition: keyword.searchVolume.competition || "Low",
        disabled: false
      },
      mainKeyword: true,
      currentScreen,
      analyzeInput,
      subslimitUsage
    }))) : "-"))), /* @__PURE__ */ React.createElement("div", {
      className: "keyword-analyze"
    }, /* @__PURE__ */ React.createElement(Typography6.Title, {
      className: "report-title"
    }, "Analyzed Keywords' Data"), /* @__PURE__ */ React.createElement(Libs8.Navbar, {
      tabPaneList: navigationList,
      activeKey: currentScreen,
      destroyInactiveTabPane: true,
      handleActiveKey: (screen) => setCurrentScreen(screen),
      className: "keyword-analyze-navbar"
    })))));
  }, ["getInputs", "setInput", "limitUsage"]);
  var KeywordResearchAdminPage_default = KeywordResearchAdminPage;

  // assets/src/admin/js/wp-admin-pages.js
  window.getGenie.Components.AdminPages = {
    HelpAdminPage,
    HistoryAdminPage: HistoryAdminPage_default,
    LicenseAdminPage: LicenseAdminPage_default,
    SettingsAdminPage: SettingsAdminPage_default,
    WriteForMeAdminPage: WriteForMeAdminPage_default,
    GettingStarted: GettingStarted_default,
    KeywordResearchAdminPage: KeywordResearchAdminPage_default,
    RoadmapAdminPage: RoadmapAdminPage_default
  };
})();
/*
object-assign
(c) Sindre Sorhus
@license MIT
*/
/*!
 * @kurkle/color v0.2.1
 * https://github.com/kurkle/color#readme
 * (c) 2022 Jukka Kurkela
 * Released under the MIT License
 */
/*!
 * Chart.js v3.9.1
 * https://www.chartjs.org
 * (c) 2022 Chart.js Contributors
 * Released under the MIT License
 */
/*!
 * chartjs-plugin-datalabels v2.1.0
 * https://chartjs-plugin-datalabels.netlify.app
 * (c) 2017-2022 chartjs-plugin-datalabels contributors
 * Released under the MIT license
 */
/*! cpexcel.js (C) 2013-present SheetJS -- http://sheetjs.com */
/*! cputils.js (C) 2013-present SheetJS -- http://sheetjs.com */
/*! dom-to-image-more 16-10-2024 */
/*! sheetjs (C) 2013-present SheetJS -- http://sheetjs.com */
/*! xlsx.js (C) 2013-present SheetJS -- http://sheetjs.com */
/** @license React v16.13.1
 * react-is.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
/** @license React v17.0.2
 * react-jsx-runtime.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
